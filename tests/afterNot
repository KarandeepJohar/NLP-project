============================= test session starts ==============================
platform darwin -- Python 2.7.8, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
rootdir: /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests, inifile: 
collected 341 items

test_compute.py ...FF...............................F.........F.F...F...FF..F.F....FFFF..FF......F.FF.F.....FFF.................................FF........FF..FF..F.F..FFF.....FFFF..FF.......FF..........F....F..........F..................FF......FF..FF..F...........FFFFFFF..F..FFFF....FFFF.......FFFFFFF..F..................FF........FFF.FF..FFFF........FFE

==================================== ERRORS ====================================
________________________ ERROR at setup of test_factoid ________________________
file /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py, line 45
  def test_factoid(param_factoid):
        fixture 'param_factoid' not found
        available fixtures: tmpdir_factory, pytestconfig, cache, recwarn, monkeypatch, record_xml_property, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py:45
=================================== FAILURES ===================================
______________________________ test_yesno[param3] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118852e60>, (<src.tfidf.TF_IDF object at 0x11606ea10>, set(['alessandro', 'alessandro_volta', 'volta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x118852e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.47220176458358765, {u'tokens': [u'*', u'-LRB-', u'An', u'additional', u'invention', u'pioneered', u'by', u'Volta', u',', u'was', u'the', u'remotely', u'operated', u'pistol', u'.'], u'lemmas': [u'*', u'-lrb-', u'a', u'additional', u'invention', u'pioneer', u'by', u'Volta', u',', u'be', u'the', u'remotely', u'operate', u'pistol', u'.'], u'pos': [u'SYM', u'-LRB-', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'VBD', u'DT', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[3333, 3334], [3336, 3337], [3338, 3340], [3341, 3351], [3352, 3361], [3362, 3371], [3372, 3374], [3375, 3380], [3380, 3381], [3382, 3385], [3386, 3389], [3390, 3398], [3399, 3407], [3408, 3414], [3414, 3415]]}) 
answer: set([u'invent'])
candidate Sentence: (0.10924229025840759, {u'tokens': [u'In', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocated', u'by', u'Galvani', u',', u'he', u'invented', u'the', u'voltaic', u'pile', u',', u'an', u'early', u'electric', u'battery', u',', u'which', u'produced', u'a', u'steady', u'electric', u'current', u'.'], u'lemmas': [u'in', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocate', u'by', u'Galvani', u',', u'he', u'invent', u'the', u'voltaic', u'pile', u',', u'a', u'early', u'electric', u'battery', u',', u'which', u'produce', u'a', u'steady', u'electric', u'current', u'.'], u'pos': [u'IN', u'CD', u',', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u',', u'WDT', u'VBD', u'DT', u'JJ', u'JJ', u'JJ', u'.'], u'char_offsets': [[2451, 2453], [2454, 2458], [2458, 2459], [2460, 2462], [2463, 2466], [2467, 2473], [2474, 2476], [2477, 2478], [2479, 2491], [2492, 2504], [2505, 2509], [2510, 2513], [2514, 2522], [2523, 2531], [2532, 2541], [2542, 2544], [2545, 2552], [2552, 2553], [2554, 2556], [2557, 2565], [2566, 2569], [2570, 2577], [2578, 2582], [2582, 2583], [2584, 2586], [2587, 2592], [2593, 2601], [2602, 2609], [2609, 2610], [2611, 2616], [2617, 2625], [2626, 2627], [2628, 2634], [2635, 2643], [2644, 2651], [2651, 2652]]}) 
answer: set([u'operate', u'pistol', u'remotely'])
candidate Sentence: (0.072616934776306152, {u'tokens': [u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 5], [6, 16], [17, 25], [26, 33], [34, 43], [44, 49], [50, 51], [51, 59], [60, 62], [62, 63], [64, 68], [69, 70], [71, 76], [77, 78], [78, 79], [80, 84], [84, 85], [86, 89], [90, 92], [93, 100], [101, 109], [110, 118], [118, 119], [120, 121], [121, 126], [126, 127], [128, 135], [136, 139], [140, 147], [148, 150], [151, 154], [155, 158], [159, 161], [162, 175], [175, 176], [176, 177], [178, 187], [188, 198], [199, 204], [204, 205], [206, 210], [210, 211]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])
candidate Sentence: (0.066992253065109253, {u'tokens': [u'*', u'History', u'of', u'the', u'battery', u'*', u'History', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Volta', u'and', u'the', u'``', u'Pile', u"''", u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'lemmas': [u'*', u'history', u'of', u'the', u'battery', u'*', u'history', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Volta', u'and', u'the', u'``', u'pile', u"''", u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'CC', u'DT', u'``', u'VB', u"''", u'SYM', u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP'], u'char_offsets': [[5833, 5834], [5835, 5842], [5843, 5845], [5846, 5849], [5850, 5857], [5858, 5859], [5860, 5867], [5868, 5870], [5871, 5874], [5875, 5883], [5884, 5894], [5895, 5901], [5902, 5903], [5905, 5910], [5911, 5914], [5915, 5918], [5919, 5920], [5920, 5924], [5924, 5925], [5926, 5927], [5929, 5934], [5935, 5945], [5946, 5954], [5955, 5962], [5963, 5972], [5973, 5978], [5978, 5979], [5980, 5981], [5982, 5989], [5990, 5992], [5993, 6009]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])
candidate Sentence: (0.066288046538829803, {u'tokens': [u'The', u'reactions', u'in', u'this', u'cell', u'are', u'as', u'follows', u':', u':', u'Zn', u'\u2192', u'Zn', u'2', u'+', u'+', u'2e', u'-', u':', u'2H', u'+', u'+', u'2e', u'-', u'\u2192', u'H', u'2', u'The', u'copper', u'does', u'not', u'react', u',', u'functioning', u'as', u'an', u'electrode', u'for', u'the', u'reaction', u'.'], u'lemmas': [u'the', u'reaction', u'in', u'this', u'cell', u'be', u'as', u'follow', u':', u':', u'zn', u'\u2192', u'zn', u'2', u'+', u'+', u'2e', u'-', u':', u'2h', u'+', u'+', u'2e', u'-', u'\u2192', u'h', u'2', u'the', u'copper', u'do', u'not', u'react', u',', u'function', u'as', u'a', u'electrode', u'for', u'the', u'reaction', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'IN', u'VBZ', u':', u':', u'NN', u'CD', u'NN', u'CD', u'CC', u'CC', u'SYM', u':', u':', u'NN', u'CC', u'CC', u'SYM', u':', u'NN', u'NN', u'CD', u'DT', u'NN', u'VBZ', u'RB', u'VB', u',', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[4459, 4462], [4463, 4472], [4473, 4475], [4476, 4480], [4481, 4485], [4486, 4489], [4490, 4492], [4493, 4500], [4500, 4501], [4502, 4503], [4504, 4506], [4509, 4510], [4513, 4515], [4516, 4517], [4517, 4518], [4520, 4521], [4522, 4524], [4525, 4526], [4527, 4528], [4529, 4531], [4532, 4533], [4535, 4536], [4538, 4540], [4541, 4542], [4546, 4547], [4550, 4551], [4552, 4553], [4554, 4557], [4558, 4564], [4565, 4569], [4570, 4573], [4574, 4579], [4579, 4580], [4581, 4592], [4593, 4595], [4596, 4598], [4599, 4608], [4609, 4612], [4613, 4616], [4617, 4625], [4625, 4626]]}) 
answer: set([u'operate', u'pistol', u'invent', u'remotely'])

Did Alessandro Volta invent the remotely operated pistol?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 7 documents, 355 characters, 59 tokens, 50.7 char/doc, 8.4 tok/doc RATES: 0.787 doc/sec, 6.6 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 8 documents, 412 characters, 68 tokens, 51.5 char/doc, 8.5 tok/doc RATES: 0.892 doc/sec, 7.6 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x118852e60>.answer
______________________________ test_yesno[param4] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118853170>, (<src.tfidf.TF_IDF object at 0x11606ea10>, set(['alessandro', 'alessandro_volta', 'volta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Volta was taught in public schools.') == True
E                +  where 'Volta was taught in public schools.' = <src.question_processing.Question_parser instance at 0x118853170>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.61436331272125244, {u'tokens': [u'Volta', u'was', u'born', u'in', u'Como', u',', u'Italy', u'and', u'was', u'taught', u'in', u'the', u'public', u'schools', u'there', u'.'], u'lemmas': [u'Volta', u'be', u'bear', u'in', u'Como', u',', u'Italy', u'and', u'be', u'teach', u'in', u'the', u'public', u'school', u'there', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u',', u'NNP', u'CC', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'RB', u'.'], u'char_offsets': [[375, 380], [381, 384], [385, 389], [390, 392], [393, 397], [397, 398], [399, 404], [405, 408], [409, 412], [413, 419], [420, 422], [423, 426], [427, 433], [434, 441], [442, 447], [447, 448]]}) 
answer: set([])
candidate Sentence: (0.14638951420783997, {u'tokens': [u'The', u'primitive', u'cell', u'is', u'widely', u'used', u'in', u'schools', u'to', u'demonstrate', u'the', u'laws', u'of', u'electricity', u'and', u'is', u'known', u'as', u'the', u'Lemon', u'battery', u'.'], u'lemmas': [u'the', u'primitive', u'cell', u'be', u'widely', u'use', u'in', u'school', u'to', u'demonstrate', u'the', u'law', u'of', u'electricity', u'and', u'be', u'know', u'as', u'the', u'Lemon', u'battery', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NNS', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBZ', u'VBN', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4966, 4969], [4970, 4979], [4980, 4984], [4985, 4987], [4988, 4994], [4995, 4999], [5000, 5002], [5003, 5010], [5011, 5013], [5014, 5025], [5026, 5029], [5030, 5034], [5035, 5037], [5038, 5049], [5050, 5053], [5054, 5056], [5057, 5062], [5063, 5065], [5066, 5069], [5070, 5075], [5076, 5083], [5083, 5084]]}) 
answer: set([u'teach', u'public'])
candidate Sentence: (0.096548967063426971, {u'tokens': [u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 5], [6, 16], [17, 25], [26, 33], [34, 43], [44, 49], [50, 51], [51, 59], [60, 62], [62, 63], [64, 68], [69, 70], [71, 76], [77, 78], [78, 79], [80, 84], [84, 85], [86, 89], [90, 92], [93, 100], [101, 109], [110, 118], [118, 119], [120, 121], [121, 126], [126, 127], [128, 135], [136, 139], [140, 147], [148, 150], [151, 154], [155, 158], [159, 161], [162, 175], [175, 176], [176, 177], [178, 187], [188, 198], [199, 204], [204, 205], [206, 210], [210, 211]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.085345305502414703, {u'tokens': [u'*', u'History', u'of', u'the', u'battery', u'*', u'History', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Volta', u'and', u'the', u'``', u'Pile', u"''", u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'lemmas': [u'*', u'history', u'of', u'the', u'battery', u'*', u'history', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Volta', u'and', u'the', u'``', u'pile', u"''", u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'CC', u'DT', u'``', u'VB', u"''", u'SYM', u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP'], u'char_offsets': [[5833, 5834], [5835, 5842], [5843, 5845], [5846, 5849], [5850, 5857], [5858, 5859], [5860, 5867], [5868, 5870], [5871, 5874], [5875, 5883], [5884, 5894], [5895, 5901], [5902, 5903], [5905, 5910], [5911, 5914], [5915, 5918], [5919, 5920], [5920, 5924], [5924, 5925], [5926, 5927], [5929, 5934], [5935, 5945], [5946, 5954], [5955, 5962], [5963, 5972], [5973, 5978], [5978, 5979], [5980, 5981], [5982, 5989], [5990, 5992], [5993, 6009]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.044516365975141525, {u'tokens': [u'He', u'is', u'buried', u'in', u'Camnago', u'Volta', u'.'], u'lemmas': [u'he', u'be', u'bury', u'in', u'Camnago', u'Volta', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[5290, 5292], [5293, 5295], [5296, 5302], [5303, 5305], [5306, 5313], [5314, 5319], [5319, 5320]]}) 
answer: set([u'teach', u'school', u'public'])

Was Alessandro Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Volta was taught in public schools.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 9 documents, 458 characters, 76 tokens, 50.9 char/doc, 8.4 tok/doc RATES: 0.997 doc/sec, 8.4 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 10 documents, 504 characters, 84 tokens, 50.4 char/doc, 8.4 tok/doc RATES: 1.100 doc/sec, 9.2 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Volta was taught in public schools.') == True
 +  where 'Volta was taught in public schools.' = <src.question_processing.Question_parser instance at 0x118853170>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param36] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859878>, (<src.tfidf.TF_IDF object at 0x1128f78d0>, set(['arabic', 'arabic_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x118859878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24174204468727112, {u'tokens': [u'By', u'the', u'fourth', u'century', u'AD', u',', u'the', u'Arab', u'kingdoms', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerged', u'in', u'Central', u'Arabia', u'.'], u'lemmas': [u'by', u'the', u'fourth', u'century', u'ad', u',', u'the', u'Arab', u'kingdom', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerge', u'in', u'Central', u'Arabia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'DT', u'NNP', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u',', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[7969, 7971], [7972, 7975], [7976, 7982], [7983, 7990], [7991, 7993], [7993, 7994], [7995, 7998], [7999, 8003], [8004, 8012], [8013, 8015], [8016, 8019], [8020, 8028], [8029, 8031], [8032, 8040], [8041, 8045], [8045, 8046], [8047, 8050], [8051, 8061], [8062, 8064], [8065, 8073], [8074, 8079], [8080, 8083], [8084, 8091], [8092, 8099], [8100, 8107], [8108, 8110], [8111, 8118], [8119, 8125], [8125, 8126]]}) 
answer: set([u'semitic'])
candidate Sentence: (0.11941462755203247, {u'tokens': [u'``', u'Arabic', u'language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[534, 535], [535, 541], [542, 550], [550, 551], [551, 552]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11941462755203247, {u'tokens': [u'``', u'Arabic', u'Language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[2978, 2979], [2979, 2985], [2986, 2994], [2994, 2995], [2995, 2996]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11727046966552734, {u'tokens': [u'Arabic', u'is', u'the', u'language', u'of', u'the', u'Qur', u'`', u'an', u'.'], u'lemmas': [u'arabic', u'be', u'the', u'language', u'of', u'the', u'Qur', u'`', u'a', u'.'], u'pos': [u'JJ', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'``', u'DT', u'.'], u'char_offsets': [[6650, 6656], [6657, 6659], [6660, 6663], [6664, 6672], [6673, 6675], [6676, 6679], [6680, 6683], [6683, 6684], [6684, 6686], [6686, 6687]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11272040009498596, {u'tokens': [u'Most', u'linguists', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'lemmas': [u'most', u'linguist', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'RB', u'IN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[3591, 3595], [3596, 3605], [3606, 3610], [3611, 3613], [3614, 3616], [3617, 3618], [3619, 3627], [3628, 3636], [3637, 3643], [3644, 3648], [3649, 3651], [3652, 3653], [3654, 3661], [3662, 3664], [3665, 3671], [3671, 3672]]}) 
answer: set([u'semitic', u'central'])

Is Arabic a Central Semitic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x118859878>.answer
_____________________________ test_yesno[param46] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859b48>, (<src.tfidf.TF_IDF object at 0x11606ee50>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859b48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31385570764541626, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43005, 43008], [43009, 43015], [43016, 43028], [43029, 43038], [43039, 43041], [43042, 43045], [43046, 43048], [43049, 43052], [43053, 43063], [43064, 43074], [43075, 43077], [43078, 43081], [43082, 43087], [43087, 43088], [43090, 43092], [43093, 43099], [43099, 43101], [43102, 43108], [43109, 43118], [43119, 43123], [43123, 43124]]}) 
answer: set([u'city', u'germany', u'capital'])
candidate Sentence: (0.28370743989944458, {u'tokens': [u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [7, 8], [9, 10], [12, 13], [14, 16], [17, 20], [21, 28], [29, 33], [34, 37], [38, 41], [42, 44], [45, 47], [48, 54], [55, 57], [58, 65], [65, 66]]}) 
answer: set([])
candidate Sentence: (0.22739590704441071, {u'tokens': [u'Berlin', u'is', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'is', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'is', u'Schloss', u'Bellevue', u'.'], u'lemmas': [u'Berlin', u'be', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'be', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'be', u'Schloss', u'Bellevue', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u',', u'WP$', u'JJ', u'NN', u'VBZ', u'NNP', u'NNP', u'.'], u'char_offsets': [[18681, 18687], [18688, 18690], [18691, 18694], [18695, 18702], [18703, 18705], [18706, 18709], [18710, 18717], [18718, 18726], [18727, 18729], [18730, 18737], [18738, 18741], [18742, 18744], [18745, 18748], [18749, 18753], [18754, 18756], [18757, 18760], [18761, 18770], [18771, 18773], [18774, 18781], [18781, 18782], [18783, 18788], [18789, 18797], [18798, 18807], [18808, 18810], [18811, 18818], [18819, 18827], [18827, 18828]]}) 
answer: set([u'city'])
candidate Sentence: (0.18738408386707306, {u'tokens': [u'On', u'3', u'October', u'1990', u'the', u'two', u'parts', u'of', u'Germany', u'were', u'reunified', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'became', u'the', u'German', u'capital', u'according', u'to', u'the', u'unification', u'treaty', u'.'], u'lemmas': [u'on', u'3', u'October', u'1990', u'the', u'two', u'part', u'of', u'Germany', u'be', u'reunify', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'become', u'the', u'german', u'capital', u'accord', u'to', u'the', u'unification', u'treaty', u'.'], u'pos': [u'IN', u'CD', u'NNP', u'CD', u'DT', u'CD', u'NNS', u'IN', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'CC', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'VBG', u'TO', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[10050, 10052], [10053, 10054], [10055, 10062], [10063, 10067], [10068, 10071], [10072, 10075], [10076, 10081], [10082, 10084], [10085, 10092], [10093, 10097], [10098, 10107], [10108, 10110], [10111, 10114], [10115, 10122], [10123, 10131], [10132, 10134], [10135, 10142], [10142, 10143], [10144, 10147], [10148, 10154], [10155, 10161], [10162, 10165], [10166, 10172], [10173, 10180], [10181, 10190], [10191, 10193], [10194, 10197], [10198, 10209], [10210, 10216], [10216, 10217]]}) 
answer: set([u'city'])
candidate Sentence: (0.16097559034824371, {u'tokens': [u'Following', u'German', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regained', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'hosting', u'147', u'foreign', u'embassies', u'.'], u'lemmas': [u'follow', u'german', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regain', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'host', u'147', u'foreign', u'embassy', u'.'], u'pos': [u'VBG', u'JJ', u'NN', u'IN', u'CD', u',', u'DT', u'NN', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'VBG', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[1061, 1070], [1071, 1077], [1078, 1091], [1092, 1094], [1095, 1099], [1099, 1100], [1101, 1104], [1105, 1109], [1110, 1118], [1119, 1122], [1123, 1129], [1130, 1132], [1133, 1136], [1137, 1144], [1145, 1147], [1148, 1151], [1152, 1159], [1160, 1167], [1168, 1171], [1172, 1179], [1180, 1189], [1189, 1190]]}) 
answer: set([])

Is Berlin the capital city of Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859b48>.answer
_____________________________ test_yesno[param48] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859bd8>, (<src.tfidf.TF_IDF object at 0x11606ee50>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859bd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32446944713592529, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43005, 43008], [43009, 43015], [43016, 43028], [43029, 43038], [43039, 43041], [43042, 43045], [43046, 43048], [43049, 43052], [43053, 43063], [43064, 43074], [43075, 43077], [43078, 43081], [43082, 43087], [43087, 43088], [43090, 43092], [43093, 43099], [43099, 43101], [43102, 43108], [43109, 43118], [43119, 43123], [43123, 43124]]}) 
answer: set([u'city', u'germany', u'largest'])
candidate Sentence: (0.23051321506500244, {u'tokens': [u'With', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'is', u'Germany', u"'s", u'largest', u'city', u'.'], u'lemmas': [u'with', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'be', u'Germany', u"'s", u'largest', u'city', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'CD', u'CD', u'NNS', u',', u'NNP', u'VBZ', u'NNP', u'POS', u'JJS', u'NN', u'.'], u'char_offsets': [[67, 71], [72, 73], [74, 84], [85, 87], [88, 91], [92, 99], [100, 106], [106, 107], [108, 114], [115, 117], [118, 125], [125, 127], [128, 135], [136, 140], [140, 141]]}) 
answer: set([])
candidate Sentence: (0.14989200234413147, {u'tokens': [u'The', u'Berlin', u'Hauptbahnhof', u'is', u'the', u'largest', u'crossing', u'station', u'in', u'Europe', u'.'], u'lemmas': [u'the', u'Berlin', u'Hauptbahnhof', u'be', u'the', u'largest', u'cross', u'station', u'in', u'Europe', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[48115, 48118], [48119, 48125], [48126, 48138], [48139, 48141], [48142, 48145], [48146, 48153], [48154, 48162], [48163, 48170], [48171, 48173], [48174, 48180], [48180, 48181]]}) 
answer: set([u'city', u'germany'])
candidate Sentence: (0.13640093803405762, {u'tokens': [u'It', u'is', u'the', u'largest', u'remaining', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'lemmas': [u'it', u'be', u'the', u'largest', u'remain', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[14574, 14576], [14577, 14579], [14580, 14583], [14584, 14591], [14592, 14601], [14602, 14610], [14611, 14613], [14614, 14617], [14618, 14622], [14622, 14624], [14625, 14635], [14636, 14644], [14644, 14645]]}) 
answer: set([u'germany'])
candidate Sentence: (0.13175135850906372, {u'tokens': [u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [7, 8], [9, 10], [12, 13], [14, 16], [17, 20], [21, 28], [29, 33], [34, 37], [38, 41], [42, 44], [45, 47], [48, 54], [55, 57], [58, 65], [65, 66]]}) 
answer: set([u'largest'])

Is Berlin the largest city in Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859bd8>.answer
_____________________________ test_yesno[param52] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859cf8>, (<src.tfidf.TF_IDF object at 0x11606ee50>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the Gendarmenmarkt borders the French Cathedral.')
E                +    where 'Yes, the Gendarmenmarkt borders the French Cathedral.' = <src.question_processing.Question_parser instance at 0x118859cf8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39484119415283203, {u'tokens': [u'German', u'Cathedral', u'and', u'Concert', u'Hall', u'at', u'the', u'Gendarmenmarkt', u'.'], u'lemmas': [u'german', u'cathedral', u'and', u'Concert', u'Hall', u'at', u'the', u'gendarmenmarkt', u'.'], u'pos': [u'JJ', u'NN', u'CC', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[42414, 42420], [42421, 42430], [42431, 42434], [42435, 42442], [42443, 42447], [42448, 42450], [42451, 42454], [42455, 42469], [42469, 42470]]}) 
answer: set([u'border', u'french'])
candidate Sentence: (0.30895739793777466, {u'tokens': [u'The', u'Gendarmenmarkt', u',', u'a', u'neoclassical', u'square', u'in', u'Berlin', u'whose', u'name', u'dates', u'back', u'to', u'the', u'Napoleonic', u'occupation', u'of', u'the', u'city', u',', u'is', u'bordered', u'by', u'two', u'similarly', u'designed', u'cathedrals', u',', u'the', u'French', u'Cathedral', u'with', u'its', u'observation', u'platform', u'and', u'the', u'German', u'Cathedral', u'.'], u'lemmas': [u'the', u'Gendarmenmarkt', u',', u'a', u'neoclassical', u'square', u'in', u'Berlin', u'whose', u'name', u'date', u'back', u'to', u'the', u'napoleonic', u'occupation', u'of', u'the', u'city', u',', u'be', u'border', u'by', u'two', u'similarly', u'design', u'cathedral', u',', u'the', u'french', u'cathedral', u'with', u'its', u'observation', u'platform', u'and', u'the', u'german', u'cathedral', u'.'], u'pos': [u'DT', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'WP$', u'NN', u'NNS', u'RB', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'VBZ', u'VBN', u'IN', u'CD', u'RB', u'VBN', u'NNS', u',', u'DT', u'JJ', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[15183, 15186], [15187, 15201], [15201, 15202], [15203, 15204], [15205, 15217], [15218, 15224], [15225, 15227], [15228, 15234], [15235, 15240], [15241, 15245], [15246, 15251], [15252, 15256], [15257, 15259], [15260, 15263], [15264, 15274], [15275, 15285], [15286, 15288], [15289, 15292], [15293, 15297], [15297, 15298], [15299, 15301], [15302, 15310], [15311, 15313], [15314, 15317], [15318, 15327], [15328, 15336], [15337, 15347], [15347, 15348], [15349, 15352], [15353, 15359], [15360, 15369], [15370, 15374], [15375, 15378], [15379, 15390], [15391, 15399], [15400, 15403], [15404, 15407], [15408, 15414], [15415, 15424], [15424, 15425]]}) 
answer: set([])
candidate Sentence: (0.19309230148792267, {u'tokens': [u'The', u'Cathedral', u'of', u'St.', u'Hedwig', u'is', u'Berlin', u"'s", u'Roman', u'Catholic', u'cathedral', u'.'], u'lemmas': [u'the', u'cathedral', u'of', u'St.', u'Hedwig', u'be', u'Berlin', u"'s", u'Roman', u'Catholic', u'cathedral', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'NNP', u'POS', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[15885, 15888], [15889, 15898], [15899, 15901], [15902, 15905], [15906, 15912], [15913, 15915], [15916, 15922], [15922, 15924], [15925, 15930], [15931, 15939], [15940, 15949], [15949, 15950]]}) 
answer: set([u'gendarmenmarkt', u'border', u'french'])
candidate Sentence: (0.17641621828079224, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43005, 43008], [43009, 43015], [43016, 43028], [43029, 43038], [43039, 43041], [43042, 43045], [43046, 43048], [43049, 43052], [43053, 43063], [43064, 43074], [43075, 43077], [43078, 43081], [43082, 43087], [43087, 43088], [43090, 43092], [43093, 43099], [43099, 43101], [43102, 43108], [43109, 43118], [43119, 43123], [43123, 43124]]}) 
answer: set([u'gendarmenmarkt', u'cathedral', u'border', u'french'])
candidate Sentence: (0.11487214267253876, {u'tokens': [u'The', u'settlement', u'of', u'Spandau', u'is', u'first', u'mentioned', u'in', u'1197', u',', u'and', u'K\xf6penick', u'in', u'1209', u',', u'though', u'these', u'areas', u'did', u'not', u'join', u'Berlin', u'until', u'1920', u'.'], u'lemmas': [u'the', u'settlement', u'of', u'Spandau', u'be', u'first', u'mention', u'in', u'1197', u',', u'and', u'K\xf6penick', u'in', u'1209', u',', u'though', u'these', u'area', u'do', u'not', u'join', u'Berlin', u'until', u'1920', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'VBZ', u'JJ', u'VBN', u'IN', u'CD', u',', u'CC', u'NNP', u'IN', u'CD', u',', u'IN', u'DT', u'NNS', u'VBD', u'RB', u'VB', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[2642, 2645], [2646, 2656], [2657, 2659], [2660, 2667], [2668, 2670], [2671, 2676], [2677, 2686], [2687, 2689], [2690, 2694], [2694, 2695], [2696, 2699], [2700, 2708], [2709, 2711], [2712, 2716], [2716, 2717], [2718, 2724], [2725, 2730], [2731, 2736], [2737, 2740], [2741, 2744], [2745, 2749], [2750, 2756], [2757, 2762], [2763, 2767], [2767, 2768]]}) 
answer: set([u'gendarmenmarkt', u'cathedral', u'border', u'french'])

Does the Gendarmenmarkt border the French Cathedral?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the Gendarmenmarkt borders the French Cathedral.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the Gendarmenmarkt borders the French Cathedral.')
 +    where 'Yes, the Gendarmenmarkt borders the French Cathedral.' = <src.question_processing.Question_parser instance at 0x118859cf8>.answer
_____________________________ test_yesno[param56] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859e18>, (<src.tfidf.TF_IDF object at 0x11606e390>, set(['blaise', 'blaise_pascal', 'pascal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859e18>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.48285642266273499, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11762, 11765], [11766, 11768], [11768, 11769]]}) 
answer: set([u'mathematician', u'french'])
candidate Sentence: (0.37665218114852905, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[552, 558], [559, 562], [563, 564], [565, 578], [579, 581], [582, 585], [586, 591], [592, 597], [597, 598]]}) 
answer: set([u'french'])
candidate Sentence: (0.22986102104187012, {u'tokens': [u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 6], [7, 13], [14, 15], [16, 17], [17, 18], [19, 20], [20, 22], [23, 33], [34, 36], [37, 53], [53, 54], [55, 61], [61, 62], [63, 65], [66, 76], [77, 79], [80, 85], [85, 86], [87, 90], [91, 92], [93, 99], [100, 113], [113, 114], [115, 124], [124, 125], [126, 129], [130, 139], [140, 151], [151, 152]]}) 
answer: set([])
candidate Sentence: (0.16516953706741333, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[32288, 32294], [32295, 32301], [32301, 32302], [32303, 32316], [32316, 32317], [32318, 32327], [32327, 32328], [32329, 32332], [32333, 32340], [32341, 32346], [32347, 32350], [32351, 32352], [32352, 32356], [32356, 32357], [32358, 32359], [32360, 32367], [32367, 32368], [32369, 32375], [32375, 32376]]}) 
answer: set([u'french'])
candidate Sentence: (0.16397380828857422, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[30910, 30912], [30913, 30923], [30923, 30924], [30925, 30931], [30932, 30934], [30935, 30943], [30944, 30946], [30947, 30950], [30951, 30953], [30954, 30957], [30958, 30962], [30963, 30972], [30973, 30980], [30981, 30983], [30984, 30987], [30988, 30994], [30995, 31004], [31005, 31011], [31012, 31015], [31016, 31018], [31019, 31023], [31024, 31029], [31030, 31032], [31033, 31036], [31037, 31039], [31040, 31043], [31044, 31052], [31053, 31060], [31061, 31063], [31064, 31070], [31071, 31076], [31076, 31077]]}) 
answer: set([u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x118859e18>.answer
_____________________________ test_yesno[param57] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859e60>, (<src.tfidf.TF_IDF object at 0x11606e390>, set(['blaise', 'blaise_pascal', 'pascal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x118859e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.48285642266273499, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11762, 11765], [11766, 11768], [11768, 11769]]}) 
answer: set([u'mathematician', u'french'])
candidate Sentence: (0.37665218114852905, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[552, 558], [559, 562], [563, 564], [565, 578], [579, 581], [582, 585], [586, 591], [592, 597], [597, 598]]}) 
answer: set([u'french'])
candidate Sentence: (0.22986102104187012, {u'tokens': [u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 6], [7, 13], [14, 15], [16, 17], [17, 18], [19, 20], [20, 22], [23, 33], [34, 36], [37, 53], [53, 54], [55, 61], [61, 62], [63, 65], [66, 76], [77, 79], [80, 85], [85, 86], [87, 90], [91, 92], [93, 99], [100, 113], [113, 114], [115, 124], [124, 125], [126, 129], [130, 139], [140, 151], [151, 152]]}) 
answer: set([])
candidate Sentence: (0.16516953706741333, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[32288, 32294], [32295, 32301], [32301, 32302], [32303, 32316], [32316, 32317], [32318, 32327], [32327, 32328], [32329, 32332], [32333, 32340], [32341, 32346], [32347, 32350], [32351, 32352], [32352, 32356], [32356, 32357], [32358, 32359], [32360, 32367], [32367, 32368], [32369, 32375], [32375, 32376]]}) 
answer: set([u'french'])
candidate Sentence: (0.16397380828857422, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[30910, 30912], [30913, 30923], [30923, 30924], [30925, 30931], [30932, 30934], [30935, 30943], [30944, 30946], [30947, 30950], [30951, 30953], [30954, 30957], [30958, 30962], [30963, 30972], [30973, 30980], [30981, 30983], [30984, 30987], [30988, 30994], [30995, 31004], [31005, 31011], [31012, 31015], [31016, 31018], [31019, 31023], [31024, 31029], [31030, 31032], [31033, 31036], [31037, 31039], [31040, 31043], [31044, 31052], [31053, 31060], [31061, 31063], [31064, 31070], [31071, 31076], [31076, 31077]]}) 
answer: set([u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x118859e60>.answer
_____________________________ test_yesno[param60] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859f38>, (<src.tfidf.TF_IDF object at 0x1128f7bd0>, set(['butterfly'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Some butterflies make sounds.') == True
E                +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x118859f38>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24590303003787994, {u'tokens': [u'The', u'Journal', u'of', u'Experimental', u'Biology', u'202:95', u'--', u'102', u'Some', u'butterflies', u'have', u'organs', u'of', u'hearing', u'and', u'some', u'species', u'are', u'also', u'known', u'to', u'make', u'stridulatory', u'and', u'clicking', u'sounds', u'.'], u'lemmas': [u'the', u'Journal', u'of', u'experimental', u'biology', u'202:95', u'--', u'102', u'some', u'butterfly', u'have', u'organ', u'of', u'hearing', u'and', u'some', u'species', u'be', u'also', u'know', u'to', u'make', u'stridulatory', u'and', u'click', u'sound', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'JJ', u'NN', u'CD', u':', u'CD', u'DT', u'NNS', u'VBP', u'NNS', u'IN', u'NN', u'CC', u'DT', u'NNS', u'VBP', u'RB', u'VBN', u'TO', u'VB', u'JJ', u'CC', u'VBG', u'NNS', u'.'], u'char_offsets': [[17939, 17942], [17943, 17950], [17951, 17953], [17954, 17966], [17967, 17974], [17975, 17981], [17982, 17983], [17984, 17987], [17988, 17992], [17993, 18004], [18005, 18009], [18010, 18016], [18017, 18019], [18020, 18027], [18028, 18031], [18032, 18036], [18037, 18044], [18045, 18048], [18049, 18053], [18054, 18059], [18060, 18062], [18063, 18067], [18068, 18080], [18081, 18084], [18085, 18093], [18094, 18100], [18100, 18101]]}) 
answer: set([])
candidate Sentence: (0.17804233729839325, {u'tokens': [u'This', u'helps', u'making', u'them', u'unpalatable', u'to', u'birds', u'and', u'other', u'predators', u'.'], u'lemmas': [u'this', u'help', u'make', u'they', u'unpalatable', u'to', u'bird', u'and', u'other', u'predator', u'.'], u'pos': [u'DT', u'VBZ', u'VBG', u'PRP', u'JJ', u'TO', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5076, 5080], [5081, 5086], [5087, 5093], [5094, 5098], [5099, 5110], [5111, 5113], [5114, 5119], [5120, 5123], [5124, 5129], [5130, 5139], [5139, 5140]]}) 
answer: set([u'sound'])
candidate Sentence: (0.1641799658536911, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[22012, 22018], [22018, 22019], [22020, 22021], [22022, 22023], [22024, 22025], [22025, 22026], [22027, 22030], [22031, 22033], [22034, 22041], [22041, 22042], [22043, 22048], [22049, 22051], [22052, 22058], [22059, 22062], [22063, 22068], [22069, 22071], [22072, 22075], [22076, 22077], [22077, 22081], [22081, 22082], [22083, 22087], [22088, 22092], [22093, 22100], [22101, 22108], [22109, 22120], [22121, 22127], [22128, 22140], [22141, 22145], [22145, 22146]]}) 
answer: set([u'sound', u'make'])
candidate Sentence: (0.15060018002986908, {u'tokens': [u'The', u'chrysalis', u'is', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segments', u'or', u'produce', u'sounds', u'to', u'scare', u'potential', u'predators', u'.'], u'lemmas': [u'the', u'chrysali', u'be', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segment', u'or', u'produce', u'sound', u'to', u'scare', u'potential', u'predator', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'NN', u',', u'IN', u'DT', u'NNS', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NNS', u'CC', u'VB', u'NNS', u'TO', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[7182, 7185], [7186, 7195], [7196, 7198], [7199, 7206], [7207, 7216], [7217, 7219], [7220, 7228], [7228, 7229], [7230, 7238], [7239, 7243], [7244, 7251], [7252, 7255], [7256, 7263], [7264, 7268], [7269, 7272], [7273, 7282], [7283, 7291], [7292, 7294], [7295, 7302], [7303, 7309], [7310, 7312], [7313, 7318], [7319, 7328], [7329, 7338], [7338, 7339]]}) 
answer: set([u'make'])
candidate Sentence: (0.13623714447021484, {u'tokens': [u'Does', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'Bicyclus', u'anynana', u'.'], u'lemmas': [u'do', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'bicyclus', u'anynana', u'.'], u'pos': [u'VBZ', u'NN', u'VB', u'NN', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13459, 13463], [13464, 13473], [13474, 13482], [13483, 13490], [13491, 13501], [13502, 13504], [13505, 13513], [13514, 13521], [13521, 13522]]}) 
answer: set([u'sound', u'make'])

Do butterflies make sounds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Some butterflies make sounds.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Some butterflies make sounds.') == True
 +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x118859f38>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param62] ______________________________

param = (<src.question_processing.Question_parser instance at 0x118859fc8>, (<src.tfidf.TF_IDF object at 0x1128f7bd0>, set(['butterfly'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
E                +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x118859fc8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.57508492469787598, {u'tokens': [u'Also', u',', u'in', u'the', u'Philippines', u',', u'a', u'lingering', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'is', u'taken', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'has', u'died', u'or', u'will', u'soon', u'die', u'.'], u'lemmas': [u'also', u',', u'in', u'the', u'Philippines', u',', u'a', u'linger', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'be', u'take', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'have', u'die', u'or', u'will', u'soon', u'die', u'.'], u'pos': [u'RB', u',', u'IN', u'DT', u'NNPS', u',', u'DT', u'VBG', u'JJ', u'NN', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'IN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'CC', u'MD', u'RB', u'VB', u'.'], u'char_offsets': [[30089, 30093], [30093, 30094], [30095, 30097], [30098, 30101], [30102, 30113], [30113, 30114], [30115, 30116], [30117, 30126], [30127, 30132], [30133, 30142], [30143, 30145], [30146, 30150], [30151, 30153], [30154, 30157], [30158, 30163], [30164, 30166], [30167, 30172], [30173, 30175], [30176, 30180], [30181, 30185], [30186, 30193], [30194, 30196], [30197, 30200], [30201, 30207], [30208, 30211], [30212, 30216], [30217, 30219], [30220, 30224], [30225, 30229], [30230, 30233], [30233, 30234]]}) 
answer: set([])
candidate Sentence: (0.14396923780441284, {u'tokens': [u'Some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'lands', u'on', u'you', u'it', u'means', u'good', u'luck', u'.'], u'lemmas': [u'some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'land', u'on', u'you', u'it', u'mean', u'good', u'luck', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'IN', u'WRB', u'DT', u'NN', u'NNS', u'IN', u'PRP', u'PRP', u'VBZ', u'JJ', u'NN', u'.'], u'char_offsets': [[29070, 29074], [29075, 29081], [29082, 29085], [29086, 29090], [29091, 29095], [29096, 29097], [29098, 29107], [29108, 29113], [29114, 29116], [29117, 29120], [29121, 29123], [29124, 29129], [29130, 29134], [29135, 29139], [29139, 29140]]}) 
answer: set([u'moth', u'die', u'someone', u'black'])
candidate Sentence: (0.11472988128662109, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[22012, 22018], [22018, 22019], [22020, 22021], [22022, 22023], [22024, 22025], [22025, 22026], [22027, 22030], [22031, 22033], [22034, 22041], [22041, 22042], [22043, 22048], [22049, 22051], [22052, 22058], [22059, 22062], [22063, 22068], [22069, 22071], [22072, 22075], [22076, 22077], [22077, 22081], [22081, 22082], [22083, 22087], [22088, 22092], [22093, 22100], [22101, 22108], [22109, 22120], [22121, 22127], [22128, 22140], [22141, 22145], [22145, 22146]]}) 
answer: set([u'moth', u'die', u'someone', u'black', u'mean'])
candidate Sentence: (0.10745878517627716, {u'tokens': [u'According', u'to', u'the', u'``', u'Butterflies', u"''", u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'is', u'seen', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'living', u',', u'dying', u',', u'or', u'already', u'dead', u'.'], u'lemmas': [u'accord', u'to', u'the', u'``', u'Butterflies', u"''", u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'be', u'see', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'live', u',', u'die', u',', u'or', u'already', u'dead', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'``', u'NNPS', u"''", u'NN', u'IN', u',', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u':', u'IN', u'PRP', u'VB', u'VBG', u',', u'VBG', u',', u'CC', u'RB', u'JJ', u'.'], u'char_offsets': [[26499, 26508], [26509, 26511], [26512, 26515], [26516, 26517], [26517, 26528], [26528, 26529], [26530, 26537], [26538, 26540], [26541, 26542], [26543, 26545], [26546, 26554], [26555, 26560], [26560, 26561], [26562, 26563], [26564, 26573], [26574, 26576], [26577, 26581], [26582, 26584], [26585, 26588], [26589, 26604], [26605, 26607], [26608, 26609], [26610, 26616], [26616, 26618], [26619, 26623], [26623, 26624], [26625, 26632], [26633, 26637], [26638, 26640], [26641, 26647], [26647, 26648], [26649, 26654], [26654, 26655], [26656, 26658], [26659, 26666], [26667, 26671], [26671, 26672]]}) 
answer: set([u'moth', u'someone', u'black', u'mean'])
candidate Sentence: (0.10648003965616226, {u'tokens': [u'Such', u'unpalatibility', u'is', u'advertised', u'using', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colours', u'.'], u'lemmas': [u'such', u'unpalatibility', u'be', u'advertise', u'use', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colour', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBG', u'JJ', u'NN', u',', u'NN', u',', u'JJ', u'CC', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[5141, 5145], [5146, 5160], [5161, 5163], [5164, 5174], [5175, 5180], [5181, 5187], [5188, 5191], [5191, 5192], [5193, 5199], [5199, 5200], [5201, 5206], [5207, 5209], [5210, 5215], [5216, 5223], [5224, 5231], [5231, 5232]]}) 
answer: set([u'moth', u'die', u'someone', u'mean'])

Does a black moth mean that someone has died?
Validity= False
Question Type = NA
Answer Type = NA
Answer = In the Philippines a black butterfly or moth mean that someone has died.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
 +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x118859fc8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param67] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a1b8>, (<src.tfidf.TF_IDF object at 0x1145038d0>, set(['charles-augustin', 'charles-augustin_de_coulomb', 'coulomb', 'de'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885a1b8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45635640621185303, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1725, 1729], [1730, 1733], [1734, 1740], [1741, 1743], [1744, 1750], [1750, 1751], [1752, 1756], [1757, 1760], [1761, 1765], [1766, 1768], [1769, 1776], [1776, 1777], [1778, 1780], [1781, 1784], [1785, 1793], [1794, 1796], [1797, 1799], [1800, 1808], [1808, 1809], [1810, 1813], [1814, 1818], [1819, 1821], [1822, 1825], [1826, 1829], [1830, 1839], [1839, 1840]]}) 
answer: set([u'ever'])
candidate Sentence: (0.19706469774246216, {u'tokens': [u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u':', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 16], [17, 19], [20, 27], [28, 29], [29, 31], [32, 36], [37, 41], [42, 43], [44, 46], [47, 53], [54, 58], [58, 59], [60, 63], [64, 65], [66, 72], [73, 82], [82, 83]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.07401999831199646, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[1989, 1991], [1992, 1996], [1996, 1997], [1998, 2000], [2001, 2004], [2005, 2014], [2015, 2026], [2027, 2029], [2030, 2035], [2035, 2036]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.068351730704307556, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[474, 478], [479, 486], [487, 490], [491, 492], [493, 496], [496, 497], [498, 501], [502, 508], [509, 514], [515, 517], [518, 523], [524, 527], [528, 533], [534, 541], [542, 549], [550, 552], [553, 556], [557, 568], [569, 576], [577, 580], [581, 595], [595, 596]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.068322256207466125, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'NNP', u'NNP', u'NNP', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2685, 2687], [2688, 2692], [2692, 2693], [2694, 2697], [2698, 2708], [2709, 2719], [2720, 2722], [2723, 2737], [2738, 2741], [2742, 2744], [2745, 2750], [2751, 2753], [2754, 2761], [2762, 2764], [2765, 2768], [2769, 2781], [2782, 2785], [2786, 2790], [2791, 2793], [2794, 2799], [2800, 2808], [2809, 2811], [2812, 2822], [2823, 2829], [2830, 2833], [2834, 2842], [2842, 2843], [2844, 2851], [2851, 2852], [2853, 2857], [2859, 2860], [2860, 2871], [2872, 2880], [2881, 2884], [2885, 2900], [2901, 2903], [2904, 2911], [2912, 2915], [2916, 2919], [2920, 2930], [2931, 2933], [2934, 2939], [2940, 2944], [2944, 2945], [2946, 2954], [2954, 2955]]}) 
answer: set([u'employ', u'rochelle', u'ever'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 1406086 characters, 264619 tokens, 2812.2 char/doc, 529.2 tok/doc RATES: 16.080 doc/sec, 8510.0 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885a1b8>.answer
_____________________________ test_yesno[param68] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a200>, (<src.tfidf.TF_IDF object at 0x1145038d0>, set(['charles-augustin', 'charles-augustin_de_coulomb', 'coulomb', 'de'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
E                +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x11885a200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45635640621185303, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1725, 1729], [1730, 1733], [1734, 1740], [1741, 1743], [1744, 1750], [1750, 1751], [1752, 1756], [1757, 1760], [1761, 1765], [1766, 1768], [1769, 1776], [1776, 1777], [1778, 1780], [1781, 1784], [1785, 1793], [1794, 1796], [1797, 1799], [1800, 1808], [1808, 1809], [1810, 1813], [1814, 1818], [1819, 1821], [1822, 1825], [1826, 1829], [1830, 1839], [1839, 1840]]}) 
answer: set([u'ever'])
candidate Sentence: (0.19706469774246216, {u'tokens': [u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u':', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 16], [17, 19], [20, 27], [28, 29], [29, 31], [32, 36], [37, 41], [42, 43], [44, 46], [47, 53], [54, 58], [58, 59], [60, 63], [64, 65], [66, 72], [73, 82], [82, 83]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.07401999831199646, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[1989, 1991], [1992, 1996], [1996, 1997], [1998, 2000], [2001, 2004], [2005, 2014], [2015, 2026], [2027, 2029], [2030, 2035], [2035, 2036]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.068351730704307556, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[474, 478], [479, 486], [487, 490], [491, 492], [493, 496], [496, 497], [498, 501], [502, 508], [509, 514], [515, 517], [518, 523], [524, 527], [528, 533], [534, 541], [542, 549], [550, 552], [553, 556], [557, 568], [569, 576], [577, 580], [581, 595], [595, 596]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.068322256207466125, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'NNP', u'NNP', u'NNP', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2685, 2687], [2688, 2692], [2692, 2693], [2694, 2697], [2698, 2708], [2709, 2719], [2720, 2722], [2723, 2737], [2738, 2741], [2742, 2744], [2745, 2750], [2751, 2753], [2754, 2761], [2762, 2764], [2765, 2768], [2769, 2781], [2782, 2785], [2786, 2790], [2791, 2793], [2794, 2799], [2800, 2808], [2809, 2811], [2812, 2822], [2823, 2829], [2830, 2833], [2834, 2842], [2842, 2843], [2844, 2851], [2851, 2852], [2853, 2857], [2859, 2860], [2860, 2871], [2872, 2880], [2881, 2884], [2885, 2900], [2901, 2903], [2904, 2911], [2912, 2915], [2916, 2919], [2920, 2930], [2931, 2933], [2934, 2939], [2940, 2944], [2944, 2945], [2946, 2954], [2954, 2955]]}) 
answer: set([u'employ', u'rochelle', u'ever'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
 +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x11885a200>.answer
_____________________________ test_yesno[param69] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a0e0>, (<src.tfidf.TF_IDF object at 0x114503750>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a0e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39408707618713379, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24814, 24817], [24818, 24827], [24828, 24830], [24831, 24837], [24838, 24845], [24846, 24849], [24850, 24855], [24855, 24856]]}) 
answer: set([u'analytical', u'tonal'])
candidate Sentence: (0.34200888872146606, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1612, 1618], [1619, 1626], [1627, 1629], [1630, 1643], [1644, 1646], [1647, 1650], [1651, 1655], [1656, 1661], [1662, 1664], [1665, 1673], [1674, 1683], [1683, 1684], [1685, 1693], [1694, 1697], [1698, 1704], [1705, 1714], [1715, 1717], [1718, 1725], [1726, 1729], [1730, 1735], [1736, 1739], [1740, 1748], [1748, 1749]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17520058155059814, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24416, 24419], [24420, 24425], [24426, 24432], [24433, 24435], [24436, 24445], [24446, 24448], [24449, 24453], [24454, 24463], [24464, 24466], [24467, 24476], [24477, 24481], [24482, 24487], [24488, 24489], [24490, 24498], [24498, 24499], [24500, 24509], [24510, 24515], [24516, 24525], [24525, 24526], [24527, 24532], [24533, 24535], [24536, 24540], [24541, 24546], [24547, 24549], [24550, 24556], [24557, 24559], [24560, 24564], [24565, 24567], [24568, 24575], [24576, 24585], [24586, 24587], [24587, 24591], [24591, 24592], [24593, 24595], [24595, 24597], [24598, 24604], [24605, 24612], [24613, 24615], [24616, 24622], [24623, 24628], [24629, 24634], [24635, 24644], [24644, 24645], [24646, 24649], [24650, 24655], [24656, 24659], [24660, 24662], [24663, 24666], [24667, 24669], [24670, 24675], [24676, 24679], [24680, 24691], [24691, 24692], [24693, 24695], [24696, 24701], [24702, 24711], [24711, 24712], [24713, 24717], [24718, 24719], [24719, 24723], [24723, 24724], [24725, 24738], [24739, 24741], [24742, 24749], [24749, 24750], [24751, 24757], [24757, 24758], [24759, 24761], [24761, 24763], [24764, 24767], [24768, 24769], [24770, 24775], [24776, 24778], [24779, 24783], [24784, 24788], [24789, 24798], [24799, 24802], [24803, 24810], [24810, 24811]]}) 
answer: set([u'analytical', u'speak'])
candidate Sentence: (0.16429184377193451, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40429, 40432], [40433, 40437], [40438, 40439], [40440, 40442], [40443, 40444], [40445, 40453], [40454, 40455], [40456, 40459], [40460, 40464], [40465, 40467], [40468, 40470], [40471, 40473], [40474, 40479], [40480, 40487], [40487, 40488]]}) 
answer: set([u'analytical', u'speak', u'tonal', u'variety'])
candidate Sentence: (0.15410527586936951, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5920, 5923], [5924, 5934], [5935, 5942], [5943, 5946], [5947, 5955], [5956, 5958], [5959, 5962], [5963, 5970], [5971, 5977], [5978, 5987], [5988, 5990], [5991, 5994], [5995, 5997], [5998, 6000], [6001, 6002], [6003, 6009], [6010, 6018], [6019, 6021], [6022, 6035], [6035, 6036]]}) 
answer: set([u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a0e0>.answer
_____________________________ test_yesno[param70] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a248>, (<src.tfidf.TF_IDF object at 0x114503750>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a248>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39408707618713379, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24814, 24817], [24818, 24827], [24828, 24830], [24831, 24837], [24838, 24845], [24846, 24849], [24850, 24855], [24855, 24856]]}) 
answer: set([u'analytical', u'tonal'])
candidate Sentence: (0.34200888872146606, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1612, 1618], [1619, 1626], [1627, 1629], [1630, 1643], [1644, 1646], [1647, 1650], [1651, 1655], [1656, 1661], [1662, 1664], [1665, 1673], [1674, 1683], [1683, 1684], [1685, 1693], [1694, 1697], [1698, 1704], [1705, 1714], [1715, 1717], [1718, 1725], [1726, 1729], [1730, 1735], [1736, 1739], [1740, 1748], [1748, 1749]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17520058155059814, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24416, 24419], [24420, 24425], [24426, 24432], [24433, 24435], [24436, 24445], [24446, 24448], [24449, 24453], [24454, 24463], [24464, 24466], [24467, 24476], [24477, 24481], [24482, 24487], [24488, 24489], [24490, 24498], [24498, 24499], [24500, 24509], [24510, 24515], [24516, 24525], [24525, 24526], [24527, 24532], [24533, 24535], [24536, 24540], [24541, 24546], [24547, 24549], [24550, 24556], [24557, 24559], [24560, 24564], [24565, 24567], [24568, 24575], [24576, 24585], [24586, 24587], [24587, 24591], [24591, 24592], [24593, 24595], [24595, 24597], [24598, 24604], [24605, 24612], [24613, 24615], [24616, 24622], [24623, 24628], [24629, 24634], [24635, 24644], [24644, 24645], [24646, 24649], [24650, 24655], [24656, 24659], [24660, 24662], [24663, 24666], [24667, 24669], [24670, 24675], [24676, 24679], [24680, 24691], [24691, 24692], [24693, 24695], [24696, 24701], [24702, 24711], [24711, 24712], [24713, 24717], [24718, 24719], [24719, 24723], [24723, 24724], [24725, 24738], [24739, 24741], [24742, 24749], [24749, 24750], [24751, 24757], [24757, 24758], [24759, 24761], [24761, 24763], [24764, 24767], [24768, 24769], [24770, 24775], [24776, 24778], [24779, 24783], [24784, 24788], [24789, 24798], [24799, 24802], [24803, 24810], [24810, 24811]]}) 
answer: set([u'analytical', u'speak'])
candidate Sentence: (0.16429184377193451, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40429, 40432], [40433, 40437], [40438, 40439], [40440, 40442], [40443, 40444], [40445, 40453], [40454, 40455], [40456, 40459], [40460, 40464], [40465, 40467], [40468, 40470], [40471, 40473], [40474, 40479], [40480, 40487], [40487, 40488]]}) 
answer: set([u'analytical', u'speak', u'tonal', u'variety'])
candidate Sentence: (0.15410527586936951, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5920, 5923], [5924, 5934], [5935, 5942], [5943, 5946], [5947, 5955], [5956, 5958], [5959, 5962], [5963, 5970], [5971, 5977], [5978, 5987], [5988, 5990], [5991, 5994], [5995, 5997], [5998, 6000], [6001, 6002], [6003, 6009], [6010, 6018], [6019, 6021], [6022, 6035], [6035, 6036]]}) 
answer: set([u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a248>.answer
_____________________________ test_yesno[param73] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a320>, (<src.tfidf.TF_IDF object at 0x114503750>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885a320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.54191052913665771, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u8336', u'-LRB-', u'POJ', u':', u't\xea', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u8336', u'-lrb-', u'poj', u':', u't\xea', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22885, 22893], [22894, 22896], [22897, 22901], [22902, 22907], [22908, 22911], [22912, 22913], [22913, 22916], [22916, 22917], [22918, 22922], [22923, 22926], [22927, 22933], [22934, 22947], [22948, 22950], [22951, 22952], [22953, 22954], [22954, 22957], [22957, 22958], [22959, 22961], [22961, 22962], [22962, 22963], [22964, 22965], [22965, 22972], [22972, 22973], [22974, 22978], [22979, 22982], [22983, 22989], [22990, 23003], [23004, 23006], [23007, 23009], [23010, 23011], [23011, 23020], [23020, 23021], [23021, 23022], [23023, 23026], [23027, 23028], [23028, 23035], [23035, 23036], [23037, 23041], [23042, 23045], [23046, 23055], [23056, 23069], [23070, 23072], [23073, 23075], [23076, 23077], [23077, 23080], [23081, 23085], [23085, 23086], [23086, 23087]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.17428198456764221, {u'tokens': [u'From', u'French', u'came', u'\u82ad\u857e', u'-LRB-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'\u9999\u69df', u'-LRB-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'\u5496\u5561', u'-LRB-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'\u82ad\u857e', u'-lrb-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'\u9999\u69df', u'-lrb-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'\u5496\u5561', u'-lrb-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'CD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[36511, 36515], [36516, 36522], [36523, 36527], [36528, 36530], [36531, 36532], [36532, 36537], [36537, 36538], [36539, 36540], [36540, 36546], [36546, 36547], [36547, 36548], [36548, 36549], [36550, 36552], [36553, 36554], [36554, 36562], [36562, 36563], [36564, 36565], [36565, 36574], [36574, 36575], [36575, 36576], [36576, 36577], [36578, 36581], [36582, 36589], [36590, 36592], [36593, 36594], [36594, 36599], [36599, 36600], [36601, 36602], [36602, 36607], [36607, 36608], [36608, 36609], [36609, 36610]]}) 
answer: set([u'minnan', u'pronunciation', u'&#39853;', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.17395338416099548, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'CD', u'``', u'FW', u'.', u"''"], u'char_offsets': [[35020, 35025], [35026, 35031], [35032, 35036], [35037, 35041], [35042, 35049], [35050, 35057], [35058, 35060], [35061, 35064], [35065, 35070], [35070, 35071], [35072, 35076], [35077, 35079], [35080, 35082], [35083, 35084], [35084, 35090], [35090, 35091], [35091, 35092]]}) 
answer: set([u'-rrb-', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.16458417475223541, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[35682, 35686], [35687, 35689], [35690, 35694], [35695, 35697], [35698, 35707], [35708, 35715], [35716, 35726], [35727, 35731], [35732, 35739], [35740, 35754], [35754, 35755]]}) 
answer: set([u'``', u'-rrb-', u'minnan', u"''", u'&#39853;', u'-lrb-', u'&#27713;', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13105340301990509, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17998, 18001], [18002, 18010], [18011, 18014], [18015, 18018], [18019, 18032], [18033, 18035], [18036, 18042], [18043, 18050], [18051, 18056], [18057, 18061], [18062, 18069], [18070, 18077], [18077, 18078], [18079, 18085], [18086, 18093], [18094, 18104], [18104, 18105], [18106, 18113], [18114, 18126], [18126, 18127], [18128, 18135], [18136, 18152], [18152, 18153], [18154, 18155], [18155, 18162], [18163, 18169], [18169, 18170], [18171, 18182], [18183, 18185], [18186, 18193], [18194, 18201], [18202, 18214], [18215, 18217], [18218, 18227], [18228, 18231], [18232, 18240], [18241, 18247], [18247, 18248], [18249, 18252], [18253, 18260], [18261, 18269], [18270, 18282], [18283, 18285], [18286, 18293], [18294, 18299], [18299, 18300]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885a320>.answer
_____________________________ test_yesno[param74] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a368>, (<src.tfidf.TF_IDF object at 0x114503750>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.54191052913665771, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u8336', u'-LRB-', u'POJ', u':', u't\xea', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u8336', u'-lrb-', u'poj', u':', u't\xea', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22885, 22893], [22894, 22896], [22897, 22901], [22902, 22907], [22908, 22911], [22912, 22913], [22913, 22916], [22916, 22917], [22918, 22922], [22923, 22926], [22927, 22933], [22934, 22947], [22948, 22950], [22951, 22952], [22953, 22954], [22954, 22957], [22957, 22958], [22959, 22961], [22961, 22962], [22962, 22963], [22964, 22965], [22965, 22972], [22972, 22973], [22974, 22978], [22979, 22982], [22983, 22989], [22990, 23003], [23004, 23006], [23007, 23009], [23010, 23011], [23011, 23020], [23020, 23021], [23021, 23022], [23023, 23026], [23027, 23028], [23028, 23035], [23035, 23036], [23037, 23041], [23042, 23045], [23046, 23055], [23056, 23069], [23070, 23072], [23073, 23075], [23076, 23077], [23077, 23080], [23081, 23085], [23085, 23086], [23086, 23087]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.17428198456764221, {u'tokens': [u'From', u'French', u'came', u'\u82ad\u857e', u'-LRB-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'\u9999\u69df', u'-LRB-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'\u5496\u5561', u'-LRB-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'\u82ad\u857e', u'-lrb-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'\u9999\u69df', u'-lrb-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'\u5496\u5561', u'-lrb-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'CD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[36511, 36515], [36516, 36522], [36523, 36527], [36528, 36530], [36531, 36532], [36532, 36537], [36537, 36538], [36539, 36540], [36540, 36546], [36546, 36547], [36547, 36548], [36548, 36549], [36550, 36552], [36553, 36554], [36554, 36562], [36562, 36563], [36564, 36565], [36565, 36574], [36574, 36575], [36575, 36576], [36576, 36577], [36578, 36581], [36582, 36589], [36590, 36592], [36593, 36594], [36594, 36599], [36599, 36600], [36601, 36602], [36602, 36607], [36607, 36608], [36608, 36609], [36609, 36610]]}) 
answer: set([u'minnan', u'pronunciation', u'&#39853;', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.17395338416099548, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'CD', u'``', u'FW', u'.', u"''"], u'char_offsets': [[35020, 35025], [35026, 35031], [35032, 35036], [35037, 35041], [35042, 35049], [35050, 35057], [35058, 35060], [35061, 35064], [35065, 35070], [35070, 35071], [35072, 35076], [35077, 35079], [35080, 35082], [35083, 35084], [35084, 35090], [35090, 35091], [35091, 35092]]}) 
answer: set([u'-rrb-', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.16458417475223541, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[35682, 35686], [35687, 35689], [35690, 35694], [35695, 35697], [35698, 35707], [35708, 35715], [35716, 35726], [35727, 35731], [35732, 35739], [35740, 35754], [35754, 35755]]}) 
answer: set([u'``', u'-rrb-', u'minnan', u"''", u'&#39853;', u'-lrb-', u'&#27713;', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13105340301990509, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17998, 18001], [18002, 18010], [18011, 18014], [18015, 18018], [18019, 18032], [18033, 18035], [18036, 18042], [18043, 18050], [18051, 18056], [18057, 18061], [18062, 18069], [18070, 18077], [18077, 18078], [18079, 18085], [18086, 18093], [18094, 18104], [18104, 18105], [18106, 18113], [18114, 18126], [18126, 18127], [18128, 18135], [18136, 18152], [18152, 18153], [18154, 18155], [18155, 18162], [18163, 18169], [18169, 18170], [18171, 18182], [18183, 18185], [18186, 18193], [18194, 18201], [18202, 18214], [18215, 18217], [18218, 18227], [18228, 18231], [18232, 18240], [18241, 18247], [18247, 18248], [18249, 18252], [18253, 18260], [18261, 18269], [18270, 18282], [18283, 18285], [18286, 18293], [18294, 18299], [18299, 18300]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a368>.answer
_____________________________ test_yesno[param81] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a560>, (<src.tfidf.TF_IDF object at 0x1175ec910>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('A cougar is also known as a mountain lion.') == True
E                +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x11885a560>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41352972388267517, {u'tokens': [u'The', u'cougar', u'-LRB-', u'Puma', u'concolor', u'-RRB-', u',', u'also', u'known', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depending', u'on', u'the', u'region', u',', u'is', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'lemmas': [u'the', u'cougar', u'-lrb-', u'puma', u'concolor', u'-rrb-', u',', u'also', u'know', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depend', u'on', u'the', u'region', u',', u'be', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'RB', u'VBN', u'IN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'CC', u'NN', u',', u'VBG', u'IN', u'DT', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u',', u'JJ', u'TO', u'DT', u'NNPS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 12], [12, 16], [17, 25], [25, 26], [26, 27], [28, 32], [33, 38], [39, 41], [42, 46], [46, 47], [48, 56], [57, 61], [61, 62], [63, 71], [72, 75], [75, 76], [77, 86], [87, 89], [90, 97], [97, 98], [99, 108], [109, 111], [112, 115], [116, 122], [122, 123], [124, 126], [127, 128], [129, 135], [136, 138], [139, 142], [143, 149], [150, 157], [157, 158], [159, 165], [166, 168], [169, 172], [173, 181], [181, 182]]}) 
answer: set([])
candidate Sentence: (0.27257603406906128, {u'tokens': [u'The', u'cougar', u'has', u'numerous', u'names', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'are', u'popular', u'.'], u'lemmas': [u'the', u'cougar', u'have', u'numerous', u'name', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'be', u'popular', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'WDT', u'NN', u'CC', u'NN', u'NN', u'VBP', u'JJ', u'.'], u'char_offsets': [[2324, 2327], [2328, 2334], [2335, 2338], [2339, 2347], [2348, 2353], [2354, 2356], [2357, 2364], [2364, 2365], [2366, 2368], [2369, 2374], [2375, 2379], [2380, 2383], [2384, 2392], [2393, 2397], [2398, 2401], [2402, 2409], [2409, 2410]]}) 
answer: set([u'know'])
candidate Sentence: (0.17417183518409729, {u'tokens': [u'Search', u'continues', u'for', u'mountain', u'lion', u'that', u'killed', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-RSB-', u';', u'Wounded', u'mountain', u'lion', u'captured', u',', u'killed', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-RSB-', u';', u'Second', u'mountain', u'lion', u'captured', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-RSB-', u'As', u'with', u'many', u'predators', u',', u'a', u'cougar', u'may', u'attack', u'if', u'cornered', u',', u'if', u'a', u'fleeing', u'human', u'stimulates', u'their', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'plays', u'dead', u'.', u"''"], u'lemmas': [u'search', u'continue', u'for', u'mountain', u'lion', u'that', u'kill', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-rsb-', u';', u'wound', u'mountain', u'lion', u'capture', u',', u'kill', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-rsb-', u';', u'second', u'mountain', u'lion', u'capture', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-rsb-', u'as', u'with', u'many', u'predator', u',', u'a', u'cougar', u'may', u'attack', u'if', u'corner', u',', u'if', u'a', u'flee', u'human', u'stimulate', u'they', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'play', u'dead', u'.', u"''"], u'pos': [u'VB', u'VBZ', u'IN', u'NN', u'NN', u'WDT', u'VBD', u'NNP', u'NNP', u'NN', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'VBN', u'NN', u'NN', u'VBN', u',', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'JJ', u'NN', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'IN', u'IN', u'JJ', u'NNS', u',', u'DT', u'NN', u'MD', u'VB', u'IN', u'VBN', u',', u'IN', u'DT', u'VBG', u'JJ', u'VBZ', u'PRP$', u'NN', u'TO', u'VB', u',', u'CC', u'IN', u'DT', u'NN', u'``', u'VBZ', u'JJ', u'.', u"''"], u'char_offsets': [[31626, 31632], [31633, 31642], [31643, 31646], [31647, 31655], [31656, 31660], [31661, 31665], [31666, 31672], [31673, 31678], [31679, 31684], [31685, 31688], [31688, 31689], [31690, 31693], [31694, 31700], [31701, 31711], [31712, 31714], [31715, 31719], [31720, 31723], [31724, 31728], [31728, 31729], [31730, 31735], [31736, 31743], [31744, 31748], [31749, 31751], [31751, 31752], [31753, 31757], [31757, 31758], [31758, 31759], [31761, 31768], [31769, 31777], [31778, 31782], [31783, 31791], [31791, 31792], [31793, 31799], [31800, 31804], [31805, 31810], [31811, 31816], [31816, 31817], [31818, 31821], [31822, 31828], [31829, 31839], [31840, 31842], [31843, 31847], [31848, 31851], [31852, 31856], [31856, 31857], [31858, 31863], [31864, 31871], [31872, 31876], [31877, 31879], [31879, 31880], [31881, 31885], [31885, 31886], [31886, 31887], [31889, 31895], [31896, 31904], [31905, 31909], [31910, 31918], [31919, 31923], [31924, 31929], [31930, 31935], [31935, 31936], [31937, 31940], [31941, 31947], [31948, 31958], [31959, 31961], [31962, 31966], [31967, 31970], [31971, 31975], [31975, 31976], [31977, 31982], [31983, 31990], [31991, 31995], [31996, 31997], [31997, 31998], [31999, 32003], [32003, 32004], [32005, 32007], [32008, 32012], [32013, 32017], [32018, 32027], [32027, 32028], [32029, 32030], [32031, 32037], [32038, 32041], [32042, 32048], [32049, 32051], [32052, 32060], [32060, 32061], [32062, 32064], [32065, 32066], [32067, 32074], [32075, 32080], [32081, 32091], [32092, 32097], [32098, 32106], [32107, 32109], [32110, 32115], [32115, 32116], [32117, 32119], [32120, 32122], [32123, 32124], [32125, 32131], [32132, 32133], [32133, 32138], [32139, 32143], [32143, 32144], [32144, 32145]]}) 
answer: set([u'know'])
candidate Sentence: (0.16133955121040344, {u'tokens': [u'*', u'Description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'CC', u'NNP', u':', u'NNP', u'NNP', u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33435, 33436], [33438, 33449], [33450, 33452], [33453, 33454], [33455, 33461], [33462, 33468], [33469, 33470], [33472, 33478], [33479, 33484], [33485, 33488], [33489, 33495], [33496, 33497], [33498, 33511], [33512, 33519], [33520, 33521], [33523, 33525], [33526, 33531], [33532, 33535], [33536, 33545], [33545, 33546]]}) 
answer: set([u'mountain', u'lion', u'know'])
candidate Sentence: (0.15083388984203339, {u'tokens': [u'The', u'Quebec', u'wildlife', u'services', u'-LRB-', u'known', u'locally', u'as', u'MRNF', u'-RRB-', u'also', u'considers', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threatened', u'species', u'after', u'multiple', u'DNA', u'tests', u'confirmed', u'cougar', u'hair', u'in', u'Lynx', u'mating', u'sites', u'.'], u'lemmas': [u'the', u'Quebec', u'wildlife', u'service', u'-lrb-', u'know', u'locally', u'as', u'mrnf', u'-rrb-', u'also', u'consider', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threaten', u'species', u'after', u'multiple', u'dna', u'test', u'confirm', u'cougar', u'hair', u'in', u'Lynx', u'mate', u'site', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NNS', u'-LRB-', u'VBN', u'RB', u'IN', u'NN', u'-RRB-', u'RB', u'VBZ', u'NNP', u'TO', u'VB', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'JJ', u'NN', u'NNS', u'VBD', u'NN', u'NN', u'IN', u'NNP', u'VBG', u'NNS', u'.'], u'char_offsets': [[18964, 18967], [18968, 18974], [18975, 18983], [18984, 18992], [18993, 18994], [18994, 18999], [19000, 19007], [19008, 19010], [19011, 19015], [19015, 19016], [19017, 19021], [19022, 19031], [19032, 19038], [19039, 19041], [19042, 19044], [19045, 19052], [19053, 19055], [19056, 19059], [19060, 19068], [19069, 19071], [19072, 19073], [19074, 19084], [19085, 19092], [19093, 19098], [19099, 19107], [19108, 19111], [19112, 19117], [19118, 19127], [19128, 19134], [19135, 19139], [19140, 19142], [19143, 19147], [19148, 19154], [19155, 19160], [19160, 19161]]}) 
answer: set([u'mountain', u'lion'])

Is a cougar also known as a mountain lion?
Validity= False
Question Type = NA
Answer Type = NA
Answer = A cougar is also known as a mountain lion.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('A cougar is also known as a mountain lion.') == True
 +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x11885a560>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param83] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a5f0>, (<src.tfidf.TF_IDF object at 0x1175ec910>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Cougars are not larger than jaguars.') == True
E                +  where 'Cougars are not larger than jaguars.' = <src.question_processing.Question_parser instance at 0x11885a5f0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3245537281036377, {u'tokens': [u'In', u'the', u'south', u',', u'the', u'cougar', u'must', u'compete', u'with', u'the', u'larger', u'jaguar', u'.'], u'lemmas': [u'in', u'the', u'south', u',', u'the', u'cougar', u'must', u'compete', u'with', u'the', u'larger', u'jaguar', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'MD', u'VB', u'IN', u'DT', u'JJR', u'NN', u'.'], u'char_offsets': [[21319, 21321], [21322, 21325], [21326, 21331], [21331, 21332], [21333, 21336], [21337, 21343], [21344, 21348], [21349, 21356], [21357, 21361], [21362, 21365], [21366, 21372], [21373, 21379], [21379, 21380]]}) 
answer: set([])
candidate Sentence: (0.28964966535568237, {u'tokens': [u'Competition', u'with', u'the', u'larger', u'jaguar', u'has', u'been', u'suggested', u'for', u'the', u'decline', u'in', u'the', u'size', u'of', u'prey', u'items', u'.'], u'lemmas': [u'competition', u'with', u'the', u'larger', u'jaguar', u'have', u'be', u'suggest', u'for', u'the', u'decline', u'in', u'the', u'size', u'of', u'prey', u'item', u'.'], u'pos': [u'NN', u'IN', u'DT', u'JJR', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[11979, 11990], [11991, 11995], [11996, 11999], [12000, 12006], [12007, 12013], [12014, 12017], [12018, 12022], [12023, 12032], [12033, 12036], [12037, 12040], [12041, 12048], [12049, 12051], [12052, 12055], [12056, 12060], [12061, 12063], [12064, 12068], [12069, 12074], [12074, 12075]]}) 
answer: set([])
candidate Sentence: (0.26006105542182922, {u'tokens': [u'The', u'jaguar', u'tends', u'to', u'take', u'larger', u'prey', u'and', u'the', u'cougar', u'smaller', u'where', u'they', u'overlap', u',', u'reducing', u'the', u'cougar', u"'s", u'size', u'.'], u'lemmas': [u'the', u'jaguar', u'tend', u'to', u'take', u'larger', u'prey', u'and', u'the', u'cougar', u'smaller', u'where', u'they', u'overlap', u',', u'reduce', u'the', u'cougar', u"'s", u'size', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'TO', u'VB', u'JJR', u'NN', u'CC', u'DT', u'NN', u'JJR', u'WRB', u'PRP', u'VBP', u',', u'VBG', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[23120, 23123], [23124, 23130], [23131, 23136], [23137, 23139], [23140, 23144], [23145, 23151], [23152, 23156], [23157, 23160], [23161, 23164], [23165, 23171], [23172, 23179], [23180, 23185], [23186, 23190], [23191, 23198], [23198, 23199], [23200, 23208], [23209, 23212], [23213, 23219], [23219, 23221], [23222, 23226], [23226, 23227]]}) 
answer: set([])
candidate Sentence: (0.17801910638809204, {u'tokens': [u'Cougars', u'can', u'be', u'almost', u'as', u'large', u'as', u'jaguars', u',', u'but', u'are', u'less', u'muscular', u'and', u'not', u'as', u'powerful', u';', u'where', u'their', u'ranges', u'overlap', u',', u'the', u'cougar', u'tends', u'to', u'be', u'smaller', u'than', u'average', u'.'], u'lemmas': [u'Cougars', u'can', u'be', u'almost', u'as', u'large', u'as', u'jaguar', u',', u'but', u'be', u'less', u'muscular', u'and', u'not', u'as', u'powerful', u';', u'where', u'they', u'range', u'overlap', u',', u'the', u'cougar', u'tend', u'to', u'be', u'smaller', u'than', u'average', u'.'], u'pos': [u'NNPS', u'MD', u'VB', u'RB', u'RB', u'JJ', u'IN', u'NNS', u',', u'CC', u'VBP', u'RBR', u'JJ', u'CC', u'RB', u'IN', u'JJ', u':', u'WRB', u'PRP$', u'NNS', u'VBP', u',', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'JJR', u'IN', u'NN', u'.'], u'char_offsets': [[8274, 8281], [8282, 8285], [8286, 8288], [8289, 8295], [8296, 8298], [8299, 8304], [8305, 8307], [8308, 8315], [8315, 8316], [8317, 8320], [8321, 8324], [8325, 8329], [8330, 8338], [8339, 8342], [8343, 8346], [8347, 8349], [8350, 8358], [8358, 8359], [8360, 8365], [8366, 8371], [8372, 8378], [8379, 8386], [8386, 8387], [8388, 8391], [8392, 8398], [8399, 8404], [8405, 8407], [8408, 8410], [8411, 8418], [8419, 8423], [8424, 8431], [8431, 8432]]}) 
answer: set([u'larger'])
candidate Sentence: (0.1747506707906723, {u'tokens': [u'*', u'Description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'CC', u'NNP', u':', u'NNP', u'NNP', u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33435, 33436], [33438, 33449], [33450, 33452], [33453, 33454], [33455, 33461], [33462, 33468], [33469, 33470], [33472, 33478], [33479, 33484], [33485, 33488], [33489, 33495], [33496, 33497], [33498, 33511], [33512, 33519], [33520, 33521], [33523, 33525], [33526, 33531], [33532, 33535], [33536, 33545], [33545, 33546]]}) 
answer: set([u'larger', u'jaguar'])

Are cougars larger than jaguars?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Cougars are not larger than jaguars.
Difficulty = easy

['Yes', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Cougars are not larger than jaguars.') == True
 +  where 'Cougars are not larger than jaguars.' = <src.question_processing.Question_parser instance at 0x11885a5f0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param84] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a638>, (<src.tfidf.TF_IDF object at 0x1175ec910>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x11885a638>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3245537281036377, {u'tokens': [u'In', u'the', u'south', u',', u'the', u'cougar', u'must', u'compete', u'with', u'the', u'larger', u'jaguar', u'.'], u'lemmas': [u'in', u'the', u'south', u',', u'the', u'cougar', u'must', u'compete', u'with', u'the', u'larger', u'jaguar', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'MD', u'VB', u'IN', u'DT', u'JJR', u'NN', u'.'], u'char_offsets': [[21319, 21321], [21322, 21325], [21326, 21331], [21331, 21332], [21333, 21336], [21337, 21343], [21344, 21348], [21349, 21356], [21357, 21361], [21362, 21365], [21366, 21372], [21373, 21379], [21379, 21380]]}) 
answer: set([])
candidate Sentence: (0.28964966535568237, {u'tokens': [u'Competition', u'with', u'the', u'larger', u'jaguar', u'has', u'been', u'suggested', u'for', u'the', u'decline', u'in', u'the', u'size', u'of', u'prey', u'items', u'.'], u'lemmas': [u'competition', u'with', u'the', u'larger', u'jaguar', u'have', u'be', u'suggest', u'for', u'the', u'decline', u'in', u'the', u'size', u'of', u'prey', u'item', u'.'], u'pos': [u'NN', u'IN', u'DT', u'JJR', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[11979, 11990], [11991, 11995], [11996, 11999], [12000, 12006], [12007, 12013], [12014, 12017], [12018, 12022], [12023, 12032], [12033, 12036], [12037, 12040], [12041, 12048], [12049, 12051], [12052, 12055], [12056, 12060], [12061, 12063], [12064, 12068], [12069, 12074], [12074, 12075]]}) 
answer: set([])
candidate Sentence: (0.26006105542182922, {u'tokens': [u'The', u'jaguar', u'tends', u'to', u'take', u'larger', u'prey', u'and', u'the', u'cougar', u'smaller', u'where', u'they', u'overlap', u',', u'reducing', u'the', u'cougar', u"'s", u'size', u'.'], u'lemmas': [u'the', u'jaguar', u'tend', u'to', u'take', u'larger', u'prey', u'and', u'the', u'cougar', u'smaller', u'where', u'they', u'overlap', u',', u'reduce', u'the', u'cougar', u"'s", u'size', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'TO', u'VB', u'JJR', u'NN', u'CC', u'DT', u'NN', u'JJR', u'WRB', u'PRP', u'VBP', u',', u'VBG', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[23120, 23123], [23124, 23130], [23131, 23136], [23137, 23139], [23140, 23144], [23145, 23151], [23152, 23156], [23157, 23160], [23161, 23164], [23165, 23171], [23172, 23179], [23180, 23185], [23186, 23190], [23191, 23198], [23198, 23199], [23200, 23208], [23209, 23212], [23213, 23219], [23219, 23221], [23222, 23226], [23226, 23227]]}) 
answer: set([])
candidate Sentence: (0.17801910638809204, {u'tokens': [u'Cougars', u'can', u'be', u'almost', u'as', u'large', u'as', u'jaguars', u',', u'but', u'are', u'less', u'muscular', u'and', u'not', u'as', u'powerful', u';', u'where', u'their', u'ranges', u'overlap', u',', u'the', u'cougar', u'tends', u'to', u'be', u'smaller', u'than', u'average', u'.'], u'lemmas': [u'Cougars', u'can', u'be', u'almost', u'as', u'large', u'as', u'jaguar', u',', u'but', u'be', u'less', u'muscular', u'and', u'not', u'as', u'powerful', u';', u'where', u'they', u'range', u'overlap', u',', u'the', u'cougar', u'tend', u'to', u'be', u'smaller', u'than', u'average', u'.'], u'pos': [u'NNPS', u'MD', u'VB', u'RB', u'RB', u'JJ', u'IN', u'NNS', u',', u'CC', u'VBP', u'RBR', u'JJ', u'CC', u'RB', u'IN', u'JJ', u':', u'WRB', u'PRP$', u'NNS', u'VBP', u',', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'JJR', u'IN', u'NN', u'.'], u'char_offsets': [[8274, 8281], [8282, 8285], [8286, 8288], [8289, 8295], [8296, 8298], [8299, 8304], [8305, 8307], [8308, 8315], [8315, 8316], [8317, 8320], [8321, 8324], [8325, 8329], [8330, 8338], [8339, 8342], [8343, 8346], [8347, 8349], [8350, 8358], [8358, 8359], [8360, 8365], [8366, 8371], [8372, 8378], [8379, 8386], [8386, 8387], [8388, 8391], [8392, 8398], [8399, 8404], [8405, 8407], [8408, 8410], [8411, 8418], [8419, 8423], [8424, 8431], [8431, 8432]]}) 
answer: set([u'larger'])
candidate Sentence: (0.1747506707906723, {u'tokens': [u'*', u'Description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'--', u'NatureMapping', u'Program', u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'CC', u'NNP', u':', u'NNP', u'NNP', u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33435, 33436], [33438, 33449], [33450, 33452], [33453, 33454], [33455, 33461], [33462, 33468], [33469, 33470], [33472, 33478], [33479, 33484], [33485, 33488], [33489, 33495], [33496, 33497], [33498, 33511], [33512, 33519], [33520, 33521], [33523, 33525], [33526, 33531], [33532, 33535], [33536, 33545], [33545, 33546]]}) 
answer: set([u'larger', u'jaguar'])

Are cougars larger than jaguars?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

['Yes', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x11885a638>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param86] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a6c8>, (<src.tfidf.TF_IDF object at 0x1175ec910>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a6c8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.65966939926147461, {u'tokens': [u'The', u'World', u'Conservation', u'Union', u'-LRB-', u'IUCN', u'-RRB-', u'currently', u'lists', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'lemmas': [u'the', u'World', u'Conservation', u'Union', u'-lrb-', u'IUCN', u'-rrb-', u'currently', u'list', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'``', u'JJS', u'NN', u"''", u'NNS', u'.'], u'char_offsets': [[25026, 25029], [25030, 25035], [25036, 25048], [25049, 25054], [25055, 25056], [25056, 25060], [25060, 25061], [25062, 25071], [25072, 25077], [25078, 25081], [25082, 25088], [25089, 25091], [25092, 25093], [25094, 25095], [25095, 25100], [25101, 25108], [25108, 25109], [25110, 25117], [25117, 25118]]}) 
answer: set([u'consider'])
candidate Sentence: (0.13396963477134705, {u'tokens': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-LRB-', u'IUCN', u'-RRB-', u'lists', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'lemmas': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-lrb-', u'IUCN', u'-rrb-', u'list', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNP', u'NNP', u',', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[20293, 20298], [20299, 20301], [20302, 20305], [20306, 20309], [20310, 20316], [20316, 20317], [20318, 20321], [20322, 20335], [20336, 20341], [20342, 20345], [20346, 20349], [20350, 20362], [20363, 20365], [20366, 20372], [20373, 20376], [20377, 20384], [20385, 20394], [20395, 20396], [20396, 20400], [20400, 20401], [20402, 20407], [20408, 20411], [20412, 20415], [20416, 20418], [20419, 20424], [20425, 20432], [20433, 20436], [20437, 20442], [20443, 20451], [20452, 20459], [20460, 20466], [20467, 20472], [20473, 20477], [20478, 20481], [20482, 20488], [20488, 20489]]}) 
answer: set([u'``', u'consider', u'least', u"''", u'world', u'species', u'concern'])
candidate Sentence: (0.13258689641952515, {u'tokens': [u'Most', u'did', u'not', u'reach', u'adulthood', u'.'], u'lemmas': [u'most', u'do', u'not', u'reach', u'adulthood', u'.'], u'pos': [u'JJS', u'VBD', u'RB', u'VB', u'NN', u'.'], u'char_offsets': [[24282, 24286], [24287, 24290], [24291, 24294], [24295, 24300], [24301, 24310], [24310, 24311]]}) 
answer: set([u'``', u'consider', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])
candidate Sentence: (0.12796863913536072, {u'tokens': [u'During', u'the', u'early', u'years', u'of', u'ranching', u',', u'cougars', u'were', u'considered', u'on', u'par', u'with', u'wolves', u'in', u'destructiveness', u'.'], u'lemmas': [u'during', u'the', u'early', u'year', u'of', u'ranching', u',', u'cougar', u'be', u'consider', u'on', u'par', u'with', u'wolf', u'in', u'destructiveness', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'NNS', u'VBD', u'VBN', u'IN', u'NN', u'IN', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[29542, 29548], [29549, 29552], [29553, 29558], [29559, 29564], [29565, 29567], [29568, 29576], [29576, 29577], [29578, 29585], [29586, 29590], [29591, 29601], [29602, 29604], [29605, 29608], [29609, 29613], [29614, 29620], [29621, 29623], [29624, 29639], [29639, 29640]]}) 
answer: set([u'``', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])
candidate Sentence: (0.11037647724151611, {u'tokens': [u'The', u'term', u'``', u'black', u'panther', u"''", u'is', u'used', u'colloquially', u'to', u'refer', u'to', u'melanistic', u'individuals', u'of', u'other', u'species', u',', u'particularly', u'jaguars', u'and', u'leopards', u'.'], u'lemmas': [u'the', u'term', u'``', u'black', u'panther', u"''", u'be', u'use', u'colloquially', u'to', u'refer', u'to', u'melanistic', u'individual', u'of', u'other', u'species', u',', u'particularly', u'jaguar', u'and', u'leopard', u'.'], u'pos': [u'DT', u'NN', u'``', u'JJ', u'NN', u"''", u'VBZ', u'VBN', u'RB', u'TO', u'VB', u'TO', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u',', u'RB', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[9437, 9440], [9441, 9445], [9446, 9447], [9447, 9452], [9453, 9460], [9460, 9461], [9462, 9464], [9465, 9469], [9470, 9482], [9483, 9485], [9486, 9491], [9492, 9494], [9495, 9505], [9506, 9517], [9518, 9520], [9521, 9526], [9527, 9534], [9534, 9535], [9536, 9548], [9549, 9556], [9557, 9560], [9561, 9569], [9569, 9570]]}) 
answer: set([u'consider', u'union', u'least', u'conservation', u'world', u'concern'])

Does the World Conservation Union consider the cougar a "least concern" species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a6c8>.answer
_____________________________ test_yesno[param92] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a878>, (<src.tfidf.TF_IDF object at 0x11606e590>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.86695915460586548, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3780, 3784], [3785, 3789], [3790, 3792], [3793, 3801], [3802, 3808], [3809, 3812], [3813, 3816], [3817, 3824], [3825, 3832], [3833, 3836], [3837, 3840], [3841, 3844], [3845, 3848], [3849, 3855], [3856, 3861], [3861, 3862]]}) 
answer: set([u'head'])
candidate Sentence: (0.15374471247196198, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[1995, 2000], [2001, 2005], [2006, 2009], [2010, 2015], [2016, 2019], [2020, 2024], [2025, 2029], [2030, 2031], [2032, 2035], [2036, 2038], [2039, 2044], [2044, 2045], [2046, 2052], [2053, 2059], [2059, 2060], [2061, 2065], [2066, 2072], [2073, 2076], [2077, 2083], [2084, 2088], [2088, 2089], [2090, 2093], [2094, 2098], [2098, 2099], [2100, 2102], [2103, 2107], [2108, 2113], [2113, 2114], [2115, 2120], [2121, 2124], [2125, 2129], [2130, 2135], [2136, 2140], [2141, 2142]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.12231619656085968, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4803, 4806], [4807, 4811], [4812, 4814], [4815, 4820], [4821, 4825], [4826, 4833], [4834, 4837], [4838, 4843], [4844, 4846], [4847, 4848], [4849, 4853], [4853, 4854]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.096087656915187836, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2564, 2567], [2568, 2573], [2574, 2576], [2577, 2578], [2579, 2583], [2584, 2591], [2592, 2594], [2595, 2602], [2603, 2612], [2612, 2613], [2614, 2623], [2624, 2629], [2629, 2630], [2631, 2635], [2636, 2639], [2640, 2649], [2650, 2652], [2653, 2656], [2657, 2662], [2662, 2663], [2664, 2673], [2674, 2678], [2679, 2684], [2685, 2688], [2689, 2694], [2695, 2698], [2699, 2703], [2703, 2704], [2705, 2716], [2717, 2725], [2725, 2726], [2727, 2731], [2732, 2734], [2735, 2743], [2744, 2748], [2749, 2752], [2753, 2760], [2761, 2768], [2769, 2771], [2772, 2774], [2774, 2775], [2776, 2784], [2785, 2787], [2788, 2791], [2792, 2796], [2796, 2797], [2798, 2806], [2806, 2807], [2808, 2811], [2812, 2815], [2816, 2824], [2825, 2828], [2829, 2834], [2835, 2837], [2838, 2843], [2844, 2846], [2847, 2849], [2850, 2856], [2856, 2857]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.082161940634250641, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5084, 5087], [5088, 5092], [5093, 5095], [5096, 5100], [5101, 5103], [5104, 5113], [5114, 5116], [5117, 5121], [5121, 5122]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a878>.answer
_____________________________ test_yesno[param93] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a8c0>, (<src.tfidf.TF_IDF object at 0x11606e590>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a8c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.86695915460586548, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3780, 3784], [3785, 3789], [3790, 3792], [3793, 3801], [3802, 3808], [3809, 3812], [3813, 3816], [3817, 3824], [3825, 3832], [3833, 3836], [3837, 3840], [3841, 3844], [3845, 3848], [3849, 3855], [3856, 3861], [3861, 3862]]}) 
answer: set([u'head'])
candidate Sentence: (0.15374471247196198, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[1995, 2000], [2001, 2005], [2006, 2009], [2010, 2015], [2016, 2019], [2020, 2024], [2025, 2029], [2030, 2031], [2032, 2035], [2036, 2038], [2039, 2044], [2044, 2045], [2046, 2052], [2053, 2059], [2059, 2060], [2061, 2065], [2066, 2072], [2073, 2076], [2077, 2083], [2084, 2088], [2088, 2089], [2090, 2093], [2094, 2098], [2098, 2099], [2100, 2102], [2103, 2107], [2108, 2113], [2113, 2114], [2115, 2120], [2121, 2124], [2125, 2129], [2130, 2135], [2136, 2140], [2141, 2142]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.12231619656085968, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4803, 4806], [4807, 4811], [4812, 4814], [4815, 4820], [4821, 4825], [4826, 4833], [4834, 4837], [4838, 4843], [4844, 4846], [4847, 4848], [4849, 4853], [4853, 4854]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.096087656915187836, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2564, 2567], [2568, 2573], [2574, 2576], [2577, 2578], [2579, 2583], [2584, 2591], [2592, 2594], [2595, 2602], [2603, 2612], [2612, 2613], [2614, 2623], [2624, 2629], [2629, 2630], [2631, 2635], [2636, 2639], [2640, 2649], [2650, 2652], [2653, 2656], [2657, 2662], [2662, 2663], [2664, 2673], [2674, 2678], [2679, 2684], [2685, 2688], [2689, 2694], [2695, 2698], [2699, 2703], [2703, 2704], [2705, 2716], [2717, 2725], [2725, 2726], [2727, 2731], [2732, 2734], [2735, 2743], [2744, 2748], [2749, 2752], [2753, 2760], [2761, 2768], [2769, 2771], [2772, 2774], [2774, 2775], [2776, 2784], [2785, 2787], [2788, 2791], [2792, 2796], [2796, 2797], [2798, 2806], [2806, 2807], [2808, 2811], [2812, 2815], [2816, 2824], [2825, 2828], [2829, 2834], [2835, 2837], [2838, 2843], [2844, 2846], [2847, 2849], [2850, 2856], [2856, 2857]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.082161940634250641, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5084, 5087], [5088, 5092], [5093, 5095], [5096, 5100], [5101, 5103], [5104, 5113], [5114, 5116], [5117, 5121], [5121, 5122]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a8c0>.answer
_____________________________ test_yesno[param94] ______________________________

param = (<src.question_processing.Question_parser instance at 0x11885a908>, (<src.tfidf.TF_IDF object at 0x11606e590>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a908>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.51137542724609375, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4803, 4806], [4807, 4811], [4812, 4814], [4815, 4820], [4821, 4825], [4826, 4833], [4834, 4837], [4838, 4843], [4844, 4846], [4847, 4848], [4849, 4853], [4853, 4854]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.34035110473632812, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5084, 5087], [5088, 5092], [5093, 5095], [5096, 5100], [5101, 5103], [5104, 5113], [5114, 5116], [5117, 5121], [5121, 5122]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.29343646764755249, {u'tokens': [u'Because', u'the', u'vibrations', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'used', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produced', u'.'], u'lemmas': [u'because', u'the', u'vibration', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'use', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produce', u'.'], u'pos': [u'IN', u'DT', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBP', u',', u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'CC', u'TO', u'VB', u'DT', u'NN', u'IN', u'NN', u'VBD', u'.'], u'char_offsets': [[4855, 4862], [4863, 4866], [4867, 4877], [4878, 4886], [4887, 4889], [4890, 4893], [4894, 4899], [4900, 4902], [4903, 4906], [4907, 4911], [4911, 4912], [4913, 4916], [4917, 4922], [4923, 4926], [4927, 4929], [4930, 4934], [4935, 4937], [4938, 4946], [4947, 4950], [4951, 4957], [4958, 4961], [4962, 4964], [4965, 4975], [4976, 4979], [4980, 4984], [4985, 4987], [4988, 4993], [4994, 5002], [5002, 5003]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.26812058687210083, {u'tokens': [u'Drum', u'carried', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'Several', u'factors', u'determine', u'the', u'sound', u'a', u'drum', u'produces', u',', u'including', u'the', u'type', u'of', u'shell', u'the', u'drum', u'has', u',', u'the', u'type', u'of', u'drumheads', u'it', u'has', u',', u'and', u'the', u'tension', u'of', u'the', u'drumheads', u'.'], u'lemmas': [u'drum', u'carry', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'several', u'factor', u'determine', u'the', u'sound', u'a', u'drum', u'produce', u',', u'include', u'the', u'type', u'of', u'shell', u'the', u'drum', u'have', u',', u'the', u'type', u'of', u'drumhead', u'it', u'have', u',', u'and', u'the', u'tension', u'of', u'the', u'drumhead', u'.'], u'pos': [u'VB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'JJ', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'CD', u',', u'CD', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'DT', u'VB', u'VBZ', u',', u'VBG', u'DT', u'NN', u'IN', u'NN', u'DT', u'VB', u'VBZ', u',', u'DT', u'NN', u'IN', u'NNS', u'PRP', u'VBZ', u',', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[3124, 3128], [3129, 3136], [3137, 3139], [3140, 3144], [3145, 3150], [3150, 3151], [3152, 3159], [3160, 3161], [3161, 3162], [3163, 3167], [3168, 3176], [3177, 3180], [3181, 3185], [3186, 3193], [3194, 3203], [3204, 3212], [3213, 3219], [3220, 3228], [3228, 3229], [3230, 3238], [3239, 3241], [3241, 3242], [3243, 3247], [3248, 3255], [3256, 3263], [3264, 3273], [3274, 3277], [3278, 3283], [3284, 3285], [3286, 3290], [3291, 3299], [3299, 3300], [3301, 3310], [3311, 3314], [3315, 3319], [3320, 3322], [3323, 3328], [3329, 3332], [3333, 3337], [3338, 3341], [3341, 3342], [3343, 3346], [3347, 3351], [3352, 3354], [3355, 3364], [3365, 3367], [3368, 3371], [3371, 3372], [3373, 3376], [3377, 3380], [3381, 3388], [3389, 3391], [3392, 3395], [3396, 3405], [3405, 3406]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.19107162952423096, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2564, 2567], [2568, 2573], [2574, 2576], [2577, 2578], [2579, 2583], [2584, 2591], [2592, 2594], [2595, 2602], [2603, 2612], [2612, 2613], [2614, 2623], [2624, 2629], [2629, 2630], [2631, 2635], [2636, 2639], [2640, 2649], [2650, 2652], [2653, 2656], [2657, 2662], [2662, 2663], [2664, 2673], [2674, 2678], [2679, 2684], [2685, 2688], [2689, 2694], [2695, 2698], [2699, 2703], [2703, 2704], [2705, 2716], [2717, 2725], [2725, 2726], [2727, 2731], [2732, 2734], [2735, 2743], [2744, 2748], [2749, 2752], [2753, 2760], [2761, 2768], [2769, 2771], [2772, 2774], [2774, 2775], [2776, 2784], [2785, 2787], [2788, 2791], [2792, 2796], [2796, 2797], [2798, 2806], [2806, 2807], [2808, 2811], [2812, 2815], [2816, 2824], [2825, 2828], [2829, 2834], [2835, 2837], [2838, 2843], [2844, 2846], [2847, 2849], [2850, 2856], [2856, 2857]]}) 
answer: set([u'aburukuwa'])

Is the Aburukuwa a type of drum?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885a908>.answer
_____________________________ test_yesno[param128] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e2d8>, (<src.tfidf.TF_IDF object at 0x114503150>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e2d8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39236637949943542, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1794, 1795], [1796, 1801], [1802, 1807], [1808, 1811], [1811, 1812]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.26237842440605164, {u'tokens': [u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 15], [16, 17], [17, 27], [28, 39], [39, 40], [41, 50], [51, 58], [59, 60], [60, 68], [69, 84], [84, 85], [85, 86], [87, 89], [90, 91], [92, 98], [99, 105], [106, 108], [109, 124], [125, 128], [129, 134], [135, 142], [143, 148], [148, 149]]}) 
answer: set([])
candidate Sentence: (0.23611243069171906, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.13539925217628479, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25307, 25310], [25311, 25314], [25315, 25320], [25321, 25326], [25327, 25332], [25333, 25337], [25338, 25341], [25342, 25346], [25347, 25350], [25351, 25359], [25360, 25362], [25363, 25372], [25373, 25380], [25381, 25386], [25386, 25387]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.11068816483020782, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6481, 6484], [6485, 6490], [6491, 6496], [6497, 6503], [6504, 6507], [6508, 6517], [6518, 6520], [6521, 6525], [6526, 6531], [6532, 6533], [6534, 6549], [6550, 6560], [6561, 6571], [6571, 6572]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e2d8>.answer
_____________________________ test_yesno[param129] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e320>, (<src.tfidf.TF_IDF object at 0x114503150>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39236637949943542, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1794, 1795], [1796, 1801], [1802, 1807], [1808, 1811], [1811, 1812]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.26237842440605164, {u'tokens': [u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 15], [16, 17], [17, 27], [28, 39], [39, 40], [41, 50], [51, 58], [59, 60], [60, 68], [69, 84], [84, 85], [85, 86], [87, 89], [90, 91], [92, 98], [99, 105], [106, 108], [109, 124], [125, 128], [129, 134], [135, 142], [143, 148], [148, 149]]}) 
answer: set([])
candidate Sentence: (0.23611243069171906, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.13539925217628479, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25307, 25310], [25311, 25314], [25315, 25320], [25321, 25326], [25327, 25332], [25333, 25337], [25338, 25341], [25342, 25346], [25347, 25350], [25351, 25359], [25360, 25362], [25363, 25372], [25373, 25380], [25381, 25386], [25386, 25387]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.11068816483020782, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6481, 6484], [6485, 6490], [6491, 6496], [6497, 6503], [6504, 6507], [6508, 6517], [6518, 6520], [6521, 6525], [6526, 6531], [6532, 6533], [6534, 6549], [6550, 6560], [6561, 6571], [6571, 6572]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e320>.answer
_____________________________ test_yesno[param138] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e5a8>, (<src.tfidf.TF_IDF object at 0x114503a50>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e5a8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33611646294593811, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[49046, 49047], [49048, 49056], [49056, 49057]]}) 
answer: set([u'similar', u'classical'])
candidate Sentence: (0.24625295400619507, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[6005, 6010], [6011, 6014], [6015, 6022], [6023, 6030], [6031, 6044], [6045, 6051], [6052, 6055], [6056, 6064], [6065, 6071], [6072, 6077], [6077, 6078], [6079, 6088], [6089, 6092], [6093, 6101], [6102, 6109], [6109, 6110], [6111, 6116], [6117, 6123], [6124, 6131], [6131, 6132], [6133, 6138], [6139, 6146], [6147, 6150], [6151, 6155], [6156, 6159], [6160, 6162], [6163, 6164], [6164, 6168], [6168, 6169], [6170, 6176], [6176, 6177], [6178, 6184], [6185, 6191], [6192, 6199], [6200, 6203], [6204, 6207], [6208, 6212], [6213, 6216], [6217, 6223], [6223, 6224]]}) 
answer: set([u'similar'])
candidate Sentence: (0.23842421174049377, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[29330, 29339], [29340, 29343], [29344, 29352], [29353, 29364], [29365, 29377], [29378, 29382], [29383, 29386], [29387, 29394], [29394, 29395], [29396, 29399], [29400, 29405], [29406, 29410], [29411, 29415], [29416, 29426], [29427, 29429], [29430, 29437], [29438, 29447], [29447, 29448], [29449, 29453], [29454, 29456], [29457, 29462], [29463, 29466], [29467, 29479], [29480, 29489], [29489, 29490]]}) 
answer: set([u'similar'])
candidate Sentence: (0.21534419059753418, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9603, 9604], [9604, 9612], [9613, 9614], [9614, 9626], [9626, 9627], [9628, 9635], [9635, 9636], [9637, 9644], [9645, 9647], [9648, 9651], [9652, 9661], [9662, 9668], [9668, 9669], [9670, 9677], [9677, 9678], [9679, 9685], [9686, 9689], [9690, 9696], [9697, 9702], [9703, 9705], [9706, 9709], [9710, 9724], [9725, 9731], [9732, 9735], [9736, 9740], [9741, 9745], [9746, 9748], [9749, 9756], [9757, 9770], [9771, 9777], [9778, 9782], [9783, 9784], [9785, 9794], [9795, 9801], [9802, 9805], [9806, 9808], [9809, 9812], [9813, 9814], [9815, 9823], [9823, 9824], [9825, 9835], [9836, 9840], [9841, 9844], [9845, 9853], [9854, 9864], [9865, 9871], [9871, 9872]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.2147291898727417, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[11151, 11154], [11155, 11163], [11164, 11173], [11174, 11176], [11177, 11180], [11181, 11187], [11188, 11190], [11191, 11200], [11201, 11208], [11209, 11211], [11212, 11215], [11216, 11221], [11221, 11222]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e5a8>.answer
_____________________________ test_yesno[param139] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e5f0>, (<src.tfidf.TF_IDF object at 0x114503a50>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885e5f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33611646294593811, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[49046, 49047], [49048, 49056], [49056, 49057]]}) 
answer: set([u'similar', u'classical'])
candidate Sentence: (0.24625295400619507, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[6005, 6010], [6011, 6014], [6015, 6022], [6023, 6030], [6031, 6044], [6045, 6051], [6052, 6055], [6056, 6064], [6065, 6071], [6072, 6077], [6077, 6078], [6079, 6088], [6089, 6092], [6093, 6101], [6102, 6109], [6109, 6110], [6111, 6116], [6117, 6123], [6124, 6131], [6131, 6132], [6133, 6138], [6139, 6146], [6147, 6150], [6151, 6155], [6156, 6159], [6160, 6162], [6163, 6164], [6164, 6168], [6168, 6169], [6170, 6176], [6176, 6177], [6178, 6184], [6185, 6191], [6192, 6199], [6200, 6203], [6204, 6207], [6208, 6212], [6213, 6216], [6217, 6223], [6223, 6224]]}) 
answer: set([u'similar'])
candidate Sentence: (0.23842421174049377, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[29330, 29339], [29340, 29343], [29344, 29352], [29353, 29364], [29365, 29377], [29378, 29382], [29383, 29386], [29387, 29394], [29394, 29395], [29396, 29399], [29400, 29405], [29406, 29410], [29411, 29415], [29416, 29426], [29427, 29429], [29430, 29437], [29438, 29447], [29447, 29448], [29449, 29453], [29454, 29456], [29457, 29462], [29463, 29466], [29467, 29479], [29480, 29489], [29489, 29490]]}) 
answer: set([u'similar'])
candidate Sentence: (0.21534419059753418, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9603, 9604], [9604, 9612], [9613, 9614], [9614, 9626], [9626, 9627], [9628, 9635], [9635, 9636], [9637, 9644], [9645, 9647], [9648, 9651], [9652, 9661], [9662, 9668], [9668, 9669], [9670, 9677], [9677, 9678], [9679, 9685], [9686, 9689], [9690, 9696], [9697, 9702], [9703, 9705], [9706, 9709], [9710, 9724], [9725, 9731], [9732, 9735], [9736, 9740], [9741, 9745], [9746, 9748], [9749, 9756], [9757, 9770], [9771, 9777], [9778, 9782], [9783, 9784], [9785, 9794], [9795, 9801], [9802, 9805], [9806, 9808], [9809, 9812], [9813, 9814], [9815, 9823], [9823, 9824], [9825, 9835], [9836, 9840], [9841, 9844], [9845, 9853], [9854, 9864], [9865, 9871], [9871, 9872]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.2147291898727417, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[11151, 11154], [11155, 11163], [11164, 11173], [11174, 11176], [11177, 11180], [11181, 11187], [11188, 11190], [11191, 11200], [11201, 11208], [11209, 11211], [11212, 11215], [11216, 11221], [11221, 11222]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885e5f0>.answer
_____________________________ test_yesno[param142] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e6c8>, (<src.tfidf.TF_IDF object at 0x114503a50>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e6c8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43902823328971863, {u'tokens': [u'The', u'guitar', u'player', u'-LRB-', u'c.', u'1672', u'-RRB-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'the', u'guitar', u'player', u'-lrb-', u'c.', u'1672', u'-rrb-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'CD', u'-RRB-', u',', u'IN', u'NNP', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5423, 5426], [5427, 5433], [5434, 5440], [5441, 5442], [5442, 5444], [5445, 5449], [5449, 5450], [5450, 5451], [5452, 5454], [5455, 5463], [5464, 5471], [5472, 5479], [5480, 5483], [5484, 5486], [5487, 5494], [5495, 5499], [5500, 5503], [5504, 5509], [5510, 5520], [5520, 5521], [5522, 5530], [5531, 5534], [5535, 5543], [5543, 5544], [5545, 5547], [5548, 5556], [5557, 5563], [5564, 5566], [5567, 5570], [5571, 5574], [5575, 5584], [5585, 5587], [5588, 5590], [5591, 5599], [5600, 5606], [5607, 5609], [5610, 5612], [5613, 5618], [5619, 5622], [5623, 5627], [5628, 5629], [5630, 5640], [5641, 5646], [5647, 5649], [5650, 5651], [5652, 5658], [5659, 5664], [5665, 5672], [5673, 5675], [5676, 5679], [5680, 5685], [5686, 5688], [5689, 5692], [5693, 5699], [5699, 5701], [5702, 5706], [5706, 5707]]}) 
answer: set([])
candidate Sentence: (0.18585856258869171, {u'tokens': [u'The', u'twelfth', u'fret', u'divides', u'the', u'scale', u'length', u'in', u'two', u'exact', u'halves', u'and', u'the', u'24th', u'fret', u'position', u'divides', u'the', u'scale', u'length', u'in', u'half', u'yet', u'again', u'.'], u'lemmas': [u'the', u'twelfth', u'fret', u'divide', u'the', u'scale', u'length', u'in', u'two', u'exact', u'half', u'and', u'the', u'24th', u'fret', u'position', u'divide', u'the', u'scale', u'length', u'in', u'half', u'yet', u'again', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'CD', u'JJ', u'NNS', u'CC', u'DT', u'JJ', u'NN', u'NN', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'NN', u'RB', u'RB', u'.'], u'char_offsets': [[21707, 21710], [21711, 21718], [21719, 21723], [21724, 21731], [21732, 21735], [21736, 21741], [21742, 21748], [21749, 21751], [21752, 21755], [21756, 21761], [21762, 21768], [21769, 21772], [21773, 21776], [21777, 21781], [21782, 21786], [21787, 21795], [21796, 21803], [21804, 21807], [21808, 21813], [21814, 21820], [21821, 21823], [21824, 21828], [21829, 21832], [21833, 21838], [21838, 21839]]}) 
answer: set([u'category', u'broad'])
candidate Sentence: (0.1324327290058136, {u'tokens': [u'That', u'distance', u'is', u'subtracted', u'from', u'the', u'scale', u'length', u'and', u'the', u'result', u'is', u'divided', u'in', u'two', u'sections', u'by', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'from', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret', u'.'], u'lemmas': [u'that', u'distance', u'be', u'subtract', u'from', u'the', u'scale', u'length', u'and', u'the', u'result', u'be', u'divide', u'in', u'two', u'section', u'by', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'from', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'NN', u'CC', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'CD', u'NNS', u'IN', u'DT', u'JJ', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22094, 22098], [22099, 22107], [22108, 22110], [22111, 22121], [22122, 22126], [22127, 22130], [22131, 22136], [22137, 22143], [22144, 22147], [22148, 22151], [22152, 22158], [22159, 22161], [22162, 22169], [22170, 22172], [22173, 22176], [22177, 22185], [22186, 22188], [22189, 22192], [22193, 22201], [22202, 22204], [22205, 22210], [22211, 22214], [22215, 22223], [22224, 22228], [22229, 22232], [22233, 22238], [22239, 22243], [22244, 22246], [22247, 22250], [22251, 22257], [22258, 22262], [22262, 22263]]}) 
answer: set([u'category', u'broad'])
candidate Sentence: (0.12797744572162628, {u'tokens': [u'The', u'scale', u'length', u'divided', u'by', u'this', u'value', u'yields', u'the', u'distance', u'from', u'the', u'nut', u'to', u'the', u'first', u'fret', u'.'], u'lemmas': [u'the', u'scale', u'length', u'divide', u'by', u'this', u'value', u'yield', u'the', u'distance', u'from', u'the', u'nut', u'to', u'the', u'first', u'fret', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22003, 22006], [22007, 22012], [22013, 22019], [22020, 22027], [22028, 22030], [22031, 22035], [22036, 22041], [22042, 22048], [22049, 22052], [22053, 22061], [22062, 22066], [22067, 22070], [22071, 22074], [22075, 22077], [22078, 22081], [22082, 22087], [22088, 22092], [22092, 22093]]}) 
answer: set([u'category', u'broad', u'two'])
candidate Sentence: (0.11718807369470596, {u'tokens': [u'The', u'ratio', u'of', u'the', u'spacing', u'of', u'two', u'consecutive', u'frets', u'is', u'the', u'twelfth', u'root', u'of', u'two', u'.'], u'lemmas': [u'the', u'ratio', u'of', u'the', u'spacing', u'of', u'two', u'consecutive', u'fret', u'be', u'the', u'twelfth', u'root', u'of', u'two', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'VBZ', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[21629, 21632], [21633, 21638], [21639, 21641], [21642, 21645], [21646, 21653], [21654, 21656], [21657, 21660], [21661, 21672], [21673, 21678], [21679, 21681], [21682, 21685], [21686, 21693], [21694, 21698], [21699, 21701], [21702, 21705], [21705, 21706]]}) 
answer: set([u'category', u'broad', u'divide'])

Can guitars be divided into two broad categories?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e6c8>.answer
_____________________________ test_yesno[param143] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e710>, (<src.tfidf.TF_IDF object at 0x114503a50>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e710>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43902823328971863, {u'tokens': [u'The', u'guitar', u'player', u'-LRB-', u'c.', u'1672', u'-RRB-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'the', u'guitar', u'player', u'-lrb-', u'c.', u'1672', u'-rrb-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'CD', u'-RRB-', u',', u'IN', u'NNP', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5423, 5426], [5427, 5433], [5434, 5440], [5441, 5442], [5442, 5444], [5445, 5449], [5449, 5450], [5450, 5451], [5452, 5454], [5455, 5463], [5464, 5471], [5472, 5479], [5480, 5483], [5484, 5486], [5487, 5494], [5495, 5499], [5500, 5503], [5504, 5509], [5510, 5520], [5520, 5521], [5522, 5530], [5531, 5534], [5535, 5543], [5543, 5544], [5545, 5547], [5548, 5556], [5557, 5563], [5564, 5566], [5567, 5570], [5571, 5574], [5575, 5584], [5585, 5587], [5588, 5590], [5591, 5599], [5600, 5606], [5607, 5609], [5610, 5612], [5613, 5618], [5619, 5622], [5623, 5627], [5628, 5629], [5630, 5640], [5641, 5646], [5647, 5649], [5650, 5651], [5652, 5658], [5659, 5664], [5665, 5672], [5673, 5675], [5676, 5679], [5680, 5685], [5686, 5688], [5689, 5692], [5693, 5699], [5699, 5701], [5702, 5706], [5706, 5707]]}) 
answer: set([])
candidate Sentence: (0.18585856258869171, {u'tokens': [u'The', u'twelfth', u'fret', u'divides', u'the', u'scale', u'length', u'in', u'two', u'exact', u'halves', u'and', u'the', u'24th', u'fret', u'position', u'divides', u'the', u'scale', u'length', u'in', u'half', u'yet', u'again', u'.'], u'lemmas': [u'the', u'twelfth', u'fret', u'divide', u'the', u'scale', u'length', u'in', u'two', u'exact', u'half', u'and', u'the', u'24th', u'fret', u'position', u'divide', u'the', u'scale', u'length', u'in', u'half', u'yet', u'again', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'CD', u'JJ', u'NNS', u'CC', u'DT', u'JJ', u'NN', u'NN', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'NN', u'RB', u'RB', u'.'], u'char_offsets': [[21707, 21710], [21711, 21718], [21719, 21723], [21724, 21731], [21732, 21735], [21736, 21741], [21742, 21748], [21749, 21751], [21752, 21755], [21756, 21761], [21762, 21768], [21769, 21772], [21773, 21776], [21777, 21781], [21782, 21786], [21787, 21795], [21796, 21803], [21804, 21807], [21808, 21813], [21814, 21820], [21821, 21823], [21824, 21828], [21829, 21832], [21833, 21838], [21838, 21839]]}) 
answer: set([u'category', u'broad'])
candidate Sentence: (0.1324327290058136, {u'tokens': [u'That', u'distance', u'is', u'subtracted', u'from', u'the', u'scale', u'length', u'and', u'the', u'result', u'is', u'divided', u'in', u'two', u'sections', u'by', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'from', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret', u'.'], u'lemmas': [u'that', u'distance', u'be', u'subtract', u'from', u'the', u'scale', u'length', u'and', u'the', u'result', u'be', u'divide', u'in', u'two', u'section', u'by', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'from', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'NN', u'CC', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'CD', u'NNS', u'IN', u'DT', u'JJ', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22094, 22098], [22099, 22107], [22108, 22110], [22111, 22121], [22122, 22126], [22127, 22130], [22131, 22136], [22137, 22143], [22144, 22147], [22148, 22151], [22152, 22158], [22159, 22161], [22162, 22169], [22170, 22172], [22173, 22176], [22177, 22185], [22186, 22188], [22189, 22192], [22193, 22201], [22202, 22204], [22205, 22210], [22211, 22214], [22215, 22223], [22224, 22228], [22229, 22232], [22233, 22238], [22239, 22243], [22244, 22246], [22247, 22250], [22251, 22257], [22258, 22262], [22262, 22263]]}) 
answer: set([u'category', u'broad'])
candidate Sentence: (0.12797744572162628, {u'tokens': [u'The', u'scale', u'length', u'divided', u'by', u'this', u'value', u'yields', u'the', u'distance', u'from', u'the', u'nut', u'to', u'the', u'first', u'fret', u'.'], u'lemmas': [u'the', u'scale', u'length', u'divide', u'by', u'this', u'value', u'yield', u'the', u'distance', u'from', u'the', u'nut', u'to', u'the', u'first', u'fret', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22003, 22006], [22007, 22012], [22013, 22019], [22020, 22027], [22028, 22030], [22031, 22035], [22036, 22041], [22042, 22048], [22049, 22052], [22053, 22061], [22062, 22066], [22067, 22070], [22071, 22074], [22075, 22077], [22078, 22081], [22082, 22087], [22088, 22092], [22092, 22093]]}) 
answer: set([u'category', u'broad', u'two'])
candidate Sentence: (0.11718807369470596, {u'tokens': [u'The', u'ratio', u'of', u'the', u'spacing', u'of', u'two', u'consecutive', u'frets', u'is', u'the', u'twelfth', u'root', u'of', u'two', u'.'], u'lemmas': [u'the', u'ratio', u'of', u'the', u'spacing', u'of', u'two', u'consecutive', u'fret', u'be', u'the', u'twelfth', u'root', u'of', u'two', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'VBZ', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[21629, 21632], [21633, 21638], [21639, 21641], [21642, 21645], [21646, 21653], [21654, 21656], [21657, 21660], [21661, 21672], [21673, 21678], [21679, 21681], [21682, 21685], [21686, 21693], [21694, 21698], [21699, 21701], [21702, 21705], [21705, 21706]]}) 
answer: set([u'category', u'broad', u'divide'])

Can guitars be divided into two broad categories?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e710>.answer
_____________________________ test_yesno[param146] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e7e8>, (<src.tfidf.TF_IDF object at 0x11606ec90>, set(['becquerel', 'henri', 'henri_becquerel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e7e8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.53987157344818115, {u'tokens': [u'He', u'studied', u'science', u'at', u'the', u'\xc9cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'\xc9cole', u'des', u'Ponts', u'et', u'Chauss\xe9es', u'.'], u'lemmas': [u'he', u'study', u'science', u'at', u'the', u'\xc9cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'\xc9cole', u'des', u'Ponts', u'et', u'chauss\xe9es', u'.'], u'pos': [u'PRP', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NNP', u'FW', u'NNP', u'FW', u'FW', u'.'], u'char_offsets': [[400, 402], [403, 410], [411, 418], [419, 421], [422, 425], [426, 431], [432, 445], [446, 449], [450, 461], [462, 464], [465, 468], [469, 474], [475, 478], [479, 484], [485, 487], [488, 497], [497, 498]]}) 
answer: set([u'cole', u'chausses'])
candidate Sentence: (0.10870081186294556, {u'tokens': [u'In', u'1908', u',', u'the', u'year', u'of', u'his', u'death', u',', u'Becquerel', u'was', u'elected', u'Permanent', u'Secretary', u'of', u'the', u'Acad\xe9mie', u'des', u'Sciences', u'.'], u'lemmas': [u'in', u'1908', u',', u'the', u'year', u'of', u'he', u'death', u',', u'Becquerel', u'be', u'elect', u'Permanent', u'Secretary', u'of', u'the', u'Acad\xe9mie', u'des', u'Sciences', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'VBN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[2726, 2728], [2729, 2733], [2733, 2734], [2735, 2738], [2739, 2743], [2744, 2746], [2747, 2750], [2751, 2756], [2756, 2757], [2758, 2767], [2768, 2771], [2772, 2779], [2780, 2789], [2790, 2799], [2800, 2802], [2803, 2806], [2807, 2815], [2816, 2819], [2820, 2828], [2828, 2829]]}) 
answer: set([u'science', u'study', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.084758460521697998, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1316, 1326], [1327, 1330], [1331, 1337], [1338, 1340], [1341, 1344], [1345, 1351], [1352, 1359], [1360, 1362], [1363, 1371], [1372, 1374], [1375, 1377], [1378, 1385], [1386, 1390], [1390, 1391], [1392, 1394], [1395, 1399], [1399, 1400], [1402, 1405], [1406, 1411], [1412, 1413], [1414, 1421], [1422, 1434], [1435, 1440], [1441, 1445], [1446, 1447], [1448, 1455], [1456, 1464], [1465, 1467], [1468, 1471], [1472, 1478], [1479, 1481], [1482, 1486], [1487, 1492], [1493, 1498], [1499, 1504], [1504, 1505], [1506, 1510], [1511, 1515], [1516, 1519], [1520, 1525], [1526, 1530], [1531, 1534], [1535, 1541], [1542, 1549], [1550, 1554], [1555, 1560], [1561, 1568], [1569, 1571], [1572, 1575], [1576, 1579], [1580, 1583], [1584, 1585], [1586, 1589], [1589, 1590]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.082553312182426453, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2830, 2832], [2833, 2837], [2838, 2840], [2841, 2844], [2845, 2848], [2849, 2851], [2852, 2854], [2855, 2857], [2858, 2860], [2861, 2868], [2868, 2869]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.062086045742034912, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[542, 544], [545, 549], [549, 550], [551, 553], [554, 560], [561, 564], [565, 570], [571, 573], [574, 577], [578, 584], [585, 587], [588, 594], [595, 598], [599, 606], [607, 612], [613, 615], [616, 619], [620, 626], [627, 635], [636, 646], [647, 656], [656, 657]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])

Did Becquerel study science at the cole des Ponts et Chausses?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x11885e7e8>.answer
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e878>, (<src.tfidf.TF_IDF object at 0x11606ec90>, set(['becquerel', 'henri', 'henri_becquerel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79266440868377686, {u'tokens': [u'In', u'1894', u',', u'he', u'became', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'Highways', u'.'], u'lemmas': [u'in', u'1894', u',', u'he', u'become', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'highway', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'NNS', u'.'], u'char_offsets': [[658, 660], [661, 665], [665, 666], [667, 669], [670, 676], [677, 682], [683, 691], [692, 694], [695, 698], [699, 709], [710, 712], [713, 720], [721, 724], [725, 733], [733, 734]]}) 
answer: set([u'1892'])
candidate Sentence: (0.19068318605422974, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[542, 544], [545, 549], [549, 550], [551, 553], [554, 560], [561, 564], [565, 570], [571, 573], [574, 577], [578, 584], [585, 587], [588, 594], [595, 598], [599, 606], [607, 612], [613, 615], [616, 619], [620, 626], [627, 635], [636, 646], [647, 656], [656, 657]]}) 
answer: set([u'department', u'bridges', u'chief', u'highway', u'engineer'])
candidate Sentence: (0.1143018901348114, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1316, 1326], [1327, 1330], [1331, 1337], [1338, 1340], [1341, 1344], [1345, 1351], [1352, 1359], [1360, 1362], [1363, 1371], [1372, 1374], [1375, 1377], [1378, 1385], [1386, 1390], [1390, 1391], [1392, 1394], [1395, 1399], [1399, 1400], [1402, 1405], [1406, 1411], [1412, 1413], [1414, 1421], [1422, 1434], [1435, 1440], [1441, 1445], [1446, 1447], [1448, 1455], [1456, 1464], [1465, 1467], [1468, 1471], [1472, 1478], [1479, 1481], [1482, 1486], [1487, 1492], [1493, 1498], [1499, 1504], [1504, 1505], [1506, 1510], [1511, 1515], [1516, 1519], [1520, 1525], [1526, 1530], [1531, 1534], [1535, 1541], [1542, 1549], [1550, 1554], [1555, 1560], [1561, 1568], [1569, 1571], [1572, 1575], [1576, 1579], [1580, 1583], [1584, 1585], [1586, 1589], [1589, 1590]]}) 
answer: set([u'bridges', u'chief', u'highway', u'department', u'1892', u'engineer'])
candidate Sentence: (0.048345927149057388, {u'tokens': [u'In', u'1903', u',', u'he', u'shared', u'the', u'Nobel', u'Prize', u'in', u'Physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'services', u'he', u'has', u'rendered', u'by', u'his', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'lemmas': [u'in', u'1903', u',', u'he', u'share', u'the', u'Nobel', u'Prize', u'in', u'physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'service', u'he', u'have', u'render', u'by', u'he', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'``', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'PRP', u'VBZ', u'VBN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u"''", u'.'], u'char_offsets': [[2332, 2334], [2335, 2339], [2339, 2340], [2341, 2343], [2344, 2350], [2351, 2354], [2355, 2360], [2361, 2366], [2367, 2369], [2370, 2377], [2378, 2382], [2383, 2389], [2390, 2393], [2394, 2399], [2400, 2405], [2406, 2407], [2407, 2409], [2410, 2421], [2422, 2424], [2425, 2428], [2429, 2442], [2443, 2451], [2452, 2454], [2455, 2458], [2459, 2467], [2468, 2470], [2471, 2474], [2475, 2484], [2485, 2487], [2488, 2499], [2500, 2513], [2513, 2514], [2514, 2515]]}) 
answer: set([u'bridges', u'chief', u'highway', u'department', u'become', u'1892', u'engineer'])
candidate Sentence: (0.023881666362285614, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2830, 2832], [2833, 2837], [2838, 2840], [2841, 2844], [2845, 2848], [2849, 2851], [2852, 2854], [2855, 2857], [2858, 2860], [2861, 2868], [2868, 2869]]}) 
answer: set([u'bridges', u'chief', u'1892', u'department', u'become', u'highway', u'engineer'])

Did he become chief engineer in the Department of Bridges and Highways in 1892?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885e878>.answer
_____________________________ test_yesno[param151] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e950>, (<src.tfidf.TF_IDF object at 0x114503f10>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885e950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32045501470565796, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[48600, 48602], [48603, 48608], [48609, 48610], [48611, 48622], [48622, 48623], [48624, 48630], [48631, 48633], [48634, 48635], [48635, 48638], [48639, 48644], [48645, 48651], [48652, 48654], [48655, 48660], [48660, 48661]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49344, 49345], [49346, 49352], [49352, 49353], [49354, 49359], [49359, 49360]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49861, 49862], [49862, 49868], [49868, 49869], [49870, 49875], [49875, 49876]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[47281, 47282], [47283, 47289], [47289, 47290], [47291, 47296], [47296, 47297]]}) 
answer: set([u'british'])
candidate Sentence: (0.17914032936096191, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u':', u'CD', u'.'], u'char_offsets': [[48107, 48108], [48108, 48111], [48112, 48118], [48119, 48124], [48125, 48127], [48128, 48136], [48136, 48137], [48138, 48144], [48144, 48146], [48147, 48153], [48154, 48156], [48157, 48165], [48165, 48166], [48167, 48174], [48175, 48182], [48183, 48186], [48187, 48190], [48191, 48198], [48199, 48201], [48202, 48209], [48210, 48212], [48212, 48213], [48214, 48217], [48217, 48218], [48218, 48221], [48221, 48222]]}) 
answer: set([])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885e950>.answer
_____________________________ test_yesno[param152] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e998>, (<src.tfidf.TF_IDF object at 0x114503f10>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was English.')
E                +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x11885e998>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32045501470565796, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[48600, 48602], [48603, 48608], [48609, 48610], [48611, 48622], [48622, 48623], [48624, 48630], [48631, 48633], [48634, 48635], [48635, 48638], [48639, 48644], [48645, 48651], [48652, 48654], [48655, 48660], [48660, 48661]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49344, 49345], [49346, 49352], [49352, 49353], [49354, 49359], [49359, 49360]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49861, 49862], [49862, 49868], [49868, 49869], [49870, 49875], [49875, 49876]]}) 
answer: set([u'british'])
candidate Sentence: (0.20474809408187866, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[47281, 47282], [47283, 47289], [47289, 47290], [47291, 47296], [47296, 47297]]}) 
answer: set([u'british'])
candidate Sentence: (0.17914032936096191, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u':', u'CD', u'.'], u'char_offsets': [[48107, 48108], [48108, 48111], [48112, 48118], [48119, 48124], [48125, 48127], [48128, 48136], [48136, 48137], [48138, 48144], [48144, 48146], [48147, 48153], [48154, 48156], [48157, 48165], [48165, 48166], [48167, 48174], [48175, 48182], [48183, 48186], [48187, 48190], [48191, 48198], [48199, 48201], [48202, 48209], [48210, 48212], [48212, 48213], [48214, 48217], [48217, 48218], [48218, 48221], [48221, 48222]]}) 
answer: set([])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was English.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was English.')
 +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x11885e998>.answer
_____________________________ test_yesno[param153] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885e9e0>, (<src.tfidf.TF_IDF object at 0x114503f10>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
E                +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x11885e9e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.35512158274650574, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[48600, 48602], [48603, 48608], [48609, 48610], [48611, 48622], [48622, 48623], [48624, 48630], [48631, 48633], [48634, 48635], [48635, 48638], [48639, 48644], [48645, 48651], [48652, 48654], [48655, 48660], [48660, 48661]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22689756751060486, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[47281, 47282], [47283, 47289], [47289, 47290], [47291, 47296], [47296, 47297]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22689756751060486, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49344, 49345], [49346, 49352], [49352, 49353], [49354, 49359], [49359, 49360]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22689756751060486, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49861, 49862], [49862, 49868], [49868, 49869], [49870, 49875], [49875, 49876]]}) 
answer: set([u'religious'])
candidate Sentence: (0.17650423943996429, {u'tokens': [u'Thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'views', u'and', u'Anglican', u'orthodoxy', u'was', u'averted', u'.'], u'lemmas': [u'thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'view', u'and', u'anglican', u'orthodoxy', u'be', u'avert', u'.'], u'pos': [u'RB', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[10822, 10826], [10827, 10828], [10829, 10837], [10838, 10845], [10846, 10852], [10852, 10854], [10855, 10864], [10865, 10870], [10871, 10874], [10875, 10883], [10884, 10893], [10894, 10897], [10898, 10905], [10905, 10906]]}) 
answer: set([])

Was Isaac Newton religious?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was highly religious, though an unorthodox Christian.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 300 documents, 13640 characters, 2640 tokens, 45.5 char/doc, 8.8 tok/doc RATES: 15.010 doc/sec, 132.1 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
 +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x11885e9e0>.answer
_____________________________ test_yesno[param159] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885eb90>, (<src.tfidf.TF_IDF object at 0x114503f10>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885eb90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32071039080619812, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3294, 3296], [3296, 3297], [3298, 3304], [3305, 3307], [3308, 3315], [3316, 3317], [3318, 3321], [3321, 3322], [3323, 3327], [3327, 3328], [3329, 3333], [3334, 3337], [3338, 3341], [3342, 3344], [3345, 3350], [3351, 3357], [3358, 3363], [3364, 3366], [3367, 3370], [3371, 3380], [3380, 3381], [3382, 3388], [3389, 3392], [3393, 3401], [3402, 3404], [3405, 3408], [3409, 3413], [3413, 3415], [3416, 3422], [3422, 3423], [3424, 3432], [3433, 3434], [3434, 3439], [3440, 3443], [3444, 3453], [3454, 3457], [3458, 3463], [3464, 3466], [3467, 3471], [3472, 3476], [3477, 3478], [3479, 3486], [3487, 3493], [3494, 3498], [3498, 3499], [3499, 3500]]}) 
answer: set([u'schol'])
candidate Sentence: (0.25480198860168457, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44724, 44727], [44728, 44732], [44732, 44734], [44735, 44741], [44741, 44742], [44743, 44751], [44751, 44752], [44753, 44759], [44760, 44764], [44765, 44768], [44769, 44773], [44774, 44777], [44778, 44787], [44788, 44790], [44791, 44794], [44795, 44801], [44801, 44802], [44803, 44811], [44812, 44815], [44816, 44827], [44828, 44830], [44831, 44834], [44835, 44845], [44845, 44847], [44848, 44854], [44855, 44859], [44860, 44865], [44866, 44871], [44871, 44872]]}) 
answer: set([u'educate', u'schol'])
candidate Sentence: (0.22604398429393768, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[48600, 48602], [48603, 48608], [48609, 48610], [48611, 48622], [48622, 48623], [48624, 48630], [48631, 48633], [48634, 48635], [48635, 48638], [48639, 48644], [48645, 48651], [48652, 48654], [48655, 48660], [48660, 48661]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])
candidate Sentence: (0.15292468667030334, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38589, 38597], [38598, 38602], [38602, 38603], [38604, 38606], [38606, 38608], [38609, 38612], [38613, 38615], [38616, 38622], [38622, 38624], [38625, 38630], [38631, 38633], [38634, 38637], [38638, 38642], [38642, 38644], [38645, 38653], [38654, 38657], [38658, 38665], [38666, 38673], [38674, 38682], [38682, 38683]]}) 
answer: set([u'educate', u'grantham', u'schol'])
candidate Sentence: (0.14731311798095703, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49344, 49345], [49346, 49352], [49352, 49353], [49354, 49359], [49359, 49360]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885eb90>.answer
_____________________________ test_yesno[param160] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885ebd8>, (<src.tfidf.TF_IDF object at 0x114503f10>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ebd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32071039080619812, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3294, 3296], [3296, 3297], [3298, 3304], [3305, 3307], [3308, 3315], [3316, 3317], [3318, 3321], [3321, 3322], [3323, 3327], [3327, 3328], [3329, 3333], [3334, 3337], [3338, 3341], [3342, 3344], [3345, 3350], [3351, 3357], [3358, 3363], [3364, 3366], [3367, 3370], [3371, 3380], [3380, 3381], [3382, 3388], [3389, 3392], [3393, 3401], [3402, 3404], [3405, 3408], [3409, 3413], [3413, 3415], [3416, 3422], [3422, 3423], [3424, 3432], [3433, 3434], [3434, 3439], [3440, 3443], [3444, 3453], [3454, 3457], [3458, 3463], [3464, 3466], [3467, 3471], [3472, 3476], [3477, 3478], [3479, 3486], [3487, 3493], [3494, 3498], [3498, 3499], [3499, 3500]]}) 
answer: set([u'schol'])
candidate Sentence: (0.25480198860168457, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44724, 44727], [44728, 44732], [44732, 44734], [44735, 44741], [44741, 44742], [44743, 44751], [44751, 44752], [44753, 44759], [44760, 44764], [44765, 44768], [44769, 44773], [44774, 44777], [44778, 44787], [44788, 44790], [44791, 44794], [44795, 44801], [44801, 44802], [44803, 44811], [44812, 44815], [44816, 44827], [44828, 44830], [44831, 44834], [44835, 44845], [44845, 44847], [44848, 44854], [44855, 44859], [44860, 44865], [44866, 44871], [44871, 44872]]}) 
answer: set([u'educate', u'schol'])
candidate Sentence: (0.22604398429393768, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[48600, 48602], [48603, 48608], [48609, 48610], [48611, 48622], [48622, 48623], [48624, 48630], [48631, 48633], [48634, 48635], [48635, 48638], [48639, 48644], [48645, 48651], [48652, 48654], [48655, 48660], [48660, 48661]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])
candidate Sentence: (0.15292468667030334, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38589, 38597], [38598, 38602], [38602, 38603], [38604, 38606], [38606, 38608], [38609, 38612], [38613, 38615], [38616, 38622], [38622, 38624], [38625, 38630], [38631, 38633], [38634, 38637], [38638, 38642], [38642, 38644], [38645, 38653], [38654, 38657], [38658, 38665], [38666, 38673], [38674, 38682], [38682, 38683]]}) 
answer: set([u'educate', u'grantham', u'schol'])
candidate Sentence: (0.14731311798095703, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49344, 49345], [49346, 49352], [49352, 49353], [49354, 49359], [49359, 49360]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ebd8>.answer
_____________________________ test_yesno[param161] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885ec20>, (<src.tfidf.TF_IDF object at 0x1119fb8d0>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ec20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38293623924255371, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22559, 22566], [22566, 22568], [22569, 22576], [22577, 22585], [22586, 22594], [22595, 22600], [22601, 22604], [22605, 22613], [22614, 22622], [22623, 22627], [22627, 22628], [22629, 22637], [22638, 22640], [22641, 22644], [22645, 22650], [22651, 22653], [22654, 22662], [22662, 22663], [22664, 22673], [22674, 22677], [22678, 22685], [22686, 22692], [22693, 22701], [22702, 22704], [22705, 22714], [22714, 22715]]}) 
answer: set([u'build'])
candidate Sentence: (0.28426390886306763, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[22957, 22960], [22961, 22966], [22967, 22969], [22970, 22978], [22979, 22981], [22982, 22989], [22990, 22997], [22998, 23000], [23001, 23010], [23011, 23014], [23015, 23022], [23023, 23031], [23032, 23034], [23035, 23042], [23043, 23046], [23047, 23056], [23056, 23057]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18283633887767792, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[9011, 9014], [9015, 9019], [9020, 9028], [9029, 9036], [9036, 9038], [9039, 9048], [9049, 9052], [9053, 9062], [9063, 9070], [9071, 9074], [9075, 9082], [9083, 9090], [9091, 9099], [9100, 9103], [9104, 9107], [9108, 9112], [9113, 9118], [9119, 9127], [9127, 9128]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])
candidate Sentence: (0.16602367162704468, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3444, 3455], [3456, 3458], [3459, 3466], [3467, 3469], [3470, 3474], [3475, 3479], [3480, 3487], [3488, 3499], [3500, 3504], [3505, 3508], [3509, 3516], [3517, 3526], [3526, 3527], [3528, 3534], [3535, 3537], [3538, 3541], [3542, 3547], [3547, 3548], [3549, 3551], [3552, 3560], [3561, 3565], [3566, 3568], [3569, 3574], [3575, 3581], [3582, 3590], [3591, 3597], [3598, 3602], [3603, 3606], [3607, 3612], [3613, 3622], [3623, 3625], [3626, 3630], [3630, 3631]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.1545906662940979, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23691, 23694], [23695, 23699], [23700, 23702], [23703, 23713], [23714, 23716], [23717, 23724], [23725, 23730], [23731, 23739], [23740, 23749], [23749, 23750]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ec20>.answer
_____________________________ test_yesno[param162] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885ec68>, (<src.tfidf.TF_IDF object at 0x1119fb8d0>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes,')
E                +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x11885ec68>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38293623924255371, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22559, 22566], [22566, 22568], [22569, 22576], [22577, 22585], [22586, 22594], [22595, 22600], [22601, 22604], [22605, 22613], [22614, 22622], [22623, 22627], [22627, 22628], [22629, 22637], [22638, 22640], [22641, 22644], [22645, 22650], [22651, 22653], [22654, 22662], [22662, 22663], [22664, 22673], [22674, 22677], [22678, 22685], [22686, 22692], [22693, 22701], [22702, 22704], [22705, 22714], [22714, 22715]]}) 
answer: set([u'build'])
candidate Sentence: (0.28426390886306763, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[22957, 22960], [22961, 22966], [22967, 22969], [22970, 22978], [22979, 22981], [22982, 22989], [22990, 22997], [22998, 23000], [23001, 23010], [23011, 23014], [23015, 23022], [23023, 23031], [23032, 23034], [23035, 23042], [23043, 23046], [23047, 23056], [23056, 23057]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18283633887767792, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[9011, 9014], [9015, 9019], [9020, 9028], [9029, 9036], [9036, 9038], [9039, 9048], [9049, 9052], [9053, 9062], [9063, 9070], [9071, 9074], [9075, 9082], [9083, 9090], [9091, 9099], [9100, 9103], [9104, 9107], [9108, 9112], [9113, 9118], [9119, 9127], [9127, 9128]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])
candidate Sentence: (0.16602367162704468, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3444, 3455], [3456, 3458], [3459, 3466], [3467, 3469], [3470, 3474], [3475, 3479], [3480, 3487], [3488, 3499], [3500, 3504], [3505, 3508], [3509, 3516], [3517, 3526], [3526, 3527], [3528, 3534], [3535, 3537], [3538, 3541], [3542, 3547], [3547, 3548], [3549, 3551], [3552, 3560], [3561, 3565], [3566, 3568], [3569, 3574], [3575, 3581], [3582, 3590], [3591, 3597], [3598, 3602], [3603, 3606], [3607, 3612], [3613, 3622], [3623, 3625], [3626, 3630], [3630, 3631]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.1545906662940979, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23691, 23694], [23695, 23699], [23700, 23702], [23703, 23713], [23714, 23716], [23717, 23724], [23725, 23730], [23731, 23739], [23740, 23749], [23749, 23750]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes,
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes,')
 +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x11885ec68>.answer
_____________________________ test_yesno[param165] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885ed40>, (<src.tfidf.TF_IDF object at 0x1119fb8d0>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ed40>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46456235647201538, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[339, 342], [343, 355], [356, 360], [360, 361], [362, 373], [373, 374], [375, 377], [378, 381], [382, 388], [389, 396], [397, 399], [400, 403], [404, 409], [409, 410]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.38391271233558655, {u'tokens': [u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [9, 13], [14, 17], [18, 25], [25, 26], [27, 29], [30, 33], [34, 41], [42, 45], [46, 53], [54, 58], [59, 61], [62, 71], [71, 72]]}) 
answer: set([u'12th', u'world'])
candidate Sentence: (0.35539999604225159, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[22077, 22080], [22081, 22091], [22092, 22094], [22095, 22102], [22103, 22110], [22111, 22113], [22114, 22123], [22124, 22126], [22127, 22129], [22130, 22137], [22137, 22138], [22139, 22145], [22146, 22148], [22149, 22152], [22153, 22159], [22160, 22167], [22168, 22173], [22174, 22178], [22179, 22181], [22182, 22185], [22186, 22191], [22191, 22192]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.32038417458534241, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[231, 233], [234, 236], [237, 240], [241, 245], [246, 254], [255, 259], [260, 262], [263, 272], [273, 276], [277, 286], [287, 291], [291, 292], [293, 296], [297, 299], [300, 303], [304, 319], [320, 324], [325, 327], [328, 331], [332, 337], [337, 338]]}) 
answer: set([u'12th', u'largest'])
candidate Sentence: (0.23952849209308624, {u'tokens': [u'Financial', u'services', u',', u'trade', u'and', u'manufacturing', u'are', u'the', u'largest', u'sectors', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'lemmas': [u'Financial', u'service', u',', u'trade', u'and', u'manufacturing', u'be', u'the', u'largest', u'sector', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'pos': [u'NNP', u'NNS', u',', u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'NNS', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[19474, 19483], [19484, 19492], [19492, 19493], [19494, 19499], [19500, 19503], [19504, 19517], [19518, 19521], [19522, 19525], [19526, 19533], [19534, 19541], [19542, 19544], [19545, 19548], [19549, 19553], [19553, 19555], [19556, 19563], [19563, 19564]]}) 
answer: set([u'12th', u'world'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x11885ed40>.answer
_____________________________ test_yesno[param166] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885ed88>, (<src.tfidf.TF_IDF object at 0x1119fb8d0>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885ed88>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46456235647201538, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[339, 342], [343, 355], [356, 360], [360, 361], [362, 373], [373, 374], [375, 377], [378, 381], [382, 388], [389, 396], [397, 399], [400, 403], [404, 409], [409, 410]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.38391271233558655, {u'tokens': [u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [9, 13], [14, 17], [18, 25], [25, 26], [27, 29], [30, 33], [34, 41], [42, 45], [46, 53], [54, 58], [59, 61], [62, 71], [71, 72]]}) 
answer: set([u'12th', u'world'])
candidate Sentence: (0.35539999604225159, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[22077, 22080], [22081, 22091], [22092, 22094], [22095, 22102], [22103, 22110], [22111, 22113], [22114, 22123], [22124, 22126], [22127, 22129], [22130, 22137], [22137, 22138], [22139, 22145], [22146, 22148], [22149, 22152], [22153, 22159], [22160, 22167], [22168, 22173], [22174, 22178], [22179, 22181], [22182, 22185], [22186, 22191], [22191, 22192]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.32038417458534241, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[231, 233], [234, 236], [237, 240], [241, 245], [246, 254], [255, 259], [260, 262], [263, 272], [273, 276], [277, 286], [287, 291], [291, 292], [293, 296], [297, 299], [300, 303], [304, 319], [320, 324], [325, 327], [328, 331], [332, 337], [337, 338]]}) 
answer: set([u'12th', u'largest'])
candidate Sentence: (0.23952849209308624, {u'tokens': [u'Financial', u'services', u',', u'trade', u'and', u'manufacturing', u'are', u'the', u'largest', u'sectors', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'lemmas': [u'Financial', u'service', u',', u'trade', u'and', u'manufacturing', u'be', u'the', u'largest', u'sector', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'pos': [u'NNP', u'NNS', u',', u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'NNS', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[19474, 19483], [19484, 19492], [19492, 19493], [19494, 19499], [19500, 19503], [19504, 19517], [19518, 19521], [19522, 19525], [19526, 19533], [19534, 19541], [19542, 19544], [19545, 19548], [19549, 19553], [19553, 19555], [19556, 19563], [19563, 19564]]}) 
answer: set([u'12th', u'world'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x11885ed88>.answer
_____________________________ test_yesno[param174] _____________________________

param = (<src.question_processing.Question_parser instance at 0x11885efc8>, (<src.tfidf.TF_IDF object at 0x114503510>, set(['james', 'james_watt', 'watt'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
E                +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x11885efc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24781768023967743, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7749, 7751], [7752, 7755], [7756, 7757], [7758, 7766], [7767, 7770], [7771, 7782], [7783, 7785], [7786, 7795], [7796, 7798], [7799, 7806], [7806, 7807]]}) 
answer: set([u'engine'])
candidate Sentence: (0.16439877450466156, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8280, 8287], [8288, 8293], [8294, 8298], [8299, 8303], [8304, 8315], [8315, 8316], [8317, 8320], [8321, 8334], [8335, 8347], [8348, 8355], [8356, 8364], [8364, 8365]]}) 
answer: set([u'engine'])
candidate Sentence: (0.15922486782073975, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5777, 5781], [5781, 5782], [5783, 5787], [5788, 5791], [5792, 5799], [5800, 5807], [5808, 5815], [5815, 5816], [5817, 5824], [5825, 5832], [5833, 5838], [5839, 5848], [5849, 5853], [5854, 5856], [5857, 5865], [5866, 5876], [5877, 5880], [5881, 5886], [5887, 5889], [5890, 5897], [5898, 5905], [5906, 5911], [5912, 5915], [5916, 5919], [5920, 5924], [5925, 5929], [5930, 5932], [5933, 5936], [5937, 5944], [5944, 5945]]}) 
answer: set([u'improve'])
candidate Sentence: (0.14191658794879913, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8738, 8740], [8741, 8744], [8745, 8754], [8754, 8755], [8756, 8760], [8761, 8763], [8764, 8767], [8768, 8777], [8778, 8785], [8786, 8789], [8790, 8797], [8798, 8810], [8811, 8812], [8813, 8816], [8817, 8820], [8821, 8825], [8826, 8831], [8831, 8832]]}) 
answer: set([u'engine', u'improve'])
candidate Sentence: (0.12631934881210327, {u'tokens': [u'It', u'was', u'clear', u'to', u'many', u'that', u'higher', u'pressures', u'produced', u'in', u'improved', u'boilers', u'would', u'produce', u'engines', u'having', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'was', u'soon', u'embodied', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'lemmas': [u'it', u'be', u'clear', u'to', u'many', u'that', u'higher', u'pressure', u'produce', u'in', u'improve', u'boiler', u'would', u'produce', u'engine', u'have', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'be', u'soon', u'embody', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'JJ', u'IN', u'JJR', u'NNS', u'VBN', u'IN', u'VBN', u'NNS', u'MD', u'VB', u'NNS', u'VBG', u'RB', u'JJR', u'NN', u',', u'CC', u'MD', u'VB', u'TO', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[7809, 7811], [7812, 7815], [7816, 7821], [7822, 7824], [7825, 7829], [7830, 7834], [7835, 7841], [7842, 7851], [7852, 7860], [7861, 7863], [7864, 7872], [7873, 7880], [7881, 7886], [7887, 7894], [7895, 7902], [7903, 7909], [7910, 7914], [7915, 7921], [7922, 7932], [7932, 7933], [7934, 7937], [7938, 7943], [7944, 7948], [7949, 7951], [7952, 7955], [7956, 7966], [7967, 7969], [7970, 7984], [7985, 7989], [7990, 7993], [7994, 7998], [7999, 8007], [8008, 8010], [8011, 8014], [8015, 8025], [8026, 8029], [8030, 8039], [8039, 8040]]}) 
answer: set([])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
 +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x11885efc8>.answer
_____________________________ test_yesno[param175] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3050>, (<src.tfidf.TF_IDF object at 0x114503510>, set(['james', 'james_watt', 'watt'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3050>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24781768023967743, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7749, 7751], [7752, 7755], [7756, 7757], [7758, 7766], [7767, 7770], [7771, 7782], [7783, 7785], [7786, 7795], [7796, 7798], [7799, 7806], [7806, 7807]]}) 
answer: set([u'engine'])
candidate Sentence: (0.16439877450466156, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8280, 8287], [8288, 8293], [8294, 8298], [8299, 8303], [8304, 8315], [8315, 8316], [8317, 8320], [8321, 8334], [8335, 8347], [8348, 8355], [8356, 8364], [8364, 8365]]}) 
answer: set([u'engine'])
candidate Sentence: (0.15922486782073975, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5777, 5781], [5781, 5782], [5783, 5787], [5788, 5791], [5792, 5799], [5800, 5807], [5808, 5815], [5815, 5816], [5817, 5824], [5825, 5832], [5833, 5838], [5839, 5848], [5849, 5853], [5854, 5856], [5857, 5865], [5866, 5876], [5877, 5880], [5881, 5886], [5887, 5889], [5890, 5897], [5898, 5905], [5906, 5911], [5912, 5915], [5916, 5919], [5920, 5924], [5925, 5929], [5930, 5932], [5933, 5936], [5937, 5944], [5944, 5945]]}) 
answer: set([u'improve'])
candidate Sentence: (0.14191658794879913, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8738, 8740], [8741, 8744], [8745, 8754], [8754, 8755], [8756, 8760], [8761, 8763], [8764, 8767], [8768, 8777], [8778, 8785], [8786, 8789], [8790, 8797], [8798, 8810], [8811, 8812], [8813, 8816], [8817, 8820], [8821, 8825], [8826, 8831], [8831, 8832]]}) 
answer: set([u'engine', u'improve'])
candidate Sentence: (0.12631934881210327, {u'tokens': [u'It', u'was', u'clear', u'to', u'many', u'that', u'higher', u'pressures', u'produced', u'in', u'improved', u'boilers', u'would', u'produce', u'engines', u'having', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'was', u'soon', u'embodied', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'lemmas': [u'it', u'be', u'clear', u'to', u'many', u'that', u'higher', u'pressure', u'produce', u'in', u'improve', u'boiler', u'would', u'produce', u'engine', u'have', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'be', u'soon', u'embody', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'JJ', u'IN', u'JJR', u'NNS', u'VBN', u'IN', u'VBN', u'NNS', u'MD', u'VB', u'NNS', u'VBG', u'RB', u'JJR', u'NN', u',', u'CC', u'MD', u'VB', u'TO', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[7809, 7811], [7812, 7815], [7816, 7821], [7822, 7824], [7825, 7829], [7830, 7834], [7835, 7841], [7842, 7851], [7852, 7860], [7861, 7863], [7864, 7872], [7873, 7880], [7881, 7886], [7887, 7894], [7895, 7902], [7903, 7909], [7910, 7914], [7915, 7921], [7922, 7932], [7932, 7933], [7934, 7937], [7938, 7943], [7944, 7948], [7949, 7951], [7952, 7955], [7956, 7966], [7967, 7969], [7970, 7984], [7985, 7989], [7990, 7993], [7994, 7998], [7999, 8007], [8008, 8010], [8011, 8014], [8015, 8025], [8026, 8029], [8030, 8039], [8039, 8040]]}) 
answer: set([])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3050>.answer
_____________________________ test_yesno[param186] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3368>, (<src.tfidf.TF_IDF object at 0x1128f77d0>, set(['kuala', 'kuala_lumpur', 'lumpur'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36749625205993652, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12855, 12860], [12861, 12867], [12868, 12870], [12871, 12875], [12876, 12878], [12879, 12882], [12883, 12893], [12894, 12896], [12897, 12905], [12905, 12906]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.36584106087684631, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[583, 588], [589, 595], [596, 598], [599, 602], [603, 607], [608, 610], [611, 614], [615, 625], [626, 628], [629, 637], [637, 638]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.25351014733314514, {u'tokens': [u'As', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'has', u'a', u'comprehensive', u'road', u'network', u'that', u'leads', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'lemmas': [u'as', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'have', u'a', u'comprehensive', u'road', u'network', u'that', u'lead', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'pos': [u'IN', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'WDT', u'VBZ', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[35719, 35721], [35722, 35729], [35730, 35732], [35733, 35741], [35741, 35742], [35743, 35748], [35749, 35755], [35756, 35759], [35760, 35761], [35762, 35775], [35776, 35780], [35781, 35788], [35789, 35793], [35794, 35799], [35800, 35802], [35803, 35806], [35807, 35811], [35812, 35814], [35815, 35825], [35826, 35834], [35834, 35835]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.21190264821052551, {u'tokens': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'is', u'based', u'in', u'the', u'city', u'and', u'forms', u'one', u'of', u'its', u'core', u'economic', u'activities', u'.'], u'lemmas': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'be', u'base', u'in', u'the', u'city', u'and', u'form', u'one', u'of', u'its', u'core', u'economic', u'activity', u'.'], u'pos': [u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'CD', u'IN', u'PRP$', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[14635, 14640], [14641, 14649], [14650, 14652], [14653, 14656], [14657, 14665], [14666, 14674], [14675, 14677], [14678, 14683], [14684, 14686], [14687, 14690], [14691, 14695], [14696, 14699], [14700, 14705], [14706, 14709], [14710, 14712], [14713, 14716], [14717, 14721], [14722, 14730], [14731, 14741], [14741, 14742]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.19721844792366028, {u'tokens': [u'TM', u'Tower', u'is', u'the', u'headquarters', u'of', u'Malaysia', u"'s", u'principal', u'telecommunication', u'service', u'provider', u',', u'Telekom', u'Malaysia', u'.'], u'lemmas': [u'TM', u'Tower', u'be', u'the', u'headquarters', u'of', u'Malaysia', u"'s", u'principal', u'telecommunication', u'service', u'provider', u',', u'Telekom', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[33211, 33213], [33214, 33219], [33220, 33222], [33223, 33226], [33227, 33239], [33240, 33242], [33243, 33251], [33251, 33253], [33254, 33263], [33264, 33281], [33282, 33289], [33290, 33298], [33298, 33299], [33300, 33307], [33308, 33316], [33316, 33317]]}) 
answer: set([u'capitol'])

Is Kuala Lumpur the capitol of Malaysia? disfluent
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3368>.answer
_____________________________ test_yesno[param191] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c34d0>, (<src.tfidf.TF_IDF object at 0x1128f77d0>, set(['kuala', 'kuala_lumpur', 'lumpur'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c34d0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32441753149032593, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12855, 12860], [12861, 12867], [12868, 12870], [12871, 12875], [12876, 12878], [12879, 12882], [12883, 12893], [12894, 12896], [12897, 12905], [12905, 12906]]}) 
answer: set([u'malaysium'])
candidate Sentence: (0.28168633580207825, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[39433, 39438], [39439, 39445], [39446, 39448], [39449, 39453], [39454, 39456], [39457, 39460], [39461, 39471], [39472, 39474], [39475, 39481], [39481, 39482]]}) 
answer: set([u'parliament', u'malaysium'])
candidate Sentence: (0.22694194316864014, {u'tokens': [u'The', u'parliament', u'is', u'composed', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-LRB-', u'Dewan', u'Rakyat', u'-RRB-', u'and', u'an', u'upper', u'House', u'of', u'Senate', u'-LRB-', u'Dewan', u'Negara', u'-RRB-', u'.'], u'lemmas': [u'the', u'parliament', u'be', u'compose', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-lrb-', u'Dewan', u'Rakyat', u'-rrb-', u'and', u'a', u'upper', u'House', u'of', u'Senate', u'-lrb-', u'Dewan', u'Negara', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJR', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'CC', u'DT', u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[12907, 12910], [12911, 12921], [12922, 12924], [12925, 12933], [12934, 12936], [12937, 12938], [12939, 12944], [12945, 12950], [12951, 12953], [12954, 12969], [12970, 12971], [12971, 12976], [12977, 12983], [12983, 12984], [12985, 12988], [12989, 12991], [12992, 12997], [12998, 13003], [13004, 13006], [13007, 13013], [13014, 13015], [13015, 13020], [13021, 13027], [13027, 13028], [13028, 13029]]}) 
answer: set([u'home', u'malaysium'])
candidate Sentence: (0.14327001571655273, {u'tokens': [u'In', u'addition', u',', u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'tallest', u'twin', u'buildings', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'lemmas': [u'in', u'addition', u',', u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'tallest', u'twin', u'building', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'JJS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[1709, 1711], [1712, 1720], [1720, 1721], [1722, 1727], [1728, 1734], [1735, 1737], [1738, 1742], [1743, 1745], [1746, 1749], [1750, 1757], [1758, 1762], [1763, 1772], [1773, 1775], [1776, 1779], [1780, 1785], [1785, 1786], [1787, 1790], [1791, 1799], [1800, 1804], [1805, 1811], [1811, 1812]]}) 
answer: set([u'parliament', u'malaysium'])
candidate Sentence: (0.12373147904872894, {u'tokens': [u'The', u'city', u'was', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branches', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'moved', u'to', u'Putrajaya', u'starting', u'in', u'1999', u'.'], u'lemmas': [u'the', u'city', u'be', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branch', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'move', u'to', u'Putrajaya', u'start', u'in', u'1999', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'NN', u'TO', u'DT', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'PRP', u'VBP', u'IN', u'VBN', u'TO', u'NNP', u'VBG', u'IN', u'CD', u'.'], u'char_offsets': [[639, 642], [643, 647], [648, 651], [652, 656], [657, 661], [662, 664], [665, 668], [669, 678], [679, 682], [683, 691], [692, 700], [701, 703], [704, 707], [708, 715], [716, 726], [726, 727], [728, 731], [732, 736], [737, 741], [742, 747], [748, 753], [754, 756], [757, 766], [767, 775], [776, 778], [779, 783], [783, 784]]}) 
answer: set([u'parliament', u'malaysium'])

is it home to the parliament of malaysia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c34d0>.answer
_____________________________ test_yesno[param202] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c37e8>, (<src.tfidf.TF_IDF object at 0x1175ec750>, set(['language', 'malay', 'malay_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c37e8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.52360594272613525, {u'tokens': [u'One', u'of', u'these', u'is', u'that', u'it', u'came', u'from', u'Sumatra', u'island', u'.'], u'lemmas': [u'one', u'of', u'these', u'be', u'that', u'it', u'come', u'from', u'Sumatra', u'island', u'.'], u'pos': [u'CD', u'IN', u'DT', u'VBZ', u'IN', u'PRP', u'VBD', u'IN', u'NNP', u'NN', u'.'], u'char_offsets': [[1906, 1909], [1910, 1912], [1913, 1918], [1919, 1921], [1922, 1926], [1927, 1929], [1930, 1934], [1935, 1939], [1940, 1947], [1948, 1954], [1954, 1955]]}) 
answer: set([u'originate'])
candidate Sentence: (0.23928949236869812, {u'tokens': [u'-LSB-', u'1', u'-RSB-', u'There', u'are', u'many', u'hypotheses', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originated', u'.'], u'lemmas': [u'-lsb-', u'1', u'-rsb-', u'there', u'be', u'many', u'hypothesis', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originate', u'.'], u'pos': [u'-LRB-', u'CD', u'-RRB-', u'EX', u'VBP', u'JJ', u'NNS', u'IN', u'TO', u'WRB', u'DT', u'NNP', u'NN', u'VBD', u'.'], u'char_offsets': [[1833, 1834], [1834, 1835], [1835, 1836], [1837, 1842], [1843, 1846], [1847, 1851], [1852, 1862], [1863, 1865], [1866, 1868], [1869, 1874], [1875, 1878], [1879, 1884], [1885, 1893], [1894, 1904], [1904, 1905]]}) 
answer: set([u'island', u'sumatra'])
candidate Sentence: (0.16777566075325012, {u'tokens': [u'The', u'oldest', u'written', u'documents', u'in', u'Malay', u',', u'dated', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'AD', u',', u'were', u'found', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'lemmas': [u'the', u'oldest', u'write', u'document', u'in', u'Malay', u',', u'date', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'ad', u',', u'be', u'find', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NNS', u'IN', u'NNP', u',', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'IN', u'NNP', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[1956, 1959], [1960, 1966], [1967, 1974], [1975, 1984], [1985, 1987], [1988, 1993], [1993, 1994], [1995, 2000], [2001, 2005], [2006, 2009], [2010, 2013], [2014, 2016], [2017, 2020], [2021, 2024], [2025, 2032], [2033, 2035], [2035, 2036], [2037, 2041], [2042, 2047], [2048, 2050], [2051, 2057], [2058, 2064], [2064, 2065], [2066, 2069], [2070, 2073], [2074, 2086], [2087, 2092], [2093, 2095], [2096, 2103], [2104, 2107], [2108, 2110], [2111, 2120], [2121, 2123], [2124, 2132], [2133, 2140], [2140, 2141]]}) 
answer: set([u'originate'])
candidate Sentence: (0.11002375930547714, {u'tokens': [u'In', u'several', u'parts', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'is', u'spoken', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'lemmas': [u'in', u'several', u'part', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'be', u'speak', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'NNP', u'CC', u'NNP', u'NNPS', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[3110, 3112], [3113, 3120], [3121, 3126], [3127, 3129], [3130, 3139], [3139, 3140], [3141, 3143], [3144, 3151], [3152, 3155], [3156, 3162], [3163, 3170], [3170, 3171], [3172, 3177], [3178, 3180], [3181, 3187], [3188, 3190], [3191, 3196], [3197, 3204], [3205, 3207], [3208, 3214], [3215, 3221], [3221, 3222]]}) 
answer: set([u'island', u'originate'])
candidate Sentence: (0.09979606419801712, {u'tokens': [u'Many', u'roots', u'have', u'come', u'virtually', u'unchanged', u'from', u'their', u'common', u'Austronesian', u'ancestor', u'.'], u'lemmas': [u'many', u'root', u'have', u'come', u'virtually', u'unchanged', u'from', u'they', u'common', u'austronesian', u'ancestor', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'RB', u'JJ', u'IN', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[6754, 6758], [6759, 6764], [6765, 6769], [6770, 6774], [6775, 6784], [6785, 6794], [6795, 6799], [6800, 6805], [6806, 6812], [6813, 6825], [6826, 6834], [6834, 6835]]}) 
answer: set([u'island', u'sumatra', u'originate'])

Could Malay have originated from Sumatra island?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c37e8>.answer
_____________________________ test_yesno[param221] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3d40>, (<src.tfidf.TF_IDF object at 0x1119fba50>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3d40>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.63347971439361572, {u'tokens': [u'Faraday', u'also', u'was', u'active', u'in', u'what', u'would', u'now', u'be', u'called', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'lemmas': [u'Faraday', u'also', u'be', u'active', u'in', u'what', u'would', u'now', u'be', u'call', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'JJ', u'IN', u'WP', u'MD', u'RB', u'VB', u'VBN', u'JJ', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[19377, 19384], [19385, 19389], [19390, 19393], [19394, 19400], [19401, 19403], [19404, 19408], [19409, 19414], [19415, 19418], [19419, 19421], [19422, 19428], [19429, 19442], [19443, 19450], [19450, 19451], [19452, 19454], [19455, 19466], [19466, 19467]]}) 
answer: set([u'area'])
candidate Sentence: (0.20785526931285858, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24894, 24895], [24896, 24905], [24906, 24909], [24910, 24919], [24919, 24920], [24921, 24922], [24922, 24934], [24934, 24935]]}) 
answer: set([u'area', u'science', u'environmental', u'call', u'active', u'now'])
candidate Sentence: (0.19536694884300232, {u'tokens': [u'Education', u'was', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'lemmas': [u'education', u'be', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'pos': [u'NN', u'VBD', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[20010, 20019], [20020, 20023], [20024, 20031], [20032, 20036], [20037, 20039], [20040, 20047], [20048, 20051], [20052, 20059], [20059, 20060]]}) 
answer: set([u'active', u'science', u'now', u'call', u'environmental'])
candidate Sentence: (0.16763134300708771, {u'tokens': [u'This', u'is', u'now', u'termed', u'the', u'Faraday', u'effect', u'.'], u'lemmas': [u'this', u'be', u'now', u'term', u'the', u'Faraday', u'effect', u'.'], u'pos': [u'DT', u'VBZ', u'RB', u'VBN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[16311, 16315], [16316, 16318], [16319, 16322], [16323, 16329], [16330, 16333], [16334, 16341], [16342, 16348], [16348, 16349]]}) 
answer: set([u'active', u'science', u'call', u'environmental', u'area'])
candidate Sentence: (0.14287599921226501, {u'tokens': [u'Some', u'historians', u'of', u'science', u'refer', u'to', u'him', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'lemmas': [u'some', u'historian', u'of', u'science', u'refer', u'to', u'he', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'NN', u'VBP', u'TO', u'PRP', u'IN', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[1382, 1386], [1387, 1397], [1401, 1403], [1404, 1411], [1412, 1417], [1418, 1420], [1421, 1424], [1425, 1427], [1428, 1431], [1432, 1436], [1437, 1452], [1453, 1455], [1456, 1459], [1460, 1467], [1468, 1470], [1471, 1478], [1478, 1479]]}) 
answer: set([u'active', u'environmental', u'now', u'call', u'area'])

was he active in the area now called environmental science?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3d40>.answer
_____________________________ test_yesno[param222] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3d88>, (<src.tfidf.TF_IDF object at 0x1119fba50>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3d88>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2961687445640564, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24894, 24895], [24896, 24905], [24906, 24909], [24910, 24919], [24919, 24920], [24921, 24922], [24922, 24934], [24934, 24935]]}) 
answer: set([u'benzene', u'discover'])
candidate Sentence: (0.16036306321620941, {u'tokens': [u'See', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'Being', u'Instructions', u'to', u'Students', u'in', u'Chemistry', u'-LRB-', u'1827', u'-RRB-', u'Faraday', u'worked', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discovering', u'chemical', u'substances', u'such', u'as', u'benzene', u'-LRB-', u'which', u'he', u'called', u'bicarburet', u'of', u'hydrogen', u'-RRB-', u',', u'and', u'liquefying', u'gases', u'such', u'as', u'chlorine', u'.'], u'lemmas': [u'see', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'be', u'instruction', u'to', u'student', u'in', u'Chemistry', u'-lrb-', u'1827', u'-rrb-', u'Faraday', u'work', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discover', u'chemical', u'substance', u'such', u'as', u'benzene', u'-lrb-', u'which', u'he', u'call', u'bicarburet', u'of', u'hydrogen', u'-rrb-', u',', u'and', u'liquefy', u'gas', u'such', u'as', u'chlorine', u'.'], u'pos': [u'VB', u'NN', u'CD', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'TO', u'NNS', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'VBD', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u',', u'VBG', u'NN', u'NNS', u'JJ', u'IN', u'NN', u'-LRB-', u'WDT', u'PRP', u'VBD', u'NN', u'IN', u'NN', u'-RRB-', u',', u'CC', u'VBG', u'NNS', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[9000, 9003], [9004, 9008], [9009, 9012], [9013, 9015], [9016, 9023], [9023, 9025], [9026, 9034], [9035, 9047], [9047, 9048], [9049, 9054], [9055, 9067], [9068, 9070], [9071, 9079], [9080, 9082], [9083, 9092], [9093, 9094], [9094, 9098], [9098, 9099], [9101, 9108], [9109, 9115], [9116, 9127], [9128, 9130], [9131, 9134], [9135, 9140], [9141, 9143], [9144, 9153], [9153, 9154], [9155, 9166], [9167, 9175], [9176, 9186], [9187, 9191], [9192, 9194], [9195, 9202], [9203, 9204], [9204, 9209], [9210, 9212], [9213, 9219], [9220, 9230], [9231, 9233], [9234, 9242], [9242, 9243], [9243, 9244], [9245, 9248], [9249, 9259], [9260, 9265], [9266, 9270], [9271, 9273], [9274, 9282], [9282, 9283]]}) 
answer: set([])
candidate Sentence: (0.15976785123348236, {u'tokens': [u'As', u'a', u'chemist', u',', u'Faraday', u'discovered', u'benzene', u',', u'investigated', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invented', u'an', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'numbers', u',', u'and', u'popularized', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'lemmas': [u'as', u'a', u'chemist', u',', u'Faraday', u'discover', u'benzene', u',', u'investigate', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invent', u'a', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'number', u',', u'and', u'popularize', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'VBD', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[974, 976], [977, 978], [979, 986], [986, 987], [988, 995], [996, 1006], [1007, 1014], [1014, 1015], [1016, 1028], [1029, 1032], [1033, 1042], [1043, 1050], [1051, 1053], [1054, 1062], [1062, 1063], [1064, 1072], [1073, 1075], [1076, 1081], [1082, 1086], [1087, 1089], [1090, 1093], [1094, 1100], [1101, 1107], [1108, 1111], [1112, 1115], [1116, 1122], [1123, 1125], [1126, 1135], [1136, 1143], [1143, 1144], [1145, 1148], [1149, 1160], [1161, 1172], [1173, 1177], [1178, 1180], [1181, 1186], [1186, 1187], [1188, 1195], [1195, 1196], [1197, 1206], [1206, 1207], [1208, 1211], [1212, 1215], [1215, 1216]]}) 
answer: set([])
candidate Sentence: (0.11912365257740021, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[386, 388], [389, 399], [400, 415], [416, 425], [425, 426], [427, 439], [439, 440], [441, 444], [445, 449], [450, 452], [453, 465], [465, 466]]}) 
answer: set([u'benzene'])
candidate Sentence: (0.10918609797954559, {u'tokens': [u'The', u'trip', u'did', u',', u'however', u',', u'give', u'him', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulating', u'ideas', u'.'], u'lemmas': [u'the', u'trip', u'do', u',', u'however', u',', u'give', u'he', u'access', u'to', u'the', u'european', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulate', u'idea', u'.'], u'pos': [u'DT', u'NN', u'VBD', u',', u'RB', u',', u'VB', u'PRP', u'NN', u'TO', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'VBG', u'NNS', u'.'], u'char_offsets': [[5800, 5803], [5804, 5808], [5809, 5812], [5812, 5813], [5814, 5821], [5821, 5822], [5823, 5827], [5828, 5831], [5832, 5838], [5839, 5841], [5842, 5845], [5846, 5854], [5855, 5865], [5866, 5871], [5872, 5875], [5876, 5877], [5878, 5882], [5883, 5885], [5886, 5897], [5898, 5903], [5903, 5904]]}) 
answer: set([u'benzene', u'discover'])

did he discover benzene?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3d88>.answer
_____________________________ test_yesno[param229] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3f80>, (<src.tfidf.TF_IDF object at 0x114503bd0>, set(['nairobi'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3f80>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.54994732141494751, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14655, 14662], [14663, 14678], [14678, 14679]]}) 
answer: set([u'kenya', u'capital'])
candidate Sentence: (0.44874268770217896, {u'tokens': [u'Nairobi', u'-LRB-', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'lemmas': [u'Nairobi', u'-lrb-', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'pos': [u'NNP', u'-LRB-', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [10, 11], [12, 14], [15, 18], [19, 26], [27, 30], [31, 38], [39, 43], [44, 46], [47, 52], [52, 53]]}) 
answer: set([])
candidate Sentence: (0.25032752752304077, {u'tokens': [u'History', u'-', u'Nairobi', u'Nairobi', u'is', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'lemmas': [u'history', u'-', u'Nairobi', u'Nairobi', u'be', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'pos': [u'NN', u':', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[677, 684], [685, 686], [687, 694], [697, 704], [705, 707], [708, 712], [713, 716], [717, 724], [725, 727], [728, 731], [732, 739], [740, 748], [749, 752], [753, 755], [756, 759], [760, 767], [768, 776], [776, 777]]}) 
answer: set([u'kenya'])
candidate Sentence: (0.19109977781772614, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[349, 356], [357, 359], [360, 364], [365, 367], [368, 369], [370, 376], [377, 381], [382, 387], [388, 390], [391, 394], [395, 402], [403, 410], [411, 418], [419, 421], [422, 428], [428, 429], [430, 433], [434, 438], [439, 446], [447, 451], [452, 454], [455, 461], [462, 465], [466, 473], [474, 476], [477, 484], [485, 489], [490, 496], [497, 499], [500, 504], [505, 508], [509, 519], [520, 523], [524, 531], [532, 534], [535, 536], [537, 541], [542, 548], [549, 557], [558, 560], [561, 565], [565, 566]]}) 
answer: set([u'kenya'])
candidate Sentence: (0.14553077518939972, {u'tokens': [u'The', u'national', u'park', u'is', u'unique', u',', u'in', u'being', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'lemmas': [u'the', u'national', u'park', u'be', u'unique', u',', u'in', u'be', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'JJ', u',', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[20857, 20860], [20861, 20869], [20870, 20874], [20875, 20877], [20878, 20884], [20884, 20885], [20886, 20888], [20889, 20894], [20895, 20898], [20899, 20903], [20904, 20916], [20917, 20919], [20920, 20924], [20925, 20931], [20932, 20934], [20935, 20941], [20942, 20943], [20944, 20951], [20952, 20956], [20956, 20957], [20958, 20960], [20961, 20965], [20966, 20968], [20969, 20973], [20974, 20978], [20978, 20979]]}) 
answer: set([u'kenya'])

Is Nairobi the capital of Kenya?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3f80>.answer
_____________________________ test_yesno[param230] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c3fc8>, (<src.tfidf.TF_IDF object at 0x114503bd0>, set(['nairobi'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3fc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46554705500602722, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14655, 14662], [14663, 14678], [14678, 14679]]}) 
answer: set([u'found', u'1899'])
candidate Sentence: (0.25023755431175232, {u'tokens': [u'The', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'is', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'founded', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'years', u'after', u'the', u'city', u'was', u'founded', u'.'], u'lemmas': [u'the', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'be', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'found', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'year', u'after', u'the', u'city', u'be', u'found', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'CD', u'IN', u'DT', u'NNP', u',', u'RB', u'CD', u'NNS', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[20143, 20146], [20147, 20153], [20154, 20161], [20162, 20166], [20167, 20173], [20174, 20176], [20177, 20180], [20181, 20185], [20186, 20188], [20189, 20192], [20193, 20198], [20199, 20206], [20207, 20211], [20212, 20216], [20216, 20217], [20218, 20225], [20226, 20228], [20229, 20233], [20234, 20236], [20237, 20240], [20241, 20248], [20248, 20249], [20250, 20254], [20255, 20260], [20261, 20266], [20267, 20272], [20273, 20276], [20277, 20281], [20282, 20285], [20286, 20293], [20293, 20294]]}) 
answer: set([u'1899'])
candidate Sentence: (0.21678356826305389, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[349, 356], [357, 359], [360, 364], [365, 367], [368, 369], [370, 376], [377, 381], [382, 387], [388, 390], [391, 394], [395, 402], [403, 410], [411, 418], [419, 421], [422, 428], [428, 429], [430, 433], [434, 438], [439, 446], [447, 451], [452, 454], [455, 461], [462, 465], [466, 473], [474, 476], [477, 484], [485, 489], [490, 496], [497, 499], [500, 504], [505, 508], [509, 519], [520, 523], [524, 531], [532, 534], [535, 536], [537, 541], [542, 548], [549, 557], [558, 560], [561, 565], [565, 566]]}) 
answer: set([])
candidate Sentence: (0.18441472947597504, {u'tokens': [u'Since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'has', u'grown', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'being', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'lemmas': [u'since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'have', u'grow', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'be', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'IN', u'CD', u',', u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'NNP', u',', u'IN', u'VBG', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[31419, 31424], [31425, 31428], [31429, 31439], [31440, 31442], [31443, 31447], [31447, 31448], [31449, 31456], [31457, 31460], [31461, 31466], [31467, 31469], [31470, 31476], [31477, 31480], [31481, 31488], [31489, 31493], [31494, 31496], [31497, 31501], [31502, 31508], [31508, 31509], [31510, 31517], [31518, 31523], [31524, 31527], [31528, 31536], [31537, 31541], [31542, 31544], [31545, 31548], [31549, 31555], [31555, 31556]]}) 
answer: set([u'found'])
candidate Sentence: (0.15897184610366821, {u'tokens': [u'Nairobi', u'was', u'founded', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-LRB-', u'KR', u'-RRB-', u'main', u'headquarters', u'are', u'still', u'situated', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'lemmas': [u'Nairobi', u'be', u'found', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-lrb-', u'KR', u'-rrb-', u'main', u'headquarters', u'be', u'still', u'situate', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'RB', u',', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[26756, 26763], [26764, 26767], [26768, 26775], [26776, 26778], [26779, 26780], [26781, 26788], [26789, 26793], [26793, 26794], [26795, 26798], [26799, 26802], [26803, 26808], [26809, 26817], [26818, 26819], [26819, 26821], [26821, 26822], [26823, 26827], [26828, 26840], [26841, 26844], [26845, 26850], [26851, 26859], [26860, 26865], [26865, 26866], [26867, 26871], [26872, 26875], [26876, 26880], [26881, 26887], [26887, 26888]]}) 
answer: set([u'1899'])

Was Nairobi founded in 1899?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c3fc8>.answer
_____________________________ test_yesno[param233] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c80e0>, (<src.tfidf.TF_IDF object at 0x1175ec9d0>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c80e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.346649169921875, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7475, 7478], [7479, 7484], [7485, 7491], [7492, 7498], [7499, 7502], [7503, 7514], [7514, 7515], [7515, 7516]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.2918725311756134, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49416, 49419], [49420, 49423], [49424, 49428], [49429, 49430], [49430, 49435], [49435, 49436], [49436, 49437]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.26085346937179565, {u'tokens': [u'Prodigal', u'Genius', u':', u'The', u'Life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'died', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'lemmas': [u'prodigal', u'genius', u':', u'the', u'life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'die', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'pos': [u'JJ', u'NN', u':', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'CD', u'NNP', u'VBD', u'IN', u'NN', u'NN', u'RB', u'IN', u'NN', u'CD', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'IN', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[42568, 42576], [42577, 42583], [42583, 42584], [42585, 42588], [42589, 42593], [42594, 42596], [42597, 42603], [42604, 42609], [42610, 42612], [42613, 42617], [42618, 42623], [42624, 42631], [42632, 42636], [42637, 42651], [42652, 42657], [42658, 42662], [42663, 42665], [42666, 42671], [42672, 42679], [42680, 42685], [42686, 42688], [42689, 42693], [42694, 42698], [42699, 42701], [42702, 42705], [42706, 42709], [42710, 42716], [42717, 42722], [42722, 42723], [42724, 42726], [42727, 42728], [42729, 42736], [42737, 42741], [42741, 42742]]}) 
answer: set([])
candidate Sentence: (0.17754662036895752, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[56372, 56376], [56377, 56378], [56379, 56391], [56391, 56392], [56393, 56397], [56397, 56398], [56399, 56405], [56406, 56411], [56411, 56412], [56413, 56416], [56417, 56420], [56421, 56423], [56424, 56426], [56427, 56431], [56432, 56440], [56441, 56444], [56445, 56454], [56454, 56455]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.16273051500320435, {u'tokens': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378', u'--', u'380', u'Earlier', u',', u'Tesla', u'alone', u'was', u'rumored', u'to', u'have', u'been', u'nominated', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'lemmas': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378', u'--', u'380', u'earlier', u',', u'Tesla', u'alone', u'be', u'rumor', u'to', u'have', u'be', u'nominate', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'pos': [u'NNP', u',', u'``', u'NNP', u"''", u'NN', u'CD', u':', u'CD', u'JJR', u',', u'NNP', u'RB', u'VBD', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[28807, 28813], [28813, 28814], [28815, 28816], [28816, 28822], [28822, 28823], [28824, 28826], [28827, 28830], [28830, 28831], [28831, 28834], [28836, 28843], [28843, 28844], [28845, 28850], [28851, 28856], [28857, 28860], [28861, 28868], [28869, 28871], [28872, 28876], [28877, 28881], [28882, 28891], [28892, 28895], [28896, 28899], [28900, 28905], [28906, 28911], [28912, 28914], [28915, 28919], [28919, 28920]]}) 
answer: set([u'die'])

Did Nikola Tesla die alone?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c80e0>.answer
_____________________________ test_yesno[param234] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8128>, (<src.tfidf.TF_IDF object at 0x1175ec9d0>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Nikola Tesla was close friends with Mark Twain.') == True
E                +  where 'Nikola Tesla was close friends with Mark Twain.' = <src.question_processing.Question_parser instance at 0x1188c8128>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.67244809865951538, {u'tokens': [u'Mark', u'Twain', u'in', u'Tesla', u"'s", u'lab', u',', u'spring', u'1894', u'In', u'middle', u'age', u',', u'Tesla', u'became', u'very', u'close', u'friends', u'with', u'Mark', u'Twain', u'.'], u'lemmas': [u'Mark', u'Twain', u'in', u'Tesla', u"'s", u'lab', u',', u'spring', u'1894', u'in', u'middle', u'age', u',', u'Tesla', u'become', u'very', u'close', u'friend', u'with', u'Mark', u'Twain', u'.'], u'pos': [u'NNP', u'NNP', u'IN', u'NNP', u'POS', u'NN', u',', u'NN', u'CD', u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[39377, 39381], [39382, 39387], [39388, 39390], [39391, 39396], [39396, 39398], [39399, 39402], [39402, 39403], [39404, 39410], [39411, 39415], [39416, 39418], [39419, 39425], [39426, 39429], [39429, 39430], [39431, 39436], [39437, 39443], [39444, 39448], [39449, 39454], [39455, 39462], [39463, 39467], [39468, 39472], [39473, 39478], [39478, 39479]]}) 
answer: set([])
candidate Sentence: (0.37225052714347839, {u'tokens': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'Thunder', u'and', u'Lightning', u'.'], u'lemmas': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'thunder', u'and', u'lightning', u'.'], u'pos': [u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u':', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[17418, 17424], [17424, 17425], [17426, 17435], [17435, 17436], [17438, 17442], [17443, 17448], [17449, 17452], [17453, 17459], [17460, 17465], [17465, 17466], [17467, 17474], [17475, 17478], [17479, 17488], [17488, 17489]]}) 
answer: set([u'close', u'friend'])
candidate Sentence: (0.22968560457229614, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49416, 49419], [49420, 49423], [49424, 49428], [49429, 49430], [49430, 49435], [49435, 49436], [49436, 49437]]}) 
answer: set([u'twain', u'close', u'friend', u'mark'])
candidate Sentence: (0.19178107380867004, {u'tokens': [u'Tesla', u'was', u'good', u'friends', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'lemmas': [u'Tesla', u'be', u'good', u'friend', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'pos': [u'NNP', u'VBD', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[39981, 39986], [39987, 39990], [39991, 39995], [39996, 40003], [40004, 40008], [40009, 40015], [40016, 40025], [40026, 40033], [40033, 40034]]}) 
answer: set([u'twain', u'close', u'mark'])
candidate Sentence: (0.18738089501857758, {u'tokens': [u'16', u'-RRB-', u'His', u'wish', u'was', u'to', u'have', u'a', u'sculpture', u'made', u'by', u'his', u'close', u'friend', u',', u'Croatian', u'sculptor', u'Ivan', u'Me\u0161trovi\u0107', u',', u'who', u'was', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'died', u'before', u'getting', u'a', u'chance', u'to', u'see', u'it', u'.'], u'lemmas': [u'16', u'-rrb-', u'he', u'wish', u'be', u'to', u'have', u'a', u'sculpture', u'make', u'by', u'he', u'close', u'friend', u',', u'croatian', u'sculptor', u'Ivan', u'Me\u0161trovi\u0107', u',', u'who', u'be', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'die', u'before', u'get', u'a', u'chance', u'to', u'see', u'it', u'.'], u'pos': [u'CD', u'-RRB-', u'PRP$', u'NN', u'VBD', u'TO', u'VB', u'DT', u'NN', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'JJ', u'NN', u'NNP', u'NNP', u',', u'WP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNPS', u',', u'CC', u'PRP', u'VBD', u'IN', u'VBG', u'DT', u'NN', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[47133, 47135], [47135, 47136], [47138, 47141], [47142, 47146], [47147, 47150], [47151, 47153], [47154, 47158], [47159, 47160], [47161, 47170], [47171, 47175], [47176, 47178], [47179, 47182], [47183, 47188], [47189, 47195], [47195, 47196], [47197, 47205], [47206, 47214], [47215, 47219], [47220, 47229], [47229, 47230], [47231, 47234], [47235, 47238], [47239, 47241], [47242, 47246], [47247, 47251], [47252, 47254], [47255, 47261], [47262, 47268], [47268, 47269], [47270, 47273], [47274, 47276], [47277, 47281], [47282, 47288], [47289, 47296], [47297, 47298], [47299, 47305], [47306, 47308], [47309, 47312], [47313, 47315], [47315, 47316]]}) 
answer: set([u'twain', u'mark'])

Was Nikola Tesla close friends with Mark Twain?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Nikola Tesla was close friends with Mark Twain.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Nikola Tesla was close friends with Mark Twain.') == True
 +  where 'Nikola Tesla was close friends with Mark Twain.' = <src.question_processing.Question_parser instance at 0x1188c8128>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param237] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8200>, (<src.tfidf.TF_IDF object at 0x1175ec9d0>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33794176578521729, {u'tokens': [u'Tesla', u'would', u'visualise', u'an', u'invention', u'in', u'his', u'brain', u'with', u'extreme', u'precision', u',', u'including', u'all', u'dimensions', u',', u'before', u'moving', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'known', u'as', u'picture', u'thinking', u'.'], u'lemmas': [u'Tesla', u'would', u'visualise', u'a', u'invention', u'in', u'he', u'brain', u'with', u'extreme', u'precision', u',', u'include', u'all', u'dimension', u',', u'before', u'move', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'know', u'as', u'picture', u'thinking', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u',', u'VBG', u'DT', u'NNS', u',', u'IN', u'VBG', u'TO', u'DT', u'NN', u'NN', u':', u'DT', u'NN', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[6339, 6344], [6345, 6350], [6351, 6360], [6361, 6363], [6364, 6373], [6374, 6376], [6377, 6380], [6381, 6386], [6387, 6391], [6392, 6399], [6400, 6409], [6409, 6410], [6411, 6420], [6421, 6424], [6425, 6435], [6435, 6436], [6437, 6443], [6444, 6450], [6451, 6453], [6454, 6457], [6458, 6470], [6471, 6476], [6476, 6477], [6478, 6479], [6480, 6489], [6490, 6499], [6500, 6505], [6506, 6508], [6509, 6516], [6517, 6525], [6525, 6526]]}) 
answer: set([u'use', u'call'])
candidate Sentence: (0.25513803958892822, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7475, 7478], [7479, 7484], [7485, 7491], [7492, 7498], [7499, 7502], [7503, 7514], [7514, 7515], [7515, 7516]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])
candidate Sentence: (0.21482178568840027, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49416, 49419], [49420, 49423], [49424, 49428], [49429, 49430], [49430, 49435], [49435, 49436], [49436, 49437]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])
candidate Sentence: (0.16537007689476013, {u'tokens': [u'Tesla', u'called', u'his', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'lemmas': [u'Tesla', u'call', u'he', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'pos': [u'NNP', u'VBD', u'PRP$', u'NN', u'DT', u'``', u'NN', u"''", u'.'], u'char_offsets': [[21536, 21541], [21542, 21548], [21549, 21552], [21553, 21557], [21558, 21559], [21560, 21561], [21561, 21574], [21574, 21575], [21575, 21576]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique'])
candidate Sentence: (0.13067649304866791, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[56372, 56376], [56377, 56378], [56379, 56391], [56391, 56392], [56393, 56397], [56397, 56398], [56399, 56405], [56406, 56411], [56411, 56412], [56413, 56416], [56417, 56420], [56421, 56423], [56424, 56426], [56427, 56431], [56432, 56440], [56441, 56444], [56445, 56454], [56454, 56455]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])

Did Nikola Tesla use a technique called picture thinking?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8200>.answer
_____________________________ test_yesno[param249] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8560>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c8560>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.47017747163772583, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[13915, 13916], [13917, 13922], [13923, 13937], [13938, 13951], [13952, 13955], [13956, 13957], [13957, 13964], [13965, 13970], [13970, 13971], [13972, 13973], [13973, 13980], [13981, 13986], [13989, 13992], [13995, 13999], [13999, 14000], [14001, 14005], [14006, 14009], [14010, 14011], [14011, 14017], [14018, 14023], [14023, 14024], [14025, 14027], [14028, 14029], [14029, 14036], [14037, 14042], [14042, 14043], [14044, 14045], [14045, 14050], [14053, 14055], [14057, 14058], [14059, 14062], [14063, 14066], [14067, 14074], [14075, 14076], [14076, 14080], [14081, 14086], [14086, 14087], [14087, 14088]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.45696964859962463, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[16079, 16086], [16087, 16093], [16094, 16098], [16099, 16108], [16109, 16113], [16114, 16120], [16121, 16124], [16125, 16129], [16130, 16137], [16138, 16141], [16142, 16151], [16152, 16158], [16159, 16160], [16160, 16167], [16168, 16173], [16173, 16174], [16175, 16181], [16181, 16182]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45276114344596863, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31484, 31489], [31489, 31490], [31491, 31497], [31498, 31502], [31503, 31509], [31510, 31511], [31512, 31517], [31518, 31520], [31521, 31524], [31525, 31532], [31533, 31546], [31546, 31547], [31548, 31551], [31552, 31555], [31556, 31565], [31566, 31574], [31575, 31577], [31578, 31580], [31581, 31590], [31591, 31600], [31600, 31601], [31602, 31603], [31603, 31606], [31607, 31614], [31614, 31615], [31615, 31616], [31617, 31618], [31618, 31621], [31622, 31628], [31628, 31629], [31629, 31630], [31631, 31632], [31632, 31635], [31636, 31648], [31648, 31649], [31649, 31650], [31651, 31654], [31655, 31656], [31656, 31659], [31660, 31665], [31665, 31666], [31666, 31667], [31667, 31668], [31669, 31672], [31673, 31678], [31678, 31679], [31679, 31680], [31680, 31681], [31681, 31682], [31682, 31683], [31684, 31685], [31685, 31688], [31689, 31695], [31696, 31699], [31699, 31700], [31700, 31701], [31701, 31702], [31702, 31703], [31703, 31704]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.39472046494483948, {u'tokens': [u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[15019, 15026], [15027, 15033], [15033, 15034], [15035, 15039], [15040, 15046], [15047, 15055], [15056, 15062], [15062, 15063], [15064, 15067], [15068, 15072], [15073, 15080], [15081, 15088], [15089, 15092], [15093, 15098], [15099, 15102], [15103, 15110], [15111, 15114], [15116, 15124], [15124, 15125]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34412288665771484, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[29944, 29946], [29947, 29950], [29951, 29955], [29955, 29956], [29957, 29960], [29961, 29967], [29968, 29972], [29973, 29982], [29983, 29984], [29985, 29992], [29993, 29999], [30000, 30001], [30001, 30008], [30008, 30009], [30010, 30012], [30013, 30014], [30014, 30021], [30021, 30022], [30022, 30023], [30024, 30029], [30030, 30038], [30039, 30041], [30042, 30047], [30048, 30054], [30054, 30055], [30056, 30060], [30061, 30067], [30068, 30071], [30072, 30076], [30077, 30080], [30081, 30085], [30086, 30088], [30089, 30094], [30094, 30095]]}) 
answer: set([u'upright', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c8560>.answer
_____________________________ test_yesno[param250] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c85a8>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c85a8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.47017747163772583, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[13915, 13916], [13917, 13922], [13923, 13937], [13938, 13951], [13952, 13955], [13956, 13957], [13957, 13964], [13965, 13970], [13970, 13971], [13972, 13973], [13973, 13980], [13981, 13986], [13989, 13992], [13995, 13999], [13999, 14000], [14001, 14005], [14006, 14009], [14010, 14011], [14011, 14017], [14018, 14023], [14023, 14024], [14025, 14027], [14028, 14029], [14029, 14036], [14037, 14042], [14042, 14043], [14044, 14045], [14045, 14050], [14053, 14055], [14057, 14058], [14059, 14062], [14063, 14066], [14067, 14074], [14075, 14076], [14076, 14080], [14081, 14086], [14086, 14087], [14087, 14088]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.45696964859962463, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[16079, 16086], [16087, 16093], [16094, 16098], [16099, 16108], [16109, 16113], [16114, 16120], [16121, 16124], [16125, 16129], [16130, 16137], [16138, 16141], [16142, 16151], [16152, 16158], [16159, 16160], [16160, 16167], [16168, 16173], [16173, 16174], [16175, 16181], [16181, 16182]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45276114344596863, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31484, 31489], [31489, 31490], [31491, 31497], [31498, 31502], [31503, 31509], [31510, 31511], [31512, 31517], [31518, 31520], [31521, 31524], [31525, 31532], [31533, 31546], [31546, 31547], [31548, 31551], [31552, 31555], [31556, 31565], [31566, 31574], [31575, 31577], [31578, 31580], [31581, 31590], [31591, 31600], [31600, 31601], [31602, 31603], [31603, 31606], [31607, 31614], [31614, 31615], [31615, 31616], [31617, 31618], [31618, 31621], [31622, 31628], [31628, 31629], [31629, 31630], [31631, 31632], [31632, 31635], [31636, 31648], [31648, 31649], [31649, 31650], [31651, 31654], [31655, 31656], [31656, 31659], [31660, 31665], [31665, 31666], [31666, 31667], [31667, 31668], [31669, 31672], [31673, 31678], [31678, 31679], [31679, 31680], [31680, 31681], [31681, 31682], [31682, 31683], [31684, 31685], [31685, 31688], [31689, 31695], [31696, 31699], [31699, 31700], [31700, 31701], [31701, 31702], [31702, 31703], [31703, 31704]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.39472046494483948, {u'tokens': [u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[15019, 15026], [15027, 15033], [15033, 15034], [15035, 15039], [15040, 15046], [15047, 15055], [15056, 15062], [15062, 15063], [15064, 15067], [15068, 15072], [15073, 15080], [15081, 15088], [15089, 15092], [15093, 15098], [15099, 15102], [15103, 15110], [15111, 15114], [15116, 15124], [15124, 15125]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34412288665771484, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[29944, 29946], [29947, 29950], [29951, 29955], [29955, 29956], [29957, 29960], [29961, 29967], [29968, 29972], [29973, 29982], [29983, 29984], [29985, 29992], [29993, 29999], [30000, 30001], [30001, 30008], [30008, 30009], [30010, 30012], [30013, 30014], [30014, 30021], [30021, 30022], [30022, 30023], [30024, 30029], [30030, 30038], [30039, 30041], [30042, 30047], [30048, 30054], [30054, 30055], [30056, 30060], [30061, 30067], [30068, 30071], [30072, 30076], [30077, 30080], [30081, 30085], [30086, 30088], [30089, 30094], [30094, 30095]]}) 
answer: set([u'upright', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c85a8>.answer
_____________________________ test_yesno[param251] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c85f0>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c85f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25397381186485291, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2700, 2703], [2704, 2713], [2714, 2716], [2717, 2720], [2721, 2727], [2728, 2733], [2734, 2736], [2737, 2745], [2746, 2748], [2749, 2759], [2760, 2770], [2771, 2773], [2774, 2779], [2779, 2780], [2781, 2786], [2786, 2787], [2788, 2791], [2792, 2795], [2796, 2804], [2805, 2807], [2808, 2814], [2815, 2824], [2825, 2827], [2828, 2834], [2835, 2837], [2838, 2841], [2842, 2848], [2849, 2851], [2852, 2855], [2856, 2867], [2867, 2868]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18724089860916138, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4531, 4541], [4541, 4543], [4544, 4550], [4551, 4555], [4556, 4565], [4566, 4572], [4573, 4579], [4580, 4582], [4583, 4593], [4593, 4595], [4595, 4596], [4597, 4601], [4602, 4605], [4606, 4615], [4616, 4624], [4624, 4625], [4626, 4636], [4637, 4645], [4646, 4649], [4650, 4660], [4661, 4663], [4664, 4667], [4668, 4674], [4675, 4681], [4682, 4687], [4687, 4688], [4689, 4694], [4695, 4700], [4701, 4704], [4705, 4708], [4709, 4716], [4717, 4721], [4722, 4725], [4726, 4733], [4734, 4736], [4737, 4741], [4741, 4742]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14103066921234131, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2516, 2524], [2525, 2531], [2532, 2537], [2538, 2543], [2544, 2549], [2550, 2552], [2553, 2560], [2560, 2561], [2562, 2570], [2571, 2573], [2574, 2582], [2583, 2593], [2594, 2597], [2598, 2604], [2605, 2612], [2613, 2617], [2618, 2621], [2622, 2626], [2627, 2629], [2630, 2640], [2641, 2652], [2653, 2654], [2654, 2657], [2658, 2662], [2662, 2663], [2664, 2668], [2669, 2677], [2678, 2687], [2688, 2698], [2698, 2699]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.14029444754123688, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[27857, 27860], [27861, 27864], [27865, 27867], [27868, 27876], [27877, 27880], [27881, 27886], [27887, 27893], [27893, 27894], [27895, 27902], [27902, 27903], [27904, 27907], [27908, 27911], [27912, 27918], [27919, 27925], [27926, 27934], [27935, 27938], [27939, 27942], [27943, 27955], [27955, 27956]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12901169061660767, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[18929, 18934], [18935, 18939], [18940, 18951], [18952, 18961], [18962, 18964], [18965, 18975], [18976, 18983], [18984, 18986], [18987, 18992], [18993, 18997], [18997, 18998], [19000, 19004], [19005, 19012], [19013, 19019], [19020, 19022], [19023, 19026], [19027, 19032], [19033, 19036], [19037, 19041], [19042, 19044], [19045, 19048], [19049, 19053], [19054, 19062], [19063, 19069], [19069, 19070]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188c85f0>.answer
_____________________________ test_yesno[param252] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8638>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8638>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25397381186485291, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2700, 2703], [2704, 2713], [2714, 2716], [2717, 2720], [2721, 2727], [2728, 2733], [2734, 2736], [2737, 2745], [2746, 2748], [2749, 2759], [2760, 2770], [2771, 2773], [2774, 2779], [2779, 2780], [2781, 2786], [2786, 2787], [2788, 2791], [2792, 2795], [2796, 2804], [2805, 2807], [2808, 2814], [2815, 2824], [2825, 2827], [2828, 2834], [2835, 2837], [2838, 2841], [2842, 2848], [2849, 2851], [2852, 2855], [2856, 2867], [2867, 2868]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18724089860916138, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4531, 4541], [4541, 4543], [4544, 4550], [4551, 4555], [4556, 4565], [4566, 4572], [4573, 4579], [4580, 4582], [4583, 4593], [4593, 4595], [4595, 4596], [4597, 4601], [4602, 4605], [4606, 4615], [4616, 4624], [4624, 4625], [4626, 4636], [4637, 4645], [4646, 4649], [4650, 4660], [4661, 4663], [4664, 4667], [4668, 4674], [4675, 4681], [4682, 4687], [4687, 4688], [4689, 4694], [4695, 4700], [4701, 4704], [4705, 4708], [4709, 4716], [4717, 4721], [4722, 4725], [4726, 4733], [4734, 4736], [4737, 4741], [4741, 4742]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14103066921234131, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2516, 2524], [2525, 2531], [2532, 2537], [2538, 2543], [2544, 2549], [2550, 2552], [2553, 2560], [2560, 2561], [2562, 2570], [2571, 2573], [2574, 2582], [2583, 2593], [2594, 2597], [2598, 2604], [2605, 2612], [2613, 2617], [2618, 2621], [2622, 2626], [2627, 2629], [2630, 2640], [2641, 2652], [2653, 2654], [2654, 2657], [2658, 2662], [2662, 2663], [2664, 2668], [2669, 2677], [2678, 2687], [2688, 2698], [2698, 2699]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.14029444754123688, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[27857, 27860], [27861, 27864], [27865, 27867], [27868, 27876], [27877, 27880], [27881, 27886], [27887, 27893], [27893, 27894], [27895, 27902], [27902, 27903], [27904, 27907], [27908, 27911], [27912, 27918], [27919, 27925], [27926, 27934], [27935, 27938], [27939, 27942], [27943, 27955], [27955, 27956]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12901169061660767, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[18929, 18934], [18935, 18939], [18940, 18951], [18952, 18961], [18962, 18964], [18965, 18975], [18976, 18983], [18984, 18986], [18987, 18992], [18993, 18997], [18997, 18998], [19000, 19004], [19005, 19012], [19013, 19019], [19020, 19022], [19023, 19026], [19027, 19032], [19033, 19036], [19037, 19041], [19042, 19044], [19045, 19048], [19049, 19053], [19054, 19062], [19063, 19069], [19069, 19070]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8638>.answer
_____________________________ test_yesno[param253] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8680>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8680>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.49156421422958374, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22355, 22358], [22359, 22363], [22364, 22369], [22370, 22372], [22373, 22376], [22377, 22382], [22383, 22388], [22389, 22391], [22392, 22398], [22399, 22407], [22408, 22410], [22411, 22414], [22415, 22418], [22419, 22421], [22422, 22428], [22428, 22429]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.48642778396606445, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21576, 21581], [21582, 21588], [21589, 21593], [21594, 21598], [21599, 21601], [21602, 21607], [21607, 21608], [21609, 21612], [21613, 21618], [21618, 21619], [21620, 21629], [21629, 21630], [21631, 21634], [21635, 21641], [21641, 21642]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.43915429711341858, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21820, 21824], [21825, 21830], [21831, 21837], [21838, 21842], [21843, 21848], [21849, 21855], [21855, 21856], [21857, 21861], [21862, 21867], [21868, 21869], [21869, 21872], [21873, 21878], [21878, 21879], [21879, 21880], [21881, 21890], [21890, 21891], [21892, 21895], [21896, 21903], [21904, 21909], [21910, 21911], [21911, 21915], [21916, 21920], [21921, 21923], [21924, 21929], [21929, 21930], [21931, 21943], [21943, 21944], [21944, 21945]]}) 
answer: set([u'left-most', u'call'])
candidate Sentence: (0.34400025010108948, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22883, 22885], [22886, 22891], [22892, 22898], [22898, 22899], [22900, 22903], [22904, 22910], [22911, 22916], [22917, 22919], [22920, 22921], [22922, 22931], [22932, 22937], [22937, 22938]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27836233377456665, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'left-most', u'corda', u'pedal', u'call', u'una'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8680>.answer
_____________________________ test_yesno[param254] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c86c8>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
E                +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x1188c86c8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.49156421422958374, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22355, 22358], [22359, 22363], [22364, 22369], [22370, 22372], [22373, 22376], [22377, 22382], [22383, 22388], [22389, 22391], [22392, 22398], [22399, 22407], [22408, 22410], [22411, 22414], [22415, 22418], [22419, 22421], [22422, 22428], [22428, 22429]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.48642778396606445, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21576, 21581], [21582, 21588], [21589, 21593], [21594, 21598], [21599, 21601], [21602, 21607], [21607, 21608], [21609, 21612], [21613, 21618], [21618, 21619], [21620, 21629], [21629, 21630], [21631, 21634], [21635, 21641], [21641, 21642]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.43915429711341858, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21820, 21824], [21825, 21830], [21831, 21837], [21838, 21842], [21843, 21848], [21849, 21855], [21855, 21856], [21857, 21861], [21862, 21867], [21868, 21869], [21869, 21872], [21873, 21878], [21878, 21879], [21879, 21880], [21881, 21890], [21890, 21891], [21892, 21895], [21896, 21903], [21904, 21909], [21910, 21911], [21911, 21915], [21916, 21920], [21921, 21923], [21924, 21929], [21929, 21930], [21931, 21943], [21943, 21944], [21944, 21945]]}) 
answer: set([u'left-most', u'call'])
candidate Sentence: (0.34400025010108948, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22883, 22885], [22886, 22891], [22892, 22898], [22898, 22899], [22900, 22903], [22904, 22910], [22911, 22916], [22917, 22919], [22920, 22921], [22922, 22931], [22932, 22937], [22937, 22938]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27836233377456665, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'left-most', u'corda', u'pedal', u'call', u'una'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the left-most pedal on a grand piano is called the una corda.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
 +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x1188c86c8>.answer
_____________________________ test_yesno[param255] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8710>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8710>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.90349835157394409, {u'tokens': [u'It', u'is', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'lemmas': [u'it', u'be', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'DT', u'NN', u'TO', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[26946, 26948], [26949, 26951], [26952, 26964], [26965, 26968], [26969, 26972], [26973, 26978], [26979, 26981], [26982, 26984], [26985, 26990], [26991, 26998], [26998, 26999]]}) 
answer: set([u'metal', u'grand'])
candidate Sentence: (0.21564431488513947, {u'tokens': [u'The', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'is', u'usually', u'made', u'of', u'cast', u'iron', u'.'], u'lemmas': [u'the', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'be', u'usually', u'make', u'of', u'cast', u'iron', u'.'], u'pos': [u'DT', u'NN', u',', u'CC', u'NN', u'NN', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[26878, 26881], [26882, 26887], [26887, 26888], [26889, 26891], [26892, 26897], [26898, 26903], [26903, 26904], [26905, 26907], [26908, 26909], [26910, 26915], [26916, 26918], [26919, 26926], [26927, 26931], [26932, 26934], [26935, 26939], [26940, 26944], [26944, 26945]]}) 
answer: set([u'grand', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.18475976586341858, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'plate', u'metal', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.11836342513561249, {u'tokens': [u'The', u'inclusion', u'in', u'a', u'piano', u'of', u'an', u'extremely', u'large', u'piece', u'of', u'metal', u'is', u'potentially', u'an', u'aesthetic', u'handicap', u',', u'which', u'piano', u'makers', u'overcome', u'by', u'polishing', u',', u'painting', u'and', u'decorating', u'the', u'plate', u'.'], u'lemmas': [u'the', u'inclusion', u'in', u'a', u'piano', u'of', u'a', u'extremely', u'large', u'piece', u'of', u'metal', u'be', u'potentially', u'a', u'aesthetic', u'handicap', u',', u'which', u'piano', u'maker', u'overcome', u'by', u'polish', u',', u'painting', u'and', u'decorate', u'the', u'plate', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'NN', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'WDT', u'NN', u'NNS', u'VBN', u'IN', u'VBG', u',', u'NN', u'CC', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[27434, 27437], [27438, 27447], [27448, 27450], [27451, 27452], [27453, 27458], [27459, 27461], [27462, 27464], [27465, 27474], [27475, 27480], [27481, 27486], [27487, 27489], [27490, 27495], [27496, 27498], [27499, 27510], [27511, 27513], [27514, 27523], [27524, 27532], [27532, 27533], [27534, 27539], [27540, 27545], [27546, 27552], [27553, 27561], [27562, 27564], [27565, 27574], [27574, 27575], [27576, 27584], [27585, 27588], [27589, 27599], [27600, 27603], [27604, 27609], [27609, 27610]]}) 
answer: set([u'grand', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.10767658054828644, {u'tokens': [u'Plates', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'lemmas': [u'plate', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'DT', u'NN', u'POS', u'JJ', u'NN', u'CC', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[27611, 27617], [27618, 27623], [27624, 27631], [27632, 27635], [27636, 27648], [27648, 27650], [27651, 27661], [27662, 27671], [27672, 27675], [27676, 27679], [27680, 27682], [27683, 27693], [27694, 27704], [27704, 27705]]}) 
answer: set([u'grand', u'metal', u'massive', u'advantageous', u'quite'])

Is it advantageous for a grand piano's metal plate to be quite massive?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8710>.answer
_____________________________ test_yesno[param258] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c87e8>, (<src.tfidf.TF_IDF object at 0x1128f7f90>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('The mechanism in upright pianos is perpendicular to the keys.') == True
E                +  where 'The mechanism in upright pianos is perpendicular to the keys.' = <src.question_processing.Question_parser instance at 0x1188c87e8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.89109480381011963, {u'tokens': [u'The', u'mechanism', u'in', u'upright', u'pianos', u'is', u'perpendicular', u'to', u'the', u'keys', u'.'], u'lemmas': [u'the', u'mechanism', u'in', u'upright', u'piano', u'be', u'perpendicular', u'to', u'the', u'key', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJ', u'TO', u'DT', u'NNS', u'.'], u'char_offsets': [[11768, 11771], [11772, 11781], [11782, 11784], [11785, 11792], [11793, 11799], [11800, 11802], [11803, 11816], [11817, 11819], [11820, 11823], [11824, 11828], [11828, 11829]]}) 
answer: set([])
candidate Sentence: (0.26921898126602173, {u'tokens': [u'A', u'prepared', u'piano', u'is', u'a', u'standard', u'grand', u'piano', u'which', u'has', u'had', u'objects', u'placed', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'has', u'had', u'its', u'mechanism', u'changed', u'in', u'some', u'way', u'.'], u'lemmas': [u'a', u'prepared', u'piano', u'be', u'a', u'standard', u'grand', u'piano', u'which', u'have', u'have', u'object', u'place', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'have', u'have', u'its', u'mechanism', u'change', u'in', u'some', u'way', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'NNS', u'VBD', u'IN', u'PRP', u'IN', u'DT', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u',', u'CC', u'WDT', u'VBZ', u'VBN', u'PRP$', u'NN', u'VBD', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[17892, 17893], [17894, 17902], [17903, 17908], [17909, 17911], [17912, 17913], [17914, 17922], [17923, 17928], [17929, 17934], [17935, 17940], [17941, 17944], [17945, 17948], [17949, 17956], [17957, 17963], [17964, 17970], [17971, 17973], [17974, 17980], [17981, 17982], [17983, 17994], [17995, 17997], [17998, 18003], [18004, 18006], [18007, 18012], [18013, 18016], [18017, 18022], [18022, 18023], [18024, 18026], [18027, 18032], [18033, 18036], [18037, 18040], [18041, 18044], [18045, 18054], [18055, 18062], [18063, 18065], [18066, 18070], [18071, 18074], [18074, 18075]]}) 
answer: set([u'upright', u'perpendicular', u'key'])
candidate Sentence: (0.16358505189418793, {u'tokens': [u'The', u'extra', u'keys', u'are', u'the', u'same', u'as', u'the', u'other', u'keys', u'in', u'appearance', u'.'], u'lemmas': [u'the', u'extra', u'key', u'be', u'the', u'same', u'as', u'the', u'other', u'key', u'in', u'appearance', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[21053, 21056], [21057, 21062], [21063, 21067], [21068, 21071], [21072, 21075], [21076, 21080], [21081, 21083], [21084, 21087], [21088, 21093], [21094, 21098], [21099, 21101], [21102, 21112], [21112, 21113]]}) 
answer: set([u'upright', u'perpendicular', u'mechanism'])
candidate Sentence: (0.14855265617370605, {u'tokens': [u'The', u'entire', u'action', u'of', u'the', u'piano', u'is', u'thus', u'shifted', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'written', u'in', u'one', u'key', u'so', u'that', u'it', u'sounds', u'in', u'a', u'different', u'key', u'.'], u'lemmas': [u'the', u'entire', u'action', u'of', u'the', u'piano', u'be', u'thus', u'shift', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'write', u'in', u'one', u'key', u'so', u'that', u'it', u'sound', u'in', u'a', u'different', u'key', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'VBN', u'IN', u'CD', u'NN', u'IN', u'IN', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[24302, 24305], [24306, 24312], [24313, 24319], [24320, 24322], [24323, 24326], [24327, 24332], [24333, 24335], [24336, 24340], [24341, 24348], [24349, 24351], [24352, 24357], [24358, 24361], [24362, 24369], [24370, 24372], [24373, 24377], [24378, 24383], [24384, 24391], [24392, 24394], [24395, 24398], [24399, 24402], [24403, 24405], [24406, 24410], [24411, 24413], [24414, 24420], [24421, 24423], [24424, 24425], [24426, 24435], [24436, 24439], [24439, 24440]]}) 
answer: set([u'upright', u'perpendicular', u'mechanism'])
candidate Sentence: (0.14286276698112488, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[16079, 16086], [16087, 16093], [16094, 16098], [16099, 16108], [16109, 16113], [16114, 16120], [16121, 16124], [16125, 16129], [16130, 16137], [16138, 16141], [16142, 16151], [16152, 16158], [16159, 16160], [16160, 16167], [16168, 16173], [16173, 16174], [16175, 16181], [16181, 16182]]}) 
answer: set([u'key', u'perpendicular', u'mechanism'])

Is the mechanism in an upright piano perpendicular to its keys?
Validity= False
Question Type = NA
Answer Type = NA
Answer = The mechanism in upright pianos is perpendicular to the keys.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('The mechanism in upright pianos is perpendicular to the keys.') == True
 +  where 'The mechanism in upright pianos is perpendicular to the keys.' = <src.question_processing.Question_parser instance at 0x1188c87e8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param261] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c88c0>, (<src.tfidf.TF_IDF object at 0x11606edd0>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c88c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2091362476348877, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[12404, 12412], [12413, 12415], [12416, 12419], [12420, 12427], [12428, 12437], [12438, 12440], [12441, 12444], [12445, 12447], [12447, 12448], [12449, 12452], [12453, 12459], [12460, 12467], [12468, 12472], [12473, 12477], [12478, 12481], [12482, 12487], [12488, 12496], [12496, 12497], [12498, 12502], [12503, 12508], [12509, 12512], [12513, 12520], [12521, 12530], [12531, 12538], [12538, 12539]]}) 
answer: set([u'root'])
candidate Sentence: (0.20443069934844971, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32421, 32422], [32423, 32426], [32427, 32432], [32433, 32434], [32435, 32441], [32442, 32449], [32449, 32450]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.17612333595752716, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[13311, 13314], [13315, 13323], [13324, 13333], [13334, 13341], [13342, 13344], [13345, 13346], [13347, 13360], [13361, 13371], [13372, 13380], [13381, 13384], [13385, 13399], [13400, 13409], [13410, 13412], [13413, 13416], [13417, 13420], [13421, 13428], [13428, 13429], [13430, 13435], [13436, 13448], [13449, 13453], [13454, 13458], [13459, 13464], [13465, 13472], [13472, 13473]]}) 
answer: set([u'root'])
candidate Sentence: (0.17510885000228882, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32385, 32387], [32388, 32391], [32392, 32393], [32393, 32396], [32397, 32403], [32404, 32405], [32406, 32412], [32413, 32420], [32420, 32421]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.16205896437168121, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[32292, 32294], [32295, 32298], [32299, 32304], [32305, 32309], [32309, 32310], [32311, 32314], [32315, 32322], [32323, 32334], [32335, 32337], [32338, 32341], [32342, 32350], [32351, 32352], [32352, 32356], [32357, 32360], [32361, 32366], [32367, 32370], [32371, 32377], [32378, 32382], [32382, 32383], [32383, 32384]]}) 
answer: set([u'latin', u'root'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c88c0>.answer
_____________________________ test_yesno[param262] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8908>, (<src.tfidf.TF_IDF object at 0x11606edd0>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese is derived from Latin.')
E                +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x1188c8908>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2091362476348877, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[12404, 12412], [12413, 12415], [12416, 12419], [12420, 12427], [12428, 12437], [12438, 12440], [12441, 12444], [12445, 12447], [12447, 12448], [12449, 12452], [12453, 12459], [12460, 12467], [12468, 12472], [12473, 12477], [12478, 12481], [12482, 12487], [12488, 12496], [12496, 12497], [12498, 12502], [12503, 12508], [12509, 12512], [12513, 12520], [12521, 12530], [12531, 12538], [12538, 12539]]}) 
answer: set([u'root'])
candidate Sentence: (0.20443069934844971, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32421, 32422], [32423, 32426], [32427, 32432], [32433, 32434], [32435, 32441], [32442, 32449], [32449, 32450]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.17612333595752716, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[13311, 13314], [13315, 13323], [13324, 13333], [13334, 13341], [13342, 13344], [13345, 13346], [13347, 13360], [13361, 13371], [13372, 13380], [13381, 13384], [13385, 13399], [13400, 13409], [13410, 13412], [13413, 13416], [13417, 13420], [13421, 13428], [13428, 13429], [13430, 13435], [13436, 13448], [13449, 13453], [13454, 13458], [13459, 13464], [13465, 13472], [13472, 13473]]}) 
answer: set([u'root'])
candidate Sentence: (0.17510885000228882, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32385, 32387], [32388, 32391], [32392, 32393], [32393, 32396], [32397, 32403], [32404, 32405], [32406, 32412], [32413, 32420], [32420, 32421]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.16205896437168121, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[32292, 32294], [32295, 32298], [32299, 32304], [32305, 32309], [32309, 32310], [32311, 32314], [32315, 32322], [32323, 32334], [32335, 32337], [32338, 32341], [32342, 32350], [32351, 32352], [32352, 32356], [32357, 32360], [32361, 32366], [32367, 32370], [32371, 32377], [32378, 32382], [32382, 32383], [32383, 32384]]}) 
answer: set([u'latin', u'root'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese is derived from Latin.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese is derived from Latin.')
 +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x1188c8908>.answer
_____________________________ test_yesno[param263] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8950>, (<src.tfidf.TF_IDF object at 0x11606edd0>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2600092887878418, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[24419, 24426], [24427, 24434], [24435, 24444], [24445, 24447], [24448, 24454], [24455, 24460], [24461, 24464], [24465, 24469], [24470, 24474], [24475, 24477], [24478, 24485], [24486, 24491], [24492, 24494], [24495, 24505], [24506, 24512], [24512, 24513], [24514, 24518], [24519, 24524], [24525, 24527], [24528, 24538], [24538, 24539], [24540, 24548], [24549, 24554], [24555, 24557], [24558, 24568], [24569, 24575], [24575, 24576], [24577, 24585], [24586, 24591], [24592, 24594], [24595, 24600], [24600, 24601], [24602, 24609], [24610, 24615], [24616, 24618], [24619, 24629], [24630, 24636], [24636, 24637], [24638, 24642], [24643, 24648], [24649, 24653], [24654, 24664], [24665, 24667], [24668, 24671], [24672, 24678], [24679, 24684], [24684, 24685]]}) 
answer: set([u'arabic', u'contain'])
candidate Sentence: (0.25397604703903198, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[18276, 18283], [18284, 18287], [18288, 18291], [18292, 18295], [18296, 18300], [18301, 18310], [18310, 18311], [18312, 18322], [18323, 18331], [18332, 18337], [18338, 18341], [18342, 18347], [18348, 18352], [18353, 18359], [18360, 18362], [18363, 18372], [18373, 18375], [18376, 18383], [18384, 18390], [18390, 18391]]}) 
answer: set([u'contain'])
candidate Sentence: (0.25238749384880066, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32421, 32422], [32423, 32426], [32427, 32432], [32433, 32434], [32435, 32441], [32442, 32449], [32449, 32450]]}) 
answer: set([u'arabic', u'word', u'contain'])
candidate Sentence: (0.24704590439796448, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mu\xe7a', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mu\xe7a', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18833, 18836], [18837, 18841], [18842, 18852], [18853, 18859], [18860, 18862], [18863, 18867], [18868, 18871], [18872, 18878], [18879, 18883], [18884, 18886], [18887, 18893], [18894, 18898], [18899, 18907], [18908, 18909], [18909, 18913], [18914, 18921], [18921, 18922], [18922, 18923]]}) 
answer: set([u'contain'])
candidate Sentence: (0.21618713438510895, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32385, 32387], [32388, 32391], [32392, 32393], [32393, 32396], [32397, 32403], [32404, 32405], [32406, 32412], [32413, 32420], [32420, 32421]]}) 
answer: set([u'arabic', u'word', u'contain'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8950>.answer
_____________________________ test_yesno[param264] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8998>, (<src.tfidf.TF_IDF object at 0x11606edd0>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
E                +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x1188c8998>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2600092887878418, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[24419, 24426], [24427, 24434], [24435, 24444], [24445, 24447], [24448, 24454], [24455, 24460], [24461, 24464], [24465, 24469], [24470, 24474], [24475, 24477], [24478, 24485], [24486, 24491], [24492, 24494], [24495, 24505], [24506, 24512], [24512, 24513], [24514, 24518], [24519, 24524], [24525, 24527], [24528, 24538], [24538, 24539], [24540, 24548], [24549, 24554], [24555, 24557], [24558, 24568], [24569, 24575], [24575, 24576], [24577, 24585], [24586, 24591], [24592, 24594], [24595, 24600], [24600, 24601], [24602, 24609], [24610, 24615], [24616, 24618], [24619, 24629], [24630, 24636], [24636, 24637], [24638, 24642], [24643, 24648], [24649, 24653], [24654, 24664], [24665, 24667], [24668, 24671], [24672, 24678], [24679, 24684], [24684, 24685]]}) 
answer: set([u'arabic', u'contain'])
candidate Sentence: (0.25397604703903198, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[18276, 18283], [18284, 18287], [18288, 18291], [18292, 18295], [18296, 18300], [18301, 18310], [18310, 18311], [18312, 18322], [18323, 18331], [18332, 18337], [18338, 18341], [18342, 18347], [18348, 18352], [18353, 18359], [18360, 18362], [18363, 18372], [18373, 18375], [18376, 18383], [18384, 18390], [18390, 18391]]}) 
answer: set([u'contain'])
candidate Sentence: (0.25238749384880066, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32421, 32422], [32423, 32426], [32427, 32432], [32433, 32434], [32435, 32441], [32442, 32449], [32449, 32450]]}) 
answer: set([u'arabic', u'word', u'contain'])
candidate Sentence: (0.24704590439796448, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mu\xe7a', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mu\xe7a', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18833, 18836], [18837, 18841], [18842, 18852], [18853, 18859], [18860, 18862], [18863, 18867], [18868, 18871], [18872, 18878], [18879, 18883], [18884, 18886], [18887, 18893], [18894, 18898], [18899, 18907], [18908, 18909], [18909, 18913], [18914, 18921], [18921, 18922], [18922, 18923]]}) 
answer: set([u'contain'])
candidate Sentence: (0.21618713438510895, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32385, 32387], [32388, 32391], [32392, 32393], [32393, 32396], [32397, 32403], [32404, 32405], [32406, 32412], [32413, 32420], [32420, 32421]]}) 
answer: set([u'arabic', u'word', u'contain'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese contains words from the Arabic language.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
 +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x1188c8998>.answer
_____________________________ test_yesno[param269] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8b00>, (<src.tfidf.TF_IDF object at 0x1128f7090>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
E                +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x1188c8b00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79884129762649536, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22107, 22110], [22111, 22120], [22121, 22123], [22124, 22137], [22138, 22140], [22141, 22142], [22143, 22147], [22148, 22156], [22157, 22159], [22160, 22166], [22166, 22167]]}) 
answer: set([u'franciscio'])
candidate Sentence: (0.23346078395843506, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22808, 22815], [22816, 22819], [22820, 22824], [22825, 22827], [22828, 22834], [22835, 22837], [22838, 22841], [22842, 22851], [22852, 22854], [22855, 22868], [22869, 22873], [22873, 22874], [22875, 22879], [22880, 22886], [22887, 22892], [22893, 22901], [22902, 22906], [22907, 22914], [22915, 22919], [22920, 22923], [22924, 22926], [22927, 22933], [22934, 22940], [22941, 22943], [22944, 22948], [22949, 22955], [22956, 22959], [22960, 22964], [22965, 22968], [22969, 22973], [22974, 22978], [22978, 22979]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19880320131778717, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[28220, 28223], [28224, 28231], [28232, 28241], [28241, 28242], [28243, 28252], [28253, 28254], [28255, 28261], [28262, 28266], [28266, 28267], [28268, 28270], [28271, 28273], [28274, 28281], [28282, 28284], [28285, 28296], [28297, 28309], [28310, 28313], [28314, 28320], [28321, 28323], [28324, 28328], [28328, 28329]]}) 
answer: set([u'high', u'franciscio', u'standard'])
candidate Sentence: (0.15127129852771759, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13347, 13350], [13351, 13355], [13356, 13359], [13360, 13370], [13371, 13379], [13380, 13383], [13384, 13392], [13393, 13398], [13398, 13399], [13400, 13409], [13410, 13419], [13420, 13423], [13424, 13429], [13430, 13439], [13440, 13443], [13444, 13450], [13451, 13462], [13463, 13472], [13473, 13476], [13477, 13480], [13481, 13493], [13493, 13494]]}) 
answer: set([u'high', u'living', u'franciscio'])
candidate Sentence: (0.12330088019371033, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[15123, 15126], [15127, 15132], [15133, 15139], [15140, 15142], [15143, 15151], [15152, 15154], [15155, 15160], [15161, 15163], [15164, 15168], [15169, 15173], [15174, 15178], [15179, 15191], [15192, 15194], [15197, 15200], [15201, 15205], [15206, 15208], [15210, 15211]]}) 
answer: set([u'living', u'standard', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, San Francisco is characterized by a high standard of living.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
 +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x1188c8b00>.answer
_____________________________ test_yesno[param270] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8b48>, (<src.tfidf.TF_IDF object at 0x1128f7090>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8b48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79884129762649536, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22107, 22110], [22111, 22120], [22121, 22123], [22124, 22137], [22138, 22140], [22141, 22142], [22143, 22147], [22148, 22156], [22157, 22159], [22160, 22166], [22166, 22167]]}) 
answer: set([u'franciscio'])
candidate Sentence: (0.23346078395843506, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22808, 22815], [22816, 22819], [22820, 22824], [22825, 22827], [22828, 22834], [22835, 22837], [22838, 22841], [22842, 22851], [22852, 22854], [22855, 22868], [22869, 22873], [22873, 22874], [22875, 22879], [22880, 22886], [22887, 22892], [22893, 22901], [22902, 22906], [22907, 22914], [22915, 22919], [22920, 22923], [22924, 22926], [22927, 22933], [22934, 22940], [22941, 22943], [22944, 22948], [22949, 22955], [22956, 22959], [22960, 22964], [22965, 22968], [22969, 22973], [22974, 22978], [22978, 22979]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19880320131778717, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[28220, 28223], [28224, 28231], [28232, 28241], [28241, 28242], [28243, 28252], [28253, 28254], [28255, 28261], [28262, 28266], [28266, 28267], [28268, 28270], [28271, 28273], [28274, 28281], [28282, 28284], [28285, 28296], [28297, 28309], [28310, 28313], [28314, 28320], [28321, 28323], [28324, 28328], [28328, 28329]]}) 
answer: set([u'high', u'franciscio', u'standard'])
candidate Sentence: (0.15127129852771759, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13347, 13350], [13351, 13355], [13356, 13359], [13360, 13370], [13371, 13379], [13380, 13383], [13384, 13392], [13393, 13398], [13398, 13399], [13400, 13409], [13410, 13419], [13420, 13423], [13424, 13429], [13430, 13439], [13440, 13443], [13444, 13450], [13451, 13462], [13463, 13472], [13473, 13476], [13477, 13480], [13481, 13493], [13493, 13494]]}) 
answer: set([u'high', u'living', u'franciscio'])
candidate Sentence: (0.12330088019371033, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[15123, 15126], [15127, 15132], [15133, 15139], [15140, 15142], [15143, 15151], [15152, 15154], [15155, 15160], [15161, 15163], [15164, 15168], [15169, 15173], [15174, 15178], [15179, 15191], [15192, 15194], [15197, 15200], [15201, 15205], [15206, 15208], [15210, 15211]]}) 
answer: set([u'living', u'standard', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8b48>.answer
_____________________________ test_yesno[param271] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8b90>, (<src.tfidf.TF_IDF object at 0x1128f7090>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
E                +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x1188c8b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45207801461219788, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40578, 40587], [40588, 40590], [40591, 40594], [40595, 40599], [40600, 40608], [40609, 40618], [40619, 40625], [40625, 40626], [40627, 40630], [40631, 40640], [40641, 40644], [40645, 40648], [40649, 40656], [40657, 40667], [40668, 40670], [40671, 40674], [40675, 40678], [40679, 40686], [40687, 40698], [40699, 40701], [40702, 40705], [40706, 40708], [40709, 40712], [40713, 40715], [40716, 40723], [40724, 40728], [40729, 40735], [40735, 40736], [40737, 40739], [40740, 40744], [40744, 40745], [40745, 40746]]}) 
answer: set([u'high'])
candidate Sentence: (0.1624935120344162, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[40106, 40109], [40110, 40117], [40118, 40128], [40129, 40131], [40132, 40139], [40140, 40149], [40150, 40152], [40153, 40156], [40157, 40166], [40167, 40169], [40170, 40177], [40178, 40180], [40181, 40185], [40186, 40188], [40189, 40192], [40193, 40198], [40199, 40201], [40202, 40212], [40212, 40213], [40215, 40225], [40225, 40226], [40227, 40230], [40231, 40235], [40235, 40237], [40238, 40248], [40249, 40251], [40252, 40260], [40261, 40270], [40271, 40273], [40274, 40278], [40279, 40283], [40284, 40288], [40289, 40291], [40292, 40296], [40297, 40299], [40300, 40303], [40304, 40309], [40309, 40310]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12892843782901764, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40750, 40753], [40754, 40763], [40764, 40768], [40769, 40772], [40773, 40776], [40777, 40784], [40785, 40795], [40796, 40798], [40799, 40807], [40808, 40818], [40819, 40821], [40822, 40825], [40826, 40834], [40835, 40841], [40841, 40842], [40843, 40847], [40848, 40851], [40852, 40855], [40856, 40860], [40861, 40867], [40868, 40869], [40870, 40876], [40877, 40890], [40891, 40895], [40896, 40899], [40900, 40905], [40906, 40918], [40919, 40923], [40923, 40924]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12627848982810974, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[37269, 37273], [37274, 37277], [37278, 37283], [37284, 37286], [37287, 37298], [37299, 37301], [37302, 37307], [37307, 37308], [37309, 37312], [37313, 37322], [37323, 37325], [37326, 37329], [37330, 37335], [37336, 37338], [37339, 37350], [37351, 37358], [37359, 37363], [37364, 37370], [37370, 37371], [37372, 37374], [37375, 37378], [37379, 37385], [37386, 37395], [37396, 37401], [37402, 37405], [37406, 37419], [37420, 37422], [37423, 37429], [37430, 37437], [37438, 37440], [37441, 37445], [37445, 37446]]}) 
answer: set([u'high', u'percentage', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.11960852891206741, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22107, 22110], [22111, 22120], [22121, 22123], [22124, 22137], [22138, 22140], [22141, 22142], [22143, 22147], [22148, 22156], [22157, 22159], [22160, 22166], [22166, 22167]]}) 
answer: set([u'percentage', u'individual', u'lesbian', u'gay'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
 +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x1188c8b90>.answer
_____________________________ test_yesno[param272] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8bd8>, (<src.tfidf.TF_IDF object at 0x1128f7090>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8bd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45207801461219788, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40578, 40587], [40588, 40590], [40591, 40594], [40595, 40599], [40600, 40608], [40609, 40618], [40619, 40625], [40625, 40626], [40627, 40630], [40631, 40640], [40641, 40644], [40645, 40648], [40649, 40656], [40657, 40667], [40668, 40670], [40671, 40674], [40675, 40678], [40679, 40686], [40687, 40698], [40699, 40701], [40702, 40705], [40706, 40708], [40709, 40712], [40713, 40715], [40716, 40723], [40724, 40728], [40729, 40735], [40735, 40736], [40737, 40739], [40740, 40744], [40744, 40745], [40745, 40746]]}) 
answer: set([u'high'])
candidate Sentence: (0.1624935120344162, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[40106, 40109], [40110, 40117], [40118, 40128], [40129, 40131], [40132, 40139], [40140, 40149], [40150, 40152], [40153, 40156], [40157, 40166], [40167, 40169], [40170, 40177], [40178, 40180], [40181, 40185], [40186, 40188], [40189, 40192], [40193, 40198], [40199, 40201], [40202, 40212], [40212, 40213], [40215, 40225], [40225, 40226], [40227, 40230], [40231, 40235], [40235, 40237], [40238, 40248], [40249, 40251], [40252, 40260], [40261, 40270], [40271, 40273], [40274, 40278], [40279, 40283], [40284, 40288], [40289, 40291], [40292, 40296], [40297, 40299], [40300, 40303], [40304, 40309], [40309, 40310]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12892843782901764, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40750, 40753], [40754, 40763], [40764, 40768], [40769, 40772], [40773, 40776], [40777, 40784], [40785, 40795], [40796, 40798], [40799, 40807], [40808, 40818], [40819, 40821], [40822, 40825], [40826, 40834], [40835, 40841], [40841, 40842], [40843, 40847], [40848, 40851], [40852, 40855], [40856, 40860], [40861, 40867], [40868, 40869], [40870, 40876], [40877, 40890], [40891, 40895], [40896, 40899], [40900, 40905], [40906, 40918], [40919, 40923], [40923, 40924]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12627848982810974, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[37269, 37273], [37274, 37277], [37278, 37283], [37284, 37286], [37287, 37298], [37299, 37301], [37302, 37307], [37307, 37308], [37309, 37312], [37313, 37322], [37323, 37325], [37326, 37329], [37330, 37335], [37336, 37338], [37339, 37350], [37351, 37358], [37359, 37363], [37364, 37370], [37370, 37371], [37372, 37374], [37375, 37378], [37379, 37385], [37386, 37395], [37396, 37401], [37402, 37405], [37406, 37419], [37420, 37422], [37423, 37429], [37430, 37437], [37438, 37440], [37441, 37445], [37445, 37446]]}) 
answer: set([u'high', u'percentage', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.11960852891206741, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22107, 22110], [22111, 22120], [22121, 22123], [22124, 22137], [22138, 22140], [22141, 22142], [22143, 22147], [22148, 22156], [22157, 22159], [22160, 22166], [22166, 22167]]}) 
answer: set([u'percentage', u'individual', u'lesbian', u'gay'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 1415254 characters, 266429 tokens, 2021.8 char/doc, 380.6 tok/doc RATES: 16.455 doc/sec, 6262.9 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188c8bd8>.answer
_____________________________ test_yesno[param280] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8e18>, (<src.tfidf.TF_IDF object at 0x1128f7dd0>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
E                +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x1188c8e18>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39984771609306335, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29579, 29588], [29589, 29592], [29593, 29596], [29597, 29598], [29599, 29601], [29602, 29607], [29608, 29616], [29616, 29617]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.17273348569869995, {u'tokens': [u'However', u',', u'elsewhere', u'this', u'does', u"n't", u'happen', u':', u'ndizi', u'``', u'banana', u"''", u'has', u'two', u'syllables', u',', u',', u'as', u'does', u'nenda', u'-LRB-', u'not', u'-RRB-', u'``', u'go', u"''", u'.'], u'lemmas': [u'however', u',', u'elsewhere', u'this', u'do', u'not', u'happen', u':', u'ndizus', u'``', u'banana', u"''", u'have', u'two', u'syllable', u',', u',', u'as', u'do', u'nenda', u'-lrb-', u'not', u'-rrb-', u'``', u'go', u"''", u'.'], u'pos': [u'RB', u',', u'RB', u'DT', u'VBZ', u'RB', u'VB', u':', u'NNS', u'``', u'NN', u"''", u'VBZ', u'CD', u'NNS', u',', u',', u'IN', u'VBZ', u'NN', u'-LRB-', u'RB', u'-RRB-', u'``', u'VB', u"''", u'.'], u'char_offsets': [[6447, 6454], [6454, 6455], [6456, 6465], [6466, 6470], [6471, 6475], [6475, 6478], [6479, 6485], [6485, 6486], [6487, 6492], [6493, 6494], [6494, 6500], [6500, 6501], [6502, 6505], [6506, 6509], [6510, 6519], [6519, 6520], [6522, 6523], [6524, 6526], [6527, 6531], [6532, 6537], [6540, 6541], [6541, 6544], [6546, 6547], [6548, 6549], [6549, 6551], [6551, 6552], [6552, 6553]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.16239820420742035, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8926, 8930], [8931, 8934], [8935, 8939], [8940, 8946], [8947, 8951], [8952, 8955], [8956, 8960], [8961, 8966], [8967, 8972], [8973, 8978], [8979, 8981], [8982, 8989], [8990, 8992], [8992, 8993], [8994, 8997], [8998, 9006], [9007, 9009], [9009, 9010]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.14764557778835297, {u'tokens': [u'The', u'British', u'did', u'not', u'do', u'so', u'in', u'neighbouring', u'Kenya', u',', u'even', u'though', u'they', u'made', u'moves', u'in', u'that', u'direction', u'.'], u'lemmas': [u'the', u'British', u'do', u'not', u'do', u'so', u'in', u'neighbour', u'Kenya', u',', u'even', u'though', u'they', u'make', u'move', u'in', u'that', u'direction', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'RB', u'VB', u'RB', u'IN', u'VBG', u'NNP', u',', u'RB', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[26399, 26402], [26403, 26410], [26411, 26414], [26415, 26418], [26419, 26421], [26422, 26424], [26425, 26427], [26428, 26440], [26441, 26446], [26446, 26447], [26448, 26452], [26453, 26459], [26460, 26464], [26465, 26469], [26470, 26475], [26476, 26478], [26479, 26483], [26484, 26493], [26493, 26494]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.1305890679359436, {u'tokens': [u'Standard', u'Swahili', u'has', u'five', u'vowel', u'phonemes', u':', u',', u',', u',', u',', u'and', u'.'], u'lemmas': [u'Standard', u'Swahili', u'have', u'five', u'vowel', u'phoneme', u':', u',', u',', u',', u',', u'and', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'CD', u'NN', u'NNS', u':', u',', u',', u',', u',', u'CC', u'.'], u'char_offsets': [[5496, 5504], [5505, 5512], [5513, 5516], [5517, 5521], [5522, 5527], [5528, 5536], [5536, 5537], [5539, 5540], [5542, 5543], [5545, 5546], [5548, 5549], [5550, 5553], [5555, 5556]]}) 
answer: set([u'dipthong'])

Does Swahili have dipthongs?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili has diphthongs. (Typo)
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
 +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x1188c8e18>.answer
_____________________________ test_yesno[param281] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8ea8>, (<src.tfidf.TF_IDF object at 0x1128f7dd0>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili is a Bantu language.')
E                +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x1188c8ea8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43668389320373535, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29579, 29588], [29589, 29592], [29593, 29596], [29597, 29598], [29599, 29601], [29602, 29607], [29608, 29616], [29616, 29617]]}) 
answer: set([u'bantu'])
candidate Sentence: (0.22015683352947235, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[637, 644], [645, 647], [648, 649], [650, 655], [656, 664], [665, 669], [670, 676], [677, 679], [680, 681], [682, 688], [689, 697], [698, 700], [701, 708], [709, 715], [716, 729], [730, 740], [741, 746], [747, 749], [750, 753], [754, 758], [759, 766], [767, 772], [772, 773]]}) 
answer: set([])
candidate Sentence: (0.17578470706939697, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5195, 5198], [5199, 5204], [5205, 5214], [5215, 5218], [5219, 5220], [5221, 5225], [5226, 5234], [5235, 5245], [5246, 5248], [5249, 5252], [5253, 5260], [5261, 5263], [5264, 5269], [5269, 5270]]}) 
answer: set([])
candidate Sentence: (0.17005594074726105, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8484, 8488], [8489, 8494], [8495, 8499], [8500, 8508], [8509, 8518], [8519, 8520], [8520, 8524], [8525, 8527], [8528, 8531], [8532, 8536], [8537, 8539], [8540, 8543], [8544, 8552], [8553, 8562], [8562, 8563], [8563, 8564], [8565, 8568], [8569, 8580], [8580, 8581], [8582, 8587], [8588, 8591], [8592, 8596], [8597, 8598], [8599, 8607], [8608, 8613], [8614, 8616], [8617, 8624], [8625, 8631], [8632, 8634], [8635, 8640], [8640, 8641]]}) 
answer: set([])
candidate Sentence: (0.1670202910900116, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7299, 7301], [7302, 7308], [7309, 7313], [7314, 7317], [7318, 7323], [7324, 7333], [7333, 7334], [7335, 7342], [7343, 7350], [7351, 7359], [7360, 7365], [7366, 7370], [7371, 7372], [7373, 7379], [7380, 7382], [7383, 7390], [7390, 7391]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili is a Bantu language.
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili is a Bantu language.')
 +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x1188c8ea8>.answer
_____________________________ test_yesno[param282] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8f38>, (<src.tfidf.TF_IDF object at 0x1128f7dd0>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8f38>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43668389320373535, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29579, 29588], [29589, 29592], [29593, 29596], [29597, 29598], [29599, 29601], [29602, 29607], [29608, 29616], [29616, 29617]]}) 
answer: set([u'bantu'])
candidate Sentence: (0.22015683352947235, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[637, 644], [645, 647], [648, 649], [650, 655], [656, 664], [665, 669], [670, 676], [677, 679], [680, 681], [682, 688], [689, 697], [698, 700], [701, 708], [709, 715], [716, 729], [730, 740], [741, 746], [747, 749], [750, 753], [754, 758], [759, 766], [767, 772], [772, 773]]}) 
answer: set([])
candidate Sentence: (0.17578470706939697, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5195, 5198], [5199, 5204], [5205, 5214], [5215, 5218], [5219, 5220], [5221, 5225], [5226, 5234], [5235, 5245], [5246, 5248], [5249, 5252], [5253, 5260], [5261, 5263], [5264, 5269], [5269, 5270]]}) 
answer: set([])
candidate Sentence: (0.17005594074726105, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8484, 8488], [8489, 8494], [8495, 8499], [8500, 8508], [8509, 8518], [8519, 8520], [8520, 8524], [8525, 8527], [8528, 8531], [8532, 8536], [8537, 8539], [8540, 8543], [8544, 8552], [8553, 8562], [8562, 8563], [8563, 8564], [8565, 8568], [8569, 8580], [8580, 8581], [8582, 8587], [8588, 8591], [8592, 8596], [8597, 8598], [8599, 8607], [8608, 8613], [8614, 8616], [8617, 8624], [8625, 8631], [8632, 8634], [8635, 8640], [8640, 8641]]}) 
answer: set([])
candidate Sentence: (0.1670202910900116, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7299, 7301], [7302, 7308], [7309, 7313], [7314, 7317], [7318, 7323], [7324, 7333], [7333, 7334], [7335, 7342], [7343, 7350], [7351, 7359], [7360, 7365], [7366, 7370], [7371, 7372], [7373, 7379], [7380, 7382], [7383, 7390], [7390, 7391]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188c8f38>.answer
_____________________________ test_yesno[param283] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188c8fc8>, (<src.tfidf.TF_IDF object at 0x1128f7dd0>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
E                +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x1188c8fc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39814144372940063, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implemented', u'--', u'and', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implement', u'--', u'and', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'CD', u':', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'VBN', u':', u'CC', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1240, 1243], [1244, 1255], [1256, 1262], [1263, 1265], [1266, 1272], [1273, 1277], [1278, 1285], [1286, 1287], [1288, 1296], [1297, 1304], [1305, 1307], [1308, 1315], [1316, 1323], [1324, 1326], [1327, 1331], [1331, 1332], [1332, 1340], [1341, 1345], [1346, 1353], [1354, 1357], [1358, 1361], [1362, 1366], [1367, 1371], [1372, 1383], [1383, 1384], [1384, 1387], [1388, 1396], [1397, 1399], [1400, 1402], [1403, 1411], [1412, 1420], [1421, 1423], [1424, 1428], [1429, 1431], [1432, 1443], [1444, 1447], [1448, 1451], [1452, 1456], [1457, 1464], [1465, 1475], [1475, 1476]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.22213453054428101, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29579, 29588], [29589, 29592], [29593, 29596], [29597, 29598], [29599, 29601], [29602, 29607], [29608, 29616], [29616, 29617]]}) 
answer: set([u'school', u'make', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.19435977935791016, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[28442, 28444], [28445, 28451], [28451, 28452], [28453, 28456], [28457, 28464], [28465, 28474], [28475, 28477], [28477, 28480], [28481, 28486], [28487, 28494], [28494, 28495], [28496, 28499], [28500, 28502], [28503, 28505], [28506, 28508], [28509, 28515], [28516, 28519], [28520, 28525], [28526, 28529], [28530, 28532], [28533, 28540], [28541, 28547], [28548, 28557], [28558, 28560], [28561, 28564], [28565, 28572], [28572, 28573], [28574, 28577], [28578, 28580], [28581, 28590], [28591, 28596], [28597, 28608], [28609, 28611], [28612, 28619], [28620, 28630], [28631, 28633], [28634, 28645], [28646, 28649], [28650, 28653], [28654, 28658], [28659, 28666], [28667, 28676], [28676, 28677]]}) 
answer: set([u'swahilus', u'make', u'subject', u'require', u'primary'])
candidate Sentence: (0.16400471329689026, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8926, 8930], [8931, 8934], [8935, 8939], [8940, 8946], [8947, 8951], [8952, 8955], [8956, 8960], [8961, 8966], [8967, 8972], [8973, 8978], [8979, 8981], [8982, 8989], [8990, 8992], [8992, 8993], [8994, 8997], [8998, 9006], [9007, 9009], [9009, 9010]]}) 
answer: set([u'school', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.16231720149517059, {u'tokens': [u'Most', u'educated', u'Kenyans', u'are', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'is', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'lemmas': [u'most', u'educate', u'kenyan', u'be', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'be', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'pos': [u'JJS', u'VBN', u'NNS', u'VBP', u'JJ', u'TO', u'VB', u'RB', u'IN', u'NNP', u',', u'IN', u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'CD', u'.'], u'char_offsets': [[28049, 28053], [28054, 28062], [28063, 28070], [28071, 28074], [28075, 28079], [28080, 28082], [28083, 28094], [28096, 28104], [28105, 28107], [28108, 28115], [28115, 28116], [28117, 28122], [28123, 28125], [28126, 28128], [28129, 28130], [28131, 28141], [28142, 28149], [28150, 28152], [28153, 28159], [28160, 28164], [28165, 28170], [28171, 28174], [28174, 28175]]}) 
answer: set([u'swahilus', u'make', u'require', u'uganda', u'primary'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Uganda made Swahili a required subject in primary schools.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
 +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x1188c8fc8>.answer
_____________________________ test_yesno[param284] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cd098>, (<src.tfidf.TF_IDF object at 0x1128f7dd0>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188cd098>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39814144372940063, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implemented', u'--', u'and', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implement', u'--', u'and', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'CD', u':', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'VBN', u':', u'CC', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1240, 1243], [1244, 1255], [1256, 1262], [1263, 1265], [1266, 1272], [1273, 1277], [1278, 1285], [1286, 1287], [1288, 1296], [1297, 1304], [1305, 1307], [1308, 1315], [1316, 1323], [1324, 1326], [1327, 1331], [1331, 1332], [1332, 1340], [1341, 1345], [1346, 1353], [1354, 1357], [1358, 1361], [1362, 1366], [1367, 1371], [1372, 1383], [1383, 1384], [1384, 1387], [1388, 1396], [1397, 1399], [1400, 1402], [1403, 1411], [1412, 1420], [1421, 1423], [1424, 1428], [1429, 1431], [1432, 1443], [1444, 1447], [1448, 1451], [1452, 1456], [1457, 1464], [1465, 1475], [1475, 1476]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.22213453054428101, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29579, 29588], [29589, 29592], [29593, 29596], [29597, 29598], [29599, 29601], [29602, 29607], [29608, 29616], [29616, 29617]]}) 
answer: set([u'school', u'make', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.19435977935791016, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[28442, 28444], [28445, 28451], [28451, 28452], [28453, 28456], [28457, 28464], [28465, 28474], [28475, 28477], [28477, 28480], [28481, 28486], [28487, 28494], [28494, 28495], [28496, 28499], [28500, 28502], [28503, 28505], [28506, 28508], [28509, 28515], [28516, 28519], [28520, 28525], [28526, 28529], [28530, 28532], [28533, 28540], [28541, 28547], [28548, 28557], [28558, 28560], [28561, 28564], [28565, 28572], [28572, 28573], [28574, 28577], [28578, 28580], [28581, 28590], [28591, 28596], [28597, 28608], [28609, 28611], [28612, 28619], [28620, 28630], [28631, 28633], [28634, 28645], [28646, 28649], [28650, 28653], [28654, 28658], [28659, 28666], [28667, 28676], [28676, 28677]]}) 
answer: set([u'swahilus', u'make', u'subject', u'require', u'primary'])
candidate Sentence: (0.16400471329689026, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8926, 8930], [8931, 8934], [8935, 8939], [8940, 8946], [8947, 8951], [8952, 8955], [8956, 8960], [8961, 8966], [8967, 8972], [8973, 8978], [8979, 8981], [8982, 8989], [8990, 8992], [8992, 8993], [8994, 8997], [8998, 9006], [9007, 9009], [9009, 9010]]}) 
answer: set([u'school', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.16231720149517059, {u'tokens': [u'Most', u'educated', u'Kenyans', u'are', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'is', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'lemmas': [u'most', u'educate', u'kenyan', u'be', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'be', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'pos': [u'JJS', u'VBN', u'NNS', u'VBP', u'JJ', u'TO', u'VB', u'RB', u'IN', u'NNP', u',', u'IN', u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'CD', u'.'], u'char_offsets': [[28049, 28053], [28054, 28062], [28063, 28070], [28071, 28074], [28075, 28079], [28080, 28082], [28083, 28094], [28096, 28104], [28105, 28107], [28108, 28115], [28115, 28116], [28117, 28122], [28123, 28125], [28126, 28128], [28129, 28130], [28131, 28141], [28142, 28149], [28150, 28152], [28153, 28159], [28160, 28164], [28165, 28170], [28171, 28174], [28174, 28175]]}) 
answer: set([u'swahilus', u'make', u'require', u'uganda', u'primary'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188cd098>.answer
_____________________________ test_yesno[param285] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cd128>, (<src.tfidf.TF_IDF object at 0x1175ec3d0>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188cd128>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42008361220359802, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28815, 28821], [28821, 28822]]}) 
answer: set([u'norse', u'old', u'descendant'])
candidate Sentence: (0.3511199951171875, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[589, 594], [595, 599], [600, 603], [604, 609], [610, 615], [616, 624], [625, 634], [634, 635], [636, 643], [644, 646], [647, 648], [649, 659], [660, 662], [663, 666], [667, 672], [672, 673], [674, 677], [678, 684], [685, 693], [694, 696], [697, 700], [701, 709], [710, 717], [718, 724], [725, 727], [728, 739], [740, 746], [747, 750], [751, 757], [758, 761], [761, 762]]}) 
answer: set([])
candidate Sentence: (0.32522362470626831, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4221, 4225], [4226, 4233], [4234, 4236], [4237, 4242], [4243, 4252], [4253, 4255], [4256, 4258], [4259, 4262], [4263, 4266], [4267, 4274], [4274, 4275], [4276, 4279], [4280, 4285], [4286, 4291], [4292, 4294], [4295, 4302], [4303, 4307], [4308, 4311], [4312, 4316], [4317, 4322], [4323, 4324], [4324, 4330], [4331, 4334], [4335, 4342], [4342, 4343], [4344, 4347], [4348, 4351], [4352, 4356], [4357, 4362], [4363, 4364], [4364, 4370], [4371, 4374], [4375, 4382], [4382, 4383], [4383, 4384]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.22419583797454834, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4984, 4988], [4989, 4997], [4998, 5003], [5004, 5006], [5007, 5014], [5015, 5018], [5019, 5026], [5027, 5031], [5032, 5035], [5036, 5039], [5040, 5046], [5047, 5049], [5050, 5053], [5054, 5056], [5057, 5068], [5068, 5069], [5070, 5075], [5076, 5084], [5085, 5087], [5088, 5091], [5092, 5102], [5103, 5105], [5106, 5109], [5110, 5117], [5118, 5126], [5126, 5127], [5128, 5131], [5132, 5136], [5137, 5142], [5143, 5144], [5144, 5150], [5151, 5154], [5155, 5162], [5162, 5163], [5164, 5167], [5168, 5171], [5172, 5176], [5177, 5182], [5183, 5184], [5184, 5191], [5192, 5195], [5196, 5202], [5202, 5203], [5203, 5204]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.16862308979034424, {u'tokens': [u'In', u'the', u'8th', u'century', u',', u'the', u'common', u'Germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'had', u'undergone', u'some', u'changes', u'and', u'evolved', u'into', u'Old', u'Norse', u'.'], u'lemmas': [u'in', u'the', u'8th', u'century', u',', u'the', u'common', u'germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'have', u'undergo', u'some', u'change', u'and', u'evolve', u'into', u'Old', u'Norse', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'VBD', u'VBN', u'DT', u'NNS', u'CC', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[4851, 4853], [4854, 4857], [4858, 4861], [4862, 4869], [4869, 4870], [4871, 4874], [4875, 4881], [4882, 4890], [4891, 4899], [4900, 4902], [4903, 4914], [4914, 4915], [4916, 4927], [4927, 4928], [4929, 4932], [4933, 4942], [4943, 4947], [4948, 4955], [4956, 4959], [4960, 4967], [4968, 4972], [4973, 4976], [4977, 4982], [4982, 4983]]}) 
answer: set([u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188cd128>.answer
_____________________________ test_yesno[param286] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cd1b8>, (<src.tfidf.TF_IDF object at 0x1175ec3d0>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188cd1b8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42008361220359802, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28815, 28821], [28821, 28822]]}) 
answer: set([u'norse', u'old', u'descendant'])
candidate Sentence: (0.3511199951171875, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[589, 594], [595, 599], [600, 603], [604, 609], [610, 615], [616, 624], [625, 634], [634, 635], [636, 643], [644, 646], [647, 648], [649, 659], [660, 662], [663, 666], [667, 672], [672, 673], [674, 677], [678, 684], [685, 693], [694, 696], [697, 700], [701, 709], [710, 717], [718, 724], [725, 727], [728, 739], [740, 746], [747, 750], [751, 757], [758, 761], [761, 762]]}) 
answer: set([])
candidate Sentence: (0.32522362470626831, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4221, 4225], [4226, 4233], [4234, 4236], [4237, 4242], [4243, 4252], [4253, 4255], [4256, 4258], [4259, 4262], [4263, 4266], [4267, 4274], [4274, 4275], [4276, 4279], [4280, 4285], [4286, 4291], [4292, 4294], [4295, 4302], [4303, 4307], [4308, 4311], [4312, 4316], [4317, 4322], [4323, 4324], [4324, 4330], [4331, 4334], [4335, 4342], [4342, 4343], [4344, 4347], [4348, 4351], [4352, 4356], [4357, 4362], [4363, 4364], [4364, 4370], [4371, 4374], [4375, 4382], [4382, 4383], [4383, 4384]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.22419583797454834, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4984, 4988], [4989, 4997], [4998, 5003], [5004, 5006], [5007, 5014], [5015, 5018], [5019, 5026], [5027, 5031], [5032, 5035], [5036, 5039], [5040, 5046], [5047, 5049], [5050, 5053], [5054, 5056], [5057, 5068], [5068, 5069], [5070, 5075], [5076, 5084], [5085, 5087], [5088, 5091], [5092, 5102], [5103, 5105], [5106, 5109], [5110, 5117], [5118, 5126], [5126, 5127], [5128, 5131], [5132, 5136], [5137, 5142], [5143, 5144], [5144, 5150], [5151, 5154], [5155, 5162], [5162, 5163], [5164, 5167], [5168, 5171], [5172, 5176], [5177, 5182], [5183, 5184], [5184, 5191], [5192, 5195], [5196, 5202], [5202, 5203], [5203, 5204]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.16862308979034424, {u'tokens': [u'In', u'the', u'8th', u'century', u',', u'the', u'common', u'Germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'had', u'undergone', u'some', u'changes', u'and', u'evolved', u'into', u'Old', u'Norse', u'.'], u'lemmas': [u'in', u'the', u'8th', u'century', u',', u'the', u'common', u'germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'have', u'undergo', u'some', u'change', u'and', u'evolve', u'into', u'Old', u'Norse', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'VBD', u'VBN', u'DT', u'NNS', u'CC', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[4851, 4853], [4854, 4857], [4858, 4861], [4862, 4869], [4869, 4870], [4871, 4874], [4875, 4881], [4882, 4890], [4891, 4899], [4900, 4902], [4903, 4914], [4914, 4915], [4916, 4927], [4927, 4928], [4929, 4932], [4933, 4942], [4943, 4947], [4948, 4955], [4956, 4959], [4960, 4967], [4968, 4972], [4973, 4976], [4977, 4982], [4982, 4983]]}) 
answer: set([u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188cd1b8>.answer
_____________________________ test_yesno[param289] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cd368>, (<src.tfidf.TF_IDF object at 0x1175ec7d0>, set(['taipei'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Taipei is in the valleys of the Keelung and Xindian Rivers') == True
E                +  where 'Taipei is in the valleys of the Keelung and Xindian Rivers' = <src.question_processing.Question_parser instance at 0x1188cd368>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.19104708731174469, {u'tokens': [u'Taipei', u'lies', u'in', u'the', u'two', u'relatively', u'narrow', u'valleys', u'of', u'the', u'Keelung', u'-LRB-', u'\u57fa\u9686\u6cb3', u'-RRB-', u'and', u'Xindian', u'-LRB-', u'\u65b0\u5e97\u6eaa', u'-RRB-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'lemmas': [u'Taipei', u'lie', u'in', u'the', u'two', u'relatively', u'narrow', u'valley', u'of', u'the', u'Keelung', u'-lrb-', u'\u57fa\u9686\u6cb3', u'-rrb-', u'and', u'xindian', u'-lrb-', u'\u65b0\u5e97\u6eaa', u'-rrb-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'pos': [u'NNP', u'VBZ', u'IN', u'DT', u'CD', u'RB', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'CC', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NNP', u',', u'WDT', u'VBP', u'TO', u'VB', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[471, 477], [478, 482], [483, 485], [486, 489], [490, 493], [494, 504], [505, 511], [512, 519], [520, 522], [523, 526], [527, 534], [535, 536], [536, 539], [539, 540], [541, 544], [545, 552], [553, 554], [554, 557], [557, 558], [559, 565], [565, 566], [567, 572], [573, 577], [578, 580], [581, 585], [586, 589], [590, 597], [598, 603], [604, 609], [610, 613], [614, 618], [618, 620], [621, 628], [629, 635], [635, 636]]}) 
answer: set([])
candidate Sentence: (0.079398036003112793, {u'tokens': [u'*', u'Te-sheng', u'Wei', u"'s", u'Cape', u'No.', u'7', u'-LRB-', u'drama/comedy', u'-RRB-', u'*', u'Yun', u'Fu', u"'s", u'Take', u'Me', u'From', u'Behind', u'-LRB-', u'music', u'video', u'-RRB-', u'*', u'Jack', u'Yu', u"'s", u'Lollipop', u'Love', u'-LRB-', u'music', u'video', u'-RRB-', u'*', u'Edward', u'Yang', u"'s", u'A', u'Brighter', u'Summer', u'Day', u'-LRB-', u'drama', u'-RRB-', u'*', u'Lee', u'Kang-sheng', u"'s", u'Help', u'Me', u'Eros', u'-LRB-', u'drama', u'-RRB-', u'*', u'Tsai', u'Ming-liang', u"'s", u'Vive', u"L'Amour", u'-LRB-', u'drama', u'-RRB-', u'*', u'Tsai', u'Ming-liang', u"'s", u'What', u'Time', u'Is', u'It', u'There', u'?'], u'lemmas': [u'*', u'te-sheng', u'Wei', u"'s", u'Cape', u'no.', u'7', u'-lrb-', u'drama/comedy', u'-rrb-', u'*', u'Yun', u'Fu', u"'s", u'take', u'I', u'from', u'behind', u'-lrb-', u'music', u'video', u'-rrb-', u'*', u'Jack', u'Yu', u"'s", u'Lollipop', u'Love', u'-lrb-', u'music', u'video', u'-rrb-', u'*', u'Edward', u'Yang', u"'s", u'a', u'brighter', u'summer', u'day', u'-lrb-', u'drama', u'-rrb-', u'*', u'Lee', u'Kang-sheng', u"'s", u'help', u'I', u'Eros', u'-lrb-', u'drama', u'-rrb-', u'*', u'Tsai', u'Ming-liang', u"'s", u'Vive', u"L'Amour", u'-lrb-', u'drama', u'-rrb-', u'*', u'Tsai', u'Ming-liang', u"'s", u'what', u'Time', u'be', u'it', u'there', u'?'], u'pos': [u'SYM', u'NN', u'NNP', u'POS', u'NNP', u'NN', u'CD', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'VB', u'PRP', u'IN', u'IN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'DT', u'JJR', u'NN', u'NN', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NN', u'PRP', u'NNPS', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'WDT', u'NNP', u'VBZ', u'PRP', u'EX', u'.'], u'char_offsets': [[11684, 11685], [11685, 11693], [11694, 11697], [11697, 11699], [11700, 11704], [11705, 11708], [11709, 11710], [11711, 11712], [11712, 11724], [11724, 11725], [11726, 11727], [11727, 11730], [11731, 11733], [11733, 11735], [11736, 11740], [11741, 11743], [11744, 11748], [11749, 11755], [11756, 11757], [11757, 11762], [11763, 11768], [11768, 11769], [11770, 11771], [11771, 11775], [11776, 11778], [11778, 11780], [11781, 11789], [11790, 11794], [11795, 11796], [11796, 11801], [11802, 11807], [11807, 11808], [11809, 11810], [11810, 11816], [11817, 11821], [11821, 11823], [11824, 11825], [11826, 11834], [11835, 11841], [11842, 11845], [11846, 11847], [11847, 11852], [11852, 11853], [11854, 11855], [11855, 11858], [11859, 11869], [11869, 11871], [11872, 11876], [11877, 11879], [11880, 11884], [11885, 11886], [11886, 11891], [11891, 11892], [11893, 11894], [11894, 11898], [11899, 11909], [11909, 11911], [11912, 11916], [11917, 11924], [11925, 11926], [11926, 11931], [11931, 11932], [11933, 11934], [11934, 11938], [11939, 11949], [11949, 11951], [11952, 11956], [11957, 11961], [11962, 11964], [11965, 11967], [11968, 11973], [11973, 11974]]}) 
answer: set([u'valley'])
candidate Sentence: (0.047226514667272568, {u'tokens': [u'Taipei', u'City', u'is', u'located', u'in', u'the', u'Taipei', u'Basin', u'in', u'northern', u'Taiwan', u'.'], u'lemmas': [u'Taipei', u'City', u'be', u'located', u'in', u'the', u'Taipei', u'Basin', u'in', u'northern', u'Taiwan', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[13231, 13237], [13238, 13242], [13243, 13245], [13246, 13253], [13254, 13256], [13257, 13260], [13261, 13267], [13268, 13273], [13274, 13276], [13277, 13285], [13286, 13292], [13292, 13293]]}) 
answer: set([u'valley'])
candidate Sentence: (0.040846370160579681, {u'tokens': [u'The', u'mayor', u'of', u'Taipei', u'City', u'had', u'been', u'an', u'appointed', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'was', u'held', u'in', u'1994', u'.'], u'lemmas': [u'the', u'mayor', u'of', u'Taipei', u'City', u'have', u'be', u'a', u'appoint', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'be', u'hold', u'in', u'1994', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'DT', u'VBN', u'NN', u'IN', u'NNP', u'POS', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[22377, 22380], [22381, 22386], [22387, 22389], [22390, 22396], [22397, 22401], [22402, 22405], [22406, 22410], [22411, 22413], [22414, 22423], [22424, 22432], [22433, 22438], [22439, 22445], [22445, 22447], [22448, 22458], [22459, 22461], [22462, 22463], [22464, 22486], [22487, 22499], [22500, 22502], [22503, 22507], [22508, 22513], [22514, 22517], [22518, 22523], [22524, 22530], [22531, 22539], [22540, 22543], [22544, 22548], [22549, 22551], [22552, 22556], [22556, 22557]]}) 
answer: set([u'valley'])
candidate Sentence: (0.038070954382419586, {u'tokens': [u'It', u'is', u'a', u'public', u'university', u'with', u'campuses', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'lemmas': [u'it', u'be', u'a', u'public', u'university', u'with', u'campus', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[26241, 26243], [26244, 26246], [26247, 26248], [26249, 26255], [26256, 26266], [26267, 26271], [26272, 26280], [26281, 26283], [26284, 26288], [26289, 26295], [26296, 26299], [26300, 26307], [26307, 26308]]}) 
answer: set([u'valley'])

Is Taipei in a valley?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Taipei is in the valleys of the Keelung and Xindian Rivers
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Taipei is in the valleys of the Keelung and Xindian Rivers') == True
 +  where 'Taipei is in the valleys of the Keelung and Xindian Rivers' = <src.question_processing.Question_parser instance at 0x1188cd368>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param308] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cde18>, (<src.tfidf.TF_IDF object at 0x1175ec250>, set(['language', 'turkish', 'turkish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x1188cde18>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37835401296615601, {u'tokens': [u'\u0130ml\xe2', u'Kilavuzu', u'There', u'is', u'no', u'definite', u'article', u'in', u'Turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'is', u'implied', u'when', u'the', u'accusative', u'ending', u'is', u'used', u'-LRB-', u'see', u'below', u'-RRB-', u'.'], u'lemmas': [u'\u0130ml\xe2', u'Kilavuzu', u'there', u'be', u'no', u'definite', u'article', u'in', u'turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'be', u'imply', u'when', u'the', u'accusative', u'ending', u'be', u'use', u'-lrb-', u'see', u'below', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'-LRB-', u'VB', u'IN', u'-RRB-', u'.'], u'char_offsets': [[19960, 19964], [19965, 19973], [19974, 19979], [19980, 19982], [19983, 19985], [19986, 19994], [19995, 20002], [20003, 20005], [20006, 20013], [20013, 20014], [20015, 20018], [20019, 20031], [20032, 20034], [20035, 20038], [20039, 20045], [20046, 20048], [20049, 20056], [20057, 20061], [20062, 20065], [20066, 20076], [20077, 20083], [20084, 20086], [20087, 20091], [20092, 20093], [20093, 20096], [20097, 20102], [20102, 20103], [20103, 20104]]}) 
answer: set([])
candidate Sentence: (0.25493136048316956, {u'tokens': [u'-LSB-', u'is', u'it', u'a', u'-RSB-', u'tree', u'?', u"''"], u'lemmas': [u'-lsb-', u'be', u'it', u'a', u'-rsb-', u'tree', u'?', u"''"], u'pos': [u'-LRB-', u'VBZ', u'PRP', u'DT', u'-RRB-', u'NN', u'.', u"''"], u'char_offsets': [[21439, 21440], [21440, 21442], [21443, 21445], [21446, 21447], [21447, 21448], [21449, 21453], [21453, 21454], [21454, 21455]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.23411878943443298, {u'tokens': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'lemmas': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'pos': [u',', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[21427, 21428], [21429, 21433], [21434, 21436], [21436, 21437], [21438, 21439]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.20974752306938171, {u'tokens': [u'-LSB-', u'going', u'-RSB-', u'to', u'the', u'village', u'?', u"''"], u'lemmas': [u'-lsb-', u'go', u'-rsb-', u'to', u'the', u'village', u'?', u"''"], u'pos': [u'-LRB-', u'VBG', u'-RRB-', u'TO', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[21403, 21404], [21404, 21409], [21409, 21410], [21411, 21413], [21414, 21417], [21418, 21425], [21425, 21426], [21426, 21427]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.13151182234287262, {u'tokens': [u'There', u'are', u'some', u'exceptions', u'to', u'the', u'rules', u'of', u'vowel', u'harmony', u'.'], u'lemmas': [u'there', u'be', u'some', u'exception', u'to', u'the', u'rule', u'of', u'vowel', u'harmony', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'NNS', u'TO', u'DT', u'NNS', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[16197, 16202], [16203, 16206], [16207, 16211], [16212, 16222], [16223, 16225], [16226, 16229], [16230, 16235], [16236, 16238], [16239, 16244], [16245, 16252], [16252, 16253]]}) 
answer: set([u'article', u'definite'])

Is there a definite article in Turkish language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x1188cde18>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param309] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188cdea8>, (<src.tfidf.TF_IDF object at 0x1175ec250>, set(['language', 'turkish', 'turkish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x1188cdea8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37835401296615601, {u'tokens': [u'\u0130ml\xe2', u'Kilavuzu', u'There', u'is', u'no', u'definite', u'article', u'in', u'Turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'is', u'implied', u'when', u'the', u'accusative', u'ending', u'is', u'used', u'-LRB-', u'see', u'below', u'-RRB-', u'.'], u'lemmas': [u'\u0130ml\xe2', u'Kilavuzu', u'there', u'be', u'no', u'definite', u'article', u'in', u'turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'be', u'imply', u'when', u'the', u'accusative', u'ending', u'be', u'use', u'-lrb-', u'see', u'below', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'-LRB-', u'VB', u'IN', u'-RRB-', u'.'], u'char_offsets': [[19960, 19964], [19965, 19973], [19974, 19979], [19980, 19982], [19983, 19985], [19986, 19994], [19995, 20002], [20003, 20005], [20006, 20013], [20013, 20014], [20015, 20018], [20019, 20031], [20032, 20034], [20035, 20038], [20039, 20045], [20046, 20048], [20049, 20056], [20057, 20061], [20062, 20065], [20066, 20076], [20077, 20083], [20084, 20086], [20087, 20091], [20092, 20093], [20093, 20096], [20097, 20102], [20102, 20103], [20103, 20104]]}) 
answer: set([])
candidate Sentence: (0.25493136048316956, {u'tokens': [u'-LSB-', u'is', u'it', u'a', u'-RSB-', u'tree', u'?', u"''"], u'lemmas': [u'-lsb-', u'be', u'it', u'a', u'-rsb-', u'tree', u'?', u"''"], u'pos': [u'-LRB-', u'VBZ', u'PRP', u'DT', u'-RRB-', u'NN', u'.', u"''"], u'char_offsets': [[21439, 21440], [21440, 21442], [21443, 21445], [21446, 21447], [21447, 21448], [21449, 21453], [21453, 21454], [21454, 21455]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.23411878943443298, {u'tokens': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'lemmas': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'pos': [u',', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[21427, 21428], [21429, 21433], [21434, 21436], [21436, 21437], [21438, 21439]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.20974752306938171, {u'tokens': [u'-LSB-', u'going', u'-RSB-', u'to', u'the', u'village', u'?', u"''"], u'lemmas': [u'-lsb-', u'go', u'-rsb-', u'to', u'the', u'village', u'?', u"''"], u'pos': [u'-LRB-', u'VBG', u'-RRB-', u'TO', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[21403, 21404], [21404, 21409], [21409, 21410], [21411, 21413], [21414, 21417], [21418, 21425], [21425, 21426], [21426, 21427]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.13151182234287262, {u'tokens': [u'There', u'are', u'some', u'exceptions', u'to', u'the', u'rules', u'of', u'vowel', u'harmony', u'.'], u'lemmas': [u'there', u'be', u'some', u'exception', u'to', u'the', u'rule', u'of', u'vowel', u'harmony', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'NNS', u'TO', u'DT', u'NNS', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[16197, 16202], [16203, 16206], [16207, 16211], [16212, 16222], [16223, 16225], [16226, 16229], [16230, 16235], [16236, 16238], [16239, 16244], [16245, 16252], [16252, 16253]]}) 
answer: set([u'article', u'definite'])

Is there a definite article in Turkish language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x1188cdea8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param318] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d03f8>, (<src.tfidf.TF_IDF object at 0x1128f7e10>, set(['language', 'vietnamese', 'vietnamese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d03f8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36892408132553101, {u'tokens': [u'While', u'spoken', u'by', u'the', u'Vietnamese', u'people', u'for', u'millennia', u',', u'written', u'Vietnamese', u'did', u'not', u'become', u'the', u'official', u'administrative', u'language', u'of', u'Vietnam', u'until', u'the', u'20th', u'century', u'.'], u'lemmas': [u'while', u'speak', u'by', u'the', u'vietnamese', u'people', u'for', u'millennium', u',', u'write', u'vietnamese', u'do', u'not', u'become', u'the', u'official', u'administrative', u'language', u'of', u'Vietnam', u'until', u'the', u'20th', u'century', u'.'], u'pos': [u'IN', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NNS', u',', u'VBN', u'NNS', u'VBD', u'RB', u'VB', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[3092, 3097], [3098, 3104], [3105, 3107], [3108, 3111], [3112, 3122], [3123, 3129], [3130, 3133], [3134, 3143], [3143, 3144], [3145, 3152], [3153, 3163], [3164, 3167], [3168, 3171], [3172, 3178], [3179, 3182], [3183, 3191], [3192, 3206], [3207, 3215], [3216, 3218], [3219, 3226], [3227, 3232], [3233, 3236], [3237, 3241], [3242, 3249], [3249, 3250]]}) 
answer: set([])
candidate Sentence: (0.29361721873283386, {u'tokens': [u'``', u'What', u"'s", u'so', u'Chinese', u'about', u'Vietnamese', u'?', u"''"], u'lemmas': [u'``', u'what', u'be', u'so', u'chinese', u'about', u'vietnamese', u'?', u"''"], u'pos': [u'``', u'WP', u'VBZ', u'RB', u'JJ', u'IN', u'NNS', u'.', u"''"], u'char_offsets': [[30347, 30348], [30348, 30352], [30352, 30354], [30355, 30357], [30358, 30365], [30366, 30371], [30372, 30382], [30382, 30383], [30383, 30384]]}) 
answer: set([u'official', u'administrative', u'vietnam'])
candidate Sentence: (0.22242213785648346, {u'tokens': [u'It', u'is', u'the', u'language', u'of', u'instruction', u'in', u'schools', u'and', u'universities', u'and', u'is', u'the', u'language', u'for', u'official', u'business', u'.'], u'lemmas': [u'it', u'be', u'the', u'language', u'of', u'instruction', u'in', u'school', u'and', u'university', u'and', u'be', u'the', u'language', u'for', u'official', u'business', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNS', u'CC', u'NNS', u'CC', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[3688, 3690], [3691, 3693], [3694, 3697], [3698, 3706], [3707, 3709], [3710, 3721], [3722, 3724], [3725, 3732], [3733, 3736], [3737, 3749], [3750, 3753], [3754, 3756], [3757, 3760], [3761, 3769], [3770, 3773], [3774, 3782], [3783, 3791], [3791, 3792]]}) 
answer: set([u'vietnam', u'administrative'])
candidate Sentence: (0.21178781986236572, {u'tokens': [u',', u'formerly', u'known', u'under', u'French', u'colonization', u'as', u'Annamese', u'-LRB-', u'see', u'Annam', u'-RRB-', u',', u'is', u'the', u'national', u'and', u'official', u'language', u'of', u'Vietnam', u'.'], u'lemmas': [u',', u'formerly', u'know', u'under', u'french', u'colonization', u'as', u'annamese', u'-lrb-', u'see', u'Annam', u'-rrb-', u',', u'be', u'the', u'national', u'and', u'official', u'language', u'of', u'Vietnam', u'.'], u'pos': [u',', u'RB', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'VB', u'NNP', u'-RRB-', u',', u'VBZ', u'DT', u'JJ', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[305, 306], [307, 315], [316, 321], [322, 327], [328, 334], [335, 347], [348, 350], [351, 359], [360, 361], [361, 364], [365, 370], [370, 371], [371, 372], [373, 375], [376, 379], [380, 388], [389, 392], [393, 401], [402, 410], [411, 413], [414, 421], [421, 422]]}) 
answer: set([u'administrative'])
candidate Sentence: (0.1791614443063736, {u'tokens': [u'It', u'was', u'also', u'used', u'for', u'administrative', u'purposes', u'during', u'the', u'brief', u'Ho', u'and', u'Tay', u'Son', u'Dynasties', u'.'], u'lemmas': [u'it', u'be', u'also', u'use', u'for', u'administrative', u'purpose', u'during', u'the', u'brief', u'Ho', u'and', u'Tay', u'Son', u'Dynasties', u'.'], u'pos': [u'PRP', u'VBD', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'CC', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[3449, 3451], [3452, 3455], [3456, 3460], [3461, 3465], [3466, 3469], [3470, 3484], [3485, 3493], [3494, 3500], [3501, 3504], [3505, 3510], [3511, 3513], [3514, 3517], [3518, 3521], [3522, 3525], [3526, 3535], [3535, 3536]]}) 
answer: set([u'official', u'vietnam'])

Is Vietnamese the official administrative language of Vietnam?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d03f8>.answer
_____________________________ test_yesno[param319] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0488>, (<src.tfidf.TF_IDF object at 0x1128f7e10>, set(['language', 'vietnamese', 'vietnamese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0488>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36892408132553101, {u'tokens': [u'While', u'spoken', u'by', u'the', u'Vietnamese', u'people', u'for', u'millennia', u',', u'written', u'Vietnamese', u'did', u'not', u'become', u'the', u'official', u'administrative', u'language', u'of', u'Vietnam', u'until', u'the', u'20th', u'century', u'.'], u'lemmas': [u'while', u'speak', u'by', u'the', u'vietnamese', u'people', u'for', u'millennium', u',', u'write', u'vietnamese', u'do', u'not', u'become', u'the', u'official', u'administrative', u'language', u'of', u'Vietnam', u'until', u'the', u'20th', u'century', u'.'], u'pos': [u'IN', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NNS', u',', u'VBN', u'NNS', u'VBD', u'RB', u'VB', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[3092, 3097], [3098, 3104], [3105, 3107], [3108, 3111], [3112, 3122], [3123, 3129], [3130, 3133], [3134, 3143], [3143, 3144], [3145, 3152], [3153, 3163], [3164, 3167], [3168, 3171], [3172, 3178], [3179, 3182], [3183, 3191], [3192, 3206], [3207, 3215], [3216, 3218], [3219, 3226], [3227, 3232], [3233, 3236], [3237, 3241], [3242, 3249], [3249, 3250]]}) 
answer: set([])
candidate Sentence: (0.29361721873283386, {u'tokens': [u'``', u'What', u"'s", u'so', u'Chinese', u'about', u'Vietnamese', u'?', u"''"], u'lemmas': [u'``', u'what', u'be', u'so', u'chinese', u'about', u'vietnamese', u'?', u"''"], u'pos': [u'``', u'WP', u'VBZ', u'RB', u'JJ', u'IN', u'NNS', u'.', u"''"], u'char_offsets': [[30347, 30348], [30348, 30352], [30352, 30354], [30355, 30357], [30358, 30365], [30366, 30371], [30372, 30382], [30382, 30383], [30383, 30384]]}) 
answer: set([u'official', u'administrative', u'vietnam'])
candidate Sentence: (0.22242213785648346, {u'tokens': [u'It', u'is', u'the', u'language', u'of', u'instruction', u'in', u'schools', u'and', u'universities', u'and', u'is', u'the', u'language', u'for', u'official', u'business', u'.'], u'lemmas': [u'it', u'be', u'the', u'language', u'of', u'instruction', u'in', u'school', u'and', u'university', u'and', u'be', u'the', u'language', u'for', u'official', u'business', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNS', u'CC', u'NNS', u'CC', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[3688, 3690], [3691, 3693], [3694, 3697], [3698, 3706], [3707, 3709], [3710, 3721], [3722, 3724], [3725, 3732], [3733, 3736], [3737, 3749], [3750, 3753], [3754, 3756], [3757, 3760], [3761, 3769], [3770, 3773], [3774, 3782], [3783, 3791], [3791, 3792]]}) 
answer: set([u'vietnam', u'administrative'])
candidate Sentence: (0.21178781986236572, {u'tokens': [u',', u'formerly', u'known', u'under', u'French', u'colonization', u'as', u'Annamese', u'-LRB-', u'see', u'Annam', u'-RRB-', u',', u'is', u'the', u'national', u'and', u'official', u'language', u'of', u'Vietnam', u'.'], u'lemmas': [u',', u'formerly', u'know', u'under', u'french', u'colonization', u'as', u'annamese', u'-lrb-', u'see', u'Annam', u'-rrb-', u',', u'be', u'the', u'national', u'and', u'official', u'language', u'of', u'Vietnam', u'.'], u'pos': [u',', u'RB', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'VB', u'NNP', u'-RRB-', u',', u'VBZ', u'DT', u'JJ', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[305, 306], [307, 315], [316, 321], [322, 327], [328, 334], [335, 347], [348, 350], [351, 359], [360, 361], [361, 364], [365, 370], [370, 371], [371, 372], [373, 375], [376, 379], [380, 388], [389, 392], [393, 401], [402, 410], [411, 413], [414, 421], [421, 422]]}) 
answer: set([u'administrative'])
candidate Sentence: (0.1791614443063736, {u'tokens': [u'It', u'was', u'also', u'used', u'for', u'administrative', u'purposes', u'during', u'the', u'brief', u'Ho', u'and', u'Tay', u'Son', u'Dynasties', u'.'], u'lemmas': [u'it', u'be', u'also', u'use', u'for', u'administrative', u'purpose', u'during', u'the', u'brief', u'Ho', u'and', u'Tay', u'Son', u'Dynasties', u'.'], u'pos': [u'PRP', u'VBD', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'CC', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[3449, 3451], [3452, 3455], [3456, 3460], [3461, 3465], [3466, 3469], [3470, 3484], [3485, 3493], [3494, 3500], [3501, 3504], [3505, 3510], [3511, 3513], [3514, 3517], [3518, 3521], [3522, 3525], [3526, 3535], [3535, 3536]]}) 
answer: set([u'official', u'vietnam'])

Is Vietnamese the official administrative language of Vietnam?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0488>.answer
_____________________________ test_yesno[param320] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0518>, (<src.tfidf.TF_IDF object at 0x1128f7e10>, set(['language', 'vietnamese', 'vietnamese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
E                +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x1188d0518>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41661214828491211, {u'tokens': [u'``', u'What', u"'s", u'so', u'Chinese', u'about', u'Vietnamese', u'?', u"''"], u'lemmas': [u'``', u'what', u'be', u'so', u'chinese', u'about', u'vietnamese', u'?', u"''"], u'pos': [u'``', u'WP', u'VBZ', u'RB', u'JJ', u'IN', u'NNS', u'.', u"''"], u'char_offsets': [[30347, 30348], [30348, 30352], [30352, 30354], [30355, 30357], [30358, 30365], [30366, 30371], [30372, 30382], [30382, 30383], [30383, 30384]]}) 
answer: set([u'write', u'use', u'formally', u'system', u'writing'])
candidate Sentence: (0.30014523863792419, {u'tokens': [u'Qu\u1ed1c-ng\u1eef', u':', u'The', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'lemmas': [u'qu\u1ed1c-ng\u1eef', u':', u'the', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'pos': [u'NN', u':', u'DT', u'JJ', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[31374, 31382], [31382, 31383], [31384, 31387], [31388, 31394], [31395, 31402], [31403, 31409], [31410, 31412], [31413, 31420], [31420, 31421]]}) 
answer: set([u'write', u'use', u'formally', u'chinese'])
candidate Sentence: (0.27482596039772034, {u'tokens': [u'Much', u'vocabulary', u'has', u'been', u'borrowed', u'from', u'Chinese', u',', u'especially', u'words', u'that', u'denote', u'abstract', u'ideas', u'in', u'the', u'same', u'way', u'European', u'languages', u'borrow', u'from', u'Latin', u'and', u'Greek', u',', u'and', u'it', u'was', u'formerly', u'written', u'using', u'the', u'Chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modified', u'format', u'and', u'was', u'given', u'vernacular', u'pronunciation', u'.'], u'lemmas': [u'much', u'vocabulary', u'have', u'be', u'borrow', u'from', u'chinese', u',', u'especially', u'word', u'that', u'denote', u'abstract', u'idea', u'in', u'the', u'same', u'way', u'european', u'language', u'borrow', u'from', u'Latin', u'and', u'greek', u',', u'and', u'it', u'be', u'formerly', u'write', u'use', u'the', u'chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modify', u'format', u'and', u'be', u'give', u'vernacular', u'pronunciation', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'JJ', u',', u'RB', u'NNS', u'WDT', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'NNS', u'VB', u'IN', u'NNP', u'CC', u'JJ', u',', u'CC', u'PRP', u'VBD', u'RB', u'VBN', u'VBG', u'DT', u'JJ', u'NN', u'NN', u',', u'IN', u'IN', u'DT', u'VBN', u'NN', u'CC', u'VBD', u'VBN', u'JJ', u'NN', u'.'], u'char_offsets': [[852, 856], [857, 867], [868, 871], [872, 876], [877, 885], [886, 890], [891, 898], [898, 899], [900, 910], [911, 916], [917, 921], [922, 928], [929, 937], [938, 943], [944, 946], [947, 950], [951, 955], [956, 959], [960, 968], [969, 978], [979, 985], [986, 990], [991, 996], [997, 1000], [1001, 1006], [1006, 1007], [1008, 1011], [1012, 1014], [1015, 1018], [1019, 1027], [1028, 1035], [1036, 1041], [1042, 1045], [1046, 1053], [1054, 1061], [1062, 1068], [1068, 1069], [1070, 1076], [1077, 1079], [1080, 1081], [1082, 1090], [1091, 1097], [1098, 1101], [1102, 1105], [1106, 1111], [1112, 1122], [1123, 1136], [1136, 1137]]}) 
answer: set([u'formally'])
candidate Sentence: (0.25652617216110229, {u'tokens': [u'Before', u'French', u'rule', u',', u'the', u'first', u'two', u'Vietnamese', u'writing', u'systems', u'were', u'based', u'on', u'Chinese', u'script', u':', u'*', u'the', u'standard', u'Chinese', u'character', u'set', u'called', u'ch\u1eef', u'nho', u'-LRB-', u'scholar', u"'s", u'characters', u',', u'\u5112', u'-RRB-', u':', u'used', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'known', u'as', u'ch\u1eef', u'n\xf4m', u'-LRB-', u'southern/vernacular', u'characters', u',', u'\u5583', u'-RRB-', u'with', u'characters', u'not', u'found', u'in', u'the', u'Chinese', u'character', u'set', u';', u'this', u'system', u'was', u'better', u'adapted', u'to', u'the', u'unique', u'phonetic', u'aspects', u'of', u'Vietnamese', u'which', u'differed', u'from', u'Chinese', u'The', u'authentic', u'Chinese', u'writing', u',', u'ch\u1eef', u'nho', u',', u'was', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch\u1eef', u'n\xf4m', u'was', u'used', u'by', u'members', u'of', u'the', u'educated', u'elite', u'-LRB-', u'one', u'needs', u'to', u'be', u'able', u'to', u'read', u'ch\u1eef', u'nho', u'in', u'order', u'to', u'read', u'ch\u1eef', u'n\xf4m', u'-RRB-', u'.'], u'lemmas': [u'before', u'french', u'rule', u',', u'the', u'first', u'two', u'vietnamese', u'write', u'system', u'be', u'base', u'on', u'chinese', u'script', u':', u'*', u'the', u'standard', u'chinese', u'character', u'set', u'call', u'ch\u1eef', u'nho', u'-lrb-', u'scholar', u"'s", u'character', u',', u'\u5112', u'-rrb-', u':', u'use', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'know', u'as', u'ch\u1eef', u'n\xf4m', u'-lrb-', u'southern/vernacular', u'character', u',', u'\u5583', u'-rrb-', u'with', u'character', u'not', u'find', u'in', u'the', u'chinese', u'character', u'set', u';', u'this', u'system', u'be', u'better', u'adapt', u'to', u'the', u'unique', u'phonetic', u'aspect', u'of', u'vietnamese', u'which', u'differ', u'from', u'chinese', u'the', u'authentic', u'chinese', u'writing', u',', u'ch\u1eef', u'nho', u',', u'be', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch\u1eef', u'n\xf4m', u'be', u'use', u'by', u'member', u'of', u'the', u'educate', u'elite', u'-lrb-', u'one', u'need', u'to', u'be', u'able', u'to', u'read', u'ch\u1eef', u'nho', u'in', u'order', u'to', u'read', u'ch\u1eef', u'n\xf4m', u'-rrb-', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'JJ', u'CD', u'JJ', u'VBG', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u':', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'NN', u'VBN', u'NN', u'NN', u'-LRB-', u'NN', u'POS', u'NNS', u',', u'NN', u'-RRB-', u':', u'VBN', u'TO', u'VB', u'NNP', u'NNP', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'VBN', u'IN', u'NN', u'NN', u'-LRB-', u'JJ', u'NNS', u',', u'NN', u'-RRB-', u'IN', u'NNS', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'DT', u'NN', u'VBD', u'RBR', u'VBN', u'TO', u'DT', u'JJ', u'JJ', u'NNS', u'IN', u'NNS', u'WDT', u'VBD', u'IN', u'JJ', u'DT', u'JJ', u'JJ', u'NN', u',', u'NN', u'NN', u',', u'VBD', u'IN', u'RBR', u'JJ', u'NN', u',', u'IN', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'VBN', u'NN', u'-LRB-', u'CD', u'VBZ', u'TO', u'VB', u'JJ', u'TO', u'VB', u'NN', u'NN', u'IN', u'NN', u'TO', u'VB', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[22130, 22136], [22137, 22143], [22144, 22148], [22148, 22149], [22150, 22153], [22154, 22159], [22160, 22163], [22164, 22174], [22175, 22182], [22183, 22190], [22191, 22195], [22196, 22201], [22202, 22204], [22205, 22212], [22213, 22219], [22219, 22220], [22221, 22222], [22223, 22226], [22227, 22235], [22236, 22243], [22244, 22253], [22254, 22257], [22258, 22264], [22265, 22268], [22269, 22272], [22273, 22274], [22274, 22281], [22281, 22283], [22284, 22294], [22294, 22295], [22299, 22300], [22300, 22301], [22301, 22302], [22303, 22307], [22308, 22310], [22311, 22316], [22317, 22325], [22326, 22333], [22334, 22335], [22336, 22337], [22338, 22349], [22350, 22357], [22358, 22362], [22363, 22368], [22369, 22371], [22372, 22375], [22376, 22379], [22380, 22381], [22381, 22400], [22401, 22411], [22411, 22412], [22416, 22417], [22417, 22418], [22419, 22423], [22424, 22434], [22435, 22438], [22439, 22444], [22445, 22447], [22448, 22451], [22452, 22459], [22460, 22469], [22470, 22473], [22473, 22474], [22475, 22479], [22480, 22486], [22487, 22490], [22491, 22497], [22498, 22505], [22506, 22508], [22509, 22512], [22513, 22519], [22520, 22528], [22529, 22536], [22537, 22539], [22540, 22550], [22551, 22556], [22557, 22565], [22566, 22570], [22571, 22578], [22579, 22582], [22583, 22592], [22593, 22600], [22601, 22608], [22608, 22609], [22610, 22613], [22614, 22617], [22617, 22618], [22619, 22622], [22623, 22625], [22626, 22630], [22631, 22637], [22638, 22643], [22643, 22644], [22645, 22652], [22653, 22656], [22657, 22660], [22661, 22664], [22665, 22669], [22670, 22672], [22673, 22680], [22681, 22683], [22684, 22687], [22688, 22696], [22697, 22702], [22703, 22704], [22704, 22707], [22708, 22713], [22714, 22716], [22717, 22719], [22720, 22724], [22725, 22727], [22728, 22732], [22733, 22736], [22737, 22740], [22741, 22743], [22744, 22749], [22750, 22752], [22753, 22757], [22758, 22761], [22762, 22765], [22765, 22766], [22766, 22767]]}) 
answer: set([u'formally'])
candidate Sentence: (0.24839325249195099, {u'tokens': [u'The', u'Vietnamese', u'writing', u'system', u'in', u'use', u'today', u'is', u'an', u'adapted', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritics', u'for', u'tones', u'and', u'certain', u'letters', u'.'], u'lemmas': [u'the', u'vietnamese', u'writing', u'system', u'in', u'use', u'today', u'be', u'a', u'adapt', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritic', u'for', u'tone', u'and', u'certain', u'letter', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'IN', u'NN', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NNP', u'NN', u',', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1138, 1141], [1142, 1152], [1153, 1160], [1161, 1167], [1168, 1170], [1171, 1174], [1175, 1180], [1181, 1183], [1184, 1186], [1187, 1194], [1195, 1202], [1203, 1205], [1206, 1209], [1210, 1215], [1216, 1224], [1224, 1225], [1226, 1230], [1231, 1241], [1242, 1252], [1253, 1256], [1257, 1262], [1263, 1266], [1267, 1274], [1275, 1282], [1282, 1283]]}) 
answer: set([u'write', u'formally', u'chinese'])

Was Vietnamese formally written using the Chinese writing system?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Vietnamese was *formerly* written using the Chinese writing system.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
 +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x1188d0518>.answer
_____________________________ test_yesno[param322] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0638>, (<src.tfidf.TF_IDF object at 0x114503ed0>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0638>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38687452673912048, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44832, 44833], [44835, 44838], [44839, 44841], [44842, 44845], [44846, 44852], [44853, 44855], [44856, 44860], [44861, 44863], [44864, 44868], [44868, 44869]]}) 
answer: set([u'four', u'string'])
candidate Sentence: (0.25588643550872803, {u'tokens': [u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'the', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 13], [14, 15], [16, 21], [22, 28], [29, 39], [40, 44], [45, 49], [50, 57], [58, 65], [66, 71], [72, 74], [75, 82], [83, 89], [89, 90]]}) 
answer: set([])
candidate Sentence: (0.21030633151531219, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[14945, 14950], [14951, 14955], [14956, 14963], [14964, 14968], [14969, 14973], [14974, 14981], [14981, 14982], [14983, 14988], [14989, 14992], [14993, 14997], [14998, 15009], [15010, 15014], [15015, 15019], [15020, 15027], [15027, 15028], [15032, 15035], [15035, 15036], [15037, 15039], [15040, 15044], [15045, 15050], [15050, 15051]]}) 
answer: set([])
candidate Sentence: (0.1970844566822052, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[39872, 39874], [39875, 39883], [39883, 39884], [39885, 39889], [39890, 39896], [39897, 39904], [39905, 39911], [39912, 39914], [39915, 39918], [39919, 39920], [39921, 39930], [39931, 39935], [39936, 39940], [39941, 39947], [39948, 39950], [39951, 39954], [39955, 39959], [39960, 39967], [39968, 39975], [39976, 39978], [39979, 39983], [39984, 39989], [39990, 39993], [39994, 39996], [39997, 40000], [40001, 40002], [40003, 40009], [40010, 40012], [40013, 40017], [40018, 40027], [40028, 40035], [40036, 40038], [40038, 40039]]}) 
answer: set([])
candidate Sentence: (0.185654416680336, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3275, 3278], [3279, 3285], [3286, 3296], [3297, 3303], [3304, 3306], [3307, 3311], [3312, 3316], [3317, 3324], [3324, 3325], [3326, 3330], [3331, 3334], [3335, 3341], [3342, 3348], [3348, 3349], [3350, 3352], [3353, 3361], [3362, 3364], [3365, 3369], [3370, 3374], [3375, 3386], [3387, 3389], [3390, 3394], [3395, 3397], [3398, 3404], [3405, 3410], [3410, 3411], [3412, 3415], [3416, 3419], [3420, 3424], [3425, 3427], [3428, 3437], [3437, 3438]]}) 
answer: set([])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0638>.answer
_____________________________ test_yesno[param323] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d06c8>, (<src.tfidf.TF_IDF object at 0x114503ed0>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d06c8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38687452673912048, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44832, 44833], [44835, 44838], [44839, 44841], [44842, 44845], [44846, 44852], [44853, 44855], [44856, 44860], [44861, 44863], [44864, 44868], [44868, 44869]]}) 
answer: set([u'four', u'string'])
candidate Sentence: (0.25588643550872803, {u'tokens': [u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'the', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 13], [14, 15], [16, 21], [22, 28], [29, 39], [40, 44], [45, 49], [50, 57], [58, 65], [66, 71], [72, 74], [75, 82], [83, 89], [89, 90]]}) 
answer: set([])
candidate Sentence: (0.21030633151531219, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[14945, 14950], [14951, 14955], [14956, 14963], [14964, 14968], [14969, 14973], [14974, 14981], [14981, 14982], [14983, 14988], [14989, 14992], [14993, 14997], [14998, 15009], [15010, 15014], [15015, 15019], [15020, 15027], [15027, 15028], [15032, 15035], [15035, 15036], [15037, 15039], [15040, 15044], [15045, 15050], [15050, 15051]]}) 
answer: set([])
candidate Sentence: (0.1970844566822052, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[39872, 39874], [39875, 39883], [39883, 39884], [39885, 39889], [39890, 39896], [39897, 39904], [39905, 39911], [39912, 39914], [39915, 39918], [39919, 39920], [39921, 39930], [39931, 39935], [39936, 39940], [39941, 39947], [39948, 39950], [39951, 39954], [39955, 39959], [39960, 39967], [39968, 39975], [39976, 39978], [39979, 39983], [39984, 39989], [39990, 39993], [39994, 39996], [39997, 40000], [40001, 40002], [40003, 40009], [40010, 40012], [40013, 40017], [40018, 40027], [40028, 40035], [40036, 40038], [40038, 40039]]}) 
answer: set([])
candidate Sentence: (0.185654416680336, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3275, 3278], [3279, 3285], [3286, 3296], [3297, 3303], [3304, 3306], [3307, 3311], [3312, 3316], [3317, 3324], [3324, 3325], [3326, 3330], [3331, 3334], [3335, 3341], [3342, 3348], [3348, 3349], [3350, 3352], [3353, 3361], [3362, 3364], [3365, 3369], [3370, 3374], [3375, 3386], [3387, 3389], [3390, 3394], [3395, 3397], [3398, 3404], [3405, 3410], [3410, 3411], [3412, 3415], [3416, 3419], [3420, 3424], [3425, 3427], [3428, 3437], [3437, 3438]]}) 
answer: set([])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d06c8>.answer
_____________________________ test_yesno[param326] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0878>, (<src.tfidf.TF_IDF object at 0x114503ed0>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3285260796546936, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5550, 5551], [5552, 5563], [5564, 5571], [5572, 5574], [5575, 5576], [5577, 5583], [5584, 5588], [5589, 5591], [5592, 5595], [5596, 5597], [5597, 5606], [5606, 5607], [5608, 5613], [5614, 5617], [5618, 5621], [5622, 5629], [5630, 5632], [5633, 5636], [5637, 5640], [5641, 5644], [5645, 5649], [5649, 5650]]}) 
answer: set([u'like'])
candidate Sentence: (0.32379016280174255, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44832, 44833], [44835, 44838], [44839, 44841], [44842, 44845], [44846, 44852], [44853, 44855], [44856, 44860], [44861, 44863], [44864, 44868], [44868, 44869]]}) 
answer: set([u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20850390195846558, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5651, 5654], [5655, 5664], [5665, 5670], [5671, 5680], [5681, 5684], [5685, 5690], [5691, 5696], [5696, 5697], [5698, 5701], [5702, 5707], [5708, 5713], [5713, 5714], [5715, 5718], [5719, 5722], [5723, 5730], [5731, 5738], [5739, 5741], [5742, 5745], [5746, 5747], [5747, 5752], [5752, 5753], [5753, 5754], [5755, 5764], [5765, 5774], [5775, 5778], [5779, 5782], [5783, 5786], [5786, 5787]]}) 
answer: set([u'like'])
candidate Sentence: (0.15763877332210541, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10174, 10177], [10178, 10184], [10185, 10190], [10190, 10191], [10192, 10195], [10196, 10205], [10206, 10208], [10209, 10212], [10213, 10217], [10217, 10218], [10219, 10222], [10223, 10226], [10227, 10235], [10236, 10245], [10246, 10252], [10253, 10256], [10257, 10262], [10263, 10265], [10266, 10267], [10268, 10274], [10274, 10275]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.12673331797122955, {u'tokens': [u'The', u'electric', u'violin', u'has', u'even', u'been', u'used', u'by', u'bands', u'like', u'The', u'Cr\xfcxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'based', u'music', u'.'], u'lemmas': [u'the', u'electric', u'violin', u'have', u'even', u'be', u'use', u'by', u'band', u'like', u'the', u'cr\xfcxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'base', u'music', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NN', u'VBN', u'NN', u'.'], u'char_offsets': [[37837, 37840], [37841, 37849], [37850, 37856], [37857, 37860], [37861, 37865], [37866, 37870], [37871, 37875], [37876, 37878], [37879, 37884], [37885, 37889], [37890, 37893], [37894, 37905], [37906, 37912], [37913, 37916], [37917, 37924], [37925, 37927], [37928, 37936], [37937, 37942], [37943, 37948], [37948, 37949]]}) 
answer: set([u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0878>.answer
_____________________________ test_yesno[param327] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0908>, (<src.tfidf.TF_IDF object at 0x114503ed0>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0908>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3285260796546936, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5550, 5551], [5552, 5563], [5564, 5571], [5572, 5574], [5575, 5576], [5577, 5583], [5584, 5588], [5589, 5591], [5592, 5595], [5596, 5597], [5597, 5606], [5606, 5607], [5608, 5613], [5614, 5617], [5618, 5621], [5622, 5629], [5630, 5632], [5633, 5636], [5637, 5640], [5641, 5644], [5645, 5649], [5649, 5650]]}) 
answer: set([u'like'])
candidate Sentence: (0.32379016280174255, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44832, 44833], [44835, 44838], [44839, 44841], [44842, 44845], [44846, 44852], [44853, 44855], [44856, 44860], [44861, 44863], [44864, 44868], [44868, 44869]]}) 
answer: set([u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20850390195846558, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5651, 5654], [5655, 5664], [5665, 5670], [5671, 5680], [5681, 5684], [5685, 5690], [5691, 5696], [5696, 5697], [5698, 5701], [5702, 5707], [5708, 5713], [5713, 5714], [5715, 5718], [5719, 5722], [5723, 5730], [5731, 5738], [5739, 5741], [5742, 5745], [5746, 5747], [5747, 5752], [5752, 5753], [5753, 5754], [5755, 5764], [5765, 5774], [5775, 5778], [5779, 5782], [5783, 5786], [5786, 5787]]}) 
answer: set([u'like'])
candidate Sentence: (0.15763877332210541, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10174, 10177], [10178, 10184], [10185, 10190], [10190, 10191], [10192, 10195], [10196, 10205], [10206, 10208], [10209, 10212], [10213, 10217], [10217, 10218], [10219, 10222], [10223, 10226], [10227, 10235], [10236, 10245], [10246, 10252], [10253, 10256], [10257, 10262], [10263, 10265], [10266, 10267], [10268, 10274], [10274, 10275]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.12673331797122955, {u'tokens': [u'The', u'electric', u'violin', u'has', u'even', u'been', u'used', u'by', u'bands', u'like', u'The', u'Cr\xfcxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'based', u'music', u'.'], u'lemmas': [u'the', u'electric', u'violin', u'have', u'even', u'be', u'use', u'by', u'band', u'like', u'the', u'cr\xfcxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'base', u'music', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NN', u'VBN', u'NN', u'.'], u'char_offsets': [[37837, 37840], [37841, 37849], [37850, 37856], [37857, 37860], [37861, 37865], [37866, 37870], [37871, 37875], [37876, 37878], [37879, 37884], [37885, 37889], [37890, 37893], [37894, 37905], [37906, 37912], [37913, 37916], [37917, 37924], [37925, 37927], [37928, 37936], [37937, 37942], [37943, 37948], [37948, 37949]]}) 
answer: set([u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0908>.answer
_____________________________ test_yesno[param328] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0998>, (<src.tfidf.TF_IDF object at 0x114503490>, set(['xylophone'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188d0998>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.27319708466529846, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[400, 404], [405, 408], [409, 411], [412, 417], [418, 420], [421, 422], [423, 431], [432, 437], [438, 440], [441, 444], [445, 452], [453, 458], [458, 459]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.25139930844306946, {u'tokens': [u'*', u'Musical', u'Stones', u'of', u'Skiddaw'], u'lemmas': [u'*', u'musical', u'stone', u'of', u'Skiddaw'], u'pos': [u'SYM', u'JJ', u'NNS', u'IN', u'NNP'], u'char_offsets': [[5338, 5339], [5340, 5347], [5348, 5354], [5355, 5357], [5358, 5365]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.17960233986377716, {u'tokens': [u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'the', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u'NN', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u'SYM', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 13], [14, 15], [15, 19], [20, 23], [24, 29], [30, 35], [36, 41], [42, 43], [45, 50], [50, 51], [52, 53], [53, 57], [57, 58], [59, 60], [61, 65], [66, 67], [68, 73], [73, 74], [75, 76], [76, 81], [81, 82], [82, 83], [84, 91], [92, 93], [93, 99], [100, 105], [105, 106], [106, 107], [108, 110], [111, 112], [113, 120], [121, 131], [132, 134], [135, 138], [139, 149], [150, 156], [157, 162], [163, 171], [172, 182], [183, 185], [186, 195], [195, 196]]}) 
answer: set([])
candidate Sentence: (0.17166171967983246, {u'tokens': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'NNP', u'POS', u'``', u'NN', u'CC', u'NN', u'NN', u"''", u',', u'IN', u'NNP', u'POS', u'``', u'NNP', u"''", u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[820, 827], [827, 829], [830, 831], [831, 835], [836, 839], [840, 845], [846, 856], [856, 857], [857, 858], [859, 863], [864, 870], [870, 872], [873, 874], [874, 880], [880, 881], [882, 885], [886, 895], [896, 898], [899, 901], [902, 909], [910, 920], [921, 925], [926, 936], [937, 950], [951, 953], [954, 960], [961, 964], [965, 969], [969, 970]]}) 
answer: set([u'musical'])
candidate Sentence: (0.15197144448757172, {u'tokens': [u'1511', u'--', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'--', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'lemmas': [u'1511', u'--', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'--', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'pos': [u'CD', u':', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u':', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''", u"''"], u'char_offsets': [[3772, 3776], [3777, 3778], [3779, 3784], [3785, 3793], [3794, 3801], [3802, 3804], [3805, 3811], [3812, 3820], [3821, 3827], [3828, 3835], [3835, 3836], [3837, 3841], [3843, 3849], [3850, 3852], [3853, 3863], [3864, 3866], [3867, 3870], [3871, 3880], [3881, 3883], [3884, 3891], [3892, 3903], [3904, 3905], [3905, 3911], [3911, 3912], [3914, 3925], [3925, 3926], [3927, 3929], [3930, 3936], [3937, 3946], [3946, 3947], [3948, 3950], [3951, 3959], [3959, 3960], [3961, 3963], [3964, 3969], [3970, 3976], [3977, 3978], [3979, 3983], [3983, 3984], [3985, 3990], [3991, 3992], [3993, 3994], [3995, 3998], [3999, 4003], [4004, 4013], [4014, 4016], [4017, 4023], [4023, 4024], [4025, 4033], [4034, 4036], [4037, 4040], [4041, 4050], [4050, 4051], [4052, 4053], [4053, 4054], [4055, 4062], [4063, 4066], [4067, 4070], [4071, 4075], [4076, 4085], [4086, 4092], [4093, 4097], [4098, 4104], [4105, 4115], [4116, 4119], [4120, 4121], [4122, 4129], [4130, 4132], [4133, 4139], [4140, 4144], [4144, 4145], [4146, 4152], [4153, 4156], [4157, 4158], [4158, 4167], [4167, 4168], [4168, 4169], [4169, 4170]]}) 
answer: set([])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188d0998>.answer
_____________________________ test_yesno[param329] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0a28>, (<src.tfidf.TF_IDF object at 0x114503490>, set(['xylophone'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0a28>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.27319708466529846, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[400, 404], [405, 408], [409, 411], [412, 417], [418, 420], [421, 422], [423, 431], [432, 437], [438, 440], [441, 444], [445, 452], [453, 458], [458, 459]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.25139930844306946, {u'tokens': [u'*', u'Musical', u'Stones', u'of', u'Skiddaw'], u'lemmas': [u'*', u'musical', u'stone', u'of', u'Skiddaw'], u'pos': [u'SYM', u'JJ', u'NNS', u'IN', u'NNP'], u'char_offsets': [[5338, 5339], [5340, 5347], [5348, 5354], [5355, 5357], [5358, 5365]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.17960233986377716, {u'tokens': [u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'the', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u'NN', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u'SYM', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 13], [14, 15], [15, 19], [20, 23], [24, 29], [30, 35], [36, 41], [42, 43], [45, 50], [50, 51], [52, 53], [53, 57], [57, 58], [59, 60], [61, 65], [66, 67], [68, 73], [73, 74], [75, 76], [76, 81], [81, 82], [82, 83], [84, 91], [92, 93], [93, 99], [100, 105], [105, 106], [106, 107], [108, 110], [111, 112], [113, 120], [121, 131], [132, 134], [135, 138], [139, 149], [150, 156], [157, 162], [163, 171], [172, 182], [183, 185], [186, 195], [195, 196]]}) 
answer: set([])
candidate Sentence: (0.17166171967983246, {u'tokens': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'NNP', u'POS', u'``', u'NN', u'CC', u'NN', u'NN', u"''", u',', u'IN', u'NNP', u'POS', u'``', u'NNP', u"''", u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[820, 827], [827, 829], [830, 831], [831, 835], [836, 839], [840, 845], [846, 856], [856, 857], [857, 858], [859, 863], [864, 870], [870, 872], [873, 874], [874, 880], [880, 881], [882, 885], [886, 895], [896, 898], [899, 901], [902, 909], [910, 920], [921, 925], [926, 936], [937, 950], [951, 953], [954, 960], [961, 964], [965, 969], [969, 970]]}) 
answer: set([u'musical'])
candidate Sentence: (0.15197144448757172, {u'tokens': [u'1511', u'--', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'--', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'lemmas': [u'1511', u'--', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'--', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'pos': [u'CD', u':', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u':', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''", u"''"], u'char_offsets': [[3772, 3776], [3777, 3778], [3779, 3784], [3785, 3793], [3794, 3801], [3802, 3804], [3805, 3811], [3812, 3820], [3821, 3827], [3828, 3835], [3835, 3836], [3837, 3841], [3843, 3849], [3850, 3852], [3853, 3863], [3864, 3866], [3867, 3870], [3871, 3880], [3881, 3883], [3884, 3891], [3892, 3903], [3904, 3905], [3905, 3911], [3911, 3912], [3914, 3925], [3925, 3926], [3927, 3929], [3930, 3936], [3937, 3946], [3946, 3947], [3948, 3950], [3951, 3959], [3959, 3960], [3961, 3963], [3964, 3969], [3970, 3976], [3977, 3978], [3979, 3983], [3983, 3984], [3985, 3990], [3991, 3992], [3993, 3994], [3995, 3998], [3999, 4003], [4004, 4013], [4014, 4016], [4017, 4023], [4023, 4024], [4025, 4033], [4034, 4036], [4037, 4040], [4041, 4050], [4050, 4051], [4052, 4053], [4053, 4054], [4055, 4062], [4063, 4066], [4067, 4070], [4071, 4075], [4076, 4085], [4086, 4092], [4093, 4097], [4098, 4104], [4105, 4115], [4116, 4119], [4120, 4121], [4122, 4129], [4130, 4132], [4133, 4139], [4140, 4144], [4144, 4145], [4146, 4152], [4153, 4156], [4157, 4158], [4158, 4167], [4167, 4168], [4168, 4169], [4169, 4170]]}) 
answer: set([])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'Yes', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x1188d0a28>.answer
_____________________________ test_yesno[param338] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0f38>, (<src.tfidf.TF_IDF object at 0x1128f7550>, set(['zebra'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188d0f38>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31900358200073242, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4534, 4536], [4537, 4546], [4546, 4547], [4548, 4554], [4555, 4561], [4562, 4566], [4567, 4571], [4572, 4579], [4580, 4584], [4585, 4593], [4594, 4600], [4600, 4601]]}) 
answer: set([u'plain'])
candidate Sentence: (0.24329592287540436, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8331, 8339], [8340, 8346], [8347, 8350], [8351, 8357], [8358, 8364], [8365, 8369], [8370, 8372], [8373, 8379], [8379, 8380], [8381, 8386], [8387, 8389], [8390, 8391], [8391, 8397], [8397, 8398], [8398, 8399], [8400, 8410], [8411, 8413], [8414, 8417], [8418, 8426], [8427, 8431], [8432, 8434], [8435, 8437], [8438, 8441], [8442, 8447], [8448, 8451], [8452, 8457], [8458, 8463], [8463, 8464]]}) 
answer: set([u'cross'])
candidate Sentence: (0.20122319459915161, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[12351, 12354], [12355, 12359], [12360, 12368], [12369, 12374], [12375, 12378], [12379, 12385], [12386, 12388], [12389, 12393], [12394, 12404], [12405, 12409], [12410, 12414], [12415, 12419], [12420, 12423], [12424, 12435], [12436, 12438], [12439, 12442], [12443, 12448], [12448, 12449]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.18909837305545807, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5449, 5452], [5453, 5454], [5454, 5459], [5460, 5468], [5468, 5469], [5470, 5472], [5473, 5478], [5479, 5484], [5485, 5488], [5489, 5494], [5494, 5496], [5497, 5502], [5503, 5506], [5507, 5512], [5513, 5520], [5520, 5521]]}) 
answer: set([u'mountain', u'plain'])
candidate Sentence: (0.13734087347984314, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1023, 1027], [1028, 1031], [1032, 1034], [1035, 1040], [1041, 1043], [1044, 1045], [1046, 1053], [1054, 1056], [1057, 1065], [1065, 1066], [1067, 1071], [1072, 1074], [1075, 1085], [1085, 1086], [1087, 1095], [1095, 1096], [1097, 1106], [1106, 1107], [1108, 1114], [1115, 1125], [1125, 1126], [1127, 1136], [1137, 1140], [1141, 1148], [1149, 1154], [1154, 1155]]}) 
answer: set([u'plain', u'cross'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x1188d0f38>.answer
_____________________________ test_yesno[param339] _____________________________

param = (<src.question_processing.Question_parser instance at 0x1188d0fc8>, (<src.tfidf.TF_IDF object at 0x1128f7550>, set(['zebra'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0fc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31900358200073242, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4534, 4536], [4537, 4546], [4546, 4547], [4548, 4554], [4555, 4561], [4562, 4566], [4567, 4571], [4572, 4579], [4580, 4584], [4585, 4593], [4594, 4600], [4600, 4601]]}) 
answer: set([u'plain'])
candidate Sentence: (0.24329592287540436, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8331, 8339], [8340, 8346], [8347, 8350], [8351, 8357], [8358, 8364], [8365, 8369], [8370, 8372], [8373, 8379], [8379, 8380], [8381, 8386], [8387, 8389], [8390, 8391], [8391, 8397], [8397, 8398], [8398, 8399], [8400, 8410], [8411, 8413], [8414, 8417], [8418, 8426], [8427, 8431], [8432, 8434], [8435, 8437], [8438, 8441], [8442, 8447], [8448, 8451], [8452, 8457], [8458, 8463], [8463, 8464]]}) 
answer: set([u'cross'])
candidate Sentence: (0.20122319459915161, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[12351, 12354], [12355, 12359], [12360, 12368], [12369, 12374], [12375, 12378], [12379, 12385], [12386, 12388], [12389, 12393], [12394, 12404], [12405, 12409], [12410, 12414], [12415, 12419], [12420, 12423], [12424, 12435], [12436, 12438], [12439, 12442], [12443, 12448], [12448, 12449]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.18909837305545807, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5449, 5452], [5453, 5454], [5454, 5459], [5460, 5468], [5468, 5469], [5470, 5472], [5473, 5478], [5479, 5484], [5485, 5488], [5489, 5494], [5494, 5496], [5497, 5502], [5503, 5506], [5507, 5512], [5513, 5520], [5520, 5521]]}) 
answer: set([u'mountain', u'plain'])
candidate Sentence: (0.13734087347984314, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1023, 1027], [1028, 1031], [1032, 1034], [1035, 1040], [1041, 1043], [1044, 1045], [1046, 1053], [1054, 1056], [1057, 1065], [1065, 1066], [1067, 1071], [1072, 1074], [1075, 1085], [1085, 1086], [1087, 1095], [1095, 1096], [1097, 1106], [1106, 1107], [1108, 1114], [1115, 1125], [1125, 1126], [1127, 1136], [1137, 1140], [1141, 1148], [1149, 1154], [1154, 1155]]}) 
answer: set([u'plain', u'cross'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x1188d0fc8>.answer
=============== 89 failed, 251 passed, 1 error in 45.97 seconds ================
