============================= test session starts ==============================
platform darwin -- Python 2.7.8, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
rootdir: /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests, inifile: 
collected 386 items

test_compute.py ..FF....FFFF.......FFFF....F......FFFFF..F...FF.......F...F.....F..FFFF..........F............F..................FF....FF....F......................F.F................FF.....FF..FF.................FF....FF.....FF..........FF....FFFF............FF..FFFF..FF..FF...........FFF.FFFF..FF........FF...........F.......F..FF...FF..FF...F.FFFFF................F.F....FFFF........FF....FF.FF..FE

==================================== ERRORS ====================================
________________________ ERROR at setup of test_factoid ________________________
file /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py, line 45
  def test_factoid(param_factoid):
        fixture 'param_factoid' not found
        available fixtures: tmpdir_factory, pytestconfig, cache, recwarn, monkeypatch, record_xml_property, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py:45
=================================== FAILURES ===================================
______________________________ test_yesno[param2] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa7e440>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa7e440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23336312174797058, {u'tokens': [u'Also', u'included', u'was', u'the', u'creation', u'of', u'the', u'system', u'of', u'national', u'banks', u'by', u'the', u'National', u'Banking', u'Acts', u'of', u'1863', u',', u'1864', u',', u'and', u'1865', u',', u'which', u'allowed', u'the', u'creation', u'of', u'a', u'strong', u'national', u'financial', u'system', u'.'], u'lemmas': [u'also', u'include', u'be', u'the', u'creation', u'of', u'the', u'system', u'of', u'national', u'bank', u'by', u'the', u'National', u'Banking', u'Acts', u'of', u'1863', u',', u'1864', u',', u'and', u'1865', u',', u'which', u'allow', u'the', u'creation', u'of', u'a', u'strong', u'national', u'financial', u'system', u'.'], u'pos': [u'RB', u'VBN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'IN', u'CD', u',', u'CD', u',', u'CC', u'CD', u',', u'WDT', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[46969, 46973], [46974, 46982], [46983, 46986], [46987, 46990], [46991, 46999], [47000, 47002], [47003, 47006], [47007, 47013], [47014, 47016], [47017, 47025], [47026, 47031], [47032, 47034], [47035, 47038], [47039, 47047], [47048, 47055], [47056, 47060], [47061, 47063], [47064, 47068], [47068, 47069], [47070, 47074], [47074, 47075], [47076, 47079], [47080, 47084], [47084, 47085], [47086, 47091], [47092, 47099], [47100, 47103], [47104, 47112], [47113, 47115], [47116, 47117], [47118, 47124], [47125, 47133], [47134, 47143], [47144, 47150], [47150, 47151]]}) 
answer: set([u'act', u'sign'])
candidate Sentence: (0.17599977552890778, {u'tokens': [u'While', u'it', u'did', u'not', u'abolish', u'the', u'legal', u'institution', u'of', u'slavery', u'-LRB-', u'the', u'Thirteenth', u'Amendment', u'did', u'that', u'-RRB-', u',', u'the', u'Act', u'showed', u'that', u'Lincoln', u'had', u'the', u'support', u'of', u'Congress', u'in', u'liberating', u'slaves', u'owned', u'by', u'rebels', u'.'], u'lemmas': [u'while', u'it', u'do', u'not', u'abolish', u'the', u'legal', u'institution', u'of', u'slavery', u'-lrb-', u'the', u'Thirteenth', u'Amendment', u'do', u'that', u'-rrb-', u',', u'the', u'Act', u'show', u'that', u'Lincoln', u'have', u'the', u'support', u'of', u'Congress', u'in', u'liberating', u'slave', u'own', u'by', u'rebel', u'.'], u'pos': [u'IN', u'PRP', u'VBD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'-RRB-', u',', u'DT', u'NNP', u'VBD', u'IN', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'IN', u'JJ', u'NNS', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[30180, 30185], [30186, 30188], [30189, 30192], [30193, 30196], [30197, 30204], [30205, 30208], [30209, 30214], [30215, 30226], [30227, 30229], [30230, 30237], [30238, 30239], [30239, 30242], [30243, 30253], [30254, 30263], [30264, 30267], [30268, 30272], [30272, 30273], [30273, 30274], [30275, 30278], [30279, 30282], [30283, 30289], [30290, 30294], [30295, 30302], [30303, 30306], [30307, 30310], [30311, 30318], [30319, 30321], [30322, 30330], [30331, 30333], [30334, 30344], [30345, 30351], [30352, 30357], [30358, 30360], [30361, 30367], [30367, 30368]]}) 
answer: set([u'banking', u'national', u'1863', u'sign'])
candidate Sentence: (0.17345240712165833, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'banking', u'national', u'sign', u'1863', u'act'])
candidate Sentence: (0.15590193867683411, {u'tokens': [u'Lincoln', u'later', u'said', u':', u'``', u'I', u'never', u',', u'in', u'my', u'life', u',', u'felt', u'more', u'certain', u'that', u'I', u'was', u'doing', u'right', u',', u'than', u'I', u'do', u'in', u'signing', u'this', u'paper', u'.', u"''"], u'lemmas': [u'Lincoln', u'later', u'say', u':', u'``', u'I', u'never', u',', u'in', u'my', u'life', u',', u'feel', u'more', u'certain', u'that', u'I', u'be', u'do', u'right', u',', u'than', u'I', u'do', u'in', u'sign', u'this', u'paper', u'.', u"''"], u'pos': [u'NNP', u'RB', u'VBD', u':', u'``', u'PRP', u'RB', u',', u'IN', u'PRP$', u'NN', u',', u'VBD', u'RBR', u'JJ', u'IN', u'PRP', u'VBD', u'VBG', u'RB', u',', u'IN', u'PRP', u'VBP', u'IN', u'VBG', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[31165, 31172], [31173, 31178], [31179, 31183], [31183, 31184], [31185, 31186], [31186, 31187], [31188, 31193], [31193, 31194], [31195, 31197], [31198, 31200], [31201, 31205], [31205, 31206], [31207, 31211], [31212, 31216], [31217, 31224], [31225, 31229], [31230, 31231], [31232, 31235], [31236, 31241], [31242, 31247], [31247, 31248], [31249, 31253], [31254, 31255], [31256, 31258], [31259, 31261], [31262, 31269], [31270, 31274], [31275, 31280], [31280, 31281], [31281, 31282]]}) 
answer: set([u'banking', u'national', u'1863', u'act'])
candidate Sentence: (0.15516020357608795, {u'tokens': [u'The', u'Morrill', u'Land-Grant', u'Colleges', u'Act', u',', u'also', u'signed', u'in', u'1862', u',', u'provided', u'government', u'grants', u'for', u'agricultural', u'universities', u'in', u'each', u'state', u'.'], u'lemmas': [u'the', u'Morrill', u'Land-Grant', u'Colleges', u'Act', u',', u'also', u'sign', u'in', u'1862', u',', u'provide', u'government', u'grant', u'for', u'agricultural', u'university', u'in', u'each', u'state', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'RB', u'VBN', u'IN', u'CD', u',', u'VBN', u'NN', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[46562, 46565], [46566, 46573], [46574, 46584], [46585, 46593], [46594, 46597], [46597, 46598], [46599, 46603], [46604, 46610], [46611, 46613], [46614, 46618], [46618, 46619], [46620, 46628], [46629, 46639], [46640, 46646], [46647, 46650], [46651, 46663], [46664, 46676], [46677, 46679], [46680, 46684], [46685, 46690], [46690, 46691]]}) 
answer: set([u'banking', u'national', u'1863'])
candidate Sentence: (0.14499977231025696, {u'tokens': [u'Thus', u',', u'he', u'signed', u'the', u'Homestead', u'Act', u'in', u'1862', u',', u'making', u'millions', u'of', u'acres', u'of', u'government-held', u'land', u'in', u'the', u'West', u'available', u'for', u'purchase', u'at', u'very', u'low', u'cost', u'.'], u'lemmas': [u'thus', u',', u'he', u'sign', u'the', u'Homestead', u'Act', u'in', u'1862', u',', u'make', u'million', u'of', u'acre', u'of', u'government-held', u'land', u'in', u'the', u'West', u'available', u'for', u'purchase', u'at', u'very', u'low', u'cost', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'VBG', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'JJ', u'IN', u'NN', u'IN', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[46417, 46421], [46421, 46422], [46423, 46425], [46426, 46432], [46433, 46436], [46437, 46446], [46447, 46450], [46451, 46453], [46454, 46458], [46458, 46459], [46460, 46466], [46467, 46475], [46476, 46478], [46479, 46484], [46485, 46487], [46488, 46503], [46504, 46508], [46509, 46511], [46512, 46515], [46516, 46520], [46521, 46530], [46531, 46534], [46535, 46543], [46544, 46546], [46547, 46551], [46552, 46555], [46556, 46560], [46560, 46561]]}) 
answer: set([u'banking', u'national', u'1863'])
candidate Sentence: (0.13268907368183136, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'banking', u'national', u'sign', u'1863', u'act'])
candidate Sentence: (0.12888777256011963, {u'tokens': [u'His', u'Amnesty', u'Proclamation', u'of', u'December', u'8', u',', u'1863', u',', u'offered', u'pardons', u'to', u'those', u'who', u'had', u'not', u'held', u'a', u'Confederate', u'civil', u'office', u',', u'had', u'not', u'mistreated', u'Union', u'prisoners', u',', u'and', u'would', u'sign', u'an', u'oath', u'of', u'allegiance', u'.'], u'lemmas': [u'he', u'Amnesty', u'Proclamation', u'of', u'December', u'8', u',', u'1863', u',', u'offer', u'pardon', u'to', u'those', u'who', u'have', u'not', u'hold', u'a', u'confederate', u'civil', u'office', u',', u'have', u'not', u'mistreat', u'Union', u'prisoner', u',', u'and', u'would', u'sign', u'a', u'oath', u'of', u'allegiance', u'.'], u'pos': [u'PRP$', u'NNP', u'NNP', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'VBD', u'NNS', u'TO', u'DT', u'WP', u'VBD', u'RB', u'VBN', u'DT', u'JJ', u'JJ', u'NN', u',', u'VBD', u'RB', u'VBN', u'NNP', u'NNS', u',', u'CC', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[40791, 40794], [40795, 40802], [40803, 40815], [40816, 40818], [40819, 40827], [40828, 40829], [40829, 40830], [40831, 40835], [40835, 40836], [40837, 40844], [40845, 40852], [40853, 40855], [40856, 40861], [40862, 40865], [40866, 40869], [40870, 40873], [40874, 40878], [40879, 40880], [40881, 40892], [40893, 40898], [40899, 40905], [40905, 40906], [40907, 40910], [40911, 40914], [40915, 40925], [40926, 40931], [40932, 40941], [40941, 40942], [40943, 40946], [40947, 40952], [40953, 40957], [40958, 40960], [40961, 40965], [40966, 40968], [40969, 40979], [40979, 40980]]}) 
answer: set([u'banking', u'national', u'act'])
candidate Sentence: (0.12613746523857117, {u'tokens': [u'The', u'Collapse', u'of', u'the', u'Confederacy', u'-LRB-', u'2001', u'-RRB-', u'p', u'80', u'Lincoln', u'did', u'not', u'show', u'the', u'pledge', u'to', u'his', u'cabinet', u',', u'but', u'asked', u'them', u'to', u'sign', u'the', u'sealed', u'envelope', u'.'], u'lemmas': [u'the', u'Collapse', u'of', u'the', u'Confederacy', u'-lrb-', u'2001', u'-rrb-', u'p', u'80', u'Lincoln', u'do', u'not', u'show', u'the', u'pledge', u'to', u'he', u'cabinet', u',', u'but', u'ask', u'they', u'to', u'sign', u'the', u'seal', u'envelope', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'DT', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNP', u'VBD', u'RB', u'VB', u'DT', u'NN', u'TO', u'PRP$', u'NN', u',', u'CC', u'VBD', u'PRP', u'TO', u'VB', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[33661, 33664], [33665, 33673], [33674, 33676], [33677, 33680], [33681, 33692], [33693, 33694], [33694, 33698], [33698, 33699], [33700, 33701], [33702, 33704], [33705, 33712], [33713, 33716], [33717, 33720], [33721, 33725], [33726, 33729], [33730, 33736], [33737, 33739], [33740, 33743], [33744, 33751], [33751, 33752], [33753, 33756], [33757, 33762], [33763, 33767], [33768, 33770], [33771, 33775], [33776, 33779], [33780, 33786], [33787, 33795], [33795, 33796]]}) 
answer: set([u'banking', u'national', u'1863', u'act'])
candidate Sentence: (0.11788249015808105, {u'tokens': [u'The', u'Abraham', u'Lincoln', u'National', u'Cemetery', u'is', u'located', u'in', u'Elwood', u',', u'Illinois', u'.'], u'lemmas': [u'the', u'Abraham', u'Lincoln', u'National', u'Cemetery', u'be', u'located', u'in', u'Elwood', u',', u'Illinois', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'JJ', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[59971, 59974], [59975, 59982], [59983, 59990], [59991, 59999], [60000, 60008], [60009, 60011], [60012, 60019], [60020, 60022], [60023, 60029], [60029, 60030], [60031, 60039], [60039, 60040]]}) 
answer: set([u'banking', u'1863', u'sign', u'act'])

Did Lincoln sign the National Banking Act of 1863?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 5 documents, 310 characters, 54 tokens, 62.0 char/doc, 10.8 tok/doc RATES: 2.899 doc/sec, 31.3 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 6 documents, 360 characters, 64 tokens, 60.0 char/doc, 10.7 tok/doc RATES: 3.313 doc/sec, 35.3 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa7e440>.answer
______________________________ test_yesno[param3] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa7e830>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa7e830>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23336312174797058, {u'tokens': [u'Also', u'included', u'was', u'the', u'creation', u'of', u'the', u'system', u'of', u'national', u'banks', u'by', u'the', u'National', u'Banking', u'Acts', u'of', u'1863', u',', u'1864', u',', u'and', u'1865', u',', u'which', u'allowed', u'the', u'creation', u'of', u'a', u'strong', u'national', u'financial', u'system', u'.'], u'lemmas': [u'also', u'include', u'be', u'the', u'creation', u'of', u'the', u'system', u'of', u'national', u'bank', u'by', u'the', u'National', u'Banking', u'Acts', u'of', u'1863', u',', u'1864', u',', u'and', u'1865', u',', u'which', u'allow', u'the', u'creation', u'of', u'a', u'strong', u'national', u'financial', u'system', u'.'], u'pos': [u'RB', u'VBN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'IN', u'CD', u',', u'CD', u',', u'CC', u'CD', u',', u'WDT', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[46969, 46973], [46974, 46982], [46983, 46986], [46987, 46990], [46991, 46999], [47000, 47002], [47003, 47006], [47007, 47013], [47014, 47016], [47017, 47025], [47026, 47031], [47032, 47034], [47035, 47038], [47039, 47047], [47048, 47055], [47056, 47060], [47061, 47063], [47064, 47068], [47068, 47069], [47070, 47074], [47074, 47075], [47076, 47079], [47080, 47084], [47084, 47085], [47086, 47091], [47092, 47099], [47100, 47103], [47104, 47112], [47113, 47115], [47116, 47117], [47118, 47124], [47125, 47133], [47134, 47143], [47144, 47150], [47150, 47151]]}) 
answer: set([u'act', u'sign'])
candidate Sentence: (0.17599977552890778, {u'tokens': [u'While', u'it', u'did', u'not', u'abolish', u'the', u'legal', u'institution', u'of', u'slavery', u'-LRB-', u'the', u'Thirteenth', u'Amendment', u'did', u'that', u'-RRB-', u',', u'the', u'Act', u'showed', u'that', u'Lincoln', u'had', u'the', u'support', u'of', u'Congress', u'in', u'liberating', u'slaves', u'owned', u'by', u'rebels', u'.'], u'lemmas': [u'while', u'it', u'do', u'not', u'abolish', u'the', u'legal', u'institution', u'of', u'slavery', u'-lrb-', u'the', u'Thirteenth', u'Amendment', u'do', u'that', u'-rrb-', u',', u'the', u'Act', u'show', u'that', u'Lincoln', u'have', u'the', u'support', u'of', u'Congress', u'in', u'liberating', u'slave', u'own', u'by', u'rebel', u'.'], u'pos': [u'IN', u'PRP', u'VBD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'-RRB-', u',', u'DT', u'NNP', u'VBD', u'IN', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'IN', u'JJ', u'NNS', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[30180, 30185], [30186, 30188], [30189, 30192], [30193, 30196], [30197, 30204], [30205, 30208], [30209, 30214], [30215, 30226], [30227, 30229], [30230, 30237], [30238, 30239], [30239, 30242], [30243, 30253], [30254, 30263], [30264, 30267], [30268, 30272], [30272, 30273], [30273, 30274], [30275, 30278], [30279, 30282], [30283, 30289], [30290, 30294], [30295, 30302], [30303, 30306], [30307, 30310], [30311, 30318], [30319, 30321], [30322, 30330], [30331, 30333], [30334, 30344], [30345, 30351], [30352, 30357], [30358, 30360], [30361, 30367], [30367, 30368]]}) 
answer: set([u'banking', u'national', u'1863', u'sign'])
candidate Sentence: (0.17345240712165833, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'banking', u'national', u'sign', u'1863', u'act'])
candidate Sentence: (0.15590193867683411, {u'tokens': [u'Lincoln', u'later', u'said', u':', u'``', u'I', u'never', u',', u'in', u'my', u'life', u',', u'felt', u'more', u'certain', u'that', u'I', u'was', u'doing', u'right', u',', u'than', u'I', u'do', u'in', u'signing', u'this', u'paper', u'.', u"''"], u'lemmas': [u'Lincoln', u'later', u'say', u':', u'``', u'I', u'never', u',', u'in', u'my', u'life', u',', u'feel', u'more', u'certain', u'that', u'I', u'be', u'do', u'right', u',', u'than', u'I', u'do', u'in', u'sign', u'this', u'paper', u'.', u"''"], u'pos': [u'NNP', u'RB', u'VBD', u':', u'``', u'PRP', u'RB', u',', u'IN', u'PRP$', u'NN', u',', u'VBD', u'RBR', u'JJ', u'IN', u'PRP', u'VBD', u'VBG', u'RB', u',', u'IN', u'PRP', u'VBP', u'IN', u'VBG', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[31165, 31172], [31173, 31178], [31179, 31183], [31183, 31184], [31185, 31186], [31186, 31187], [31188, 31193], [31193, 31194], [31195, 31197], [31198, 31200], [31201, 31205], [31205, 31206], [31207, 31211], [31212, 31216], [31217, 31224], [31225, 31229], [31230, 31231], [31232, 31235], [31236, 31241], [31242, 31247], [31247, 31248], [31249, 31253], [31254, 31255], [31256, 31258], [31259, 31261], [31262, 31269], [31270, 31274], [31275, 31280], [31280, 31281], [31281, 31282]]}) 
answer: set([u'banking', u'national', u'1863', u'act'])
candidate Sentence: (0.15516020357608795, {u'tokens': [u'The', u'Morrill', u'Land-Grant', u'Colleges', u'Act', u',', u'also', u'signed', u'in', u'1862', u',', u'provided', u'government', u'grants', u'for', u'agricultural', u'universities', u'in', u'each', u'state', u'.'], u'lemmas': [u'the', u'Morrill', u'Land-Grant', u'Colleges', u'Act', u',', u'also', u'sign', u'in', u'1862', u',', u'provide', u'government', u'grant', u'for', u'agricultural', u'university', u'in', u'each', u'state', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'RB', u'VBN', u'IN', u'CD', u',', u'VBN', u'NN', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[46562, 46565], [46566, 46573], [46574, 46584], [46585, 46593], [46594, 46597], [46597, 46598], [46599, 46603], [46604, 46610], [46611, 46613], [46614, 46618], [46618, 46619], [46620, 46628], [46629, 46639], [46640, 46646], [46647, 46650], [46651, 46663], [46664, 46676], [46677, 46679], [46680, 46684], [46685, 46690], [46690, 46691]]}) 
answer: set([u'banking', u'national', u'1863'])
candidate Sentence: (0.14499977231025696, {u'tokens': [u'Thus', u',', u'he', u'signed', u'the', u'Homestead', u'Act', u'in', u'1862', u',', u'making', u'millions', u'of', u'acres', u'of', u'government-held', u'land', u'in', u'the', u'West', u'available', u'for', u'purchase', u'at', u'very', u'low', u'cost', u'.'], u'lemmas': [u'thus', u',', u'he', u'sign', u'the', u'Homestead', u'Act', u'in', u'1862', u',', u'make', u'million', u'of', u'acre', u'of', u'government-held', u'land', u'in', u'the', u'West', u'available', u'for', u'purchase', u'at', u'very', u'low', u'cost', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'VBG', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'JJ', u'IN', u'NN', u'IN', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[46417, 46421], [46421, 46422], [46423, 46425], [46426, 46432], [46433, 46436], [46437, 46446], [46447, 46450], [46451, 46453], [46454, 46458], [46458, 46459], [46460, 46466], [46467, 46475], [46476, 46478], [46479, 46484], [46485, 46487], [46488, 46503], [46504, 46508], [46509, 46511], [46512, 46515], [46516, 46520], [46521, 46530], [46531, 46534], [46535, 46543], [46544, 46546], [46547, 46551], [46552, 46555], [46556, 46560], [46560, 46561]]}) 
answer: set([u'banking', u'national', u'1863'])
candidate Sentence: (0.13268907368183136, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'banking', u'national', u'sign', u'1863', u'act'])
candidate Sentence: (0.12888777256011963, {u'tokens': [u'His', u'Amnesty', u'Proclamation', u'of', u'December', u'8', u',', u'1863', u',', u'offered', u'pardons', u'to', u'those', u'who', u'had', u'not', u'held', u'a', u'Confederate', u'civil', u'office', u',', u'had', u'not', u'mistreated', u'Union', u'prisoners', u',', u'and', u'would', u'sign', u'an', u'oath', u'of', u'allegiance', u'.'], u'lemmas': [u'he', u'Amnesty', u'Proclamation', u'of', u'December', u'8', u',', u'1863', u',', u'offer', u'pardon', u'to', u'those', u'who', u'have', u'not', u'hold', u'a', u'confederate', u'civil', u'office', u',', u'have', u'not', u'mistreat', u'Union', u'prisoner', u',', u'and', u'would', u'sign', u'a', u'oath', u'of', u'allegiance', u'.'], u'pos': [u'PRP$', u'NNP', u'NNP', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'VBD', u'NNS', u'TO', u'DT', u'WP', u'VBD', u'RB', u'VBN', u'DT', u'JJ', u'JJ', u'NN', u',', u'VBD', u'RB', u'VBN', u'NNP', u'NNS', u',', u'CC', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[40791, 40794], [40795, 40802], [40803, 40815], [40816, 40818], [40819, 40827], [40828, 40829], [40829, 40830], [40831, 40835], [40835, 40836], [40837, 40844], [40845, 40852], [40853, 40855], [40856, 40861], [40862, 40865], [40866, 40869], [40870, 40873], [40874, 40878], [40879, 40880], [40881, 40892], [40893, 40898], [40899, 40905], [40905, 40906], [40907, 40910], [40911, 40914], [40915, 40925], [40926, 40931], [40932, 40941], [40941, 40942], [40943, 40946], [40947, 40952], [40953, 40957], [40958, 40960], [40961, 40965], [40966, 40968], [40969, 40979], [40979, 40980]]}) 
answer: set([u'banking', u'national', u'act'])
candidate Sentence: (0.12613746523857117, {u'tokens': [u'The', u'Collapse', u'of', u'the', u'Confederacy', u'-LRB-', u'2001', u'-RRB-', u'p', u'80', u'Lincoln', u'did', u'not', u'show', u'the', u'pledge', u'to', u'his', u'cabinet', u',', u'but', u'asked', u'them', u'to', u'sign', u'the', u'sealed', u'envelope', u'.'], u'lemmas': [u'the', u'Collapse', u'of', u'the', u'Confederacy', u'-lrb-', u'2001', u'-rrb-', u'p', u'80', u'Lincoln', u'do', u'not', u'show', u'the', u'pledge', u'to', u'he', u'cabinet', u',', u'but', u'ask', u'they', u'to', u'sign', u'the', u'seal', u'envelope', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'DT', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNP', u'VBD', u'RB', u'VB', u'DT', u'NN', u'TO', u'PRP$', u'NN', u',', u'CC', u'VBD', u'PRP', u'TO', u'VB', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[33661, 33664], [33665, 33673], [33674, 33676], [33677, 33680], [33681, 33692], [33693, 33694], [33694, 33698], [33698, 33699], [33700, 33701], [33702, 33704], [33705, 33712], [33713, 33716], [33717, 33720], [33721, 33725], [33726, 33729], [33730, 33736], [33737, 33739], [33740, 33743], [33744, 33751], [33751, 33752], [33753, 33756], [33757, 33762], [33763, 33767], [33768, 33770], [33771, 33775], [33776, 33779], [33780, 33786], [33787, 33795], [33795, 33796]]}) 
answer: set([u'banking', u'national', u'1863', u'act'])
candidate Sentence: (0.11788249015808105, {u'tokens': [u'The', u'Abraham', u'Lincoln', u'National', u'Cemetery', u'is', u'located', u'in', u'Elwood', u',', u'Illinois', u'.'], u'lemmas': [u'the', u'Abraham', u'Lincoln', u'National', u'Cemetery', u'be', u'located', u'in', u'Elwood', u',', u'Illinois', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'JJ', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[59971, 59974], [59975, 59982], [59983, 59990], [59991, 59999], [60000, 60008], [60009, 60011], [60012, 60019], [60020, 60022], [60023, 60029], [60029, 60030], [60031, 60039], [60039, 60040]]}) 
answer: set([u'banking', u'1863', u'sign', u'act'])

Did Lincoln sign the National Banking Act of 1863?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 7 documents, 410 characters, 74 tokens, 58.6 char/doc, 10.6 tok/doc RATES: 3.706 doc/sec, 39.2 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 8 documents, 460 characters, 84 tokens, 57.5 char/doc, 10.5 tok/doc RATES: 4.034 doc/sec, 42.4 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa7e830>.answer
______________________________ test_yesno[param8] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa4fc68>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4fc68>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.34533271193504333, {u'tokens': [u'Lincoln', u'began', u'his', u'political', u'career', u'in', u'1832', u',', u'at', u'age', u'23', u',', u'with', u'an', u'unsuccessful', u'campaign', u'for', u'the', u'Illinois', u'General', u'Assembly', u',', u'as', u'a', u'member', u'of', u'the', u'Whig', u'Party', u'.'], u'lemmas': [u'Lincoln', u'begin', u'he', u'political', u'career', u'in', u'1832', u',', u'at', u'age', u'23', u',', u'with', u'a', u'unsuccessful', u'campaign', u'for', u'the', u'Illinois', u'General', u'Assembly', u',', u'as', u'a', u'member', u'of', u'the', u'Whig', u'Party', u'.'], u'pos': [u'NNP', u'VBD', u'PRP$', u'JJ', u'NN', u'IN', u'CD', u',', u'IN', u'NN', u'CD', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[8166, 8173], [8174, 8179], [8180, 8183], [8184, 8193], [8194, 8200], [8201, 8203], [8204, 8208], [8208, 8209], [8210, 8212], [8213, 8216], [8217, 8219], [8219, 8220], [8221, 8225], [8226, 8228], [8229, 8241], [8242, 8250], [8251, 8254], [8255, 8258], [8259, 8267], [8268, 8275], [8276, 8284], [8284, 8285], [8286, 8288], [8289, 8290], [8291, 8297], [8298, 8300], [8301, 8304], [8305, 8309], [8310, 8315], [8315, 8316]]}) 
answer: set([u'start'])
candidate Sentence: (0.17519384622573853, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'1832', u'career', u'political', u'start'])
candidate Sentence: (0.17293459177017212, {u'tokens': [u'Under', u'his', u'leadership', u',', u'the', u'Union', u'took', u'control', u'of', u'the', u'border', u'slave', u'states', u'at', u'the', u'start', u'of', u'the', u'war', u'.'], u'lemmas': [u'under', u'he', u'leadership', u',', u'the', u'Union', u'take', u'control', u'of', u'the', u'border', u'slave', u'state', u'at', u'the', u'start', u'of', u'the', u'war', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u',', u'DT', u'NNP', u'VBD', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNS', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1966, 1971], [1972, 1975], [1976, 1986], [1986, 1987], [1988, 1991], [1992, 1997], [1998, 2002], [2003, 2010], [2011, 2013], [2014, 2017], [2018, 2024], [2025, 2030], [2031, 2037], [2038, 2040], [2041, 2044], [2045, 2050], [2051, 2053], [2054, 2057], [2058, 2061], [2061, 2062]]}) 
answer: set([u'1832', u'career', u'political'])
candidate Sentence: (0.13475111126899719, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'1832', u'career', u'political', u'start'])
candidate Sentence: (0.12615483999252319, {u'tokens': [u'After', u'the', u'fighting', u'started', u',', u'he', u'had', u'rebel', u'leaders', u'arrested', u'in', u'all', u'the', u'border', u'areas', u'-LRB-', u'especially', u'in', u'Maryland', u'-RRB-', u'and', u'held', u'in', u'military', u'prisons', u'without', u'trial', u'.'], u'lemmas': [u'after', u'the', u'fighting', u'start', u',', u'he', u'have', u'rebel', u'leader', u'arrest', u'in', u'all', u'the', u'border', u'area', u'-lrb-', u'especially', u'in', u'Maryland', u'-rrb-', u'and', u'hold', u'in', u'military', u'prison', u'without', u'trial', u'.'], u'pos': [u'IN', u'DT', u'NN', u'VBD', u',', u'PRP', u'VBD', u'JJ', u'NNS', u'VBN', u'IN', u'PDT', u'DT', u'NN', u'NNS', u'-LRB-', u'RB', u'IN', u'NNP', u'-RRB-', u'CC', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[29415, 29420], [29421, 29424], [29425, 29433], [29434, 29441], [29441, 29442], [29443, 29445], [29446, 29449], [29450, 29455], [29456, 29463], [29464, 29472], [29473, 29475], [29476, 29479], [29480, 29483], [29484, 29490], [29491, 29496], [29497, 29498], [29498, 29508], [29509, 29511], [29512, 29520], [29520, 29521], [29522, 29525], [29526, 29530], [29531, 29533], [29534, 29542], [29543, 29550], [29551, 29558], [29559, 29564], [29564, 29565]]}) 
answer: set([u'1832', u'career', u'political'])
candidate Sentence: (0.12547449767589569, {u'tokens': [u'Acceptance', u'of', u'this', u'offer', u'would', u'have', u'ended', u'his', u'career', u'in', u'the', u'rapidly', u'growing', u'state', u'of', u'Illinois', u',', u'so', u'Lincoln', u'declined', u'the', u'position', u'.'], u'lemmas': [u'Acceptance', u'of', u'this', u'offer', u'would', u'have', u'end', u'he', u'career', u'in', u'the', u'rapidly', u'grow', u'state', u'of', u'Illinois', u',', u'so', u'Lincoln', u'decline', u'the', u'position', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u'MD', u'VB', u'VBN', u'PRP$', u'NN', u'IN', u'DT', u'RB', u'VBG', u'NN', u'IN', u'NNP', u',', u'RB', u'NNP', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[14880, 14890], [14891, 14893], [14894, 14898], [14899, 14904], [14905, 14910], [14911, 14915], [14916, 14921], [14922, 14925], [14926, 14932], [14933, 14935], [14936, 14939], [14940, 14947], [14948, 14955], [14956, 14961], [14962, 14964], [14965, 14973], [14973, 14974], [14975, 14977], [14978, 14985], [14986, 14994], [14995, 14998], [14999, 15007], [15007, 15008]]}) 
answer: set([u'1832', u'start', u'political'])
candidate Sentence: (0.12232843041419983, {u'tokens': [u'He', u'saw', u'the', u'Declaration', u'as', u'more', u'than', u'a', u'political', u'document', u'.'], u'lemmas': [u'he', u'see', u'the', u'declaration', u'as', u'more', u'than', u'a', u'political', u'document', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[56224, 56226], [56227, 56230], [56231, 56234], [56235, 56246], [56247, 56249], [56250, 56254], [56255, 56259], [56260, 56261], [56262, 56271], [56272, 56280], [56280, 56281]]}) 
answer: set([u'1832', u'career', u'start'])
candidate Sentence: (0.11979016661643982, {u'tokens': [u'Donald', u'-LRB-', u'1995', u'-RRB-', u',', u'150-51', u'Lincoln', u'was', u'involved', u'in', u'more', u'than', u'5,100', u'cases', u'in', u'Illinois', u'alone', u'during', u'his', u'23-year', u'legal', u'career', u'.'], u'lemmas': [u'Donald', u'-lrb-', u'1995', u'-rrb-', u',', u'150-51', u'Lincoln', u'be', u'involve', u'in', u'more', u'than', u'5,100', u'case', u'in', u'Illinois', u'alone', u'during', u'he', u'23-year', u'legal', u'career', u'.'], u'pos': [u'NNP', u'-LRB-', u'CD', u'-RRB-', u',', u'CD', u'NNP', u'VBD', u'VBN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'RB', u'IN', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[16927, 16933], [16934, 16935], [16935, 16939], [16939, 16940], [16940, 16941], [16942, 16948], [16949, 16956], [16957, 16960], [16961, 16969], [16970, 16972], [16973, 16977], [16978, 16982], [16983, 16988], [16989, 16994], [16995, 16997], [16998, 17006], [17007, 17012], [17013, 17019], [17020, 17023], [17024, 17031], [17032, 17037], [17038, 17044], [17044, 17045]]}) 
answer: set([u'1832', u'start', u'political'])
candidate Sentence: (0.10147132724523544, {u'tokens': [u'As', u'early', u'as', u'the', u'1850s', u',', u'a', u'time', u'when', u'most', u'political', u'rhetoric', u'focused', u'on', u'the', u'sanctity', u'of', u'the', u'Constitution', u',', u'Lincoln', u'shifted', u'emphasis', u'to', u'the', u'Declaration', u'of', u'Independence', u'as', u'the', u'foundation', u'of', u'American', u'political', u'values', u'--', u'what', u'he', u'called', u'the', u'``', u'sheet', u'anchor', u"''", u'of', u'republicanism', u'.'], u'lemmas': [u'as', u'early', u'as', u'the', u'1850', u',', u'a', u'time', u'when', u'most', u'political', u'rhetoric', u'focus', u'on', u'the', u'sanctity', u'of', u'the', u'Constitution', u',', u'Lincoln', u'shift', u'emphasis', u'to', u'the', u'declaration', u'of', u'independence', u'as', u'the', u'foundation', u'of', u'american', u'political', u'value', u'--', u'what', u'he', u'call', u'the', u'``', u'sheet', u'anchor', u"''", u'of', u'republicanism', u'.'], u'pos': [u'RB', u'RB', u'IN', u'DT', u'NNS', u',', u'DT', u'NN', u'WRB', u'RBS', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u',', u'NNP', u'VBD', u'NN', u'TO', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u':', u'WP', u'PRP', u'VBD', u'DT', u'``', u'NN', u'NN', u"''", u'IN', u'NN', u'.'], u'char_offsets': [[43141, 43143], [43144, 43149], [43150, 43152], [43153, 43156], [43157, 43162], [43162, 43163], [43164, 43165], [43166, 43170], [43171, 43175], [43176, 43180], [43181, 43190], [43191, 43199], [43200, 43207], [43208, 43210], [43211, 43214], [43215, 43223], [43224, 43226], [43227, 43230], [43231, 43243], [43243, 43244], [43245, 43252], [43253, 43260], [43261, 43269], [43270, 43272], [43273, 43276], [43277, 43288], [43289, 43291], [43292, 43304], [43305, 43307], [43308, 43311], [43312, 43322], [43323, 43325], [43326, 43334], [43335, 43344], [43345, 43351], [43351, 43352], [43352, 43356], [43357, 43359], [43360, 43366], [43367, 43370], [43371, 43372], [43372, 43377], [43378, 43384], [43384, 43385], [43386, 43388], [43389, 43402], [43402, 43403]]}) 
answer: set([u'1832', u'career', u'start'])
candidate Sentence: (0.10012112557888031, {u'tokens': [u'I', u'do', u'not', u'expect', u'the', u'Union', u'to', u'be', u'dissolved', u'--', u'I', u'do', u'not', u'expect', u'the', u'house', u'to', u'fall', u'--', u'but', u'I', u'do', u'expect', u'it', u'will', u'cease', u'to', u'be', u'divided', u'.'], u'lemmas': [u'I', u'do', u'not', u'expect', u'the', u'Union', u'to', u'be', u'dissolve', u'--', u'I', u'do', u'not', u'expect', u'the', u'house', u'to', u'fall', u'--', u'but', u'I', u'do', u'expect', u'it', u'will', u'cease', u'to', u'be', u'divide', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VB', u'DT', u'NNP', u'TO', u'VB', u'VBN', u':', u'PRP', u'VBP', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u':', u'CC', u'PRP', u'VBP', u'VB', u'PRP', u'MD', u'VB', u'TO', u'VB', u'VBN', u'.'], u'char_offsets': [[19382, 19383], [19384, 19386], [19387, 19390], [19391, 19397], [19398, 19401], [19402, 19407], [19408, 19410], [19411, 19413], [19414, 19423], [19424, 19425], [19426, 19427], [19428, 19430], [19431, 19434], [19435, 19441], [19442, 19445], [19446, 19451], [19452, 19454], [19455, 19459], [19460, 19461], [19462, 19465], [19466, 19467], [19468, 19470], [19471, 19477], [19478, 19480], [19481, 19485], [19486, 19491], [19492, 19494], [19495, 19497], [19498, 19505], [19505, 19506]]}) 
answer: set([u'1832', u'career', u'political', u'start'])

Did Lincoln start his political career in 1832?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4fc68>.answer
______________________________ test_yesno[param9] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa4f830>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4f830>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.34533271193504333, {u'tokens': [u'Lincoln', u'began', u'his', u'political', u'career', u'in', u'1832', u',', u'at', u'age', u'23', u',', u'with', u'an', u'unsuccessful', u'campaign', u'for', u'the', u'Illinois', u'General', u'Assembly', u',', u'as', u'a', u'member', u'of', u'the', u'Whig', u'Party', u'.'], u'lemmas': [u'Lincoln', u'begin', u'he', u'political', u'career', u'in', u'1832', u',', u'at', u'age', u'23', u',', u'with', u'a', u'unsuccessful', u'campaign', u'for', u'the', u'Illinois', u'General', u'Assembly', u',', u'as', u'a', u'member', u'of', u'the', u'Whig', u'Party', u'.'], u'pos': [u'NNP', u'VBD', u'PRP$', u'JJ', u'NN', u'IN', u'CD', u',', u'IN', u'NN', u'CD', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[8166, 8173], [8174, 8179], [8180, 8183], [8184, 8193], [8194, 8200], [8201, 8203], [8204, 8208], [8208, 8209], [8210, 8212], [8213, 8216], [8217, 8219], [8219, 8220], [8221, 8225], [8226, 8228], [8229, 8241], [8242, 8250], [8251, 8254], [8255, 8258], [8259, 8267], [8268, 8275], [8276, 8284], [8284, 8285], [8286, 8288], [8289, 8290], [8291, 8297], [8298, 8300], [8301, 8304], [8305, 8309], [8310, 8315], [8315, 8316]]}) 
answer: set([u'start'])
candidate Sentence: (0.17519384622573853, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'1832', u'career', u'political', u'start'])
candidate Sentence: (0.17293459177017212, {u'tokens': [u'Under', u'his', u'leadership', u',', u'the', u'Union', u'took', u'control', u'of', u'the', u'border', u'slave', u'states', u'at', u'the', u'start', u'of', u'the', u'war', u'.'], u'lemmas': [u'under', u'he', u'leadership', u',', u'the', u'Union', u'take', u'control', u'of', u'the', u'border', u'slave', u'state', u'at', u'the', u'start', u'of', u'the', u'war', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u',', u'DT', u'NNP', u'VBD', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNS', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1966, 1971], [1972, 1975], [1976, 1986], [1986, 1987], [1988, 1991], [1992, 1997], [1998, 2002], [2003, 2010], [2011, 2013], [2014, 2017], [2018, 2024], [2025, 2030], [2031, 2037], [2038, 2040], [2041, 2044], [2045, 2050], [2051, 2053], [2054, 2057], [2058, 2061], [2061, 2062]]}) 
answer: set([u'1832', u'career', u'political'])
candidate Sentence: (0.13475111126899719, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'1832', u'career', u'political', u'start'])
candidate Sentence: (0.12615483999252319, {u'tokens': [u'After', u'the', u'fighting', u'started', u',', u'he', u'had', u'rebel', u'leaders', u'arrested', u'in', u'all', u'the', u'border', u'areas', u'-LRB-', u'especially', u'in', u'Maryland', u'-RRB-', u'and', u'held', u'in', u'military', u'prisons', u'without', u'trial', u'.'], u'lemmas': [u'after', u'the', u'fighting', u'start', u',', u'he', u'have', u'rebel', u'leader', u'arrest', u'in', u'all', u'the', u'border', u'area', u'-lrb-', u'especially', u'in', u'Maryland', u'-rrb-', u'and', u'hold', u'in', u'military', u'prison', u'without', u'trial', u'.'], u'pos': [u'IN', u'DT', u'NN', u'VBD', u',', u'PRP', u'VBD', u'JJ', u'NNS', u'VBN', u'IN', u'PDT', u'DT', u'NN', u'NNS', u'-LRB-', u'RB', u'IN', u'NNP', u'-RRB-', u'CC', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[29415, 29420], [29421, 29424], [29425, 29433], [29434, 29441], [29441, 29442], [29443, 29445], [29446, 29449], [29450, 29455], [29456, 29463], [29464, 29472], [29473, 29475], [29476, 29479], [29480, 29483], [29484, 29490], [29491, 29496], [29497, 29498], [29498, 29508], [29509, 29511], [29512, 29520], [29520, 29521], [29522, 29525], [29526, 29530], [29531, 29533], [29534, 29542], [29543, 29550], [29551, 29558], [29559, 29564], [29564, 29565]]}) 
answer: set([u'1832', u'career', u'political'])
candidate Sentence: (0.12547449767589569, {u'tokens': [u'Acceptance', u'of', u'this', u'offer', u'would', u'have', u'ended', u'his', u'career', u'in', u'the', u'rapidly', u'growing', u'state', u'of', u'Illinois', u',', u'so', u'Lincoln', u'declined', u'the', u'position', u'.'], u'lemmas': [u'Acceptance', u'of', u'this', u'offer', u'would', u'have', u'end', u'he', u'career', u'in', u'the', u'rapidly', u'grow', u'state', u'of', u'Illinois', u',', u'so', u'Lincoln', u'decline', u'the', u'position', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u'MD', u'VB', u'VBN', u'PRP$', u'NN', u'IN', u'DT', u'RB', u'VBG', u'NN', u'IN', u'NNP', u',', u'RB', u'NNP', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[14880, 14890], [14891, 14893], [14894, 14898], [14899, 14904], [14905, 14910], [14911, 14915], [14916, 14921], [14922, 14925], [14926, 14932], [14933, 14935], [14936, 14939], [14940, 14947], [14948, 14955], [14956, 14961], [14962, 14964], [14965, 14973], [14973, 14974], [14975, 14977], [14978, 14985], [14986, 14994], [14995, 14998], [14999, 15007], [15007, 15008]]}) 
answer: set([u'1832', u'start', u'political'])
candidate Sentence: (0.12232843041419983, {u'tokens': [u'He', u'saw', u'the', u'Declaration', u'as', u'more', u'than', u'a', u'political', u'document', u'.'], u'lemmas': [u'he', u'see', u'the', u'declaration', u'as', u'more', u'than', u'a', u'political', u'document', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[56224, 56226], [56227, 56230], [56231, 56234], [56235, 56246], [56247, 56249], [56250, 56254], [56255, 56259], [56260, 56261], [56262, 56271], [56272, 56280], [56280, 56281]]}) 
answer: set([u'1832', u'career', u'start'])
candidate Sentence: (0.11979016661643982, {u'tokens': [u'Donald', u'-LRB-', u'1995', u'-RRB-', u',', u'150-51', u'Lincoln', u'was', u'involved', u'in', u'more', u'than', u'5,100', u'cases', u'in', u'Illinois', u'alone', u'during', u'his', u'23-year', u'legal', u'career', u'.'], u'lemmas': [u'Donald', u'-lrb-', u'1995', u'-rrb-', u',', u'150-51', u'Lincoln', u'be', u'involve', u'in', u'more', u'than', u'5,100', u'case', u'in', u'Illinois', u'alone', u'during', u'he', u'23-year', u'legal', u'career', u'.'], u'pos': [u'NNP', u'-LRB-', u'CD', u'-RRB-', u',', u'CD', u'NNP', u'VBD', u'VBN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'RB', u'IN', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[16927, 16933], [16934, 16935], [16935, 16939], [16939, 16940], [16940, 16941], [16942, 16948], [16949, 16956], [16957, 16960], [16961, 16969], [16970, 16972], [16973, 16977], [16978, 16982], [16983, 16988], [16989, 16994], [16995, 16997], [16998, 17006], [17007, 17012], [17013, 17019], [17020, 17023], [17024, 17031], [17032, 17037], [17038, 17044], [17044, 17045]]}) 
answer: set([u'1832', u'start', u'political'])
candidate Sentence: (0.10147132724523544, {u'tokens': [u'As', u'early', u'as', u'the', u'1850s', u',', u'a', u'time', u'when', u'most', u'political', u'rhetoric', u'focused', u'on', u'the', u'sanctity', u'of', u'the', u'Constitution', u',', u'Lincoln', u'shifted', u'emphasis', u'to', u'the', u'Declaration', u'of', u'Independence', u'as', u'the', u'foundation', u'of', u'American', u'political', u'values', u'--', u'what', u'he', u'called', u'the', u'``', u'sheet', u'anchor', u"''", u'of', u'republicanism', u'.'], u'lemmas': [u'as', u'early', u'as', u'the', u'1850', u',', u'a', u'time', u'when', u'most', u'political', u'rhetoric', u'focus', u'on', u'the', u'sanctity', u'of', u'the', u'Constitution', u',', u'Lincoln', u'shift', u'emphasis', u'to', u'the', u'declaration', u'of', u'independence', u'as', u'the', u'foundation', u'of', u'american', u'political', u'value', u'--', u'what', u'he', u'call', u'the', u'``', u'sheet', u'anchor', u"''", u'of', u'republicanism', u'.'], u'pos': [u'RB', u'RB', u'IN', u'DT', u'NNS', u',', u'DT', u'NN', u'WRB', u'RBS', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u',', u'NNP', u'VBD', u'NN', u'TO', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u':', u'WP', u'PRP', u'VBD', u'DT', u'``', u'NN', u'NN', u"''", u'IN', u'NN', u'.'], u'char_offsets': [[43141, 43143], [43144, 43149], [43150, 43152], [43153, 43156], [43157, 43162], [43162, 43163], [43164, 43165], [43166, 43170], [43171, 43175], [43176, 43180], [43181, 43190], [43191, 43199], [43200, 43207], [43208, 43210], [43211, 43214], [43215, 43223], [43224, 43226], [43227, 43230], [43231, 43243], [43243, 43244], [43245, 43252], [43253, 43260], [43261, 43269], [43270, 43272], [43273, 43276], [43277, 43288], [43289, 43291], [43292, 43304], [43305, 43307], [43308, 43311], [43312, 43322], [43323, 43325], [43326, 43334], [43335, 43344], [43345, 43351], [43351, 43352], [43352, 43356], [43357, 43359], [43360, 43366], [43367, 43370], [43371, 43372], [43372, 43377], [43378, 43384], [43384, 43385], [43386, 43388], [43389, 43402], [43402, 43403]]}) 
answer: set([u'1832', u'career', u'start'])
candidate Sentence: (0.10012112557888031, {u'tokens': [u'I', u'do', u'not', u'expect', u'the', u'Union', u'to', u'be', u'dissolved', u'--', u'I', u'do', u'not', u'expect', u'the', u'house', u'to', u'fall', u'--', u'but', u'I', u'do', u'expect', u'it', u'will', u'cease', u'to', u'be', u'divided', u'.'], u'lemmas': [u'I', u'do', u'not', u'expect', u'the', u'Union', u'to', u'be', u'dissolve', u'--', u'I', u'do', u'not', u'expect', u'the', u'house', u'to', u'fall', u'--', u'but', u'I', u'do', u'expect', u'it', u'will', u'cease', u'to', u'be', u'divide', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VB', u'DT', u'NNP', u'TO', u'VB', u'VBN', u':', u'PRP', u'VBP', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u':', u'CC', u'PRP', u'VBP', u'VB', u'PRP', u'MD', u'VB', u'TO', u'VB', u'VBN', u'.'], u'char_offsets': [[19382, 19383], [19384, 19386], [19387, 19390], [19391, 19397], [19398, 19401], [19402, 19407], [19408, 19410], [19411, 19413], [19414, 19423], [19424, 19425], [19426, 19427], [19428, 19430], [19431, 19434], [19435, 19441], [19442, 19445], [19446, 19451], [19452, 19454], [19455, 19459], [19460, 19461], [19462, 19465], [19466, 19467], [19468, 19470], [19471, 19477], [19478, 19480], [19481, 19485], [19486, 19491], [19492, 19494], [19495, 19497], [19498, 19505], [19505, 19506]]}) 
answer: set([u'1832', u'career', u'political', u'start'])

Did Lincoln start his political career in 1832?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4f830>.answer
_____________________________ test_yesno[param10] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa4f9e0>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4f9e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42182657122612, {u'tokens': [u'In', u'one', u'prominent', u'1851', u'case', u',', u'he', u'represented', u'the', u'Alton', u'&', u'Sangamon', u'Railroad', u'in', u'a', u'dispute', u'with', u'a', u'shareholder', u',', u'James', u'A.', u'Barret', u'.'], u'lemmas': [u'in', u'one', u'prominent', u'1851', u'case', u',', u'he', u'represent', u'the', u'Alton', u'&', u'Sangamon', u'railroad', u'in', u'a', u'dispute', u'with', u'a', u'shareholder', u',', u'James', u'A.', u'Barret', u'.'], u'pos': [u'IN', u'CD', u'JJ', u'CD', u'NN', u',', u'PRP', u'VBD', u'DT', u'NNP', u'CC', u'NNP', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[15580, 15582], [15583, 15586], [15587, 15596], [15597, 15601], [15602, 15606], [15606, 15607], [15608, 15610], [15611, 15622], [15623, 15626], [15627, 15632], [15633, 15634], [15635, 15643], [15644, 15652], [15653, 15655], [15656, 15657], [15658, 15665], [15666, 15670], [15671, 15672], [15673, 15684], [15684, 15685], [15686, 15691], [15692, 15694], [15695, 15701], [15701, 15702]]}) 
answer: set([u'ever'])
candidate Sentence: (0.1634010523557663, {u'tokens': [u'Lincoln', u'argued', u'that', u'as', u'a', u'matter', u'of', u'law', u'a', u'corporation', u'is', u'not', u'bound', u'by', u'its', u'original', u'charter', u'when', u'that', u'charter', u'can', u'be', u'amended', u'in', u'the', u'public', u'interest', u',', u'that', u'the', u'newer', u'route', u'proposed', u'by', u'Alton', u'&', u'Sangamon', u'was', u'superior', u'and', u'less', u'expensive', u',', u'and', u'that', u'accordingly', u',', u'the', u'corporation', u'had', u'a', u'right', u'to', u'sue', u'Barret', u'for', u'his', u'delinquent', u'payment', u'.'], u'lemmas': [u'Lincoln', u'argue', u'that', u'as', u'a', u'matter', u'of', u'law', u'a', u'corporation', u'be', u'not', u'bind', u'by', u'its', u'original', u'charter', u'when', u'that', u'charter', u'can', u'be', u'amend', u'in', u'the', u'public', u'interest', u',', u'that', u'the', u'newer', u'route', u'propose', u'by', u'Alton', u'&', u'Sangamon', u'be', u'superior', u'and', u'less', u'expensive', u',', u'and', u'that', u'accordingly', u',', u'the', u'corporation', u'have', u'a', u'right', u'to', u'sue', u'Barret', u'for', u'he', u'delinquent', u'payment', u'.'], u'pos': [u'NNP', u'VBD', u'IN', u'IN', u'DT', u'NN', u'IN', u'NN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'WRB', u'DT', u'NN', u'MD', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'JJR', u'NN', u'VBN', u'IN', u'NNP', u'CC', u'NNP', u'VBD', u'JJ', u'CC', u'RBR', u'JJ', u',', u'CC', u'IN', u'RB', u',', u'DT', u'NN', u'VBD', u'DT', u'NN', u'TO', u'VB', u'NNP', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[15836, 15843], [15844, 15850], [15851, 15855], [15856, 15858], [15859, 15860], [15861, 15867], [15868, 15870], [15871, 15874], [15875, 15876], [15877, 15888], [15889, 15891], [15892, 15895], [15896, 15901], [15902, 15904], [15905, 15908], [15909, 15917], [15918, 15925], [15926, 15930], [15931, 15935], [15936, 15943], [15944, 15947], [15948, 15950], [15951, 15958], [15959, 15961], [15962, 15965], [15966, 15972], [15973, 15981], [15981, 15982], [15983, 15987], [15988, 15991], [15992, 15997], [15998, 16003], [16004, 16012], [16013, 16015], [16016, 16021], [16022, 16023], [16024, 16032], [16033, 16036], [16037, 16045], [16046, 16049], [16050, 16054], [16055, 16064], [16064, 16065], [16066, 16069], [16070, 16074], [16075, 16086], [16086, 16087], [16088, 16091], [16092, 16103], [16104, 16107], [16108, 16109], [16110, 16115], [16116, 16118], [16119, 16122], [16123, 16129], [16130, 16133], [16134, 16137], [16138, 16148], [16149, 16156], [16156, 16157]]}) 
answer: set([u'represent', u'railroad', u'ever'])
candidate Sentence: (0.15971998870372772, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.1373327225446701, {u'tokens': [u'New', u'York', u':', u'Dick', u'&', u'Fitzgerald', u',', u'1865', u'.'], u'lemmas': [u'New', u'York', u':', u'Dick', u'&', u'Fitzgerald', u',', u'1865', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NNP', u'CC', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[49662, 49665], [49666, 49670], [49670, 49671], [49672, 49676], [49677, 49678], [49679, 49689], [49689, 49690], [49691, 49695], [49695, 49696]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.1327231377363205, {u'tokens': [u'The', u'first', u'photograph', u'ever', u'taken', u'of', u'Mary', u'Lincoln', u',', u'a', u'daguerreotype', u'by', u'Shepherd', u'in', u'1846', u'.'], u'lemmas': [u'the', u'first', u'photograph', u'ever', u'take', u'of', u'Mary', u'Lincoln', u',', u'a', u'daguerreotype', u'by', u'Shepherd', u'in', u'1846', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[11185, 11188], [11189, 11194], [11195, 11205], [11206, 11210], [11211, 11216], [11217, 11219], [11220, 11224], [11225, 11232], [11232, 11233], [11234, 11235], [11236, 11249], [11250, 11252], [11253, 11261], [11262, 11264], [11265, 11269], [11269, 11270]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.12677250802516937, {u'tokens': [u'The', u'first', u'photograph', u'ever', u'taken', u'of', u'Abraham', u'Lincoln', u',', u'a', u'daguerreotype', u'taken', u'by', u'Shepherd', u'in', u'1846', u'.'], u'lemmas': [u'the', u'first', u'photograph', u'ever', u'take', u'of', u'Abraham', u'Lincoln', u',', u'a', u'daguerreotype', u'take', u'by', u'Shepherd', u'in', u'1846', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[12312, 12315], [12316, 12321], [12322, 12332], [12333, 12337], [12338, 12343], [12344, 12346], [12347, 12354], [12355, 12362], [12362, 12363], [12364, 12365], [12366, 12379], [12380, 12385], [12386, 12388], [12389, 12397], [12398, 12400], [12401, 12405], [12405, 12406]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.11952458322048187, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.11454401165246964, {u'tokens': [u'Years', u'later', u'she', u'compared', u'Lincoln', u'to', u'her', u'own', u'son', u',', u'saying', u'``', u'Both', u'were', u'good', u'boys', u',', u'but', u'I', u'must', u'say', u'--', u'both', u'now', u'being', u'dead', u'that', u'Abe', u'was', u'the', u'best', u'boy', u'I', u'ever', u'saw', u'or', u'ever', u'expect', u'to', u'see', u'.', u"''"], u'lemmas': [u'year', u'later', u'she', u'compare', u'Lincoln', u'to', u'she', u'own', u'son', u',', u'say', u'``', u'both', u'be', u'good', u'boy', u',', u'but', u'I', u'must', u'say', u'--', u'both', u'now', u'be', u'dead', u'that', u'abe', u'be', u'the', u'best', u'boy', u'I', u'ever', u'see', u'or', u'ever', u'expect', u'to', u'see', u'.', u"''"], u'pos': [u'NNS', u'RB', u'PRP', u'VBD', u'NNP', u'TO', u'PRP$', u'JJ', u'NN', u',', u'VBG', u'``', u'CC', u'VBD', u'JJ', u'NNS', u',', u'CC', u'PRP', u'MD', u'VB', u':', u'DT', u'RB', u'VBG', u'JJ', u'IN', u'NN', u'VBD', u'DT', u'JJS', u'NN', u'PRP', u'RB', u'VBD', u'CC', u'RB', u'VBP', u'TO', u'VB', u'.', u"''"], u'char_offsets': [[5908, 5913], [5914, 5919], [5920, 5923], [5924, 5932], [5933, 5940], [5941, 5943], [5944, 5947], [5948, 5951], [5952, 5955], [5955, 5956], [5957, 5963], [5964, 5965], [5965, 5969], [5970, 5974], [5975, 5979], [5980, 5984], [5984, 5985], [5986, 5989], [5990, 5991], [5992, 5996], [5997, 6000], [6001, 6002], [6003, 6007], [6008, 6011], [6012, 6017], [6018, 6022], [6023, 6027], [6028, 6031], [6032, 6035], [6036, 6039], [6040, 6044], [6045, 6048], [6049, 6050], [6051, 6055], [6056, 6059], [6060, 6062], [6063, 6067], [6068, 6074], [6075, 6077], [6078, 6081], [6081, 6082], [6082, 6083]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.112503282725811, {u'tokens': [u'We', u'Are', u'Lincoln', u'Men', u':', u'Abraham', u'Lincoln', u'and', u'His', u'Friends', u'Simon', u'&', u'Schuster', u',', u'-LRB-', u'2003', u'-RRB-', u'.'], u'lemmas': [u'we', u'be', u'Lincoln', u'Men', u':', u'Abraham', u'Lincoln', u'and', u'he', u'Friends', u'Simon', u'&', u'Schuster', u',', u'-lrb-', u'2003', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBP', u'NNP', u'NNPS', u':', u'NNP', u'NNP', u'CC', u'PRP$', u'NNPS', u'NNP', u'CC', u'NNP', u',', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[60111, 60113], [60114, 60117], [60118, 60125], [60126, 60129], [60129, 60130], [60131, 60138], [60139, 60146], [60147, 60150], [60151, 60154], [60155, 60162], [60163, 60168], [60169, 60170], [60171, 60179], [60179, 60180], [60181, 60182], [60182, 60186], [60186, 60187], [60187, 60188]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.10541266947984695, {u'tokens': [u'The', u'following', u'year', u',', u'when', u'his', u'father', u'relocated', u'the', u'family', u'to', u'a', u'new', u'homestead', u'in', u'Coles', u'County', u',', u'Illinois', u',', u'twenty-two-year-old', u'Lincoln', u'struck', u'out', u'on', u'his', u'own', u',', u'canoeing', u'down', u'the', u'Sangamon', u'River', u'to', u'the', u'village', u'of', u'New', u'Salem', u'in', u'Sangamon', u'County', u'.'], u'lemmas': [u'the', u'following', u'year', u',', u'when', u'he', u'father', u'relocate', u'the', u'family', u'to', u'a', u'new', u'homestead', u'in', u'Coles', u'County', u',', u'Illinois', u',', u'twenty-two-year-old', u'Lincoln', u'strike', u'out', u'on', u'he', u'own', u',', u'canoe', u'down', u'the', u'Sangamon', u'River', u'to', u'the', u'village', u'of', u'New', u'Salem', u'in', u'Sangamon', u'County', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'WRB', u'PRP$', u'NN', u'VBD', u'DT', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'JJ', u'NNP', u'VBD', u'RP', u'IN', u'PRP$', u'JJ', u',', u'VBG', u'RP', u'DT', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[6645, 6648], [6649, 6658], [6659, 6663], [6663, 6664], [6665, 6669], [6670, 6673], [6674, 6680], [6681, 6690], [6691, 6694], [6695, 6701], [6702, 6704], [6705, 6706], [6707, 6710], [6711, 6720], [6721, 6723], [6724, 6729], [6730, 6736], [6736, 6737], [6738, 6746], [6746, 6747], [6748, 6767], [6768, 6775], [6776, 6782], [6783, 6786], [6787, 6789], [6790, 6793], [6794, 6797], [6797, 6798], [6799, 6807], [6808, 6812], [6813, 6816], [6817, 6825], [6826, 6831], [6832, 6834], [6835, 6838], [6839, 6846], [6847, 6849], [6850, 6853], [6854, 6859], [6860, 6862], [6863, 6871], [6872, 6878], [6878, 6879]]}) 
answer: set([u'represent', u'railroad', u'ever', u'alton'])

Did Lincoln ever represent Alton & Sangamon Railroad?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4f9e0>.answer
_____________________________ test_yesno[param11] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa4fb90>, (<src.tfidf.TF_IDF object at 0x1084dee10>, set(['abraham', 'lincoln'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4fb90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42182657122612, {u'tokens': [u'In', u'one', u'prominent', u'1851', u'case', u',', u'he', u'represented', u'the', u'Alton', u'&', u'Sangamon', u'Railroad', u'in', u'a', u'dispute', u'with', u'a', u'shareholder', u',', u'James', u'A.', u'Barret', u'.'], u'lemmas': [u'in', u'one', u'prominent', u'1851', u'case', u',', u'he', u'represent', u'the', u'Alton', u'&', u'Sangamon', u'railroad', u'in', u'a', u'dispute', u'with', u'a', u'shareholder', u',', u'James', u'A.', u'Barret', u'.'], u'pos': [u'IN', u'CD', u'JJ', u'CD', u'NN', u',', u'PRP', u'VBD', u'DT', u'NNP', u'CC', u'NNP', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[15580, 15582], [15583, 15586], [15587, 15596], [15597, 15601], [15602, 15606], [15606, 15607], [15608, 15610], [15611, 15622], [15623, 15626], [15627, 15632], [15633, 15634], [15635, 15643], [15644, 15652], [15653, 15655], [15656, 15657], [15658, 15665], [15666, 15670], [15671, 15672], [15673, 15684], [15684, 15685], [15686, 15691], [15692, 15694], [15695, 15701], [15701, 15702]]}) 
answer: set([u'ever'])
candidate Sentence: (0.1634010523557663, {u'tokens': [u'Lincoln', u'argued', u'that', u'as', u'a', u'matter', u'of', u'law', u'a', u'corporation', u'is', u'not', u'bound', u'by', u'its', u'original', u'charter', u'when', u'that', u'charter', u'can', u'be', u'amended', u'in', u'the', u'public', u'interest', u',', u'that', u'the', u'newer', u'route', u'proposed', u'by', u'Alton', u'&', u'Sangamon', u'was', u'superior', u'and', u'less', u'expensive', u',', u'and', u'that', u'accordingly', u',', u'the', u'corporation', u'had', u'a', u'right', u'to', u'sue', u'Barret', u'for', u'his', u'delinquent', u'payment', u'.'], u'lemmas': [u'Lincoln', u'argue', u'that', u'as', u'a', u'matter', u'of', u'law', u'a', u'corporation', u'be', u'not', u'bind', u'by', u'its', u'original', u'charter', u'when', u'that', u'charter', u'can', u'be', u'amend', u'in', u'the', u'public', u'interest', u',', u'that', u'the', u'newer', u'route', u'propose', u'by', u'Alton', u'&', u'Sangamon', u'be', u'superior', u'and', u'less', u'expensive', u',', u'and', u'that', u'accordingly', u',', u'the', u'corporation', u'have', u'a', u'right', u'to', u'sue', u'Barret', u'for', u'he', u'delinquent', u'payment', u'.'], u'pos': [u'NNP', u'VBD', u'IN', u'IN', u'DT', u'NN', u'IN', u'NN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'WRB', u'DT', u'NN', u'MD', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'JJR', u'NN', u'VBN', u'IN', u'NNP', u'CC', u'NNP', u'VBD', u'JJ', u'CC', u'RBR', u'JJ', u',', u'CC', u'IN', u'RB', u',', u'DT', u'NN', u'VBD', u'DT', u'NN', u'TO', u'VB', u'NNP', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[15836, 15843], [15844, 15850], [15851, 15855], [15856, 15858], [15859, 15860], [15861, 15867], [15868, 15870], [15871, 15874], [15875, 15876], [15877, 15888], [15889, 15891], [15892, 15895], [15896, 15901], [15902, 15904], [15905, 15908], [15909, 15917], [15918, 15925], [15926, 15930], [15931, 15935], [15936, 15943], [15944, 15947], [15948, 15950], [15951, 15958], [15959, 15961], [15962, 15965], [15966, 15972], [15973, 15981], [15981, 15982], [15983, 15987], [15988, 15991], [15992, 15997], [15998, 16003], [16004, 16012], [16013, 16015], [16016, 16021], [16022, 16023], [16024, 16032], [16033, 16036], [16037, 16045], [16046, 16049], [16050, 16054], [16055, 16064], [16064, 16065], [16066, 16069], [16070, 16074], [16075, 16086], [16086, 16087], [16088, 16091], [16092, 16103], [16104, 16107], [16108, 16109], [16110, 16115], [16116, 16118], [16119, 16122], [16123, 16129], [16130, 16133], [16134, 16137], [16138, 16148], [16149, 16156], [16156, 16157]]}) 
answer: set([u'represent', u'railroad', u'ever'])
candidate Sentence: (0.15971998870372772, {u'tokens': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'And', u'the', u'War', u'Came', u"'", u'?'], u'lemmas': [u'Gabor', u'S.', u'Boritt', u',', u"''", u'`', u'and', u'the', u'War', u'Came', u"'", u'?'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u"''", u'``', u'CC', u'DT', u'NNP', u'NNP', u'POS', u'.'], u'char_offsets': [[22650, 22655], [22656, 22658], [22659, 22665], [22665, 22666], [22667, 22668], [22668, 22669], [22669, 22672], [22673, 22676], [22677, 22680], [22681, 22685], [22685, 22686], [22686, 22687]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.1373327225446701, {u'tokens': [u'New', u'York', u':', u'Dick', u'&', u'Fitzgerald', u',', u'1865', u'.'], u'lemmas': [u'New', u'York', u':', u'Dick', u'&', u'Fitzgerald', u',', u'1865', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NNP', u'CC', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[49662, 49665], [49666, 49670], [49670, 49671], [49672, 49676], [49677, 49678], [49679, 49689], [49689, 49690], [49691, 49695], [49695, 49696]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.1327231377363205, {u'tokens': [u'The', u'first', u'photograph', u'ever', u'taken', u'of', u'Mary', u'Lincoln', u',', u'a', u'daguerreotype', u'by', u'Shepherd', u'in', u'1846', u'.'], u'lemmas': [u'the', u'first', u'photograph', u'ever', u'take', u'of', u'Mary', u'Lincoln', u',', u'a', u'daguerreotype', u'by', u'Shepherd', u'in', u'1846', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[11185, 11188], [11189, 11194], [11195, 11205], [11206, 11210], [11211, 11216], [11217, 11219], [11220, 11224], [11225, 11232], [11232, 11233], [11234, 11235], [11236, 11249], [11250, 11252], [11253, 11261], [11262, 11264], [11265, 11269], [11269, 11270]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.12677250802516937, {u'tokens': [u'The', u'first', u'photograph', u'ever', u'taken', u'of', u'Abraham', u'Lincoln', u',', u'a', u'daguerreotype', u'taken', u'by', u'Shepherd', u'in', u'1846', u'.'], u'lemmas': [u'the', u'first', u'photograph', u'ever', u'take', u'of', u'Abraham', u'Lincoln', u',', u'a', u'daguerreotype', u'take', u'by', u'Shepherd', u'in', u'1846', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[12312, 12315], [12316, 12321], [12322, 12332], [12333, 12337], [12338, 12343], [12344, 12346], [12347, 12354], [12355, 12362], [12362, 12363], [12364, 12365], [12366, 12379], [12380, 12385], [12386, 12388], [12389, 12397], [12398, 12400], [12401, 12405], [12405, 12406]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.11952458322048187, {u'tokens': [u'He', u'asked', u'rhetorically', u'that', u'even', u'were', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'parties', u'to', u'rescind', u'it', u'?'], u'lemmas': [u'he', u'ask', u'rhetorically', u'that', u'even', u'be', u'the', u'Constitution', u'a', u'simple', u'contract', u',', u'would', u'it', u'not', u'require', u'the', u'agreement', u'of', u'all', u'party', u'to', u'rescind', u'it', u'?'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'RB', u'VBD', u'DT', u'NNP', u'DT', u'JJ', u'NN', u',', u'MD', u'PRP', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[26500, 26502], [26503, 26508], [26509, 26521], [26522, 26526], [26527, 26531], [26532, 26536], [26537, 26540], [26541, 26553], [26554, 26555], [26556, 26562], [26563, 26571], [26571, 26572], [26573, 26578], [26579, 26581], [26582, 26585], [26586, 26593], [26594, 26597], [26598, 26607], [26608, 26610], [26611, 26614], [26615, 26622], [26623, 26625], [26626, 26633], [26634, 26636], [26636, 26637]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.11454401165246964, {u'tokens': [u'Years', u'later', u'she', u'compared', u'Lincoln', u'to', u'her', u'own', u'son', u',', u'saying', u'``', u'Both', u'were', u'good', u'boys', u',', u'but', u'I', u'must', u'say', u'--', u'both', u'now', u'being', u'dead', u'that', u'Abe', u'was', u'the', u'best', u'boy', u'I', u'ever', u'saw', u'or', u'ever', u'expect', u'to', u'see', u'.', u"''"], u'lemmas': [u'year', u'later', u'she', u'compare', u'Lincoln', u'to', u'she', u'own', u'son', u',', u'say', u'``', u'both', u'be', u'good', u'boy', u',', u'but', u'I', u'must', u'say', u'--', u'both', u'now', u'be', u'dead', u'that', u'abe', u'be', u'the', u'best', u'boy', u'I', u'ever', u'see', u'or', u'ever', u'expect', u'to', u'see', u'.', u"''"], u'pos': [u'NNS', u'RB', u'PRP', u'VBD', u'NNP', u'TO', u'PRP$', u'JJ', u'NN', u',', u'VBG', u'``', u'CC', u'VBD', u'JJ', u'NNS', u',', u'CC', u'PRP', u'MD', u'VB', u':', u'DT', u'RB', u'VBG', u'JJ', u'IN', u'NN', u'VBD', u'DT', u'JJS', u'NN', u'PRP', u'RB', u'VBD', u'CC', u'RB', u'VBP', u'TO', u'VB', u'.', u"''"], u'char_offsets': [[5908, 5913], [5914, 5919], [5920, 5923], [5924, 5932], [5933, 5940], [5941, 5943], [5944, 5947], [5948, 5951], [5952, 5955], [5955, 5956], [5957, 5963], [5964, 5965], [5965, 5969], [5970, 5974], [5975, 5979], [5980, 5984], [5984, 5985], [5986, 5989], [5990, 5991], [5992, 5996], [5997, 6000], [6001, 6002], [6003, 6007], [6008, 6011], [6012, 6017], [6018, 6022], [6023, 6027], [6028, 6031], [6032, 6035], [6036, 6039], [6040, 6044], [6045, 6048], [6049, 6050], [6051, 6055], [6056, 6059], [6060, 6062], [6063, 6067], [6068, 6074], [6075, 6077], [6078, 6081], [6081, 6082], [6082, 6083]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'alton'])
candidate Sentence: (0.112503282725811, {u'tokens': [u'We', u'Are', u'Lincoln', u'Men', u':', u'Abraham', u'Lincoln', u'and', u'His', u'Friends', u'Simon', u'&', u'Schuster', u',', u'-LRB-', u'2003', u'-RRB-', u'.'], u'lemmas': [u'we', u'be', u'Lincoln', u'Men', u':', u'Abraham', u'Lincoln', u'and', u'he', u'Friends', u'Simon', u'&', u'Schuster', u',', u'-lrb-', u'2003', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBP', u'NNP', u'NNPS', u':', u'NNP', u'NNP', u'CC', u'PRP$', u'NNPS', u'NNP', u'CC', u'NNP', u',', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[60111, 60113], [60114, 60117], [60118, 60125], [60126, 60129], [60129, 60130], [60131, 60138], [60139, 60146], [60147, 60150], [60151, 60154], [60155, 60162], [60163, 60168], [60169, 60170], [60171, 60179], [60179, 60180], [60181, 60182], [60182, 60186], [60186, 60187], [60187, 60188]]}) 
answer: set([u'sangamon', u'represent', u'railroad', u'ever', u'alton'])
candidate Sentence: (0.10541266947984695, {u'tokens': [u'The', u'following', u'year', u',', u'when', u'his', u'father', u'relocated', u'the', u'family', u'to', u'a', u'new', u'homestead', u'in', u'Coles', u'County', u',', u'Illinois', u',', u'twenty-two-year-old', u'Lincoln', u'struck', u'out', u'on', u'his', u'own', u',', u'canoeing', u'down', u'the', u'Sangamon', u'River', u'to', u'the', u'village', u'of', u'New', u'Salem', u'in', u'Sangamon', u'County', u'.'], u'lemmas': [u'the', u'following', u'year', u',', u'when', u'he', u'father', u'relocate', u'the', u'family', u'to', u'a', u'new', u'homestead', u'in', u'Coles', u'County', u',', u'Illinois', u',', u'twenty-two-year-old', u'Lincoln', u'strike', u'out', u'on', u'he', u'own', u',', u'canoe', u'down', u'the', u'Sangamon', u'River', u'to', u'the', u'village', u'of', u'New', u'Salem', u'in', u'Sangamon', u'County', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'WRB', u'PRP$', u'NN', u'VBD', u'DT', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'JJ', u'NNP', u'VBD', u'RP', u'IN', u'PRP$', u'JJ', u',', u'VBG', u'RP', u'DT', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[6645, 6648], [6649, 6658], [6659, 6663], [6663, 6664], [6665, 6669], [6670, 6673], [6674, 6680], [6681, 6690], [6691, 6694], [6695, 6701], [6702, 6704], [6705, 6706], [6707, 6710], [6711, 6720], [6721, 6723], [6724, 6729], [6730, 6736], [6736, 6737], [6738, 6746], [6746, 6747], [6748, 6767], [6768, 6775], [6776, 6782], [6783, 6786], [6787, 6789], [6790, 6793], [6794, 6797], [6797, 6798], [6799, 6807], [6808, 6812], [6813, 6816], [6817, 6825], [6826, 6831], [6832, 6834], [6835, 6838], [6839, 6846], [6847, 6849], [6850, 6853], [6854, 6859], [6860, 6862], [6863, 6871], [6872, 6878], [6878, 6879]]}) 
answer: set([u'represent', u'railroad', u'ever', u'alton'])

Did Lincoln ever represent Alton & Sangamon Railroad?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa4fb90>.answer
_____________________________ test_yesno[param19] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa836c8>, (<src.tfidf.TF_IDF object at 0x10a153450>, set(['beetle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa836c8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41371780633926392, {u'tokens': [u'Beetles', u"'", u'antennae', u'are', u'primarily', u'organs', u'of', u'smell', u',', u'but', u'may', u'also', u'be', u'used', u'to', u'feel', u'out', u'a', u'beetle', u"'s", u'environment', u'physically', u'.'], u'lemmas': [u'Beetles', u"'", u'antenna', u'be', u'primarily', u'organ', u'of', u'smell', u',', u'but', u'may', u'also', u'be', u'use', u'to', u'feel', u'out', u'a', u'beetle', u"'s", u'environment', u'physically', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBP', u'RB', u'NNS', u'IN', u'NN', u',', u'CC', u'MD', u'RB', u'VB', u'VBN', u'TO', u'VB', u'RP', u'DT', u'NN', u'POS', u'NN', u'RB', u'.'], u'char_offsets': [[5441, 5448], [5448, 5449], [5450, 5458], [5459, 5462], [5463, 5472], [5473, 5479], [5480, 5482], [5483, 5488], [5488, 5489], [5490, 5493], [5494, 5497], [5498, 5502], [5503, 5505], [5506, 5510], [5511, 5513], [5514, 5518], [5519, 5522], [5523, 5524], [5525, 5531], [5531, 5533], [5534, 5545], [5546, 5556], [5556, 5557]]}) 
answer: set([u'function', u'antennae'])
candidate Sentence: (0.29090780019760132, {u'tokens': [u'The', u'general', u'anatomy', u'of', u'beetles', u'is', u'quite', u'uniform', u',', u'although', u'specific', u'organs', u'and', u'appendages', u'may', u'vary', u'greatly', u'in', u'appearance', u'and', u'function', u'between', u'the', u'many', u'families', u'in', u'the', u'order', u'.'], u'lemmas': [u'the', u'general', u'anatomy', u'of', u'beetle', u'be', u'quite', u'uniform', u',', u'although', u'specific', u'organ', u'and', u'appendage', u'may', u'vary', u'greatly', u'in', u'appearance', u'and', u'function', u'between', u'the', u'many', u'family', u'in', u'the', u'order', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'RB', u'JJ', u',', u'IN', u'JJ', u'NNS', u'CC', u'NNS', u'MD', u'VB', u'RB', u'IN', u'NN', u'CC', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2317, 2320], [2321, 2328], [2329, 2336], [2337, 2339], [2340, 2347], [2348, 2350], [2351, 2356], [2357, 2364], [2364, 2365], [2366, 2374], [2375, 2383], [2384, 2390], [2391, 2394], [2395, 2405], [2406, 2409], [2410, 2414], [2415, 2422], [2423, 2425], [2426, 2436], [2437, 2440], [2441, 2449], [2450, 2457], [2458, 2461], [2462, 2466], [2467, 2475], [2476, 2478], [2479, 2482], [2483, 2488], [2488, 2489]]}) 
answer: set([u'smell', u'antennae', u'primarily'])
candidate Sentence: (0.20100252330303192, {u'tokens': [u'Smell', u'is', u'thought', u'to', u'be', u'important', u'in', u'the', u'location', u'of', u'a', u'mate', u'.'], u'lemmas': [u'smell', u'be', u'think', u'to', u'be', u'important', u'in', u'the', u'location', u'of', u'a', u'mate', u'.'], u'pos': [u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10425, 10430], [10431, 10433], [10434, 10441], [10442, 10444], [10445, 10447], [10448, 10457], [10458, 10460], [10461, 10464], [10465, 10473], [10474, 10476], [10477, 10478], [10479, 10483], [10483, 10484]]}) 
answer: set([u'function', u'organ', u'antennae', u'primarily'])
candidate Sentence: (0.14314641058444977, {u'tokens': [u'Ground', u'beetles', u'and', u'rove', u'beetles', u'-LRB-', u'family', u'Staphylinidae', u'-RRB-', u',', u'among', u'others', u',', u'are', u'primarily', u'carnivorous', u'and', u'will', u'catch', u'and', u'consume', u'many', u'other', u'arthropods', u'and', u'small', u'prey', u'such', u'as', u'earthworms', u'and', u'snails', u'.'], u'lemmas': [u'ground', u'beetle', u'and', u'rove', u'beetle', u'-lrb-', u'family', u'staphylinida', u'-rrb-', u',', u'among', u'other', u',', u'be', u'primarily', u'carnivorous', u'and', u'will', u'catch', u'and', u'consume', u'many', u'other', u'arthropod', u'and', u'small', u'prey', u'such', u'as', u'earthworm', u'and', u'snail', u'.'], u'pos': [u'NN', u'NNS', u'CC', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'IN', u'NNS', u',', u'VBP', u'RB', u'JJ', u'CC', u'MD', u'VB', u'CC', u'VB', u'JJ', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'JJ', u'IN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[13345, 13351], [13352, 13359], [13360, 13363], [13364, 13368], [13369, 13376], [13377, 13378], [13378, 13384], [13385, 13398], [13398, 13399], [13399, 13400], [13401, 13406], [13407, 13413], [13413, 13414], [13415, 13418], [13419, 13428], [13429, 13440], [13441, 13444], [13445, 13449], [13450, 13455], [13456, 13459], [13460, 13467], [13468, 13472], [13473, 13478], [13479, 13489], [13490, 13493], [13494, 13499], [13500, 13504], [13505, 13509], [13510, 13512], [13513, 13523], [13524, 13527], [13528, 13534], [13534, 13535]]}) 
answer: set([u'function', u'smell', u'organ', u'antennae'])
candidate Sentence: (0.053873352706432343, {u'tokens': [u'As', u'well', u'as', u'potatoes', u',', u'suitable', u'hosts', u'can', u'be', u'a', u'number', u'of', u'plants', u'from', u'the', u'potato', u'family', u'-LRB-', u'Solanaceae', u'-RRB-', u',', u'such', u'as', u'nightshade', u',', u'tomato', u',', u'aubergine', u'and', u'capsicum', u'.'], u'lemmas': [u'as', u'well', u'as', u'potato', u',', u'suitable', u'host', u'can', u'be', u'a', u'number', u'of', u'plant', u'from', u'the', u'potato', u'family', u'-lrb-', u'solanacea', u'-rrb-', u',', u'such', u'as', u'nightshade', u',', u'tomato', u',', u'aubergine', u'and', u'capsicum', u'.'], u'pos': [u'RB', u'RB', u'IN', u'NNS', u',', u'JJ', u'NNS', u'MD', u'VB', u'DT', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[16960, 16962], [16963, 16967], [16968, 16970], [16971, 16979], [16979, 16980], [16981, 16989], [16990, 16995], [16996, 16999], [17000, 17002], [17003, 17004], [17005, 17011], [17012, 17014], [17015, 17021], [17022, 17026], [17027, 17030], [17031, 17037], [17038, 17044], [17045, 17046], [17046, 17056], [17056, 17057], [17057, 17058], [17059, 17063], [17064, 17066], [17067, 17077], [17077, 17078], [17079, 17085], [17085, 17086], [17087, 17096], [17097, 17100], [17101, 17109], [17109, 17110]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.051135074347257614, {u'tokens': [u'The', u'larval', u'period', u'varies', u'between', u'species', u'but', u'can', u'be', u'as', u'long', u'as', u'several', u'years', u'.'], u'lemmas': [u'the', u'larval', u'period', u'vary', u'between', u'species', u'but', u'can', u'be', u'as', u'long', u'as', u'several', u'year', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'NNS', u'CC', u'MD', u'VB', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[8373, 8376], [8377, 8383], [8384, 8390], [8391, 8397], [8398, 8405], [8406, 8413], [8414, 8417], [8418, 8421], [8422, 8424], [8425, 8427], [8428, 8432], [8433, 8435], [8436, 8443], [8444, 8449], [8449, 8450]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.045177459716796875, {u'tokens': [u'Beetles', u'in', u'the', u'families', u'of', u'the', u'Scarabaeoidea', u'have', u'short', u',', u'thick', u'larvae', u'described', u'as', u'scarabaeiform', u',', u'but', u'more', u'commonly', u'known', u'as', u'grubs', u'.'], u'lemmas': [u'Beetles', u'in', u'the', u'family', u'of', u'the', u'Scarabaeoidea', u'have', u'short', u',', u'thick', u'larva', u'describe', u'as', u'scarabaeiform', u',', u'but', u'more', u'commonly', u'know', u'as', u'grub', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'VBP', u'JJ', u',', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u',', u'CC', u'RBR', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[9163, 9170], [9171, 9173], [9174, 9177], [9178, 9186], [9187, 9189], [9190, 9193], [9194, 9207], [9208, 9212], [9213, 9218], [9218, 9219], [9220, 9225], [9226, 9232], [9233, 9242], [9243, 9245], [9246, 9259], [9259, 9260], [9261, 9264], [9265, 9269], [9270, 9278], [9279, 9284], [9285, 9287], [9288, 9293], [9293, 9294]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.042495165020227432, {u'tokens': [u'Some', u'elateriform', u'larvae', u'of', u'click', u'beetles', u'are', u'known', u'as', u'wireworms', u'.'], u'lemmas': [u'some', u'elateriform', u'larva', u'of', u'click', u'beetle', u'be', u'know', u'as', u'wireworm', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'VBP', u'NNS', u'VBP', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[9098, 9102], [9103, 9114], [9115, 9121], [9122, 9124], [9125, 9130], [9131, 9138], [9139, 9142], [9143, 9148], [9149, 9151], [9152, 9161], [9161, 9162]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.035649616271257401, {u'tokens': [u'This', u'can', u'range', u'from', u'dung', u',', u'which', u'is', u'consumed', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetles', u'-LRB-', u'family', u'Scarabaeidae', u'-RRB-', u',', u'to', u'dead', u'animals', u',', u'which', u'are', u'eaten', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetles', u'-LRB-', u'family', u'Silphidae', u'-RRB-', u'.'], u'lemmas': [u'this', u'can', u'range', u'from', u'dung', u',', u'which', u'be', u'consume', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetle', u'-lrb-', u'family', u'scarabaeida', u'-rrb-', u',', u'to', u'dead', u'animal', u',', u'which', u'be', u'eat', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetle', u'-lrb-', u'family', u'silphida', u'-rrb-', u'.'], u'pos': [u'DT', u'MD', u'VB', u'IN', u'NN', u',', u'WDT', u'VBZ', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'JJ', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'TO', u'JJ', u'NNS', u',', u'WDT', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13709, 13713], [13714, 13717], [13718, 13723], [13724, 13728], [13729, 13733], [13733, 13734], [13735, 13740], [13741, 13743], [13744, 13752], [13753, 13755], [13756, 13768], [13769, 13776], [13777, 13781], [13782, 13784], [13785, 13792], [13793, 13799], [13800, 13807], [13808, 13809], [13809, 13815], [13816, 13828], [13828, 13829], [13829, 13830], [13831, 13833], [13834, 13838], [13839, 13846], [13846, 13847], [13848, 13853], [13854, 13857], [13858, 13863], [13864, 13866], [13867, 13879], [13880, 13887], [13888, 13892], [13893, 13895], [13896, 13899], [13900, 13907], [13908, 13915], [13916, 13917], [13917, 13923], [13924, 13933], [13933, 13934], [13934, 13935]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.034249875694513321, {u'tokens': [u'This', u'defence', u'can', u'be', u'found', u'to', u'a', u'lesser', u'extent', u'in', u'other', u'beetle', u'families', u',', u'such', u'as', u'the', u'scarab', u'beetles', u'.'], u'lemmas': [u'this', u'defence', u'can', u'be', u'find', u'to', u'a', u'lesser', u'extent', u'in', u'other', u'beetle', u'family', u',', u'such', u'as', u'the', u'scarab', u'beetle', u'.'], u'pos': [u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'DT', u'JJR', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[12223, 12227], [12228, 12235], [12236, 12239], [12240, 12242], [12243, 12248], [12249, 12251], [12252, 12253], [12254, 12260], [12261, 12267], [12268, 12270], [12271, 12276], [12277, 12283], [12284, 12292], [12292, 12293], [12294, 12298], [12299, 12301], [12302, 12305], [12306, 12312], [12313, 12320], [12320, 12321]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])

Do beetles antennae function primarily as organs of smell?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa836c8>.answer
_____________________________ test_yesno[param20] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83710>, (<src.tfidf.TF_IDF object at 0x10a153450>, set(['beetle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83710>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41371780633926392, {u'tokens': [u'Beetles', u"'", u'antennae', u'are', u'primarily', u'organs', u'of', u'smell', u',', u'but', u'may', u'also', u'be', u'used', u'to', u'feel', u'out', u'a', u'beetle', u"'s", u'environment', u'physically', u'.'], u'lemmas': [u'Beetles', u"'", u'antenna', u'be', u'primarily', u'organ', u'of', u'smell', u',', u'but', u'may', u'also', u'be', u'use', u'to', u'feel', u'out', u'a', u'beetle', u"'s", u'environment', u'physically', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBP', u'RB', u'NNS', u'IN', u'NN', u',', u'CC', u'MD', u'RB', u'VB', u'VBN', u'TO', u'VB', u'RP', u'DT', u'NN', u'POS', u'NN', u'RB', u'.'], u'char_offsets': [[5441, 5448], [5448, 5449], [5450, 5458], [5459, 5462], [5463, 5472], [5473, 5479], [5480, 5482], [5483, 5488], [5488, 5489], [5490, 5493], [5494, 5497], [5498, 5502], [5503, 5505], [5506, 5510], [5511, 5513], [5514, 5518], [5519, 5522], [5523, 5524], [5525, 5531], [5531, 5533], [5534, 5545], [5546, 5556], [5556, 5557]]}) 
answer: set([u'function', u'antennae'])
candidate Sentence: (0.29090780019760132, {u'tokens': [u'The', u'general', u'anatomy', u'of', u'beetles', u'is', u'quite', u'uniform', u',', u'although', u'specific', u'organs', u'and', u'appendages', u'may', u'vary', u'greatly', u'in', u'appearance', u'and', u'function', u'between', u'the', u'many', u'families', u'in', u'the', u'order', u'.'], u'lemmas': [u'the', u'general', u'anatomy', u'of', u'beetle', u'be', u'quite', u'uniform', u',', u'although', u'specific', u'organ', u'and', u'appendage', u'may', u'vary', u'greatly', u'in', u'appearance', u'and', u'function', u'between', u'the', u'many', u'family', u'in', u'the', u'order', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'RB', u'JJ', u',', u'IN', u'JJ', u'NNS', u'CC', u'NNS', u'MD', u'VB', u'RB', u'IN', u'NN', u'CC', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2317, 2320], [2321, 2328], [2329, 2336], [2337, 2339], [2340, 2347], [2348, 2350], [2351, 2356], [2357, 2364], [2364, 2365], [2366, 2374], [2375, 2383], [2384, 2390], [2391, 2394], [2395, 2405], [2406, 2409], [2410, 2414], [2415, 2422], [2423, 2425], [2426, 2436], [2437, 2440], [2441, 2449], [2450, 2457], [2458, 2461], [2462, 2466], [2467, 2475], [2476, 2478], [2479, 2482], [2483, 2488], [2488, 2489]]}) 
answer: set([u'smell', u'antennae', u'primarily'])
candidate Sentence: (0.20100252330303192, {u'tokens': [u'Smell', u'is', u'thought', u'to', u'be', u'important', u'in', u'the', u'location', u'of', u'a', u'mate', u'.'], u'lemmas': [u'smell', u'be', u'think', u'to', u'be', u'important', u'in', u'the', u'location', u'of', u'a', u'mate', u'.'], u'pos': [u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10425, 10430], [10431, 10433], [10434, 10441], [10442, 10444], [10445, 10447], [10448, 10457], [10458, 10460], [10461, 10464], [10465, 10473], [10474, 10476], [10477, 10478], [10479, 10483], [10483, 10484]]}) 
answer: set([u'function', u'organ', u'antennae', u'primarily'])
candidate Sentence: (0.14314641058444977, {u'tokens': [u'Ground', u'beetles', u'and', u'rove', u'beetles', u'-LRB-', u'family', u'Staphylinidae', u'-RRB-', u',', u'among', u'others', u',', u'are', u'primarily', u'carnivorous', u'and', u'will', u'catch', u'and', u'consume', u'many', u'other', u'arthropods', u'and', u'small', u'prey', u'such', u'as', u'earthworms', u'and', u'snails', u'.'], u'lemmas': [u'ground', u'beetle', u'and', u'rove', u'beetle', u'-lrb-', u'family', u'staphylinida', u'-rrb-', u',', u'among', u'other', u',', u'be', u'primarily', u'carnivorous', u'and', u'will', u'catch', u'and', u'consume', u'many', u'other', u'arthropod', u'and', u'small', u'prey', u'such', u'as', u'earthworm', u'and', u'snail', u'.'], u'pos': [u'NN', u'NNS', u'CC', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'IN', u'NNS', u',', u'VBP', u'RB', u'JJ', u'CC', u'MD', u'VB', u'CC', u'VB', u'JJ', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'JJ', u'IN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[13345, 13351], [13352, 13359], [13360, 13363], [13364, 13368], [13369, 13376], [13377, 13378], [13378, 13384], [13385, 13398], [13398, 13399], [13399, 13400], [13401, 13406], [13407, 13413], [13413, 13414], [13415, 13418], [13419, 13428], [13429, 13440], [13441, 13444], [13445, 13449], [13450, 13455], [13456, 13459], [13460, 13467], [13468, 13472], [13473, 13478], [13479, 13489], [13490, 13493], [13494, 13499], [13500, 13504], [13505, 13509], [13510, 13512], [13513, 13523], [13524, 13527], [13528, 13534], [13534, 13535]]}) 
answer: set([u'function', u'smell', u'organ', u'antennae'])
candidate Sentence: (0.053873352706432343, {u'tokens': [u'As', u'well', u'as', u'potatoes', u',', u'suitable', u'hosts', u'can', u'be', u'a', u'number', u'of', u'plants', u'from', u'the', u'potato', u'family', u'-LRB-', u'Solanaceae', u'-RRB-', u',', u'such', u'as', u'nightshade', u',', u'tomato', u',', u'aubergine', u'and', u'capsicum', u'.'], u'lemmas': [u'as', u'well', u'as', u'potato', u',', u'suitable', u'host', u'can', u'be', u'a', u'number', u'of', u'plant', u'from', u'the', u'potato', u'family', u'-lrb-', u'solanacea', u'-rrb-', u',', u'such', u'as', u'nightshade', u',', u'tomato', u',', u'aubergine', u'and', u'capsicum', u'.'], u'pos': [u'RB', u'RB', u'IN', u'NNS', u',', u'JJ', u'NNS', u'MD', u'VB', u'DT', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[16960, 16962], [16963, 16967], [16968, 16970], [16971, 16979], [16979, 16980], [16981, 16989], [16990, 16995], [16996, 16999], [17000, 17002], [17003, 17004], [17005, 17011], [17012, 17014], [17015, 17021], [17022, 17026], [17027, 17030], [17031, 17037], [17038, 17044], [17045, 17046], [17046, 17056], [17056, 17057], [17057, 17058], [17059, 17063], [17064, 17066], [17067, 17077], [17077, 17078], [17079, 17085], [17085, 17086], [17087, 17096], [17097, 17100], [17101, 17109], [17109, 17110]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.051135074347257614, {u'tokens': [u'The', u'larval', u'period', u'varies', u'between', u'species', u'but', u'can', u'be', u'as', u'long', u'as', u'several', u'years', u'.'], u'lemmas': [u'the', u'larval', u'period', u'vary', u'between', u'species', u'but', u'can', u'be', u'as', u'long', u'as', u'several', u'year', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'NNS', u'CC', u'MD', u'VB', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[8373, 8376], [8377, 8383], [8384, 8390], [8391, 8397], [8398, 8405], [8406, 8413], [8414, 8417], [8418, 8421], [8422, 8424], [8425, 8427], [8428, 8432], [8433, 8435], [8436, 8443], [8444, 8449], [8449, 8450]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.045177459716796875, {u'tokens': [u'Beetles', u'in', u'the', u'families', u'of', u'the', u'Scarabaeoidea', u'have', u'short', u',', u'thick', u'larvae', u'described', u'as', u'scarabaeiform', u',', u'but', u'more', u'commonly', u'known', u'as', u'grubs', u'.'], u'lemmas': [u'Beetles', u'in', u'the', u'family', u'of', u'the', u'Scarabaeoidea', u'have', u'short', u',', u'thick', u'larva', u'describe', u'as', u'scarabaeiform', u',', u'but', u'more', u'commonly', u'know', u'as', u'grub', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'VBP', u'JJ', u',', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u',', u'CC', u'RBR', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[9163, 9170], [9171, 9173], [9174, 9177], [9178, 9186], [9187, 9189], [9190, 9193], [9194, 9207], [9208, 9212], [9213, 9218], [9218, 9219], [9220, 9225], [9226, 9232], [9233, 9242], [9243, 9245], [9246, 9259], [9259, 9260], [9261, 9264], [9265, 9269], [9270, 9278], [9279, 9284], [9285, 9287], [9288, 9293], [9293, 9294]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.042495165020227432, {u'tokens': [u'Some', u'elateriform', u'larvae', u'of', u'click', u'beetles', u'are', u'known', u'as', u'wireworms', u'.'], u'lemmas': [u'some', u'elateriform', u'larva', u'of', u'click', u'beetle', u'be', u'know', u'as', u'wireworm', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'VBP', u'NNS', u'VBP', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[9098, 9102], [9103, 9114], [9115, 9121], [9122, 9124], [9125, 9130], [9131, 9138], [9139, 9142], [9143, 9148], [9149, 9151], [9152, 9161], [9161, 9162]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.035649616271257401, {u'tokens': [u'This', u'can', u'range', u'from', u'dung', u',', u'which', u'is', u'consumed', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetles', u'-LRB-', u'family', u'Scarabaeidae', u'-RRB-', u',', u'to', u'dead', u'animals', u',', u'which', u'are', u'eaten', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetles', u'-LRB-', u'family', u'Silphidae', u'-RRB-', u'.'], u'lemmas': [u'this', u'can', u'range', u'from', u'dung', u',', u'which', u'be', u'consume', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetle', u'-lrb-', u'family', u'scarabaeida', u'-rrb-', u',', u'to', u'dead', u'animal', u',', u'which', u'be', u'eat', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetle', u'-lrb-', u'family', u'silphida', u'-rrb-', u'.'], u'pos': [u'DT', u'MD', u'VB', u'IN', u'NN', u',', u'WDT', u'VBZ', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'JJ', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'TO', u'JJ', u'NNS', u',', u'WDT', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13709, 13713], [13714, 13717], [13718, 13723], [13724, 13728], [13729, 13733], [13733, 13734], [13735, 13740], [13741, 13743], [13744, 13752], [13753, 13755], [13756, 13768], [13769, 13776], [13777, 13781], [13782, 13784], [13785, 13792], [13793, 13799], [13800, 13807], [13808, 13809], [13809, 13815], [13816, 13828], [13828, 13829], [13829, 13830], [13831, 13833], [13834, 13838], [13839, 13846], [13846, 13847], [13848, 13853], [13854, 13857], [13858, 13863], [13864, 13866], [13867, 13879], [13880, 13887], [13888, 13892], [13893, 13895], [13896, 13899], [13900, 13907], [13908, 13915], [13916, 13917], [13917, 13923], [13924, 13933], [13933, 13934], [13934, 13935]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])
candidate Sentence: (0.034249875694513321, {u'tokens': [u'This', u'defence', u'can', u'be', u'found', u'to', u'a', u'lesser', u'extent', u'in', u'other', u'beetle', u'families', u',', u'such', u'as', u'the', u'scarab', u'beetles', u'.'], u'lemmas': [u'this', u'defence', u'can', u'be', u'find', u'to', u'a', u'lesser', u'extent', u'in', u'other', u'beetle', u'family', u',', u'such', u'as', u'the', u'scarab', u'beetle', u'.'], u'pos': [u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'DT', u'JJR', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[12223, 12227], [12228, 12235], [12236, 12239], [12240, 12242], [12243, 12248], [12249, 12251], [12252, 12253], [12254, 12260], [12261, 12267], [12268, 12270], [12271, 12276], [12277, 12283], [12284, 12292], [12292, 12293], [12294, 12298], [12299, 12301], [12302, 12305], [12306, 12312], [12313, 12320], [12320, 12321]]}) 
answer: set([u'function', u'primarily', u'smell', u'antennae', u'organ'])

Do beetles antennae function primarily as organs of smell?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83710>.answer
_____________________________ test_yesno[param21] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83758>, (<src.tfidf.TF_IDF object at 0x10a153450>, set(['beetle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83758>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3607841432094574, {u'tokens': [u'Certain', u'species', u'are', u'agricultural', u'pests', u',', u'such', u'as', u'the', u'Colorado', u'potato', u'beetle', u'Leptinotarsa', u'decemlineata', u',', u'the', u'boll', u'weevil', u'Anthonomus', u'grandis', u',', u'the', u'red', u'flour', u'beetle', u'Tribolium', u'castaneum', u',', u'and', u'the', u'mungbean', u'or', u'cowpea', u'beetle', u'Callosobruchus', u'maculatus', u',', u'while', u'other', u'species', u'of', u'beetles', u'are', u'important', u'controls', u'of', u'agricultural', u'pests', u'.'], u'lemmas': [u'certain', u'species', u'be', u'agricultural', u'pest', u',', u'such', u'as', u'the', u'Colorado', u'potato', u'beetle', u'leptinotarsa', u'decemlinea', u',', u'the', u'boll', u'weevil', u'anthonomus', u'grandi', u',', u'the', u'red', u'flour', u'beetle', u'tribolium', u'castaneum', u',', u'and', u'the', u'mungbean', u'or', u'cowpea', u'beetle', u'callosobruchus', u'maculatus', u',', u'while', u'other', u'species', u'of', u'beetle', u'be', u'important', u'control', u'of', u'agricultural', u'pest', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NNP', u'NN', u'NN', u'NN', u'NN', u',', u'DT', u'NN', u'NN', u'NN', u'NN', u',', u'DT', u'JJ', u'NN', u'NN', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'NN', u'NN', u'NN', u',', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[972, 979], [980, 987], [988, 991], [992, 1004], [1005, 1010], [1010, 1011], [1012, 1016], [1017, 1019], [1020, 1023], [1024, 1032], [1033, 1039], [1040, 1046], [1047, 1059], [1060, 1072], [1072, 1073], [1074, 1077], [1078, 1082], [1083, 1089], [1090, 1100], [1101, 1108], [1108, 1109], [1110, 1113], [1114, 1117], [1118, 1123], [1124, 1130], [1131, 1140], [1141, 1150], [1150, 1151], [1152, 1155], [1156, 1159], [1160, 1168], [1169, 1171], [1172, 1178], [1179, 1185], [1186, 1200], [1201, 1210], [1210, 1211], [1212, 1217], [1218, 1223], [1224, 1231], [1232, 1234], [1235, 1242], [1243, 1246], [1247, 1256], [1257, 1265], [1266, 1268], [1269, 1281], [1282, 1287], [1287, 1288]]}) 
answer: set([u'consider'])
candidate Sentence: (0.22654370963573456, {u'tokens': [u'Some', u'tribal', u'groups', u',', u'particularly', u'in', u'tropical', u'parts', u'of', u'the', u'world', u',', u'use', u'the', u'colourful', u',', u'iridescent', u'elytra', u'of', u'certain', u'beetles', u',', u'especially', u'certain', u'Scarabaeidae', u',', u'in', u'ceremonies', u'and', u'as', u'adornment', u'.'], u'lemmas': [u'some', u'tribal', u'group', u',', u'particularly', u'in', u'tropical', u'part', u'of', u'the', u'world', u',', u'use', u'the', u'colourful', u',', u'iridescent', u'elytra', u'of', u'certain', u'beetle', u',', u'especially', u'certain', u'Scarabaeidae', u',', u'in', u'ceremony', u'and', u'as', u'adornment', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u',', u'RB', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'VBP', u'DT', u'JJ', u',', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u',', u'RB', u'JJ', u'NNP', u',', u'IN', u'NNS', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[19692, 19696], [19697, 19703], [19704, 19710], [19710, 19711], [19712, 19724], [19725, 19727], [19728, 19736], [19737, 19742], [19743, 19745], [19746, 19749], [19750, 19755], [19755, 19756], [19757, 19760], [19761, 19764], [19765, 19774], [19774, 19775], [19776, 19786], [19787, 19793], [19794, 19796], [19797, 19804], [19805, 19812], [19812, 19813], [19814, 19824], [19825, 19832], [19833, 19845], [19845, 19846], [19847, 19849], [19850, 19860], [19861, 19864], [19865, 19867], [19868, 19877], [19877, 19878]]}) 
answer: set([u'pest', u'consider', u'species'])
candidate Sentence: (0.19773487746715546, {u'tokens': [u'Colorado', u'potato', u'beetle', u'-LRB-', u'Leptinotarsa', u'decemlineata', u'-RRB-', u'larvae', u'Many', u'agricultural', u',', u'forestry', u',', u'and', u'household', u'insect', u'pests', u'are', u'beetles', u'.'], u'lemmas': [u'Colorado', u'potato', u'beetle', u'-lrb-', u'leptinotarsa', u'decemlinea', u'-rrb-', u'larva', u'many', u'agricultural', u',', u'forestry', u',', u'and', u'household', u'insect', u'pest', u'be', u'beetle', u'.'], u'pos': [u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'NNS', u'JJ', u'JJ', u',', u'NN', u',', u'CC', u'NN', u'NN', u'NNS', u'VBP', u'NNS', u'.'], u'char_offsets': [[16566, 16574], [16575, 16581], [16582, 16588], [16589, 16590], [16590, 16602], [16603, 16615], [16615, 16616], [16617, 16623], [16624, 16628], [16629, 16641], [16641, 16642], [16643, 16651], [16651, 16652], [16653, 16656], [16657, 16666], [16667, 16673], [16674, 16679], [16680, 16683], [16684, 16691], [16691, 16692]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.17897424101829529, {u'tokens': [u'These', u'include', u'the', u'following', u':', u'*', u'The', u'Colorado', u'potato', u'beetle', u',', u'Leptinotarsa', u'decemlineata', u',', u'is', u'a', u'notorious', u'pest', u'of', u'potato', u'plants', u'.'], u'lemmas': [u'these', u'include', u'the', u'following', u':', u'*', u'the', u'Colorado', u'potato', u'beetle', u',', u'leptinotarsa', u'decemlinea', u',', u'be', u'a', u'notorious', u'pest', u'of', u'potato', u'plant', u'.'], u'pos': [u'DT', u'VBP', u'DT', u'NN', u':', u'SYM', u'DT', u'NNP', u'NN', u'NN', u',', u'NN', u'NN', u',', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[16693, 16698], [16699, 16706], [16707, 16710], [16711, 16720], [16720, 16721], [16722, 16723], [16724, 16727], [16728, 16736], [16737, 16743], [16744, 16750], [16750, 16751], [16752, 16764], [16765, 16777], [16777, 16778], [16779, 16781], [16782, 16783], [16784, 16793], [16794, 16798], [16799, 16801], [16802, 16808], [16809, 16815], [16815, 16816]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.17630085349082947, {u'tokens': [u'This', u'can', u'range', u'from', u'dung', u',', u'which', u'is', u'consumed', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetles', u'-LRB-', u'family', u'Scarabaeidae', u'-RRB-', u',', u'to', u'dead', u'animals', u',', u'which', u'are', u'eaten', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetles', u'-LRB-', u'family', u'Silphidae', u'-RRB-', u'.'], u'lemmas': [u'this', u'can', u'range', u'from', u'dung', u',', u'which', u'be', u'consume', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetle', u'-lrb-', u'family', u'scarabaeida', u'-rrb-', u',', u'to', u'dead', u'animal', u',', u'which', u'be', u'eat', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetle', u'-lrb-', u'family', u'silphida', u'-rrb-', u'.'], u'pos': [u'DT', u'MD', u'VB', u'IN', u'NN', u',', u'WDT', u'VBZ', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'JJ', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'TO', u'JJ', u'NNS', u',', u'WDT', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13709, 13713], [13714, 13717], [13718, 13723], [13724, 13728], [13729, 13733], [13733, 13734], [13735, 13740], [13741, 13743], [13744, 13752], [13753, 13755], [13756, 13768], [13769, 13776], [13777, 13781], [13782, 13784], [13785, 13792], [13793, 13799], [13800, 13807], [13808, 13809], [13809, 13815], [13816, 13828], [13828, 13829], [13829, 13830], [13831, 13833], [13834, 13838], [13839, 13846], [13846, 13847], [13848, 13853], [13854, 13857], [13858, 13863], [13864, 13866], [13867, 13879], [13880, 13887], [13888, 13892], [13893, 13895], [13896, 13899], [13900, 13907], [13908, 13915], [13916, 13917], [13917, 13923], [13924, 13933], [13933, 13934], [13934, 13935]]}) 
answer: set([u'pest', u'consider'])
candidate Sentence: (0.1692650318145752, {u'tokens': [u'It', u'is', u'thought', u'that', u'the', u'actual', u'introduction', u'of', u'the', u'pest', u'into', u'buildings', u'takes', u'place', u'at', u'the', u'time', u'of', u'construction', u'.'], u'lemmas': [u'it', u'be', u'think', u'that', u'the', u'actual', u'introduction', u'of', u'the', u'pest', u'into', u'building', u'take', u'place', u'at', u'the', u'time', u'of', u'construction', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'VBZ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[17967, 17969], [17970, 17972], [17973, 17980], [17981, 17985], [17986, 17989], [17990, 17996], [17997, 18009], [18010, 18012], [18013, 18016], [18017, 18021], [18022, 18026], [18027, 18036], [18037, 18042], [18043, 18048], [18049, 18051], [18052, 18055], [18056, 18060], [18061, 18063], [18064, 18076], [18076, 18077]]}) 
answer: set([u'certain', u'species', u'consider'])
candidate Sentence: (0.16536036133766174, {u'tokens': [u'Some', u'countries', u'have', u'established', u'laws', u'governing', u'or', u'prohibiting', u'the', u'collection', u'of', u'certain', u'rare', u'-LRB-', u'and', u'often', u'much', u'sought', u'after', u'-RRB-', u'species', u'.'], u'lemmas': [u'some', u'country', u'have', u'establish', u'law', u'govern', u'or', u'prohibit', u'the', u'collection', u'of', u'certain', u'rare', u'-lrb-', u'and', u'often', u'much', u'seek', u'after', u'-rrb-', u'species', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'VBN', u'NNS', u'VBG', u'CC', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'-LRB-', u'CC', u'RB', u'JJ', u'VBN', u'IN', u'-RRB-', u'NNS', u'.'], u'char_offsets': [[20878, 20882], [20883, 20892], [20893, 20897], [20898, 20909], [20910, 20914], [20915, 20924], [20925, 20927], [20928, 20939], [20940, 20943], [20944, 20954], [20955, 20957], [20958, 20965], [20966, 20970], [20971, 20972], [20972, 20975], [20976, 20981], [20982, 20986], [20987, 20993], [20994, 20999], [20999, 21000], [21001, 21008], [21008, 21009]]}) 
answer: set([u'pest', u'consider'])
candidate Sentence: (0.1618034690618515, {u'tokens': [u'Some', u'feed', u'externally', u'on', u'plants', u',', u'such', u'as', u'those', u'of', u'certain', u'leaf', u'beetles', u',', u'while', u'others', u'feed', u'within', u'their', u'food', u'sources', u'.'], u'lemmas': [u'some', u'feed', u'externally', u'on', u'plant', u',', u'such', u'as', u'those', u'of', u'certain', u'leaf', u'beetle', u',', u'while', u'other', u'feed', u'within', u'they', u'food', u'source', u'.'], u'pos': [u'DT', u'NN', u'RB', u'IN', u'NNS', u',', u'JJ', u'IN', u'DT', u'IN', u'JJ', u'NN', u'NNS', u',', u'IN', u'NNS', u'VBP', u'IN', u'PRP$', u'NN', u'NNS', u'.'], u'char_offsets': [[8077, 8081], [8082, 8086], [8087, 8097], [8098, 8100], [8101, 8107], [8107, 8108], [8109, 8113], [8114, 8116], [8117, 8122], [8123, 8125], [8126, 8133], [8134, 8138], [8139, 8146], [8146, 8147], [8148, 8153], [8154, 8160], [8161, 8165], [8166, 8172], [8173, 8178], [8179, 8183], [8184, 8191], [8191, 8192]]}) 
answer: set([u'pest', u'consider', u'species'])
candidate Sentence: (0.14368049800395966, {u'tokens': [u'*', u'The', u'death', u'watch', u'beetle', u',', u'Xestobium', u'rufovillosum', u',', u'-LRB-', u'family', u'Anobiidae', u'-RRB-', u'is', u'of', u'considerable', u'importance', u'as', u'a', u'pest', u'of', u'older', u'wooden', u'buildings', u'in', u'Great', u'Britain', u'.'], u'lemmas': [u'*', u'the', u'death', u'watch', u'beetle', u',', u'xestobium', u'rufovillosum', u',', u'-lrb-', u'family', u'anobiida', u'-rrb-', u'be', u'of', u'considerable', u'importance', u'as', u'a', u'pest', u'of', u'older', u'wooden', u'building', u'in', u'great', u'Britain', u'.'], u'pos': [u'SYM', u'DT', u'NN', u'NN', u'NN', u',', u'NN', u'NN', u',', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJR', u'JJ', u'NNS', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[17706, 17707], [17708, 17711], [17712, 17717], [17718, 17723], [17724, 17730], [17730, 17731], [17732, 17741], [17742, 17754], [17754, 17755], [17756, 17757], [17757, 17763], [17764, 17773], [17773, 17774], [17775, 17777], [17778, 17780], [17781, 17793], [17794, 17804], [17805, 17807], [17808, 17809], [17810, 17814], [17815, 17817], [17818, 17823], [17824, 17830], [17831, 17840], [17841, 17843], [17844, 17849], [17850, 17857], [17857, 17858]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.14100068807601929, {u'tokens': [u'Forty', u'percent', u'of', u'all', u'described', u'insect', u'species', u'are', u'beetles', u'-LRB-', u'about', u'350,000', u'species', u'-RRB-', u',', u'and', u'new', u'species', u'are', u'frequently', u'discovered', u'.'], u'lemmas': [u'forty', u'percent', u'of', u'all', u'describe', u'insect', u'species', u'be', u'beetle', u'-lrb-', u'about', u'350,000', u'species', u'-rrb-', u',', u'and', u'new', u'species', u'be', u'frequently', u'discover', u'.'], u'pos': [u'CD', u'NN', u'IN', u'DT', u'VBN', u'JJ', u'NNS', u'VBP', u'NNS', u'-LRB-', u'IN', u'CD', u'NNS', u'-RRB-', u',', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'.'], u'char_offsets': [[414, 419], [420, 427], [428, 430], [431, 434], [435, 444], [445, 451], [452, 459], [460, 463], [464, 471], [472, 473], [473, 478], [479, 486], [487, 494], [495, 496], [496, 497], [498, 501], [502, 505], [506, 513], [514, 517], [518, 528], [529, 539], [539, 540]]}) 
answer: set([u'certain', u'pest', u'consider'])

Are certain species of beetles considered pests?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83758>.answer
_____________________________ test_yesno[param22] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa837a0>, (<src.tfidf.TF_IDF object at 0x10a153450>, set(['beetle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa837a0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3607841432094574, {u'tokens': [u'Certain', u'species', u'are', u'agricultural', u'pests', u',', u'such', u'as', u'the', u'Colorado', u'potato', u'beetle', u'Leptinotarsa', u'decemlineata', u',', u'the', u'boll', u'weevil', u'Anthonomus', u'grandis', u',', u'the', u'red', u'flour', u'beetle', u'Tribolium', u'castaneum', u',', u'and', u'the', u'mungbean', u'or', u'cowpea', u'beetle', u'Callosobruchus', u'maculatus', u',', u'while', u'other', u'species', u'of', u'beetles', u'are', u'important', u'controls', u'of', u'agricultural', u'pests', u'.'], u'lemmas': [u'certain', u'species', u'be', u'agricultural', u'pest', u',', u'such', u'as', u'the', u'Colorado', u'potato', u'beetle', u'leptinotarsa', u'decemlinea', u',', u'the', u'boll', u'weevil', u'anthonomus', u'grandi', u',', u'the', u'red', u'flour', u'beetle', u'tribolium', u'castaneum', u',', u'and', u'the', u'mungbean', u'or', u'cowpea', u'beetle', u'callosobruchus', u'maculatus', u',', u'while', u'other', u'species', u'of', u'beetle', u'be', u'important', u'control', u'of', u'agricultural', u'pest', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NNP', u'NN', u'NN', u'NN', u'NN', u',', u'DT', u'NN', u'NN', u'NN', u'NN', u',', u'DT', u'JJ', u'NN', u'NN', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'NN', u'NN', u'NN', u',', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[972, 979], [980, 987], [988, 991], [992, 1004], [1005, 1010], [1010, 1011], [1012, 1016], [1017, 1019], [1020, 1023], [1024, 1032], [1033, 1039], [1040, 1046], [1047, 1059], [1060, 1072], [1072, 1073], [1074, 1077], [1078, 1082], [1083, 1089], [1090, 1100], [1101, 1108], [1108, 1109], [1110, 1113], [1114, 1117], [1118, 1123], [1124, 1130], [1131, 1140], [1141, 1150], [1150, 1151], [1152, 1155], [1156, 1159], [1160, 1168], [1169, 1171], [1172, 1178], [1179, 1185], [1186, 1200], [1201, 1210], [1210, 1211], [1212, 1217], [1218, 1223], [1224, 1231], [1232, 1234], [1235, 1242], [1243, 1246], [1247, 1256], [1257, 1265], [1266, 1268], [1269, 1281], [1282, 1287], [1287, 1288]]}) 
answer: set([u'consider'])
candidate Sentence: (0.22654370963573456, {u'tokens': [u'Some', u'tribal', u'groups', u',', u'particularly', u'in', u'tropical', u'parts', u'of', u'the', u'world', u',', u'use', u'the', u'colourful', u',', u'iridescent', u'elytra', u'of', u'certain', u'beetles', u',', u'especially', u'certain', u'Scarabaeidae', u',', u'in', u'ceremonies', u'and', u'as', u'adornment', u'.'], u'lemmas': [u'some', u'tribal', u'group', u',', u'particularly', u'in', u'tropical', u'part', u'of', u'the', u'world', u',', u'use', u'the', u'colourful', u',', u'iridescent', u'elytra', u'of', u'certain', u'beetle', u',', u'especially', u'certain', u'Scarabaeidae', u',', u'in', u'ceremony', u'and', u'as', u'adornment', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u',', u'RB', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'VBP', u'DT', u'JJ', u',', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u',', u'RB', u'JJ', u'NNP', u',', u'IN', u'NNS', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[19692, 19696], [19697, 19703], [19704, 19710], [19710, 19711], [19712, 19724], [19725, 19727], [19728, 19736], [19737, 19742], [19743, 19745], [19746, 19749], [19750, 19755], [19755, 19756], [19757, 19760], [19761, 19764], [19765, 19774], [19774, 19775], [19776, 19786], [19787, 19793], [19794, 19796], [19797, 19804], [19805, 19812], [19812, 19813], [19814, 19824], [19825, 19832], [19833, 19845], [19845, 19846], [19847, 19849], [19850, 19860], [19861, 19864], [19865, 19867], [19868, 19877], [19877, 19878]]}) 
answer: set([u'pest', u'consider', u'species'])
candidate Sentence: (0.19773487746715546, {u'tokens': [u'Colorado', u'potato', u'beetle', u'-LRB-', u'Leptinotarsa', u'decemlineata', u'-RRB-', u'larvae', u'Many', u'agricultural', u',', u'forestry', u',', u'and', u'household', u'insect', u'pests', u'are', u'beetles', u'.'], u'lemmas': [u'Colorado', u'potato', u'beetle', u'-lrb-', u'leptinotarsa', u'decemlinea', u'-rrb-', u'larva', u'many', u'agricultural', u',', u'forestry', u',', u'and', u'household', u'insect', u'pest', u'be', u'beetle', u'.'], u'pos': [u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'NNS', u'JJ', u'JJ', u',', u'NN', u',', u'CC', u'NN', u'NN', u'NNS', u'VBP', u'NNS', u'.'], u'char_offsets': [[16566, 16574], [16575, 16581], [16582, 16588], [16589, 16590], [16590, 16602], [16603, 16615], [16615, 16616], [16617, 16623], [16624, 16628], [16629, 16641], [16641, 16642], [16643, 16651], [16651, 16652], [16653, 16656], [16657, 16666], [16667, 16673], [16674, 16679], [16680, 16683], [16684, 16691], [16691, 16692]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.17897424101829529, {u'tokens': [u'These', u'include', u'the', u'following', u':', u'*', u'The', u'Colorado', u'potato', u'beetle', u',', u'Leptinotarsa', u'decemlineata', u',', u'is', u'a', u'notorious', u'pest', u'of', u'potato', u'plants', u'.'], u'lemmas': [u'these', u'include', u'the', u'following', u':', u'*', u'the', u'Colorado', u'potato', u'beetle', u',', u'leptinotarsa', u'decemlinea', u',', u'be', u'a', u'notorious', u'pest', u'of', u'potato', u'plant', u'.'], u'pos': [u'DT', u'VBP', u'DT', u'NN', u':', u'SYM', u'DT', u'NNP', u'NN', u'NN', u',', u'NN', u'NN', u',', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[16693, 16698], [16699, 16706], [16707, 16710], [16711, 16720], [16720, 16721], [16722, 16723], [16724, 16727], [16728, 16736], [16737, 16743], [16744, 16750], [16750, 16751], [16752, 16764], [16765, 16777], [16777, 16778], [16779, 16781], [16782, 16783], [16784, 16793], [16794, 16798], [16799, 16801], [16802, 16808], [16809, 16815], [16815, 16816]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.17630085349082947, {u'tokens': [u'This', u'can', u'range', u'from', u'dung', u',', u'which', u'is', u'consumed', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetles', u'-LRB-', u'family', u'Scarabaeidae', u'-RRB-', u',', u'to', u'dead', u'animals', u',', u'which', u'are', u'eaten', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetles', u'-LRB-', u'family', u'Silphidae', u'-RRB-', u'.'], u'lemmas': [u'this', u'can', u'range', u'from', u'dung', u',', u'which', u'be', u'consume', u'by', u'coprophagous', u'species', u'such', u'as', u'certain', u'scarab', u'beetle', u'-lrb-', u'family', u'scarabaeida', u'-rrb-', u',', u'to', u'dead', u'animal', u',', u'which', u'be', u'eat', u'by', u'necrophagous', u'species', u'such', u'as', u'the', u'carrion', u'beetle', u'-lrb-', u'family', u'silphida', u'-rrb-', u'.'], u'pos': [u'DT', u'MD', u'VB', u'IN', u'NN', u',', u'WDT', u'VBZ', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'JJ', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'TO', u'JJ', u'NNS', u',', u'WDT', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13709, 13713], [13714, 13717], [13718, 13723], [13724, 13728], [13729, 13733], [13733, 13734], [13735, 13740], [13741, 13743], [13744, 13752], [13753, 13755], [13756, 13768], [13769, 13776], [13777, 13781], [13782, 13784], [13785, 13792], [13793, 13799], [13800, 13807], [13808, 13809], [13809, 13815], [13816, 13828], [13828, 13829], [13829, 13830], [13831, 13833], [13834, 13838], [13839, 13846], [13846, 13847], [13848, 13853], [13854, 13857], [13858, 13863], [13864, 13866], [13867, 13879], [13880, 13887], [13888, 13892], [13893, 13895], [13896, 13899], [13900, 13907], [13908, 13915], [13916, 13917], [13917, 13923], [13924, 13933], [13933, 13934], [13934, 13935]]}) 
answer: set([u'pest', u'consider'])
candidate Sentence: (0.1692650318145752, {u'tokens': [u'It', u'is', u'thought', u'that', u'the', u'actual', u'introduction', u'of', u'the', u'pest', u'into', u'buildings', u'takes', u'place', u'at', u'the', u'time', u'of', u'construction', u'.'], u'lemmas': [u'it', u'be', u'think', u'that', u'the', u'actual', u'introduction', u'of', u'the', u'pest', u'into', u'building', u'take', u'place', u'at', u'the', u'time', u'of', u'construction', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'VBZ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[17967, 17969], [17970, 17972], [17973, 17980], [17981, 17985], [17986, 17989], [17990, 17996], [17997, 18009], [18010, 18012], [18013, 18016], [18017, 18021], [18022, 18026], [18027, 18036], [18037, 18042], [18043, 18048], [18049, 18051], [18052, 18055], [18056, 18060], [18061, 18063], [18064, 18076], [18076, 18077]]}) 
answer: set([u'certain', u'species', u'consider'])
candidate Sentence: (0.16536036133766174, {u'tokens': [u'Some', u'countries', u'have', u'established', u'laws', u'governing', u'or', u'prohibiting', u'the', u'collection', u'of', u'certain', u'rare', u'-LRB-', u'and', u'often', u'much', u'sought', u'after', u'-RRB-', u'species', u'.'], u'lemmas': [u'some', u'country', u'have', u'establish', u'law', u'govern', u'or', u'prohibit', u'the', u'collection', u'of', u'certain', u'rare', u'-lrb-', u'and', u'often', u'much', u'seek', u'after', u'-rrb-', u'species', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'VBN', u'NNS', u'VBG', u'CC', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'-LRB-', u'CC', u'RB', u'JJ', u'VBN', u'IN', u'-RRB-', u'NNS', u'.'], u'char_offsets': [[20878, 20882], [20883, 20892], [20893, 20897], [20898, 20909], [20910, 20914], [20915, 20924], [20925, 20927], [20928, 20939], [20940, 20943], [20944, 20954], [20955, 20957], [20958, 20965], [20966, 20970], [20971, 20972], [20972, 20975], [20976, 20981], [20982, 20986], [20987, 20993], [20994, 20999], [20999, 21000], [21001, 21008], [21008, 21009]]}) 
answer: set([u'pest', u'consider'])
candidate Sentence: (0.1618034690618515, {u'tokens': [u'Some', u'feed', u'externally', u'on', u'plants', u',', u'such', u'as', u'those', u'of', u'certain', u'leaf', u'beetles', u',', u'while', u'others', u'feed', u'within', u'their', u'food', u'sources', u'.'], u'lemmas': [u'some', u'feed', u'externally', u'on', u'plant', u',', u'such', u'as', u'those', u'of', u'certain', u'leaf', u'beetle', u',', u'while', u'other', u'feed', u'within', u'they', u'food', u'source', u'.'], u'pos': [u'DT', u'NN', u'RB', u'IN', u'NNS', u',', u'JJ', u'IN', u'DT', u'IN', u'JJ', u'NN', u'NNS', u',', u'IN', u'NNS', u'VBP', u'IN', u'PRP$', u'NN', u'NNS', u'.'], u'char_offsets': [[8077, 8081], [8082, 8086], [8087, 8097], [8098, 8100], [8101, 8107], [8107, 8108], [8109, 8113], [8114, 8116], [8117, 8122], [8123, 8125], [8126, 8133], [8134, 8138], [8139, 8146], [8146, 8147], [8148, 8153], [8154, 8160], [8161, 8165], [8166, 8172], [8173, 8178], [8179, 8183], [8184, 8191], [8191, 8192]]}) 
answer: set([u'pest', u'consider', u'species'])
candidate Sentence: (0.14368049800395966, {u'tokens': [u'*', u'The', u'death', u'watch', u'beetle', u',', u'Xestobium', u'rufovillosum', u',', u'-LRB-', u'family', u'Anobiidae', u'-RRB-', u'is', u'of', u'considerable', u'importance', u'as', u'a', u'pest', u'of', u'older', u'wooden', u'buildings', u'in', u'Great', u'Britain', u'.'], u'lemmas': [u'*', u'the', u'death', u'watch', u'beetle', u',', u'xestobium', u'rufovillosum', u',', u'-lrb-', u'family', u'anobiida', u'-rrb-', u'be', u'of', u'considerable', u'importance', u'as', u'a', u'pest', u'of', u'older', u'wooden', u'building', u'in', u'great', u'Britain', u'.'], u'pos': [u'SYM', u'DT', u'NN', u'NN', u'NN', u',', u'NN', u'NN', u',', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJR', u'JJ', u'NNS', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[17706, 17707], [17708, 17711], [17712, 17717], [17718, 17723], [17724, 17730], [17730, 17731], [17732, 17741], [17742, 17754], [17754, 17755], [17756, 17757], [17757, 17763], [17764, 17773], [17773, 17774], [17775, 17777], [17778, 17780], [17781, 17793], [17794, 17804], [17805, 17807], [17808, 17809], [17810, 17814], [17815, 17817], [17818, 17823], [17824, 17830], [17831, 17840], [17841, 17843], [17844, 17849], [17850, 17857], [17857, 17858]]}) 
answer: set([u'certain', u'consider', u'species'])
candidate Sentence: (0.14100068807601929, {u'tokens': [u'Forty', u'percent', u'of', u'all', u'described', u'insect', u'species', u'are', u'beetles', u'-LRB-', u'about', u'350,000', u'species', u'-RRB-', u',', u'and', u'new', u'species', u'are', u'frequently', u'discovered', u'.'], u'lemmas': [u'forty', u'percent', u'of', u'all', u'describe', u'insect', u'species', u'be', u'beetle', u'-lrb-', u'about', u'350,000', u'species', u'-rrb-', u',', u'and', u'new', u'species', u'be', u'frequently', u'discover', u'.'], u'pos': [u'CD', u'NN', u'IN', u'DT', u'VBN', u'JJ', u'NNS', u'VBP', u'NNS', u'-LRB-', u'IN', u'CD', u'NNS', u'-RRB-', u',', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'.'], u'char_offsets': [[414, 419], [420, 427], [428, 430], [431, 434], [435, 444], [445, 451], [452, 459], [460, 463], [464, 471], [472, 473], [473, 478], [479, 486], [487, 494], [495, 496], [496, 497], [498, 501], [502, 505], [506, 513], [514, 517], [518, 528], [529, 539], [539, 540]]}) 
answer: set([u'certain', u'pest', u'consider'])

Are certain species of beetles considered pests?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa837a0>.answer
_____________________________ test_yesno[param27] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83908>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa83908>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40714538097381592, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'twenty-ninth', u'vice'])
candidate Sentence: (0.24231313169002533, {u'tokens': [u'Soon', u'after', u',', u'he', u'was', u'elected', u'as', u'the', u'twenty-ninth', u'Vice', u'President', u'in', u'1920', u'and', u'succeeded', u'to', u'the', u'Presidency', u'upon', u'the', u'death', u'of', u'Warren', u'G.', u'Harding', u'.'], u'lemmas': [u'soon', u'after', u',', u'he', u'be', u'elect', u'as', u'the', u'twenty-ninth', u'Vice', u'President', u'in', u'1920', u'and', u'succeed', u'to', u'the', u'Presidency', u'upon', u'the', u'death', u'of', u'Warren', u'G.', u'Harding', u'.'], u'pos': [u'RB', u'IN', u',', u'PRP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'VBD', u'TO', u'DT', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[391, 395], [396, 401], [401, 402], [403, 405], [406, 409], [410, 417], [418, 420], [421, 424], [425, 437], [438, 442], [443, 452], [453, 455], [456, 460], [461, 464], [465, 474], [475, 477], [478, 481], [482, 492], [493, 497], [498, 501], [502, 507], [508, 510], [511, 517], [518, 520], [521, 528], [528, 529]]}) 
answer: set([])
candidate Sentence: (0.18512870371341705, {u'tokens': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'lemmas': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[36520, 36521], [36523, 36531], [36531, 36532], [36533, 36539], [36539, 36540]]}) 
answer: set([u'president', u'twenty-ninth', u'vice'])
candidate Sentence: (0.15435652434825897, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'president', u'twenty-ninth', u'vice'])
candidate Sentence: (0.14573480188846588, {u'tokens': [u'After', u'the', u'presidency', u',', u'Coolidge', u'served', u'as', u'chairman', u'of', u'the', u'non-partisan', u'Railroad', u'Commission', u',', u'as', u'honorary', u'president', u'of', u'the', u'Foundation', u'of', u'the', u'Blind', u',', u'as', u'a', u'director', u'of', u'New', u'York', u'Life', u'Insurance', u'Company', u',', u'as', u'president', u'of', u'the', u'American', u'Antiquarian', u'Society', u',', u'and', u'as', u'a', u'trustee', u'of', u'Amherst', u'College', u'.'], u'lemmas': [u'after', u'the', u'presidency', u',', u'Coolidge', u'serve', u'as', u'chairman', u'of', u'the', u'non-partisan', u'railroad', u'Commission', u',', u'as', u'honorary', u'president', u'of', u'the', u'Foundation', u'of', u'the', u'Blind', u',', u'as', u'a', u'director', u'of', u'New', u'York', u'Life', u'Insurance', u'Company', u',', u'as', u'president', u'of', u'the', u'american', u'Antiquarian', u'Society', u',', u'and', u'as', u'a', u'trustee', u'of', u'Amherst', u'College', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'VBD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NNP', u',', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'DT', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u',', u'CC', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[34798, 34803], [34804, 34807], [34808, 34818], [34818, 34819], [34820, 34828], [34829, 34835], [34836, 34838], [34839, 34847], [34848, 34850], [34851, 34854], [34855, 34867], [34868, 34876], [34877, 34887], [34887, 34888], [34889, 34891], [34892, 34900], [34901, 34910], [34911, 34913], [34914, 34917], [34918, 34928], [34929, 34931], [34932, 34935], [34936, 34941], [34941, 34942], [34943, 34945], [34946, 34947], [34948, 34956], [34957, 34959], [34960, 34963], [34964, 34968], [34969, 34973], [34974, 34983], [34984, 34991], [34991, 34992], [34993, 34995], [34996, 35005], [35006, 35008], [35009, 35012], [35013, 35021], [35022, 35033], [35034, 35041], [35041, 35042], [35043, 35046], [35047, 35049], [35050, 35051], [35052, 35059], [35060, 35062], [35063, 35070], [35071, 35078], [35078, 35079]]}) 
answer: set([u'twenty-ninth', u'vice'])
candidate Sentence: (0.13292093575000763, {u'tokens': [u'Hannaford', u',', u'169', u'It', u'was', u'also', u'Parker', u'who', u',', u'upon', u'learning', u'that', u'Coolidge', u'had', u'died', u',', u'reportedly', u'remarked', u',', u'``', u'How', u'can', u'they', u'tell', u'?', u"''"], u'lemmas': [u'Hannaford', u',', u'169', u'it', u'be', u'also', u'Parker', u'who', u',', u'upon', u'learn', u'that', u'Coolidge', u'have', u'die', u',', u'reportedly', u'remark', u',', u'``', u'how', u'can', u'they', u'tell', u'?', u"''"], u'pos': [u'NNP', u',', u'CD', u'PRP', u'VBD', u'RB', u'NNP', u'WP', u',', u'IN', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u',', u'RB', u'VBD', u',', u'``', u'WRB', u'MD', u'PRP', u'VB', u'.', u"''"], u'char_offsets': [[20665, 20674], [20674, 20675], [20676, 20679], [20681, 20683], [20684, 20687], [20688, 20692], [20693, 20699], [20700, 20703], [20703, 20704], [20705, 20709], [20710, 20718], [20719, 20723], [20724, 20732], [20733, 20736], [20737, 20741], [20741, 20742], [20743, 20753], [20754, 20762], [20762, 20763], [20764, 20765], [20765, 20768], [20769, 20772], [20773, 20777], [20778, 20782], [20782, 20783], [20783, 20784]]}) 
answer: set([u'president', u'twenty-ninth', u'vice'])
candidate Sentence: (0.12397652864456177, {u'tokens': [u'Sobel', u',', u'252', u'On', u'February', u'12', u'1924', u',', u'he', u'became', u'the', u'first', u'President', u'of', u'the', u'United', u'States', u'to', u'deliver', u'a', u'political', u'speech', u'on', u'radio', u'.'], u'lemmas': [u'Sobel', u',', u'252', u'on', u'February', u'12', u'1924', u',', u'he', u'become', u'the', u'first', u'president', u'of', u'the', u'United', u'States', u'to', u'deliver', u'a', u'political', u'speech', u'on', u'radio', u'.'], u'pos': [u'NNP', u',', u'CD', u'IN', u'NNP', u'CD', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'TO', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[33660, 33665], [33665, 33666], [33667, 33670], [33672, 33674], [33675, 33683], [33684, 33686], [33687, 33691], [33691, 33692], [33693, 33695], [33696, 33702], [33703, 33706], [33707, 33712], [33713, 33722], [33723, 33725], [33726, 33729], [33730, 33736], [33737, 33743], [33744, 33746], [33747, 33754], [33755, 33756], [33757, 33766], [33767, 33773], [33774, 33776], [33777, 33782], [33782, 33783]]}) 
answer: set([u'twenty-ninth', u'vice'])
candidate Sentence: (0.10600554943084717, {u'tokens': [u'Secretary', u'of', u'the', u'Treasury', u'Andrew', u'Mellon', u'Coolidge', u'was', u'the', u'only', u'president', u'to', u'have', u'his', u'face', u'on', u'a', u'coin', u'during', u'his', u'lifetime', u',', u'the', u'sesquicentennial', u'commemorative', u'half', u'dollar', u'of', u'1926', u'.'], u'lemmas': [u'Secretary', u'of', u'the', u'Treasury', u'Andrew', u'Mellon', u'Coolidge', u'be', u'the', u'only', u'president', u'to', u'have', u'he', u'face', u'on', u'a', u'coin', u'during', u'he', u'lifetime', u',', u'the', u'sesquicentennial', u'commemorative', u'half', u'dollar', u'of', u'1926', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[34055, 34064], [34065, 34067], [34068, 34071], [34072, 34080], [34081, 34087], [34088, 34094], [34095, 34103], [34104, 34107], [34108, 34111], [34112, 34116], [34117, 34126], [34127, 34129], [34130, 34134], [34135, 34138], [34139, 34143], [34144, 34146], [34147, 34148], [34149, 34153], [34154, 34160], [34161, 34164], [34165, 34173], [34173, 34174], [34175, 34178], [34179, 34195], [34196, 34209], [34210, 34214], [34215, 34221], [34222, 34224], [34225, 34229], [34229, 34230]]}) 
answer: set([u'twenty-ninth', u'vice'])
candidate Sentence: (0.095419727265834808, {u'tokens': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'lemmas': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'pos': [u'NNP', u'CC', u'NNP', u'NNP', u',', u'IN', u'CD', u'.'], u'char_offsets': [[7958, 7964], [7965, 7968], [7969, 7974], [7975, 7983], [7983, 7984], [7985, 7990], [7991, 7995], [7995, 7996]]}) 
answer: set([u'president', u'twenty-ninth', u'vice'])
candidate Sentence: (0.086766466498374939, {u'tokens': [u'On', u'August', u'11', u'1924', u',', u'Coolidge', u'was', u'filmed', u'on', u'the', u'White', u'House', u'lawn', u'by', u'Lee', u'De', u'Forest', u'in', u'DeForest', u"'s", u'Phonofilm', u'sound-on-film', u'process', u',', u'becoming', u'the', u'first', u'President', u'to', u'appear', u'in', u'a', u'sound', u'film', u'.'], u'lemmas': [u'on', u'August', u'11', u'1924', u',', u'Coolidge', u'be', u'film', u'on', u'the', u'White', u'House', u'lawn', u'by', u'Lee', u'De', u'Forest', u'in', u'DeForest', u"'s", u'Phonofilm', u'sound-on-film', u'process', u',', u'become', u'the', u'first', u'president', u'to', u'appear', u'in', u'a', u'sound', u'film', u'.'], u'pos': [u'IN', u'NNP', u'CD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'POS', u'NNP', u'NN', u'NN', u',', u'VBG', u'DT', u'JJ', u'NN', u'TO', u'VB', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[33784, 33786], [33787, 33793], [33794, 33796], [33797, 33801], [33801, 33802], [33803, 33811], [33812, 33815], [33816, 33822], [33823, 33825], [33826, 33829], [33830, 33835], [33836, 33841], [33842, 33846], [33847, 33849], [33850, 33853], [33854, 33856], [33857, 33863], [33864, 33866], [33867, 33875], [33875, 33877], [33878, 33887], [33888, 33901], [33902, 33909], [33909, 33910], [33911, 33919], [33920, 33923], [33924, 33929], [33930, 33939], [33940, 33942], [33943, 33949], [33950, 33952], [33953, 33954], [33955, 33960], [33961, 33965], [33965, 33966]]}) 
answer: set([u'twenty-ninth', u'vice'])

Was Calvin Coolidge the twenty-ninth vice president?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa83908>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param34] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83b00>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.28775730729103088, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'states', u'united', u'thirteenth'])
candidate Sentence: (0.2216649055480957, {u'tokens': [u'The', u'question', u'of', u'the', u'United', u'States', u'joining', u'the', u'League', u'of', u'Nations', u'was', u'a', u'major', u'issue', u'in', u'the', u'campaign', u',', u'as', u'was', u'the', u'unfinished', u'legacy', u'of', u'Progressivism', u'.'], u'lemmas': [u'the', u'question', u'of', u'the', u'United', u'States', u'join', u'the', u'league', u'of', u'nation', u'be', u'a', u'major', u'issue', u'in', u'the', u'campaign', u',', u'as', u'be', u'the', u'unfinished', u'legacy', u'of', u'Progressivism', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'VBG', u'DT', u'NN', u'IN', u'NNS', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[19185, 19188], [19189, 19197], [19198, 19200], [19201, 19204], [19205, 19211], [19212, 19218], [19219, 19226], [19227, 19230], [19231, 19237], [19238, 19240], [19241, 19248], [19249, 19252], [19253, 19254], [19255, 19260], [19261, 19266], [19267, 19269], [19270, 19273], [19274, 19282], [19282, 19283], [19284, 19286], [19287, 19290], [19291, 19294], [19295, 19305], [19306, 19312], [19313, 19315], [19316, 19329], [19329, 19330]]}) 
answer: set([u'president', u'thirteenth'])
candidate Sentence: (0.21329447627067566, {u'tokens': [u'Greenberg', u',', u'114', u'--', u'116', u'The', u'Senate', u'failed', u'to', u'act', u';', u'the', u'United', u'States', u'never', u'joined', u'the', u'World', u'Court', u'.'], u'lemmas': [u'Greenberg', u',', u'114', u'--', u'116', u'the', u'Senate', u'fail', u'to', u'act', u';', u'the', u'United', u'States', u'never', u'join', u'the', u'World', u'Court', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'DT', u'NNP', u'VBD', u'TO', u'VB', u':', u'DT', u'NNP', u'NNPS', u'RB', u'VBD', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[30184, 30193], [30193, 30194], [30195, 30198], [30198, 30199], [30199, 30202], [30204, 30207], [30208, 30214], [30215, 30221], [30222, 30224], [30225, 30228], [30228, 30229], [30230, 30233], [30234, 30240], [30241, 30247], [30248, 30253], [30254, 30260], [30261, 30264], [30265, 30270], [30271, 30276], [30276, 30277]]}) 
answer: set([u'president', u'thirteenth'])
candidate Sentence: (0.20527023077011108, {u'tokens': [u'Sobel', u',', u'252', u'On', u'February', u'12', u'1924', u',', u'he', u'became', u'the', u'first', u'President', u'of', u'the', u'United', u'States', u'to', u'deliver', u'a', u'political', u'speech', u'on', u'radio', u'.'], u'lemmas': [u'Sobel', u',', u'252', u'on', u'February', u'12', u'1924', u',', u'he', u'become', u'the', u'first', u'president', u'of', u'the', u'United', u'States', u'to', u'deliver', u'a', u'political', u'speech', u'on', u'radio', u'.'], u'pos': [u'NNP', u',', u'CD', u'IN', u'NNP', u'CD', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'TO', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[33660, 33665], [33665, 33666], [33667, 33670], [33672, 33674], [33675, 33683], [33684, 33686], [33687, 33691], [33691, 33692], [33693, 33695], [33696, 33702], [33703, 33706], [33707, 33712], [33713, 33722], [33723, 33725], [33726, 33729], [33730, 33736], [33737, 33743], [33744, 33746], [33747, 33754], [33755, 33756], [33757, 33766], [33767, 33773], [33774, 33776], [33777, 33782], [33782, 33783]]}) 
answer: set([u'thirteenth'])
candidate Sentence: (0.20476068556308746, {u'tokens': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-LRB-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-RRB-', u',', u'more', u'commonly', u'known', u'as', u'Calvin', u'Coolidge', u',', u'was', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-LRB-', u'1923', u'--', u'1929', u'-RRB-', u'.'], u'lemmas': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-lrb-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-rrb-', u',', u'more', u'commonly', u'know', u'as', u'Calvin', u'Coolidge', u',', u'be', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-lrb-', u'1923', u'--', u'1929', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'NNP', u'-LRB-', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'CD', u'-RRB-', u',', u'RBR', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'CD', u':', u'CD', u'-RRB-', u'.'], u'char_offsets': [[0, 4], [5, 11], [12, 20], [20, 21], [22, 25], [26, 27], [27, 31], [32, 33], [34, 38], [41, 48], [49, 50], [51, 55], [55, 56], [56, 57], [58, 62], [63, 71], [72, 77], [78, 80], [81, 87], [88, 96], [96, 97], [98, 101], [102, 105], [106, 115], [116, 125], [126, 128], [129, 132], [133, 139], [140, 146], [147, 148], [148, 152], [152, 153], [153, 157], [157, 158], [158, 159]]}) 
answer: set([u'thirteenth'])
candidate Sentence: (0.19553758203983307, {u'tokens': [u'Sobel', u',', u'342', u'Coolidge', u'saw', u'the', u'landslide', u'Republican', u'victory', u'of', u'1920', u'as', u'a', u'rejection', u'of', u'the', u'Wilsonian', u'idea', u'that', u'the', u'United', u'States', u'should', u'join', u'the', u'League', u'of', u'Nations', u'.'], u'lemmas': [u'Sobel', u',', u'342', u'Coolidge', u'see', u'the', u'landslide', u'republican', u'victory', u'of', u'1920', u'as', u'a', u'rejection', u'of', u'the', u'wilsonian', u'idea', u'that', u'the', u'United', u'States', u'should', u'join', u'the', u'League', u'of', u'Nations', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'VBD', u'DT', u'NN', u'JJ', u'NN', u'IN', u'CD', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'MD', u'VB', u'DT', u'NNP', u'IN', u'NNPS', u'.'], u'char_offsets': [[29479, 29484], [29484, 29485], [29486, 29489], [29491, 29499], [29500, 29503], [29504, 29507], [29508, 29517], [29518, 29528], [29529, 29536], [29537, 29539], [29540, 29544], [29545, 29547], [29548, 29549], [29550, 29559], [29560, 29562], [29563, 29566], [29567, 29576], [29577, 29581], [29582, 29586], [29587, 29590], [29591, 29597], [29598, 29604], [29605, 29611], [29612, 29616], [29617, 29620], [29621, 29627], [29628, 29630], [29631, 29638], [29638, 29639]]}) 
answer: set([u'president', u'thirteenth'])
candidate Sentence: (0.19515249133110046, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'states', u'president', u'united', u'thirteenth'])
candidate Sentence: (0.19252616167068481, {u'tokens': [u',', u'During', u'Coolidge', u"'s", u'presidency', u'the', u'United', u'States', u'experienced', u'the', u'period', u'of', u'rapid', u'economic', u'growth', u'known', u'as', u'the', u'``', u'Roaring', u'Twenties', u'.', u"''"], u'lemmas': [u',', u'during', u'Coolidge', u"'s", u'presidency', u'the', u'United', u'States', u'experience', u'the', u'period', u'of', u'rapid', u'economic', u'growth', u'know', u'as', u'the', u'``', u'Roaring', u'Twenties', u'.', u"''"], u'pos': [u',', u'IN', u'NNP', u'POS', u'NN', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'VBN', u'IN', u'DT', u'``', u'NNP', u'NNP', u'.', u"''"], u'char_offsets': [[26047, 26048], [26049, 26055], [26056, 26064], [26064, 26066], [26067, 26077], [26078, 26081], [26082, 26088], [26089, 26095], [26096, 26107], [26108, 26111], [26112, 26118], [26119, 26121], [26122, 26127], [26128, 26136], [26137, 26143], [26144, 26149], [26150, 26152], [26153, 26156], [26157, 26158], [26158, 26165], [26166, 26174], [26174, 26175], [26175, 26176]]}) 
answer: set([u'president', u'thirteenth'])
candidate Sentence: (0.19031506776809692, {u'tokens': [u'He', u'spoke', u'in', u'favor', u'of', u'the', u'United', u'States', u'joining', u'the', u'Permanent', u'Court', u'of', u'International', u'Justice', u',', u'provided', u'that', u'the', u'nation', u'would', u'not', u'be', u'bound', u'by', u'advisory', u'decisions', u'.'], u'lemmas': [u'he', u'speak', u'in', u'favor', u'of', u'the', u'United', u'States', u'join', u'the', u'Permanent', u'Court', u'of', u'International', u'Justice', u',', u'provide', u'that', u'the', u'nation', u'would', u'not', u'be', u'bind', u'by', u'advisory', u'decision', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'VBG', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'DT', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[29826, 29828], [29829, 29834], [29835, 29837], [29838, 29843], [29844, 29846], [29847, 29850], [29851, 29857], [29858, 29864], [29865, 29872], [29873, 29876], [29877, 29886], [29887, 29892], [29893, 29895], [29896, 29909], [29910, 29917], [29917, 29918], [29919, 29927], [29928, 29932], [29933, 29936], [29937, 29943], [29944, 29949], [29950, 29953], [29954, 29956], [29957, 29962], [29963, 29965], [29966, 29974], [29975, 29984], [29984, 29985]]}) 
answer: set([u'president', u'thirteenth'])
candidate Sentence: (0.17288877069950104, {u'tokens': [u'McCoy', u',', u'181', u'He', u'also', u'continued', u'the', u'United', u'States', u"'", u'support', u'for', u'the', u'elected', u'government', u'of', u'Mexico', u'against', u'the', u'rebels', u'there', u',', u'lifting', u'the', u'arms', u'embargo', u'on', u'that', u'country', u'.'], u'lemmas': [u'McCoy', u',', u'181', u'he', u'also', u'continue', u'the', u'United', u'States', u"'", u'support', u'for', u'the', u'elect', u'government', u'of', u'Mexico', u'against', u'the', u'rebel', u'there', u',', u'lift', u'the', u'arm', u'embargo', u'on', u'that', u'country', u'.'], u'pos': [u'NNP', u',', u'CD', u'PRP', u'RB', u'VBD', u'DT', u'NNP', u'NNPS', u'POS', u'NN', u'IN', u'DT', u'VBN', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NNS', u'RB', u',', u'VBG', u'DT', u'NNS', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[30964, 30969], [30969, 30970], [30971, 30974], [30976, 30978], [30979, 30983], [30984, 30993], [30994, 30997], [30998, 31004], [31005, 31011], [31011, 31012], [31013, 31020], [31021, 31024], [31025, 31028], [31029, 31036], [31037, 31047], [31048, 31050], [31051, 31057], [31058, 31065], [31066, 31069], [31070, 31076], [31077, 31082], [31082, 31083], [31084, 31091], [31092, 31095], [31096, 31100], [31101, 31108], [31109, 31111], [31112, 31116], [31117, 31124], [31124, 31125]]}) 
answer: set([u'president', u'thirteenth'])

Was Coolidge the thirteenth President of the United States?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b00>.answer
_____________________________ test_yesno[param35] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83b48>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3077322244644165, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'republican'])
candidate Sentence: (0.25030496716499329, {u'tokens': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'lemmas': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[36520, 36521], [36523, 36531], [36531, 36532], [36533, 36539], [36539, 36540]]}) 
answer: set([u'republican'])
candidate Sentence: (0.20869916677474976, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'republican'])
candidate Sentence: (0.17971697449684143, {u'tokens': [u'Hannaford', u',', u'169', u'It', u'was', u'also', u'Parker', u'who', u',', u'upon', u'learning', u'that', u'Coolidge', u'had', u'died', u',', u'reportedly', u'remarked', u',', u'``', u'How', u'can', u'they', u'tell', u'?', u"''"], u'lemmas': [u'Hannaford', u',', u'169', u'it', u'be', u'also', u'Parker', u'who', u',', u'upon', u'learn', u'that', u'Coolidge', u'have', u'die', u',', u'reportedly', u'remark', u',', u'``', u'how', u'can', u'they', u'tell', u'?', u"''"], u'pos': [u'NNP', u',', u'CD', u'PRP', u'VBD', u'RB', u'NNP', u'WP', u',', u'IN', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u',', u'RB', u'VBD', u',', u'``', u'WRB', u'MD', u'PRP', u'VB', u'.', u"''"], u'char_offsets': [[20665, 20674], [20674, 20675], [20676, 20679], [20681, 20683], [20684, 20687], [20688, 20692], [20693, 20699], [20700, 20703], [20703, 20704], [20705, 20709], [20710, 20718], [20719, 20723], [20724, 20732], [20733, 20736], [20737, 20741], [20741, 20742], [20743, 20753], [20754, 20762], [20762, 20763], [20764, 20765], [20765, 20768], [20769, 20772], [20773, 20777], [20778, 20782], [20782, 20783], [20783, 20784]]}) 
answer: set([u'republican'])
candidate Sentence: (0.14872169494628906, {u'tokens': [u'Fuess', u',', u'187', u'--', u'188', u'At', u'the', u'1920', u'Republican', u'Convention', u'most', u'of', u'the', u'delegates', u'were', u'selected', u'by', u'state', u'party', u'conventions', u',', u'not', u'primaries', u'.'], u'lemmas': [u'Fuess', u',', u'187', u'--', u'188', u'at', u'the', u'1920', u'Republican', u'Convention', u'most', u'of', u'the', u'delegate', u'be', u'select', u'by', u'state', u'party', u'convention', u',', u'not', u'primary', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'IN', u'DT', u'CD', u'NNP', u'NNP', u'JJS', u'IN', u'DT', u'NNS', u'VBD', u'VBN', u'IN', u'NN', u'NN', u'NNS', u',', u'RB', u'NNS', u'.'], u'char_offsets': [[18081, 18086], [18086, 18087], [18088, 18091], [18091, 18092], [18092, 18095], [18096, 18098], [18099, 18102], [18103, 18107], [18108, 18118], [18119, 18129], [18130, 18134], [18135, 18137], [18138, 18141], [18142, 18151], [18152, 18156], [18157, 18165], [18166, 18168], [18169, 18174], [18175, 18180], [18181, 18192], [18192, 18193], [18194, 18197], [18198, 18207], [18207, 18208]]}) 
answer: set([])
candidate Sentence: (0.12901313602924347, {u'tokens': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'lemmas': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'pos': [u'NNP', u'CC', u'NNP', u'NNP', u',', u'IN', u'CD', u'.'], u'char_offsets': [[7958, 7964], [7965, 7968], [7969, 7974], [7975, 7983], [7983, 7984], [7985, 7990], [7991, 7995], [7995, 7996]]}) 
answer: set([u'republican'])
candidate Sentence: (0.12797972559928894, {u'tokens': [u'The', u'Republican', u'Convention', u'was', u'held', u'from', u'June', u'10', u'to', u'June', u'12', u'1924', u'in', u'Cleveland', u',', u'Ohio', u';', u'President', u'Coolidge', u'was', u'nominated', u'on', u'the', u'first', u'ballot', u'.'], u'lemmas': [u'the', u'Republican', u'Convention', u'be', u'hold', u'from', u'June', u'10', u'to', u'June', u'12', u'1924', u'in', u'Cleveland', u',', u'Ohio', u';', u'President', u'Coolidge', u'be', u'nominate', u'on', u'the', u'first', u'ballot', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'CD', u'TO', u'NNP', u'CD', u'CD', u'IN', u'NNP', u',', u'NNP', u':', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[23913, 23916], [23917, 23927], [23928, 23938], [23939, 23942], [23943, 23947], [23948, 23952], [23953, 23957], [23958, 23960], [23961, 23963], [23964, 23968], [23969, 23971], [23972, 23976], [23977, 23979], [23980, 23989], [23989, 23990], [23991, 23995], [23995, 23996], [23997, 24006], [24007, 24015], [24016, 24019], [24020, 24029], [24030, 24032], [24033, 24036], [24037, 24042], [24043, 24049], [24049, 24050]]}) 
answer: set([])
candidate Sentence: (0.12774971127510071, {u'tokens': [u'Sobel', u',', u'49', u'--', u'51', u'Coolidge', u'campaigned', u'locally', u'for', u'Republican', u'presidential', u'candidate', u'William', u'McKinley', u'in', u'1896', u',', u'and', u'the', u'next', u'year', u'he', u'was', u'selected', u'to', u'be', u'a', u'member', u'of', u'the', u'Republican', u'City', u'Committee', u'.'], u'lemmas': [u'Sobel', u',', u'49', u'--', u'51', u'Coolidge', u'campaign', u'locally', u'for', u'republican', u'presidential', u'candidate', u'William', u'McKinley', u'in', u'1896', u',', u'and', u'the', u'next', u'year', u'he', u'be', u'select', u'to', u'be', u'a', u'member', u'of', u'the', u'Republican', u'City', u'Committee', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'NNP', u'VBD', u'RB', u'IN', u'JJ', u'JJ', u'NN', u'NNP', u'NNP', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'PRP', u'VBD', u'VBN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[6626, 6631], [6631, 6632], [6633, 6635], [6635, 6636], [6636, 6638], [6640, 6648], [6649, 6659], [6660, 6667], [6668, 6671], [6672, 6682], [6683, 6695], [6696, 6705], [6706, 6713], [6714, 6722], [6723, 6725], [6726, 6730], [6730, 6731], [6732, 6735], [6736, 6739], [6740, 6744], [6745, 6749], [6750, 6752], [6753, 6756], [6757, 6765], [6766, 6768], [6769, 6771], [6772, 6773], [6774, 6780], [6781, 6783], [6784, 6787], [6788, 6798], [6799, 6803], [6804, 6813], [6813, 6814]]}) 
answer: set([])
candidate Sentence: (0.12063956260681152, {u'tokens': [u'Autobiography', u',', u'93', u'The', u'Republican', u'Party', u'was', u'dominant', u'in', u'New', u'England', u'in', u'Coolidge', u"'s", u'time', u',', u'and', u'he', u'followed', u'Hammond', u"'s", u'and', u'Field', u"'s", u'example', u'by', u'becoming', u'active', u'in', u'local', u'politics', u'.'], u'lemmas': [u'autobiography', u',', u'93', u'the', u'Republican', u'Party', u'be', u'dominant', u'in', u'New', u'England', u'in', u'Coolidge', u"'s", u'time', u',', u'and', u'he', u'follow', u'Hammond', u"'s", u'and', u'Field', u"'s", u'example', u'by', u'become', u'active', u'in', u'local', u'politics', u'.'], u'pos': [u'NN', u',', u'CD', u'DT', u'NNP', u'NNP', u'VBD', u'JJ', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'POS', u'NN', u',', u'CC', u'PRP', u'VBD', u'NNP', u'POS', u'CC', u'NNP', u'POS', u'NN', u'IN', u'VBG', u'JJ', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[6455, 6468], [6468, 6469], [6470, 6472], [6473, 6476], [6477, 6487], [6488, 6493], [6494, 6497], [6498, 6506], [6507, 6509], [6510, 6513], [6514, 6521], [6522, 6524], [6525, 6533], [6533, 6535], [6536, 6540], [6540, 6541], [6542, 6545], [6546, 6548], [6549, 6557], [6558, 6565], [6565, 6567], [6568, 6571], [6572, 6577], [6577, 6579], [6580, 6587], [6588, 6590], [6591, 6599], [6600, 6606], [6607, 6609], [6610, 6615], [6616, 6624], [6624, 6625]]}) 
answer: set([])
candidate Sentence: (0.11181120574474335, {u'tokens': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-LRB-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-RRB-', u',', u'more', u'commonly', u'known', u'as', u'Calvin', u'Coolidge', u',', u'was', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-LRB-', u'1923', u'--', u'1929', u'-RRB-', u'.'], u'lemmas': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-lrb-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-rrb-', u',', u'more', u'commonly', u'know', u'as', u'Calvin', u'Coolidge', u',', u'be', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-lrb-', u'1923', u'--', u'1929', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'NNP', u'-LRB-', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'CD', u'-RRB-', u',', u'RBR', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'CD', u':', u'CD', u'-RRB-', u'.'], u'char_offsets': [[0, 4], [5, 11], [12, 20], [20, 21], [22, 25], [26, 27], [27, 31], [32, 33], [34, 38], [41, 48], [49, 50], [51, 55], [55, 56], [56, 57], [58, 62], [63, 71], [72, 77], [78, 80], [81, 87], [88, 96], [96, 97], [98, 101], [102, 105], [106, 115], [116, 125], [126, 128], [129, 132], [133, 139], [140, 146], [147, 148], [148, 152], [152, 153], [153, 157], [157, 158], [158, 159]]}) 
answer: set([u'republican'])

Was Calvin Coolidge Republican?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b48>.answer
_____________________________ test_yesno[param36] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83b90>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3077322244644165, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'republican'])
candidate Sentence: (0.25030496716499329, {u'tokens': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'lemmas': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[36520, 36521], [36523, 36531], [36531, 36532], [36533, 36539], [36539, 36540]]}) 
answer: set([u'republican'])
candidate Sentence: (0.20869916677474976, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'republican'])
candidate Sentence: (0.17971697449684143, {u'tokens': [u'Hannaford', u',', u'169', u'It', u'was', u'also', u'Parker', u'who', u',', u'upon', u'learning', u'that', u'Coolidge', u'had', u'died', u',', u'reportedly', u'remarked', u',', u'``', u'How', u'can', u'they', u'tell', u'?', u"''"], u'lemmas': [u'Hannaford', u',', u'169', u'it', u'be', u'also', u'Parker', u'who', u',', u'upon', u'learn', u'that', u'Coolidge', u'have', u'die', u',', u'reportedly', u'remark', u',', u'``', u'how', u'can', u'they', u'tell', u'?', u"''"], u'pos': [u'NNP', u',', u'CD', u'PRP', u'VBD', u'RB', u'NNP', u'WP', u',', u'IN', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u',', u'RB', u'VBD', u',', u'``', u'WRB', u'MD', u'PRP', u'VB', u'.', u"''"], u'char_offsets': [[20665, 20674], [20674, 20675], [20676, 20679], [20681, 20683], [20684, 20687], [20688, 20692], [20693, 20699], [20700, 20703], [20703, 20704], [20705, 20709], [20710, 20718], [20719, 20723], [20724, 20732], [20733, 20736], [20737, 20741], [20741, 20742], [20743, 20753], [20754, 20762], [20762, 20763], [20764, 20765], [20765, 20768], [20769, 20772], [20773, 20777], [20778, 20782], [20782, 20783], [20783, 20784]]}) 
answer: set([u'republican'])
candidate Sentence: (0.14872169494628906, {u'tokens': [u'Fuess', u',', u'187', u'--', u'188', u'At', u'the', u'1920', u'Republican', u'Convention', u'most', u'of', u'the', u'delegates', u'were', u'selected', u'by', u'state', u'party', u'conventions', u',', u'not', u'primaries', u'.'], u'lemmas': [u'Fuess', u',', u'187', u'--', u'188', u'at', u'the', u'1920', u'Republican', u'Convention', u'most', u'of', u'the', u'delegate', u'be', u'select', u'by', u'state', u'party', u'convention', u',', u'not', u'primary', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'IN', u'DT', u'CD', u'NNP', u'NNP', u'JJS', u'IN', u'DT', u'NNS', u'VBD', u'VBN', u'IN', u'NN', u'NN', u'NNS', u',', u'RB', u'NNS', u'.'], u'char_offsets': [[18081, 18086], [18086, 18087], [18088, 18091], [18091, 18092], [18092, 18095], [18096, 18098], [18099, 18102], [18103, 18107], [18108, 18118], [18119, 18129], [18130, 18134], [18135, 18137], [18138, 18141], [18142, 18151], [18152, 18156], [18157, 18165], [18166, 18168], [18169, 18174], [18175, 18180], [18181, 18192], [18192, 18193], [18194, 18197], [18198, 18207], [18207, 18208]]}) 
answer: set([])
candidate Sentence: (0.12901313602924347, {u'tokens': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'lemmas': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'pos': [u'NNP', u'CC', u'NNP', u'NNP', u',', u'IN', u'CD', u'.'], u'char_offsets': [[7958, 7964], [7965, 7968], [7969, 7974], [7975, 7983], [7983, 7984], [7985, 7990], [7991, 7995], [7995, 7996]]}) 
answer: set([u'republican'])
candidate Sentence: (0.12797972559928894, {u'tokens': [u'The', u'Republican', u'Convention', u'was', u'held', u'from', u'June', u'10', u'to', u'June', u'12', u'1924', u'in', u'Cleveland', u',', u'Ohio', u';', u'President', u'Coolidge', u'was', u'nominated', u'on', u'the', u'first', u'ballot', u'.'], u'lemmas': [u'the', u'Republican', u'Convention', u'be', u'hold', u'from', u'June', u'10', u'to', u'June', u'12', u'1924', u'in', u'Cleveland', u',', u'Ohio', u';', u'President', u'Coolidge', u'be', u'nominate', u'on', u'the', u'first', u'ballot', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'CD', u'TO', u'NNP', u'CD', u'CD', u'IN', u'NNP', u',', u'NNP', u':', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[23913, 23916], [23917, 23927], [23928, 23938], [23939, 23942], [23943, 23947], [23948, 23952], [23953, 23957], [23958, 23960], [23961, 23963], [23964, 23968], [23969, 23971], [23972, 23976], [23977, 23979], [23980, 23989], [23989, 23990], [23991, 23995], [23995, 23996], [23997, 24006], [24007, 24015], [24016, 24019], [24020, 24029], [24030, 24032], [24033, 24036], [24037, 24042], [24043, 24049], [24049, 24050]]}) 
answer: set([])
candidate Sentence: (0.12774971127510071, {u'tokens': [u'Sobel', u',', u'49', u'--', u'51', u'Coolidge', u'campaigned', u'locally', u'for', u'Republican', u'presidential', u'candidate', u'William', u'McKinley', u'in', u'1896', u',', u'and', u'the', u'next', u'year', u'he', u'was', u'selected', u'to', u'be', u'a', u'member', u'of', u'the', u'Republican', u'City', u'Committee', u'.'], u'lemmas': [u'Sobel', u',', u'49', u'--', u'51', u'Coolidge', u'campaign', u'locally', u'for', u'republican', u'presidential', u'candidate', u'William', u'McKinley', u'in', u'1896', u',', u'and', u'the', u'next', u'year', u'he', u'be', u'select', u'to', u'be', u'a', u'member', u'of', u'the', u'Republican', u'City', u'Committee', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'NNP', u'VBD', u'RB', u'IN', u'JJ', u'JJ', u'NN', u'NNP', u'NNP', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'PRP', u'VBD', u'VBN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[6626, 6631], [6631, 6632], [6633, 6635], [6635, 6636], [6636, 6638], [6640, 6648], [6649, 6659], [6660, 6667], [6668, 6671], [6672, 6682], [6683, 6695], [6696, 6705], [6706, 6713], [6714, 6722], [6723, 6725], [6726, 6730], [6730, 6731], [6732, 6735], [6736, 6739], [6740, 6744], [6745, 6749], [6750, 6752], [6753, 6756], [6757, 6765], [6766, 6768], [6769, 6771], [6772, 6773], [6774, 6780], [6781, 6783], [6784, 6787], [6788, 6798], [6799, 6803], [6804, 6813], [6813, 6814]]}) 
answer: set([])
candidate Sentence: (0.12063956260681152, {u'tokens': [u'Autobiography', u',', u'93', u'The', u'Republican', u'Party', u'was', u'dominant', u'in', u'New', u'England', u'in', u'Coolidge', u"'s", u'time', u',', u'and', u'he', u'followed', u'Hammond', u"'s", u'and', u'Field', u"'s", u'example', u'by', u'becoming', u'active', u'in', u'local', u'politics', u'.'], u'lemmas': [u'autobiography', u',', u'93', u'the', u'Republican', u'Party', u'be', u'dominant', u'in', u'New', u'England', u'in', u'Coolidge', u"'s", u'time', u',', u'and', u'he', u'follow', u'Hammond', u"'s", u'and', u'Field', u"'s", u'example', u'by', u'become', u'active', u'in', u'local', u'politics', u'.'], u'pos': [u'NN', u',', u'CD', u'DT', u'NNP', u'NNP', u'VBD', u'JJ', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'POS', u'NN', u',', u'CC', u'PRP', u'VBD', u'NNP', u'POS', u'CC', u'NNP', u'POS', u'NN', u'IN', u'VBG', u'JJ', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[6455, 6468], [6468, 6469], [6470, 6472], [6473, 6476], [6477, 6487], [6488, 6493], [6494, 6497], [6498, 6506], [6507, 6509], [6510, 6513], [6514, 6521], [6522, 6524], [6525, 6533], [6533, 6535], [6536, 6540], [6540, 6541], [6542, 6545], [6546, 6548], [6549, 6557], [6558, 6565], [6565, 6567], [6568, 6571], [6572, 6577], [6577, 6579], [6580, 6587], [6588, 6590], [6591, 6599], [6600, 6606], [6607, 6609], [6610, 6615], [6616, 6624], [6624, 6625]]}) 
answer: set([])
candidate Sentence: (0.11181120574474335, {u'tokens': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-LRB-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-RRB-', u',', u'more', u'commonly', u'known', u'as', u'Calvin', u'Coolidge', u',', u'was', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-LRB-', u'1923', u'--', u'1929', u'-RRB-', u'.'], u'lemmas': [u'John', u'Calvin', u'Coolidge', u',', u'Jr.', u'-lrb-', u'July', u'4', u'1872', u'January', u'5', u'1933', u'-rrb-', u',', u'more', u'commonly', u'know', u'as', u'Calvin', u'Coolidge', u',', u'be', u'the', u'thirtieth', u'President', u'of', u'the', u'United', u'States', u'-lrb-', u'1923', u'--', u'1929', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'NNP', u'-LRB-', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'CD', u'-RRB-', u',', u'RBR', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'CD', u':', u'CD', u'-RRB-', u'.'], u'char_offsets': [[0, 4], [5, 11], [12, 20], [20, 21], [22, 25], [26, 27], [27, 31], [32, 33], [34, 38], [41, 48], [49, 50], [51, 55], [55, 56], [56, 57], [58, 62], [63, 71], [72, 77], [78, 80], [81, 87], [88, 96], [96, 97], [98, 101], [102, 105], [106, 115], [116, 125], [126, 128], [129, 132], [133, 139], [140, 146], [147, 148], [148, 152], [152, 153], [153, 157], [157, 158], [158, 159]]}) 
answer: set([u'republican'])

Was Calvin Coolidge Republican?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83b90>.answer
_____________________________ test_yesno[param37] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83bd8>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83bd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.29481878876686096, {u'tokens': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duties', u'as', u'lieutenant', u'governor', u'were', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'does', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'did', u'become', u'an', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'lemmas': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duty', u'as', u'lieutenant', u'governor', u'be', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'do', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'do', u'become', u'a', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'POS', u'NNS', u'IN', u'NN', u'NN', u'VBD', u'JJ', u':', u'IN', u'NNP', u',', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'VB', u'IN', u'DT', u'NN', u'NNP', u',', u'IN', u'NNP', u'VBD', u'VB', u'DT', u'FW', u'FW', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[12564, 12569], [12569, 12570], [12571, 12574], [12575, 12583], [12583, 12585], [12586, 12592], [12593, 12595], [12596, 12606], [12607, 12615], [12616, 12620], [12621, 12624], [12624, 12625], [12626, 12628], [12629, 12642], [12642, 12643], [12644, 12647], [12648, 12658], [12659, 12667], [12668, 12672], [12673, 12676], [12677, 12684], [12685, 12689], [12690, 12693], [12694, 12699], [12700, 12706], [12706, 12707], [12708, 12716], [12717, 12725], [12726, 12729], [12730, 12736], [12737, 12739], [12740, 12742], [12743, 12750], [12751, 12757], [12758, 12760], [12761, 12764], [12765, 12773], [12773, 12775], [12776, 12783], [12783, 12784]]}) 
answer: set([])
candidate Sentence: (0.2813132107257843, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.23830446600914001, {u'tokens': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'was', u'unopposed', u'for', u'the', u'Republican', u'nomination', u'for', u'Governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'lemmas': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'be', u'unoppose', u'for', u'the', u'republican', u'nomination', u'for', u'governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[13192, 13197], [13197, 13198], [13199, 13202], [13202, 13203], [13203, 13206], [13207, 13215], [13216, 13219], [13220, 13229], [13230, 13233], [13234, 13237], [13238, 13248], [13249, 13259], [13260, 13263], [13264, 13272], [13273, 13275], [13276, 13289], [13290, 13292], [13293, 13297], [13297, 13298]]}) 
answer: set([])
candidate Sentence: (0.22881612181663513, {u'tokens': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'lemmas': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[36520, 36521], [36523, 36531], [36531, 36532], [36533, 36539], [36539, 36540]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.20325677096843719, {u'tokens': [u'A', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'worked', u'his', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'becoming', u'governor', u'of', u'that', u'state', u'.'], u'lemmas': [u'a', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'work', u'he', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'become', u'governor', u'of', u'that', u'state', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NN', u'NNS', u',', u'RB', u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[161, 162], [163, 169], [170, 174], [175, 182], [182, 183], [184, 192], [193, 199], [200, 203], [204, 207], [208, 210], [211, 214], [215, 221], [222, 224], [225, 238], [239, 244], [245, 253], [253, 254], [255, 265], [266, 274], [275, 283], [284, 286], [287, 291], [292, 297], [297, 298]]}) 
answer: set([])
candidate Sentence: (0.19078218936920166, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.16428813338279724, {u'tokens': [u'Hannaford', u',', u'169', u'It', u'was', u'also', u'Parker', u'who', u',', u'upon', u'learning', u'that', u'Coolidge', u'had', u'died', u',', u'reportedly', u'remarked', u',', u'``', u'How', u'can', u'they', u'tell', u'?', u"''"], u'lemmas': [u'Hannaford', u',', u'169', u'it', u'be', u'also', u'Parker', u'who', u',', u'upon', u'learn', u'that', u'Coolidge', u'have', u'die', u',', u'reportedly', u'remark', u',', u'``', u'how', u'can', u'they', u'tell', u'?', u"''"], u'pos': [u'NNP', u',', u'CD', u'PRP', u'VBD', u'RB', u'NNP', u'WP', u',', u'IN', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u',', u'RB', u'VBD', u',', u'``', u'WRB', u'MD', u'PRP', u'VB', u'.', u"''"], u'char_offsets': [[20665, 20674], [20674, 20675], [20676, 20679], [20681, 20683], [20684, 20687], [20688, 20692], [20693, 20699], [20700, 20703], [20703, 20704], [20705, 20709], [20710, 20718], [20719, 20723], [20724, 20732], [20733, 20736], [20737, 20741], [20741, 20742], [20743, 20753], [20754, 20762], [20762, 20763], [20764, 20765], [20765, 20768], [20769, 20772], [20773, 20777], [20778, 20782], [20782, 20783], [20783, 20784]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.1468682587146759, {u'tokens': [u'Have', u'Faith', u'in', u'Massachusetts', u':', u'A', u'Collection', u'of', u'Speeches', u'And', u'Messages', u'by', u'Calvin', u'Coolidge', u',', u'1919', u',', u'ISBN', u'1417926082', u'.'], u'lemmas': [u'have', u'faith', u'in', u'Massachusetts', u':', u'A', u'Collection', u'of', u'Speeches', u'and', u'Messages', u'by', u'Calvin', u'Coolidge', u',', u'1919', u',', u'ISBN', u'1417926082', u'.'], u'pos': [u'VBP', u'NN', u'IN', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNPS', u'CC', u'NNPS', u'IN', u'NNP', u'NNP', u',', u'CD', u',', u'NNP', u'CD', u'.'], u'char_offsets': [[11342, 11346], [11347, 11352], [11353, 11355], [11356, 11369], [11369, 11370], [11371, 11372], [11373, 11383], [11384, 11386], [11387, 11395], [11396, 11399], [11400, 11408], [11409, 11411], [11412, 11418], [11419, 11427], [11427, 11428], [11429, 11433], [11433, 11434], [11435, 11439], [11440, 11450], [11450, 11451]]}) 
answer: set([u'governor'])
candidate Sentence: (0.14686617255210876, {u'tokens': [u'Fuess', u',', u'186', u'Coolidge', u'also', u'wielded', u'the', u'veto', u'pen', u'as', u'governor', u'.'], u'lemmas': [u'Fuess', u',', u'186', u'Coolidge', u'also', u'wield', u'the', u'veto', u'pen', u'as', u'governor', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'RB', u'VBD', u'DT', u'NN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[17545, 17550], [17550, 17551], [17552, 17555], [17556, 17564], [17565, 17569], [17570, 17577], [17578, 17581], [17582, 17586], [17587, 17590], [17591, 17593], [17594, 17602], [17602, 17603]]}) 
answer: set([u'massachusetts'])
candidate Sentence: (0.13235719501972198, {u'tokens': [u'Sobel', u',', u'90', u'--', u'92', u'Towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'them', u'were', u'proposing', u'his', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'lemmas': [u'Sobel', u',', u'90', u'--', u'92', u'towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'they', u'be', u'propose', u'he', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'JJ', u'IN', u'PRP', u'VBD', u'VBG', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'NN', u'NN', u'.'], u'char_offsets': [[11615, 11620], [11620, 11621], [11622, 11624], [11624, 11625], [11625, 11627], [11629, 11636], [11637, 11640], [11641, 11644], [11645, 11647], [11648, 11651], [11652, 11656], [11656, 11657], [11658, 11662], [11663, 11665], [11666, 11670], [11671, 11675], [11676, 11685], [11686, 11689], [11690, 11694], [11695, 11698], [11699, 11709], [11710, 11712], [11713, 11723], [11724, 11732], [11732, 11733]]}) 
answer: set([u'massachusetts'])

Was Calvin Coolidge a governor of Massachusetts?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83bd8>.answer
_____________________________ test_yesno[param38] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83c20>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83c20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.29481878876686096, {u'tokens': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duties', u'as', u'lieutenant', u'governor', u'were', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'does', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'did', u'become', u'an', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'lemmas': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duty', u'as', u'lieutenant', u'governor', u'be', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'do', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'do', u'become', u'a', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'POS', u'NNS', u'IN', u'NN', u'NN', u'VBD', u'JJ', u':', u'IN', u'NNP', u',', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'VB', u'IN', u'DT', u'NN', u'NNP', u',', u'IN', u'NNP', u'VBD', u'VB', u'DT', u'FW', u'FW', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[12564, 12569], [12569, 12570], [12571, 12574], [12575, 12583], [12583, 12585], [12586, 12592], [12593, 12595], [12596, 12606], [12607, 12615], [12616, 12620], [12621, 12624], [12624, 12625], [12626, 12628], [12629, 12642], [12642, 12643], [12644, 12647], [12648, 12658], [12659, 12667], [12668, 12672], [12673, 12676], [12677, 12684], [12685, 12689], [12690, 12693], [12694, 12699], [12700, 12706], [12706, 12707], [12708, 12716], [12717, 12725], [12726, 12729], [12730, 12736], [12737, 12739], [12740, 12742], [12743, 12750], [12751, 12757], [12758, 12760], [12761, 12764], [12765, 12773], [12773, 12775], [12776, 12783], [12783, 12784]]}) 
answer: set([])
candidate Sentence: (0.2813132107257843, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.23830446600914001, {u'tokens': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'was', u'unopposed', u'for', u'the', u'Republican', u'nomination', u'for', u'Governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'lemmas': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'be', u'unoppose', u'for', u'the', u'republican', u'nomination', u'for', u'governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[13192, 13197], [13197, 13198], [13199, 13202], [13202, 13203], [13203, 13206], [13207, 13215], [13216, 13219], [13220, 13229], [13230, 13233], [13234, 13237], [13238, 13248], [13249, 13259], [13260, 13263], [13264, 13272], [13273, 13275], [13276, 13289], [13290, 13292], [13293, 13297], [13297, 13298]]}) 
answer: set([])
candidate Sentence: (0.22881612181663513, {u'tokens': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'lemmas': [u'*', u'Coolidge', u',', u'Calvin', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[36520, 36521], [36523, 36531], [36531, 36532], [36533, 36539], [36539, 36540]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.20325677096843719, {u'tokens': [u'A', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'worked', u'his', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'becoming', u'governor', u'of', u'that', u'state', u'.'], u'lemmas': [u'a', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'work', u'he', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'become', u'governor', u'of', u'that', u'state', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NN', u'NNS', u',', u'RB', u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[161, 162], [163, 169], [170, 174], [175, 182], [182, 183], [184, 192], [193, 199], [200, 203], [204, 207], [208, 210], [211, 214], [215, 221], [222, 224], [225, 238], [239, 244], [245, 253], [253, 254], [255, 265], [266, 274], [275, 283], [284, 286], [287, 291], [292, 297], [297, 298]]}) 
answer: set([])
candidate Sentence: (0.19078218936920166, {u'tokens': [u'Grace', u"'s", u'reply', u'was', u'``', u'Did', u'you', u'marry', u'me', u'to', u'darn', u'your', u'socks', u'?', u"''"], u'lemmas': [u'Grace', u"'s", u'reply', u'be', u'``', u'do', u'you', u'marry', u'I', u'to', u'darn', u'you', u'sock', u'?', u"''"], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'``', u'VBD', u'PRP', u'VB', u'PRP', u'TO', u'JJ', u'PRP$', u'NNS', u'.', u"''"], u'char_offsets': [[5715, 5720], [5720, 5722], [5723, 5728], [5729, 5732], [5733, 5734], [5734, 5737], [5738, 5741], [5742, 5747], [5748, 5750], [5751, 5753], [5754, 5758], [5759, 5763], [5764, 5769], [5769, 5770], [5770, 5771]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.16428813338279724, {u'tokens': [u'Hannaford', u',', u'169', u'It', u'was', u'also', u'Parker', u'who', u',', u'upon', u'learning', u'that', u'Coolidge', u'had', u'died', u',', u'reportedly', u'remarked', u',', u'``', u'How', u'can', u'they', u'tell', u'?', u"''"], u'lemmas': [u'Hannaford', u',', u'169', u'it', u'be', u'also', u'Parker', u'who', u',', u'upon', u'learn', u'that', u'Coolidge', u'have', u'die', u',', u'reportedly', u'remark', u',', u'``', u'how', u'can', u'they', u'tell', u'?', u"''"], u'pos': [u'NNP', u',', u'CD', u'PRP', u'VBD', u'RB', u'NNP', u'WP', u',', u'IN', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u',', u'RB', u'VBD', u',', u'``', u'WRB', u'MD', u'PRP', u'VB', u'.', u"''"], u'char_offsets': [[20665, 20674], [20674, 20675], [20676, 20679], [20681, 20683], [20684, 20687], [20688, 20692], [20693, 20699], [20700, 20703], [20703, 20704], [20705, 20709], [20710, 20718], [20719, 20723], [20724, 20732], [20733, 20736], [20737, 20741], [20741, 20742], [20743, 20753], [20754, 20762], [20762, 20763], [20764, 20765], [20765, 20768], [20769, 20772], [20773, 20777], [20778, 20782], [20782, 20783], [20783, 20784]]}) 
answer: set([u'massachusetts', u'governor'])
candidate Sentence: (0.1468682587146759, {u'tokens': [u'Have', u'Faith', u'in', u'Massachusetts', u':', u'A', u'Collection', u'of', u'Speeches', u'And', u'Messages', u'by', u'Calvin', u'Coolidge', u',', u'1919', u',', u'ISBN', u'1417926082', u'.'], u'lemmas': [u'have', u'faith', u'in', u'Massachusetts', u':', u'A', u'Collection', u'of', u'Speeches', u'and', u'Messages', u'by', u'Calvin', u'Coolidge', u',', u'1919', u',', u'ISBN', u'1417926082', u'.'], u'pos': [u'VBP', u'NN', u'IN', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNPS', u'CC', u'NNPS', u'IN', u'NNP', u'NNP', u',', u'CD', u',', u'NNP', u'CD', u'.'], u'char_offsets': [[11342, 11346], [11347, 11352], [11353, 11355], [11356, 11369], [11369, 11370], [11371, 11372], [11373, 11383], [11384, 11386], [11387, 11395], [11396, 11399], [11400, 11408], [11409, 11411], [11412, 11418], [11419, 11427], [11427, 11428], [11429, 11433], [11433, 11434], [11435, 11439], [11440, 11450], [11450, 11451]]}) 
answer: set([u'governor'])
candidate Sentence: (0.14686617255210876, {u'tokens': [u'Fuess', u',', u'186', u'Coolidge', u'also', u'wielded', u'the', u'veto', u'pen', u'as', u'governor', u'.'], u'lemmas': [u'Fuess', u',', u'186', u'Coolidge', u'also', u'wield', u'the', u'veto', u'pen', u'as', u'governor', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'RB', u'VBD', u'DT', u'NN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[17545, 17550], [17550, 17551], [17552, 17555], [17556, 17564], [17565, 17569], [17570, 17577], [17578, 17581], [17582, 17586], [17587, 17590], [17591, 17593], [17594, 17602], [17602, 17603]]}) 
answer: set([u'massachusetts'])
candidate Sentence: (0.13235719501972198, {u'tokens': [u'Sobel', u',', u'90', u'--', u'92', u'Towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'them', u'were', u'proposing', u'his', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'lemmas': [u'Sobel', u',', u'90', u'--', u'92', u'towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'they', u'be', u'propose', u'he', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'JJ', u'IN', u'PRP', u'VBD', u'VBG', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'NN', u'NN', u'.'], u'char_offsets': [[11615, 11620], [11620, 11621], [11622, 11624], [11624, 11625], [11625, 11627], [11629, 11636], [11637, 11640], [11641, 11644], [11645, 11647], [11648, 11651], [11652, 11656], [11656, 11657], [11658, 11662], [11663, 11665], [11666, 11670], [11671, 11675], [11676, 11685], [11686, 11689], [11690, 11694], [11695, 11698], [11699, 11709], [11710, 11712], [11713, 11723], [11724, 11732], [11732, 11733]]}) 
answer: set([u'massachusetts'])

Was Calvin Coolidge a governor of Massachusetts?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83c20>.answer
_____________________________ test_yesno[param41] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83cf8>, (<src.tfidf.TF_IDF object at 0x1084de390>, set(['calvin', 'coolidge'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83cf8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.56697702407836914, {u'tokens': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'was', u'unopposed', u'for', u'the', u'Republican', u'nomination', u'for', u'Governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'lemmas': [u'Sobel', u',', u'107', u'--', u'110', u'Coolidge', u'be', u'unoppose', u'for', u'the', u'republican', u'nomination', u'for', u'governor', u'of', u'Massachusetts', u'in', u'1918', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[13192, 13197], [13197, 13198], [13199, 13202], [13202, 13203], [13203, 13206], [13207, 13215], [13216, 13219], [13220, 13229], [13230, 13233], [13234, 13237], [13238, 13248], [13249, 13259], [13260, 13263], [13264, 13272], [13273, 13275], [13276, 13289], [13290, 13292], [13293, 13297], [13297, 13298]]}) 
answer: set([u'oppose'])
candidate Sentence: (0.24395765364170074, {u'tokens': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'lemmas': [u'Calvin', u'and', u'Grace', u'Coolidge', u',', u'about', u'1918', u'.'], u'pos': [u'NNP', u'CC', u'NNP', u'NNP', u',', u'IN', u'CD', u'.'], u'char_offsets': [[7958, 7964], [7965, 7968], [7969, 7974], [7975, 7983], [7983, 7984], [7985, 7990], [7991, 7995], [7995, 7996]]}) 
answer: set([u'nomination', u'republican', u'oppose', u'massachusetts', u'governor'])
candidate Sentence: (0.22434341907501221, {u'tokens': [u'Sobel', u',', u'90', u'--', u'92', u'Towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'them', u'were', u'proposing', u'his', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'lemmas': [u'Sobel', u',', u'90', u'--', u'92', u'towards', u'the', u'end', u'of', u'the', u'term', u',', u'many', u'of', u'they', u'be', u'propose', u'he', u'name', u'for', u'nomination', u'to', u'lieutenant', u'governor', u'.'], u'pos': [u'NNP', u',', u'CD', u':', u'CD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'JJ', u'IN', u'PRP', u'VBD', u'VBG', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'NN', u'NN', u'.'], u'char_offsets': [[11615, 11620], [11620, 11621], [11622, 11624], [11624, 11625], [11625, 11627], [11629, 11636], [11637, 11640], [11641, 11644], [11645, 11647], [11648, 11651], [11652, 11656], [11656, 11657], [11658, 11662], [11663, 11665], [11666, 11670], [11671, 11675], [11676, 11685], [11686, 11689], [11690, 11694], [11695, 11698], [11699, 11709], [11710, 11712], [11713, 11723], [11724, 11732], [11732, 11733]]}) 
answer: set([u'1918', u'republican', u'oppose', u'massachusetts'])
candidate Sentence: (0.19658295810222626, {u'tokens': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duties', u'as', u'lieutenant', u'governor', u'were', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'does', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'did', u'become', u'an', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'lemmas': [u'Fuess', u',', u'145', u'Coolidge', u"'s", u'duty', u'as', u'lieutenant', u'governor', u'be', u'few', u';', u'in', u'Massachusetts', u',', u'the', u'lieutenant', u'governor', u'do', u'not', u'preside', u'over', u'the', u'state', u'Senate', u',', u'although', u'Coolidge', u'do', u'become', u'a', u'ex', u'officio', u'member', u'of', u'the', u'governor', u"'s", u'cabinet', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'POS', u'NNS', u'IN', u'NN', u'NN', u'VBD', u'JJ', u':', u'IN', u'NNP', u',', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'VB', u'IN', u'DT', u'NN', u'NNP', u',', u'IN', u'NNP', u'VBD', u'VB', u'DT', u'FW', u'FW', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[12564, 12569], [12569, 12570], [12571, 12574], [12575, 12583], [12583, 12585], [12586, 12592], [12593, 12595], [12596, 12606], [12607, 12615], [12616, 12620], [12621, 12624], [12624, 12625], [12626, 12628], [12629, 12642], [12642, 12643], [12644, 12647], [12648, 12658], [12659, 12667], [12668, 12672], [12673, 12676], [12677, 12684], [12685, 12689], [12690, 12693], [12694, 12699], [12700, 12706], [12706, 12707], [12708, 12716], [12717, 12725], [12726, 12729], [12730, 12736], [12737, 12739], [12740, 12742], [12743, 12750], [12751, 12757], [12758, 12760], [12761, 12764], [12765, 12773], [12773, 12775], [12776, 12783], [12783, 12784]]}) 
answer: set([u'1918', u'republican', u'oppose', u'nomination'])
candidate Sentence: (0.19547483325004578, {u'tokens': [u'Brandes', u',', u'___', u'Even', u'so', u',', u'Coolidge', u'had', u'no', u'desire', u'to', u'split', u'the', u'party', u'by', u'publicly', u'opposing', u'the', u'popular', u'Commerce', u'Secretary', u"'s", u'nomination', u'.'], u'lemmas': [u'Brandes', u',', u'___', u'even', u'so', u',', u'Coolidge', u'have', u'no', u'desire', u'to', u'split', u'the', u'party', u'by', u'publicly', u'oppose', u'the', u'popular', u'Commerce', u'Secretary', u"'s", u'nomination', u'.'], u'pos': [u'NNP', u',', u'CD', u'RB', u'RB', u',', u'NNP', u'VBD', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'RB', u'VBG', u'DT', u'JJ', u'NNP', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[32822, 32829], [32829, 32830], [32831, 32834], [32836, 32840], [32841, 32843], [32843, 32844], [32845, 32853], [32854, 32857], [32858, 32860], [32861, 32867], [32868, 32870], [32871, 32876], [32877, 32880], [32881, 32886], [32887, 32889], [32890, 32898], [32899, 32907], [32908, 32911], [32912, 32919], [32920, 32928], [32929, 32938], [32938, 32940], [32941, 32951], [32951, 32952]]}) 
answer: set([u'1918', u'republican', u'massachusetts', u'governor'])
candidate Sentence: (0.18345341086387634, {u'tokens': [u'Did', u'he', u'support', u'these', u'measures', u'while', u'president', u'?'], u'lemmas': [u'do', u'he', u'support', u'these', u'measure', u'while', u'president', u'?'], u'pos': [u'VBD', u'PRP', u'VB', u'DT', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[26742, 26745], [26746, 26748], [26749, 26756], [26757, 26762], [26763, 26771], [26772, 26777], [26778, 26787], [26787, 26788]]}) 
answer: set([u'governor', u'1918', u'oppose', u'massachusetts', u'republican', u'nomination'])
candidate Sentence: (0.15148545801639557, {u'tokens': [u'He', u'appointed', u'Stone', u'to', u'the', u'Supreme', u'Court', u'in', u'1925', u',', u'and', u'the', u'Senate', u'approved', u'the', u'nomination', u'.'], u'lemmas': [u'he', u'appoint', u'Stone', u'to', u'the', u'Supreme', u'Court', u'in', u'1925', u',', u'and', u'the', u'Senate', u'approve', u'the', u'nomination', u'.'], u'pos': [u'PRP', u'VBD', u'NNP', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'CD', u',', u'CC', u'DT', u'NNP', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[34517, 34519], [34520, 34529], [34530, 34535], [34536, 34538], [34539, 34542], [34543, 34550], [34551, 34556], [34557, 34559], [34560, 34564], [34564, 34565], [34566, 34569], [34570, 34573], [34574, 34580], [34581, 34589], [34590, 34593], [34594, 34604], [34604, 34605]]}) 
answer: set([u'1918', u'republican', u'oppose', u'massachusetts', u'governor'])
candidate Sentence: (0.14311978220939636, {u'tokens': [u'Although', u'Coolidge', u'himself', u'was', u'opposed', u'to', u'Prohibition', u',', u'he', u'felt', u'constrained', u'to', u'veto', u'the', u'bill', u'.'], u'lemmas': [u'although', u'Coolidge', u'himself', u'be', u'oppose', u'to', u'Prohibition', u',', u'he', u'feel', u'constrain', u'to', u'veto', u'the', u'bill', u'.'], u'pos': [u'IN', u'NNP', u'PRP', u'VBD', u'VBN', u'TO', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'TO', u'VB', u'DT', u'NN', u'.'], u'char_offsets': [[17869, 17877], [17878, 17886], [17887, 17894], [17895, 17898], [17899, 17906], [17907, 17909], [17910, 17921], [17921, 17922], [17923, 17925], [17926, 17930], [17931, 17942], [17943, 17945], [17946, 17950], [17951, 17954], [17955, 17959], [17959, 17960]]}) 
answer: set([u'1918', u'republican', u'nomination', u'massachusetts', u'governor'])
candidate Sentence: (0.13533505797386169, {u'tokens': [u'In', u'1906', u'the', u'local', u'Republican', u'committee', u'nominated', u'Coolidge', u'for', u'election', u'to', u'the', u'state', u'House', u'of', u'Representatives', u'.'], u'lemmas': [u'in', u'1906', u'the', u'local', u'republican', u'committee', u'nominate', u'Coolidge', u'for', u'election', u'to', u'the', u'state', u'House', u'of', u'Representatives', u'.'], u'pos': [u'IN', u'CD', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'NNP', u'IN', u'NN', u'TO', u'DT', u'NN', u'NNP', u'IN', u'NNPS', u'.'], u'char_offsets': [[7997, 7999], [8000, 8004], [8005, 8008], [8009, 8014], [8015, 8025], [8026, 8035], [8036, 8045], [8046, 8054], [8055, 8058], [8059, 8067], [8068, 8070], [8071, 8074], [8075, 8080], [8081, 8086], [8087, 8089], [8090, 8105], [8105, 8106]]}) 
answer: set([u'1918', u'oppose', u'massachusetts', u'governor', u'nomination'])
candidate Sentence: (0.12880413234233856, {u'tokens': [u'A', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'worked', u'his', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'becoming', u'governor', u'of', u'that', u'state', u'.'], u'lemmas': [u'a', u'lawyer', u'from', u'Vermont', u',', u'Coolidge', u'work', u'he', u'way', u'up', u'the', u'ladder', u'of', u'Massachusetts', u'state', u'politics', u',', u'eventually', u'become', u'governor', u'of', u'that', u'state', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NN', u'NNS', u',', u'RB', u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[161, 162], [163, 169], [170, 174], [175, 182], [182, 183], [184, 192], [193, 199], [200, 203], [204, 207], [208, 210], [211, 214], [215, 221], [222, 224], [225, 238], [239, 244], [245, 253], [253, 254], [255, 265], [266, 274], [275, 283], [284, 286], [287, 291], [292, 297], [297, 298]]}) 
answer: set([u'1918', u'republican', u'oppose', u'nomination'])

Was Coolidge opposed in the Republican nomination for Governor of Massachusetts in 1918?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa83cf8>.answer
_____________________________ test_yesno[param45] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83e18>, (<src.tfidf.TF_IDF object at 0x1061d21d0>, set(['canada'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa83e18>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.68622696399688721, {u'tokens': [u'France', u'ceded', u'nearly', u'all', u'of', u'its', u'colonies', u'in', u'North', u'America', u'in', u'1763', u'after', u'the', u'Seven', u'Years', u'War', u'.'], u'lemmas': [u'France', u'cede', u'nearly', u'all', u'of', u'its', u'colony', u'in', u'North', u'America', u'in', u'1763', u'after', u'the', u'seven', u'year', u'War', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u'DT', u'IN', u'PRP$', u'NNS', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'IN', u'DT', u'CD', u'NNS', u'NNP', u'.'], u'char_offsets': [[498, 504], [505, 510], [511, 517], [518, 521], [522, 524], [525, 528], [529, 537], [538, 540], [541, 546], [547, 554], [555, 557], [558, 562], [563, 568], [569, 572], [573, 578], [579, 584], [585, 588], [588, 589]]}) 
answer: set([u'europe'])
candidate Sentence: (0.20194312930107117, {u'tokens': [u'Mainland', u'Nova', u'Scotia', u'came', u'under', u'British', u'rule', u'with', u'the', u'Treaty', u'of', u'Utrecht', u'-LRB-', u'1713', u'-RRB-', u';', u'the', u'Treaty', u'of', u'Paris', u'-LRB-', u'1763', u'-RRB-', u'ceded', u'Canada', u'and', u'most', u'of', u'New', u'France', u'to', u'Britain', u'following', u'the', u'Seven', u'Years', u"'", u'War', u'.'], u'lemmas': [u'mainland', u'Nova', u'Scotia', u'come', u'under', u'british', u'rule', u'with', u'the', u'Treaty', u'of', u'Utrecht', u'-lrb-', u'1713', u'-rrb-', u';', u'the', u'Treaty', u'of', u'Paris', u'-lrb-', u'1763', u'-rrb-', u'cede', u'Canada', u'and', u'most', u'of', u'New', u'France', u'to', u'Britain', u'follow', u'the', u'seven', u'year', u"'", u'war', u'.'], u'pos': [u'NN', u'NNP', u'NNP', u'VBD', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u':', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'NNP', u'CC', u'JJS', u'IN', u'NNP', u'NNP', u'TO', u'NNP', u'VBG', u'DT', u'CD', u'NNS', u'POS', u'NN', u'.'], u'char_offsets': [[4358, 4366], [4367, 4371], [4372, 4378], [4379, 4383], [4384, 4389], [4390, 4397], [4398, 4402], [4403, 4407], [4408, 4411], [4412, 4418], [4419, 4421], [4422, 4429], [4430, 4431], [4431, 4435], [4435, 4436], [4436, 4437], [4438, 4441], [4442, 4448], [4449, 4451], [4452, 4457], [4458, 4459], [4459, 4463], [4463, 4464], [4465, 4470], [4471, 4477], [4478, 4481], [4482, 4486], [4487, 4489], [4490, 4493], [4494, 4500], [4501, 4503], [4504, 4511], [4512, 4521], [4522, 4525], [4526, 4531], [4532, 4537], [4537, 4538], [4539, 4542], [4542, 4543]]}) 
answer: set([u'europe', u'colony', u'nearly'])
candidate Sentence: (0.15466681122779846, {u'tokens': [u'The', u'Royal', u'Proclamation', u'-LRB-', u'1763', u'-RRB-', u'carved', u'the', u'Province', u'of', u'Quebec', u'out', u'of', u'New', u'France', u'and', u'annexed', u'Cape', u'Breton', u'Island', u'to', u'Nova', u'Scotia', u'.'], u'lemmas': [u'the', u'Royal', u'Proclamation', u'-lrb-', u'1763', u'-rrb-', u'carve', u'the', u'Province', u'of', u'Quebec', u'out', u'of', u'New', u'France', u'and', u'annex', u'Cape', u'Breton', u'Island', u'to', u'Nova', u'Scotia', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'DT', u'NNP', u'IN', u'NNP', u'IN', u'IN', u'NNP', u'NNP', u'CC', u'VBD', u'NNP', u'NNP', u'NNP', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[4544, 4547], [4548, 4553], [4554, 4566], [4567, 4568], [4568, 4572], [4572, 4573], [4574, 4580], [4581, 4584], [4585, 4593], [4594, 4596], [4597, 4603], [4604, 4607], [4608, 4610], [4611, 4614], [4615, 4621], [4622, 4625], [4626, 4633], [4634, 4638], [4639, 4645], [4646, 4652], [4653, 4655], [4656, 4660], [4661, 4667], [4667, 4668]]}) 
answer: set([u'europe', u'cede', u'colony', u'nearly'])
candidate Sentence: (0.14345112442970276, {u'tokens': [u'The', u'French', u'colony', u'of', u'Canada', u'referred', u'to', u'the', u'part', u'of', u'New', u'France', u'along', u'the', u'Saint', u'Lawrence', u'River', u'and', u'the', u'northern', u'shores', u'of', u'the', u'Great', u'Lakes', u'.'], u'lemmas': [u'the', u'french', u'colony', u'of', u'Canada', u'refer', u'to', u'the', u'part', u'of', u'New', u'France', u'along', u'the', u'Saint', u'Lawrence', u'River', u'and', u'the', u'northern', u'shore', u'of', u'the', u'great', u'lake', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'.'], u'char_offsets': [[2026, 2029], [2030, 2036], [2037, 2043], [2044, 2046], [2047, 2053], [2054, 2062], [2063, 2065], [2066, 2069], [2070, 2074], [2075, 2077], [2078, 2081], [2082, 2088], [2089, 2094], [2095, 2098], [2099, 2104], [2105, 2113], [2114, 2119], [2120, 2123], [2124, 2127], [2128, 2136], [2137, 2143], [2144, 2146], [2147, 2150], [2151, 2156], [2157, 2162], [2162, 2163]]}) 
answer: set([u'europe', u'cede', u'nearly', u'1763'])
candidate Sentence: (0.13503041863441467, {u'tokens': [u'Using', u'its', u'spending', u'powers', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policies', u'in', u'provincial', u'areas', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'provinces', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'lemmas': [u'use', u'its', u'spending', u'power', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policy', u'in', u'provincial', u'area', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'province', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'NNS', u',', u'DT', u'JJ', u'NN', u'MD', u'VB', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u':', u'DT', u'NNS', u'MD', u'VB', u'IN', u'IN', u'DT', u',', u'CC', u'RB', u'VBP', u'RB', u'IN', u'NN', u'.'], u'char_offsets': [[21469, 21474], [21475, 21478], [21479, 21487], [21488, 21494], [21494, 21495], [21496, 21499], [21500, 21507], [21508, 21518], [21519, 21522], [21523, 21531], [21532, 21540], [21541, 21549], [21550, 21552], [21553, 21563], [21564, 21569], [21569, 21570], [21571, 21575], [21576, 21578], [21579, 21582], [21583, 21589], [21590, 21596], [21597, 21600], [21600, 21601], [21602, 21605], [21606, 21615], [21616, 21619], [21620, 21623], [21624, 21627], [21628, 21630], [21631, 21636], [21636, 21637], [21638, 21641], [21642, 21648], [21649, 21651], [21652, 21654], [21655, 21657], [21658, 21666], [21666, 21667]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])
candidate Sentence: (0.11799820512533188, {u'tokens': [u'A', u'series', u'of', u'four', u'Intercolonial', u'Wars', u'erupted', u'between', u'1689', u'and', u'1763', u'.'], u'lemmas': [u'a', u'series', u'of', u'four', u'intercolonial', u'war', u'erupt', u'between', u'1689', u'and', u'1763', u'.'], u'pos': [u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u'VBD', u'IN', u'CD', u'CC', u'CD', u'.'], u'char_offsets': [[4291, 4292], [4293, 4299], [4300, 4302], [4303, 4307], [4308, 4321], [4322, 4326], [4327, 4334], [4335, 4342], [4343, 4347], [4348, 4351], [4352, 4356], [4356, 4357]]}) 
answer: set([u'europe', u'cede', u'colony', u'nearly', u'france'])
candidate Sentence: (0.11674156785011292, {u'tokens': [u'The', u'Treaty', u'of', u'Paris', u'-LRB-', u'1783', u'-RRB-', u'recognized', u'American', u'independence', u'and', u'ceded', u'territories', u'south', u'of', u'the', u'Great', u'Lakes', u'to', u'the', u'United', u'States', u'.'], u'lemmas': [u'the', u'Treaty', u'of', u'Paris', u'-lrb-', u'1783', u'-rrb-', u'recognize', u'american', u'independence', u'and', u'cede', u'territory', u'south', u'of', u'the', u'great', u'lake', u'to', u'the', u'United', u'States', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'JJ', u'NN', u'CC', u'VBD', u'NNS', u'RB', u'IN', u'DT', u'JJ', u'NNS', u'TO', u'DT', u'NNP', u'NNPS', u'.'], u'char_offsets': [[5123, 5126], [5127, 5133], [5134, 5136], [5137, 5142], [5143, 5144], [5144, 5148], [5148, 5149], [5150, 5160], [5161, 5169], [5170, 5182], [5183, 5186], [5187, 5192], [5193, 5204], [5205, 5210], [5211, 5213], [5214, 5217], [5218, 5223], [5224, 5229], [5230, 5232], [5233, 5236], [5237, 5243], [5244, 5250], [5250, 5251]]}) 
answer: set([u'europe', u'1763', u'colony', u'nearly', u'france'])
candidate Sentence: (0.11139865219593048, {u'tokens': [u'Canada', u'also', u'maintains', u'historic', u'ties', u'to', u'the', u'United', u'Kingdom', u'and', u'France', u'and', u'to', u'other', u'former', u'British', u'and', u'French', u'colonies', u'through', u'Canada', u"'s", u'membership', u'in', u'the', u'Commonwealth', u'of', u'Nations', u'and', u'La', u'Francophonie', u'-LRB-', u'French-Speaking', u'Countries', u'-RRB-', u'.'], u'lemmas': [u'Canada', u'also', u'maintain', u'historic', u'tie', u'to', u'the', u'United', u'Kingdom', u'and', u'France', u'and', u'to', u'other', u'former', u'british', u'and', u'french', u'colony', u'through', u'Canada', u"'s", u'membership', u'in', u'the', u'Commonwealth', u'of', u'Nations', u'and', u'La', u'Francophonie', u'-lrb-', u'french-speaking', u'country', u'-rrb-', u'.'], u'pos': [u'NNP', u'RB', u'VBZ', u'JJ', u'NNS', u'TO', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'CC', u'TO', u'JJ', u'JJ', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'NNP', u'NNP', u'-LRB-', u'JJ', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[17449, 17455], [17456, 17460], [17461, 17470], [17471, 17479], [17480, 17484], [17485, 17487], [17488, 17491], [17492, 17498], [17499, 17506], [17507, 17510], [17511, 17517], [17518, 17521], [17522, 17524], [17525, 17530], [17531, 17537], [17538, 17545], [17546, 17549], [17550, 17556], [17557, 17565], [17566, 17573], [17574, 17580], [17580, 17582], [17583, 17593], [17594, 17596], [17597, 17600], [17601, 17613], [17614, 17616], [17617, 17624], [17625, 17628], [17629, 17631], [17632, 17644], [17645, 17646], [17646, 17661], [17662, 17671], [17671, 17672], [17672, 17673]]}) 
answer: set([u'europe', u'cede', u'nearly', u'1763'])
candidate Sentence: (0.10500571876764297, {u'tokens': [u'While', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'parties', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'parties', u'with', u'elected', u'representation', u'is', u'substantial', u'.'], u'lemmas': [u'while', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'party', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'party', u'with', u'elect', u'representation', u'be', u'substantial', u'.'], u'pos': [u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'JJ', u'JJR', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NN', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'VBN', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[15634, 15639], [15640, 15643], [15644, 15649], [15650, 15655], [15656, 15658], [15659, 15665], [15666, 15669], [15670, 15675], [15676, 15683], [15684, 15691], [15692, 15694], [15695, 15698], [15699, 15703], [15704, 15711], [15712, 15726], [15727, 15729], [15730, 15740], [15740, 15741], [15742, 15745], [15746, 15750], [15751, 15753], [15754, 15764], [15765, 15772], [15773, 15777], [15778, 15785], [15786, 15800], [15801, 15803], [15804, 15815], [15815, 15816]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])
candidate Sentence: (0.074145190417766571, {u'tokens': [u'Responsible', u'government', u'was', u'established', u'for', u'all', u'British', u'North', u'American', u'provinces', u'by', u'1849', u'.'], u'lemmas': [u'responsible', u'government', u'be', u'establish', u'for', u'all', u'british', u'north', u'american', u'province', u'by', u'1849', u'.'], u'pos': [u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[6547, 6558], [6559, 6569], [6570, 6573], [6574, 6585], [6586, 6589], [6590, 6593], [6594, 6601], [6602, 6607], [6608, 6616], [6617, 6626], [6627, 6629], [6630, 6634], [6634, 6635]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])

Did France cede nearly all of its colonies in Europe in 1763?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa83e18>.answer
_____________________________ test_yesno[param46] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa83e60>, (<src.tfidf.TF_IDF object at 0x1061d21d0>, set(['canada'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa83e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.68622696399688721, {u'tokens': [u'France', u'ceded', u'nearly', u'all', u'of', u'its', u'colonies', u'in', u'North', u'America', u'in', u'1763', u'after', u'the', u'Seven', u'Years', u'War', u'.'], u'lemmas': [u'France', u'cede', u'nearly', u'all', u'of', u'its', u'colony', u'in', u'North', u'America', u'in', u'1763', u'after', u'the', u'seven', u'year', u'War', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u'DT', u'IN', u'PRP$', u'NNS', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'IN', u'DT', u'CD', u'NNS', u'NNP', u'.'], u'char_offsets': [[498, 504], [505, 510], [511, 517], [518, 521], [522, 524], [525, 528], [529, 537], [538, 540], [541, 546], [547, 554], [555, 557], [558, 562], [563, 568], [569, 572], [573, 578], [579, 584], [585, 588], [588, 589]]}) 
answer: set([u'europe'])
candidate Sentence: (0.20194312930107117, {u'tokens': [u'Mainland', u'Nova', u'Scotia', u'came', u'under', u'British', u'rule', u'with', u'the', u'Treaty', u'of', u'Utrecht', u'-LRB-', u'1713', u'-RRB-', u';', u'the', u'Treaty', u'of', u'Paris', u'-LRB-', u'1763', u'-RRB-', u'ceded', u'Canada', u'and', u'most', u'of', u'New', u'France', u'to', u'Britain', u'following', u'the', u'Seven', u'Years', u"'", u'War', u'.'], u'lemmas': [u'mainland', u'Nova', u'Scotia', u'come', u'under', u'british', u'rule', u'with', u'the', u'Treaty', u'of', u'Utrecht', u'-lrb-', u'1713', u'-rrb-', u';', u'the', u'Treaty', u'of', u'Paris', u'-lrb-', u'1763', u'-rrb-', u'cede', u'Canada', u'and', u'most', u'of', u'New', u'France', u'to', u'Britain', u'follow', u'the', u'seven', u'year', u"'", u'war', u'.'], u'pos': [u'NN', u'NNP', u'NNP', u'VBD', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u':', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'NNP', u'CC', u'JJS', u'IN', u'NNP', u'NNP', u'TO', u'NNP', u'VBG', u'DT', u'CD', u'NNS', u'POS', u'NN', u'.'], u'char_offsets': [[4358, 4366], [4367, 4371], [4372, 4378], [4379, 4383], [4384, 4389], [4390, 4397], [4398, 4402], [4403, 4407], [4408, 4411], [4412, 4418], [4419, 4421], [4422, 4429], [4430, 4431], [4431, 4435], [4435, 4436], [4436, 4437], [4438, 4441], [4442, 4448], [4449, 4451], [4452, 4457], [4458, 4459], [4459, 4463], [4463, 4464], [4465, 4470], [4471, 4477], [4478, 4481], [4482, 4486], [4487, 4489], [4490, 4493], [4494, 4500], [4501, 4503], [4504, 4511], [4512, 4521], [4522, 4525], [4526, 4531], [4532, 4537], [4537, 4538], [4539, 4542], [4542, 4543]]}) 
answer: set([u'europe', u'colony', u'nearly'])
candidate Sentence: (0.15466681122779846, {u'tokens': [u'The', u'Royal', u'Proclamation', u'-LRB-', u'1763', u'-RRB-', u'carved', u'the', u'Province', u'of', u'Quebec', u'out', u'of', u'New', u'France', u'and', u'annexed', u'Cape', u'Breton', u'Island', u'to', u'Nova', u'Scotia', u'.'], u'lemmas': [u'the', u'Royal', u'Proclamation', u'-lrb-', u'1763', u'-rrb-', u'carve', u'the', u'Province', u'of', u'Quebec', u'out', u'of', u'New', u'France', u'and', u'annex', u'Cape', u'Breton', u'Island', u'to', u'Nova', u'Scotia', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'DT', u'NNP', u'IN', u'NNP', u'IN', u'IN', u'NNP', u'NNP', u'CC', u'VBD', u'NNP', u'NNP', u'NNP', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[4544, 4547], [4548, 4553], [4554, 4566], [4567, 4568], [4568, 4572], [4572, 4573], [4574, 4580], [4581, 4584], [4585, 4593], [4594, 4596], [4597, 4603], [4604, 4607], [4608, 4610], [4611, 4614], [4615, 4621], [4622, 4625], [4626, 4633], [4634, 4638], [4639, 4645], [4646, 4652], [4653, 4655], [4656, 4660], [4661, 4667], [4667, 4668]]}) 
answer: set([u'europe', u'cede', u'colony', u'nearly'])
candidate Sentence: (0.14345112442970276, {u'tokens': [u'The', u'French', u'colony', u'of', u'Canada', u'referred', u'to', u'the', u'part', u'of', u'New', u'France', u'along', u'the', u'Saint', u'Lawrence', u'River', u'and', u'the', u'northern', u'shores', u'of', u'the', u'Great', u'Lakes', u'.'], u'lemmas': [u'the', u'french', u'colony', u'of', u'Canada', u'refer', u'to', u'the', u'part', u'of', u'New', u'France', u'along', u'the', u'Saint', u'Lawrence', u'River', u'and', u'the', u'northern', u'shore', u'of', u'the', u'great', u'lake', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'.'], u'char_offsets': [[2026, 2029], [2030, 2036], [2037, 2043], [2044, 2046], [2047, 2053], [2054, 2062], [2063, 2065], [2066, 2069], [2070, 2074], [2075, 2077], [2078, 2081], [2082, 2088], [2089, 2094], [2095, 2098], [2099, 2104], [2105, 2113], [2114, 2119], [2120, 2123], [2124, 2127], [2128, 2136], [2137, 2143], [2144, 2146], [2147, 2150], [2151, 2156], [2157, 2162], [2162, 2163]]}) 
answer: set([u'europe', u'cede', u'nearly', u'1763'])
candidate Sentence: (0.13503041863441467, {u'tokens': [u'Using', u'its', u'spending', u'powers', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policies', u'in', u'provincial', u'areas', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'provinces', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'lemmas': [u'use', u'its', u'spending', u'power', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policy', u'in', u'provincial', u'area', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'province', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'NNS', u',', u'DT', u'JJ', u'NN', u'MD', u'VB', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u':', u'DT', u'NNS', u'MD', u'VB', u'IN', u'IN', u'DT', u',', u'CC', u'RB', u'VBP', u'RB', u'IN', u'NN', u'.'], u'char_offsets': [[21469, 21474], [21475, 21478], [21479, 21487], [21488, 21494], [21494, 21495], [21496, 21499], [21500, 21507], [21508, 21518], [21519, 21522], [21523, 21531], [21532, 21540], [21541, 21549], [21550, 21552], [21553, 21563], [21564, 21569], [21569, 21570], [21571, 21575], [21576, 21578], [21579, 21582], [21583, 21589], [21590, 21596], [21597, 21600], [21600, 21601], [21602, 21605], [21606, 21615], [21616, 21619], [21620, 21623], [21624, 21627], [21628, 21630], [21631, 21636], [21636, 21637], [21638, 21641], [21642, 21648], [21649, 21651], [21652, 21654], [21655, 21657], [21658, 21666], [21666, 21667]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])
candidate Sentence: (0.11799820512533188, {u'tokens': [u'A', u'series', u'of', u'four', u'Intercolonial', u'Wars', u'erupted', u'between', u'1689', u'and', u'1763', u'.'], u'lemmas': [u'a', u'series', u'of', u'four', u'intercolonial', u'war', u'erupt', u'between', u'1689', u'and', u'1763', u'.'], u'pos': [u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u'VBD', u'IN', u'CD', u'CC', u'CD', u'.'], u'char_offsets': [[4291, 4292], [4293, 4299], [4300, 4302], [4303, 4307], [4308, 4321], [4322, 4326], [4327, 4334], [4335, 4342], [4343, 4347], [4348, 4351], [4352, 4356], [4356, 4357]]}) 
answer: set([u'europe', u'cede', u'colony', u'nearly', u'france'])
candidate Sentence: (0.11674156785011292, {u'tokens': [u'The', u'Treaty', u'of', u'Paris', u'-LRB-', u'1783', u'-RRB-', u'recognized', u'American', u'independence', u'and', u'ceded', u'territories', u'south', u'of', u'the', u'Great', u'Lakes', u'to', u'the', u'United', u'States', u'.'], u'lemmas': [u'the', u'Treaty', u'of', u'Paris', u'-lrb-', u'1783', u'-rrb-', u'recognize', u'american', u'independence', u'and', u'cede', u'territory', u'south', u'of', u'the', u'great', u'lake', u'to', u'the', u'United', u'States', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBD', u'JJ', u'NN', u'CC', u'VBD', u'NNS', u'RB', u'IN', u'DT', u'JJ', u'NNS', u'TO', u'DT', u'NNP', u'NNPS', u'.'], u'char_offsets': [[5123, 5126], [5127, 5133], [5134, 5136], [5137, 5142], [5143, 5144], [5144, 5148], [5148, 5149], [5150, 5160], [5161, 5169], [5170, 5182], [5183, 5186], [5187, 5192], [5193, 5204], [5205, 5210], [5211, 5213], [5214, 5217], [5218, 5223], [5224, 5229], [5230, 5232], [5233, 5236], [5237, 5243], [5244, 5250], [5250, 5251]]}) 
answer: set([u'europe', u'1763', u'colony', u'nearly', u'france'])
candidate Sentence: (0.11139865219593048, {u'tokens': [u'Canada', u'also', u'maintains', u'historic', u'ties', u'to', u'the', u'United', u'Kingdom', u'and', u'France', u'and', u'to', u'other', u'former', u'British', u'and', u'French', u'colonies', u'through', u'Canada', u"'s", u'membership', u'in', u'the', u'Commonwealth', u'of', u'Nations', u'and', u'La', u'Francophonie', u'-LRB-', u'French-Speaking', u'Countries', u'-RRB-', u'.'], u'lemmas': [u'Canada', u'also', u'maintain', u'historic', u'tie', u'to', u'the', u'United', u'Kingdom', u'and', u'France', u'and', u'to', u'other', u'former', u'british', u'and', u'french', u'colony', u'through', u'Canada', u"'s", u'membership', u'in', u'the', u'Commonwealth', u'of', u'Nations', u'and', u'La', u'Francophonie', u'-lrb-', u'french-speaking', u'country', u'-rrb-', u'.'], u'pos': [u'NNP', u'RB', u'VBZ', u'JJ', u'NNS', u'TO', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'CC', u'TO', u'JJ', u'JJ', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'NNP', u'NNP', u'-LRB-', u'JJ', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[17449, 17455], [17456, 17460], [17461, 17470], [17471, 17479], [17480, 17484], [17485, 17487], [17488, 17491], [17492, 17498], [17499, 17506], [17507, 17510], [17511, 17517], [17518, 17521], [17522, 17524], [17525, 17530], [17531, 17537], [17538, 17545], [17546, 17549], [17550, 17556], [17557, 17565], [17566, 17573], [17574, 17580], [17580, 17582], [17583, 17593], [17594, 17596], [17597, 17600], [17601, 17613], [17614, 17616], [17617, 17624], [17625, 17628], [17629, 17631], [17632, 17644], [17645, 17646], [17646, 17661], [17662, 17671], [17671, 17672], [17672, 17673]]}) 
answer: set([u'europe', u'cede', u'nearly', u'1763'])
candidate Sentence: (0.10500571876764297, {u'tokens': [u'While', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'parties', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'parties', u'with', u'elected', u'representation', u'is', u'substantial', u'.'], u'lemmas': [u'while', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'party', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'party', u'with', u'elect', u'representation', u'be', u'substantial', u'.'], u'pos': [u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'JJ', u'JJR', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NN', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'VBN', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[15634, 15639], [15640, 15643], [15644, 15649], [15650, 15655], [15656, 15658], [15659, 15665], [15666, 15669], [15670, 15675], [15676, 15683], [15684, 15691], [15692, 15694], [15695, 15698], [15699, 15703], [15704, 15711], [15712, 15726], [15727, 15729], [15730, 15740], [15740, 15741], [15742, 15745], [15746, 15750], [15751, 15753], [15754, 15764], [15765, 15772], [15773, 15777], [15778, 15785], [15786, 15800], [15801, 15803], [15804, 15815], [15815, 15816]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])
candidate Sentence: (0.074145190417766571, {u'tokens': [u'Responsible', u'government', u'was', u'established', u'for', u'all', u'British', u'North', u'American', u'provinces', u'by', u'1849', u'.'], u'lemmas': [u'responsible', u'government', u'be', u'establish', u'for', u'all', u'british', u'north', u'american', u'province', u'by', u'1849', u'.'], u'pos': [u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[6547, 6558], [6559, 6569], [6570, 6573], [6574, 6585], [6586, 6589], [6590, 6593], [6594, 6601], [6602, 6607], [6608, 6616], [6617, 6626], [6627, 6629], [6630, 6634], [6634, 6635]]}) 
answer: set([u'europe', u'cede', u'colony', u'france', u'nearly', u'1763'])

Did France cede nearly all of its colonies in Europe in 1763?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa83e60>.answer
_____________________________ test_yesno[param54] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa840e0>, (<src.tfidf.TF_IDF object at 0x1061d21d0>, set(['canada'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, it did not.') == True
E                +  where 'No, it did not.' = <src.question_processing.Question_parser instance at 0x10aa840e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.89920002222061157, {u'tokens': [u'Canadian', u'soldiers', u'would', u'win', u'the', u'Battle', u'of', u'Vimy', u'Ridge', u'in', u'1917', u'.'], u'lemmas': [u'canadian', u'soldier', u'would', u'win', u'the', u'battle', u'of', u'Vimy', u'Ridge', u'in', u'1917', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[8727, 8735], [8736, 8744], [8745, 8750], [8751, 8754], [8755, 8758], [8759, 8765], [8766, 8768], [8769, 8773], [8774, 8779], [8780, 8782], [8783, 8787], [8787, 8788]]}) 
answer: set([])
candidate Sentence: (0.16365236043930054, {u'tokens': [u'Canadian', u'troops', u'played', u'important', u'roles', u'in', u'the', u'Battle', u'of', u'the', u'Atlantic', u',', u'the', u'failed', u'1942', u'Dieppe', u'Raid', u'in', u'France', u',', u'the', u'Allied', u'invasion', u'of', u'Italy', u',', u'and', u'the', u'Battle', u'of', u'the', u'Scheldt', u'during', u'the', u'liberation', u'of', u'the', u'Netherlands', u'in', u'1944', u'.'], u'lemmas': [u'canadian', u'troops', u'play', u'important', u'role', u'in', u'the', u'battle', u'of', u'the', u'Atlantic', u',', u'the', u'fail', u'1942', u'Dieppe', u'raid', u'in', u'France', u',', u'the', u'Allied', u'invasion', u'of', u'Italy', u',', u'and', u'the', u'battle', u'of', u'the', u'Scheldt', u'during', u'the', u'liberation', u'of', u'the', u'Netherlands', u'in', u'1944', u'.'], u'pos': [u'JJ', u'NNS', u'VBD', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u',', u'DT', u'VBN', u'CD', u'NNP', u'NN', u'IN', u'NNP', u',', u'DT', u'NNP', u'NN', u'IN', u'NNP', u',', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[9696, 9704], [9705, 9711], [9712, 9718], [9719, 9728], [9729, 9734], [9735, 9737], [9738, 9741], [9742, 9748], [9749, 9751], [9752, 9755], [9756, 9764], [9764, 9765], [9766, 9769], [9770, 9776], [9777, 9781], [9782, 9788], [9789, 9793], [9794, 9796], [9797, 9803], [9803, 9804], [9805, 9808], [9809, 9815], [9816, 9824], [9825, 9827], [9828, 9833], [9833, 9834], [9835, 9838], [9839, 9842], [9843, 9849], [9850, 9852], [9853, 9856], [9857, 9864], [9865, 9871], [9872, 9875], [9876, 9886], [9887, 9889], [9890, 9893], [9894, 9905], [9906, 9908], [9909, 9913], [9913, 9914]]}) 
answer: set([u'win', u'vimy', u'ridge', u'1917', u'soldier'])
candidate Sentence: (0.09110337495803833, {u'tokens': [u'The', u'Conscription', u'Crisis', u'of', u'1917', u'erupted', u'when', u'conservative', u'Prime', u'Minister', u'Robert', u'Borden', u'brought', u'in', u'compulsory', u'military', u'service', u'over', u'the', u'objection', u'of', u'French-speaking', u'Quebecers', u'.'], u'lemmas': [u'the', u'Conscription', u'Crisis', u'of', u'1917', u'erupt', u'when', u'conservative', u'Prime', u'Minister', u'Robert', u'Borden', u'bring', u'in', u'compulsory', u'military', u'service', u'over', u'the', u'objection', u'of', u'french-speaking', u'Quebecers', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'IN', u'CD', u'VBD', u'WRB', u'JJ', u'NNP', u'NNP', u'NNP', u'NNP', u'VBD', u'RP', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNPS', u'.'], u'char_offsets': [[8922, 8925], [8926, 8938], [8939, 8945], [8946, 8948], [8949, 8953], [8955, 8962], [8963, 8967], [8968, 8980], [8981, 8986], [8987, 8995], [8996, 9002], [9003, 9009], [9010, 9017], [9018, 9020], [9021, 9031], [9032, 9040], [9041, 9048], [9049, 9053], [9054, 9057], [9058, 9067], [9068, 9070], [9071, 9086], [9087, 9096], [9096, 9097]]}) 
answer: set([u'ridge', u'canadian', u'win', u'soldier', u'battle', u'vimy'])
candidate Sentence: (0.084912732243537903, {u'tokens': [u'While', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'parties', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'parties', u'with', u'elected', u'representation', u'is', u'substantial', u'.'], u'lemmas': [u'while', u'the', u'Green', u'Party', u'of', u'Canada', u'and', u'other', u'smaller', u'party', u'do', u'not', u'have', u'current', u'representation', u'in', u'Parliament', u',', u'the', u'list', u'of', u'historical', u'party', u'with', u'elect', u'representation', u'be', u'substantial', u'.'], u'pos': [u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'JJ', u'JJR', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NN', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'VBN', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[15634, 15639], [15640, 15643], [15644, 15649], [15650, 15655], [15656, 15658], [15659, 15665], [15666, 15669], [15670, 15675], [15676, 15683], [15684, 15691], [15692, 15694], [15695, 15698], [15699, 15703], [15704, 15711], [15712, 15726], [15727, 15729], [15730, 15740], [15740, 15741], [15742, 15745], [15746, 15750], [15751, 15753], [15754, 15764], [15765, 15772], [15773, 15777], [15778, 15785], [15786, 15800], [15801, 15803], [15804, 15815], [15815, 15816]]}) 
answer: set([u'ridge', u'canadian', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.083978377282619476, {u'tokens': [u'Using', u'its', u'spending', u'powers', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policies', u'in', u'provincial', u'areas', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'provinces', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'lemmas': [u'use', u'its', u'spending', u'power', u',', u'the', u'federal', u'government', u'can', u'initiate', u'national', u'policy', u'in', u'provincial', u'area', u',', u'such', u'as', u'the', u'Canada', u'Health', u'Act', u';', u'the', u'province', u'can', u'opt', u'out', u'of', u'these', u',', u'but', u'rarely', u'do', u'so', u'in', u'practice', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'NNS', u',', u'DT', u'JJ', u'NN', u'MD', u'VB', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u':', u'DT', u'NNS', u'MD', u'VB', u'IN', u'IN', u'DT', u',', u'CC', u'RB', u'VBP', u'RB', u'IN', u'NN', u'.'], u'char_offsets': [[21469, 21474], [21475, 21478], [21479, 21487], [21488, 21494], [21494, 21495], [21496, 21499], [21500, 21507], [21508, 21518], [21519, 21522], [21523, 21531], [21532, 21540], [21541, 21549], [21550, 21552], [21553, 21563], [21564, 21569], [21569, 21570], [21571, 21575], [21576, 21578], [21579, 21582], [21583, 21589], [21590, 21596], [21597, 21600], [21600, 21601], [21602, 21605], [21606, 21615], [21616, 21619], [21620, 21623], [21624, 21627], [21628, 21630], [21631, 21636], [21636, 21637], [21638, 21641], [21642, 21648], [21649, 21651], [21652, 21654], [21655, 21657], [21658, 21666], [21666, 21667]]}) 
answer: set([u'ridge', u'canadian', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.035396255552768707, {u'tokens': [u'Canadian', u'provinces', u'and', u'territories', u'are', u'responsible', u'for', u'education', u'.'], u'lemmas': [u'canadian', u'province', u'and', u'territory', u'be', u'responsible', u'for', u'education', u'.'], u'pos': [u'JJ', u'NNS', u'CC', u'NNS', u'VBP', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[32327, 32335], [32336, 32345], [32346, 32349], [32350, 32361], [32362, 32365], [32366, 32377], [32378, 32381], [32382, 32391], [32391, 32392]]}) 
answer: set([u'ridge', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.026696182787418365, {u'tokens': [u'The', u'first', u'Canadian', u'Army', u'units', u'arrived', u'in', u'Britain', u'in', u'December', u'1939', u'.'], u'lemmas': [u'the', u'first', u'canadian', u'Army', u'unit', u'arrive', u'in', u'Britain', u'in', u'December', u'1939', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NNP', u'NNS', u'VBD', u'IN', u'NNP', u'IN', u'NNP', u'CD', u'.'], u'char_offsets': [[9626, 9629], [9630, 9635], [9636, 9644], [9645, 9649], [9650, 9655], [9656, 9663], [9664, 9666], [9667, 9674], [9675, 9677], [9678, 9686], [9687, 9691], [9691, 9692]]}) 
answer: set([u'ridge', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.026369348168373108, {u'tokens': [u'Glaciers', u'are', u'visible', u'in', u'the', u'Canadian', u'Rockies', u'and', u'Coast', u'Mountains', u'.'], u'lemmas': [u'glacier', u'be', u'visible', u'in', u'the', u'canadian', u'Rockies', u'and', u'Coast', u'mountain', u'.'], u'pos': [u'NNS', u'VBP', u'JJ', u'IN', u'DT', u'JJ', u'NNPS', u'CC', u'NNP', u'NNS', u'.'], u'char_offsets': [[22380, 22388], [22389, 22392], [22393, 22400], [22401, 22403], [22404, 22407], [22408, 22416], [22417, 22424], [22425, 22428], [22429, 22434], [22435, 22444], [22444, 22445]]}) 
answer: set([u'ridge', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.026352016255259514, {u'tokens': [u'Multicultural', u'heritage', u'is', u'enshrined', u'in', u'Section', u'27', u'of', u'the', u'Canadian', u'Charter', u'of', u'Rights', u'and', u'Freedoms', u'.'], u'lemmas': [u'multicultural', u'heritage', u'be', u'enshrine', u'in', u'section', u'27', u'of', u'the', u'canadian', u'Charter', u'of', u'Rights', u'and', u'Freedoms', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'NN', u'CD', u'IN', u'DT', u'JJ', u'NNP', u'IN', u'NNPS', u'CC', u'NNPS', u'.'], u'char_offsets': [[34162, 34175], [34176, 34184], [34185, 34187], [34188, 34197], [34198, 34200], [34201, 34208], [34209, 34211], [34212, 34214], [34215, 34218], [34219, 34227], [34228, 34235], [34236, 34238], [34239, 34245], [34246, 34249], [34250, 34258], [34258, 34259]]}) 
answer: set([u'ridge', u'win', u'soldier', u'battle', u'vimy', u'1917'])
candidate Sentence: (0.023917155340313911, {u'tokens': [u'The', u'creation', u'and', u'preservation', u'of', u'distinctly', u'Canadian', u'culture', u'are', u'supported', u'by', u'federal', u'government', u'programs', u',', u'laws', u'and', u'institutions', u'such', u'as', u'the', u'Canadian', u'Broadcasting', u'Corporation', u'-LRB-', u'CBC', u'-RRB-', u',', u'the', u'National', u'Film', u'Board', u'of', u'Canada', u'-LRB-', u'NFB', u'-RRB-', u',', u'and', u'the', u'Canadian', u'Radio-television', u'and', u'Telecommunications', u'Commission', u'-LRB-', u'CRTC', u'-RRB-', u'.'], u'lemmas': [u'the', u'creation', u'and', u'preservation', u'of', u'distinctly', u'canadian', u'culture', u'be', u'support', u'by', u'federal', u'government', u'program', u',', u'law', u'and', u'institution', u'such', u'as', u'the', u'Canadian', u'Broadcasting', u'Corporation', u'-lrb-', u'CBC', u'-rrb-', u',', u'the', u'National', u'Film', u'Board', u'of', u'Canada', u'-lrb-', u'NFB', u'-rrb-', u',', u'and', u'the', u'canadian', u'radio-television', u'and', u'Telecommunications', u'Commission', u'-lrb-', u'CRTC', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'CC', u'NN', u'IN', u'RB', u'JJ', u'NN', u'VBP', u'VBN', u'IN', u'JJ', u'NN', u'NNS', u',', u'NNS', u'CC', u'NNS', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'CC', u'DT', u'JJ', u'NN', u'CC', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[33514, 33517], [33518, 33526], [33527, 33530], [33531, 33543], [33544, 33546], [33547, 33557], [33558, 33566], [33567, 33574], [33575, 33578], [33579, 33588], [33589, 33591], [33592, 33599], [33600, 33610], [33611, 33619], [33619, 33620], [33621, 33625], [33626, 33629], [33630, 33642], [33643, 33647], [33648, 33650], [33651, 33654], [33655, 33663], [33664, 33676], [33677, 33688], [33689, 33690], [33690, 33693], [33693, 33694], [33694, 33695], [33696, 33699], [33700, 33708], [33709, 33713], [33714, 33719], [33720, 33722], [33723, 33729], [33730, 33731], [33731, 33734], [33734, 33735], [33735, 33736], [33737, 33740], [33741, 33744], [33745, 33753], [33754, 33770], [33771, 33774], [33775, 33793], [33794, 33804], [33805, 33806], [33806, 33810], [33810, 33811], [33811, 33812]]}) 
answer: set([u'ridge', u'win', u'soldier', u'battle', u'vimy', u'1917'])

Did Canadian soldiers win the Battle of Vimy Ridge in 1917?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, it did not.
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 1084651 characters, 201466 tokens, 2169.3 char/doc, 402.9 tok/doc RATES: 24.052 doc/sec, 9691.5 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No, it did not.') == True
 +  where 'No, it did not.' = <src.question_processing.Question_parser instance at 0x10aa840e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param58] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84200>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa84200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.53514796495437622, {u'tokens': [u'Some', u'duck', u'species', u',', u'mainly', u'those', u'breeding', u'in', u'the', u'temperate', u'and', u'Arctic', u'Northern', u'Hemisphere', u',', u'are', u'migratory', u';', u'those', u'in', u'the', u'tropics', u',', u'however', u',', u'are', u'generally', u'not', u'.'], u'lemmas': [u'some', u'duck', u'species', u',', u'mainly', u'those', u'breed', u'in', u'the', u'temperate', u'and', u'Arctic', u'Northern', u'Hemisphere', u',', u'be', u'migratory', u';', u'those', u'in', u'the', u'tropics', u',', u'however', u',', u'be', u'generally', u'not', u'.'], u'pos': [u'DT', u'NN', u'NNS', u',', u'RB', u'DT', u'VBG', u'IN', u'DT', u'JJ', u'CC', u'NNP', u'NNP', u'NNP', u',', u'VBP', u'JJ', u':', u'DT', u'IN', u'DT', u'NNS', u',', u'RB', u',', u'VBP', u'RB', u'RB', u'.'], u'char_offsets': [[861, 865], [866, 870], [871, 878], [878, 879], [880, 886], [887, 892], [893, 901], [902, 904], [905, 908], [909, 918], [919, 922], [923, 929], [930, 938], [939, 949], [949, 950], [951, 954], [955, 964], [964, 965], [966, 971], [972, 974], [975, 978], [979, 986], [986, 987], [988, 995], [995, 996], [997, 1000], [1001, 1010], [1011, 1014], [1014, 1015]]}) 
answer: set([])
candidate Sentence: (0.033157635480165482, {u'tokens': [u'Of', u'the', u'many', u'ducks', u'in', u'fiction', u',', u'many', u'are', u'silly', u'cartoon', u'characters', u'like', u'Daffy', u'Duck', u'-LRB-', u'see', u'the', u'New', u'Scientist', u'article', u'mentioning', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-RRB-', u'.'], u'lemmas': [u'of', u'the', u'many', u'duck', u'in', u'fiction', u',', u'many', u'be', u'silly', u'cartoon', u'character', u'like', u'Daffy', u'duck', u'-lrb-', u'see', u'the', u'New', u'Scientist', u'article', u'mention', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'JJ', u'VBP', u'JJ', u'NN', u'NNS', u'IN', u'NNP', u'NN', u'-LRB-', u'VB', u'DT', u'NNP', u'NNP', u'NN', u'VBG', u'NN', u'IN', u'DT', u'NN', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[6172, 6174], [6175, 6178], [6179, 6183], [6184, 6189], [6190, 6192], [6193, 6200], [6200, 6201], [6202, 6206], [6207, 6210], [6211, 6216], [6217, 6224], [6225, 6235], [6236, 6240], [6241, 6246], [6247, 6251], [6252, 6253], [6253, 6256], [6257, 6260], [6261, 6264], [6265, 6274], [6275, 6282], [6284, 6294], [6295, 6300], [6301, 6303], [6304, 6307], [6308, 6312], [6313, 6314], [6314, 6318], [6318, 6319], [6319, 6320], [6320, 6321]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.03297964483499527, {u'tokens': [u'The', u'ducks', u'are', u'divided', u'between', u'several', u'subfamilies', u'listed', u'in', u'full', u'in', u'the', u'Anatidae', u'article', u'.'], u'lemmas': [u'the', u'duck', u'be', u'divide', u'between', u'several', u'subfamily', u'list', u'in', u'full', u'in', u'the', u'Anatidae', u'article', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[81, 84], [85, 90], [91, 94], [95, 102], [103, 110], [111, 118], [119, 130], [131, 137], [138, 140], [141, 145], [146, 148], [149, 152], [153, 161], [162, 169], [169, 170]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.028099574148654938, {u'tokens': [u'Duck', u'is', u'the', u'common', u'name', u'for', u'a', u'number', u'of', u'species', u'in', u'the', u'Anatidae', u'family', u'of', u'birds', u'.'], u'lemmas': [u'duck', u'be', u'the', u'common', u'name', u'for', u'a', u'number', u'of', u'species', u'in', u'the', u'Anatidae', u'family', u'of', u'bird', u'.'], u'pos': [u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[0, 4], [5, 7], [8, 11], [12, 18], [19, 23], [24, 27], [28, 29], [30, 36], [37, 39], [40, 47], [48, 50], [51, 54], [55, 63], [64, 70], [71, 73], [74, 79], [79, 80]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.023798588663339615, {u'tokens': [u'This', u'can', u'occasionally', u'include', u'fish', u'such', u'as', u'the', u'muskie', u'in', u'North', u'America', u'or', u'the', u'pike', u'in', u'Europe', u'.'], u'lemmas': [u'this', u'can', u'occasionally', u'include', u'fish', u'such', u'as', u'the', u'muskie', u'in', u'North', u'America', u'or', u'the', u'pike', u'in', u'Europe', u'.'], u'pos': [u'DT', u'MD', u'RB', u'VB', u'NN', u'JJ', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'DT', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[2923, 2927], [2928, 2931], [2932, 2944], [2945, 2952], [2953, 2957], [2958, 2962], [2963, 2965], [2966, 2969], [2970, 2976], [2977, 2979], [2980, 2985], [2986, 2993], [2994, 2996], [2997, 3000], [3001, 3005], [3006, 3008], [3009, 3015], [3015, 3016]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.023304328322410583, {u'tokens': [u'In', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleagues', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-LRB-', u'UK', u'-RRB-', u'finished', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'concluding', u'that', u',', u'of', u'the', u'animals', u'in', u'the', u'world', u',', u'the', u'duck', u'is', u'the', u'type', u'that', u'attracts', u'most', u'humor', u'and', u'silliness', u';', u'he', u'said', u'``', u'If', u'you', u"'re", u'going', u'to', u'tell', u'a', u'joke', u'involving', u'an', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'lemmas': [u'in', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleague', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-lrb-', u'UK', u'-rrb-', u'finish', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'conclude', u'that', u',', u'of', u'the', u'animal', u'in', u'the', u'world', u',', u'the', u'duck', u'be', u'the', u'type', u'that', u'attract', u'most', u'humor', u'and', u'silliness', u';', u'he', u'say', u'``', u'if', u'you', u'be', u'go', u'to', u'tell', u'a', u'joke', u'involve', u'a', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'pos': [u'IN', u'CD', u',', u'NN', u'NNP', u'NNP', u'CC', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NN', u',', u'VBG', u'IN', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'RBS', u'NN', u'CC', u'NN', u':', u'PRP', u'VBD', u'``', u'IN', u'PRP', u'VBP', u'VBG', u'TO', u'VB', u'DT', u'NN', u'VBG', u'DT', u'NN', u',', u'VBP', u'PRP', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[5685, 5687], [5688, 5692], [5692, 5693], [5694, 5706], [5707, 5714], [5715, 5722], [5723, 5726], [5727, 5737], [5738, 5740], [5741, 5744], [5745, 5755], [5756, 5758], [5759, 5772], [5773, 5774], [5774, 5776], [5776, 5777], [5778, 5786], [5787, 5788], [5789, 5798], [5799, 5807], [5808, 5818], [5818, 5819], [5820, 5830], [5831, 5835], [5835, 5836], [5837, 5839], [5840, 5843], [5844, 5851], [5852, 5854], [5855, 5858], [5859, 5864], [5864, 5865], [5866, 5869], [5870, 5874], [5875, 5877], [5878, 5881], [5882, 5886], [5887, 5891], [5892, 5900], [5901, 5905], [5906, 5911], [5912, 5915], [5916, 5925], [5925, 5926], [5927, 5929], [5930, 5934], [5935, 5936], [5936, 5938], [5939, 5942], [5942, 5945], [5946, 5951], [5952, 5954], [5955, 5959], [5960, 5961], [5962, 5966], [5967, 5976], [5977, 5979], [5980, 5986], [5986, 5987], [5988, 5992], [5993, 5995], [5996, 5997], [5998, 6002], [6002, 6003], [6003, 6004]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.023029014468193054, {u'tokens': [u'*', u'In', u'2007', u',', u'a', u'duck', u'in', u'Tallahassee', u',', u'Florida', u'survived', u'a', u'gunshot', u'wound', u'and', u'two', u'days', u'stored', u'in', u'a', u'refrigerator', u'whilst', u'presumed', u'dead', u'.'], u'lemmas': [u'*', u'in', u'2007', u',', u'a', u'duck', u'in', u'Tallahassee', u',', u'Florida', u'survive', u'a', u'gunshot', u'wound', u'and', u'two', u'day', u'store', u'in', u'a', u'refrigerator', u'whilst', u'presumed', u'dead', u'.'], u'pos': [u'SYM', u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'CC', u'CD', u'NNS', u'VBN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'.'], u'char_offsets': [[7560, 7561], [7561, 7563], [7564, 7568], [7568, 7569], [7570, 7571], [7572, 7576], [7577, 7579], [7580, 7591], [7591, 7592], [7593, 7600], [7601, 7609], [7610, 7611], [7612, 7619], [7620, 7625], [7626, 7629], [7630, 7633], [7634, 7638], [7639, 7645], [7646, 7648], [7649, 7650], [7651, 7663], [7664, 7670], [7671, 7679], [7680, 7684], [7684, 7685]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.018478961661458015, {u'tokens': [u'in', u'some', u'silent', u'cartoons', u'.'], u'lemmas': [u'in', u'some', u'silent', u'cartoon', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'.'], u'char_offsets': [[6427, 6429], [6430, 6434], [6435, 6441], [6442, 6450], [6450, 6451]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.01808340847492218, {u'tokens': [u'The', u'word', u'``', u'duck', u"''", u'may', u'have', u'become', u'an', u'inherently', u'funny', u'word', u'in', u'many', u'languages', u'because', u'ducks', u'are', u'seen', u'as', u'a', u'silly', u'animal', u',', u'and', u'their', u'odd', u'appearance', u'compared', u'to', u'other', u'birds', u'.'], u'lemmas': [u'the', u'word', u'``', u'duck', u"''", u'may', u'have', u'become', u'a', u'inherently', u'funny', u'word', u'in', u'many', u'language', u'because', u'duck', u'be', u'see', u'as', u'a', u'silly', u'animal', u',', u'and', u'they', u'odd', u'appearance', u'compare', u'to', u'other', u'bird', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'MD', u'VB', u'VBN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NN', u'VBN', u'TO', u'JJ', u'NNS', u'.'], u'char_offsets': [[6005, 6008], [6009, 6013], [6014, 6015], [6015, 6019], [6019, 6020], [6021, 6024], [6025, 6029], [6030, 6036], [6037, 6039], [6040, 6050], [6051, 6056], [6057, 6061], [6062, 6064], [6065, 6069], [6070, 6079], [6080, 6087], [6088, 6093], [6094, 6097], [6098, 6102], [6103, 6105], [6106, 6107], [6108, 6113], [6114, 6120], [6120, 6121], [6122, 6125], [6126, 6131], [6132, 6135], [6136, 6146], [6147, 6155], [6156, 6158], [6159, 6164], [6165, 6170], [6170, 6171]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])
candidate Sentence: (0.017264969646930695, {u'tokens': [u'In', u'flight', u',', u'ducks', u'are', u'safe', u'from', u'all', u'but', u'a', u'few', u'predators', u'such', u'as', u'humans', u'and', u'the', u'Peregrine', u'Falcon', u',', u'which', u'regularly', u'uses', u'its', u'speed', u'and', u'strength', u'to', u'catch', u'ducks', u'.'], u'lemmas': [u'in', u'flight', u',', u'duck', u'be', u'safe', u'from', u'all', u'but', u'a', u'few', u'predator', u'such', u'as', u'human', u'and', u'the', u'Peregrine', u'Falcon', u',', u'which', u'regularly', u'use', u'its', u'speed', u'and', u'strength', u'to', u'catch', u'duck', u'.'], u'pos': [u'IN', u'NN', u',', u'NNS', u'VBP', u'JJ', u'IN', u'DT', u'CC', u'DT', u'JJ', u'NNS', u'JJ', u'IN', u'NNS', u'CC', u'DT', u'NNP', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'PRP$', u'NN', u'CC', u'NN', u'TO', u'VB', u'NNS', u'.'], u'char_offsets': [[3017, 3019], [3020, 3026], [3026, 3027], [3028, 3033], [3034, 3037], [3038, 3042], [3043, 3047], [3048, 3051], [3052, 3055], [3056, 3057], [3058, 3061], [3062, 3071], [3072, 3076], [3077, 3079], [3080, 3086], [3087, 3090], [3091, 3094], [3095, 3104], [3105, 3111], [3111, 3112], [3113, 3118], [3119, 3128], [3129, 3133], [3134, 3137], [3138, 3143], [3144, 3147], [3148, 3156], [3157, 3159], [3160, 3165], [3166, 3171], [3171, 3172]]}) 
answer: set([u'arctic', u'hemisphere', u'northern', u'migratory'])

Are ducks in the Arctic Northern Hemisphere migratory?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa84200>.answer
_____________________________ test_yesno[param64] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa843b0>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Diving ducks and sea ducks forage underwater') == True
E                +  where 'Diving ducks and sea ducks forage underwater' = <src.question_processing.Question_parser instance at 0x10aa843b0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.61816465854644775, {u'tokens': [u'Diving', u'ducks', u'and', u'sea', u'ducks', u'forage', u'deep', u'underwater', u'.'], u'lemmas': [u'diving', u'duck', u'and', u'sea', u'duck', u'forage', u'deep', u'underwater', u'.'], u'pos': [u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'VBP', u'JJ', u'JJ', u'.'], u'char_offsets': [[1185, 1191], [1192, 1197], [1198, 1201], [1202, 1205], [1206, 1211], [1212, 1218], [1219, 1223], [1224, 1234], [1234, 1235]]}) 
answer: set([])
candidate Sentence: (0.13361345231533051, {u'tokens': [u'-LRB-', u'As', u'aforementioned', u'though', u',', u'very', u'few', u'ducks', u'actually', u'do', u'``', u'quack', u"''", u'-RRB-', u'Moche', u'Duck', u'.'], u'lemmas': [u'-lrb-', u'as', u'aforementioned', u'though', u',', u'very', u'few', u'duck', u'actually', u'do', u'``', u'quack', u"''", u'-rrb-', u'Moche', u'duck', u'.'], u'pos': [u'-LRB-', u'IN', u'JJ', u'RB', u',', u'RB', u'JJ', u'NNS', u'RB', u'VBP', u'``', u'UH', u"''", u'-RRB-', u'NNP', u'NN', u'.'], u'char_offsets': [[7335, 7336], [7336, 7338], [7339, 7353], [7354, 7360], [7360, 7361], [7362, 7366], [7367, 7370], [7371, 7376], [7377, 7385], [7386, 7388], [7389, 7390], [7390, 7395], [7395, 7396], [7396, 7397], [7398, 7403], [7404, 7408], [7408, 7409]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.11673953384160995, {u'tokens': [u'A', u'common', u'urban', u'legend', u'says', u'that', u'quacks', u'do', u'not', u'echo', u',', u'however', u'this', u'has', u'been', u'shown', u'to', u'be', u'false', u'.'], u'lemmas': [u'a', u'common', u'urban', u'legend', u'say', u'that', u'quack', u'do', u'not', u'echo', u',', u'however', u'this', u'have', u'be', u'show', u'to', u'be', u'false', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NN', u'VBZ', u'IN', u'NNS', u'VBP', u'RB', u'VB', u',', u'RB', u'DT', u'VBZ', u'VBN', u'VBN', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[4977, 4978], [4979, 4985], [4986, 4991], [4992, 4998], [4999, 5003], [5004, 5008], [5009, 5015], [5016, 5018], [5019, 5022], [5023, 5027], [5028, 5029], [5030, 5037], [5038, 5042], [5043, 5046], [5047, 5051], [5052, 5057], [5058, 5060], [5061, 5063], [5064, 5069], [5069, 5070]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.084394790232181549, {u'tokens': [u'Despite', u'widespread', u'misconceptions', u',', u'most', u'ducks', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'ducks', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'makes', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'came', u'from', u'.'], u'lemmas': [u'despite', u'widespread', u'misconception', u',', u'most', u'duck', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'duck', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'make', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'come', u'from', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'JJS', u'NNS', u'JJ', u'IN', u'JJ', u'NNPS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'``', u'UH', u"''", u':', u'IN', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'``', u'NN', u"''", u',', u'WDT', u'PRP$', u'NN', u'VBD', u'IN', u'.'], u'char_offsets': [[4792, 4799], [4800, 4810], [4811, 4825], [4825, 4826], [4827, 4831], [4832, 4837], [4838, 4843], [4844, 4848], [4849, 4855], [4856, 4864], [4865, 4868], [4869, 4877], [4878, 4883], [4884, 4886], [4887, 4890], [4891, 4892], [4892, 4897], [4897, 4898], [4898, 4899], [4900, 4903], [4904, 4911], [4911, 4912], [4913, 4916], [4917, 4922], [4923, 4928], [4929, 4930], [4931, 4936], [4937, 4941], [4942, 4943], [4943, 4948], [4948, 4949], [4949, 4950], [4951, 4956], [4957, 4960], [4961, 4965], [4966, 4970], [4971, 4975], [4975, 4976]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.010377355851233006, {u'tokens': [u'The', u'expression', u'``', u'quacks', u'like', u'a', u'duck', u"''", u'is', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'It', u'looks', u'like', u'a', u'duck', u',', u'it', u'quacks', u'like', u'a', u'duck', u',', u'it', u'swims', u'like', u'a', u'duck', u',', u'so', u'it', u"'s", u'a', u'duck', u'.', u"''"], u'lemmas': [u'the', u'expression', u'``', u'quack', u'like', u'a', u'duck', u"''", u'be', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'it', u'look', u'like', u'a', u'duck', u',', u'it', u'quack', u'like', u'a', u'duck', u',', u'it', u'swim', u'like', u'a', u'duck', u',', u'so', u'it', u'be', u'a', u'duck', u'.', u"''"], u'pos': [u'DT', u'NN', u'``', u'VBZ', u'IN', u'DT', u'NN', u"''", u'VBZ', u'RB', u'DT', u'JJ', u'NN', u'IN', u'``', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'IN', u'PRP', u'VBZ', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[6499, 6502], [6503, 6513], [6514, 6515], [6515, 6521], [6522, 6526], [6527, 6528], [6529, 6533], [6533, 6534], [6535, 6537], [6538, 6547], [6548, 6549], [6550, 6555], [6556, 6560], [6561, 6564], [6565, 6566], [6566, 6568], [6569, 6574], [6575, 6579], [6580, 6581], [6582, 6586], [6586, 6587], [6588, 6590], [6591, 6597], [6598, 6602], [6603, 6604], [6605, 6609], [6609, 6610], [6611, 6613], [6614, 6619], [6620, 6624], [6625, 6626], [6627, 6631], [6631, 6632], [6633, 6635], [6636, 6638], [6638, 6640], [6641, 6642], [6643, 6647], [6647, 6648], [6648, 6649]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.0083845239132642746, {u'tokens': [u'Of', u'the', u'many', u'ducks', u'in', u'fiction', u',', u'many', u'are', u'silly', u'cartoon', u'characters', u'like', u'Daffy', u'Duck', u'-LRB-', u'see', u'the', u'New', u'Scientist', u'article', u'mentioning', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-RRB-', u'.'], u'lemmas': [u'of', u'the', u'many', u'duck', u'in', u'fiction', u',', u'many', u'be', u'silly', u'cartoon', u'character', u'like', u'Daffy', u'duck', u'-lrb-', u'see', u'the', u'New', u'Scientist', u'article', u'mention', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'JJ', u'VBP', u'JJ', u'NN', u'NNS', u'IN', u'NNP', u'NN', u'-LRB-', u'VB', u'DT', u'NNP', u'NNP', u'NN', u'VBG', u'NN', u'IN', u'DT', u'NN', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[6172, 6174], [6175, 6178], [6179, 6183], [6184, 6189], [6190, 6192], [6193, 6200], [6200, 6201], [6202, 6206], [6207, 6210], [6211, 6216], [6217, 6224], [6225, 6235], [6236, 6240], [6241, 6246], [6247, 6251], [6252, 6253], [6253, 6256], [6257, 6260], [6261, 6264], [6265, 6274], [6275, 6282], [6284, 6294], [6295, 6300], [6301, 6303], [6304, 6307], [6308, 6312], [6313, 6314], [6314, 6318], [6318, 6319], [6319, 6320], [6320, 6321]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.0067605390213429928, {u'tokens': [u'All', u'domestic', u'ducks', u'are', u'descended', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhynchos', u',', u'except', u'the', u'Muscovy', u'Duck', u'.'], u'lemmas': [u'all', u'domestic', u'duck', u'be', u'descend', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhyncho', u',', u'except', u'the', u'Muscovy', u'duck', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNS', u',', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4371, 4374], [4375, 4383], [4384, 4389], [4390, 4393], [4394, 4403], [4404, 4408], [4409, 4412], [4413, 4417], [4418, 4425], [4426, 4430], [4431, 4444], [4444, 4445], [4446, 4452], [4453, 4456], [4457, 4464], [4465, 4469], [4470, 4471]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.0055709541775286198, {u'tokens': [u'A', u'worldwide', u'group', u'like', u'the', u'ducks', u'has', u'many', u'predators', u'.'], u'lemmas': [u'a', u'worldwide', u'group', u'like', u'the', u'duck', u'have', u'many', u'predator', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNS', u'VBZ', u'JJ', u'NNS', u'.'], u'char_offsets': [[2365, 2366], [2367, 2376], [2377, 2382], [2383, 2387], [2388, 2391], [2392, 2397], [2398, 2401], [2402, 2406], [2407, 2416], [2416, 2417]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.0055090626701712608, {u'tokens': [u'The', u'word', u'``', u'duck', u"''", u'may', u'have', u'become', u'an', u'inherently', u'funny', u'word', u'in', u'many', u'languages', u'because', u'ducks', u'are', u'seen', u'as', u'a', u'silly', u'animal', u',', u'and', u'their', u'odd', u'appearance', u'compared', u'to', u'other', u'birds', u'.'], u'lemmas': [u'the', u'word', u'``', u'duck', u"''", u'may', u'have', u'become', u'a', u'inherently', u'funny', u'word', u'in', u'many', u'language', u'because', u'duck', u'be', u'see', u'as', u'a', u'silly', u'animal', u',', u'and', u'they', u'odd', u'appearance', u'compare', u'to', u'other', u'bird', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'MD', u'VB', u'VBN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NN', u'VBN', u'TO', u'JJ', u'NNS', u'.'], u'char_offsets': [[6005, 6008], [6009, 6013], [6014, 6015], [6015, 6019], [6019, 6020], [6021, 6024], [6025, 6029], [6030, 6036], [6037, 6039], [6040, 6050], [6051, 6056], [6057, 6061], [6062, 6064], [6065, 6069], [6070, 6079], [6080, 6087], [6088, 6093], [6094, 6097], [6098, 6102], [6103, 6105], [6106, 6107], [6108, 6113], [6114, 6120], [6120, 6121], [6122, 6125], [6126, 6131], [6132, 6135], [6136, 6146], [6147, 6155], [6156, 6158], [6159, 6164], [6165, 6170], [6170, 6171]]}) 
answer: set([u'underwater', u'forage'])
candidate Sentence: (0.0052597280591726303, {u'tokens': [u'In', u'flight', u',', u'ducks', u'are', u'safe', u'from', u'all', u'but', u'a', u'few', u'predators', u'such', u'as', u'humans', u'and', u'the', u'Peregrine', u'Falcon', u',', u'which', u'regularly', u'uses', u'its', u'speed', u'and', u'strength', u'to', u'catch', u'ducks', u'.'], u'lemmas': [u'in', u'flight', u',', u'duck', u'be', u'safe', u'from', u'all', u'but', u'a', u'few', u'predator', u'such', u'as', u'human', u'and', u'the', u'Peregrine', u'Falcon', u',', u'which', u'regularly', u'use', u'its', u'speed', u'and', u'strength', u'to', u'catch', u'duck', u'.'], u'pos': [u'IN', u'NN', u',', u'NNS', u'VBP', u'JJ', u'IN', u'DT', u'CC', u'DT', u'JJ', u'NNS', u'JJ', u'IN', u'NNS', u'CC', u'DT', u'NNP', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'PRP$', u'NN', u'CC', u'NN', u'TO', u'VB', u'NNS', u'.'], u'char_offsets': [[3017, 3019], [3020, 3026], [3026, 3027], [3028, 3033], [3034, 3037], [3038, 3042], [3043, 3047], [3048, 3051], [3052, 3055], [3056, 3057], [3058, 3061], [3062, 3071], [3072, 3076], [3077, 3079], [3080, 3086], [3087, 3090], [3091, 3094], [3095, 3104], [3105, 3111], [3111, 3112], [3113, 3118], [3119, 3128], [3129, 3133], [3134, 3137], [3138, 3143], [3144, 3147], [3148, 3156], [3157, 3159], [3160, 3165], [3166, 3171], [3171, 3172]]}) 
answer: set([u'underwater', u'forage'])

Do ducks forage underwater?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Diving ducks and sea ducks forage underwater
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('Diving ducks and sea ducks forage underwater') == True
 +  where 'Diving ducks and sea ducks forage underwater' = <src.question_processing.Question_parser instance at 0x10aa843b0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param67] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84488>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa84488>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3276822566986084, {u'tokens': [u'Foie', u'gras', u'is', u'often', u'made', u'using', u'the', u'liver', u'of', u'domestic', u'ducks', u',', u'rather', u'than', u'of', u'geese', u'.'], u'lemmas': [u'Foie', u'gra', u'be', u'often', u'make', u'use', u'the', u'liver', u'of', u'domestic', u'duck', u',', u'rather', u'than', u'of', u'goose', u'.'], u'pos': [u'NNP', u'VBZ', u'VBZ', u'RB', u'VBN', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'RB', u'IN', u'IN', u'NNS', u'.'], u'char_offsets': [[4711, 4715], [4716, 4720], [4721, 4723], [4724, 4729], [4730, 4734], [4735, 4740], [4741, 4744], [4745, 4750], [4751, 4753], [4754, 4762], [4763, 4768], [4768, 4769], [4770, 4776], [4777, 4781], [4782, 4784], [4785, 4790], [4790, 4791]]}) 
answer: set([u'gras'])
candidate Sentence: (0.18161466717720032, {u'tokens': [u'They', u'are', u'also', u'kept', u'and', u'bred', u'by', u'aviculturists', u'and', u'often', u'displayed', u'in', u'zoos', u'.'], u'lemmas': [u'they', u'be', u'also', u'keep', u'and', u'breed', u'by', u'aviculturist', u'and', u'often', u'display', u'in', u'zoo', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'CC', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[4297, 4301], [4302, 4305], [4306, 4310], [4311, 4315], [4316, 4319], [4320, 4324], [4325, 4327], [4328, 4341], [4342, 4345], [4346, 4351], [4352, 4361], [4362, 4364], [4365, 4369], [4369, 4370]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.16939152777194977, {u'tokens': [u'1972', u'They', u'placed', u'emphasis', u'on', u'animals', u'and', u'often', u'depicted', u'ducks', u'in', u'their', u'art', u'.'], u'lemmas': [u'1972', u'they', u'place', u'emphasis', u'on', u'animal', u'and', u'often', u'depict', u'duck', u'in', u'they', u'art', u'.'], u'pos': [u'CD', u'PRP', u'VBD', u'NN', u'IN', u'NNS', u'CC', u'RB', u'VBN', u'NNS', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[8060, 8064], [8066, 8070], [8071, 8077], [8078, 8086], [8087, 8089], [8090, 8097], [8098, 8101], [8102, 8107], [8108, 8116], [8117, 8122], [8123, 8125], [8126, 8131], [8132, 8135], [8135, 8136]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.15369883179664612, {u'tokens': [u'Despite', u'widespread', u'misconceptions', u',', u'most', u'ducks', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'ducks', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'makes', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'came', u'from', u'.'], u'lemmas': [u'despite', u'widespread', u'misconception', u',', u'most', u'duck', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'duck', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'make', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'come', u'from', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'JJS', u'NNS', u'JJ', u'IN', u'JJ', u'NNPS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'``', u'UH', u"''", u':', u'IN', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'``', u'NN', u"''", u',', u'WDT', u'PRP$', u'NN', u'VBD', u'IN', u'.'], u'char_offsets': [[4792, 4799], [4800, 4810], [4811, 4825], [4825, 4826], [4827, 4831], [4832, 4837], [4838, 4843], [4844, 4848], [4849, 4855], [4856, 4864], [4865, 4868], [4869, 4877], [4878, 4883], [4884, 4886], [4887, 4890], [4891, 4892], [4892, 4897], [4897, 4898], [4898, 4899], [4900, 4903], [4904, 4911], [4911, 4912], [4913, 4916], [4917, 4922], [4923, 4928], [4929, 4930], [4931, 4936], [4937, 4941], [4942, 4943], [4943, 4948], [4948, 4949], [4949, 4950], [4951, 4956], [4957, 4960], [4961, 4965], [4966, 4970], [4971, 4975], [4975, 4976]]}) 
answer: set([u'gras', u'often', u'foie'])
candidate Sentence: (0.11279179900884628, {u'tokens': [u'The', u'males', u'-LRB-', u'drakes', u'-RRB-', u'of', u'northern', u'species', u'often', u'have', u'extravagant', u'plumage', u',', u'but', u'that', u'is', u'moulted', u'in', u'summer', u'to', u'give', u'a', u'more', u'female-like', u'appearance', u',', u'the', u'``', u'eclipse', u"''", u'plumage', u'.'], u'lemmas': [u'the', u'male', u'-lrb-', u'drake', u'-rrb-', u'of', u'northern', u'species', u'often', u'have', u'extravagant', u'plumage', u',', u'but', u'that', u'be', u'moult', u'in', u'summer', u'to', u'give', u'a', u'more', u'female-like', u'appearance', u',', u'the', u'``', u'eclipse', u"''", u'plumage', u'.'], u'pos': [u'DT', u'NNS', u'-LRB-', u'NNS', u'-RRB-', u'IN', u'JJ', u'NNS', u'RB', u'VBP', u'JJ', u'NN', u',', u'CC', u'DT', u'VBZ', u'VBN', u'IN', u'NN', u'TO', u'VB', u'DT', u'RBR', u'JJ', u'NN', u',', u'DT', u'``', u'NN', u"''", u'NN', u'.'], u'char_offsets': [[1978, 1981], [1982, 1987], [1988, 1989], [1989, 1995], [1995, 1996], [1997, 1999], [2000, 2008], [2009, 2016], [2017, 2022], [2023, 2027], [2028, 2039], [2040, 2047], [2047, 2048], [2049, 2052], [2053, 2057], [2058, 2060], [2061, 2068], [2069, 2071], [2072, 2078], [2079, 2081], [2082, 2086], [2087, 2088], [2089, 2093], [2094, 2105], [2106, 2116], [2116, 2117], [2118, 2121], [2122, 2123], [2123, 2130], [2130, 2131], [2132, 2139], [2139, 2140]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.10589320212602615, {u'tokens': [u'The', u'word', u'duck', u'-LRB-', u'from', u'Anglo-Saxon', u'd\u016bce', u'-RRB-', u',', u'meaning', u'the', u'bird', u',', u'came', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-LRB-', u'from', u'Anglo-Saxon', u'supposed', u'*', u'd\u016bcan', u'-RRB-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabbling', u'duck', u'group', u'feed', u'by', u'upending', u'-LRB-', u'compare', u'Dutch', u'duiken', u',', u'German', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'duck', u'-lrb-', u'from', u'anglo-saxon', u'd\u016bce', u'-rrb-', u',', u'mean', u'the', u'bird', u',', u'come', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-lrb-', u'from', u'anglo-saxon', u'suppose', u'*', u'd\u016bcan', u'-rrb-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabble', u'duck', u'group', u'feed', u'by', u'upend', u'-lrb-', u'compare', u'dutch', u'duiken', u',', u'german', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'IN', u'JJ', u'NN', u'-RRB-', u',', u'VBG', u'DT', u'NN', u',', u'VBD', u'IN', u'DT', u'VB', u'``', u'TO', u'VB', u"''", u'-LRB-', u'IN', u'JJ', u'VBN', u'SYM', u'NN', u'-RRB-', u'NN', u'``', u'TO', u'VB', u'RB', u'JJ', u'IN', u'IN', u'TO', u'VB', u'IN', u'NN', u"''", u'CC', u'``', u'TO', u'NN', u"''", u',', u'IN', u'IN', u'DT', u'NN', u'JJ', u'NNS', u'IN', u'DT', u'VBG', u'NN', u'NN', u'NN', u'IN', u'VBG', u'-LRB-', u'VB', u'JJ', u'NN', u',', u'JJ', u'NN', u'JJ', u'``', u'TO', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[3173, 3176], [3177, 3181], [3182, 3186], [3187, 3188], [3188, 3192], [3193, 3204], [3205, 3209], [3209, 3210], [3210, 3211], [3212, 3219], [3220, 3223], [3224, 3228], [3228, 3229], [3230, 3234], [3235, 3239], [3240, 3243], [3244, 3248], [3249, 3250], [3250, 3252], [3253, 3257], [3257, 3258], [3259, 3260], [3260, 3264], [3265, 3276], [3277, 3285], [3286, 3287], [3287, 3292], [3292, 3293], [3294, 3301], [3302, 3303], [3303, 3305], [3306, 3310], [3311, 3315], [3316, 3319], [3320, 3322], [3323, 3325], [3326, 3328], [3329, 3332], [3333, 3338], [3339, 3348], [3348, 3349], [3350, 3352], [3353, 3354], [3354, 3356], [3357, 3361], [3361, 3362], [3362, 3363], [3364, 3371], [3372, 3374], [3375, 3378], [3379, 3382], [3383, 3387], [3388, 3395], [3396, 3398], [3399, 3402], [3403, 3411], [3412, 3416], [3417, 3422], [3423, 3427], [3428, 3430], [3431, 3439], [3440, 3441], [3441, 3448], [3449, 3454], [3455, 3461], [3461, 3462], [3463, 3469], [3470, 3477], [3478, 3479], [3480, 3481], [3481, 3483], [3484, 3488], [3488, 3489], [3489, 3490], [3490, 3491]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.094845816493034363, {u'tokens': [u'All', u'domestic', u'ducks', u'are', u'descended', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhynchos', u',', u'except', u'the', u'Muscovy', u'Duck', u'.'], u'lemmas': [u'all', u'domestic', u'duck', u'be', u'descend', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhyncho', u',', u'except', u'the', u'Muscovy', u'duck', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNS', u',', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4371, 4374], [4375, 4383], [4384, 4389], [4390, 4393], [4394, 4403], [4404, 4408], [4409, 4412], [4413, 4417], [4418, 4425], [4426, 4430], [4431, 4444], [4444, 4445], [4446, 4452], [4453, 4456], [4457, 4464], [4465, 4469], [4470, 4471]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.093775182962417603, {u'tokens': [u'Ducklings', u'are', u'particularly', u'vulnerable', u',', u'since', u'their', u'inability', u'to', u'fly', u'makes', u'them', u'easy', u'prey', u'not', u'only', u'for', u'avian', u'hunters', u'but', u'also', u'large', u'fish', u'like', u'pike', u',', u'crocodilians', u',', u'and', u'other', u'aquatic', u'hunters', u',', u'including', u'fish-eating', u'birds', u'such', u'as', u'herons', u'.'], u'lemmas': [u'duckling', u'be', u'particularly', u'vulnerable', u',', u'since', u'they', u'inability', u'to', u'fly', u'make', u'they', u'easy', u'prey', u'not', u'only', u'for', u'avian', u'hunter', u'but', u'also', u'large', u'fish', u'like', u'pike', u',', u'crocodilian', u',', u'and', u'other', u'aquatic', u'hunter', u',', u'include', u'fish-eating', u'bird', u'such', u'as', u'heron', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'VBZ', u'PRP', u'JJ', u'NN', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'NN', u',', u'NNS', u',', u'CC', u'JJ', u'JJ', u'NNS', u',', u'VBG', u'JJ', u'NNS', u'JJ', u'IN', u'NNS', u'.'], u'char_offsets': [[2418, 2427], [2428, 2431], [2432, 2444], [2445, 2455], [2455, 2456], [2457, 2462], [2463, 2468], [2469, 2478], [2479, 2481], [2482, 2485], [2486, 2491], [2492, 2496], [2497, 2501], [2502, 2506], [2507, 2510], [2511, 2515], [2516, 2519], [2520, 2525], [2526, 2533], [2534, 2537], [2538, 2542], [2543, 2548], [2549, 2553], [2554, 2558], [2559, 2563], [2563, 2564], [2565, 2577], [2577, 2578], [2580, 2583], [2584, 2589], [2590, 2597], [2598, 2605], [2605, 2606], [2607, 2616], [2617, 2628], [2629, 2634], [2635, 2639], [2640, 2642], [2643, 2649], [2649, 2650]]}) 
answer: set([u'gras', u'often', u'foie'])
candidate Sentence: (0.087550215423107147, {u'tokens': [u'From', u'this', u'came', u'the', u'expression', u'``', u'a', u'sitting', u'duck', u"''", u',', u'which', u'means', u'``', u'an', u'easy', u'target', u"''", u'.'], u'lemmas': [u'from', u'this', u'come', u'the', u'expression', u'``', u'a', u'sit', u'duck', u"''", u',', u'which', u'mean', u'``', u'a', u'easy', u'target', u"''", u'.'], u'pos': [u'IN', u'DT', u'VBD', u'DT', u'NN', u'``', u'DT', u'VBG', u'NN', u"''", u',', u'WDT', u'VBZ', u'``', u'DT', u'JJ', u'NN', u"''", u'.'], u'char_offsets': [[4116, 4120], [4121, 4125], [4126, 4130], [4131, 4134], [4135, 4145], [4146, 4147], [4147, 4148], [4149, 4156], [4157, 4161], [4161, 4162], [4162, 4163], [4164, 4169], [4170, 4175], [4176, 4177], [4177, 4179], [4180, 4184], [4185, 4191], [4191, 4192], [4192, 4193]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.085878603160381317, {u'tokens': [u'In', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleagues', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-LRB-', u'UK', u'-RRB-', u'finished', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'concluding', u'that', u',', u'of', u'the', u'animals', u'in', u'the', u'world', u',', u'the', u'duck', u'is', u'the', u'type', u'that', u'attracts', u'most', u'humor', u'and', u'silliness', u';', u'he', u'said', u'``', u'If', u'you', u"'re", u'going', u'to', u'tell', u'a', u'joke', u'involving', u'an', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'lemmas': [u'in', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleague', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-lrb-', u'UK', u'-rrb-', u'finish', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'conclude', u'that', u',', u'of', u'the', u'animal', u'in', u'the', u'world', u',', u'the', u'duck', u'be', u'the', u'type', u'that', u'attract', u'most', u'humor', u'and', u'silliness', u';', u'he', u'say', u'``', u'if', u'you', u'be', u'go', u'to', u'tell', u'a', u'joke', u'involve', u'a', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'pos': [u'IN', u'CD', u',', u'NN', u'NNP', u'NNP', u'CC', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NN', u',', u'VBG', u'IN', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'RBS', u'NN', u'CC', u'NN', u':', u'PRP', u'VBD', u'``', u'IN', u'PRP', u'VBP', u'VBG', u'TO', u'VB', u'DT', u'NN', u'VBG', u'DT', u'NN', u',', u'VBP', u'PRP', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[5685, 5687], [5688, 5692], [5692, 5693], [5694, 5706], [5707, 5714], [5715, 5722], [5723, 5726], [5727, 5737], [5738, 5740], [5741, 5744], [5745, 5755], [5756, 5758], [5759, 5772], [5773, 5774], [5774, 5776], [5776, 5777], [5778, 5786], [5787, 5788], [5789, 5798], [5799, 5807], [5808, 5818], [5818, 5819], [5820, 5830], [5831, 5835], [5835, 5836], [5837, 5839], [5840, 5843], [5844, 5851], [5852, 5854], [5855, 5858], [5859, 5864], [5864, 5865], [5866, 5869], [5870, 5874], [5875, 5877], [5878, 5881], [5882, 5886], [5887, 5891], [5892, 5900], [5901, 5905], [5906, 5911], [5912, 5915], [5916, 5925], [5925, 5926], [5927, 5929], [5930, 5934], [5935, 5936], [5936, 5938], [5939, 5942], [5942, 5945], [5946, 5951], [5952, 5954], [5955, 5959], [5960, 5961], [5962, 5966], [5967, 5976], [5977, 5979], [5980, 5986], [5986, 5987], [5988, 5992], [5993, 5995], [5996, 5997], [5998, 6002], [6002, 6003], [6003, 6004]]}) 
answer: set([u'gras', u'often', u'foie'])

Is foie gras often made from ducks?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa84488>.answer
_____________________________ test_yesno[param68] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa844d0>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa844d0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3276822566986084, {u'tokens': [u'Foie', u'gras', u'is', u'often', u'made', u'using', u'the', u'liver', u'of', u'domestic', u'ducks', u',', u'rather', u'than', u'of', u'geese', u'.'], u'lemmas': [u'Foie', u'gra', u'be', u'often', u'make', u'use', u'the', u'liver', u'of', u'domestic', u'duck', u',', u'rather', u'than', u'of', u'goose', u'.'], u'pos': [u'NNP', u'VBZ', u'VBZ', u'RB', u'VBN', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'RB', u'IN', u'IN', u'NNS', u'.'], u'char_offsets': [[4711, 4715], [4716, 4720], [4721, 4723], [4724, 4729], [4730, 4734], [4735, 4740], [4741, 4744], [4745, 4750], [4751, 4753], [4754, 4762], [4763, 4768], [4768, 4769], [4770, 4776], [4777, 4781], [4782, 4784], [4785, 4790], [4790, 4791]]}) 
answer: set([u'gras'])
candidate Sentence: (0.18161466717720032, {u'tokens': [u'They', u'are', u'also', u'kept', u'and', u'bred', u'by', u'aviculturists', u'and', u'often', u'displayed', u'in', u'zoos', u'.'], u'lemmas': [u'they', u'be', u'also', u'keep', u'and', u'breed', u'by', u'aviculturist', u'and', u'often', u'display', u'in', u'zoo', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'CC', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[4297, 4301], [4302, 4305], [4306, 4310], [4311, 4315], [4316, 4319], [4320, 4324], [4325, 4327], [4328, 4341], [4342, 4345], [4346, 4351], [4352, 4361], [4362, 4364], [4365, 4369], [4369, 4370]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.16939152777194977, {u'tokens': [u'1972', u'They', u'placed', u'emphasis', u'on', u'animals', u'and', u'often', u'depicted', u'ducks', u'in', u'their', u'art', u'.'], u'lemmas': [u'1972', u'they', u'place', u'emphasis', u'on', u'animal', u'and', u'often', u'depict', u'duck', u'in', u'they', u'art', u'.'], u'pos': [u'CD', u'PRP', u'VBD', u'NN', u'IN', u'NNS', u'CC', u'RB', u'VBN', u'NNS', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[8060, 8064], [8066, 8070], [8071, 8077], [8078, 8086], [8087, 8089], [8090, 8097], [8098, 8101], [8102, 8107], [8108, 8116], [8117, 8122], [8123, 8125], [8126, 8131], [8132, 8135], [8135, 8136]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.15369883179664612, {u'tokens': [u'Despite', u'widespread', u'misconceptions', u',', u'most', u'ducks', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'ducks', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'makes', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'came', u'from', u'.'], u'lemmas': [u'despite', u'widespread', u'misconception', u',', u'most', u'duck', u'other', u'than', u'female', u'Mallards', u'and', u'domestic', u'duck', u'do', u'not', u'``', u'quack', u"''", u';', u'for', u'example', u',', u'the', u'scaup', u'make', u'a', u'noise', u'like', u'``', u'scaup', u"''", u',', u'which', u'its', u'name', u'come', u'from', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'JJS', u'NNS', u'JJ', u'IN', u'JJ', u'NNPS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'``', u'UH', u"''", u':', u'IN', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'``', u'NN', u"''", u',', u'WDT', u'PRP$', u'NN', u'VBD', u'IN', u'.'], u'char_offsets': [[4792, 4799], [4800, 4810], [4811, 4825], [4825, 4826], [4827, 4831], [4832, 4837], [4838, 4843], [4844, 4848], [4849, 4855], [4856, 4864], [4865, 4868], [4869, 4877], [4878, 4883], [4884, 4886], [4887, 4890], [4891, 4892], [4892, 4897], [4897, 4898], [4898, 4899], [4900, 4903], [4904, 4911], [4911, 4912], [4913, 4916], [4917, 4922], [4923, 4928], [4929, 4930], [4931, 4936], [4937, 4941], [4942, 4943], [4943, 4948], [4948, 4949], [4949, 4950], [4951, 4956], [4957, 4960], [4961, 4965], [4966, 4970], [4971, 4975], [4975, 4976]]}) 
answer: set([u'gras', u'often', u'foie'])
candidate Sentence: (0.11279179900884628, {u'tokens': [u'The', u'males', u'-LRB-', u'drakes', u'-RRB-', u'of', u'northern', u'species', u'often', u'have', u'extravagant', u'plumage', u',', u'but', u'that', u'is', u'moulted', u'in', u'summer', u'to', u'give', u'a', u'more', u'female-like', u'appearance', u',', u'the', u'``', u'eclipse', u"''", u'plumage', u'.'], u'lemmas': [u'the', u'male', u'-lrb-', u'drake', u'-rrb-', u'of', u'northern', u'species', u'often', u'have', u'extravagant', u'plumage', u',', u'but', u'that', u'be', u'moult', u'in', u'summer', u'to', u'give', u'a', u'more', u'female-like', u'appearance', u',', u'the', u'``', u'eclipse', u"''", u'plumage', u'.'], u'pos': [u'DT', u'NNS', u'-LRB-', u'NNS', u'-RRB-', u'IN', u'JJ', u'NNS', u'RB', u'VBP', u'JJ', u'NN', u',', u'CC', u'DT', u'VBZ', u'VBN', u'IN', u'NN', u'TO', u'VB', u'DT', u'RBR', u'JJ', u'NN', u',', u'DT', u'``', u'NN', u"''", u'NN', u'.'], u'char_offsets': [[1978, 1981], [1982, 1987], [1988, 1989], [1989, 1995], [1995, 1996], [1997, 1999], [2000, 2008], [2009, 2016], [2017, 2022], [2023, 2027], [2028, 2039], [2040, 2047], [2047, 2048], [2049, 2052], [2053, 2057], [2058, 2060], [2061, 2068], [2069, 2071], [2072, 2078], [2079, 2081], [2082, 2086], [2087, 2088], [2089, 2093], [2094, 2105], [2106, 2116], [2116, 2117], [2118, 2121], [2122, 2123], [2123, 2130], [2130, 2131], [2132, 2139], [2139, 2140]]}) 
answer: set([u'make', u'gras', u'foie'])
candidate Sentence: (0.10589320212602615, {u'tokens': [u'The', u'word', u'duck', u'-LRB-', u'from', u'Anglo-Saxon', u'd\u016bce', u'-RRB-', u',', u'meaning', u'the', u'bird', u',', u'came', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-LRB-', u'from', u'Anglo-Saxon', u'supposed', u'*', u'd\u016bcan', u'-RRB-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabbling', u'duck', u'group', u'feed', u'by', u'upending', u'-LRB-', u'compare', u'Dutch', u'duiken', u',', u'German', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'duck', u'-lrb-', u'from', u'anglo-saxon', u'd\u016bce', u'-rrb-', u',', u'mean', u'the', u'bird', u',', u'come', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-lrb-', u'from', u'anglo-saxon', u'suppose', u'*', u'd\u016bcan', u'-rrb-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabble', u'duck', u'group', u'feed', u'by', u'upend', u'-lrb-', u'compare', u'dutch', u'duiken', u',', u'german', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'IN', u'JJ', u'NN', u'-RRB-', u',', u'VBG', u'DT', u'NN', u',', u'VBD', u'IN', u'DT', u'VB', u'``', u'TO', u'VB', u"''", u'-LRB-', u'IN', u'JJ', u'VBN', u'SYM', u'NN', u'-RRB-', u'NN', u'``', u'TO', u'VB', u'RB', u'JJ', u'IN', u'IN', u'TO', u'VB', u'IN', u'NN', u"''", u'CC', u'``', u'TO', u'NN', u"''", u',', u'IN', u'IN', u'DT', u'NN', u'JJ', u'NNS', u'IN', u'DT', u'VBG', u'NN', u'NN', u'NN', u'IN', u'VBG', u'-LRB-', u'VB', u'JJ', u'NN', u',', u'JJ', u'NN', u'JJ', u'``', u'TO', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[3173, 3176], [3177, 3181], [3182, 3186], [3187, 3188], [3188, 3192], [3193, 3204], [3205, 3209], [3209, 3210], [3210, 3211], [3212, 3219], [3220, 3223], [3224, 3228], [3228, 3229], [3230, 3234], [3235, 3239], [3240, 3243], [3244, 3248], [3249, 3250], [3250, 3252], [3253, 3257], [3257, 3258], [3259, 3260], [3260, 3264], [3265, 3276], [3277, 3285], [3286, 3287], [3287, 3292], [3292, 3293], [3294, 3301], [3302, 3303], [3303, 3305], [3306, 3310], [3311, 3315], [3316, 3319], [3320, 3322], [3323, 3325], [3326, 3328], [3329, 3332], [3333, 3338], [3339, 3348], [3348, 3349], [3350, 3352], [3353, 3354], [3354, 3356], [3357, 3361], [3361, 3362], [3362, 3363], [3364, 3371], [3372, 3374], [3375, 3378], [3379, 3382], [3383, 3387], [3388, 3395], [3396, 3398], [3399, 3402], [3403, 3411], [3412, 3416], [3417, 3422], [3423, 3427], [3428, 3430], [3431, 3439], [3440, 3441], [3441, 3448], [3449, 3454], [3455, 3461], [3461, 3462], [3463, 3469], [3470, 3477], [3478, 3479], [3480, 3481], [3481, 3483], [3484, 3488], [3488, 3489], [3489, 3490], [3490, 3491]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.094845816493034363, {u'tokens': [u'All', u'domestic', u'ducks', u'are', u'descended', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhynchos', u',', u'except', u'the', u'Muscovy', u'Duck', u'.'], u'lemmas': [u'all', u'domestic', u'duck', u'be', u'descend', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhyncho', u',', u'except', u'the', u'Muscovy', u'duck', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNS', u',', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4371, 4374], [4375, 4383], [4384, 4389], [4390, 4393], [4394, 4403], [4404, 4408], [4409, 4412], [4413, 4417], [4418, 4425], [4426, 4430], [4431, 4444], [4444, 4445], [4446, 4452], [4453, 4456], [4457, 4464], [4465, 4469], [4470, 4471]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.093775182962417603, {u'tokens': [u'Ducklings', u'are', u'particularly', u'vulnerable', u',', u'since', u'their', u'inability', u'to', u'fly', u'makes', u'them', u'easy', u'prey', u'not', u'only', u'for', u'avian', u'hunters', u'but', u'also', u'large', u'fish', u'like', u'pike', u',', u'crocodilians', u',', u'and', u'other', u'aquatic', u'hunters', u',', u'including', u'fish-eating', u'birds', u'such', u'as', u'herons', u'.'], u'lemmas': [u'duckling', u'be', u'particularly', u'vulnerable', u',', u'since', u'they', u'inability', u'to', u'fly', u'make', u'they', u'easy', u'prey', u'not', u'only', u'for', u'avian', u'hunter', u'but', u'also', u'large', u'fish', u'like', u'pike', u',', u'crocodilian', u',', u'and', u'other', u'aquatic', u'hunter', u',', u'include', u'fish-eating', u'bird', u'such', u'as', u'heron', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'VBZ', u'PRP', u'JJ', u'NN', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'NN', u',', u'NNS', u',', u'CC', u'JJ', u'JJ', u'NNS', u',', u'VBG', u'JJ', u'NNS', u'JJ', u'IN', u'NNS', u'.'], u'char_offsets': [[2418, 2427], [2428, 2431], [2432, 2444], [2445, 2455], [2455, 2456], [2457, 2462], [2463, 2468], [2469, 2478], [2479, 2481], [2482, 2485], [2486, 2491], [2492, 2496], [2497, 2501], [2502, 2506], [2507, 2510], [2511, 2515], [2516, 2519], [2520, 2525], [2526, 2533], [2534, 2537], [2538, 2542], [2543, 2548], [2549, 2553], [2554, 2558], [2559, 2563], [2563, 2564], [2565, 2577], [2577, 2578], [2580, 2583], [2584, 2589], [2590, 2597], [2598, 2605], [2605, 2606], [2607, 2616], [2617, 2628], [2629, 2634], [2635, 2639], [2640, 2642], [2643, 2649], [2649, 2650]]}) 
answer: set([u'gras', u'often', u'foie'])
candidate Sentence: (0.087550215423107147, {u'tokens': [u'From', u'this', u'came', u'the', u'expression', u'``', u'a', u'sitting', u'duck', u"''", u',', u'which', u'means', u'``', u'an', u'easy', u'target', u"''", u'.'], u'lemmas': [u'from', u'this', u'come', u'the', u'expression', u'``', u'a', u'sit', u'duck', u"''", u',', u'which', u'mean', u'``', u'a', u'easy', u'target', u"''", u'.'], u'pos': [u'IN', u'DT', u'VBD', u'DT', u'NN', u'``', u'DT', u'VBG', u'NN', u"''", u',', u'WDT', u'VBZ', u'``', u'DT', u'JJ', u'NN', u"''", u'.'], u'char_offsets': [[4116, 4120], [4121, 4125], [4126, 4130], [4131, 4134], [4135, 4145], [4146, 4147], [4147, 4148], [4149, 4156], [4157, 4161], [4161, 4162], [4162, 4163], [4164, 4169], [4170, 4175], [4176, 4177], [4177, 4179], [4180, 4184], [4185, 4191], [4191, 4192], [4192, 4193]]}) 
answer: set([u'make', u'gras', u'often', u'foie'])
candidate Sentence: (0.085878603160381317, {u'tokens': [u'In', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleagues', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-LRB-', u'UK', u'-RRB-', u'finished', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'concluding', u'that', u',', u'of', u'the', u'animals', u'in', u'the', u'world', u',', u'the', u'duck', u'is', u'the', u'type', u'that', u'attracts', u'most', u'humor', u'and', u'silliness', u';', u'he', u'said', u'``', u'If', u'you', u"'re", u'going', u'to', u'tell', u'a', u'joke', u'involving', u'an', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'lemmas': [u'in', u'2002', u',', u'psychologist', u'Richard', u'Wiseman', u'and', u'colleague', u'at', u'the', u'University', u'of', u'Hertfordshire', u'-lrb-', u'UK', u'-rrb-', u'finish', u'a', u'year-long', u'LaughLab', u'experiment', u',', u'conclude', u'that', u',', u'of', u'the', u'animal', u'in', u'the', u'world', u',', u'the', u'duck', u'be', u'the', u'type', u'that', u'attract', u'most', u'humor', u'and', u'silliness', u';', u'he', u'say', u'``', u'if', u'you', u'be', u'go', u'to', u'tell', u'a', u'joke', u'involve', u'a', u'animal', u',', u'make', u'it', u'a', u'duck', u'.', u"''"], u'pos': [u'IN', u'CD', u',', u'NN', u'NNP', u'NNP', u'CC', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NN', u',', u'VBG', u'IN', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'RBS', u'NN', u'CC', u'NN', u':', u'PRP', u'VBD', u'``', u'IN', u'PRP', u'VBP', u'VBG', u'TO', u'VB', u'DT', u'NN', u'VBG', u'DT', u'NN', u',', u'VBP', u'PRP', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[5685, 5687], [5688, 5692], [5692, 5693], [5694, 5706], [5707, 5714], [5715, 5722], [5723, 5726], [5727, 5737], [5738, 5740], [5741, 5744], [5745, 5755], [5756, 5758], [5759, 5772], [5773, 5774], [5774, 5776], [5776, 5777], [5778, 5786], [5787, 5788], [5789, 5798], [5799, 5807], [5808, 5818], [5818, 5819], [5820, 5830], [5831, 5835], [5835, 5836], [5837, 5839], [5840, 5843], [5844, 5851], [5852, 5854], [5855, 5858], [5859, 5864], [5864, 5865], [5866, 5869], [5870, 5874], [5875, 5877], [5878, 5881], [5882, 5886], [5887, 5891], [5892, 5900], [5901, 5905], [5906, 5911], [5912, 5915], [5916, 5925], [5925, 5926], [5927, 5929], [5930, 5934], [5935, 5936], [5936, 5938], [5939, 5942], [5942, 5945], [5946, 5951], [5952, 5954], [5955, 5959], [5960, 5961], [5962, 5966], [5967, 5976], [5977, 5979], [5980, 5986], [5986, 5987], [5988, 5992], [5993, 5995], [5996, 5997], [5998, 6002], [6002, 6003], [6003, 6004]]}) 
answer: set([u'gras', u'often', u'foie'])

Is foie gras often made from ducks?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa844d0>.answer
_____________________________ test_yesno[param69] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84518>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa84518>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42998743057250977, {u'tokens': [u'To', u'be', u'able', u'to', u'submerge', u'more', u'easily', u',', u'the', u'diving', u'ducks', u'are', u'heavier', u'than', u'dabbling', u'ducks', u',', u'and', u'therefore', u'have', u'more', u'difficulty', u'taking', u'off', u'to', u'fly', u'.'], u'lemmas': [u'to', u'be', u'able', u'to', u'submerge', u'more', u'easily', u',', u'the', u'diving', u'duck', u'be', u'heavier', u'than', u'dabble', u'duck', u',', u'and', u'therefore', u'have', u'more', u'difficulty', u'take', u'off', u'to', u'fly', u'.'], u'pos': [u'TO', u'VB', u'JJ', u'TO', u'VB', u'JJR', u'RB', u',', u'DT', u'JJ', u'NNS', u'VBP', u'JJR', u'IN', u'VBG', u'NNS', u',', u'CC', u'RB', u'VBP', u'RBR', u'NN', u'VBG', u'RP', u'TO', u'VB', u'.'], u'char_offsets': [[1236, 1238], [1239, 1241], [1242, 1246], [1247, 1249], [1250, 1258], [1259, 1263], [1264, 1270], [1270, 1271], [1272, 1275], [1276, 1282], [1283, 1288], [1289, 1292], [1293, 1300], [1301, 1305], [1306, 1314], [1315, 1320], [1320, 1321], [1322, 1325], [1326, 1335], [1336, 1340], [1341, 1345], [1346, 1356], [1357, 1363], [1364, 1367], [1368, 1370], [1371, 1374], [1374, 1375]]}) 
answer: set([u'tha'])
candidate Sentence: (0.2424691915512085, {u'tokens': [u'Diving', u'ducks', u'and', u'sea', u'ducks', u'forage', u'deep', u'underwater', u'.'], u'lemmas': [u'diving', u'duck', u'and', u'sea', u'duck', u'forage', u'deep', u'underwater', u'.'], u'pos': [u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'VBP', u'JJ', u'JJ', u'.'], u'char_offsets': [[1185, 1191], [1192, 1197], [1198, 1201], [1202, 1205], [1206, 1211], [1212, 1218], [1219, 1223], [1224, 1234], [1234, 1235]]}) 
answer: set([u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.10498755425214767, {u'tokens': [u'Dabbling', u'ducks', u'feed', u'on', u'the', u'surface', u'of', u'water', u'or', u'on', u'land', u',', u'or', u'as', u'deep', u'as', u'they', u'can', u'reach', u'by', u'up-ending', u'without', u'completely', u'submerging', u'.'], u'lemmas': [u'dabble', u'duck', u'feed', u'on', u'the', u'surface', u'of', u'water', u'or', u'on', u'land', u',', u'or', u'as', u'deep', u'as', u'they', u'can', u'reach', u'by', u'up-ending', u'without', u'completely', u'submerge', u'.'], u'pos': [u'VBG', u'NNS', u'VB', u'IN', u'DT', u'NN', u'IN', u'NN', u'CC', u'IN', u'NN', u',', u'CC', u'RB', u'JJ', u'IN', u'PRP', u'MD', u'VB', u'IN', u'NN', u'IN', u'RB', u'VBG', u'.'], u'char_offsets': [[1376, 1384], [1385, 1390], [1391, 1395], [1396, 1398], [1399, 1402], [1403, 1410], [1411, 1413], [1414, 1419], [1420, 1422], [1423, 1425], [1426, 1430], [1430, 1431], [1432, 1434], [1435, 1437], [1438, 1442], [1443, 1445], [1446, 1450], [1451, 1454], [1455, 1460], [1461, 1463], [1464, 1473], [1474, 1481], [1482, 1492], [1493, 1503], [1503, 1504]]}) 
answer: set([u'diving', u'heavier', u'tha'])
candidate Sentence: (0.064976304769515991, {u'tokens': [u'The', u'word', u'duck', u'-LRB-', u'from', u'Anglo-Saxon', u'd\u016bce', u'-RRB-', u',', u'meaning', u'the', u'bird', u',', u'came', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-LRB-', u'from', u'Anglo-Saxon', u'supposed', u'*', u'd\u016bcan', u'-RRB-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabbling', u'duck', u'group', u'feed', u'by', u'upending', u'-LRB-', u'compare', u'Dutch', u'duiken', u',', u'German', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'duck', u'-lrb-', u'from', u'anglo-saxon', u'd\u016bce', u'-rrb-', u',', u'mean', u'the', u'bird', u',', u'come', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-lrb-', u'from', u'anglo-saxon', u'suppose', u'*', u'd\u016bcan', u'-rrb-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabble', u'duck', u'group', u'feed', u'by', u'upend', u'-lrb-', u'compare', u'dutch', u'duiken', u',', u'german', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'IN', u'JJ', u'NN', u'-RRB-', u',', u'VBG', u'DT', u'NN', u',', u'VBD', u'IN', u'DT', u'VB', u'``', u'TO', u'VB', u"''", u'-LRB-', u'IN', u'JJ', u'VBN', u'SYM', u'NN', u'-RRB-', u'NN', u'``', u'TO', u'VB', u'RB', u'JJ', u'IN', u'IN', u'TO', u'VB', u'IN', u'NN', u"''", u'CC', u'``', u'TO', u'NN', u"''", u',', u'IN', u'IN', u'DT', u'NN', u'JJ', u'NNS', u'IN', u'DT', u'VBG', u'NN', u'NN', u'NN', u'IN', u'VBG', u'-LRB-', u'VB', u'JJ', u'NN', u',', u'JJ', u'NN', u'JJ', u'``', u'TO', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[3173, 3176], [3177, 3181], [3182, 3186], [3187, 3188], [3188, 3192], [3193, 3204], [3205, 3209], [3209, 3210], [3210, 3211], [3212, 3219], [3220, 3223], [3224, 3228], [3228, 3229], [3230, 3234], [3235, 3239], [3240, 3243], [3244, 3248], [3249, 3250], [3250, 3252], [3253, 3257], [3257, 3258], [3259, 3260], [3260, 3264], [3265, 3276], [3277, 3285], [3286, 3287], [3287, 3292], [3292, 3293], [3294, 3301], [3302, 3303], [3303, 3305], [3306, 3310], [3311, 3315], [3316, 3319], [3320, 3322], [3323, 3325], [3326, 3328], [3329, 3332], [3333, 3338], [3339, 3348], [3348, 3349], [3350, 3352], [3353, 3354], [3354, 3356], [3357, 3361], [3361, 3362], [3362, 3363], [3364, 3371], [3372, 3374], [3375, 3378], [3379, 3382], [3383, 3387], [3388, 3395], [3396, 3398], [3399, 3402], [3403, 3411], [3412, 3416], [3417, 3422], [3423, 3427], [3428, 3430], [3431, 3439], [3440, 3441], [3441, 3448], [3449, 3454], [3455, 3461], [3461, 3462], [3463, 3469], [3470, 3477], [3478, 3479], [3480, 3481], [3481, 3483], [3484, 3488], [3488, 3489], [3489, 3490], [3490, 3491]]}) 
answer: set([u'diving', u'heavier', u'tha'])
candidate Sentence: (0.029148444533348083, {u'tokens': [u'The', u'expression', u'``', u'quacks', u'like', u'a', u'duck', u"''", u'is', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'It', u'looks', u'like', u'a', u'duck', u',', u'it', u'quacks', u'like', u'a', u'duck', u',', u'it', u'swims', u'like', u'a', u'duck', u',', u'so', u'it', u"'s", u'a', u'duck', u'.', u"''"], u'lemmas': [u'the', u'expression', u'``', u'quack', u'like', u'a', u'duck', u"''", u'be', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'it', u'look', u'like', u'a', u'duck', u',', u'it', u'quack', u'like', u'a', u'duck', u',', u'it', u'swim', u'like', u'a', u'duck', u',', u'so', u'it', u'be', u'a', u'duck', u'.', u"''"], u'pos': [u'DT', u'NN', u'``', u'VBZ', u'IN', u'DT', u'NN', u"''", u'VBZ', u'RB', u'DT', u'JJ', u'NN', u'IN', u'``', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'IN', u'PRP', u'VBZ', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[6499, 6502], [6503, 6513], [6514, 6515], [6515, 6521], [6522, 6526], [6527, 6528], [6529, 6533], [6533, 6534], [6535, 6537], [6538, 6547], [6548, 6549], [6550, 6555], [6556, 6560], [6561, 6564], [6565, 6566], [6566, 6568], [6569, 6574], [6575, 6579], [6580, 6581], [6582, 6586], [6586, 6587], [6588, 6590], [6591, 6597], [6598, 6602], [6603, 6604], [6605, 6609], [6609, 6610], [6611, 6613], [6614, 6619], [6620, 6624], [6625, 6626], [6627, 6631], [6631, 6632], [6633, 6635], [6636, 6638], [6638, 6640], [6641, 6642], [6643, 6647], [6647, 6648], [6648, 6649]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.022554801777005196, {u'tokens': [u'Of', u'the', u'many', u'ducks', u'in', u'fiction', u',', u'many', u'are', u'silly', u'cartoon', u'characters', u'like', u'Daffy', u'Duck', u'-LRB-', u'see', u'the', u'New', u'Scientist', u'article', u'mentioning', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-RRB-', u'.'], u'lemmas': [u'of', u'the', u'many', u'duck', u'in', u'fiction', u',', u'many', u'be', u'silly', u'cartoon', u'character', u'like', u'Daffy', u'duck', u'-lrb-', u'see', u'the', u'New', u'Scientist', u'article', u'mention', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'JJ', u'VBP', u'JJ', u'NN', u'NNS', u'IN', u'NNP', u'NN', u'-LRB-', u'VB', u'DT', u'NNP', u'NNP', u'NN', u'VBG', u'NN', u'IN', u'DT', u'NN', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[6172, 6174], [6175, 6178], [6179, 6183], [6184, 6189], [6190, 6192], [6193, 6200], [6200, 6201], [6202, 6206], [6207, 6210], [6211, 6216], [6217, 6224], [6225, 6235], [6236, 6240], [6241, 6246], [6247, 6251], [6252, 6253], [6253, 6256], [6257, 6260], [6261, 6264], [6265, 6274], [6275, 6282], [6284, 6294], [6295, 6300], [6301, 6303], [6304, 6307], [6308, 6312], [6313, 6314], [6314, 6318], [6318, 6319], [6319, 6320], [6320, 6321]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.021427061408758163, {u'tokens': [u'Adult', u'ducks', u'are', u'fast', u'fliers', u',', u'but', u'may', u'be', u'caught', u'on', u'the', u'water', u'by', u'large', u'aquatic', u'predators', u'.'], u'lemmas': [u'adult', u'duck', u'be', u'fast', u'flier', u',', u'but', u'may', u'be', u'catch', u'on', u'the', u'water', u'by', u'large', u'aquatic', u'predator', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u',', u'CC', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[2835, 2840], [2841, 2846], [2847, 2850], [2851, 2855], [2856, 2862], [2862, 2863], [2864, 2867], [2868, 2871], [2872, 2874], [2875, 2881], [2882, 2884], [2885, 2888], [2889, 2894], [2895, 2897], [2898, 2903], [2904, 2911], [2912, 2921], [2921, 2922]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.02019406296312809, {u'tokens': [u'All', u'domestic', u'ducks', u'are', u'descended', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhynchos', u',', u'except', u'the', u'Muscovy', u'Duck', u'.'], u'lemmas': [u'all', u'domestic', u'duck', u'be', u'descend', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhyncho', u',', u'except', u'the', u'Muscovy', u'duck', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNS', u',', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4371, 4374], [4375, 4383], [4384, 4389], [4390, 4393], [4394, 4403], [4404, 4408], [4409, 4412], [4413, 4417], [4418, 4425], [4426, 4430], [4431, 4444], [4444, 4445], [4446, 4452], [4453, 4456], [4457, 4464], [4465, 4469], [4470, 4471]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.019010651856660843, {u'tokens': [u'The', u'duck', u'was', u'operated', u'on', u'and', u'was', u'again', u'presumed', u'dead', u'after', u'a', u'bad', u'reaction', u'to', u'anesthesia', u'.'], u'lemmas': [u'the', u'duck', u'be', u'operate', u'on', u'and', u'be', u'again', u'presume', u'dead', u'after', u'a', u'bad', u'reaction', u'to', u'anesthesia', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'VBN', u'IN', u'CC', u'VBD', u'RB', u'VBN', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'NN', u'.'], u'char_offsets': [[7687, 7690], [7691, 7695], [7696, 7699], [7700, 7708], [7709, 7711], [7712, 7715], [7716, 7719], [7720, 7725], [7726, 7734], [7735, 7739], [7740, 7745], [7746, 7747], [7748, 7751], [7752, 7760], [7761, 7763], [7764, 7774], [7774, 7775]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.01787925511598587, {u'tokens': [u'a', u'picture', u'of', u'a', u'duck', u'is', u'used', u'to', u'say', u'``', u'heads', u'up', u"''", u'.'], u'lemmas': [u'a', u'picture', u'of', u'a', u'duck', u'be', u'use', u'to', u'say', u'``', u'head', u'up', u"''", u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'``', u'NNS', u'RB', u"''", u'.'], u'char_offsets': [[6452, 6453], [6454, 6461], [6462, 6464], [6465, 6466], [6467, 6471], [6472, 6474], [6475, 6479], [6480, 6482], [6483, 6486], [6487, 6488], [6488, 6493], [6494, 6496], [6496, 6497], [6497, 6498]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])

Are diving ducks heavier tha dabbling ducks?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa84518>.answer
_____________________________ test_yesno[param70] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84560>, (<src.tfidf.TF_IDF object at 0x105acbd10>, set(['duck'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa84560>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42998743057250977, {u'tokens': [u'To', u'be', u'able', u'to', u'submerge', u'more', u'easily', u',', u'the', u'diving', u'ducks', u'are', u'heavier', u'than', u'dabbling', u'ducks', u',', u'and', u'therefore', u'have', u'more', u'difficulty', u'taking', u'off', u'to', u'fly', u'.'], u'lemmas': [u'to', u'be', u'able', u'to', u'submerge', u'more', u'easily', u',', u'the', u'diving', u'duck', u'be', u'heavier', u'than', u'dabble', u'duck', u',', u'and', u'therefore', u'have', u'more', u'difficulty', u'take', u'off', u'to', u'fly', u'.'], u'pos': [u'TO', u'VB', u'JJ', u'TO', u'VB', u'JJR', u'RB', u',', u'DT', u'JJ', u'NNS', u'VBP', u'JJR', u'IN', u'VBG', u'NNS', u',', u'CC', u'RB', u'VBP', u'RBR', u'NN', u'VBG', u'RP', u'TO', u'VB', u'.'], u'char_offsets': [[1236, 1238], [1239, 1241], [1242, 1246], [1247, 1249], [1250, 1258], [1259, 1263], [1264, 1270], [1270, 1271], [1272, 1275], [1276, 1282], [1283, 1288], [1289, 1292], [1293, 1300], [1301, 1305], [1306, 1314], [1315, 1320], [1320, 1321], [1322, 1325], [1326, 1335], [1336, 1340], [1341, 1345], [1346, 1356], [1357, 1363], [1364, 1367], [1368, 1370], [1371, 1374], [1374, 1375]]}) 
answer: set([u'tha'])
candidate Sentence: (0.2424691915512085, {u'tokens': [u'Diving', u'ducks', u'and', u'sea', u'ducks', u'forage', u'deep', u'underwater', u'.'], u'lemmas': [u'diving', u'duck', u'and', u'sea', u'duck', u'forage', u'deep', u'underwater', u'.'], u'pos': [u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'VBP', u'JJ', u'JJ', u'.'], u'char_offsets': [[1185, 1191], [1192, 1197], [1198, 1201], [1202, 1205], [1206, 1211], [1212, 1218], [1219, 1223], [1224, 1234], [1234, 1235]]}) 
answer: set([u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.10498755425214767, {u'tokens': [u'Dabbling', u'ducks', u'feed', u'on', u'the', u'surface', u'of', u'water', u'or', u'on', u'land', u',', u'or', u'as', u'deep', u'as', u'they', u'can', u'reach', u'by', u'up-ending', u'without', u'completely', u'submerging', u'.'], u'lemmas': [u'dabble', u'duck', u'feed', u'on', u'the', u'surface', u'of', u'water', u'or', u'on', u'land', u',', u'or', u'as', u'deep', u'as', u'they', u'can', u'reach', u'by', u'up-ending', u'without', u'completely', u'submerge', u'.'], u'pos': [u'VBG', u'NNS', u'VB', u'IN', u'DT', u'NN', u'IN', u'NN', u'CC', u'IN', u'NN', u',', u'CC', u'RB', u'JJ', u'IN', u'PRP', u'MD', u'VB', u'IN', u'NN', u'IN', u'RB', u'VBG', u'.'], u'char_offsets': [[1376, 1384], [1385, 1390], [1391, 1395], [1396, 1398], [1399, 1402], [1403, 1410], [1411, 1413], [1414, 1419], [1420, 1422], [1423, 1425], [1426, 1430], [1430, 1431], [1432, 1434], [1435, 1437], [1438, 1442], [1443, 1445], [1446, 1450], [1451, 1454], [1455, 1460], [1461, 1463], [1464, 1473], [1474, 1481], [1482, 1492], [1493, 1503], [1503, 1504]]}) 
answer: set([u'diving', u'heavier', u'tha'])
candidate Sentence: (0.064976304769515991, {u'tokens': [u'The', u'word', u'duck', u'-LRB-', u'from', u'Anglo-Saxon', u'd\u016bce', u'-RRB-', u',', u'meaning', u'the', u'bird', u',', u'came', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-LRB-', u'from', u'Anglo-Saxon', u'supposed', u'*', u'd\u016bcan', u'-RRB-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabbling', u'duck', u'group', u'feed', u'by', u'upending', u'-LRB-', u'compare', u'Dutch', u'duiken', u',', u'German', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'duck', u'-lrb-', u'from', u'anglo-saxon', u'd\u016bce', u'-rrb-', u',', u'mean', u'the', u'bird', u',', u'come', u'from', u'the', u'verb', u'``', u'to', u'duck', u"''", u'-lrb-', u'from', u'anglo-saxon', u'suppose', u'*', u'd\u016bcan', u'-rrb-', u'meaning', u'``', u'to', u'bend', u'down', u'low', u'as', u'if', u'to', u'get', u'under', u'something', u"''", u'or', u'``', u'to', u'dive', u"''", u',', u'because', u'of', u'the', u'way', u'many', u'species', u'in', u'the', u'dabble', u'duck', u'group', u'feed', u'by', u'upend', u'-lrb-', u'compare', u'dutch', u'duiken', u',', u'german', u'tauchen', u'=', u'``', u'to', u'dive', u"''", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'IN', u'JJ', u'NN', u'-RRB-', u',', u'VBG', u'DT', u'NN', u',', u'VBD', u'IN', u'DT', u'VB', u'``', u'TO', u'VB', u"''", u'-LRB-', u'IN', u'JJ', u'VBN', u'SYM', u'NN', u'-RRB-', u'NN', u'``', u'TO', u'VB', u'RB', u'JJ', u'IN', u'IN', u'TO', u'VB', u'IN', u'NN', u"''", u'CC', u'``', u'TO', u'NN', u"''", u',', u'IN', u'IN', u'DT', u'NN', u'JJ', u'NNS', u'IN', u'DT', u'VBG', u'NN', u'NN', u'NN', u'IN', u'VBG', u'-LRB-', u'VB', u'JJ', u'NN', u',', u'JJ', u'NN', u'JJ', u'``', u'TO', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[3173, 3176], [3177, 3181], [3182, 3186], [3187, 3188], [3188, 3192], [3193, 3204], [3205, 3209], [3209, 3210], [3210, 3211], [3212, 3219], [3220, 3223], [3224, 3228], [3228, 3229], [3230, 3234], [3235, 3239], [3240, 3243], [3244, 3248], [3249, 3250], [3250, 3252], [3253, 3257], [3257, 3258], [3259, 3260], [3260, 3264], [3265, 3276], [3277, 3285], [3286, 3287], [3287, 3292], [3292, 3293], [3294, 3301], [3302, 3303], [3303, 3305], [3306, 3310], [3311, 3315], [3316, 3319], [3320, 3322], [3323, 3325], [3326, 3328], [3329, 3332], [3333, 3338], [3339, 3348], [3348, 3349], [3350, 3352], [3353, 3354], [3354, 3356], [3357, 3361], [3361, 3362], [3362, 3363], [3364, 3371], [3372, 3374], [3375, 3378], [3379, 3382], [3383, 3387], [3388, 3395], [3396, 3398], [3399, 3402], [3403, 3411], [3412, 3416], [3417, 3422], [3423, 3427], [3428, 3430], [3431, 3439], [3440, 3441], [3441, 3448], [3449, 3454], [3455, 3461], [3461, 3462], [3463, 3469], [3470, 3477], [3478, 3479], [3480, 3481], [3481, 3483], [3484, 3488], [3488, 3489], [3489, 3490], [3490, 3491]]}) 
answer: set([u'diving', u'heavier', u'tha'])
candidate Sentence: (0.029148444533348083, {u'tokens': [u'The', u'expression', u'``', u'quacks', u'like', u'a', u'duck', u"''", u'is', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'It', u'looks', u'like', u'a', u'duck', u',', u'it', u'quacks', u'like', u'a', u'duck', u',', u'it', u'swims', u'like', u'a', u'duck', u',', u'so', u'it', u"'s", u'a', u'duck', u'.', u"''"], u'lemmas': [u'the', u'expression', u'``', u'quack', u'like', u'a', u'duck', u"''", u'be', u'sometimes', u'a', u'short', u'form', u'for', u'``', u'it', u'look', u'like', u'a', u'duck', u',', u'it', u'quack', u'like', u'a', u'duck', u',', u'it', u'swim', u'like', u'a', u'duck', u',', u'so', u'it', u'be', u'a', u'duck', u'.', u"''"], u'pos': [u'DT', u'NN', u'``', u'VBZ', u'IN', u'DT', u'NN', u"''", u'VBZ', u'RB', u'DT', u'JJ', u'NN', u'IN', u'``', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'PRP', u'VBZ', u'IN', u'DT', u'NN', u',', u'IN', u'PRP', u'VBZ', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[6499, 6502], [6503, 6513], [6514, 6515], [6515, 6521], [6522, 6526], [6527, 6528], [6529, 6533], [6533, 6534], [6535, 6537], [6538, 6547], [6548, 6549], [6550, 6555], [6556, 6560], [6561, 6564], [6565, 6566], [6566, 6568], [6569, 6574], [6575, 6579], [6580, 6581], [6582, 6586], [6586, 6587], [6588, 6590], [6591, 6597], [6598, 6602], [6603, 6604], [6605, 6609], [6609, 6610], [6611, 6613], [6614, 6619], [6620, 6624], [6625, 6626], [6627, 6631], [6631, 6632], [6633, 6635], [6636, 6638], [6638, 6640], [6641, 6642], [6643, 6647], [6647, 6648], [6648, 6649]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.022554801777005196, {u'tokens': [u'Of', u'the', u'many', u'ducks', u'in', u'fiction', u',', u'many', u'are', u'silly', u'cartoon', u'characters', u'like', u'Daffy', u'Duck', u'-LRB-', u'see', u'the', u'New', u'Scientist', u'article', u'mentioning', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-RRB-', u'.'], u'lemmas': [u'of', u'the', u'many', u'duck', u'in', u'fiction', u',', u'many', u'be', u'silly', u'cartoon', u'character', u'like', u'Daffy', u'duck', u'-lrb-', u'see', u'the', u'New', u'Scientist', u'article', u'mention', u'humor', u'in', u'the', u'word', u'``', u'duck', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'JJ', u'VBP', u'JJ', u'NN', u'NNS', u'IN', u'NNP', u'NN', u'-LRB-', u'VB', u'DT', u'NNP', u'NNP', u'NN', u'VBG', u'NN', u'IN', u'DT', u'NN', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[6172, 6174], [6175, 6178], [6179, 6183], [6184, 6189], [6190, 6192], [6193, 6200], [6200, 6201], [6202, 6206], [6207, 6210], [6211, 6216], [6217, 6224], [6225, 6235], [6236, 6240], [6241, 6246], [6247, 6251], [6252, 6253], [6253, 6256], [6257, 6260], [6261, 6264], [6265, 6274], [6275, 6282], [6284, 6294], [6295, 6300], [6301, 6303], [6304, 6307], [6308, 6312], [6313, 6314], [6314, 6318], [6318, 6319], [6319, 6320], [6320, 6321]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.021427061408758163, {u'tokens': [u'Adult', u'ducks', u'are', u'fast', u'fliers', u',', u'but', u'may', u'be', u'caught', u'on', u'the', u'water', u'by', u'large', u'aquatic', u'predators', u'.'], u'lemmas': [u'adult', u'duck', u'be', u'fast', u'flier', u',', u'but', u'may', u'be', u'catch', u'on', u'the', u'water', u'by', u'large', u'aquatic', u'predator', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u',', u'CC', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[2835, 2840], [2841, 2846], [2847, 2850], [2851, 2855], [2856, 2862], [2862, 2863], [2864, 2867], [2868, 2871], [2872, 2874], [2875, 2881], [2882, 2884], [2885, 2888], [2889, 2894], [2895, 2897], [2898, 2903], [2904, 2911], [2912, 2921], [2921, 2922]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.02019406296312809, {u'tokens': [u'All', u'domestic', u'ducks', u'are', u'descended', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhynchos', u',', u'except', u'the', u'Muscovy', u'Duck', u'.'], u'lemmas': [u'all', u'domestic', u'duck', u'be', u'descend', u'from', u'the', u'wild', u'Mallard', u'Anas', u'platyrhyncho', u',', u'except', u'the', u'Muscovy', u'duck', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNS', u',', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4371, 4374], [4375, 4383], [4384, 4389], [4390, 4393], [4394, 4403], [4404, 4408], [4409, 4412], [4413, 4417], [4418, 4425], [4426, 4430], [4431, 4444], [4444, 4445], [4446, 4452], [4453, 4456], [4457, 4464], [4465, 4469], [4470, 4471]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.019010651856660843, {u'tokens': [u'The', u'duck', u'was', u'operated', u'on', u'and', u'was', u'again', u'presumed', u'dead', u'after', u'a', u'bad', u'reaction', u'to', u'anesthesia', u'.'], u'lemmas': [u'the', u'duck', u'be', u'operate', u'on', u'and', u'be', u'again', u'presume', u'dead', u'after', u'a', u'bad', u'reaction', u'to', u'anesthesia', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'VBN', u'IN', u'CC', u'VBD', u'RB', u'VBN', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'NN', u'.'], u'char_offsets': [[7687, 7690], [7691, 7695], [7696, 7699], [7700, 7708], [7709, 7711], [7712, 7715], [7716, 7719], [7720, 7725], [7726, 7734], [7735, 7739], [7740, 7745], [7746, 7747], [7748, 7751], [7752, 7760], [7761, 7763], [7764, 7774], [7774, 7775]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])
candidate Sentence: (0.01787925511598587, {u'tokens': [u'a', u'picture', u'of', u'a', u'duck', u'is', u'used', u'to', u'say', u'``', u'heads', u'up', u"''", u'.'], u'lemmas': [u'a', u'picture', u'of', u'a', u'duck', u'be', u'use', u'to', u'say', u'``', u'head', u'up', u"''", u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'``', u'NNS', u'RB', u"''", u'.'], u'char_offsets': [[6452, 6453], [6454, 6461], [6462, 6464], [6465, 6466], [6467, 6471], [6472, 6474], [6475, 6479], [6480, 6482], [6483, 6486], [6487, 6488], [6488, 6493], [6494, 6496], [6496, 6497], [6497, 6498]]}) 
answer: set([u'diving', u'dabble', u'heavier', u'tha'])

Are diving ducks heavier tha dabbling ducks?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa84560>.answer
_____________________________ test_yesno[param81] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84878>, (<src.tfidf.TF_IDF object at 0x1061d2850>, set(['egypt'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aa84878>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24566225707530975, {u'tokens': [u'Pan', u'-', u'Arabism', u':', u'What', u'Destroyed', u'the', u'Ideology', u'of', u'Arab', u'Nationalism', u'?'], u'lemmas': [u'pan', u'-', u'Arabism', u':', u'what', u'destroy', u'the', u'ideology', u'of', u'Arab', u'Nationalism', u'?'], u'pos': [u'NN', u':', u'NNP', u':', u'WP', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[16632, 16635], [16636, 16637], [16638, 16645], [16645, 16646], [16647, 16651], [16652, 16661], [16662, 16665], [16666, 16674], [16675, 16677], [16678, 16682], [16683, 16694], [16694, 16695]]}) 
answer: set([u'asia'])
candidate Sentence: (0.17808885872364044, {u'tokens': [u'Egypt', u'-LRB-', u'Egyptian', u':', u'Kemet', u';', u'Coptic', u':', u'K\u012bmi', u';', u';', u'Egyptian', u'Arabic', u':', u'-RRB-', u',', u'officially', u'the', u'Arab', u'Republic', u'of', u'Egypt', u',', u'is', u'a', u'country', u'in', u'North', u'Africa', u'that', u'includes', u'the', u'Sinai', u'Peninsula', u',', u'a', u'land', u'bridge', u'to', u'Asia', u'.'], u'lemmas': [u'Egypt', u'-lrb-', u'Egyptian', u':', u'Kemet', u';', u'Coptic', u':', u'K\u012bmi', u';', u';', u'egyptian', u'arabic', u':', u'-rrb-', u',', u'officially', u'the', u'Arab', u'Republic', u'of', u'Egypt', u',', u'be', u'a', u'country', u'in', u'North', u'Africa', u'that', u'include', u'the', u'Sinai', u'Peninsula', u',', u'a', u'land', u'bridge', u'to', u'Asia', u'.'], u'pos': [u'NNP', u'-LRB-', u'NNP', u':', u'NNP', u':', u'NNP', u':', u'NNP', u':', u':', u'JJ', u'JJ', u':', u'-RRB-', u',', u'RB', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'WDT', u'VBZ', u'DT', u'NNP', u'NNP', u',', u'DT', u'NN', u'NN', u'TO', u'NNP', u'.'], u'char_offsets': [[0, 5], [6, 7], [7, 15], [15, 16], [17, 22], [22, 23], [24, 30], [30, 31], [34, 38], [38, 39], [44, 45], [46, 54], [55, 61], [61, 62], [64, 65], [65, 66], [67, 77], [78, 81], [82, 86], [87, 95], [96, 98], [99, 104], [104, 105], [106, 108], [109, 110], [111, 118], [119, 121], [122, 127], [128, 134], [135, 139], [140, 148], [149, 152], [153, 158], [159, 168], [168, 169], [170, 171], [172, 176], [177, 183], [184, 186], [187, 191], [191, 192]]}) 
answer: set([])
candidate Sentence: (0.16299988329410553, {u'tokens': [u'The', u'last', u'40', u'years', u'have', u'seen', u'a', u'rapid', u'increase', u'in', u'population', u'due', u'to', u'medical', u'advances', u'and', u'massive', u'increase', u'in', u'agricultural', u'productivity', u',', u'BBC', u'NEWS', u'|', u'The', u'limits', u'of', u'a', u'Green', u'Revolution', u'?'], u'lemmas': [u'the', u'last', u'40', u'year', u'have', u'see', u'a', u'rapid', u'increase', u'in', u'population', u'due', u'to', u'medical', u'advance', u'and', u'massive', u'increase', u'in', u'agricultural', u'productivity', u',', u'BBC', u'NEWS', u'|', u'the', u'limit', u'of', u'a', u'Green', u'Revolution', u'?'], u'pos': [u'DT', u'JJ', u'CD', u'NNS', u'VBP', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'JJ', u'TO', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[35989, 35992], [35993, 35997], [35998, 36000], [36001, 36006], [36007, 36011], [36012, 36016], [36017, 36018], [36019, 36024], [36025, 36033], [36034, 36036], [36037, 36047], [36048, 36051], [36052, 36054], [36055, 36062], [36063, 36071], [36072, 36075], [36076, 36083], [36084, 36092], [36093, 36095], [36096, 36108], [36109, 36121], [36121, 36122], [36124, 36127], [36128, 36132], [36133, 36134], [36135, 36138], [36139, 36145], [36146, 36148], [36149, 36150], [36151, 36156], [36157, 36167], [36167, 36168]]}) 
answer: set([u'asia'])
candidate Sentence: (0.13171683251857758, {u'tokens': [u'Egypt', u"'s", u'important', u'role', u'in', u'geopolitics', u'stems', u'from', u'its', u'strategic', u'position', u':', u'a', u'transcontinental', u'nation', u',', u'it', u'possesses', u'a', u'land', u'bridge', u'-LRB-', u'the', u'Isthmus', u'of', u'Suez', u'-RRB-', u'between', u'Africa', u'and', u'Asia', u',', u'which', u'in', u'turn', u'is', u'traversed', u'by', u'a', u'navigable', u'waterway', u'-LRB-', u'the', u'Suez', u'Canal', u'-RRB-', u'that', u'connects', u'the', u'Mediterranean', u'Sea', u'with', u'the', u'Indian', u'Ocean', u'via', u'the', u'Red', u'Sea', u'.'], u'lemmas': [u'Egypt', u"'s", u'important', u'role', u'in', u'geopolitics', u'stem', u'from', u'its', u'strategic', u'position', u':', u'a', u'transcontinental', u'nation', u',', u'it', u'possess', u'a', u'land', u'bridge', u'-lrb-', u'the', u'isthmus', u'of', u'Suez', u'-rrb-', u'between', u'Africa', u'and', u'Asia', u',', u'which', u'in', u'turn', u'be', u'traverse', u'by', u'a', u'navigable', u'waterway', u'-lrb-', u'the', u'Suez', u'Canal', u'-rrb-', u'that', u'connect', u'the', u'Mediterranean', u'Sea', u'with', u'the', u'Indian', u'Ocean', u'via', u'the', u'Red', u'Sea', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'IN', u'PRP$', u'JJ', u'NN', u':', u'DT', u'JJ', u'NN', u',', u'PRP', u'VBZ', u'DT', u'NN', u'NN', u'-LRB-', u'DT', u'NN', u'IN', u'NNP', u'-RRB-', u'IN', u'NNP', u'CC', u'NNP', u',', u'WDT', u'IN', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'DT', u'NNP', u'NNP', u'-RRB-', u'WDT', u'VBZ', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[55090, 55095], [55095, 55097], [55098, 55107], [55108, 55112], [55113, 55115], [55116, 55127], [55128, 55133], [55134, 55138], [55139, 55142], [55143, 55152], [55153, 55161], [55161, 55162], [55163, 55164], [55165, 55181], [55182, 55188], [55188, 55189], [55190, 55192], [55193, 55202], [55203, 55204], [55205, 55209], [55210, 55216], [55217, 55218], [55218, 55221], [55222, 55229], [55230, 55232], [55233, 55237], [55237, 55238], [55239, 55246], [55247, 55253], [55254, 55257], [55258, 55262], [55262, 55263], [55264, 55269], [55270, 55272], [55273, 55277], [55278, 55280], [55281, 55290], [55291, 55293], [55294, 55295], [55296, 55305], [55306, 55314], [55315, 55316], [55316, 55319], [55320, 55324], [55325, 55330], [55330, 55331], [55332, 55336], [55337, 55345], [55346, 55349], [55350, 55363], [55364, 55367], [55368, 55372], [55373, 55376], [55377, 55383], [55384, 55389], [55390, 55393], [55394, 55397], [55398, 55401], [55402, 55405], [55405, 55406]]}) 
answer: set([])
candidate Sentence: (0.044525809586048126, {u'tokens': [u'Egypt', u':', u'Overview', u'of', u'human', u'rights', u'issues', u'in', u'Egypt', u'.'], u'lemmas': [u'Egypt', u':', u'overview', u'of', u'human', u'rights', u'issue', u'in', u'Egypt', u'.'], u'pos': [u'NNP', u':', u'NN', u'IN', u'JJ', u'NNS', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[41957, 41962], [41962, 41963], [41964, 41972], [41973, 41975], [41976, 41981], [41982, 41988], [41989, 41995], [41996, 41998], [41999, 42004], [42004, 42005]]}) 
answer: set([u'asia'])
candidate Sentence: (0.044525809586048126, {u'tokens': [u'Egypt', u':', u'Overview', u'of', u'human', u'rights', u'issues', u'in', u'Egypt', u'.'], u'lemmas': [u'Egypt', u':', u'overview', u'of', u'human', u'rights', u'issue', u'in', u'Egypt', u'.'], u'pos': [u'NNP', u':', u'NN', u'IN', u'JJ', u'NNS', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[26099, 26104], [26104, 26105], [26106, 26114], [26115, 26117], [26118, 26123], [26124, 26130], [26131, 26137], [26138, 26140], [26141, 26146], [26146, 26147]]}) 
answer: set([u'asia'])
candidate Sentence: (0.043329648673534393, {u'tokens': [u'Egypt', u'is', u'one', u'of', u'the', u'most', u'populous', u'countries', u'in', u'Africa', u'.'], u'lemmas': [u'Egypt', u'be', u'one', u'of', u'the', u'most', u'populous', u'country', u'in', u'Africa', u'.'], u'pos': [u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[432, 437], [438, 440], [441, 444], [445, 447], [448, 451], [452, 456], [457, 465], [466, 475], [476, 478], [479, 485], [485, 486]]}) 
answer: set([u'asia'])
candidate Sentence: (0.03542773425579071, {u'tokens': [u'Freedom', u'in', u'the', u'World', u'-', u'Egypt', u'.'], u'lemmas': [u'Freedom', u'in', u'the', u'world', u'-', u'Egypt', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u':', u'NNP', u'.'], u'char_offsets': [[27178, 27185], [27186, 27188], [27189, 27192], [27193, 27198], [27199, 27200], [27201, 27206], [27206, 27207]]}) 
answer: set([u'asia'])
candidate Sentence: (0.034889638423919678, {u'tokens': [u'When', u'the', u'union', u'was', u'dissolved', u',', u'the', u'current', u'official', u'name', u'of', u'Egypt', u'was', u'adopted', u',', u'the', u'Arab', u'Republic', u'of', u'Egypt', u'.'], u'lemmas': [u'when', u'the', u'union', u'be', u'dissolve', u',', u'the', u'current', u'official', u'name', u'of', u'Egypt', u'be', u'adopt', u',', u'the', u'Arab', u'Republic', u'of', u'Egypt', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'VBD', u'VBN', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'VBN', u',', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[16887, 16891], [16892, 16895], [16896, 16901], [16902, 16905], [16906, 16915], [16915, 16916], [16917, 16920], [16921, 16928], [16929, 16937], [16938, 16942], [16943, 16945], [16946, 16951], [16952, 16955], [16956, 16963], [16963, 16964], [16965, 16968], [16969, 16973], [16974, 16982], [16983, 16985], [16986, 16991], [16991, 16992]]}) 
answer: set([u'asia'])
candidate Sentence: (0.03361886739730835, {u'tokens': [u'Being', u'the', u'largest', u'religious', u'minority', u'in', u'Egypt', u',', u'Coptic', u'Christians', u'are', u'the', u'most', u'negatively', u'affected', u'community', u'.'], u'lemmas': [u'be', u'the', u'largest', u'religious', u'minority', u'in', u'Egypt', u',', u'Coptic', u'christian', u'be', u'the', u'most', u'negatively', u'affect', u'community', u'.'], u'pos': [u'VBG', u'DT', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNS', u'VBP', u'DT', u'RBS', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[41033, 41038], [41039, 41042], [41043, 41050], [41051, 41060], [41061, 41069], [41070, 41072], [41073, 41078], [41078, 41079], [41080, 41086], [41087, 41097], [41098, 41101], [41102, 41105], [41106, 41110], [41111, 41121], [41122, 41130], [41131, 41140], [41140, 41141]]}) 
answer: set([u'asia'])

Is Egypt in Asia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aa84878>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param94] ______________________________

param = (<src.question_processing.Question_parser instance at 0x10aa84c20>, (<src.tfidf.TF_IDF object at 0x1061d2fd0>, set(['elephant'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa84c20>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.71319055557250977, {u'tokens': [u'The', u'Asian', u'elephant', u'is', u'smaller', u'than', u'the', u'African', u'.'], u'lemmas': [u'the', u'asian', u'elephant', u'be', u'smaller', u'than', u'the', u'African', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'JJR', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[9644, 9647], [9648, 9653], [9654, 9662], [9663, 9665], [9666, 9673], [9674, 9678], [9679, 9682], [9683, 9690], [9690, 9691]]}) 
answer: set([u'larger'])
candidate Sentence: (0.63541829586029053, {u'tokens': [u'The', u'African', u'is', u'typically', u'larger', u'than', u'the', u'Asian', u'and', u'has', u'a', u'concave', u'back', u'.'], u'lemmas': [u'the', u'African', u'be', u'typically', u'larger', u'than', u'the', u'asian', u'and', u'have', u'a', u'concave', u'back', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'CC', u'VBZ', u'DT', u'NN', u'RB', u'.'], u'char_offsets': [[6146, 6149], [6150, 6157], [6158, 6160], [6161, 6170], [6171, 6177], [6178, 6182], [6183, 6186], [6187, 6192], [6193, 6196], [6197, 6200], [6201, 6202], [6203, 6210], [6211, 6215], [6215, 6216]]}) 
answer: set([])
candidate Sentence: (0.29226011037826538, {u'tokens': [u'There', u'are', u'three', u'living', u'species', u':', u'the', u'African', u'Bush', u'Elephant', u',', u'the', u'African', u'Forest', u'Elephant', u'-LRB-', u'until', u'recently', u'known', u'collectively', u'as', u'the', u'African', u'Elephant', u'-RRB-', u',', u'and', u'the', u'Asian', u'Elephant', u'-LRB-', u'also', u'known', u'as', u'the', u'Indian', u'Elephant', u'-RRB-', u'.'], u'lemmas': [u'there', u'be', u'three', u'live', u'species', u':', u'the', u'African', u'Bush', u'Elephant', u',', u'the', u'African', u'Forest', u'Elephant', u'-lrb-', u'until', u'recently', u'know', u'collectively', u'as', u'the', u'african', u'elephant', u'-rrb-', u',', u'and', u'the', u'asian', u'elephant', u'-lrb-', u'also', u'know', u'as', u'the', u'indian', u'elephant', u'-rrb-', u'.'], u'pos': [u'EX', u'VBP', u'CD', u'VBG', u'NNS', u':', u'DT', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'IN', u'RB', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'NN', u'-RRB-', u',', u'CC', u'DT', u'JJ', u'NN', u'-LRB-', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[189, 194], [195, 198], [199, 204], [205, 211], [212, 219], [219, 220], [221, 224], [225, 232], [233, 237], [238, 246], [246, 247], [248, 251], [252, 259], [260, 266], [267, 275], [276, 277], [277, 282], [283, 291], [292, 297], [298, 310], [311, 313], [314, 317], [318, 325], [326, 334], [334, 335], [335, 336], [337, 340], [341, 344], [345, 350], [351, 359], [360, 361], [361, 365], [366, 371], [372, 374], [375, 378], [379, 385], [386, 394], [394, 395], [395, 396]]}) 
answer: set([u'larger'])
candidate Sentence: (0.23298719525337219, {u'tokens': [u'African', u'elephants', u',', u'at', u'up', u'to', u'4', u'm', u'-LRB-', u'13', u'ft', u'1', u'in', u'-RRB-', u'tall', u'and', u'weighing', u'7500', u'kg', u'-LRB-', u'8.27', u'short', u'tons', u'-RRB-', u',', u'are', u'usually', u'larger', u'than', u'the', u'Asian', u'species', u'and', u'they', u'have', u'bigger', u'ears', u'.'], u'lemmas': [u'african', u'elephant', u',', u'at', u'up', u'to', u'4', u'm', u'-lrb-', u'13', u'ft', u'1', u'in', u'-rrb-', u'tall', u'and', u'weigh', u'7500', u'kg', u'-lrb-', u'8.27', u'short', u'ton', u'-rrb-', u',', u'be', u'usually', u'larger', u'than', u'the', u'asian', u'species', u'and', u'they', u'have', u'bigger', u'ear', u'.'], u'pos': [u'JJ', u'NNS', u',', u'IN', u'RB', u'TO', u'CD', u'NN', u'-LRB-', u'CD', u'NN', u'CD', u'IN', u'-RRB-', u'JJ', u'CC', u'VBG', u'CD', u'NN', u'-LRB-', u'CD', u'JJ', u'NNS', u'-RRB-', u',', u'VBP', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NNS', u'CC', u'PRP', u'VBP', u'JJR', u'NNS', u'.'], u'char_offsets': [[2825, 2832], [2833, 2842], [2842, 2843], [2844, 2846], [2847, 2849], [2850, 2852], [2853, 2854], [2855, 2856], [2857, 2858], [2858, 2860], [2861, 2863], [2864, 2865], [2866, 2868], [2868, 2869], [2870, 2874], [2875, 2878], [2879, 2887], [2888, 2892], [2893, 2895], [2896, 2897], [2897, 2901], [2902, 2907], [2908, 2912], [2912, 2913], [2913, 2914], [2915, 2918], [2919, 2926], [2928, 2934], [2935, 2939], [2940, 2943], [2944, 2949], [2950, 2957], [2958, 2961], [2962, 2966], [2967, 2971], [2972, 2978], [2979, 2983], [2983, 2984]]}) 
answer: set([])
candidate Sentence: (0.21009171009063721, {u'tokens': [u'African', u'elephants', u'are', u'more', u'temperamental', u'than', u'Asian', u'elephants', u',', u'but', u'are', u'easier', u'to', u'train', u'.'], u'lemmas': [u'african', u'elephant', u'be', u'more', u'temperamental', u'than', u'asian', u'elephant', u',', u'but', u'be', u'easier', u'to', u'train', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'RBR', u'JJ', u'IN', u'JJ', u'NNS', u',', u'CC', u'VBP', u'JJR', u'TO', u'VB', u'.'], u'char_offsets': [[45678, 45685], [45686, 45695], [45696, 45699], [45700, 45704], [45705, 45718], [45719, 45723], [45724, 45729], [45730, 45739], [45739, 45740], [45741, 45744], [45745, 45748], [45749, 45755], [45756, 45758], [45759, 45764], [45764, 45765]]}) 
answer: set([u'larger'])
candidate Sentence: (0.1991041898727417, {u'tokens': [u'Named', u'the', u'Borneo', u'pygmy', u'elephant', u',', u'it', u'is', u'smaller', u'and', u'tamer', u'than', u'other', u'Asian', u'elephants', u'.'], u'lemmas': [u'name', u'the', u'Borneo', u'pygmy', u'elephant', u',', u'it', u'be', u'smaller', u'and', u'tamer', u'than', u'other', u'asian', u'elephant', u'.'], u'pos': [u'VBN', u'DT', u'NNP', u'NN', u'NN', u',', u'PRP', u'VBZ', u'JJR', u'CC', u'JJR', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[12717, 12722], [12723, 12726], [12727, 12733], [12734, 12739], [12740, 12748], [12748, 12749], [12750, 12752], [12753, 12755], [12756, 12763], [12764, 12767], [12768, 12773], [12774, 12778], [12779, 12784], [12785, 12790], [12791, 12800], [12800, 12801]]}) 
answer: set([u'larger', u'african'])
candidate Sentence: (0.19104759395122528, {u'tokens': [u'Normally', u',', u'the', u'skin', u'of', u'an', u'Asian', u'is', u'covered', u'with', u'more', u'hair', u'than', u'its', u'African', u'counterpart', u'.'], u'lemmas': [u'normally', u',', u'the', u'skin', u'of', u'a', u'asian', u'be', u'cover', u'with', u'more', u'hair', u'than', u'its', u'african', u'counterpart', u'.'], u'pos': [u'RB', u',', u'DT', u'NN', u'IN', u'DT', u'JJ', u'VBZ', u'VBN', u'IN', u'JJR', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[18975, 18983], [18983, 18984], [18985, 18988], [18989, 18993], [18994, 18996], [18997, 18999], [19000, 19005], [19006, 19008], [19009, 19016], [19017, 19021], [19022, 19026], [19027, 19031], [19032, 19036], [19037, 19040], [19041, 19048], [19049, 19060], [19060, 19061]]}) 
answer: set([u'larger'])
candidate Sentence: (0.18414197862148285, {u'tokens': [u'Africans', u"'", u'ears', u'are', u'much', u'larger', u'and', u'are', u'shaped', u'like', u'the', u'continent', u'of', u'their', u'origin', u'.'], u'lemmas': [u'african', u"'", u'ear', u'be', u'much', u'larger', u'and', u'be', u'shape', u'like', u'the', u'continent', u'of', u'they', u'origin', u'.'], u'pos': [u'NNS', u'POS', u'NNS', u'VBP', u'RB', u'JJR', u'CC', u'VBP', u'VBN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[6064, 6072], [6072, 6073], [6074, 6078], [6079, 6082], [6083, 6087], [6088, 6094], [6095, 6098], [6099, 6102], [6103, 6109], [6110, 6114], [6115, 6118], [6119, 6128], [6129, 6131], [6132, 6137], [6138, 6144], [6144, 6145]]}) 
answer: set([u'asian'])
candidate Sentence: (0.18172319233417511, {u'tokens': [u'It', u'also', u'has', u'relatively', u'larger', u'ears', u',', u'longer', u'tail', u'and', u'straighter', u'tusks', u'.'], u'lemmas': [u'it', u'also', u'have', u'relatively', u'larger', u'ear', u',', u'longer', u'tail', u'and', u'straighter', u'tusk', u'.'], u'pos': [u'PRP', u'RB', u'VBZ', u'RB', u'JJR', u'NNS', u',', u'JJR', u'NN', u'CC', u'RBR', u'NNS', u'.'], u'char_offsets': [[12802, 12804], [12805, 12809], [12810, 12813], [12814, 12824], [12825, 12831], [12832, 12836], [12836, 12837], [12838, 12844], [12845, 12849], [12850, 12853], [12854, 12864], [12865, 12870], [12870, 12871]]}) 
answer: set([u'asian', u'african'])
candidate Sentence: (0.17743965983390808, {u'tokens': [u'Asian', u'males', u'can', u'have', u'tusks', u'as', u'long', u'as', u'the', u'much', u'larger', u'Africans', u',', u'but', u'they', u'are', u'usually', u'much', u'slimmer', u'and', u'lighter', u';', u'the', u'heaviest', u'recorded', u'is', u'39', u'kg', u'-LRB-', u'86', u'lb', u'-RRB-', u'.'], u'lemmas': [u'asian', u'male', u'can', u'have', u'tusk', u'as', u'long', u'as', u'the', u'much', u'larger', u'african', u',', u'but', u'they', u'be', u'usually', u'much', u'slimmer', u'and', u'lighter', u';', u'the', u'heaviest', u'record', u'be', u'39', u'kg', u'-lrb-', u'86', u'lb', u'-rrb-', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'NNS', u'RB', u'RB', u'IN', u'DT', u'JJ', u'JJR', u'NNS', u',', u'CC', u'PRP', u'VBP', u'RB', u'JJ', u'JJR', u'CC', u'JJR', u':', u'DT', u'JJS', u'VBN', u'VBZ', u'CD', u'NN', u'-LRB-', u'CD', u'NN', u'-RRB-', u'.'], u'char_offsets': [[16092, 16097], [16098, 16103], [16104, 16107], [16108, 16112], [16113, 16118], [16119, 16121], [16122, 16126], [16127, 16129], [16130, 16133], [16134, 16138], [16139, 16145], [16146, 16154], [16154, 16155], [16156, 16159], [16160, 16164], [16165, 16168], [16169, 16176], [16177, 16181], [16182, 16189], [16190, 16193], [16194, 16201], [16201, 16202], [16203, 16206], [16207, 16215], [16216, 16224], [16225, 16227], [16228, 16230], [16231, 16233], [16234, 16235], [16235, 16237], [16238, 16240], [16240, 16241], [16241, 16242]]}) 
answer: set([])

Is the Asian elephant larger than the African?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa84c20>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param113] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa881b8>, (<src.tfidf.TF_IDF object at 0x105acbf50>, set(['finland'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa881b8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32365822792053223, {u'tokens': [u'It', u'has', u'borders', u'with', u'Sweden', u'to', u'the', u'west', u',', u'Russia', u'to', u'the', u'east', u',', u'and', u'Norway', u'to', u'the', u'north', u',', u'while', u'Estonia', u'lies', u'to', u'its', u'south', u'across', u'the', u'Gulf', u'of', u'Finland', u'.'], u'lemmas': [u'it', u'have', u'border', u'with', u'Sweden', u'to', u'the', u'west', u',', u'Russia', u'to', u'the', u'east', u',', u'and', u'Norway', u'to', u'the', u'north', u',', u'while', u'Estonia', u'lie', u'to', u'its', u'south', u'across', u'the', u'Gulf', u'of', u'Finland', u'.'], u'pos': [u'PRP', u'VBZ', u'NNS', u'IN', u'NNP', u'TO', u'DT', u'NN', u',', u'NNP', u'TO', u'DT', u'JJ', u',', u'CC', u'NNP', u'TO', u'DT', u'NN', u',', u'IN', u'NNP', u'VBZ', u'TO', u'PRP$', u'JJ', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[296, 298], [299, 302], [303, 310], [311, 315], [316, 322], [323, 325], [326, 329], [330, 334], [334, 335], [336, 342], [343, 345], [346, 349], [350, 354], [354, 355], [356, 359], [360, 366], [367, 369], [370, 373], [374, 379], [379, 380], [381, 386], [387, 394], [395, 399], [400, 402], [403, 406], [407, 412], [413, 419], [420, 423], [424, 428], [429, 431], [432, 439], [439, 440]]}) 
answer: set([])
candidate Sentence: (0.2712213397026062, {u'tokens': [u'Finland', u'has', u'good', u'relations', u'with', u'all', u'its', u'neighbours', u',', u'Sweden', u',', u'Norway', u',', u'Russia', u'and', u'Estonia', u',', u'and', u'is', u'not', u'involved', u'in', u'international', u'conflicts', u'or', u'border', u'disputes', u'.'], u'lemmas': [u'Finland', u'have', u'good', u'relation', u'with', u'all', u'its', u'neighbour', u',', u'Sweden', u',', u'Norway', u',', u'Russia', u'and', u'Estonia', u',', u'and', u'be', u'not', u'involve', u'in', u'international', u'conflict', u'or', u'border', u'dispute', u'.'], u'pos': [u'NNP', u'VBZ', u'JJ', u'NNS', u'IN', u'DT', u'PRP$', u'NNS', u',', u'NNP', u',', u'NNP', u',', u'NNP', u'CC', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[33348, 33355], [33356, 33359], [33360, 33364], [33365, 33374], [33375, 33379], [33380, 33383], [33384, 33387], [33388, 33398], [33398, 33399], [33400, 33406], [33406, 33407], [33408, 33414], [33414, 33415], [33416, 33422], [33423, 33426], [33427, 33434], [33434, 33435], [33436, 33439], [33440, 33442], [33443, 33446], [33447, 33455], [33456, 33458], [33459, 33472], [33473, 33482], [33483, 33485], [33486, 33492], [33493, 33501], [33501, 33502]]}) 
answer: set([])
candidate Sentence: (0.22139370441436768, {u'tokens': [u'This', u'makes', u'it', u',', u'after', u'Norway', u'and', u'Iceland', u',', u'the', u'most', u'sparsely', u'populated', u'country', u'in', u'Europe', u'.'], u'lemmas': [u'this', u'make', u'it', u',', u'after', u'Norway', u'and', u'Iceland', u',', u'the', u'most', u'sparsely', u'populated', u'country', u'in', u'Europe', u'.'], u'pos': [u'DT', u'VBZ', u'PRP', u',', u'IN', u'NNP', u'CC', u'NNP', u',', u'DT', u'RBS', u'RB', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[20149, 20153], [20154, 20159], [20160, 20162], [20162, 20163], [20164, 20169], [20170, 20176], [20177, 20180], [20181, 20188], [20188, 20189], [20190, 20193], [20194, 20198], [20199, 20207], [20208, 20217], [20218, 20225], [20226, 20228], [20229, 20235], [20235, 20236]]}) 
answer: set([u'border'])
candidate Sentence: (0.21207910776138306, {u'tokens': [u'The', u'Finnish', u'landscape', u'is', u'mostly', u'flat', u'with', u'few', u'hills', u'and', u'its', u'highest', u'point', u',', u'the', u'Halti', u'at', u'1,324', u'metres', u',', u'is', u'found', u'in', u'the', u'extreme', u'north', u'of', u'Lapland', u'at', u'the', u'border', u'between', u'Finland', u'and', u'Norway', u'.'], u'lemmas': [u'the', u'finnish', u'landscape', u'be', u'mostly', u'flat', u'with', u'few', u'hill', u'and', u'its', u'highest', u'point', u',', u'the', u'Halti', u'at', u'1,324', u'metre', u',', u'be', u'find', u'in', u'the', u'extreme', u'north', u'of', u'Lapland', u'at', u'the', u'border', u'between', u'Finland', u'and', u'Norway', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'PRP$', u'JJS', u'NN', u',', u'DT', u'NNP', u'IN', u'CD', u'NNS', u',', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[12999, 13002], [13003, 13010], [13011, 13020], [13021, 13023], [13024, 13030], [13031, 13035], [13036, 13040], [13041, 13044], [13045, 13050], [13051, 13054], [13055, 13058], [13059, 13066], [13067, 13072], [13072, 13073], [13074, 13077], [13078, 13083], [13084, 13086], [13087, 13092], [13093, 13099], [13099, 13100], [13101, 13103], [13104, 13109], [13110, 13112], [13113, 13116], [13117, 13124], [13125, 13130], [13131, 13133], [13134, 13141], [13142, 13144], [13145, 13148], [13149, 13155], [13156, 13163], [13164, 13171], [13172, 13175], [13176, 13182], [13182, 13183]]}) 
answer: set([])
candidate Sentence: (0.20948408544063568, {u'tokens': [u'Fossil', u'fuels', u'are', u',', u'however', u',', u'all', u'imported', u',', u'because', u'Finland', u'does', u"n't", u'have', u'any', u'fossil', u'fuel', u'sources', u',', u'unlike', u'neighboring', u'Norway', u'with', u'oil', u'and', u'Estonia', u'with', u'oil', u'shale', u'.'], u'lemmas': [u'fossil', u'fuel', u'be', u',', u'however', u',', u'all', u'import', u',', u'because', u'Finland', u'do', u'not', u'have', u'any', u'fossil', u'fuel', u'source', u',', u'unlike', u'neighbor', u'Norway', u'with', u'oil', u'and', u'Estonia', u'with', u'oil', u'shale', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u',', u'RB', u',', u'DT', u'VBN', u',', u'IN', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'NNS', u',', u'IN', u'VBG', u'NNP', u'IN', u'NN', u'CC', u'NNP', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[37578, 37584], [37585, 37590], [37591, 37594], [37594, 37595], [37596, 37603], [37603, 37604], [37605, 37608], [37609, 37617], [37617, 37618], [37619, 37626], [37627, 37634], [37635, 37639], [37639, 37642], [37643, 37647], [37648, 37651], [37652, 37658], [37659, 37663], [37664, 37671], [37671, 37672], [37673, 37679], [37680, 37691], [37692, 37698], [37699, 37703], [37704, 37707], [37708, 37711], [37712, 37719], [37720, 37724], [37725, 37728], [37729, 37734], [37734, 37735]]}) 
answer: set([u'border'])
candidate Sentence: (0.19990456104278564, {u'tokens': [u'It', u'has', u'thus', u'done', u'pioneering', u'work', u'on', u'developing', u'more', u'efficient', u'ways', u'of', u'using', u'energy', u'.'], u'lemmas': [u'it', u'have', u'thus', u'do', u'pioneering', u'work', u'on', u'develop', u'more', u'efficient', u'way', u'of', u'use', u'energy', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'VBN', u'JJ', u'NN', u'IN', u'VBG', u'RBR', u'JJ', u'NNS', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[35677, 35679], [35680, 35683], [35684, 35688], [35689, 35693], [35694, 35704], [35705, 35709], [35710, 35712], [35713, 35723], [35724, 35728], [35729, 35738], [35739, 35743], [35744, 35746], [35747, 35752], [35753, 35759], [35759, 35760]]}) 
answer: set([u'border', u'norway'])
candidate Sentence: (0.18639974296092987, {u'tokens': [u'Black', u'borders', u'refer', u'to', u'municipalities', u',', u'red', u'to', u'regions', u'.'], u'lemmas': [u'black', u'border', u'refer', u'to', u'municipality', u',', u'red', u'to', u'region', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'TO', u'NNS', u',', u'JJ', u'TO', u'NNS', u'.'], u'char_offsets': [[18552, 18557], [18558, 18565], [18566, 18571], [18572, 18574], [18575, 18589], [18589, 18590], [18591, 18594], [18595, 18597], [18598, 18605], [18605, 18606]]}) 
answer: set([u'norway'])
candidate Sentence: (0.18181492388248444, {u'tokens': [u'The', u'Finnish', u'Russian', u'border', u'was', u'determined', u'by', u'the', u'Treaty', u'of', u'Tartu', u'in', u'1920', u',', u'largely', u'following', u'the', u'historic', u'border', u'but', u'granting', u'Pechenga', u'-LRB-', u'Finnish', u':', u'Petsamo', u'-RRB-', u'and', u'its', u'Barents', u'Sea', u'harbour', u'to', u'Finland', u'.'], u'lemmas': [u'the', u'finnish', u'russian', u'border', u'be', u'determine', u'by', u'the', u'Treaty', u'of', u'Tartu', u'in', u'1920', u',', u'largely', u'follow', u'the', u'historic', u'border', u'but', u'grant', u'Pechenga', u'-lrb-', u'finnish', u':', u'Petsamo', u'-rrb-', u'and', u'its', u'Barents', u'Sea', u'harbour', u'to', u'Finland', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'IN', u'CD', u',', u'RB', u'VBG', u'DT', u'JJ', u'NN', u'CC', u'VBG', u'NNP', u'-LRB-', u'JJ', u':', u'NNP', u'-RRB-', u'CC', u'PRP$', u'NNP', u'NNP', u'VBP', u'TO', u'NNP', u'.'], u'char_offsets': [[8231, 8234], [8235, 8242], [8243, 8250], [8251, 8257], [8258, 8261], [8262, 8272], [8273, 8275], [8276, 8279], [8280, 8286], [8287, 8289], [8290, 8295], [8296, 8298], [8299, 8303], [8303, 8304], [8305, 8312], [8313, 8322], [8323, 8326], [8327, 8335], [8336, 8342], [8343, 8346], [8347, 8355], [8356, 8364], [8365, 8366], [8366, 8373], [8373, 8374], [8375, 8382], [8382, 8383], [8384, 8387], [8388, 8391], [8392, 8399], [8400, 8403], [8404, 8411], [8412, 8414], [8415, 8422], [8422, 8423]]}) 
answer: set([u'norway'])
candidate Sentence: (0.17886349558830261, {u'tokens': [u'Consequently', u',', u'Finland', u'has', u'less', u'hydropower', u'capacity', u'than', u'Sweden', u'or', u'Norway', u'.'], u'lemmas': [u'consequently', u',', u'Finland', u'have', u'less', u'hydropower', u'capacity', u'than', u'Sweden', u'or', u'Norway', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBZ', u'JJR', u'NN', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[36278, 36290], [36290, 36291], [36292, 36299], [36300, 36303], [36304, 36308], [36309, 36319], [36320, 36328], [36329, 36333], [36334, 36340], [36341, 36343], [36344, 36350], [36350, 36351]]}) 
answer: set([u'border'])
candidate Sentence: (0.17752674221992493, {u'tokens': [u'However', u',', u'Finland', u'maintained', u'a', u'democratic', u'government', u'and', u'a', u'market', u'economy', u'unlike', u'most', u'other', u'countries', u'bordering', u'the', u'Soviet', u'Union', u'.'], u'lemmas': [u'however', u',', u'Finland', u'maintain', u'a', u'democratic', u'government', u'and', u'a', u'market', u'economy', u'unlike', u'most', u'other', u'country', u'border', u'the', u'Soviet', u'Union', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'CC', u'DT', u'NN', u'NN', u'IN', u'JJS', u'JJ', u'NNS', u'VBG', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[10783, 10790], [10790, 10791], [10792, 10799], [10800, 10810], [10811, 10812], [10813, 10823], [10824, 10834], [10835, 10838], [10839, 10840], [10841, 10847], [10848, 10855], [10856, 10862], [10863, 10867], [10868, 10873], [10874, 10883], [10884, 10893], [10894, 10897], [10898, 10904], [10905, 10910], [10910, 10911]]}) 
answer: set([u'norway'])

Does it have a border with Norway?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa881b8>.answer
_____________________________ test_yesno[param114] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa88200>, (<src.tfidf.TF_IDF object at 0x105acbf50>, set(['finland'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32365822792053223, {u'tokens': [u'It', u'has', u'borders', u'with', u'Sweden', u'to', u'the', u'west', u',', u'Russia', u'to', u'the', u'east', u',', u'and', u'Norway', u'to', u'the', u'north', u',', u'while', u'Estonia', u'lies', u'to', u'its', u'south', u'across', u'the', u'Gulf', u'of', u'Finland', u'.'], u'lemmas': [u'it', u'have', u'border', u'with', u'Sweden', u'to', u'the', u'west', u',', u'Russia', u'to', u'the', u'east', u',', u'and', u'Norway', u'to', u'the', u'north', u',', u'while', u'Estonia', u'lie', u'to', u'its', u'south', u'across', u'the', u'Gulf', u'of', u'Finland', u'.'], u'pos': [u'PRP', u'VBZ', u'NNS', u'IN', u'NNP', u'TO', u'DT', u'NN', u',', u'NNP', u'TO', u'DT', u'JJ', u',', u'CC', u'NNP', u'TO', u'DT', u'NN', u',', u'IN', u'NNP', u'VBZ', u'TO', u'PRP$', u'JJ', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[296, 298], [299, 302], [303, 310], [311, 315], [316, 322], [323, 325], [326, 329], [330, 334], [334, 335], [336, 342], [343, 345], [346, 349], [350, 354], [354, 355], [356, 359], [360, 366], [367, 369], [370, 373], [374, 379], [379, 380], [381, 386], [387, 394], [395, 399], [400, 402], [403, 406], [407, 412], [413, 419], [420, 423], [424, 428], [429, 431], [432, 439], [439, 440]]}) 
answer: set([])
candidate Sentence: (0.2712213397026062, {u'tokens': [u'Finland', u'has', u'good', u'relations', u'with', u'all', u'its', u'neighbours', u',', u'Sweden', u',', u'Norway', u',', u'Russia', u'and', u'Estonia', u',', u'and', u'is', u'not', u'involved', u'in', u'international', u'conflicts', u'or', u'border', u'disputes', u'.'], u'lemmas': [u'Finland', u'have', u'good', u'relation', u'with', u'all', u'its', u'neighbour', u',', u'Sweden', u',', u'Norway', u',', u'Russia', u'and', u'Estonia', u',', u'and', u'be', u'not', u'involve', u'in', u'international', u'conflict', u'or', u'border', u'dispute', u'.'], u'pos': [u'NNP', u'VBZ', u'JJ', u'NNS', u'IN', u'DT', u'PRP$', u'NNS', u',', u'NNP', u',', u'NNP', u',', u'NNP', u'CC', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[33348, 33355], [33356, 33359], [33360, 33364], [33365, 33374], [33375, 33379], [33380, 33383], [33384, 33387], [33388, 33398], [33398, 33399], [33400, 33406], [33406, 33407], [33408, 33414], [33414, 33415], [33416, 33422], [33423, 33426], [33427, 33434], [33434, 33435], [33436, 33439], [33440, 33442], [33443, 33446], [33447, 33455], [33456, 33458], [33459, 33472], [33473, 33482], [33483, 33485], [33486, 33492], [33493, 33501], [33501, 33502]]}) 
answer: set([])
candidate Sentence: (0.22139370441436768, {u'tokens': [u'This', u'makes', u'it', u',', u'after', u'Norway', u'and', u'Iceland', u',', u'the', u'most', u'sparsely', u'populated', u'country', u'in', u'Europe', u'.'], u'lemmas': [u'this', u'make', u'it', u',', u'after', u'Norway', u'and', u'Iceland', u',', u'the', u'most', u'sparsely', u'populated', u'country', u'in', u'Europe', u'.'], u'pos': [u'DT', u'VBZ', u'PRP', u',', u'IN', u'NNP', u'CC', u'NNP', u',', u'DT', u'RBS', u'RB', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[20149, 20153], [20154, 20159], [20160, 20162], [20162, 20163], [20164, 20169], [20170, 20176], [20177, 20180], [20181, 20188], [20188, 20189], [20190, 20193], [20194, 20198], [20199, 20207], [20208, 20217], [20218, 20225], [20226, 20228], [20229, 20235], [20235, 20236]]}) 
answer: set([u'border'])
candidate Sentence: (0.21207910776138306, {u'tokens': [u'The', u'Finnish', u'landscape', u'is', u'mostly', u'flat', u'with', u'few', u'hills', u'and', u'its', u'highest', u'point', u',', u'the', u'Halti', u'at', u'1,324', u'metres', u',', u'is', u'found', u'in', u'the', u'extreme', u'north', u'of', u'Lapland', u'at', u'the', u'border', u'between', u'Finland', u'and', u'Norway', u'.'], u'lemmas': [u'the', u'finnish', u'landscape', u'be', u'mostly', u'flat', u'with', u'few', u'hill', u'and', u'its', u'highest', u'point', u',', u'the', u'Halti', u'at', u'1,324', u'metre', u',', u'be', u'find', u'in', u'the', u'extreme', u'north', u'of', u'Lapland', u'at', u'the', u'border', u'between', u'Finland', u'and', u'Norway', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'PRP$', u'JJS', u'NN', u',', u'DT', u'NNP', u'IN', u'CD', u'NNS', u',', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[12999, 13002], [13003, 13010], [13011, 13020], [13021, 13023], [13024, 13030], [13031, 13035], [13036, 13040], [13041, 13044], [13045, 13050], [13051, 13054], [13055, 13058], [13059, 13066], [13067, 13072], [13072, 13073], [13074, 13077], [13078, 13083], [13084, 13086], [13087, 13092], [13093, 13099], [13099, 13100], [13101, 13103], [13104, 13109], [13110, 13112], [13113, 13116], [13117, 13124], [13125, 13130], [13131, 13133], [13134, 13141], [13142, 13144], [13145, 13148], [13149, 13155], [13156, 13163], [13164, 13171], [13172, 13175], [13176, 13182], [13182, 13183]]}) 
answer: set([])
candidate Sentence: (0.20948408544063568, {u'tokens': [u'Fossil', u'fuels', u'are', u',', u'however', u',', u'all', u'imported', u',', u'because', u'Finland', u'does', u"n't", u'have', u'any', u'fossil', u'fuel', u'sources', u',', u'unlike', u'neighboring', u'Norway', u'with', u'oil', u'and', u'Estonia', u'with', u'oil', u'shale', u'.'], u'lemmas': [u'fossil', u'fuel', u'be', u',', u'however', u',', u'all', u'import', u',', u'because', u'Finland', u'do', u'not', u'have', u'any', u'fossil', u'fuel', u'source', u',', u'unlike', u'neighbor', u'Norway', u'with', u'oil', u'and', u'Estonia', u'with', u'oil', u'shale', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u',', u'RB', u',', u'DT', u'VBN', u',', u'IN', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'NNS', u',', u'IN', u'VBG', u'NNP', u'IN', u'NN', u'CC', u'NNP', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[37578, 37584], [37585, 37590], [37591, 37594], [37594, 37595], [37596, 37603], [37603, 37604], [37605, 37608], [37609, 37617], [37617, 37618], [37619, 37626], [37627, 37634], [37635, 37639], [37639, 37642], [37643, 37647], [37648, 37651], [37652, 37658], [37659, 37663], [37664, 37671], [37671, 37672], [37673, 37679], [37680, 37691], [37692, 37698], [37699, 37703], [37704, 37707], [37708, 37711], [37712, 37719], [37720, 37724], [37725, 37728], [37729, 37734], [37734, 37735]]}) 
answer: set([u'border'])
candidate Sentence: (0.19990456104278564, {u'tokens': [u'It', u'has', u'thus', u'done', u'pioneering', u'work', u'on', u'developing', u'more', u'efficient', u'ways', u'of', u'using', u'energy', u'.'], u'lemmas': [u'it', u'have', u'thus', u'do', u'pioneering', u'work', u'on', u'develop', u'more', u'efficient', u'way', u'of', u'use', u'energy', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'VBN', u'JJ', u'NN', u'IN', u'VBG', u'RBR', u'JJ', u'NNS', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[35677, 35679], [35680, 35683], [35684, 35688], [35689, 35693], [35694, 35704], [35705, 35709], [35710, 35712], [35713, 35723], [35724, 35728], [35729, 35738], [35739, 35743], [35744, 35746], [35747, 35752], [35753, 35759], [35759, 35760]]}) 
answer: set([u'border', u'norway'])
candidate Sentence: (0.18639974296092987, {u'tokens': [u'Black', u'borders', u'refer', u'to', u'municipalities', u',', u'red', u'to', u'regions', u'.'], u'lemmas': [u'black', u'border', u'refer', u'to', u'municipality', u',', u'red', u'to', u'region', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'TO', u'NNS', u',', u'JJ', u'TO', u'NNS', u'.'], u'char_offsets': [[18552, 18557], [18558, 18565], [18566, 18571], [18572, 18574], [18575, 18589], [18589, 18590], [18591, 18594], [18595, 18597], [18598, 18605], [18605, 18606]]}) 
answer: set([u'norway'])
candidate Sentence: (0.18181492388248444, {u'tokens': [u'The', u'Finnish', u'Russian', u'border', u'was', u'determined', u'by', u'the', u'Treaty', u'of', u'Tartu', u'in', u'1920', u',', u'largely', u'following', u'the', u'historic', u'border', u'but', u'granting', u'Pechenga', u'-LRB-', u'Finnish', u':', u'Petsamo', u'-RRB-', u'and', u'its', u'Barents', u'Sea', u'harbour', u'to', u'Finland', u'.'], u'lemmas': [u'the', u'finnish', u'russian', u'border', u'be', u'determine', u'by', u'the', u'Treaty', u'of', u'Tartu', u'in', u'1920', u',', u'largely', u'follow', u'the', u'historic', u'border', u'but', u'grant', u'Pechenga', u'-lrb-', u'finnish', u':', u'Petsamo', u'-rrb-', u'and', u'its', u'Barents', u'Sea', u'harbour', u'to', u'Finland', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'IN', u'CD', u',', u'RB', u'VBG', u'DT', u'JJ', u'NN', u'CC', u'VBG', u'NNP', u'-LRB-', u'JJ', u':', u'NNP', u'-RRB-', u'CC', u'PRP$', u'NNP', u'NNP', u'VBP', u'TO', u'NNP', u'.'], u'char_offsets': [[8231, 8234], [8235, 8242], [8243, 8250], [8251, 8257], [8258, 8261], [8262, 8272], [8273, 8275], [8276, 8279], [8280, 8286], [8287, 8289], [8290, 8295], [8296, 8298], [8299, 8303], [8303, 8304], [8305, 8312], [8313, 8322], [8323, 8326], [8327, 8335], [8336, 8342], [8343, 8346], [8347, 8355], [8356, 8364], [8365, 8366], [8366, 8373], [8373, 8374], [8375, 8382], [8382, 8383], [8384, 8387], [8388, 8391], [8392, 8399], [8400, 8403], [8404, 8411], [8412, 8414], [8415, 8422], [8422, 8423]]}) 
answer: set([u'norway'])
candidate Sentence: (0.17886349558830261, {u'tokens': [u'Consequently', u',', u'Finland', u'has', u'less', u'hydropower', u'capacity', u'than', u'Sweden', u'or', u'Norway', u'.'], u'lemmas': [u'consequently', u',', u'Finland', u'have', u'less', u'hydropower', u'capacity', u'than', u'Sweden', u'or', u'Norway', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBZ', u'JJR', u'NN', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[36278, 36290], [36290, 36291], [36292, 36299], [36300, 36303], [36304, 36308], [36309, 36319], [36320, 36328], [36329, 36333], [36334, 36340], [36341, 36343], [36344, 36350], [36350, 36351]]}) 
answer: set([u'border'])
candidate Sentence: (0.17752674221992493, {u'tokens': [u'However', u',', u'Finland', u'maintained', u'a', u'democratic', u'government', u'and', u'a', u'market', u'economy', u'unlike', u'most', u'other', u'countries', u'bordering', u'the', u'Soviet', u'Union', u'.'], u'lemmas': [u'however', u',', u'Finland', u'maintain', u'a', u'democratic', u'government', u'and', u'a', u'market', u'economy', u'unlike', u'most', u'other', u'country', u'border', u'the', u'Soviet', u'Union', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'CC', u'DT', u'NN', u'NN', u'IN', u'JJS', u'JJ', u'NNS', u'VBG', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[10783, 10790], [10790, 10791], [10792, 10799], [10800, 10810], [10811, 10812], [10813, 10823], [10824, 10834], [10835, 10838], [10839, 10840], [10841, 10847], [10848, 10855], [10856, 10862], [10863, 10867], [10868, 10873], [10874, 10883], [10884, 10893], [10894, 10897], [10898, 10904], [10905, 10910], [10910, 10911]]}) 
answer: set([u'norway'])

Does it have a border with Norway?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88200>.answer
_____________________________ test_yesno[param119] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa88368>, (<src.tfidf.TF_IDF object at 0x105acbf50>, set(['finland'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('INVALID')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------

According to Reader's Digest, is Finland best for living?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

INVALID
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('INVALID')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88368>.answer
_____________________________ test_yesno[param120] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa883b0>, (<src.tfidf.TF_IDF object at 0x105acbf50>, set(['finland'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('INVALID')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa883b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------

According to Reader's Digest, is Finland best for living?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

INVALID
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('INVALID')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa883b0>.answer
_____________________________ test_yesno[param125] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa88518>, (<src.tfidf.TF_IDF object at 0x1061d2e50>, set(['ford', 'gerald'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88518>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31250560283660889, {u'tokens': [u'In', u'1961', u',', u'the', u'U.S.', u'House', u'membership', u'voted', u'Ford', u'a', u'special', u'award', u'as', u'a', u'``', u'Congressman', u"'s", u'Congressman', u"''", u'that', u'praised', u'his', u'committee', u'work', u'on', u'military', u'budgets', u'.'], u'lemmas': [u'in', u'1961', u',', u'the', u'U.S.', u'House', u'membership', u'vote', u'Ford', u'a', u'special', u'award', u'as', u'a', u'``', u'Congressman', u"'s", u'congressman', u"''", u'that', u'praise', u'he', u'committee', u'work', u'on', u'military', u'budget', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NNP', u'NNP', u'NN', u'VBD', u'NNP', u'DT', u'JJ', u'NN', u'IN', u'DT', u'``', u'NNP', u'POS', u'NN', u"''", u'WDT', u'VBD', u'PRP$', u'NN', u'NN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[16286, 16288], [16289, 16293], [16293, 16294], [16295, 16298], [16299, 16303], [16304, 16309], [16310, 16320], [16321, 16326], [16327, 16331], [16332, 16333], [16334, 16341], [16342, 16347], [16348, 16350], [16351, 16352], [16353, 16354], [16354, 16365], [16365, 16367], [16368, 16379], [16379, 16380], [16381, 16385], [16386, 16393], [16394, 16397], [16398, 16407], [16408, 16412], [16413, 16415], [16416, 16424], [16425, 16432], [16432, 16433]]}) 
answer: set([u'call', u'get'])
candidate Sentence: (0.1580236554145813, {u'tokens': [u'Many', u'in', u'the', u'press', u'jokingly', u'called', u'this', u'``', u'The', u'Ev', u'and', u'Jerry', u'Show', u"''", u'.'], u'lemmas': [u'many', u'in', u'the', u'press', u'jokingly', u'call', u'this', u'``', u'the', u'ev', u'and', u'Jerry', u'Show', u"''", u'.'], u'pos': [u'JJ', u'IN', u'DT', u'NN', u'RB', u'VBN', u'DT', u'``', u'DT', u'NN', u'CC', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[20281, 20285], [20286, 20288], [20289, 20292], [20293, 20298], [20299, 20307], [20308, 20314], [20315, 20319], [20320, 20321], [20321, 20324], [20325, 20327], [20328, 20331], [20332, 20337], [20338, 20342], [20342, 20343], [20343, 20344]]}) 
answer: set([u'congressman', u'award', u'get'])
candidate Sentence: (0.13844417035579681, {u'tokens': [u'In', u'subsequent', u'years', u',', u'Ford', u'received', u'the', u'Distinguished', u'Eagle', u'Scout', u'Award', u'in', u'May', u'1970', u'and', u'Silver', u'Buffalo', u'Award', u'from', u'the', u'Boy', u'Scouts', u'of', u'America', u'.'], u'lemmas': [u'in', u'subsequent', u'year', u',', u'Ford', u'receive', u'the', u'distinguish', u'Eagle', u'Scout', u'award', u'in', u'May', u'1970', u'and', u'silver', u'Buffalo', u'award', u'from', u'the', u'boy', u'scout', u'of', u'America', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'DT', u'VBN', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'CD', u'CC', u'NN', u'NNP', u'NN', u'IN', u'DT', u'NN', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[4343, 4345], [4346, 4356], [4357, 4362], [4362, 4363], [4364, 4368], [4369, 4377], [4378, 4381], [4382, 4395], [4396, 4401], [4402, 4407], [4408, 4413], [4414, 4416], [4417, 4420], [4421, 4425], [4426, 4429], [4430, 4436], [4437, 4444], [4445, 4450], [4451, 4455], [4456, 4459], [4460, 4463], [4464, 4470], [4471, 4473], [4474, 4481], [4481, 4482]]}) 
answer: set([u'congressman', u'call', u'get'])
candidate Sentence: (0.1330542266368866, {u'tokens': [u'In', u'2001', u',', u'the', u'John', u'F.', u'Kennedy', u'Library', u'Foundation', u'awarded', u'the', u'John', u'F.', u'Kennedy', u'Profile', u'in', u'Courage', u'Award', u'to', u'Ford', u'for', u'his', u'pardon', u'of', u'Nixon', u'.'], u'lemmas': [u'in', u'2001', u',', u'the', u'John', u'F.', u'Kennedy', u'Library', u'Foundation', u'award', u'the', u'John', u'F.', u'Kennedy', u'Profile', u'in', u'Courage', u'award', u'to', u'Ford', u'for', u'he', u'pardon', u'of', u'Nixon', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NN', u'TO', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[26996, 26998], [26999, 27003], [27003, 27004], [27005, 27008], [27009, 27013], [27014, 27016], [27017, 27024], [27025, 27032], [27033, 27043], [27044, 27051], [27052, 27055], [27056, 27060], [27061, 27063], [27064, 27071], [27072, 27079], [27080, 27082], [27083, 27090], [27091, 27096], [27097, 27099], [27100, 27104], [27105, 27108], [27109, 27112], [27113, 27119], [27120, 27122], [27123, 27128], [27128, 27129]]}) 
answer: set([u'congressman', u'call', u'get'])
candidate Sentence: (0.13142585754394531, {u'tokens': [u'She', u'began', u'calling', u'her', u'son', u'Gerald', u'Rudolff', u'Ford', u',', u'Jr.', u'.'], u'lemmas': [u'she', u'begin', u'call', u'she', u'son', u'Gerald', u'Rudolff', u'Ford', u',', u'Jr.', u'.'], u'pos': [u'PRP', u'VBD', u'VBG', u'PRP$', u'NN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[2785, 2788], [2789, 2794], [2795, 2802], [2803, 2806], [2807, 2810], [2811, 2817], [2818, 2825], [2826, 2830], [2830, 2831], [2832, 2834], [2834, 2835]]}) 
answer: set([u'congressman', u'award', u'get'])
candidate Sentence: (0.12259470671415329, {u'tokens': [u'Congressman', u'Gerald', u'Ford', u',', u'MSFC', u'director', u'Wernher', u'von', u'Braun', u',', u'Congressman', u'George', u'H.', u'Mahon', u',', u'and', u'NASA', u'Administrator', u'James', u'E.', u'Webb', u'visit', u'the', u'Marshall', u'Space', u'Flight', u'Center', u'for', u'a', u'briefing', u'on', u'the', u'Saturn', u'program', u',', u'1964', u'In', u'November', u'1963', u',', u'President', u'Lyndon', u'B.', u'Johnson', u'appointed', u'Ford', u'to', u'the', u'Warren', u'Commission', u',', u'a', u'special', u'task', u'force', u'set', u'up', u'to', u'investigate', u'the', u'assassination', u'of', u'President', u'John', u'F.', u'Kennedy', u'.'], u'lemmas': [u'Congressman', u'Gerald', u'Ford', u',', u'MSFC', u'director', u'Wernher', u'von', u'Braun', u',', u'Congressman', u'George', u'H.', u'Mahon', u',', u'and', u'NASA', u'Administrator', u'James', u'E.', u'Webb', u'visit', u'the', u'Marshall', u'Space', u'Flight', u'Center', u'for', u'a', u'briefing', u'on', u'the', u'Saturn', u'program', u',', u'1964', u'in', u'November', u'1963', u',', u'President', u'Lyndon', u'B.', u'Johnson', u'appoint', u'Ford', u'to', u'the', u'Warren', u'Commission', u',', u'a', u'special', u'task', u'force', u'set', u'up', u'to', u'investigate', u'the', u'assassination', u'of', u'President', u'John', u'F.', u'Kennedy', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'CC', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'VB', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NN', u',', u'CD', u'IN', u'NNP', u'CD', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'VBN', u'NNP', u'TO', u'DT', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'NN', u'VBD', u'RP', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[17131, 17142], [17143, 17149], [17150, 17154], [17154, 17155], [17156, 17160], [17161, 17169], [17170, 17177], [17178, 17181], [17182, 17187], [17187, 17188], [17189, 17200], [17201, 17207], [17208, 17210], [17211, 17216], [17216, 17217], [17218, 17221], [17222, 17226], [17227, 17240], [17241, 17246], [17247, 17249], [17250, 17254], [17255, 17260], [17261, 17264], [17265, 17273], [17274, 17279], [17280, 17286], [17287, 17293], [17294, 17297], [17298, 17299], [17300, 17308], [17309, 17311], [17312, 17315], [17316, 17322], [17323, 17330], [17330, 17331], [17332, 17336], [17337, 17339], [17340, 17348], [17349, 17353], [17353, 17354], [17355, 17364], [17365, 17371], [17372, 17374], [17375, 17382], [17383, 17392], [17393, 17397], [17398, 17400], [17401, 17404], [17405, 17411], [17412, 17422], [17422, 17423], [17424, 17425], [17426, 17433], [17434, 17438], [17439, 17444], [17445, 17448], [17449, 17451], [17452, 17454], [17455, 17466], [17467, 17470], [17471, 17484], [17485, 17487], [17488, 17497], [17498, 17502], [17503, 17505], [17506, 17513], [17513, 17514]]}) 
answer: set([u'call', u'award', u'get'])
candidate Sentence: (0.11498147249221802, {u'tokens': [u'But', u'President', u'Johnson', u'disliked', u'Ford', u'for', u'the', u'congressman', u"'s", u'frequent', u'attacks', u'on', u'the', u'administration', u"'s", u'``', u'Great', u'Society', u"''", u'programs', u'as', u'being', u'unneeded', u'or', u'wasteful', u',', u'and', u'for', u'his', u'criticism', u'of', u'the', u'President', u"'s", u'handling', u'of', u'the', u'Vietnam', u'War', u'.'], u'lemmas': [u'but', u'President', u'Johnson', u'dislike', u'Ford', u'for', u'the', u'congressman', u"'s", u'frequent', u'attack', u'on', u'the', u'administration', u"'s", u'``', u'Great', u'Society', u"''", u'program', u'as', u'be', u'unneeded', u'or', u'wasteful', u',', u'and', u'for', u'he', u'criticism', u'of', u'the', u'President', u"'s", u'handling', u'of', u'the', u'Vietnam', u'War', u'.'], u'pos': [u'CC', u'NNP', u'NNP', u'VBD', u'NNP', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'POS', u'``', u'NNP', u'NNP', u"''", u'NNS', u'IN', u'VBG', u'JJ', u'CC', u'JJ', u',', u'CC', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'POS', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[19843, 19846], [19847, 19856], [19857, 19864], [19865, 19873], [19874, 19878], [19879, 19882], [19883, 19886], [19887, 19898], [19898, 19900], [19901, 19909], [19910, 19917], [19918, 19920], [19921, 19924], [19925, 19939], [19939, 19941], [19942, 19943], [19943, 19948], [19949, 19956], [19956, 19957], [19958, 19966], [19967, 19969], [19970, 19975], [19976, 19984], [19985, 19987], [19988, 19996], [19996, 19997], [19998, 20001], [20002, 20005], [20006, 20009], [20010, 20019], [20020, 20022], [20023, 20026], [20027, 20036], [20036, 20038], [20039, 20047], [20048, 20050], [20051, 20054], [20055, 20062], [20063, 20066], [20066, 20067]]}) 
answer: set([u'call', u'award', u'get'])
candidate Sentence: (0.1141808032989502, {u'tokens': [u'Ford', u'had', u'changed', u'his', u'view', u'of', u'the', u'world', u'as', u'a', u'result', u'of', u'his', u'military', u'service', u';', u'``', u'I', u'came', u'back', u'a', u'converted', u'internationalist', u"''", u',', u'Ford', u'stated', u',', u'``', u'and', u'of', u'course', u'our', u'congressman', u'at', u'that', u'time', u'was', u'an', u'avowed', u',', u'dedicated', u'isolationist', u'.'], u'lemmas': [u'Ford', u'have', u'change', u'he', u'view', u'of', u'the', u'world', u'as', u'a', u'result', u'of', u'he', u'military', u'service', u';', u'``', u'I', u'come', u'back', u'a', u'convert', u'internationalist', u"''", u',', u'Ford', u'state', u',', u'``', u'and', u'of', u'course', u'we', u'congressman', u'at', u'that', u'time', u'be', u'a', u'avowed', u',', u'dedicated', u'isolationist', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u':', u'``', u'PRP', u'VBD', u'RB', u'DT', u'VBN', u'JJ', u"''", u',', u'NNP', u'VBD', u',', u'``', u'CC', u'IN', u'NN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'VBD', u'DT', u'JJ', u',', u'JJ', u'NN', u'.'], u'char_offsets': [[15816, 15820], [15821, 15824], [15825, 15832], [15833, 15836], [15837, 15841], [15842, 15844], [15845, 15848], [15849, 15854], [15855, 15857], [15858, 15859], [15860, 15866], [15867, 15869], [15870, 15873], [15874, 15882], [15883, 15890], [15890, 15891], [15892, 15893], [15893, 15894], [15895, 15899], [15900, 15904], [15905, 15906], [15907, 15916], [15917, 15933], [15933, 15934], [15934, 15935], [15936, 15940], [15941, 15947], [15947, 15948], [15949, 15950], [15950, 15953], [15954, 15956], [15957, 15963], [15964, 15967], [15968, 15979], [15980, 15982], [15983, 15987], [15988, 15992], [15993, 15996], [15997, 15999], [16000, 16006], [16006, 16007], [16008, 16017], [16018, 16030], [16030, 16031]]}) 
answer: set([u'call', u'award', u'get'])
candidate Sentence: (0.10810789465904236, {u'tokens': [u'And', u'he', u'said', u',', u'`', u'I', u"'m", u'just', u'warning', u'you', u'that', u'you', u"'ve", u'got', u'to', u'be', u'prepared', u',', u'that', u'things', u'might', u'change', u'dramatically', u'and', u'you', u'could', u'become', u'President', u'.', u"'"], u'lemmas': [u'and', u'he', u'say', u',', u'`', u'I', u'be', u'just', u'warn', u'you', u'that', u'you', u'have', u'get', u'to', u'be', u'prepare', u',', u'that', u'thing', u'might', u'change', u'dramatically', u'and', u'you', u'could', u'become', u'President', u'.', u"'"], u'pos': [u'CC', u'PRP', u'VBD', u',', u'``', u'PRP', u'VBP', u'RB', u'VBG', u'PRP', u'IN', u'PRP', u'VBP', u'VBN', u'TO', u'VB', u'VBN', u',', u'IN', u'NNS', u'MD', u'VB', u'RB', u'CC', u'PRP', u'MD', u'VB', u'NNP', u'.', u"''"], u'char_offsets': [[22575, 22578], [22579, 22581], [22582, 22586], [22586, 22587], [22588, 22589], [22589, 22590], [22590, 22592], [22593, 22597], [22598, 22605], [22606, 22609], [22610, 22614], [22615, 22618], [22618, 22621], [22622, 22625], [22626, 22628], [22629, 22631], [22632, 22640], [22640, 22641], [22642, 22646], [22647, 22653], [22654, 22659], [22660, 22666], [22667, 22679], [22680, 22683], [22684, 22687], [22688, 22693], [22694, 22700], [22701, 22710], [22710, 22711], [22711, 22712]]}) 
answer: set([u'congressman', u'call', u'award'])
candidate Sentence: (0.10514724254608154, {u'tokens': [u'Ford', u"'s", u'transition', u'chairman', u'and', u'first', u'Chief', u'of', u'Staff', u'was', u'former', u'congressman', u'and', u'ambassador', u'Donald', u'Rumsfeld', u'.'], u'lemmas': [u'Ford', u"'s", u'transition', u'chairman', u'and', u'first', u'Chief', u'of', u'Staff', u'be', u'former', u'congressman', u'and', u'ambassador', u'Donald', u'Rumsfeld', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'NN', u'CC', u'JJ', u'NNP', u'IN', u'NNP', u'VBD', u'JJ', u'NN', u'CC', u'NN', u'NNP', u'NNP', u'.'], u'char_offsets': [[27969, 27973], [27973, 27975], [27976, 27986], [27987, 27995], [27996, 27999], [28000, 28005], [28006, 28011], [28012, 28014], [28015, 28020], [28021, 28024], [28025, 28031], [28032, 28043], [28044, 28047], [28048, 28058], [28059, 28065], [28066, 28074], [28074, 28075]]}) 
answer: set([u'call', u'award', u'get'])

Did ford get an award called "Congressman's congressman"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa88518>.answer
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa88b90>, (<src.tfidf.TF_IDF object at 0x1084de450>, set(['gray', 'wolf'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, They do tend to have darker furs')
E                +    where 'Yes, They do tend to have darker furs' = <src.question_processing.Question_parser instance at 0x10aa88b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40186107158660889, {u'tokens': [u'At', u'birth', u',', u'wolf', u'pups', u'tend', u'to', u'have', u'darker', u'fur', u'and', u'blue', u'irises', u'that', u'will', u'change', u'to', u'a', u'yellow-gold', u'or', u'orange', u'color', u'when', u'the', u'pups', u'are', u'between', u'8', u'and', u'16', u'weeks', u'old', u'.'], u'lemmas': [u'at', u'birth', u',', u'wolf', u'pup', u'tend', u'to', u'have', u'darker', u'fur', u'and', u'blue', u'iris', u'that', u'will', u'change', u'to', u'a', u'yellow-gold', u'or', u'orange', u'color', u'when', u'the', u'pup', u'be', u'between', u'8', u'and', u'16', u'week', u'old', u'.'], u'pos': [u'IN', u'NN', u',', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'JJR', u'NN', u'CC', u'JJ', u'NNS', u'WDT', u'MD', u'VB', u'TO', u'DT', u'JJ', u'CC', u'JJ', u'NN', u'WRB', u'DT', u'NNS', u'VBP', u'IN', u'CD', u'CC', u'CD', u'NNS', u'JJ', u'.'], u'char_offsets': [[6126, 6128], [6129, 6134], [6134, 6135], [6136, 6140], [6141, 6145], [6146, 6150], [6151, 6153], [6154, 6158], [6159, 6165], [6166, 6169], [6170, 6173], [6174, 6178], [6179, 6185], [6186, 6190], [6191, 6195], [6196, 6202], [6203, 6205], [6206, 6207], [6208, 6219], [6220, 6222], [6223, 6229], [6230, 6235], [6236, 6240], [6241, 6244], [6245, 6249], [6250, 6253], [6254, 6261], [6262, 6263], [6264, 6267], [6268, 6270], [6271, 6276], [6277, 6280], [6280, 6281]]}) 
answer: set([u'adult'])
candidate Sentence: (0.1737370491027832, {u'tokens': [u'One', u'or', u'two', u'adults', u'stay', u'behind', u'to', u'ensure', u'the', u'safety', u'of', u'the', u'pups', u'.'], u'lemmas': [u'one', u'or', u'two', u'adult', u'stay', u'behind', u'to', u'ensure', u'the', u'safety', u'of', u'the', u'pup', u'.'], u'pos': [u'CD', u'CC', u'CD', u'NNS', u'VBP', u'IN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[11544, 11547], [11548, 11550], [11551, 11554], [11555, 11561], [11562, 11566], [11567, 11573], [11574, 11576], [11577, 11583], [11584, 11587], [11588, 11594], [11595, 11597], [11598, 11601], [11602, 11606], [11606, 11607]]}) 
answer: set([u'tend', u'fur', u'darker'])
candidate Sentence: (0.16964004933834076, {u'tokens': [u'Females', u'tend', u'to', u'keep', u'their', u'winter', u'coats', u'further', u'into', u'the', u'spring', u'than', u'males', u'.'], u'lemmas': [u'female', u'tend', u'to', u'keep', u'they', u'winter', u'coat', u'further', u'into', u'the', u'spring', u'than', u'male', u'.'], u'pos': [u'NNS', u'VBP', u'TO', u'VB', u'PRP$', u'NN', u'NNS', u'RBR', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[4994, 5001], [5002, 5006], [5007, 5009], [5010, 5014], [5015, 5020], [5021, 5027], [5028, 5033], [5034, 5041], [5042, 5046], [5047, 5050], [5051, 5057], [5058, 5062], [5063, 5068], [5068, 5069]]}) 
answer: set([u'fur', u'pup', u'adult', u'darker'])
candidate Sentence: (0.16908338665962219, {u'tokens': [u'Alpha', u'wolves', u'scent', u'mark', u'the', u'most', u'often', u',', u'with', u'males', u'doing', u'so', u'more', u'than', u'females', u'.'], u'lemmas': [u'alpha', u'wolf', u'scent', u'mark', u'the', u'most', u'often', u',', u'with', u'male', u'do', u'so', u'more', u'than', u'female', u'.'], u'pos': [u'NN', u'NNS', u'JJ', u'NN', u'DT', u'RBS', u'RB', u',', u'IN', u'NNS', u'VBG', u'RB', u'JJR', u'IN', u'NNS', u'.'], u'char_offsets': [[20285, 20290], [20291, 20297], [20298, 20303], [20304, 20308], [20309, 20312], [20313, 20317], [20318, 20323], [20323, 20324], [20325, 20329], [20330, 20335], [20336, 20341], [20342, 20344], [20345, 20349], [20350, 20354], [20355, 20362], [20362, 20363]]}) 
answer: set([u'pup', u'darker', u'fur', u'adult', u'tend'])
candidate Sentence: (0.16660827398300171, {u'tokens': [u'It', u'is', u'known', u'that', u'some', u'Native', u'American', u'tribes', u'would', u'occasionally', u'raise', u'wolf', u'pups', u'for', u'their', u'fur', u'.'], u'lemmas': [u'it', u'be', u'know', u'that', u'some', u'native', u'american', u'tribe', u'would', u'occasionally', u'raise', u'wolf', u'pup', u'for', u'they', u'fur', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'JJ', u'NNS', u'MD', u'RB', u'VB', u'NN', u'NNS', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[67610, 67612], [67613, 67615], [67616, 67621], [67622, 67626], [67627, 67631], [67632, 67638], [67639, 67647], [67648, 67654], [67655, 67660], [67661, 67673], [67674, 67679], [67680, 67684], [67685, 67689], [67690, 67693], [67694, 67699], [67700, 67703], [67703, 67704]]}) 
answer: set([u'tend', u'adult', u'darker'])
candidate Sentence: (0.16642941534519196, {u'tokens': [u'Generally', u',', u'pups', u'bark', u'and', u'bark-howl', u'much', u'more', u'frequently', u'than', u'adults', u',', u'using', u'these', u'vocalizations', u'to', u'cry', u'for', u'attention', u',', u'care', u',', u'or', u'food', u'.'], u'lemmas': [u'generally', u',', u'pup', u'bark', u'and', u'bark-howl', u'much', u'more', u'frequently', u'than', u'adult', u',', u'use', u'these', u'vocalization', u'to', u'cry', u'for', u'attention', u',', u'care', u',', u'or', u'food', u'.'], u'pos': [u'RB', u',', u'NNS', u'NN', u'CC', u'NN', u'RB', u'RBR', u'RB', u'IN', u'NNS', u',', u'VBG', u'DT', u'NNS', u'TO', u'VB', u'IN', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[19438, 19447], [19447, 19448], [19449, 19453], [19454, 19458], [19459, 19462], [19463, 19472], [19473, 19477], [19478, 19482], [19483, 19493], [19494, 19498], [19499, 19505], [19505, 19506], [19507, 19512], [19513, 19518], [19519, 19532], [19533, 19535], [19536, 19539], [19540, 19543], [19544, 19553], [19553, 19554], [19555, 19559], [19559, 19560], [19561, 19563], [19564, 19568], [19568, 19569]]}) 
answer: set([u'tend', u'fur', u'darker'])
candidate Sentence: (0.16631796956062317, {u'tokens': [u'North', u'American', u'wolves', u'typically', u'have', u'longer', u',', u'silkier', u'fur', u'than', u'their', u'Eurasian', u'counterparts', u'.'], u'lemmas': [u'north', u'american', u'wolf', u'typically', u'have', u'longer', u',', u'silkier', u'fur', u'than', u'they', u'eurasian', u'counterpart', u'.'], u'pos': [u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'RBR', u',', u'JJR', u'NN', u'IN', u'PRP$', u'JJ', u'NNS', u'.'], u'char_offsets': [[5070, 5075], [5076, 5084], [5085, 5091], [5092, 5101], [5102, 5106], [5107, 5113], [5113, 5114], [5115, 5122], [5123, 5126], [5127, 5131], [5132, 5137], [5138, 5146], [5147, 5159], [5159, 5160]]}) 
answer: set([u'tend', u'pup', u'adult', u'darker'])
candidate Sentence: (0.14663924276828766, {u'tokens': [u'Wolves', u'therefore', u'tend', u'to', u'howl', u'with', u'great', u'care', u'.'], u'lemmas': [u'wolf', u'therefore', u'tend', u'to', u'howl', u'with', u'great', u'care', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'TO', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17266, 17272], [17273, 17282], [17283, 17287], [17288, 17290], [17291, 17295], [17296, 17300], [17301, 17306], [17307, 17311], [17311, 17312]]}) 
answer: set([u'fur', u'pup', u'adult', u'darker'])
candidate Sentence: (0.13460886478424072, {u'tokens': [u'The', u'attacks', u'tended', u'to', u'be', u'clustered', u'in', u'space', u'and', u'time', u'.'], u'lemmas': [u'the', u'attack', u'tend', u'to', u'be', u'cluster', u'in', u'space', u'and', u'time', u'.'], u'pos': [u'DT', u'NNS', u'VBD', u'TO', u'VB', u'VBN', u'IN', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[52758, 52761], [52762, 52769], [52770, 52776], [52777, 52779], [52780, 52782], [52783, 52792], [52793, 52795], [52796, 52801], [52802, 52805], [52806, 52810], [52810, 52811]]}) 
answer: set([u'fur', u'pup', u'adult', u'darker'])
candidate Sentence: (0.13369271159172058, {u'tokens': [u'Desert', u'dwelling', u'grey', u'wolf', u'subspecies', u',', u'such', u'as', u'this', u'Arabian', u'wolf', u',', u'tend', u'to', u'be', u'smaller', u'than', u'their', u'more', u'northern', u'cousins', u'.'], u'lemmas': [u'Desert', u'dwelling', u'grey', u'wolf', u'subspecy', u',', u'such', u'as', u'this', u'arabian', u'wolf', u',', u'tend', u'to', u'be', u'smaller', u'than', u'they', u'more', u'northern', u'cousin', u'.'], u'pos': [u'NNP', u'NN', u'JJ', u'NN', u'NNS', u',', u'JJ', u'IN', u'DT', u'JJ', u'NN', u',', u'VB', u'TO', u'VB', u'JJR', u'IN', u'PRP$', u'JJR', u'JJ', u'NNS', u'.'], u'char_offsets': [[32908, 32914], [32915, 32923], [32924, 32928], [32929, 32933], [32934, 32944], [32944, 32945], [32946, 32950], [32951, 32953], [32954, 32958], [32959, 32966], [32967, 32971], [32971, 32972], [32973, 32977], [32978, 32980], [32981, 32983], [32984, 32991], [32992, 32996], [32997, 33002], [33003, 33007], [33008, 33016], [33017, 33024], [33024, 33025]]}) 
answer: set([u'fur', u'pup', u'adult', u'darker'])

Do wolf pups tend to have darker fur than adults?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, They do tend to have darker furs
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, They do tend to have darker furs')
 +    where 'Yes, They do tend to have darker furs' = <src.question_processing.Question_parser instance at 0x10aa88b90>.answer
_____________________________ test_yesno[param150] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa88c20>, (<src.tfidf.TF_IDF object at 0x1084de450>, set(['gray', 'wolf'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('They leave their birth pack when they reach sexual maturity') == True
E                +  where 'They leave their birth pack when they reach sexual maturity' = <src.question_processing.Question_parser instance at 0x10aa88c20>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30120223760604858, {u'tokens': [u'New', u'packs', u'are', u'formed', u'when', u'a', u'wolf', u'leaves', u'its', u'birth', u'pack', u',', u'finds', u'a', u'mate', u',', u'and', u'claims', u'a', u'territory', u'.'], u'lemmas': [u'New', u'pack', u'be', u'form', u'when', u'a', u'wolf', u'leave', u'its', u'birth', u'pack', u',', u'find', u'a', u'mate', u',', u'and', u'claim', u'a', u'territory', u'.'], u'pos': [u'NNP', u'NNS', u'VBP', u'VBN', u'WRB', u'DT', u'NN', u'VBZ', u'PRP$', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u',', u'CC', u'VBZ', u'DT', u'NN', u'.'], u'char_offsets': [[23783, 23786], [23787, 23792], [23793, 23796], [23797, 23803], [23804, 23808], [23809, 23810], [23811, 23815], [23816, 23822], [23823, 23826], [23827, 23832], [23833, 23837], [23837, 23838], [23839, 23844], [23845, 23846], [23847, 23851], [23851, 23852], [23853, 23856], [23857, 23863], [23864, 23865], [23866, 23875], [23875, 23876]]}) 
answer: set([])
candidate Sentence: (0.28680592775344849, {u'tokens': [u'The', u'money', u'was', u'left', u'uncollected', u'.'], u'lemmas': [u'the', u'money', u'be', u'leave', u'uncollected', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'VBN', u'JJ', u'.'], u'char_offsets': [[54146, 54149], [54150, 54155], [54156, 54159], [54160, 54164], [54165, 54176], [54176, 54177]]}) 
answer: set([u'pack'])
candidate Sentence: (0.23067730665206909, {u'tokens': [u'Wolves', u'typically', u'reach', u'sexual', u'maturity', u'after', u'two', u'or', u'three', u'years', u',', u'at', u'which', u'point', u'many', u'of', u'them', u'will', u'be', u'compelled', u'to', u'leave', u'their', u'birth', u'packs', u'and', u'seek', u'out', u'mates', u'and', u'territories', u'of', u'their', u'own', u'.'], u'lemmas': [u'wolf', u'typically', u'reach', u'sexual', u'maturity', u'after', u'two', u'or', u'three', u'year', u',', u'at', u'which', u'point', u'many', u'of', u'they', u'will', u'be', u'compel', u'to', u'leave', u'they', u'birth', u'pack', u'and', u'seek', u'out', u'mate', u'and', u'territory', u'of', u'they', u'own', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'JJ', u'NN', u'IN', u'CD', u'CC', u'CD', u'NNS', u',', u'IN', u'WDT', u'NN', u'JJ', u'IN', u'PRP', u'MD', u'VB', u'VBN', u'TO', u'VB', u'PRP$', u'NN', u'NNS', u'CC', u'VB', u'RP', u'NNS', u'CC', u'NNS', u'IN', u'PRP$', u'JJ', u'.'], u'char_offsets': [[12144, 12150], [12151, 12160], [12161, 12166], [12167, 12173], [12174, 12182], [12183, 12188], [12189, 12192], [12193, 12195], [12196, 12201], [12202, 12207], [12207, 12208], [12209, 12211], [12212, 12217], [12218, 12223], [12224, 12228], [12229, 12231], [12232, 12236], [12237, 12241], [12242, 12244], [12245, 12254], [12255, 12257], [12258, 12263], [12264, 12269], [12270, 12275], [12276, 12281], [12282, 12285], [12286, 12290], [12291, 12294], [12295, 12300], [12301, 12304], [12305, 12316], [12317, 12319], [12320, 12325], [12326, 12329], [12329, 12330]]}) 
answer: set([])
candidate Sentence: (0.21583415567874908, {u'tokens': [u'The', u'prey', u'is', u'often', u'left', u'to', u'weaken', u',', u'being', u'fed', u'upon', u'once', u'it', u'falls', u'.'], u'lemmas': [u'the', u'prey', u'be', u'often', u'leave', u'to', u'weaken', u',', u'be', u'feed', u'upon', u'once', u'it', u'fall', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'TO', u'VB', u',', u'VBG', u'VBN', u'IN', u'RB', u'PRP', u'VBZ', u'.'], u'char_offsets': [[61810, 61813], [61814, 61818], [61819, 61821], [61822, 61827], [61828, 61832], [61833, 61835], [61836, 61842], [61842, 61843], [61844, 61849], [61850, 61853], [61854, 61858], [61859, 61863], [61864, 61866], [61867, 61872], [61872, 61873]]}) 
answer: set([u'pack'])
candidate Sentence: (0.18346594274044037, {u'tokens': [u'Alpha', u'wolves', u'scent', u'mark', u'the', u'most', u'often', u',', u'with', u'males', u'doing', u'so', u'more', u'than', u'females', u'.'], u'lemmas': [u'alpha', u'wolf', u'scent', u'mark', u'the', u'most', u'often', u',', u'with', u'male', u'do', u'so', u'more', u'than', u'female', u'.'], u'pos': [u'NN', u'NNS', u'JJ', u'NN', u'DT', u'RBS', u'RB', u',', u'IN', u'NNS', u'VBG', u'RB', u'JJR', u'IN', u'NNS', u'.'], u'char_offsets': [[20285, 20290], [20291, 20297], [20298, 20303], [20304, 20308], [20309, 20312], [20313, 20317], [20318, 20323], [20323, 20324], [20325, 20329], [20330, 20335], [20336, 20341], [20342, 20344], [20345, 20349], [20350, 20354], [20355, 20362], [20362, 20363]]}) 
answer: set([u'leave', u'pack'])
candidate Sentence: (0.17610727250576019, {u'tokens': [u'It', u'was', u'originally', u'believed', u'that', u'this', u'comparatively', u'high', u'level', u'of', u'social', u'organization', u'was', u'related', u'to', u'hunting', u'success', u',', u'and', u'while', u'this', u'still', u'may', u'be', u'true', u'to', u'a', u'certain', u'extent', u',', u'emerging', u'theories', u'suggest', u'that', u'the', u'pack', u'has', u'less', u'to', u'do', u'with', u'hunting', u'and', u'more', u'to', u'do', u'with', u'reproductive', u'success', u'.'], u'lemmas': [u'it', u'be', u'originally', u'believe', u'that', u'this', u'comparatively', u'high', u'level', u'of', u'social', u'organization', u'be', u'relate', u'to', u'hunting', u'success', u',', u'and', u'while', u'this', u'still', u'may', u'be', u'true', u'to', u'a', u'certain', u'extent', u',', u'emerge', u'theory', u'suggest', u'that', u'the', u'pack', u'have', u'less', u'to', u'do', u'with', u'hunting', u'and', u'more', u'to', u'do', u'with', u'reproductive', u'success', u'.'], u'pos': [u'PRP', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'VBD', u'VBN', u'TO', u'NN', u'NN', u',', u'CC', u'IN', u'DT', u'RB', u'MD', u'VB', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'VBG', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'VBZ', u'JJR', u'TO', u'VB', u'IN', u'NN', u'CC', u'JJR', u'TO', u'VB', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[21943, 21945], [21946, 21949], [21950, 21960], [21961, 21969], [21970, 21974], [21975, 21979], [21980, 21993], [21994, 21998], [21999, 22004], [22005, 22007], [22008, 22014], [22015, 22027], [22028, 22031], [22032, 22039], [22040, 22042], [22043, 22050], [22051, 22058], [22058, 22059], [22060, 22063], [22064, 22069], [22070, 22074], [22075, 22080], [22081, 22084], [22085, 22087], [22088, 22092], [22093, 22095], [22096, 22097], [22098, 22105], [22106, 22112], [22112, 22113], [22114, 22122], [22123, 22131], [22132, 22139], [22140, 22144], [22145, 22148], [22149, 22153], [22154, 22157], [22158, 22162], [22163, 22165], [22166, 22168], [22169, 22173], [22174, 22181], [22182, 22185], [22186, 22190], [22191, 22193], [22194, 22196], [22197, 22201], [22202, 22214], [22215, 22222], [22222, 22223]]}) 
answer: set([u'leave'])
candidate Sentence: (0.17197568714618683, {u'tokens': [u'In', u'Japan', u',', u'grain', u'farmers', u'once', u'worshiped', u'wolves', u'at', u'shrines', u'and', u'left', u'food', u'offerings', u'near', u'their', u'dens', u',', u'beseeching', u'them', u'to', u'protect', u'their', u'crops', u'from', u'wild', u'boars', u'and', u'deer', u'.'], u'lemmas': [u'in', u'Japan', u',', u'grain', u'farmer', u'once', u'worship', u'wolf', u'at', u'shrine', u'and', u'leave', u'food', u'offering', u'near', u'they', u'den', u',', u'beseech', u'they', u'to', u'protect', u'they', u'crop', u'from', u'wild', u'boar', u'and', u'deer', u'.'], u'pos': [u'IN', u'NNP', u',', u'NN', u'NNS', u'RB', u'VBD', u'NNS', u'IN', u'NNS', u'CC', u'VBD', u'NN', u'NNS', u'IN', u'PRP$', u'NNS', u',', u'VBG', u'PRP', u'TO', u'VB', u'PRP$', u'NNS', u'IN', u'JJ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[40579, 40581], [40582, 40587], [40587, 40588], [40589, 40594], [40595, 40602], [40603, 40607], [40608, 40617], [40618, 40624], [40625, 40627], [40628, 40635], [40636, 40639], [40640, 40644], [40645, 40649], [40650, 40659], [40660, 40664], [40665, 40670], [40671, 40675], [40675, 40676], [40677, 40687], [40688, 40692], [40693, 40695], [40696, 40703], [40704, 40709], [40710, 40715], [40716, 40720], [40721, 40725], [40726, 40731], [40732, 40735], [40736, 40740], [40740, 40741]]}) 
answer: set([u'pack'])
candidate Sentence: (0.16912321746349335, {u'tokens': [u'However', u',', u'researchers', u'in', u'Montana', u'have', u'found', u'that', u'wolves', u'regularly', u'kill', u'cougars', u'in', u'the', u'area', u',', u'though', u'they', u'did', u'not', u'specify', u'whether', u'or', u'not', u'this', u'was', u'a', u'pack', u'situation', u'.'], u'lemmas': [u'however', u',', u'researcher', u'in', u'Montana', u'have', u'find', u'that', u'wolf', u'regularly', u'kill', u'cougar', u'in', u'the', u'area', u',', u'though', u'they', u'do', u'not', u'specify', u'whether', u'or', u'not', u'this', u'be', u'a', u'pack', u'situation', u'.'], u'pos': [u'RB', u',', u'NNS', u'IN', u'NNP', u'VBP', u'VBN', u'IN', u'NNS', u'RB', u'VBP', u'NNS', u'IN', u'DT', u'NN', u',', u'IN', u'PRP', u'VBD', u'RB', u'VB', u'IN', u'CC', u'RB', u'DT', u'VBD', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[37261, 37268], [37268, 37269], [37270, 37281], [37282, 37284], [37285, 37292], [37293, 37297], [37298, 37303], [37304, 37308], [37309, 37315], [37316, 37325], [37326, 37330], [37331, 37338], [37339, 37341], [37342, 37345], [37346, 37350], [37350, 37351], [37352, 37358], [37359, 37363], [37364, 37367], [37368, 37371], [37372, 37379], [37380, 37387], [37388, 37390], [37391, 37394], [37395, 37399], [37400, 37403], [37404, 37405], [37406, 37410], [37411, 37420], [37420, 37421]]}) 
answer: set([u'leave'])
candidate Sentence: (0.15039418637752533, {u'tokens': [u'Notable', u'exceptions', u'include', u'specially', u'bred', u'Livestock', u'guardian', u'dogs', u',', u'though', u'their', u'primary', u'function', u'has', u'more', u'to', u'do', u'with', u'intimidating', u'the', u'wolves', u'rather', u'than', u'fighting', u'them', u'.'], u'lemmas': [u'notable', u'exception', u'include', u'specially', u'breed', u'livestock', u'guardian', u'dog', u',', u'though', u'they', u'primary', u'function', u'have', u'more', u'to', u'do', u'with', u'intimidate', u'the', u'wolf', u'rather', u'than', u'fight', u'they', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'NN', u'NN', u'NNS', u',', u'IN', u'PRP$', u'JJ', u'NN', u'VBZ', u'JJR', u'TO', u'VB', u'IN', u'VBG', u'DT', u'NNS', u'RB', u'IN', u'VBG', u'PRP', u'.'], u'char_offsets': [[63673, 63680], [63681, 63691], [63692, 63699], [63700, 63709], [63710, 63714], [63715, 63724], [63725, 63733], [63734, 63738], [63738, 63739], [63740, 63746], [63747, 63752], [63753, 63760], [63761, 63769], [63770, 63773], [63774, 63778], [63779, 63781], [63782, 63784], [63785, 63789], [63790, 63802], [63803, 63806], [63807, 63813], [63814, 63820], [63821, 63825], [63826, 63834], [63835, 63839], [63839, 63840]]}) 
answer: set([u'leave', u'pack'])
candidate Sentence: (0.14933693408966064, {u'tokens': [u'Habituation', u'usually', u'happens', u'when', u'people', u'encourage', u'wolves', u'to', u'come', u'up', u'to', u'them', u',', u'usually', u'by', u'offering', u'them', u'food', u',', u'or', u'when', u'people', u'do', u'not', u'sufficiently', u'intimidate', u'wolves', u'.'], u'lemmas': [u'habituation', u'usually', u'happen', u'when', u'people', u'encourage', u'wolf', u'to', u'come', u'up', u'to', u'they', u',', u'usually', u'by', u'offer', u'they', u'food', u',', u'or', u'when', u'people', u'do', u'not', u'sufficiently', u'intimidate', u'wolf', u'.'], u'pos': [u'NN', u'RB', u'VBZ', u'WRB', u'NNS', u'VBP', u'NNS', u'TO', u'VB', u'RP', u'TO', u'PRP', u',', u'RB', u'IN', u'VBG', u'PRP', u'NN', u',', u'CC', u'WRB', u'NNS', u'VBP', u'RB', u'RB', u'VB', u'NNS', u'.'], u'char_offsets': [[51273, 51284], [51285, 51292], [51293, 51300], [51301, 51305], [51306, 51312], [51313, 51322], [51323, 51329], [51330, 51332], [51333, 51337], [51338, 51340], [51341, 51343], [51344, 51348], [51348, 51349], [51350, 51357], [51358, 51360], [51361, 51369], [51370, 51374], [51375, 51379], [51379, 51380], [51381, 51383], [51384, 51388], [51389, 51395], [51396, 51398], [51399, 51402], [51403, 51415], [51416, 51426], [51427, 51433], [51433, 51434]]}) 
answer: set([u'leave', u'pack'])

Do wolves leave their pack?
Validity= False
Question Type = NA
Answer Type = NA
Answer = They leave their birth pack when they reach sexual maturity
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 300 documents, 13434 characters, 2598 tokens, 44.8 char/doc, 8.7 tok/doc RATES: 21.539 doc/sec, 186.5 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('They leave their birth pack when they reach sexual maturity') == True
 +  where 'They leave their birth pack when they reach sexual maturity' = <src.question_processing.Question_parser instance at 0x10aa88c20>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param167] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d128>, (<src.tfidf.TF_IDF object at 0x105acbad0>, set(['cleveland', 'grover'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d128>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41958567500114441, {u'tokens': [u'Grover', u'Cleveland', u'was', u'the', u'second', u'President', u'married', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'married', u'in', u'the', u'White', u'House', u'itself', u'On', u'June', u'2', u',', u'1886', u',', u'Cleveland', u'married', u'Frances', u'Cornelia', u'Folsom', u',', u'the', u'daughter', u'of', u'his', u'former', u'law', u'partner', u',', u'in', u'the', u'Blue', u'Room', u'in', u'the', u'White', u'House', u'.'], u'lemmas': [u'Grover', u'Cleveland', u'be', u'the', u'second', u'President', u'marry', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'marry', u'in', u'the', u'White', u'House', u'itself', u'on', u'June', u'2', u',', u'1886', u',', u'Cleveland', u'marry', u'Frances', u'Cornelia', u'Folsom', u',', u'the', u'daughter', u'of', u'he', u'former', u'law', u'partner', u',', u'in', u'the', u'Blue', u'Room', u'in', u'the', u'White', u'House', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'VBN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NNP', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'PRP', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[9955, 9961], [9962, 9971], [9972, 9975], [9976, 9979], [9980, 9986], [9987, 9996], [9997, 10004], [10005, 10007], [10008, 10014], [10014, 10015], [10016, 10019], [10020, 10023], [10024, 10028], [10029, 10038], [10039, 10046], [10047, 10049], [10050, 10053], [10054, 10059], [10060, 10065], [10066, 10072], [10074, 10076], [10077, 10081], [10082, 10083], [10083, 10084], [10085, 10089], [10089, 10090], [10091, 10100], [10101, 10108], [10109, 10116], [10117, 10125], [10126, 10132], [10132, 10133], [10134, 10137], [10138, 10146], [10147, 10149], [10150, 10153], [10154, 10160], [10161, 10164], [10165, 10172], [10172, 10173], [10174, 10176], [10177, 10180], [10181, 10185], [10186, 10190], [10191, 10193], [10194, 10197], [10198, 10203], [10204, 10209], [10209, 10210]]}) 
answer: set([u'whitehouse'])
candidate Sentence: (0.23480382561683655, {u'tokens': [u'He', u'was', u'the', u'second', u'President', u'to', u'marry', u'while', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'to', u'have', u'a', u'wedding', u'in', u'the', u'White', u'House', u'itself', u'.'], u'lemmas': [u'he', u'be', u'the', u'second', u'president', u'to', u'marry', u'while', u'in', u'office', u',', u'and', u'the', u'only', u'president', u'to', u'have', u'a', u'wedding', u'in', u'the', u'White', u'House', u'itself', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'TO', u'VB', u'IN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'PRP', u'.'], u'char_offsets': [[10211, 10213], [10214, 10217], [10218, 10221], [10222, 10228], [10229, 10238], [10239, 10241], [10242, 10247], [10248, 10253], [10254, 10256], [10257, 10263], [10263, 10264], [10265, 10268], [10269, 10272], [10273, 10277], [10278, 10287], [10288, 10290], [10291, 10295], [10296, 10297], [10298, 10305], [10306, 10308], [10309, 10312], [10313, 10318], [10319, 10324], [10325, 10331], [10331, 10332]]}) 
answer: set([u'whitehouse'])
candidate Sentence: (0.19094778597354889, {u'tokens': [u'The', u'derisive', u'phrase', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?', u"''"], u'lemmas': [u'the', u'derisive', u'phrase', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?', u"''"], u'pos': [u'DT', u'JJ', u'NN', u'``', u'NNP', u',', u'NNP', u',', u'WRB', u'POS', u'PRP$', u'NNP', u'.', u"''"], u'char_offsets': [[3795, 3798], [3799, 3807], [3808, 3814], [3815, 3816], [3816, 3818], [3818, 3819], [3820, 3822], [3822, 3823], [3824, 3829], [3829, 3831], [3832, 3834], [3835, 3837], [3837, 3838], [3838, 3839]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.17995655536651611, {u'tokens': [u'Statue', u'of', u'Grover', u'Cleveland', u'outside', u'City', u'Hall', u'in', u'Buffalo', u',', u'New', u'York', u'*', u'Cleveland', u',', u'Grover', u'.'], u'lemmas': [u'Statue', u'of', u'Grover', u'Cleveland', u'outside', u'City', u'Hall', u'in', u'Buffalo', u',', u'New', u'York', u'*', u'Cleveland', u',', u'Grover', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[20697, 20703], [20704, 20706], [20707, 20713], [20714, 20723], [20724, 20731], [20732, 20736], [20737, 20741], [20742, 20744], [20745, 20752], [20752, 20753], [20754, 20757], [20758, 20762], [20763, 20764], [20765, 20774], [20774, 20775], [20776, 20782], [20782, 20783]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.1567937433719635, {u'tokens': [u'After', u'Cleveland', u"'s", u'election', u'as', u'President', u',', u'Democratic', u'newspapers', u'added', u'a', u'line', u'to', u'the', u'chant', u'used', u'against', u'Cleveland', u'and', u'made', u'it', u':', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?'], u'lemmas': [u'after', u'Cleveland', u"'s", u'election', u'as', u'President', u',', u'democratic', u'newspaper', u'add', u'a', u'line', u'to', u'the', u'chant', u'use', u'against', u'Cleveland', u'and', u'make', u'it', u':', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?'], u'pos': [u'IN', u'NNP', u'POS', u'NN', u'IN', u'NNP', u',', u'JJ', u'NNS', u'VBD', u'DT', u'NN', u'TO', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'CC', u'VBD', u'PRP', u':', u'``', u'NNP', u',', u'NNP', u',', u'WRB', u'POS', u'PRP$', u'NNP', u'.'], u'char_offsets': [[4375, 4380], [4381, 4390], [4390, 4392], [4393, 4401], [4402, 4404], [4405, 4414], [4414, 4415], [4416, 4426], [4427, 4437], [4438, 4443], [4444, 4445], [4446, 4450], [4451, 4453], [4454, 4457], [4458, 4463], [4464, 4468], [4469, 4476], [4477, 4486], [4487, 4490], [4491, 4495], [4496, 4498], [4498, 4499], [4500, 4501], [4501, 4503], [4503, 4504], [4505, 4507], [4507, 4508], [4509, 4514], [4514, 4516], [4517, 4519], [4520, 4522], [4522, 4523]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.11759912222623825, {u'tokens': [u'In', u'1871', u'Grover', u'Cleveland', u'was', u'elected', u'Sheriff', u'of', u'Erie', u'County', u',', u'New', u'York', u'.'], u'lemmas': [u'in', u'1871', u'Grover', u'Cleveland', u'be', u'elect', u'Sheriff', u'of', u'Erie', u'County', u',', u'New', u'York', u'.'], u'pos': [u'IN', u'CD', u'NNP', u'NNP', u'VBD', u'VBN', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[2813, 2815], [2816, 2820], [2821, 2827], [2828, 2837], [2838, 2841], [2842, 2849], [2850, 2857], [2858, 2860], [2861, 2865], [2866, 2872], [2872, 2873], [2874, 2877], [2878, 2882], [2882, 2883]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.093864090740680695, {u'tokens': [u'Oil', u'painting', u'of', u'Grover', u'Cleveland', u',', u'painted', u'in', u'1899', u'by', u'Anders', u'Zorn', u'.'], u'lemmas': [u'Oil', u'painting', u'of', u'Grover', u'Cleveland', u',', u'paint', u'in', u'1899', u'by', u'Anders', u'Zorn', u'.'], u'pos': [u'NNP', u'NN', u'IN', u'NNP', u'NNP', u',', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[19055, 19058], [19059, 19067], [19068, 19070], [19071, 19077], [19078, 19087], [19087, 19088], [19089, 19096], [19097, 19099], [19100, 19104], [19105, 19107], [19108, 19114], [19115, 19119], [19119, 19120]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.084766864776611328, {u'tokens': [u'*', u'Graff', u',', u'Henry', u'F.', u'Grover', u'Cleveland', u'-LRB-', u'2002', u'-RRB-', u',', u'short', u'overview', u'.'], u'lemmas': [u'*', u'graff', u',', u'Henry', u'F.', u'Grover', u'Cleveland', u'-lrb-', u'2002', u'-rrb-', u',', u'short', u'overview', u'.'], u'pos': [u'SYM', u'NN', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u',', u'JJ', u'NN', u'.'], u'char_offsets': [[21092, 21093], [21094, 21099], [21099, 21100], [21101, 21106], [21107, 21109], [21110, 21116], [21117, 21126], [21127, 21128], [21128, 21132], [21132, 21133], [21133, 21134], [21135, 21140], [21141, 21149], [21149, 21150]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.084179505705833435, {u'tokens': [u'An', u'early', u',', u'undated', u'photograph', u'of', u'Grover', u'Cleveland', u'from', u'the', u'Cleveland', u'Family', u'Papers', u'at', u'the', u'New', u'Jersey', u'Archives', u'.'], u'lemmas': [u'a', u'early', u',', u'undated', u'photograph', u'of', u'Grover', u'Cleveland', u'from', u'the', u'Cleveland', u'Family', u'Papers', u'at', u'the', u'New', u'Jersey', u'Archives', u'.'], u'pos': [u'DT', u'RB', u',', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[1333, 1335], [1336, 1341], [1341, 1342], [1343, 1350], [1351, 1361], [1362, 1364], [1365, 1371], [1372, 1381], [1382, 1386], [1387, 1390], [1391, 1400], [1401, 1407], [1408, 1414], [1415, 1417], [1418, 1421], [1422, 1425], [1426, 1432], [1433, 1441], [1441, 1442]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.077448904514312744, {u'tokens': [u'He', u'was', u'named', u'Stephen', u'Grover', u'in', u'honor', u'of', u'the', u'first', u'pastor', u'of', u'the', u'First', u'Presbyterian', u'Church', u'of', u'Caldwell', u',', u'where', u'his', u'father', u'was', u'pastor', u'at', u'the', u'time', u'.'], u'lemmas': [u'he', u'be', u'name', u'Stephen', u'Grover', u'in', u'honor', u'of', u'the', u'first', u'pastor', u'of', u'the', u'First', u'Presbyterian', u'Church', u'of', u'Caldwell', u',', u'where', u'he', u'father', u'be', u'pastor', u'at', u'the', u'time', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'NNP', u'NNP', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u',', u'WRB', u'PRP$', u'NN', u'VBD', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1602, 1604], [1605, 1608], [1609, 1614], [1615, 1622], [1623, 1629], [1630, 1632], [1633, 1638], [1639, 1641], [1642, 1645], [1646, 1651], [1652, 1658], [1659, 1661], [1662, 1665], [1666, 1671], [1672, 1684], [1685, 1691], [1692, 1694], [1695, 1703], [1703, 1704], [1705, 1710], [1711, 1714], [1715, 1721], [1722, 1725], [1726, 1732], [1733, 1735], [1736, 1739], [1740, 1744], [1744, 1745]]}) 
answer: set([u'marry', u'whitehouse'])

Was Grover Cleveland married in the whitehouse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d128>.answer
_____________________________ test_yesno[param168] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d170>, (<src.tfidf.TF_IDF object at 0x105acbad0>, set(['cleveland', 'grover'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d170>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41958567500114441, {u'tokens': [u'Grover', u'Cleveland', u'was', u'the', u'second', u'President', u'married', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'married', u'in', u'the', u'White', u'House', u'itself', u'On', u'June', u'2', u',', u'1886', u',', u'Cleveland', u'married', u'Frances', u'Cornelia', u'Folsom', u',', u'the', u'daughter', u'of', u'his', u'former', u'law', u'partner', u',', u'in', u'the', u'Blue', u'Room', u'in', u'the', u'White', u'House', u'.'], u'lemmas': [u'Grover', u'Cleveland', u'be', u'the', u'second', u'President', u'marry', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'marry', u'in', u'the', u'White', u'House', u'itself', u'on', u'June', u'2', u',', u'1886', u',', u'Cleveland', u'marry', u'Frances', u'Cornelia', u'Folsom', u',', u'the', u'daughter', u'of', u'he', u'former', u'law', u'partner', u',', u'in', u'the', u'Blue', u'Room', u'in', u'the', u'White', u'House', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'VBN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NNP', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'PRP', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[9955, 9961], [9962, 9971], [9972, 9975], [9976, 9979], [9980, 9986], [9987, 9996], [9997, 10004], [10005, 10007], [10008, 10014], [10014, 10015], [10016, 10019], [10020, 10023], [10024, 10028], [10029, 10038], [10039, 10046], [10047, 10049], [10050, 10053], [10054, 10059], [10060, 10065], [10066, 10072], [10074, 10076], [10077, 10081], [10082, 10083], [10083, 10084], [10085, 10089], [10089, 10090], [10091, 10100], [10101, 10108], [10109, 10116], [10117, 10125], [10126, 10132], [10132, 10133], [10134, 10137], [10138, 10146], [10147, 10149], [10150, 10153], [10154, 10160], [10161, 10164], [10165, 10172], [10172, 10173], [10174, 10176], [10177, 10180], [10181, 10185], [10186, 10190], [10191, 10193], [10194, 10197], [10198, 10203], [10204, 10209], [10209, 10210]]}) 
answer: set([u'whitehouse'])
candidate Sentence: (0.23480382561683655, {u'tokens': [u'He', u'was', u'the', u'second', u'President', u'to', u'marry', u'while', u'in', u'office', u',', u'and', u'the', u'only', u'President', u'to', u'have', u'a', u'wedding', u'in', u'the', u'White', u'House', u'itself', u'.'], u'lemmas': [u'he', u'be', u'the', u'second', u'president', u'to', u'marry', u'while', u'in', u'office', u',', u'and', u'the', u'only', u'president', u'to', u'have', u'a', u'wedding', u'in', u'the', u'White', u'House', u'itself', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'TO', u'VB', u'IN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'PRP', u'.'], u'char_offsets': [[10211, 10213], [10214, 10217], [10218, 10221], [10222, 10228], [10229, 10238], [10239, 10241], [10242, 10247], [10248, 10253], [10254, 10256], [10257, 10263], [10263, 10264], [10265, 10268], [10269, 10272], [10273, 10277], [10278, 10287], [10288, 10290], [10291, 10295], [10296, 10297], [10298, 10305], [10306, 10308], [10309, 10312], [10313, 10318], [10319, 10324], [10325, 10331], [10331, 10332]]}) 
answer: set([u'whitehouse'])
candidate Sentence: (0.19094778597354889, {u'tokens': [u'The', u'derisive', u'phrase', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?', u"''"], u'lemmas': [u'the', u'derisive', u'phrase', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?', u"''"], u'pos': [u'DT', u'JJ', u'NN', u'``', u'NNP', u',', u'NNP', u',', u'WRB', u'POS', u'PRP$', u'NNP', u'.', u"''"], u'char_offsets': [[3795, 3798], [3799, 3807], [3808, 3814], [3815, 3816], [3816, 3818], [3818, 3819], [3820, 3822], [3822, 3823], [3824, 3829], [3829, 3831], [3832, 3834], [3835, 3837], [3837, 3838], [3838, 3839]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.17995655536651611, {u'tokens': [u'Statue', u'of', u'Grover', u'Cleveland', u'outside', u'City', u'Hall', u'in', u'Buffalo', u',', u'New', u'York', u'*', u'Cleveland', u',', u'Grover', u'.'], u'lemmas': [u'Statue', u'of', u'Grover', u'Cleveland', u'outside', u'City', u'Hall', u'in', u'Buffalo', u',', u'New', u'York', u'*', u'Cleveland', u',', u'Grover', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[20697, 20703], [20704, 20706], [20707, 20713], [20714, 20723], [20724, 20731], [20732, 20736], [20737, 20741], [20742, 20744], [20745, 20752], [20752, 20753], [20754, 20757], [20758, 20762], [20763, 20764], [20765, 20774], [20774, 20775], [20776, 20782], [20782, 20783]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.1567937433719635, {u'tokens': [u'After', u'Cleveland', u"'s", u'election', u'as', u'President', u',', u'Democratic', u'newspapers', u'added', u'a', u'line', u'to', u'the', u'chant', u'used', u'against', u'Cleveland', u'and', u'made', u'it', u':', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?'], u'lemmas': [u'after', u'Cleveland', u"'s", u'election', u'as', u'President', u',', u'democratic', u'newspaper', u'add', u'a', u'line', u'to', u'the', u'chant', u'use', u'against', u'Cleveland', u'and', u'make', u'it', u':', u'``', u'Ma', u',', u'Ma', u',', u'where', u"'s", u'my', u'Pa', u'?'], u'pos': [u'IN', u'NNP', u'POS', u'NN', u'IN', u'NNP', u',', u'JJ', u'NNS', u'VBD', u'DT', u'NN', u'TO', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'CC', u'VBD', u'PRP', u':', u'``', u'NNP', u',', u'NNP', u',', u'WRB', u'POS', u'PRP$', u'NNP', u'.'], u'char_offsets': [[4375, 4380], [4381, 4390], [4390, 4392], [4393, 4401], [4402, 4404], [4405, 4414], [4414, 4415], [4416, 4426], [4427, 4437], [4438, 4443], [4444, 4445], [4446, 4450], [4451, 4453], [4454, 4457], [4458, 4463], [4464, 4468], [4469, 4476], [4477, 4486], [4487, 4490], [4491, 4495], [4496, 4498], [4498, 4499], [4500, 4501], [4501, 4503], [4503, 4504], [4505, 4507], [4507, 4508], [4509, 4514], [4514, 4516], [4517, 4519], [4520, 4522], [4522, 4523]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.11759912222623825, {u'tokens': [u'In', u'1871', u'Grover', u'Cleveland', u'was', u'elected', u'Sheriff', u'of', u'Erie', u'County', u',', u'New', u'York', u'.'], u'lemmas': [u'in', u'1871', u'Grover', u'Cleveland', u'be', u'elect', u'Sheriff', u'of', u'Erie', u'County', u',', u'New', u'York', u'.'], u'pos': [u'IN', u'CD', u'NNP', u'NNP', u'VBD', u'VBN', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[2813, 2815], [2816, 2820], [2821, 2827], [2828, 2837], [2838, 2841], [2842, 2849], [2850, 2857], [2858, 2860], [2861, 2865], [2866, 2872], [2872, 2873], [2874, 2877], [2878, 2882], [2882, 2883]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.093864090740680695, {u'tokens': [u'Oil', u'painting', u'of', u'Grover', u'Cleveland', u',', u'painted', u'in', u'1899', u'by', u'Anders', u'Zorn', u'.'], u'lemmas': [u'Oil', u'painting', u'of', u'Grover', u'Cleveland', u',', u'paint', u'in', u'1899', u'by', u'Anders', u'Zorn', u'.'], u'pos': [u'NNP', u'NN', u'IN', u'NNP', u'NNP', u',', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[19055, 19058], [19059, 19067], [19068, 19070], [19071, 19077], [19078, 19087], [19087, 19088], [19089, 19096], [19097, 19099], [19100, 19104], [19105, 19107], [19108, 19114], [19115, 19119], [19119, 19120]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.084766864776611328, {u'tokens': [u'*', u'Graff', u',', u'Henry', u'F.', u'Grover', u'Cleveland', u'-LRB-', u'2002', u'-RRB-', u',', u'short', u'overview', u'.'], u'lemmas': [u'*', u'graff', u',', u'Henry', u'F.', u'Grover', u'Cleveland', u'-lrb-', u'2002', u'-rrb-', u',', u'short', u'overview', u'.'], u'pos': [u'SYM', u'NN', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u',', u'JJ', u'NN', u'.'], u'char_offsets': [[21092, 21093], [21094, 21099], [21099, 21100], [21101, 21106], [21107, 21109], [21110, 21116], [21117, 21126], [21127, 21128], [21128, 21132], [21132, 21133], [21133, 21134], [21135, 21140], [21141, 21149], [21149, 21150]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.084179505705833435, {u'tokens': [u'An', u'early', u',', u'undated', u'photograph', u'of', u'Grover', u'Cleveland', u'from', u'the', u'Cleveland', u'Family', u'Papers', u'at', u'the', u'New', u'Jersey', u'Archives', u'.'], u'lemmas': [u'a', u'early', u',', u'undated', u'photograph', u'of', u'Grover', u'Cleveland', u'from', u'the', u'Cleveland', u'Family', u'Papers', u'at', u'the', u'New', u'Jersey', u'Archives', u'.'], u'pos': [u'DT', u'RB', u',', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[1333, 1335], [1336, 1341], [1341, 1342], [1343, 1350], [1351, 1361], [1362, 1364], [1365, 1371], [1372, 1381], [1382, 1386], [1387, 1390], [1391, 1400], [1401, 1407], [1408, 1414], [1415, 1417], [1418, 1421], [1422, 1425], [1426, 1432], [1433, 1441], [1441, 1442]]}) 
answer: set([u'marry', u'whitehouse'])
candidate Sentence: (0.077448904514312744, {u'tokens': [u'He', u'was', u'named', u'Stephen', u'Grover', u'in', u'honor', u'of', u'the', u'first', u'pastor', u'of', u'the', u'First', u'Presbyterian', u'Church', u'of', u'Caldwell', u',', u'where', u'his', u'father', u'was', u'pastor', u'at', u'the', u'time', u'.'], u'lemmas': [u'he', u'be', u'name', u'Stephen', u'Grover', u'in', u'honor', u'of', u'the', u'first', u'pastor', u'of', u'the', u'First', u'Presbyterian', u'Church', u'of', u'Caldwell', u',', u'where', u'he', u'father', u'be', u'pastor', u'at', u'the', u'time', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'NNP', u'NNP', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u',', u'WRB', u'PRP$', u'NN', u'VBD', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1602, 1604], [1605, 1608], [1609, 1614], [1615, 1622], [1623, 1629], [1630, 1632], [1633, 1638], [1639, 1641], [1642, 1645], [1646, 1651], [1652, 1658], [1659, 1661], [1662, 1665], [1666, 1671], [1672, 1684], [1685, 1691], [1692, 1694], [1695, 1703], [1703, 1704], [1705, 1710], [1711, 1714], [1715, 1721], [1722, 1725], [1726, 1732], [1733, 1735], [1736, 1739], [1740, 1744], [1744, 1745]]}) 
answer: set([u'marry', u'whitehouse'])

Was Grover Cleveland married in the whitehouse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d170>.answer
_____________________________ test_yesno[param174] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d320>, (<src.tfidf.TF_IDF object at 0x1059455d0>, set(['james', 'james_monroe', 'monroe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8d320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31833896040916443, {u'tokens': [u'James', u'Monroe', u'-LRB-', u'April', u'28', u',', u'1758', u'--', u'July', u'4', u',', u'1831', u'-RRB-', u'was', u'the', u'fifth', u'President', u'of', u'the', u'United', u'States', u'-LRB-', u'1817-1825', u'-RRB-', u'.'], u'lemmas': [u'James', u'Monroe', u'-lrb-', u'April', u'28', u',', u'1758', u'--', u'July', u'4', u',', u'1831', u'-rrb-', u'be', u'the', u'fifth', u'president', u'of', u'the', u'United', u'States', u'-lrb-', u'1817-1825', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[0, 5], [6, 12], [13, 14], [14, 19], [20, 22], [22, 23], [24, 28], [29, 30], [31, 35], [36, 37], [37, 38], [39, 43], [43, 44], [45, 48], [49, 52], [53, 58], [59, 68], [69, 71], [72, 75], [76, 82], [83, 89], [90, 91], [91, 100], [100, 101], [101, 102]]}) 
answer: set([u'monrow', u'us'])
candidate Sentence: (0.1968306303024292, {u'tokens': [u'*', u'Monroe', u',', u'James', u'.'], u'lemmas': [u'*', u'Monroe', u',', u'James', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[13804, 13805], [13806, 13812], [13812, 13813], [13814, 13819], [13819, 13820]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.16786500811576843, {u'tokens': [u'He', u'was', u'alarmed', u'at', u'Spanish', u'diplomat', u'Diego', u'Mar\xeda', u'de', u'Gardoqui', u',', u'involving', u'a', u'US', u'attempt', u'to', u'secure', u'the', u'opening', u'of', u'the', u'Mississippi', u'River', u'to', u'American', u'commerce', u'.'], u'lemmas': [u'he', u'be', u'alarm', u'at', u'spanish', u'diplomat', u'diego', u'Mar\xeda', u'de', u'Gardoqui', u',', u'involve', u'a', u'US', u'attempt', u'to', u'secure', u'the', u'opening', u'of', u'the', u'Mississippi', u'River', u'to', u'American', u'commerce', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'JJ', u'NNP', u'IN', u'NNP', u',', u'VBG', u'DT', u'NNP', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'NNP', u'NN', u'.'], u'char_offsets': [[11723, 11725], [11726, 11729], [11730, 11737], [11738, 11740], [11741, 11748], [11749, 11757], [11758, 11763], [11764, 11769], [11770, 11772], [11773, 11781], [11781, 11782], [11783, 11792], [11793, 11794], [11795, 11797], [11798, 11805], [11806, 11808], [11809, 11815], [11816, 11819], [11820, 11827], [11828, 11830], [11831, 11834], [11835, 11846], [11847, 11852], [11853, 11855], [11856, 11864], [11865, 11873], [11873, 11874]]}) 
answer: set([u'president', u'monrow', u'fifth'])
candidate Sentence: (0.13219118118286133, {u'tokens': [u'*', u'Monroe', u'is', u'considered', u'to', u'be', u'the', u'president', u'who', u'was', u'in', u'the', u'most', u'paintings', u';', u'throughout', u'the', u'1800s', u'he', u'was', u'in', u'over', u'350', u'.'], u'lemmas': [u'*', u'Monroe', u'be', u'consider', u'to', u'be', u'the', u'president', u'who', u'be', u'in', u'the', u'most', u'painting', u';', u'throughout', u'the', u'1800', u'he', u'be', u'in', u'over', u'350', u'.'], u'pos': [u'SYM', u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'WP', u'VBD', u'IN', u'DT', u'RBS', u'NNS', u':', u'IN', u'DT', u'NNS', u'PRP', u'VBD', u'IN', u'IN', u'CD', u'.'], u'char_offsets': [[9827, 9828], [9829, 9835], [9836, 9838], [9839, 9849], [9850, 9852], [9853, 9855], [9856, 9859], [9860, 9869], [9870, 9873], [9874, 9877], [9878, 9880], [9881, 9884], [9885, 9889], [9890, 9899], [9899, 9900], [9901, 9911], [9912, 9915], [9916, 9921], [9922, 9924], [9925, 9928], [9929, 9931], [9932, 9936], [9937, 9940], [9940, 9941]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.12253463268280029, {u'tokens': [u'Following', u'the', u'War', u'of', u'1812', u',', u'Monroe', u'was', u'elected', u'president', u'in', u'the', u'election', u'of', u'1816', u',', u'and', u're-elected', u'in', u'1820', u'.'], u'lemmas': [u'follow', u'the', u'war', u'of', u'1812', u',', u'Monroe', u'be', u'elect', u'president', u'in', u'the', u'election', u'of', u'1816', u',', u'and', u're-elected', u'in', u'1820', u'.'], u'pos': [u'VBG', u'DT', u'NN', u'IN', u'CD', u',', u'NNP', u'VBD', u'VBN', u'NN', u'IN', u'DT', u'NN', u'IN', u'CD', u',', u'CC', u'JJ', u'IN', u'CD', u'.'], u'char_offsets': [[3101, 3110], [3111, 3114], [3115, 3118], [3119, 3121], [3122, 3126], [3126, 3127], [3128, 3134], [3135, 3138], [3139, 3146], [3147, 3156], [3157, 3159], [3160, 3163], [3164, 3172], [3173, 3175], [3176, 3180], [3180, 3181], [3182, 3185], [3186, 3196], [3197, 3199], [3200, 3204], [3204, 3205]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.11054567992687225, {u'tokens': [u'The', u'Political', u'Writings', u'of', u'James', u'Monroe', u'.'], u'lemmas': [u'the', u'political', u'writings', u'of', u'James', u'Monroe', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[13821, 13824], [13825, 13834], [13835, 13843], [13844, 13846], [13847, 13852], [13853, 13859], [13859, 13860]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.082994349300861359, {u'tokens': [u'*', u'Monroe', u'was', u'-LRB-', u'arguably', u'-RRB-', u'the', u'last', u'president', u'to', u'have', u'fought', u'in', u'the', u'Revolutionary', u'War', u',', u'although', u'Andrew', u'Jackson', u'served', u'as', u'a', u'13-year-old', u'courier', u'in', u'the', u'Continental', u'Army', u'and', u'was', u'taken', u'as', u'a', u'prisoner', u'of', u'war', u'by', u'the', u'British', u'.'], u'lemmas': [u'*', u'Monroe', u'be', u'-lrb-', u'arguably', u'-rrb-', u'the', u'last', u'president', u'to', u'have', u'fight', u'in', u'the', u'Revolutionary', u'War', u',', u'although', u'Andrew', u'Jackson', u'serve', u'as', u'a', u'13-year-old', u'courier', u'in', u'the', u'Continental', u'Army', u'and', u'be', u'take', u'as', u'a', u'prisoner', u'of', u'war', u'by', u'the', u'British', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'-LRB-', u'RB', u'-RRB-', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u',', u'IN', u'NNP', u'NNP', u'VBD', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[9612, 9613], [9614, 9620], [9621, 9624], [9625, 9626], [9626, 9634], [9634, 9635], [9636, 9639], [9640, 9644], [9645, 9654], [9655, 9657], [9658, 9662], [9663, 9669], [9670, 9672], [9673, 9676], [9677, 9690], [9691, 9694], [9694, 9695], [9696, 9704], [9705, 9711], [9712, 9719], [9720, 9726], [9727, 9729], [9730, 9731], [9732, 9743], [9744, 9751], [9752, 9754], [9755, 9758], [9759, 9770], [9771, 9775], [9776, 9779], [9780, 9783], [9784, 9789], [9790, 9792], [9793, 9794], [9795, 9803], [9804, 9806], [9807, 9810], [9811, 9813], [9814, 9817], [9818, 9825], [9825, 9826]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.081390529870986938, {u'tokens': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appointed', u'the', u'following', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'When', u'his', u'presidency', u'expired', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'lived', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'lemmas': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appoint', u'the', u'follow', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'when', u'he', u'presidency', u'expire', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'live', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'VBG', u'NNPS', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u':', u'WRB', u'PRP$', u'NN', u'VBD', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[6618, 6626], [6627, 6632], [6633, 6638], [6639, 6647], [6648, 6650], [6651, 6656], [6657, 6663], [6664, 6670], [6671, 6680], [6681, 6684], [6685, 6694], [6695, 6703], [6704, 6706], [6707, 6710], [6711, 6718], [6719, 6724], [6725, 6727], [6728, 6731], [6732, 6738], [6739, 6745], [6745, 6746], [6747, 6751], [6752, 6755], [6756, 6766], [6767, 6774], [6775, 6777], [6778, 6783], [6784, 6785], [6785, 6786], [6787, 6791], [6791, 6792], [6793, 6798], [6799, 6805], [6806, 6811], [6812, 6814], [6815, 6821], [6822, 6826], [6827, 6829], [6830, 6833], [6834, 6841], [6842, 6844], [6845, 6848], [6849, 6859], [6860, 6862], [6863, 6871], [6871, 6872]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.081385582685470581, {u'tokens': [u'His', u'death', u'came', u'55', u'years', u'after', u'the', u'U.S.', u'Declaration', u'of', u'Independence', u'was', u'proclaimed', u'and', u'5', u'years', u'after', u'the', u'death', u'of', u'Presidents', u'John', u'Adams', u'and', u'Thomas', u'Jefferson', u'.'], u'lemmas': [u'he', u'death', u'come', u'55', u'year', u'after', u'the', u'U.S.', u'declaration', u'of', u'independence', u'be', u'proclaimed', u'and', u'5', u'year', u'after', u'the', u'death', u'of', u'president', u'John', u'Adams', u'and', u'Thomas', u'Jefferson', u'.'], u'pos': [u'PRP$', u'NN', u'VBD', u'CD', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NN', u'VBD', u'JJ', u'CC', u'CD', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[7959, 7962], [7963, 7968], [7969, 7973], [7974, 7976], [7977, 7982], [7983, 7988], [7989, 7992], [7993, 7997], [7998, 8009], [8010, 8012], [8013, 8025], [8026, 8029], [8030, 8040], [8041, 8044], [8045, 8046], [8047, 8052], [8053, 8058], [8059, 8062], [8063, 8068], [8069, 8071], [8072, 8082], [8083, 8087], [8088, 8093], [8094, 8097], [8098, 8104], [8105, 8114], [8114, 8115]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.078018806874752045, {u'tokens': [u'James', u'P.', u'Lucier', u',', u'ed', u'.'], u'lemmas': [u'James', u'P.', u'Lucier', u',', u'ed', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'VBD', u'.'], u'char_offsets': [[13861, 13866], [13867, 13869], [13870, 13876], [13876, 13877], [13878, 13880], [13880, 13881]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])

Is James Monrow the fifth president of US?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8d320>.answer
_____________________________ test_yesno[param175] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d368>, (<src.tfidf.TF_IDF object at 0x1059455d0>, set(['james', 'james_monroe', 'monroe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31833896040916443, {u'tokens': [u'James', u'Monroe', u'-LRB-', u'April', u'28', u',', u'1758', u'--', u'July', u'4', u',', u'1831', u'-RRB-', u'was', u'the', u'fifth', u'President', u'of', u'the', u'United', u'States', u'-LRB-', u'1817-1825', u'-RRB-', u'.'], u'lemmas': [u'James', u'Monroe', u'-lrb-', u'April', u'28', u',', u'1758', u'--', u'July', u'4', u',', u'1831', u'-rrb-', u'be', u'the', u'fifth', u'president', u'of', u'the', u'United', u'States', u'-lrb-', u'1817-1825', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[0, 5], [6, 12], [13, 14], [14, 19], [20, 22], [22, 23], [24, 28], [29, 30], [31, 35], [36, 37], [37, 38], [39, 43], [43, 44], [45, 48], [49, 52], [53, 58], [59, 68], [69, 71], [72, 75], [76, 82], [83, 89], [90, 91], [91, 100], [100, 101], [101, 102]]}) 
answer: set([u'monrow', u'us'])
candidate Sentence: (0.1968306303024292, {u'tokens': [u'*', u'Monroe', u',', u'James', u'.'], u'lemmas': [u'*', u'Monroe', u',', u'James', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[13804, 13805], [13806, 13812], [13812, 13813], [13814, 13819], [13819, 13820]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.16786500811576843, {u'tokens': [u'He', u'was', u'alarmed', u'at', u'Spanish', u'diplomat', u'Diego', u'Mar\xeda', u'de', u'Gardoqui', u',', u'involving', u'a', u'US', u'attempt', u'to', u'secure', u'the', u'opening', u'of', u'the', u'Mississippi', u'River', u'to', u'American', u'commerce', u'.'], u'lemmas': [u'he', u'be', u'alarm', u'at', u'spanish', u'diplomat', u'diego', u'Mar\xeda', u'de', u'Gardoqui', u',', u'involve', u'a', u'US', u'attempt', u'to', u'secure', u'the', u'opening', u'of', u'the', u'Mississippi', u'River', u'to', u'American', u'commerce', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'JJ', u'NNP', u'IN', u'NNP', u',', u'VBG', u'DT', u'NNP', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'NNP', u'NN', u'.'], u'char_offsets': [[11723, 11725], [11726, 11729], [11730, 11737], [11738, 11740], [11741, 11748], [11749, 11757], [11758, 11763], [11764, 11769], [11770, 11772], [11773, 11781], [11781, 11782], [11783, 11792], [11793, 11794], [11795, 11797], [11798, 11805], [11806, 11808], [11809, 11815], [11816, 11819], [11820, 11827], [11828, 11830], [11831, 11834], [11835, 11846], [11847, 11852], [11853, 11855], [11856, 11864], [11865, 11873], [11873, 11874]]}) 
answer: set([u'president', u'monrow', u'fifth'])
candidate Sentence: (0.13219118118286133, {u'tokens': [u'*', u'Monroe', u'is', u'considered', u'to', u'be', u'the', u'president', u'who', u'was', u'in', u'the', u'most', u'paintings', u';', u'throughout', u'the', u'1800s', u'he', u'was', u'in', u'over', u'350', u'.'], u'lemmas': [u'*', u'Monroe', u'be', u'consider', u'to', u'be', u'the', u'president', u'who', u'be', u'in', u'the', u'most', u'painting', u';', u'throughout', u'the', u'1800', u'he', u'be', u'in', u'over', u'350', u'.'], u'pos': [u'SYM', u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'WP', u'VBD', u'IN', u'DT', u'RBS', u'NNS', u':', u'IN', u'DT', u'NNS', u'PRP', u'VBD', u'IN', u'IN', u'CD', u'.'], u'char_offsets': [[9827, 9828], [9829, 9835], [9836, 9838], [9839, 9849], [9850, 9852], [9853, 9855], [9856, 9859], [9860, 9869], [9870, 9873], [9874, 9877], [9878, 9880], [9881, 9884], [9885, 9889], [9890, 9899], [9899, 9900], [9901, 9911], [9912, 9915], [9916, 9921], [9922, 9924], [9925, 9928], [9929, 9931], [9932, 9936], [9937, 9940], [9940, 9941]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.12253463268280029, {u'tokens': [u'Following', u'the', u'War', u'of', u'1812', u',', u'Monroe', u'was', u'elected', u'president', u'in', u'the', u'election', u'of', u'1816', u',', u'and', u're-elected', u'in', u'1820', u'.'], u'lemmas': [u'follow', u'the', u'war', u'of', u'1812', u',', u'Monroe', u'be', u'elect', u'president', u'in', u'the', u'election', u'of', u'1816', u',', u'and', u're-elected', u'in', u'1820', u'.'], u'pos': [u'VBG', u'DT', u'NN', u'IN', u'CD', u',', u'NNP', u'VBD', u'VBN', u'NN', u'IN', u'DT', u'NN', u'IN', u'CD', u',', u'CC', u'JJ', u'IN', u'CD', u'.'], u'char_offsets': [[3101, 3110], [3111, 3114], [3115, 3118], [3119, 3121], [3122, 3126], [3126, 3127], [3128, 3134], [3135, 3138], [3139, 3146], [3147, 3156], [3157, 3159], [3160, 3163], [3164, 3172], [3173, 3175], [3176, 3180], [3180, 3181], [3182, 3185], [3186, 3196], [3197, 3199], [3200, 3204], [3204, 3205]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.11054567992687225, {u'tokens': [u'The', u'Political', u'Writings', u'of', u'James', u'Monroe', u'.'], u'lemmas': [u'the', u'political', u'writings', u'of', u'James', u'Monroe', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[13821, 13824], [13825, 13834], [13835, 13843], [13844, 13846], [13847, 13852], [13853, 13859], [13859, 13860]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.082994349300861359, {u'tokens': [u'*', u'Monroe', u'was', u'-LRB-', u'arguably', u'-RRB-', u'the', u'last', u'president', u'to', u'have', u'fought', u'in', u'the', u'Revolutionary', u'War', u',', u'although', u'Andrew', u'Jackson', u'served', u'as', u'a', u'13-year-old', u'courier', u'in', u'the', u'Continental', u'Army', u'and', u'was', u'taken', u'as', u'a', u'prisoner', u'of', u'war', u'by', u'the', u'British', u'.'], u'lemmas': [u'*', u'Monroe', u'be', u'-lrb-', u'arguably', u'-rrb-', u'the', u'last', u'president', u'to', u'have', u'fight', u'in', u'the', u'Revolutionary', u'War', u',', u'although', u'Andrew', u'Jackson', u'serve', u'as', u'a', u'13-year-old', u'courier', u'in', u'the', u'Continental', u'Army', u'and', u'be', u'take', u'as', u'a', u'prisoner', u'of', u'war', u'by', u'the', u'British', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'-LRB-', u'RB', u'-RRB-', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u',', u'IN', u'NNP', u'NNP', u'VBD', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[9612, 9613], [9614, 9620], [9621, 9624], [9625, 9626], [9626, 9634], [9634, 9635], [9636, 9639], [9640, 9644], [9645, 9654], [9655, 9657], [9658, 9662], [9663, 9669], [9670, 9672], [9673, 9676], [9677, 9690], [9691, 9694], [9694, 9695], [9696, 9704], [9705, 9711], [9712, 9719], [9720, 9726], [9727, 9729], [9730, 9731], [9732, 9743], [9744, 9751], [9752, 9754], [9755, 9758], [9759, 9770], [9771, 9775], [9776, 9779], [9780, 9783], [9784, 9789], [9790, 9792], [9793, 9794], [9795, 9803], [9804, 9806], [9807, 9810], [9811, 9813], [9814, 9817], [9818, 9825], [9825, 9826]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.081390529870986938, {u'tokens': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appointed', u'the', u'following', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'When', u'his', u'presidency', u'expired', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'lived', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'lemmas': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appoint', u'the', u'follow', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'when', u'he', u'presidency', u'expire', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'live', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'VBG', u'NNPS', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u':', u'WRB', u'PRP$', u'NN', u'VBD', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[6618, 6626], [6627, 6632], [6633, 6638], [6639, 6647], [6648, 6650], [6651, 6656], [6657, 6663], [6664, 6670], [6671, 6680], [6681, 6684], [6685, 6694], [6695, 6703], [6704, 6706], [6707, 6710], [6711, 6718], [6719, 6724], [6725, 6727], [6728, 6731], [6732, 6738], [6739, 6745], [6745, 6746], [6747, 6751], [6752, 6755], [6756, 6766], [6767, 6774], [6775, 6777], [6778, 6783], [6784, 6785], [6785, 6786], [6787, 6791], [6791, 6792], [6793, 6798], [6799, 6805], [6806, 6811], [6812, 6814], [6815, 6821], [6822, 6826], [6827, 6829], [6830, 6833], [6834, 6841], [6842, 6844], [6845, 6848], [6849, 6859], [6860, 6862], [6863, 6871], [6871, 6872]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])
candidate Sentence: (0.081385582685470581, {u'tokens': [u'His', u'death', u'came', u'55', u'years', u'after', u'the', u'U.S.', u'Declaration', u'of', u'Independence', u'was', u'proclaimed', u'and', u'5', u'years', u'after', u'the', u'death', u'of', u'Presidents', u'John', u'Adams', u'and', u'Thomas', u'Jefferson', u'.'], u'lemmas': [u'he', u'death', u'come', u'55', u'year', u'after', u'the', u'U.S.', u'declaration', u'of', u'independence', u'be', u'proclaimed', u'and', u'5', u'year', u'after', u'the', u'death', u'of', u'president', u'John', u'Adams', u'and', u'Thomas', u'Jefferson', u'.'], u'pos': [u'PRP$', u'NN', u'VBD', u'CD', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NN', u'VBD', u'JJ', u'CC', u'CD', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[7959, 7962], [7963, 7968], [7969, 7973], [7974, 7976], [7977, 7982], [7983, 7988], [7989, 7992], [7993, 7997], [7998, 8009], [8010, 8012], [8013, 8025], [8026, 8029], [8030, 8040], [8041, 8044], [8045, 8046], [8047, 8052], [8053, 8058], [8059, 8062], [8063, 8068], [8069, 8071], [8072, 8082], [8083, 8087], [8088, 8093], [8094, 8097], [8098, 8104], [8105, 8114], [8114, 8115]]}) 
answer: set([u'monrow', u'us', u'fifth'])
candidate Sentence: (0.078018806874752045, {u'tokens': [u'James', u'P.', u'Lucier', u',', u'ed', u'.'], u'lemmas': [u'James', u'P.', u'Lucier', u',', u'ed', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u',', u'VBD', u'.'], u'char_offsets': [[13861, 13866], [13867, 13869], [13870, 13876], [13876, 13877], [13878, 13880], [13880, 13881]]}) 
answer: set([u'president', u'monrow', u'us', u'fifth'])

Is James Monrow the fifth president of US?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa8d368>.answer
_____________________________ test_yesno[param178] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d440>, (<src.tfidf.TF_IDF object at 0x1059455d0>, set(['james', 'james_monroe', 'monroe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa8d440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31656402349472046, {u'tokens': [u'Born', u'in', u'Westmoreland', u'County', u',', u'Virginia', u',', u'Monroe', u'went', u'to', u'school', u'at', u'Campbelltown', u'Academy', u'and', u'then', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'both', u'in', u'Virginia', u'.'], u'lemmas': [u'bear', u'in', u'Westmoreland', u'County', u',', u'Virginia', u',', u'Monroe', u'go', u'to', u'school', u'at', u'Campbelltown', u'Academy', u'and', u'then', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'both', u'in', u'Virginia', u'.'], u'pos': [u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'NNP', u'VBD', u'TO', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'RB', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u',', u'DT', u'IN', u'NNP', u'.'], u'char_offsets': [[585, 589], [590, 592], [593, 605], [606, 612], [612, 613], [614, 622], [622, 623], [624, 630], [631, 635], [636, 638], [639, 645], [646, 648], [649, 661], [662, 669], [670, 673], [674, 678], [679, 682], [683, 690], [691, 693], [694, 701], [702, 705], [706, 710], [710, 711], [712, 716], [717, 719], [720, 728], [728, 729]]}) 
answer: set([u'attend'])
candidate Sentence: (0.24025389552116394, {u'tokens': [u'As', u'a', u'result', u',', u'he', u'was', u'forced', u'to', u'sell', u'off', u'his', u'Highland', u'Plantation', u'-LRB-', u'now', u'called', u'Ash', u'Lawn-Highland', u';', u'it', u'is', u'owned', u'by', u'his', u'alma', u'mater', u',', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'which', u'has', u'opened', u'it', u'to', u'the', u'public', u'-RRB-', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'he', u'be', u'force', u'to', u'sell', u'off', u'he', u'Highland', u'Plantation', u'-lrb-', u'now', u'call', u'Ash', u'Lawn-Highland', u';', u'it', u'be', u'own', u'by', u'he', u'alma', u'mater', u',', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'which', u'have', u'open', u'it', u'to', u'the', u'public', u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'PRP', u'VBD', u'VBN', u'TO', u'VB', u'RP', u'PRP$', u'NNP', u'NNP', u'-LRB-', u'RB', u'VBN', u'NNP', u'NNP', u':', u'PRP', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u',', u'WDT', u'VBZ', u'VBN', u'PRP', u'TO', u'DT', u'NN', u'-RRB-', u'.'], u'char_offsets': [[7246, 7248], [7249, 7250], [7251, 7257], [7257, 7258], [7259, 7261], [7262, 7265], [7266, 7272], [7273, 7275], [7276, 7280], [7281, 7284], [7285, 7288], [7289, 7297], [7298, 7308], [7309, 7310], [7310, 7313], [7314, 7320], [7321, 7324], [7325, 7338], [7338, 7339], [7340, 7342], [7343, 7345], [7346, 7351], [7352, 7354], [7355, 7358], [7359, 7363], [7364, 7369], [7369, 7370], [7371, 7374], [7375, 7382], [7383, 7385], [7386, 7393], [7394, 7397], [7398, 7402], [7402, 7403], [7404, 7409], [7410, 7413], [7414, 7420], [7421, 7423], [7424, 7426], [7427, 7430], [7431, 7437], [7437, 7438], [7438, 7439]]}) 
answer: set([u'attend'])
candidate Sentence: (0.18610171973705292, {u'tokens': [u'*', u'Monroe', u',', u'James', u'.'], u'lemmas': [u'*', u'Monroe', u',', u'James', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[13804, 13805], [13806, 13812], [13812, 13813], [13814, 13819], [13819, 13820]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.17568622529506683, {u'tokens': [u'After', u'graduating', u'from', u'William', u'and', u'Mary', u'in', u'1776', u',', u'Monroe', u'fought', u'in', u'the', u'Continental', u'Army', u',', u'serving', u'with', u'distinction', u'at', u'the', u'Battle', u'of', u'Trenton', u',', u'where', u'he', u'was', u'shot', u'in', u'his', u'left', u'shoulder', u'.'], u'lemmas': [u'after', u'graduate', u'from', u'William', u'and', u'Mary', u'in', u'1776', u',', u'Monroe', u'fight', u'in', u'the', u'Continental', u'Army', u',', u'serve', u'with', u'distinction', u'at', u'the', u'battle', u'of', u'Trenton', u',', u'where', u'he', u'be', u'shoot', u'in', u'he', u'left', u'shoulder', u'.'], u'pos': [u'IN', u'VBG', u'IN', u'NNP', u'CC', u'NNP', u'IN', u'CD', u',', u'NNP', u'VBD', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'WRB', u'PRP', u'VBD', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[731, 736], [737, 747], [748, 752], [753, 760], [761, 764], [765, 769], [770, 772], [773, 777], [777, 778], [779, 785], [786, 792], [793, 795], [796, 799], [800, 811], [812, 816], [816, 817], [818, 825], [826, 830], [831, 842], [843, 845], [846, 849], [850, 856], [857, 859], [860, 867], [867, 868], [869, 874], [875, 877], [878, 881], [882, 886], [887, 889], [890, 893], [894, 898], [899, 907], [907, 908]]}) 
answer: set([u'college', u'attend'])
candidate Sentence: (0.12697288393974304, {u'tokens': [u'Monroe', u'was', u'raised', u'in', u'a', u'family', u'that', u'belonged', u'to', u'the', u'Church', u'of', u'England', u'when', u'it', u'was', u'the', u'state', u'church', u'in', u'Virginia', u',', u'and', u'as', u'an', u'adult', u'frequently', u'attended', u'Episcopalian', u'churches', u',', u'though', u'there', u'is', u'no', u'record', u'he', u'ever', u'took', u'communion', u'.'], u'lemmas': [u'Monroe', u'be', u'raise', u'in', u'a', u'family', u'that', u'belong', u'to', u'the', u'Church', u'of', u'England', u'when', u'it', u'be', u'the', u'state', u'church', u'in', u'Virginia', u',', u'and', u'as', u'a', u'adult', u'frequently', u'attend', u'episcopalian', u'church', u',', u'though', u'there', u'be', u'no', u'record', u'he', u'ever', u'take', u'communion', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'WDT', u'VBD', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'WRB', u'PRP', u'VBD', u'DT', u'NN', u'NN', u'IN', u'NNP', u',', u'CC', u'IN', u'DT', u'JJ', u'RB', u'VBD', u'JJ', u'NNS', u',', u'IN', u'EX', u'VBZ', u'DT', u'NN', u'PRP', u'RB', u'VBD', u'NN', u'.'], u'char_offsets': [[8865, 8871], [8872, 8875], [8876, 8882], [8883, 8885], [8886, 8887], [8888, 8894], [8895, 8899], [8900, 8908], [8909, 8911], [8912, 8915], [8916, 8922], [8923, 8925], [8926, 8933], [8934, 8938], [8939, 8941], [8942, 8945], [8946, 8949], [8950, 8955], [8956, 8962], [8963, 8965], [8966, 8974], [8974, 8975], [8976, 8979], [8980, 8982], [8983, 8985], [8986, 8991], [8992, 9002], [9003, 9011], [9012, 9024], [9025, 9033], [9033, 9034], [9035, 9041], [9042, 9047], [9048, 9050], [9051, 9053], [9054, 9060], [9061, 9063], [9064, 9068], [9069, 9073], [9074, 9083], [9083, 9084]]}) 
answer: set([u'william', u'college', u'mary'])
candidate Sentence: (0.10349664092063904, {u'tokens': [u'The', u'Political', u'Writings', u'of', u'James', u'Monroe', u'.'], u'lemmas': [u'the', u'political', u'writings', u'of', u'James', u'Monroe', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[13821, 13824], [13825, 13834], [13835, 13843], [13844, 13846], [13847, 13852], [13853, 13859], [13859, 13860]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.087783664464950562, {u'tokens': [u'Nor', u'did', u'his', u'friends', u',', u'family', u'or', u'associates', u'write', u'about', u'his', u'beliefs', u'.'], u'lemmas': [u'nor', u'do', u'he', u'friend', u',', u'family', u'or', u'associate', u'write', u'about', u'he', u'belief', u'.'], u'pos': [u'CC', u'VBD', u'PRP$', u'NNS', u',', u'NN', u'CC', u'NNS', u'VBP', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8676, 8679], [8680, 8683], [8684, 8687], [8688, 8695], [8695, 8696], [8697, 8703], [8704, 8706], [8707, 8717], [8718, 8723], [8724, 8729], [8730, 8733], [8734, 8741], [8741, 8742]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.08267531543970108, {u'tokens': [u'Letters', u'that', u'do', u'survive', u',', u'such', u'as', u'ones', u'written', u'on', u'the', u'occasion', u'of', u'the', u'death', u'of', u'his', u'son', u',', u'contain', u'no', u'discussion', u'of', u'religion', u'.'], u'lemmas': [u'letter', u'that', u'do', u'survive', u',', u'such', u'as', u'one', u'write', u'on', u'the', u'occasion', u'of', u'the', u'death', u'of', u'he', u'son', u',', u'contain', u'no', u'discussion', u'of', u'religion', u'.'], u'pos': [u'NNS', u'WDT', u'VBP', u'VB', u',', u'JJ', u'IN', u'NNS', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'VBP', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[8743, 8750], [8751, 8755], [8756, 8758], [8759, 8766], [8766, 8767], [8768, 8772], [8773, 8775], [8776, 8780], [8781, 8788], [8789, 8791], [8792, 8795], [8796, 8804], [8805, 8807], [8808, 8811], [8812, 8817], [8818, 8820], [8821, 8824], [8825, 8828], [8828, 8829], [8830, 8837], [8838, 8840], [8841, 8851], [8852, 8854], [8855, 8863], [8863, 8864]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.081481024622917175, {u'tokens': [u'He', u'has', u'been', u'classified', u'by', u'some', u'historians', u'as', u'a', u'Deist', u',', u'and', u'he', u'did', u'use', u'deistic', u'language', u'to', u'refer', u'to', u'God', u'.'], u'lemmas': [u'he', u'have', u'be', u'classify', u'by', u'some', u'historian', u'as', u'a', u'Deist', u',', u'and', u'he', u'do', u'use', u'deistic', u'language', u'to', u'refer', u'to', u'God', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'VBN', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'CC', u'PRP', u'VBD', u'VB', u'JJ', u'NN', u'TO', u'VB', u'TO', u'NNP', u'.'], u'char_offsets': [[9085, 9087], [9088, 9091], [9092, 9096], [9097, 9107], [9108, 9110], [9111, 9115], [9116, 9126], [9127, 9129], [9130, 9131], [9132, 9137], [9137, 9138], [9139, 9142], [9143, 9145], [9146, 9149], [9150, 9153], [9154, 9161], [9162, 9170], [9171, 9173], [9174, 9179], [9180, 9182], [9183, 9186], [9186, 9187]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.081277467310428619, {u'tokens': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appointed', u'the', u'following', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'When', u'his', u'presidency', u'expired', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'lived', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'lemmas': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appoint', u'the', u'follow', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'when', u'he', u'presidency', u'expire', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'live', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'VBG', u'NNPS', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u':', u'WRB', u'PRP$', u'NN', u'VBD', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[6618, 6626], [6627, 6632], [6633, 6638], [6639, 6647], [6648, 6650], [6651, 6656], [6657, 6663], [6664, 6670], [6671, 6680], [6681, 6684], [6685, 6694], [6695, 6703], [6704, 6706], [6707, 6710], [6711, 6718], [6719, 6724], [6725, 6727], [6728, 6731], [6732, 6738], [6739, 6745], [6745, 6746], [6747, 6751], [6752, 6755], [6756, 6766], [6767, 6774], [6775, 6777], [6778, 6783], [6784, 6785], [6785, 6786], [6787, 6791], [6791, 6792], [6793, 6798], [6799, 6805], [6806, 6811], [6812, 6814], [6815, 6821], [6822, 6826], [6827, 6829], [6830, 6833], [6834, 6841], [6842, 6844], [6845, 6848], [6849, 6859], [6860, 6862], [6863, 6871], [6871, 6872]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])

Did James Monroe attend the College of William and Mary?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa8d440>.answer
_____________________________ test_yesno[param179] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d488>, (<src.tfidf.TF_IDF object at 0x1059455d0>, set(['james', 'james_monroe', 'monroe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8d488>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31656402349472046, {u'tokens': [u'Born', u'in', u'Westmoreland', u'County', u',', u'Virginia', u',', u'Monroe', u'went', u'to', u'school', u'at', u'Campbelltown', u'Academy', u'and', u'then', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'both', u'in', u'Virginia', u'.'], u'lemmas': [u'bear', u'in', u'Westmoreland', u'County', u',', u'Virginia', u',', u'Monroe', u'go', u'to', u'school', u'at', u'Campbelltown', u'Academy', u'and', u'then', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'both', u'in', u'Virginia', u'.'], u'pos': [u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'NNP', u'VBD', u'TO', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'RB', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u',', u'DT', u'IN', u'NNP', u'.'], u'char_offsets': [[585, 589], [590, 592], [593, 605], [606, 612], [612, 613], [614, 622], [622, 623], [624, 630], [631, 635], [636, 638], [639, 645], [646, 648], [649, 661], [662, 669], [670, 673], [674, 678], [679, 682], [683, 690], [691, 693], [694, 701], [702, 705], [706, 710], [710, 711], [712, 716], [717, 719], [720, 728], [728, 729]]}) 
answer: set([u'attend'])
candidate Sentence: (0.24025389552116394, {u'tokens': [u'As', u'a', u'result', u',', u'he', u'was', u'forced', u'to', u'sell', u'off', u'his', u'Highland', u'Plantation', u'-LRB-', u'now', u'called', u'Ash', u'Lawn-Highland', u';', u'it', u'is', u'owned', u'by', u'his', u'alma', u'mater', u',', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'which', u'has', u'opened', u'it', u'to', u'the', u'public', u'-RRB-', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'he', u'be', u'force', u'to', u'sell', u'off', u'he', u'Highland', u'Plantation', u'-lrb-', u'now', u'call', u'Ash', u'Lawn-Highland', u';', u'it', u'be', u'own', u'by', u'he', u'alma', u'mater', u',', u'the', u'College', u'of', u'William', u'and', u'Mary', u',', u'which', u'have', u'open', u'it', u'to', u'the', u'public', u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'PRP', u'VBD', u'VBN', u'TO', u'VB', u'RP', u'PRP$', u'NNP', u'NNP', u'-LRB-', u'RB', u'VBN', u'NNP', u'NNP', u':', u'PRP', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u',', u'WDT', u'VBZ', u'VBN', u'PRP', u'TO', u'DT', u'NN', u'-RRB-', u'.'], u'char_offsets': [[7246, 7248], [7249, 7250], [7251, 7257], [7257, 7258], [7259, 7261], [7262, 7265], [7266, 7272], [7273, 7275], [7276, 7280], [7281, 7284], [7285, 7288], [7289, 7297], [7298, 7308], [7309, 7310], [7310, 7313], [7314, 7320], [7321, 7324], [7325, 7338], [7338, 7339], [7340, 7342], [7343, 7345], [7346, 7351], [7352, 7354], [7355, 7358], [7359, 7363], [7364, 7369], [7369, 7370], [7371, 7374], [7375, 7382], [7383, 7385], [7386, 7393], [7394, 7397], [7398, 7402], [7402, 7403], [7404, 7409], [7410, 7413], [7414, 7420], [7421, 7423], [7424, 7426], [7427, 7430], [7431, 7437], [7437, 7438], [7438, 7439]]}) 
answer: set([u'attend'])
candidate Sentence: (0.18610171973705292, {u'tokens': [u'*', u'Monroe', u',', u'James', u'.'], u'lemmas': [u'*', u'Monroe', u',', u'James', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[13804, 13805], [13806, 13812], [13812, 13813], [13814, 13819], [13819, 13820]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.17568622529506683, {u'tokens': [u'After', u'graduating', u'from', u'William', u'and', u'Mary', u'in', u'1776', u',', u'Monroe', u'fought', u'in', u'the', u'Continental', u'Army', u',', u'serving', u'with', u'distinction', u'at', u'the', u'Battle', u'of', u'Trenton', u',', u'where', u'he', u'was', u'shot', u'in', u'his', u'left', u'shoulder', u'.'], u'lemmas': [u'after', u'graduate', u'from', u'William', u'and', u'Mary', u'in', u'1776', u',', u'Monroe', u'fight', u'in', u'the', u'Continental', u'Army', u',', u'serve', u'with', u'distinction', u'at', u'the', u'battle', u'of', u'Trenton', u',', u'where', u'he', u'be', u'shoot', u'in', u'he', u'left', u'shoulder', u'.'], u'pos': [u'IN', u'VBG', u'IN', u'NNP', u'CC', u'NNP', u'IN', u'CD', u',', u'NNP', u'VBD', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'WRB', u'PRP', u'VBD', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[731, 736], [737, 747], [748, 752], [753, 760], [761, 764], [765, 769], [770, 772], [773, 777], [777, 778], [779, 785], [786, 792], [793, 795], [796, 799], [800, 811], [812, 816], [816, 817], [818, 825], [826, 830], [831, 842], [843, 845], [846, 849], [850, 856], [857, 859], [860, 867], [867, 868], [869, 874], [875, 877], [878, 881], [882, 886], [887, 889], [890, 893], [894, 898], [899, 907], [907, 908]]}) 
answer: set([u'college', u'attend'])
candidate Sentence: (0.12697288393974304, {u'tokens': [u'Monroe', u'was', u'raised', u'in', u'a', u'family', u'that', u'belonged', u'to', u'the', u'Church', u'of', u'England', u'when', u'it', u'was', u'the', u'state', u'church', u'in', u'Virginia', u',', u'and', u'as', u'an', u'adult', u'frequently', u'attended', u'Episcopalian', u'churches', u',', u'though', u'there', u'is', u'no', u'record', u'he', u'ever', u'took', u'communion', u'.'], u'lemmas': [u'Monroe', u'be', u'raise', u'in', u'a', u'family', u'that', u'belong', u'to', u'the', u'Church', u'of', u'England', u'when', u'it', u'be', u'the', u'state', u'church', u'in', u'Virginia', u',', u'and', u'as', u'a', u'adult', u'frequently', u'attend', u'episcopalian', u'church', u',', u'though', u'there', u'be', u'no', u'record', u'he', u'ever', u'take', u'communion', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'WDT', u'VBD', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'WRB', u'PRP', u'VBD', u'DT', u'NN', u'NN', u'IN', u'NNP', u',', u'CC', u'IN', u'DT', u'JJ', u'RB', u'VBD', u'JJ', u'NNS', u',', u'IN', u'EX', u'VBZ', u'DT', u'NN', u'PRP', u'RB', u'VBD', u'NN', u'.'], u'char_offsets': [[8865, 8871], [8872, 8875], [8876, 8882], [8883, 8885], [8886, 8887], [8888, 8894], [8895, 8899], [8900, 8908], [8909, 8911], [8912, 8915], [8916, 8922], [8923, 8925], [8926, 8933], [8934, 8938], [8939, 8941], [8942, 8945], [8946, 8949], [8950, 8955], [8956, 8962], [8963, 8965], [8966, 8974], [8974, 8975], [8976, 8979], [8980, 8982], [8983, 8985], [8986, 8991], [8992, 9002], [9003, 9011], [9012, 9024], [9025, 9033], [9033, 9034], [9035, 9041], [9042, 9047], [9048, 9050], [9051, 9053], [9054, 9060], [9061, 9063], [9064, 9068], [9069, 9073], [9074, 9083], [9083, 9084]]}) 
answer: set([u'william', u'college', u'mary'])
candidate Sentence: (0.10349664092063904, {u'tokens': [u'The', u'Political', u'Writings', u'of', u'James', u'Monroe', u'.'], u'lemmas': [u'the', u'political', u'writings', u'of', u'James', u'Monroe', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[13821, 13824], [13825, 13834], [13835, 13843], [13844, 13846], [13847, 13852], [13853, 13859], [13859, 13860]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.087783664464950562, {u'tokens': [u'Nor', u'did', u'his', u'friends', u',', u'family', u'or', u'associates', u'write', u'about', u'his', u'beliefs', u'.'], u'lemmas': [u'nor', u'do', u'he', u'friend', u',', u'family', u'or', u'associate', u'write', u'about', u'he', u'belief', u'.'], u'pos': [u'CC', u'VBD', u'PRP$', u'NNS', u',', u'NN', u'CC', u'NNS', u'VBP', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8676, 8679], [8680, 8683], [8684, 8687], [8688, 8695], [8695, 8696], [8697, 8703], [8704, 8706], [8707, 8717], [8718, 8723], [8724, 8729], [8730, 8733], [8734, 8741], [8741, 8742]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.08267531543970108, {u'tokens': [u'Letters', u'that', u'do', u'survive', u',', u'such', u'as', u'ones', u'written', u'on', u'the', u'occasion', u'of', u'the', u'death', u'of', u'his', u'son', u',', u'contain', u'no', u'discussion', u'of', u'religion', u'.'], u'lemmas': [u'letter', u'that', u'do', u'survive', u',', u'such', u'as', u'one', u'write', u'on', u'the', u'occasion', u'of', u'the', u'death', u'of', u'he', u'son', u',', u'contain', u'no', u'discussion', u'of', u'religion', u'.'], u'pos': [u'NNS', u'WDT', u'VBP', u'VB', u',', u'JJ', u'IN', u'NNS', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'VBP', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[8743, 8750], [8751, 8755], [8756, 8758], [8759, 8766], [8766, 8767], [8768, 8772], [8773, 8775], [8776, 8780], [8781, 8788], [8789, 8791], [8792, 8795], [8796, 8804], [8805, 8807], [8808, 8811], [8812, 8817], [8818, 8820], [8821, 8824], [8825, 8828], [8828, 8829], [8830, 8837], [8838, 8840], [8841, 8851], [8852, 8854], [8855, 8863], [8863, 8864]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.081481024622917175, {u'tokens': [u'He', u'has', u'been', u'classified', u'by', u'some', u'historians', u'as', u'a', u'Deist', u',', u'and', u'he', u'did', u'use', u'deistic', u'language', u'to', u'refer', u'to', u'God', u'.'], u'lemmas': [u'he', u'have', u'be', u'classify', u'by', u'some', u'historian', u'as', u'a', u'Deist', u',', u'and', u'he', u'do', u'use', u'deistic', u'language', u'to', u'refer', u'to', u'God', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'VBN', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'CC', u'PRP', u'VBD', u'VB', u'JJ', u'NN', u'TO', u'VB', u'TO', u'NNP', u'.'], u'char_offsets': [[9085, 9087], [9088, 9091], [9092, 9096], [9097, 9107], [9108, 9110], [9111, 9115], [9116, 9126], [9127, 9129], [9130, 9131], [9132, 9137], [9137, 9138], [9139, 9142], [9143, 9145], [9146, 9149], [9150, 9153], [9154, 9161], [9162, 9170], [9171, 9173], [9174, 9179], [9180, 9182], [9183, 9186], [9186, 9187]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])
candidate Sentence: (0.081277467310428619, {u'tokens': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appointed', u'the', u'following', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'When', u'his', u'presidency', u'expired', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'lived', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'lemmas': [u'Official', u'White', u'House', u'portrait', u'of', u'James', u'Monroe', u'Monroe', u'appoint', u'the', u'follow', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'when', u'he', u'presidency', u'expire', u'on', u'March', u'4', u',', u'1825', u',', u'James', u'Monroe', u'live', u'at', u'Monroe', u'Hill', u'on', u'the', u'grounds', u'of', u'the', u'University', u'of', u'Virginia', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'VBG', u'NNPS', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u':', u'WRB', u'PRP$', u'NN', u'VBD', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[6618, 6626], [6627, 6632], [6633, 6638], [6639, 6647], [6648, 6650], [6651, 6656], [6657, 6663], [6664, 6670], [6671, 6680], [6681, 6684], [6685, 6694], [6695, 6703], [6704, 6706], [6707, 6710], [6711, 6718], [6719, 6724], [6725, 6727], [6728, 6731], [6732, 6738], [6739, 6745], [6745, 6746], [6747, 6751], [6752, 6755], [6756, 6766], [6767, 6774], [6775, 6777], [6778, 6783], [6784, 6785], [6785, 6786], [6787, 6791], [6791, 6792], [6793, 6798], [6799, 6805], [6806, 6811], [6812, 6814], [6815, 6821], [6822, 6826], [6827, 6829], [6830, 6833], [6834, 6841], [6842, 6844], [6845, 6848], [6849, 6859], [6860, 6862], [6863, 6871], [6871, 6872]]}) 
answer: set([u'william', u'college', u'mary', u'attend'])

Did James Monroe attend the College of William and Mary?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8d488>.answer
_____________________________ test_yesno[param197] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d998>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa8d998>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33551597595214844, {u'tokens': [u'Goannas', u'and', u'other', u'carnivorous', u'reptiles', u'also', u'pose', u'a', u'danger', u'to', u'smaller', u'kangaroo', u'species', u'when', u'other', u'food', u'sources', u'are', u'lacking', u'.'], u'lemmas': [u'Goannas', u'and', u'other', u'carnivorous', u'reptile', u'also', u'pose', u'a', u'danger', u'to', u'smaller', u'kangaroo', u'species', u'when', u'other', u'food', u'source', u'be', u'lack', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'DT', u'NN', u'TO', u'JJR', u'NN', u'NNS', u'WRB', u'JJ', u'NN', u'NNS', u'VBP', u'VBG', u'.'], u'char_offsets': [[7333, 7340], [7341, 7344], [7345, 7350], [7351, 7362], [7363, 7371], [7372, 7376], [7377, 7381], [7382, 7383], [7384, 7390], [7391, 7393], [7394, 7401], [7402, 7410], [7411, 7418], [7419, 7423], [7424, 7429], [7430, 7434], [7435, 7442], [7443, 7446], [7447, 7454], [7454, 7455]]}) 
answer: set([])
candidate Sentence: (0.11477059870958328, {u'tokens': [u'A', u'kangaroo', u'crossing', u'a', u'highway', u'.'], u'lemmas': [u'a', u'kangaroo', u'cross', u'a', u'highway', u'.'], u'pos': [u'DT', u'NN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14068, 14069], [14070, 14078], [14079, 14087], [14088, 14089], [14090, 14097], [14097, 14098]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.11413291096687317, {u'tokens': [u'A', u'collision', u'with', u'a', u'vehicle', u'is', u'capable', u'of', u'killing', u'a', u'kangaroo', u'.'], u'lemmas': [u'a', u'collision', u'with', u'a', u'vehicle', u'be', u'capable', u'of', u'kill', u'a', u'kangaroo', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'JJ', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14099, 14100], [14101, 14110], [14111, 14115], [14116, 14117], [14118, 14125], [14126, 14128], [14129, 14136], [14137, 14139], [14140, 14147], [14148, 14149], [14150, 14158], [14158, 14159]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.076877757906913757, {u'tokens': [u'A', u'``', u'kangaroo', u'crossing', u"''", u'sign', u'on', u'an', u'Australian', u'highway', u'.'], u'lemmas': [u'a', u'``', u'kangaroo', u'cross', u"''", u'sign', u'on', u'a', u'australian', u'highway', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14015, 14016], [14017, 14018], [14018, 14026], [14027, 14035], [14035, 14036], [14037, 14041], [14042, 14044], [14045, 14047], [14048, 14058], [14059, 14066], [14066, 14067]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.062420517206192017, {u'tokens': [u'A', u'kangaroo', u'is', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-LRB-', u'macropods', u',', u'meaning', u'`', u'large', u'foot', u"'", u'-RRB-', u'.'], u'lemmas': [u'a', u'kangaroo', u'be', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-lrb-', u'macropod', u',', u'mean', u'`', u'large', u'foot', u"'", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u'-LRB-', u'NNS', u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[0, 1], [2, 10], [11, 13], [14, 15], [16, 25], [26, 30], [31, 34], [35, 41], [42, 54], [55, 56], [56, 65], [65, 66], [67, 74], [75, 76], [76, 81], [82, 86], [86, 87], [87, 88], [88, 89]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.0621049664914608, {u'tokens': [u'Newborn', u'joey', u'sucking', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'Kangaroos', u'have', u'developed', u'a', u'number', u'of', u'adaptations', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'lemmas': [u'newborn', u'joey', u'suck', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'kangaroo', u'have', u'develop', u'a', u'number', u'of', u'adaptation', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'pos': [u'JJ', u'NN', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'NNS', u'TO', u'DT', u'JJ', u',', u'JJ', u'NN', u'CC', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[8009, 8016], [8017, 8021], [8022, 8029], [8030, 8032], [8033, 8034], [8035, 8039], [8040, 8042], [8043, 8046], [8047, 8052], [8053, 8062], [8063, 8067], [8068, 8077], [8078, 8079], [8080, 8086], [8087, 8089], [8090, 8101], [8102, 8104], [8105, 8106], [8107, 8110], [8110, 8111], [8112, 8121], [8122, 8131], [8132, 8135], [8136, 8142], [8143, 8151], [8152, 8159], [8159, 8160]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.060640610754489899, {u'tokens': [u'The', u'mere', u'barking', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'lemmas': [u'the', u'mere', u'bark', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'pos': [u'DT', u'JJ', u'VBG', u'IN', u'DT', u'NN', u'MD', u'VB', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[7184, 7187], [7188, 7192], [7193, 7200], [7201, 7203], [7204, 7205], [7206, 7209], [7210, 7213], [7214, 7217], [7218, 7219], [7220, 7230], [7231, 7235], [7236, 7242], [7243, 7247], [7248, 7249], [7250, 7254], [7255, 7261], [7261, 7262]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.058092020452022552, {u'tokens': [u'Likewise', u',', u'when', u'an', u'adult', u'kangaroo', u'is', u'injured', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consulted', u'for', u'instructions', u'on', u'proper', u'care', u'.'], u'lemmas': [u'likewise', u',', u'when', u'a', u'adult', u'kangaroo', u'be', u'injure', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consult', u'for', u'instruction', u'on', u'proper', u'care', u'.'], u'pos': [u'RB', u',', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u',', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[15151, 15159], [15159, 15160], [15161, 15165], [15166, 15168], [15169, 15174], [15175, 15183], [15184, 15186], [15187, 15194], [15195, 15197], [15198, 15199], [15200, 15209], [15209, 15210], [15211, 15212], [15213, 15216], [15216, 15217], [15218, 15221], [15222, 15227], [15228, 15230], [15231, 15234], [15235, 15243], [15244, 15249], [15250, 15253], [15254, 15262], [15263, 15270], [15271, 15274], [15275, 15277], [15278, 15287], [15288, 15291], [15292, 15304], [15305, 15307], [15308, 15314], [15315, 15319], [15319, 15320]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.056394226849079132, {u'tokens': [u'For', u'kangaroos', u',', u'the', u'key', u'benefit', u'of', u'hopping', u'is', u'not', u'speed', u'to', u'escape', u'predators', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'is', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'Australian', u'native', u'predators', u'are', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continents', u'but', u'economy', u':', u'in', u'an', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'patterns', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distances', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'sources', u'is', u'crucial', u'to', u'survival', u'.'], u'lemmas': [u'for', u'kangaroo', u',', u'the', u'key', u'benefit', u'of', u'hop', u'be', u'not', u'speed', u'to', u'escape', u'predator', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'be', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'australian', u'native', u'predator', u'be', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continent', u'but', u'economy', u':', u'in', u'a', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'pattern', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distance', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'source', u'be', u'crucial', u'to', u'survival', u'.'], u'pos': [u'IN', u'NNS', u',', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NNS', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'JJ', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'RBR', u'JJ', u'IN', u'DT', u'IN', u'JJ', u'NNS', u'CC', u'NN', u':', u'IN', u'DT', u'JJ', u'NN', u'IN', u'RB', u'JJ', u'NN', u'NNS', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u'VBZ', u'JJ', u'TO', u'NN', u'.'], u'char_offsets': [[10515, 10518], [10519, 10528], [10528, 10529], [10530, 10533], [10534, 10537], [10538, 10545], [10546, 10548], [10549, 10556], [10557, 10559], [10560, 10563], [10564, 10569], [10570, 10572], [10573, 10579], [10580, 10589], [10590, 10593], [10594, 10597], [10598, 10603], [10604, 10606], [10607, 10608], [10609, 10617], [10618, 10620], [10621, 10623], [10624, 10630], [10631, 10635], [10636, 10640], [10641, 10643], [10644, 10645], [10646, 10661], [10662, 10671], [10671, 10672], [10673, 10676], [10677, 10680], [10681, 10691], [10692, 10698], [10699, 10708], [10709, 10712], [10713, 10715], [10716, 10719], [10720, 10724], [10725, 10729], [10730, 10738], [10739, 10743], [10744, 10749], [10750, 10752], [10753, 10758], [10759, 10769], [10770, 10773], [10774, 10781], [10781, 10782], [10783, 10785], [10786, 10788], [10789, 10798], [10799, 10808], [10809, 10813], [10814, 10820], [10821, 10829], [10830, 10837], [10838, 10846], [10846, 10847], [10848, 10851], [10852, 10859], [10860, 10862], [10863, 10864], [10865, 10873], [10874, 10876], [10877, 10883], [10884, 10888], [10889, 10898], [10899, 10901], [10902, 10912], [10913, 10917], [10918, 10923], [10924, 10926], [10927, 10933], [10934, 10936], [10937, 10941], [10942, 10949], [10950, 10952], [10953, 10960], [10961, 10963], [10964, 10972], [10972, 10973]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.052955679595470428, {u'tokens': [u'Like', u'all', u'marsupials', u',', u'female', u'kangaroos', u'have', u'a', u'pouch', u'called', u'a', u'marsupium', u'in', u'which', u'joeys', u'complete', u'postnatal', u'development', u'.'], u'lemmas': [u'like', u'all', u'marsupial', u',', u'female', u'kangaroo', u'have', u'a', u'pouch', u'call', u'a', u'marsupium', u'in', u'which', u'joey', u'complete', u'postnatal', u'development', u'.'], u'pos': [u'IN', u'DT', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'VBD', u'DT', u'NN', u'IN', u'WDT', u'NNS', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[4250, 4254], [4255, 4258], [4259, 4269], [4269, 4270], [4271, 4277], [4278, 4287], [4288, 4292], [4293, 4294], [4295, 4300], [4301, 4307], [4308, 4309], [4310, 4319], [4320, 4322], [4323, 4328], [4329, 4334], [4335, 4343], [4344, 4353], [4354, 4365], [4365, 4366]]}) 
answer: set([u'reptile'])

Is a kangaroo a reptile?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa8d998>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param198] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8d9e0>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa8d9e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33551597595214844, {u'tokens': [u'Goannas', u'and', u'other', u'carnivorous', u'reptiles', u'also', u'pose', u'a', u'danger', u'to', u'smaller', u'kangaroo', u'species', u'when', u'other', u'food', u'sources', u'are', u'lacking', u'.'], u'lemmas': [u'Goannas', u'and', u'other', u'carnivorous', u'reptile', u'also', u'pose', u'a', u'danger', u'to', u'smaller', u'kangaroo', u'species', u'when', u'other', u'food', u'source', u'be', u'lack', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'DT', u'NN', u'TO', u'JJR', u'NN', u'NNS', u'WRB', u'JJ', u'NN', u'NNS', u'VBP', u'VBG', u'.'], u'char_offsets': [[7333, 7340], [7341, 7344], [7345, 7350], [7351, 7362], [7363, 7371], [7372, 7376], [7377, 7381], [7382, 7383], [7384, 7390], [7391, 7393], [7394, 7401], [7402, 7410], [7411, 7418], [7419, 7423], [7424, 7429], [7430, 7434], [7435, 7442], [7443, 7446], [7447, 7454], [7454, 7455]]}) 
answer: set([])
candidate Sentence: (0.11477059870958328, {u'tokens': [u'A', u'kangaroo', u'crossing', u'a', u'highway', u'.'], u'lemmas': [u'a', u'kangaroo', u'cross', u'a', u'highway', u'.'], u'pos': [u'DT', u'NN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14068, 14069], [14070, 14078], [14079, 14087], [14088, 14089], [14090, 14097], [14097, 14098]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.11413291096687317, {u'tokens': [u'A', u'collision', u'with', u'a', u'vehicle', u'is', u'capable', u'of', u'killing', u'a', u'kangaroo', u'.'], u'lemmas': [u'a', u'collision', u'with', u'a', u'vehicle', u'be', u'capable', u'of', u'kill', u'a', u'kangaroo', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'JJ', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14099, 14100], [14101, 14110], [14111, 14115], [14116, 14117], [14118, 14125], [14126, 14128], [14129, 14136], [14137, 14139], [14140, 14147], [14148, 14149], [14150, 14158], [14158, 14159]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.076877757906913757, {u'tokens': [u'A', u'``', u'kangaroo', u'crossing', u"''", u'sign', u'on', u'an', u'Australian', u'highway', u'.'], u'lemmas': [u'a', u'``', u'kangaroo', u'cross', u"''", u'sign', u'on', u'a', u'australian', u'highway', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14015, 14016], [14017, 14018], [14018, 14026], [14027, 14035], [14035, 14036], [14037, 14041], [14042, 14044], [14045, 14047], [14048, 14058], [14059, 14066], [14066, 14067]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.062420517206192017, {u'tokens': [u'A', u'kangaroo', u'is', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-LRB-', u'macropods', u',', u'meaning', u'`', u'large', u'foot', u"'", u'-RRB-', u'.'], u'lemmas': [u'a', u'kangaroo', u'be', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-lrb-', u'macropod', u',', u'mean', u'`', u'large', u'foot', u"'", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u'-LRB-', u'NNS', u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[0, 1], [2, 10], [11, 13], [14, 15], [16, 25], [26, 30], [31, 34], [35, 41], [42, 54], [55, 56], [56, 65], [65, 66], [67, 74], [75, 76], [76, 81], [82, 86], [86, 87], [87, 88], [88, 89]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.0621049664914608, {u'tokens': [u'Newborn', u'joey', u'sucking', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'Kangaroos', u'have', u'developed', u'a', u'number', u'of', u'adaptations', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'lemmas': [u'newborn', u'joey', u'suck', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'kangaroo', u'have', u'develop', u'a', u'number', u'of', u'adaptation', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'pos': [u'JJ', u'NN', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'NNS', u'TO', u'DT', u'JJ', u',', u'JJ', u'NN', u'CC', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[8009, 8016], [8017, 8021], [8022, 8029], [8030, 8032], [8033, 8034], [8035, 8039], [8040, 8042], [8043, 8046], [8047, 8052], [8053, 8062], [8063, 8067], [8068, 8077], [8078, 8079], [8080, 8086], [8087, 8089], [8090, 8101], [8102, 8104], [8105, 8106], [8107, 8110], [8110, 8111], [8112, 8121], [8122, 8131], [8132, 8135], [8136, 8142], [8143, 8151], [8152, 8159], [8159, 8160]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.060640610754489899, {u'tokens': [u'The', u'mere', u'barking', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'lemmas': [u'the', u'mere', u'bark', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'pos': [u'DT', u'JJ', u'VBG', u'IN', u'DT', u'NN', u'MD', u'VB', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[7184, 7187], [7188, 7192], [7193, 7200], [7201, 7203], [7204, 7205], [7206, 7209], [7210, 7213], [7214, 7217], [7218, 7219], [7220, 7230], [7231, 7235], [7236, 7242], [7243, 7247], [7248, 7249], [7250, 7254], [7255, 7261], [7261, 7262]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.058092020452022552, {u'tokens': [u'Likewise', u',', u'when', u'an', u'adult', u'kangaroo', u'is', u'injured', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consulted', u'for', u'instructions', u'on', u'proper', u'care', u'.'], u'lemmas': [u'likewise', u',', u'when', u'a', u'adult', u'kangaroo', u'be', u'injure', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consult', u'for', u'instruction', u'on', u'proper', u'care', u'.'], u'pos': [u'RB', u',', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u',', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[15151, 15159], [15159, 15160], [15161, 15165], [15166, 15168], [15169, 15174], [15175, 15183], [15184, 15186], [15187, 15194], [15195, 15197], [15198, 15199], [15200, 15209], [15209, 15210], [15211, 15212], [15213, 15216], [15216, 15217], [15218, 15221], [15222, 15227], [15228, 15230], [15231, 15234], [15235, 15243], [15244, 15249], [15250, 15253], [15254, 15262], [15263, 15270], [15271, 15274], [15275, 15277], [15278, 15287], [15288, 15291], [15292, 15304], [15305, 15307], [15308, 15314], [15315, 15319], [15319, 15320]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.056394226849079132, {u'tokens': [u'For', u'kangaroos', u',', u'the', u'key', u'benefit', u'of', u'hopping', u'is', u'not', u'speed', u'to', u'escape', u'predators', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'is', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'Australian', u'native', u'predators', u'are', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continents', u'but', u'economy', u':', u'in', u'an', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'patterns', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distances', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'sources', u'is', u'crucial', u'to', u'survival', u'.'], u'lemmas': [u'for', u'kangaroo', u',', u'the', u'key', u'benefit', u'of', u'hop', u'be', u'not', u'speed', u'to', u'escape', u'predator', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'be', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'australian', u'native', u'predator', u'be', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continent', u'but', u'economy', u':', u'in', u'a', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'pattern', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distance', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'source', u'be', u'crucial', u'to', u'survival', u'.'], u'pos': [u'IN', u'NNS', u',', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NNS', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'JJ', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'RBR', u'JJ', u'IN', u'DT', u'IN', u'JJ', u'NNS', u'CC', u'NN', u':', u'IN', u'DT', u'JJ', u'NN', u'IN', u'RB', u'JJ', u'NN', u'NNS', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u'VBZ', u'JJ', u'TO', u'NN', u'.'], u'char_offsets': [[10515, 10518], [10519, 10528], [10528, 10529], [10530, 10533], [10534, 10537], [10538, 10545], [10546, 10548], [10549, 10556], [10557, 10559], [10560, 10563], [10564, 10569], [10570, 10572], [10573, 10579], [10580, 10589], [10590, 10593], [10594, 10597], [10598, 10603], [10604, 10606], [10607, 10608], [10609, 10617], [10618, 10620], [10621, 10623], [10624, 10630], [10631, 10635], [10636, 10640], [10641, 10643], [10644, 10645], [10646, 10661], [10662, 10671], [10671, 10672], [10673, 10676], [10677, 10680], [10681, 10691], [10692, 10698], [10699, 10708], [10709, 10712], [10713, 10715], [10716, 10719], [10720, 10724], [10725, 10729], [10730, 10738], [10739, 10743], [10744, 10749], [10750, 10752], [10753, 10758], [10759, 10769], [10770, 10773], [10774, 10781], [10781, 10782], [10783, 10785], [10786, 10788], [10789, 10798], [10799, 10808], [10809, 10813], [10814, 10820], [10821, 10829], [10830, 10837], [10838, 10846], [10846, 10847], [10848, 10851], [10852, 10859], [10860, 10862], [10863, 10864], [10865, 10873], [10874, 10876], [10877, 10883], [10884, 10888], [10889, 10898], [10899, 10901], [10902, 10912], [10913, 10917], [10918, 10923], [10924, 10926], [10927, 10933], [10934, 10936], [10937, 10941], [10942, 10949], [10950, 10952], [10953, 10960], [10961, 10963], [10964, 10972], [10972, 10973]]}) 
answer: set([u'reptile'])
candidate Sentence: (0.052955679595470428, {u'tokens': [u'Like', u'all', u'marsupials', u',', u'female', u'kangaroos', u'have', u'a', u'pouch', u'called', u'a', u'marsupium', u'in', u'which', u'joeys', u'complete', u'postnatal', u'development', u'.'], u'lemmas': [u'like', u'all', u'marsupial', u',', u'female', u'kangaroo', u'have', u'a', u'pouch', u'call', u'a', u'marsupium', u'in', u'which', u'joey', u'complete', u'postnatal', u'development', u'.'], u'pos': [u'IN', u'DT', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'VBD', u'DT', u'NN', u'IN', u'WDT', u'NNS', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[4250, 4254], [4255, 4258], [4259, 4269], [4269, 4270], [4271, 4277], [4278, 4287], [4288, 4292], [4293, 4294], [4295, 4300], [4301, 4307], [4308, 4309], [4310, 4319], [4320, 4322], [4323, 4328], [4329, 4334], [4335, 4343], [4344, 4353], [4354, 4365], [4365, 4366]]}) 
answer: set([u'reptile'])

Is a kangaroo a reptile?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa8d9e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param203] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8db48>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa8db48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.5548749566078186, {u'tokens': [u'They', u'are', u'not', u'farmed', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroos', u'are', u'shot', u'for', u'meat', u',', u'over', u'which', u'there', u'is', u'controversy', u'.'], u'lemmas': [u'they', u'be', u'not', u'farm', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroo', u'be', u'shoot', u'for', u'meat', u',', u'over', u'which', u'there', u'be', u'controversy', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VBN', u'TO', u'DT', u'NN', u',', u'CC', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'NN', u',', u'IN', u'WDT', u'EX', u'VBZ', u'NN', u'.'], u'char_offsets': [[748, 752], [753, 756], [757, 760], [761, 767], [768, 770], [771, 774], [775, 781], [781, 782], [783, 786], [787, 791], [792, 801], [802, 805], [806, 810], [811, 814], [815, 819], [819, 820], [821, 825], [826, 831], [832, 837], [838, 840], [841, 852], [852, 853]]}) 
answer: set([])
candidate Sentence: (0.21407420933246613, {u'tokens': [u'Before', u'European', u'settlement', u',', u'the', u'kangaroo', u'was', u'a', u'very', u'important', u'animal', u'for', u'Australian', u'Aborigines', u',', u'for', u'its', u'meat', u',', u'hide', u',', u'bones', u'and', u'sinews', u'.'], u'lemmas': [u'before', u'european', u'settlement', u',', u'the', u'kangaroo', u'be', u'a', u'very', u'important', u'animal', u'for', u'australian', u'Aborigines', u',', u'for', u'its', u'meat', u',', u'hide', u',', u'bone', u'and', u'sinew', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBD', u'DT', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u',', u'IN', u'PRP$', u'NN', u',', u'VB', u',', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[12323, 12329], [12330, 12338], [12339, 12349], [12349, 12350], [12351, 12354], [12355, 12363], [12364, 12367], [12368, 12369], [12370, 12374], [12375, 12384], [12385, 12391], [12392, 12395], [12396, 12406], [12407, 12417], [12417, 12418], [12419, 12422], [12423, 12426], [12427, 12431], [12431, 12432], [12433, 12437], [12437, 12438], [12439, 12444], [12445, 12448], [12449, 12455], [12455, 12456]]}) 
answer: set([u'shoot', u'wild'])
candidate Sentence: (0.13246573507785797, {u'tokens': [u'The', u'mere', u'barking', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'lemmas': [u'the', u'mere', u'bark', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'pos': [u'DT', u'JJ', u'VBG', u'IN', u'DT', u'NN', u'MD', u'VB', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[7184, 7187], [7188, 7192], [7193, 7200], [7201, 7203], [7204, 7205], [7206, 7209], [7210, 7213], [7214, 7217], [7218, 7219], [7220, 7230], [7231, 7235], [7236, 7242], [7243, 7247], [7248, 7249], [7250, 7254], [7255, 7261], [7261, 7262]]}) 
answer: set([u'shoot', u'meat'])
candidate Sentence: (0.11787497997283936, {u'tokens': [u'The', u'joey', u"'s", u'instinct', u'is', u'to', u'``', u'cuddle', u'up', u"''", u',', u'thereby', u'endearing', u'themselves', u'to', u'their', u'keepers', u',', u'but', u'after', u'hand-rearing', u'a', u'joey', u',', u'it', u'can', u'not', u'usually', u'be', u'released', u'into', u'the', u'wild', u'and', u'be', u'expected', u'to', u'provide', u'for', u'itself', u'immediately', u'.'], u'lemmas': [u'the', u'joey', u"'s", u'instinct', u'be', u'to', u'``', u'cuddle', u'up', u"''", u',', u'thereby', u'endearing', u'themselves', u'to', u'they', u'keeper', u',', u'but', u'after', u'hand-rear', u'a', u'joey', u',', u'it', u'can', u'not', u'usually', u'be', u'release', u'into', u'the', u'wild', u'and', u'be', u'expect', u'to', u'provide', u'for', u'itself', u'immediately', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NN', u'VBZ', u'TO', u'``', u'VB', u'RP', u"''", u',', u'RB', u'JJ', u'PRP', u'TO', u'PRP$', u'NNS', u',', u'CC', u'IN', u'VBG', u'DT', u'NN', u',', u'PRP', u'MD', u'RB', u'RB', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'CC', u'VB', u'VBN', u'TO', u'VB', u'IN', u'PRP', u'RB', u'.'], u'char_offsets': [[15897, 15900], [15901, 15905], [15905, 15907], [15908, 15916], [15917, 15919], [15920, 15922], [15923, 15924], [15924, 15930], [15931, 15933], [15933, 15934], [15934, 15935], [15936, 15943], [15944, 15953], [15954, 15964], [15965, 15967], [15968, 15973], [15974, 15981], [15981, 15982], [15983, 15986], [15987, 15992], [15993, 16005], [16006, 16007], [16008, 16012], [16012, 16013], [16014, 16016], [16017, 16020], [16020, 16023], [16024, 16031], [16032, 16034], [16035, 16043], [16044, 16048], [16049, 16052], [16053, 16057], [16058, 16061], [16062, 16064], [16065, 16073], [16074, 16076], [16077, 16084], [16085, 16088], [16089, 16095], [16096, 16107], [16107, 16108]]}) 
answer: set([u'shoot', u'meat'])
candidate Sentence: (0.069706909358501434, {u'tokens': [u'The', u'joey', u'will', u'usually', u'stay', u'in', u'the', u'pouch', u'for', u'about', u'nine', u'months', u'-LRB-', u'180', u'320', u'days', u'for', u'the', u'Western', u'Grey', u'-RRB-', u'before', u'starting', u'to', u'leave', u'the', u'pouch', u'for', u'small', u'periods', u'of', u'time', u'.'], u'lemmas': [u'the', u'joey', u'will', u'usually', u'stay', u'in', u'the', u'pouch', u'for', u'about', u'nine', u'month', u'-lrb-', u'180', u'320', u'day', u'for', u'the', u'western', u'Grey', u'-rrb-', u'before', u'start', u'to', u'leave', u'the', u'pouch', u'for', u'small', u'period', u'of', u'time', u'.'], u'pos': [u'DT', u'NN', u'MD', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'-LRB-', u'CD', u'CD', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'-RRB-', u'IN', u'VBG', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[8585, 8588], [8589, 8593], [8594, 8598], [8599, 8606], [8607, 8611], [8612, 8614], [8615, 8618], [8619, 8624], [8625, 8628], [8629, 8634], [8635, 8639], [8640, 8646], [8647, 8648], [8648, 8651], [8652, 8655], [8656, 8660], [8661, 8664], [8665, 8668], [8669, 8676], [8677, 8681], [8681, 8682], [8683, 8689], [8690, 8698], [8699, 8701], [8702, 8707], [8708, 8711], [8712, 8717], [8718, 8721], [8722, 8727], [8728, 8735], [8736, 8738], [8739, 8743], [8743, 8744]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.063969261944293976, {u'tokens': [u'Male', u'kangaroos', u'often', u'``', u'box', u"''", u'amongst', u'each', u'other', u',', u'playfully', u',', u'for', u'dominance', u',', u'or', u'in', u'competition', u'for', u'mates', u'.'], u'lemmas': [u'male', u'kangaroo', u'often', u'``', u'box', u"''", u'amongst', u'each', u'other', u',', u'playfully', u',', u'for', u'dominance', u',', u'or', u'in', u'competition', u'for', u'mate', u'.'], u'pos': [u'JJ', u'NNS', u'RB', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u',', u'RB', u',', u'IN', u'NN', u',', u'CC', u'IN', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[13088, 13092], [13093, 13102], [13103, 13108], [13109, 13110], [13110, 13113], [13113, 13114], [13115, 13122], [13123, 13127], [13128, 13133], [13133, 13134], [13135, 13144], [13144, 13145], [13146, 13149], [13150, 13159], [13159, 13160], [13161, 13163], [13164, 13166], [13167, 13178], [13179, 13182], [13183, 13188], [13188, 13189]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.061936412006616592, {u'tokens': [u'Kangaroos', u'have', u'large', u',', u'powerful', u'hind', u'legs', u',', u'large', u'feet', u'adapted', u'for', u'leaping', u',', u'a', u'long', u'muscular', u'tail', u'for', u'balance', u',', u'and', u'a', u'small', u'head', u'.'], u'lemmas': [u'kangaroo', u'have', u'large', u',', u'powerful', u'hind', u'leg', u',', u'large', u'foot', u'adapt', u'for', u'leap', u',', u'a', u'long', u'muscular', u'tail', u'for', u'balance', u',', u'and', u'a', u'small', u'head', u'.'], u'pos': [u'NNS', u'VBP', u'JJ', u',', u'JJ', u'JJ', u'NNS', u',', u'JJ', u'NNS', u'VBN', u'IN', u'VBG', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[4124, 4133], [4134, 4138], [4139, 4144], [4144, 4145], [4146, 4154], [4155, 4159], [4160, 4164], [4164, 4165], [4166, 4171], [4172, 4176], [4177, 4184], [4185, 4188], [4189, 4196], [4196, 4197], [4198, 4199], [4200, 4204], [4205, 4213], [4214, 4218], [4219, 4222], [4223, 4230], [4230, 4231], [4232, 4235], [4236, 4237], [4238, 4243], [4244, 4248], [4248, 4249]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.050520230084657669, {u'tokens': [u'Kangaroo', u'hops', u'in', u'line', u'for', u'genome', u'sequencing', u'URL', u'accessed', u'January', u'6', u',', u'2007', u'.'], u'lemmas': [u'kangaroo', u'hop', u'in', u'line', u'for', u'genome', u'sequencing', u'url', u'access', u'January', u'6', u',', u'2007', u'.'], u'pos': [u'NN', u'VBZ', u'IN', u'NN', u'IN', u'NN', u'NN', u'NN', u'VBD', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[11166, 11174], [11175, 11179], [11180, 11182], [11183, 11187], [11188, 11191], [11192, 11198], [11199, 11209], [11210, 11213], [11214, 11222], [11223, 11230], [11231, 11232], [11232, 11233], [11234, 11238], [11238, 11239]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.049882750958204269, {u'tokens': [u'If', u'a', u'female', u'is', u'the', u'victim', u'of', u'a', u'collision', u',', u'animal', u'welfare', u'groups', u'ask', u'that', u'her', u'pouch', u'be', u'checked', u'for', u'any', u'surviving', u'joey', u',', u'in', u'which', u'case', u'it', u'may', u'be', u'removed', u'to', u'a', u'wildlife', u'sanctuary', u'or', u'veterinary', u'surgeon', u'for', u'rehabilitation', u'.'], u'lemmas': [u'if', u'a', u'female', u'be', u'the', u'victim', u'of', u'a', u'collision', u',', u'animal', u'welfare', u'group', u'ask', u'that', u'she', u'pouch', u'be', u'check', u'for', u'any', u'survive', u'joey', u',', u'in', u'which', u'case', u'it', u'may', u'be', u'remove', u'to', u'a', u'wildlife', u'sanctuary', u'or', u'veterinary', u'surgeon', u'for', u'rehabilitation', u'.'], u'pos': [u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'NN', u'NN', u'NNS', u'VBP', u'IN', u'PRP$', u'NN', u'VB', u'VBN', u'IN', u'DT', u'VBG', u'NN', u',', u'IN', u'WDT', u'NN', u'PRP', u'MD', u'VB', u'VBN', u'TO', u'DT', u'NN', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[14934, 14936], [14937, 14938], [14939, 14945], [14946, 14948], [14949, 14952], [14953, 14959], [14960, 14962], [14963, 14964], [14965, 14974], [14974, 14975], [14976, 14982], [14983, 14990], [14991, 14997], [14998, 15001], [15002, 15006], [15007, 15010], [15011, 15016], [15017, 15019], [15020, 15027], [15028, 15031], [15032, 15035], [15036, 15045], [15046, 15050], [15050, 15051], [15052, 15054], [15055, 15060], [15061, 15065], [15066, 15068], [15069, 15072], [15073, 15075], [15076, 15083], [15084, 15086], [15087, 15088], [15089, 15097], [15098, 15107], [15108, 15110], [15111, 15121], [15122, 15129], [15130, 15133], [15134, 15148], [15148, 15149]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.048848751932382584, {u'tokens': [u'The', u'collective', u'noun', u'for', u'kangaroos', u'is', u'a', u'mob', u',', u'troop', u',', u'or', u'court', u'.'], u'lemmas': [u'the', u'collective', u'noun', u'for', u'kangaroo', u'be', u'a', u'mob', u',', u'troop', u',', u'or', u'court', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[2526, 2529], [2530, 2540], [2541, 2545], [2546, 2549], [2550, 2559], [2560, 2562], [2563, 2564], [2565, 2568], [2568, 2569], [2570, 2575], [2575, 2576], [2577, 2579], [2580, 2585], [2585, 2586]]}) 
answer: set([u'shoot', u'wild', u'meat'])

Are wild kangaroos shot for meat?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 400 documents, 17906 characters, 3471 tokens, 44.8 char/doc, 8.7 tok/doc RATES: 24.346 doc/sec, 211.3 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa8db48>.answer
_____________________________ test_yesno[param204] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8db90>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8db90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.5548749566078186, {u'tokens': [u'They', u'are', u'not', u'farmed', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroos', u'are', u'shot', u'for', u'meat', u',', u'over', u'which', u'there', u'is', u'controversy', u'.'], u'lemmas': [u'they', u'be', u'not', u'farm', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroo', u'be', u'shoot', u'for', u'meat', u',', u'over', u'which', u'there', u'be', u'controversy', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VBN', u'TO', u'DT', u'NN', u',', u'CC', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'NN', u',', u'IN', u'WDT', u'EX', u'VBZ', u'NN', u'.'], u'char_offsets': [[748, 752], [753, 756], [757, 760], [761, 767], [768, 770], [771, 774], [775, 781], [781, 782], [783, 786], [787, 791], [792, 801], [802, 805], [806, 810], [811, 814], [815, 819], [819, 820], [821, 825], [826, 831], [832, 837], [838, 840], [841, 852], [852, 853]]}) 
answer: set([])
candidate Sentence: (0.21407420933246613, {u'tokens': [u'Before', u'European', u'settlement', u',', u'the', u'kangaroo', u'was', u'a', u'very', u'important', u'animal', u'for', u'Australian', u'Aborigines', u',', u'for', u'its', u'meat', u',', u'hide', u',', u'bones', u'and', u'sinews', u'.'], u'lemmas': [u'before', u'european', u'settlement', u',', u'the', u'kangaroo', u'be', u'a', u'very', u'important', u'animal', u'for', u'australian', u'Aborigines', u',', u'for', u'its', u'meat', u',', u'hide', u',', u'bone', u'and', u'sinew', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBD', u'DT', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u',', u'IN', u'PRP$', u'NN', u',', u'VB', u',', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[12323, 12329], [12330, 12338], [12339, 12349], [12349, 12350], [12351, 12354], [12355, 12363], [12364, 12367], [12368, 12369], [12370, 12374], [12375, 12384], [12385, 12391], [12392, 12395], [12396, 12406], [12407, 12417], [12417, 12418], [12419, 12422], [12423, 12426], [12427, 12431], [12431, 12432], [12433, 12437], [12437, 12438], [12439, 12444], [12445, 12448], [12449, 12455], [12455, 12456]]}) 
answer: set([u'shoot', u'wild'])
candidate Sentence: (0.13246573507785797, {u'tokens': [u'The', u'mere', u'barking', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'lemmas': [u'the', u'mere', u'bark', u'of', u'a', u'dog', u'can', u'set', u'a', u'full-grown', u'male', u'boomer', u'into', u'a', u'wild', u'frenzy', u'.'], u'pos': [u'DT', u'JJ', u'VBG', u'IN', u'DT', u'NN', u'MD', u'VB', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[7184, 7187], [7188, 7192], [7193, 7200], [7201, 7203], [7204, 7205], [7206, 7209], [7210, 7213], [7214, 7217], [7218, 7219], [7220, 7230], [7231, 7235], [7236, 7242], [7243, 7247], [7248, 7249], [7250, 7254], [7255, 7261], [7261, 7262]]}) 
answer: set([u'shoot', u'meat'])
candidate Sentence: (0.11787497997283936, {u'tokens': [u'The', u'joey', u"'s", u'instinct', u'is', u'to', u'``', u'cuddle', u'up', u"''", u',', u'thereby', u'endearing', u'themselves', u'to', u'their', u'keepers', u',', u'but', u'after', u'hand-rearing', u'a', u'joey', u',', u'it', u'can', u'not', u'usually', u'be', u'released', u'into', u'the', u'wild', u'and', u'be', u'expected', u'to', u'provide', u'for', u'itself', u'immediately', u'.'], u'lemmas': [u'the', u'joey', u"'s", u'instinct', u'be', u'to', u'``', u'cuddle', u'up', u"''", u',', u'thereby', u'endearing', u'themselves', u'to', u'they', u'keeper', u',', u'but', u'after', u'hand-rear', u'a', u'joey', u',', u'it', u'can', u'not', u'usually', u'be', u'release', u'into', u'the', u'wild', u'and', u'be', u'expect', u'to', u'provide', u'for', u'itself', u'immediately', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NN', u'VBZ', u'TO', u'``', u'VB', u'RP', u"''", u',', u'RB', u'JJ', u'PRP', u'TO', u'PRP$', u'NNS', u',', u'CC', u'IN', u'VBG', u'DT', u'NN', u',', u'PRP', u'MD', u'RB', u'RB', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'CC', u'VB', u'VBN', u'TO', u'VB', u'IN', u'PRP', u'RB', u'.'], u'char_offsets': [[15897, 15900], [15901, 15905], [15905, 15907], [15908, 15916], [15917, 15919], [15920, 15922], [15923, 15924], [15924, 15930], [15931, 15933], [15933, 15934], [15934, 15935], [15936, 15943], [15944, 15953], [15954, 15964], [15965, 15967], [15968, 15973], [15974, 15981], [15981, 15982], [15983, 15986], [15987, 15992], [15993, 16005], [16006, 16007], [16008, 16012], [16012, 16013], [16014, 16016], [16017, 16020], [16020, 16023], [16024, 16031], [16032, 16034], [16035, 16043], [16044, 16048], [16049, 16052], [16053, 16057], [16058, 16061], [16062, 16064], [16065, 16073], [16074, 16076], [16077, 16084], [16085, 16088], [16089, 16095], [16096, 16107], [16107, 16108]]}) 
answer: set([u'shoot', u'meat'])
candidate Sentence: (0.069706909358501434, {u'tokens': [u'The', u'joey', u'will', u'usually', u'stay', u'in', u'the', u'pouch', u'for', u'about', u'nine', u'months', u'-LRB-', u'180', u'320', u'days', u'for', u'the', u'Western', u'Grey', u'-RRB-', u'before', u'starting', u'to', u'leave', u'the', u'pouch', u'for', u'small', u'periods', u'of', u'time', u'.'], u'lemmas': [u'the', u'joey', u'will', u'usually', u'stay', u'in', u'the', u'pouch', u'for', u'about', u'nine', u'month', u'-lrb-', u'180', u'320', u'day', u'for', u'the', u'western', u'Grey', u'-rrb-', u'before', u'start', u'to', u'leave', u'the', u'pouch', u'for', u'small', u'period', u'of', u'time', u'.'], u'pos': [u'DT', u'NN', u'MD', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'-LRB-', u'CD', u'CD', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'-RRB-', u'IN', u'VBG', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[8585, 8588], [8589, 8593], [8594, 8598], [8599, 8606], [8607, 8611], [8612, 8614], [8615, 8618], [8619, 8624], [8625, 8628], [8629, 8634], [8635, 8639], [8640, 8646], [8647, 8648], [8648, 8651], [8652, 8655], [8656, 8660], [8661, 8664], [8665, 8668], [8669, 8676], [8677, 8681], [8681, 8682], [8683, 8689], [8690, 8698], [8699, 8701], [8702, 8707], [8708, 8711], [8712, 8717], [8718, 8721], [8722, 8727], [8728, 8735], [8736, 8738], [8739, 8743], [8743, 8744]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.063969261944293976, {u'tokens': [u'Male', u'kangaroos', u'often', u'``', u'box', u"''", u'amongst', u'each', u'other', u',', u'playfully', u',', u'for', u'dominance', u',', u'or', u'in', u'competition', u'for', u'mates', u'.'], u'lemmas': [u'male', u'kangaroo', u'often', u'``', u'box', u"''", u'amongst', u'each', u'other', u',', u'playfully', u',', u'for', u'dominance', u',', u'or', u'in', u'competition', u'for', u'mate', u'.'], u'pos': [u'JJ', u'NNS', u'RB', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u',', u'RB', u',', u'IN', u'NN', u',', u'CC', u'IN', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[13088, 13092], [13093, 13102], [13103, 13108], [13109, 13110], [13110, 13113], [13113, 13114], [13115, 13122], [13123, 13127], [13128, 13133], [13133, 13134], [13135, 13144], [13144, 13145], [13146, 13149], [13150, 13159], [13159, 13160], [13161, 13163], [13164, 13166], [13167, 13178], [13179, 13182], [13183, 13188], [13188, 13189]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.061936412006616592, {u'tokens': [u'Kangaroos', u'have', u'large', u',', u'powerful', u'hind', u'legs', u',', u'large', u'feet', u'adapted', u'for', u'leaping', u',', u'a', u'long', u'muscular', u'tail', u'for', u'balance', u',', u'and', u'a', u'small', u'head', u'.'], u'lemmas': [u'kangaroo', u'have', u'large', u',', u'powerful', u'hind', u'leg', u',', u'large', u'foot', u'adapt', u'for', u'leap', u',', u'a', u'long', u'muscular', u'tail', u'for', u'balance', u',', u'and', u'a', u'small', u'head', u'.'], u'pos': [u'NNS', u'VBP', u'JJ', u',', u'JJ', u'JJ', u'NNS', u',', u'JJ', u'NNS', u'VBN', u'IN', u'VBG', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[4124, 4133], [4134, 4138], [4139, 4144], [4144, 4145], [4146, 4154], [4155, 4159], [4160, 4164], [4164, 4165], [4166, 4171], [4172, 4176], [4177, 4184], [4185, 4188], [4189, 4196], [4196, 4197], [4198, 4199], [4200, 4204], [4205, 4213], [4214, 4218], [4219, 4222], [4223, 4230], [4230, 4231], [4232, 4235], [4236, 4237], [4238, 4243], [4244, 4248], [4248, 4249]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.050520230084657669, {u'tokens': [u'Kangaroo', u'hops', u'in', u'line', u'for', u'genome', u'sequencing', u'URL', u'accessed', u'January', u'6', u',', u'2007', u'.'], u'lemmas': [u'kangaroo', u'hop', u'in', u'line', u'for', u'genome', u'sequencing', u'url', u'access', u'January', u'6', u',', u'2007', u'.'], u'pos': [u'NN', u'VBZ', u'IN', u'NN', u'IN', u'NN', u'NN', u'NN', u'VBD', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[11166, 11174], [11175, 11179], [11180, 11182], [11183, 11187], [11188, 11191], [11192, 11198], [11199, 11209], [11210, 11213], [11214, 11222], [11223, 11230], [11231, 11232], [11232, 11233], [11234, 11238], [11238, 11239]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.049882750958204269, {u'tokens': [u'If', u'a', u'female', u'is', u'the', u'victim', u'of', u'a', u'collision', u',', u'animal', u'welfare', u'groups', u'ask', u'that', u'her', u'pouch', u'be', u'checked', u'for', u'any', u'surviving', u'joey', u',', u'in', u'which', u'case', u'it', u'may', u'be', u'removed', u'to', u'a', u'wildlife', u'sanctuary', u'or', u'veterinary', u'surgeon', u'for', u'rehabilitation', u'.'], u'lemmas': [u'if', u'a', u'female', u'be', u'the', u'victim', u'of', u'a', u'collision', u',', u'animal', u'welfare', u'group', u'ask', u'that', u'she', u'pouch', u'be', u'check', u'for', u'any', u'survive', u'joey', u',', u'in', u'which', u'case', u'it', u'may', u'be', u'remove', u'to', u'a', u'wildlife', u'sanctuary', u'or', u'veterinary', u'surgeon', u'for', u'rehabilitation', u'.'], u'pos': [u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'NN', u'NN', u'NNS', u'VBP', u'IN', u'PRP$', u'NN', u'VB', u'VBN', u'IN', u'DT', u'VBG', u'NN', u',', u'IN', u'WDT', u'NN', u'PRP', u'MD', u'VB', u'VBN', u'TO', u'DT', u'NN', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[14934, 14936], [14937, 14938], [14939, 14945], [14946, 14948], [14949, 14952], [14953, 14959], [14960, 14962], [14963, 14964], [14965, 14974], [14974, 14975], [14976, 14982], [14983, 14990], [14991, 14997], [14998, 15001], [15002, 15006], [15007, 15010], [15011, 15016], [15017, 15019], [15020, 15027], [15028, 15031], [15032, 15035], [15036, 15045], [15046, 15050], [15050, 15051], [15052, 15054], [15055, 15060], [15061, 15065], [15066, 15068], [15069, 15072], [15073, 15075], [15076, 15083], [15084, 15086], [15087, 15088], [15089, 15097], [15098, 15107], [15108, 15110], [15111, 15121], [15122, 15129], [15130, 15133], [15134, 15148], [15148, 15149]]}) 
answer: set([u'shoot', u'wild', u'meat'])
candidate Sentence: (0.048848751932382584, {u'tokens': [u'The', u'collective', u'noun', u'for', u'kangaroos', u'is', u'a', u'mob', u',', u'troop', u',', u'or', u'court', u'.'], u'lemmas': [u'the', u'collective', u'noun', u'for', u'kangaroo', u'be', u'a', u'mob', u',', u'troop', u',', u'or', u'court', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[2526, 2529], [2530, 2540], [2541, 2545], [2546, 2549], [2550, 2559], [2560, 2562], [2563, 2564], [2565, 2568], [2568, 2569], [2570, 2575], [2575, 2576], [2577, 2579], [2580, 2585], [2585, 2586]]}) 
answer: set([u'shoot', u'wild', u'meat'])

Are wild kangaroos shot for meat?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8db90>.answer
_____________________________ test_yesno[param210] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8dd40>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8dd40>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25606432557106018, {u'tokens': [u'A', u'kangaroo', u'crossing', u'a', u'highway', u'.'], u'lemmas': [u'a', u'kangaroo', u'cross', u'a', u'highway', u'.'], u'pos': [u'DT', u'NN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14068, 14069], [14070, 14078], [14079, 14087], [14088, 14089], [14090, 14097], [14097, 14098]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.25518882274627686, {u'tokens': [u'A', u'collision', u'with', u'a', u'vehicle', u'is', u'capable', u'of', u'killing', u'a', u'kangaroo', u'.'], u'lemmas': [u'a', u'collision', u'with', u'a', u'vehicle', u'be', u'capable', u'of', u'kill', u'a', u'kangaroo', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'JJ', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[14099, 14100], [14101, 14110], [14111, 14115], [14116, 14117], [14118, 14125], [14126, 14128], [14129, 14136], [14137, 14139], [14140, 14147], [14148, 14149], [14150, 14158], [14158, 14159]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.17152172327041626, {u'tokens': [u'A', u'``', u'kangaroo', u'crossing', u"''", u'sign', u'on', u'an', u'Australian', u'highway', u'.'], u'lemmas': [u'a', u'``', u'kangaroo', u'cross', u"''", u'sign', u'on', u'a', u'australian', u'highway', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14015, 14016], [14017, 14018], [14018, 14026], [14027, 14035], [14035, 14036], [14037, 14041], [14042, 14044], [14045, 14047], [14048, 14058], [14059, 14066], [14066, 14067]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.16506968438625336, {u'tokens': [u'For', u'kangaroos', u',', u'the', u'key', u'benefit', u'of', u'hopping', u'is', u'not', u'speed', u'to', u'escape', u'predators', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'is', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'Australian', u'native', u'predators', u'are', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continents', u'but', u'economy', u':', u'in', u'an', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'patterns', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distances', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'sources', u'is', u'crucial', u'to', u'survival', u'.'], u'lemmas': [u'for', u'kangaroo', u',', u'the', u'key', u'benefit', u'of', u'hop', u'be', u'not', u'speed', u'to', u'escape', u'predator', u'the', u'top', u'speed', u'of', u'a', u'kangaroo', u'be', u'no', u'higher', u'than', u'that', u'of', u'a', u'similarly-sized', u'quadruped', u',', u'and', u'the', u'australian', u'native', u'predator', u'be', u'in', u'any', u'case', u'less', u'fearsome', u'than', u'those', u'of', u'other', u'continent', u'but', u'economy', u':', u'in', u'a', u'infertile', u'continent', u'with', u'highly', u'variable', u'weather', u'pattern', u',', u'the', u'ability', u'of', u'a', u'kangaroo', u'to', u'travel', u'long', u'distance', u'at', u'moderately', u'high', u'speed', u'in', u'search', u'of', u'food', u'source', u'be', u'crucial', u'to', u'survival', u'.'], u'pos': [u'IN', u'NNS', u',', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NNS', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'JJ', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'RBR', u'JJ', u'IN', u'DT', u'IN', u'JJ', u'NNS', u'CC', u'NN', u':', u'IN', u'DT', u'JJ', u'NN', u'IN', u'RB', u'JJ', u'NN', u'NNS', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u'VBZ', u'JJ', u'TO', u'NN', u'.'], u'char_offsets': [[10515, 10518], [10519, 10528], [10528, 10529], [10530, 10533], [10534, 10537], [10538, 10545], [10546, 10548], [10549, 10556], [10557, 10559], [10560, 10563], [10564, 10569], [10570, 10572], [10573, 10579], [10580, 10589], [10590, 10593], [10594, 10597], [10598, 10603], [10604, 10606], [10607, 10608], [10609, 10617], [10618, 10620], [10621, 10623], [10624, 10630], [10631, 10635], [10636, 10640], [10641, 10643], [10644, 10645], [10646, 10661], [10662, 10671], [10671, 10672], [10673, 10676], [10677, 10680], [10681, 10691], [10692, 10698], [10699, 10708], [10709, 10712], [10713, 10715], [10716, 10719], [10720, 10724], [10725, 10729], [10730, 10738], [10739, 10743], [10744, 10749], [10750, 10752], [10753, 10758], [10759, 10769], [10770, 10773], [10774, 10781], [10781, 10782], [10783, 10785], [10786, 10788], [10789, 10798], [10799, 10808], [10809, 10813], [10814, 10820], [10821, 10829], [10830, 10837], [10838, 10846], [10846, 10847], [10848, 10851], [10852, 10859], [10860, 10862], [10863, 10864], [10865, 10873], [10874, 10876], [10877, 10883], [10884, 10888], [10889, 10898], [10899, 10901], [10902, 10912], [10913, 10917], [10918, 10923], [10924, 10926], [10927, 10933], [10934, 10936], [10937, 10941], [10942, 10949], [10950, 10952], [10953, 10960], [10961, 10963], [10964, 10972], [10972, 10973]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.16062119603157043, {u'tokens': [u'A', u'kangaroo', u'is', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-LRB-', u'macropods', u',', u'meaning', u'`', u'large', u'foot', u"'", u'-RRB-', u'.'], u'lemmas': [u'a', u'kangaroo', u'be', u'a', u'marsupial', u'from', u'the', u'family', u'Macropodidae', u'-lrb-', u'macropod', u',', u'mean', u'`', u'large', u'foot', u"'", u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u'-LRB-', u'NNS', u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[0, 1], [2, 10], [11, 13], [14, 15], [16, 25], [26, 30], [31, 34], [35, 41], [42, 54], [55, 56], [56, 65], [65, 66], [67, 74], [75, 76], [76, 81], [82, 86], [86, 87], [87, 88], [88, 89]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.1518566757440567, {u'tokens': [u'Likewise', u',', u'when', u'an', u'adult', u'kangaroo', u'is', u'injured', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consulted', u'for', u'instructions', u'on', u'proper', u'care', u'.'], u'lemmas': [u'likewise', u',', u'when', u'a', u'adult', u'kangaroo', u'be', u'injure', u'in', u'a', u'collision', u',', u'a', u'vet', u',', u'the', u'RSPCA', u'or', u'the', u'National', u'Parks', u'and', u'Wildlife', u'Service', u'can', u'be', u'consult', u'for', u'instruction', u'on', u'proper', u'care', u'.'], u'pos': [u'RB', u',', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u',', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[15151, 15159], [15159, 15160], [15161, 15165], [15166, 15168], [15169, 15174], [15175, 15183], [15184, 15186], [15187, 15194], [15195, 15197], [15198, 15199], [15200, 15209], [15209, 15210], [15211, 15212], [15213, 15216], [15216, 15217], [15218, 15221], [15222, 15227], [15228, 15230], [15231, 15234], [15235, 15243], [15244, 15249], [15250, 15253], [15254, 15262], [15263, 15270], [15271, 15274], [15275, 15277], [15278, 15287], [15288, 15291], [15292, 15304], [15305, 15307], [15308, 15314], [15315, 15319], [15319, 15320]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.14539483189582825, {u'tokens': [u'Kangaroos', u'are', u'the', u'only', u'large', u'animals', u'to', u'use', u'hopping', u'as', u'a', u'means', u'of', u'locomotion', u'.'], u'lemmas': [u'kangaroo', u'be', u'the', u'only', u'large', u'animal', u'to', u'use', u'hop', u'as', u'a', u'means', u'of', u'locomotion', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'RB', u'JJ', u'NNS', u'TO', u'VB', u'VBG', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[4367, 4376], [4377, 4380], [4381, 4384], [4385, 4389], [4390, 4395], [4396, 4403], [4404, 4406], [4407, 4410], [4411, 4418], [4419, 4421], [4422, 4423], [4424, 4429], [4430, 4432], [4433, 4443], [4443, 4444]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.14275002479553223, {u'tokens': [u'Newborn', u'joey', u'sucking', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'Kangaroos', u'have', u'developed', u'a', u'number', u'of', u'adaptations', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'lemmas': [u'newborn', u'joey', u'suck', u'on', u'a', u'teat', u'in', u'the', u'pouch', u'kangaroo', u'have', u'develop', u'a', u'number', u'of', u'adaptation', u'to', u'a', u'dry', u',', u'infertile', u'continent', u'and', u'highly', u'variable', u'climate', u'.'], u'pos': [u'JJ', u'NN', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'NNS', u'TO', u'DT', u'JJ', u',', u'JJ', u'NN', u'CC', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[8009, 8016], [8017, 8021], [8022, 8029], [8030, 8032], [8033, 8034], [8035, 8039], [8040, 8042], [8043, 8046], [8047, 8052], [8053, 8062], [8063, 8067], [8068, 8077], [8078, 8079], [8080, 8086], [8087, 8089], [8090, 8101], [8102, 8104], [8105, 8106], [8107, 8110], [8110, 8111], [8112, 8121], [8122, 8131], [8132, 8135], [8136, 8142], [8143, 8151], [8152, 8159], [8159, 8160]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.12952177226543427, {u'tokens': [u'The', u'average', u'life', u'expectancy', u'of', u'a', u'kangaroo', u'is', u'about', u'4', u'6', u'years', u'.'], u'lemmas': [u'the', u'average', u'life', u'expectancy', u'of', u'a', u'kangaroo', u'be', u'about', u'4', u'6', u'year', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'IN', u'CD', u'CD', u'NNS', u'.'], u'char_offsets': [[5087, 5090], [5091, 5098], [5099, 5103], [5104, 5114], [5115, 5117], [5118, 5119], [5120, 5128], [5129, 5131], [5132, 5137], [5138, 5139], [5140, 5141], [5142, 5147], [5147, 5148]]}) 
answer: set([u'herbivour'])
candidate Sentence: (0.12680080533027649, {u'tokens': [u'There', u'are', u'four', u'species', u'that', u'are', u'commonly', u'referred', u'to', u'as', u'kangaroos', u':', u'*', u'The', u'Red', u'Kangaroo', u'-LRB-', u'Macropus', u'rufus', u'-RRB-', u'is', u'the', u'largest', u'surviving', u'marsupial', u'anywhere', u'in', u'the', u'world', u'.'], u'lemmas': [u'there', u'be', u'four', u'species', u'that', u'be', u'commonly', u'refer', u'to', u'as', u'kangaroo', u':', u'*', u'the', u'red', u'kangaroo', u'-lrb-', u'macropus', u'rufus', u'-rrb-', u'be', u'the', u'largest', u'survive', u'marsupial', u'anywhere', u'in', u'the', u'world', u'.'], u'pos': [u'EX', u'VBP', u'CD', u'NNS', u'WDT', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u':', u'SYM', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJS', u'VBG', u'JJ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2701, 2706], [2707, 2710], [2711, 2715], [2716, 2723], [2724, 2728], [2729, 2732], [2733, 2741], [2742, 2750], [2751, 2753], [2754, 2756], [2757, 2766], [2766, 2767], [2768, 2769], [2770, 2773], [2774, 2777], [2778, 2786], [2787, 2788], [2788, 2796], [2797, 2802], [2802, 2803], [2804, 2806], [2807, 2810], [2811, 2818], [2819, 2828], [2829, 2838], [2839, 2847], [2848, 2850], [2851, 2854], [2855, 2860], [2860, 2861]]}) 
answer: set([u'herbivour'])

Is the kangaroo an herbivour?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8dd40>.answer
_____________________________ test_yesno[param211] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa8dd88>, (<src.tfidf.TF_IDF object at 0x1084de990>, set(['kangaroo'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8dd88>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32601141929626465, {u'tokens': [u'Kangaroos', u':', u'Biology', u'of', u'the', u'Largest', u'Marsupials', u'.'], u'lemmas': [u'Kangaroos', u':', u'Biology', u'of', u'the', u'Largest', u'Marsupials', u'.'], u'pos': [u'NNP', u':', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'.'], u'char_offsets': [[16585, 16594], [16594, 16595], [16596, 16603], [16604, 16606], [16607, 16610], [16611, 16618], [16619, 16629], [16629, 16630]]}) 
answer: set([u'shy'])
candidate Sentence: (0.29492977261543274, {u'tokens': [u'Europeans', u'have', u'long', u'regarded', u'Kangaroos', u'as', u'strange', u'animals', u'.'], u'lemmas': [u'Europeans', u'have', u'long', u'regard', u'Kangaroos', u'as', u'strange', u'animal', u'.'], u'pos': [u'NNPS', u'VBP', u'JJ', u'VBN', u'NNP', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3785, 3794], [3795, 3799], [3800, 3804], [3805, 3813], [3814, 3823], [3824, 3826], [3827, 3834], [3835, 3842], [3842, 3843]]}) 
answer: set([u'shy'])
candidate Sentence: (0.27802830934524536, {u'tokens': [u'Hindleg', u'of', u'a', u'kangaroo', u'Kangaroos', u'and', u'wallabies', u'have', u'large', u',', u'stretchy', u'tendons', u'in', u'their', u'hind', u'legs', u'.'], u'lemmas': [u'Hindleg', u'of', u'a', u'kangaroo', u'Kangaroos', u'and', u'wallaby', u'have', u'large', u',', u'stretchy', u'tendon', u'in', u'they', u'hind', u'leg', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u'NNP', u'CC', u'NNS', u'VBP', u'JJ', u',', u'JJ', u'NNS', u'IN', u'PRP$', u'JJ', u'NNS', u'.'], u'char_offsets': [[9520, 9527], [9528, 9530], [9531, 9532], [9533, 9541], [9542, 9551], [9552, 9555], [9556, 9565], [9566, 9570], [9571, 9576], [9576, 9577], [9578, 9586], [9588, 9595], [9596, 9598], [9599, 9604], [9605, 9609], [9610, 9614], [9614, 9615]]}) 
answer: set([u'shy'])
candidate Sentence: (0.22648809850215912, {u'tokens': [u'Kangaroos', u'and', u'wallabies', u'are', u'adept', u'swimmers', u',', u'and', u'often', u'flee', u'into', u'waterways', u'if', u'presented', u'with', u'the', u'option', u'.'], u'lemmas': [u'Kangaroos', u'and', u'wallaby', u'be', u'adept', u'swimmer', u',', u'and', u'often', u'flee', u'into', u'waterway', u'if', u'present', u'with', u'the', u'option', u'.'], u'pos': [u'NNP', u'CC', u'NNS', u'VBP', u'JJ', u'NNS', u',', u'CC', u'RB', u'VBP', u'IN', u'NNS', u'IN', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[7581, 7590], [7591, 7594], [7595, 7604], [7605, 7608], [7609, 7614], [7615, 7623], [7623, 7624], [7625, 7628], [7629, 7634], [7635, 7639], [7640, 7644], [7645, 7654], [7655, 7657], [7658, 7667], [7668, 7672], [7673, 7676], [7677, 7683], [7683, 7684]]}) 
answer: set([u'shy'])
candidate Sentence: (0.22561410069465637, {u'tokens': [u'*', u'The', u'Antilopine', u'Kangaroo', u'-LRB-', u'Macropus', u'antilopinus', u'-RRB-', u'is', u',', u'essentially', u',', u'the', u'far-northern', u'equivalent', u'of', u'the', u'Eastern', u'and', u'Western', u'Grey', u'Kangaroos', u'.'], u'lemmas': [u'*', u'the', u'Antilopine', u'Kangaroo', u'-lrb-', u'Macropus', u'antilopinus', u'-rrb-', u'be', u',', u'essentially', u',', u'the', u'far-northern', u'equivalent', u'of', u'the', u'Eastern', u'and', u'Western', u'Grey', u'Kangaroos', u'.'], u'pos': [u'SYM', u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NNS', u'-RRB-', u'VBZ', u',', u'RB', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[3458, 3459], [3460, 3463], [3464, 3474], [3475, 3483], [3484, 3485], [3485, 3493], [3494, 3505], [3505, 3506], [3507, 3509], [3509, 3510], [3511, 3522], [3522, 3523], [3524, 3527], [3528, 3540], [3541, 3551], [3552, 3554], [3555, 3558], [3559, 3566], [3567, 3570], [3571, 3578], [3579, 3583], [3584, 3593], [3593, 3594]]}) 
answer: set([u'shy'])
candidate Sentence: (0.20901872217655182, {u'tokens': [u'Kangaroos', u'dazzled', u'by', u'headlights', u'or', u'startled', u'by', u'engine', u'noise', u'have', u'been', u'known', u'to', u'leap', u'in', u'front', u'of', u'cars', u'.'], u'lemmas': [u'Kangaroos', u'dazzle', u'by', u'headlight', u'or', u'startle', u'by', u'engine', u'noise', u'have', u'be', u'know', u'to', u'leap', u'in', u'front', u'of', u'car', u'.'], u'pos': [u'NNP', u'VBN', u'IN', u'NNS', u'CC', u'VBN', u'IN', u'NN', u'NN', u'VBP', u'VBN', u'VBN', u'TO', u'VB', u'IN', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[14160, 14169], [14170, 14177], [14178, 14180], [14181, 14191], [14192, 14194], [14195, 14203], [14204, 14206], [14207, 14213], [14214, 14219], [14220, 14224], [14225, 14229], [14230, 14235], [14236, 14238], [14239, 14243], [14244, 14246], [14247, 14252], [14253, 14255], [14256, 14260], [14260, 14261]]}) 
answer: set([u'shy'])
candidate Sentence: (0.021779686212539673, {u'tokens': [u'They', u'are', u'not', u'farmed', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroos', u'are', u'shot', u'for', u'meat', u',', u'over', u'which', u'there', u'is', u'controversy', u'.'], u'lemmas': [u'they', u'be', u'not', u'farm', u'to', u'any', u'extent', u',', u'but', u'wild', u'kangaroo', u'be', u'shoot', u'for', u'meat', u',', u'over', u'which', u'there', u'be', u'controversy', u'.'], u'pos': [u'PRP', u'VBP', u'RB', u'VBN', u'TO', u'DT', u'NN', u',', u'CC', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'NN', u',', u'IN', u'WDT', u'EX', u'VBZ', u'NN', u'.'], u'char_offsets': [[748, 752], [753, 756], [757, 760], [761, 767], [768, 770], [771, 774], [775, 781], [781, 782], [783, 786], [787, 791], [792, 801], [802, 805], [806, 810], [811, 814], [815, 819], [819, 820], [821, 825], [826, 831], [832, 837], [838, 840], [841, 852], [852, 853]]}) 
answer: set([u'shy', u'kangaroos'])
candidate Sentence: (0.01880745030939579, {u'tokens': [u'There', u'are', u'four', u'species', u'that', u'are', u'commonly', u'referred', u'to', u'as', u'kangaroos', u':', u'*', u'The', u'Red', u'Kangaroo', u'-LRB-', u'Macropus', u'rufus', u'-RRB-', u'is', u'the', u'largest', u'surviving', u'marsupial', u'anywhere', u'in', u'the', u'world', u'.'], u'lemmas': [u'there', u'be', u'four', u'species', u'that', u'be', u'commonly', u'refer', u'to', u'as', u'kangaroo', u':', u'*', u'the', u'red', u'kangaroo', u'-lrb-', u'macropus', u'rufus', u'-rrb-', u'be', u'the', u'largest', u'survive', u'marsupial', u'anywhere', u'in', u'the', u'world', u'.'], u'pos': [u'EX', u'VBP', u'CD', u'NNS', u'WDT', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u':', u'SYM', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJS', u'VBG', u'JJ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2701, 2706], [2707, 2710], [2711, 2715], [2716, 2723], [2724, 2728], [2729, 2732], [2733, 2741], [2742, 2750], [2751, 2753], [2754, 2756], [2757, 2766], [2766, 2767], [2768, 2769], [2770, 2773], [2774, 2777], [2778, 2786], [2787, 2788], [2788, 2796], [2797, 2802], [2802, 2803], [2804, 2806], [2807, 2810], [2811, 2818], [2819, 2828], [2829, 2838], [2839, 2847], [2848, 2850], [2851, 2854], [2855, 2860], [2860, 2861]]}) 
answer: set([u'shy', u'kangaroos'])
candidate Sentence: (0.017908686771988869, {u'tokens': [u'Male', u'kangaroos', u'are', u'called', u'bucks', u',', u'boomers', u',', u'jacks', u',', u'or', u'old', u'men', u';', u'females', u'are', u'does', u',', u'flyers', u',', u'or', u'jills', u',', u'and', u'the', u'young', u'ones', u'are', u'joeys', u'.'], u'lemmas': [u'male', u'kangaroo', u'be', u'call', u'buck', u',', u'boomer', u',', u'jack', u',', u'or', u'old', u'man', u';', u'female', u'be', u'do', u',', u'flyer', u',', u'or', u'jill', u',', u'and', u'the', u'young', u'one', u'be', u'joey', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'JJ', u'NNS', u':', u'NNS', u'VBP', u'VBZ', u',', u'NNS', u',', u'CC', u'NNS', u',', u'CC', u'DT', u'JJ', u'NNS', u'VBP', u'NNS', u'.'], u'char_offsets': [[2332, 2336], [2337, 2346], [2347, 2350], [2351, 2357], [2358, 2363], [2363, 2364], [2365, 2372], [2372, 2373], [2374, 2379], [2379, 2380], [2381, 2383], [2384, 2387], [2388, 2391], [2391, 2392], [2393, 2400], [2401, 2404], [2405, 2409], [2409, 2410], [2411, 2417], [2417, 2418], [2419, 2421], [2422, 2427], [2427, 2428], [2429, 2432], [2433, 2436], [2437, 2442], [2443, 2447], [2448, 2451], [2452, 2457], [2457, 2458]]}) 
answer: set([u'shy', u'kangaroos'])
candidate Sentence: (0.016681630164384842, {u'tokens': [u'The', u'genome', u'of', u'a', u'marsupial', u'such', u'as', u'the', u'kangaroo', u'is', u'of', u'great', u'interest', u'to', u'scientists', u'studying', u'comparative', u'genomics', u'because', u'marsupials', u'are', u'at', u'an', u'ideal', u'degree', u'of', u'evolutionary', u'divergence', u'from', u'humans', u':', u'mice', u'are', u'too', u'close', u'and', u'have', u"n't", u'developed', u'many', u'different', u'functions', u',', u'while', u'birds', u'are', u'genetically', u'too', u'remote', u'.'], u'lemmas': [u'the', u'genome', u'of', u'a', u'marsupial', u'such', u'as', u'the', u'kangaroo', u'be', u'of', u'great', u'interest', u'to', u'scientist', u'study', u'comparative', u'genomic', u'because', u'marsupial', u'be', u'at', u'a', u'ideal', u'degree', u'of', u'evolutionary', u'divergence', u'from', u'human', u':', u'mouse', u'be', u'too', u'close', u'and', u'have', u'not', u'develop', u'many', u'different', u'function', u',', u'while', u'bird', u'be', u'genetically', u'too', u'remote', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'IN', u'JJ', u'NN', u'TO', u'NNS', u'VBG', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'IN', u'NNS', u':', u'NNS', u'VBP', u'RB', u'JJ', u'CC', u'VBP', u'RB', u'VBN', u'JJ', u'JJ', u'NNS', u',', u'IN', u'NNS', u'VBP', u'RB', u'RB', u'JJ', u'.'], u'char_offsets': [[11241, 11244], [11245, 11251], [11252, 11254], [11255, 11256], [11257, 11266], [11267, 11271], [11272, 11274], [11275, 11278], [11279, 11287], [11288, 11290], [11291, 11293], [11294, 11299], [11300, 11308], [11309, 11311], [11312, 11322], [11323, 11331], [11332, 11343], [11344, 11352], [11353, 11360], [11361, 11371], [11372, 11375], [11376, 11378], [11379, 11381], [11382, 11387], [11388, 11394], [11395, 11397], [11398, 11410], [11411, 11421], [11422, 11426], [11427, 11433], [11433, 11434], [11435, 11439], [11440, 11443], [11444, 11447], [11448, 11453], [11454, 11457], [11458, 11462], [11462, 11465], [11466, 11475], [11476, 11480], [11481, 11490], [11491, 11500], [11500, 11501], [11502, 11507], [11508, 11513], [11514, 11517], [11518, 11529], [11530, 11533], [11534, 11540], [11540, 11541]]}) 
answer: set([u'shy', u'kangaroos'])

Are Kangaroos Shy?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa8dd88>.answer
_____________________________ test_yesno[param222] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa923b0>, (<src.tfidf.TF_IDF object at 0x1061d24d0>, set(['leopard'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa923b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.47867536544799805, {u'tokens': [u'The', u'leopard', u'-LRB-', u'Panthera', u'pardus', u'-RRB-', u'is', u'an', u'Old', u'World', u'mammal', u'of', u'the', u'Felidae', u'family', u'and', u'the', u'smallest', u'of', u'the', u'four', u'`', u'big', u'cats', u"'", u'of', u'the', u'genus', u'Panthera', u',', u'along', u'with', u'the', u'tiger', u',', u'lion', u',', u'and', u'jaguar', u'.'], u'lemmas': [u'the', u'leopard', u'-lrb-', u'panthera', u'pardus', u'-rrb-', u'be', u'a', u'old', u'world', u'mammal', u'of', u'the', u'Felidae', u'family', u'and', u'the', u'smallest', u'of', u'the', u'four', u'`', u'big', u'cat', u"'", u'of', u'the', u'genus', u'panthera', u',', u'along', u'with', u'the', u'tiger', u',', u'lion', u',', u'and', u'jaguar', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NN', u'CC', u'DT', u'JJS', u'IN', u'DT', u'CD', u'``', u'JJ', u'NNS', u'POS', u'IN', u'DT', u'NN', u'NN', u',', u'IN', u'IN', u'DT', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[0, 3], [4, 11], [12, 13], [13, 21], [22, 28], [28, 29], [30, 32], [33, 35], [36, 39], [40, 45], [46, 52], [53, 55], [56, 59], [60, 67], [68, 74], [75, 78], [79, 82], [83, 91], [92, 94], [95, 98], [99, 103], [104, 105], [105, 108], [109, 113], [113, 114], [115, 117], [118, 121], [122, 127], [128, 136], [136, 137], [138, 143], [144, 148], [149, 152], [153, 158], [158, 159], [160, 164], [164, 165], [166, 169], [170, 176], [176, 177]]}) 
answer: set([u'one'])
candidate Sentence: (0.19199164211750031, {u'tokens': [u'However', u',', u'three', u'or', u'four', u'are', u'sometimes', u'seen', u'together', u'.'], u'lemmas': [u'however', u',', u'three', u'or', u'four', u'be', u'sometimes', u'see', u'together', u'.'], u'pos': [u'RB', u',', u'CD', u'CC', u'CD', u'VBP', u'RB', u'VBN', u'RB', u'.'], u'char_offsets': [[5500, 5507], [5507, 5508], [5509, 5514], [5515, 5517], [5518, 5522], [5523, 5526], [5527, 5536], [5537, 5541], [5542, 5550], [5550, 5551]]}) 
answer: set([u'big', u'one', u'cat'])
candidate Sentence: (0.1594136655330658, {u'tokens': [u'These', u'cats', u'are', u'solitary', u',', u'avoiding', u'one', u'another', u'.'], u'lemmas': [u'these', u'cat', u'be', u'solitary', u',', u'avoid', u'one', u'another', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'JJ', u',', u'VBG', u'CD', u'DT', u'.'], u'char_offsets': [[5453, 5458], [5459, 5463], [5464, 5467], [5468, 5476], [5476, 5477], [5478, 5486], [5487, 5490], [5491, 5498], [5498, 5499]]}) 
answer: set([u'four', u'big'])
candidate Sentence: (0.14659266173839569, {u'tokens': [u'Hearing', u'and', u'eyesight', u'are', u'the', u'strongest', u'of', u'these', u'cats', u"'", u'senses', u'and', u'are', u'extremely', u'acute', u'.'], u'lemmas': [u'hearing', u'and', u'eyesight', u'be', u'the', u'strongest', u'of', u'these', u'cat', u"'", u'sens', u'and', u'be', u'extremely', u'acute', u'.'], u'pos': [u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'IN', u'DT', u'NNS', u'POS', u'NNS', u'CC', u'VBP', u'RB', u'JJ', u'.'], u'char_offsets': [[5552, 5559], [5560, 5563], [5564, 5572], [5573, 5576], [5577, 5580], [5581, 5590], [5591, 5593], [5594, 5599], [5600, 5604], [5604, 5605], [5606, 5612], [5613, 5616], [5617, 5620], [5621, 5630], [5631, 5636], [5636, 5637]]}) 
answer: set([u'four', u'big', u'one'])
candidate Sentence: (0.10144495218992233, {u'tokens': [u'The', u'victims', u"'", u'flesh', u'would', u'be', u'cut', u'from', u'their', u'bodies', u'and', u'distributed', u'to', u'members', u'of', u'the', u'society', u'.'], u'lemmas': [u'the', u'victim', u"'", u'flesh', u'would', u'be', u'cut', u'from', u'they', u'body', u'and', u'distribute', u'to', u'member', u'of', u'the', u'society', u'.'], u'pos': [u'DT', u'NNS', u'POS', u'NN', u'MD', u'VB', u'VBN', u'IN', u'PRP$', u'NNS', u'CC', u'VBN', u'TO', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18410, 18413], [18414, 18421], [18421, 18422], [18423, 18428], [18429, 18434], [18435, 18437], [18438, 18441], [18442, 18446], [18447, 18452], [18453, 18459], [18460, 18463], [18464, 18475], [18476, 18478], [18479, 18486], [18487, 18489], [18490, 18493], [18494, 18501], [18501, 18502]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.088105201721191406, {u'tokens': [u'Johns', u'Hopkins', u'University', u'Press', u',', u'1999', u'ISBN', u'0-8018-5789-9', u'One', u'of', u'many', u'spotted', u'cats', u',', u'a', u'leopard', u'may', u'be', u'mistaken', u'for', u'a', u'cheetah', u'or', u'a', u'jaguar', u'.'], u'lemmas': [u'Johns', u'Hopkins', u'University', u'Press', u',', u'1999', u'ISBN', u'0-8018-5789-9', u'one', u'of', u'many', u'spotted', u'cat', u',', u'a', u'leopard', u'may', u'be', u'mistake', u'for', u'a', u'cheetah', u'or', u'a', u'jaguar', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u',', u'CD', u'NNP', u'CD', u'CD', u'IN', u'JJ', u'JJ', u'NNS', u',', u'DT', u'NN', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[2903, 2908], [2909, 2916], [2917, 2927], [2928, 2933], [2933, 2934], [2935, 2939], [2940, 2944], [2945, 2958], [2959, 2962], [2963, 2965], [2966, 2970], [2971, 2978], [2979, 2983], [2983, 2984], [2985, 2986], [2987, 2994], [2995, 2998], [2999, 3001], [3002, 3010], [3011, 3014], [3015, 3016], [3017, 3024], [3025, 3027], [3028, 3029], [3030, 3036], [3036, 3037]]}) 
answer: set([u'four', u'big'])
candidate Sentence: (0.083992108702659607, {u'tokens': [u'Members', u'would', u'dress', u'in', u'leopard', u'skins', u',', u'waylaying', u'travellers', u'with', u'sharp', u'claw-like', u'weapons', u'in', u'the', u'form', u'of', u'leopards', u"'", u'claws', u'and', u'teeth', u'.'], u'lemmas': [u'member', u'would', u'dress', u'in', u'leopard', u'skin', u',', u'waylay', u'traveller', u'with', u'sharp', u'claw-like', u'weapon', u'in', u'the', u'form', u'of', u'leopard', u"'", u'claw', u'and', u'tooth', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'IN', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'POS', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[18280, 18287], [18288, 18293], [18294, 18299], [18300, 18302], [18303, 18310], [18311, 18316], [18316, 18317], [18318, 18327], [18328, 18338], [18339, 18343], [18344, 18349], [18350, 18359], [18360, 18367], [18368, 18370], [18371, 18374], [18375, 18379], [18380, 18382], [18383, 18391], [18391, 18392], [18393, 18398], [18399, 18402], [18403, 18408], [18408, 18409]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.081276416778564453, {u'tokens': [u'In', u'Asia', u',', u'one', u'can', u'see', u'leopards', u'Yala', u'National', u'Park', u'in', u'Sri', u'Lanka', u',', u'which', u'has', u'one', u'of', u'the', u'world', u"'s", u'highest', u'density', u'of', u'wild', u'leopards', u',', u'but', u'even', u'here', u'sightings', u'are', u'by', u'no', u'means', u'guaranteed', u'because', u'more', u'than', u'half', u'the', u'park', u'is', u'closed', u'off', u'to', u'the', u'public', u',', u'allowing', u'the', u'animals', u'to', u'thrive', u'.'], u'lemmas': [u'in', u'Asia', u',', u'one', u'can', u'see', u'leopard', u'Yala', u'National', u'Park', u'in', u'Sri', u'Lanka', u',', u'which', u'have', u'one', u'of', u'the', u'world', u"'s", u'highest', u'density', u'of', u'wild', u'leopard', u',', u'but', u'even', u'here', u'sighting', u'be', u'by', u'no', u'means', u'guarantee', u'because', u'more', u'than', u'half', u'the', u'park', u'be', u'close', u'off', u'to', u'the', u'public', u',', u'allow', u'the', u'animal', u'to', u'thrive', u'.'], u'pos': [u'IN', u'NNP', u',', u'CD', u'MD', u'VB', u'NNS', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'CD', u'IN', u'DT', u'NN', u'POS', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u',', u'CC', u'RB', u'RB', u'NNS', u'VBP', u'IN', u'DT', u'NNS', u'VBN', u'IN', u'JJR', u'IN', u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'TO', u'DT', u'NN', u',', u'VBG', u'DT', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[16651, 16653], [16654, 16658], [16658, 16659], [16660, 16663], [16664, 16667], [16668, 16671], [16672, 16680], [16681, 16685], [16686, 16694], [16695, 16699], [16700, 16702], [16703, 16706], [16707, 16712], [16712, 16713], [16714, 16719], [16720, 16723], [16724, 16727], [16728, 16730], [16731, 16734], [16735, 16740], [16740, 16742], [16743, 16750], [16751, 16758], [16759, 16761], [16762, 16766], [16767, 16775], [16775, 16776], [16777, 16780], [16781, 16785], [16786, 16790], [16791, 16800], [16801, 16804], [16805, 16807], [16808, 16810], [16811, 16816], [16817, 16827], [16828, 16835], [16836, 16840], [16841, 16845], [16846, 16850], [16851, 16854], [16855, 16859], [16860, 16862], [16863, 16869], [16870, 16873], [16874, 16876], [16877, 16880], [16881, 16887], [16887, 16888], [16889, 16897], [16898, 16901], [16902, 16909], [16910, 16912], [16913, 16919], [16919, 16920]]}) 
answer: set([u'four', u'big', u'cat'])
candidate Sentence: (0.08021111786365509, {u'tokens': [u'The', u'species', u"'", u'success', u'owes', u'in', u'part', u'to', u'its', u'opportunistic', u'hunting', u'behaviour', u'and', u'its', u'adaptability', u'to', u'a', u'variety', u'of', u'habitats', u'.'], u'lemmas': [u'the', u'species', u"'", u'success', u'owe', u'in', u'part', u'to', u'its', u'opportunistic', u'hunting', u'behaviour', u'and', u'its', u'adaptability', u'to', u'a', u'variety', u'of', u'habitat', u'.'], u'pos': [u'DT', u'NNS', u'POS', u'NN', u'VBZ', u'IN', u'NN', u'TO', u'PRP$', u'JJ', u'NN', u'NN', u'CC', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[809, 812], [813, 820], [820, 821], [822, 829], [830, 834], [835, 837], [838, 842], [843, 845], [846, 849], [850, 863], [864, 871], [872, 881], [882, 885], [886, 889], [890, 902], [903, 905], [906, 907], [908, 915], [916, 918], [919, 927], [927, 928]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.077804386615753174, {u'tokens': [u'One', u'of', u'these', u'was', u'purchased', u'in', u'1898', u'by', u'Berlin', u'Zoo', u'.'], u'lemmas': [u'one', u'of', u'these', u'be', u'purchase', u'in', u'1898', u'by', u'Berlin', u'Zoo', u'.'], u'pos': [u'CD', u'IN', u'DT', u'VBD', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[14858, 14861], [14862, 14864], [14865, 14870], [14871, 14874], [14875, 14884], [14885, 14887], [14888, 14892], [14893, 14895], [14896, 14902], [14903, 14906], [14906, 14907]]}) 
answer: set([u'four', u'big', u'cat'])

Is the leopard one of the four 'big cats'?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa923b0>.answer
_____________________________ test_yesno[param223] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa92440>, (<src.tfidf.TF_IDF object at 0x1061d24d0>, set(['leopard'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa92440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.47867536544799805, {u'tokens': [u'The', u'leopard', u'-LRB-', u'Panthera', u'pardus', u'-RRB-', u'is', u'an', u'Old', u'World', u'mammal', u'of', u'the', u'Felidae', u'family', u'and', u'the', u'smallest', u'of', u'the', u'four', u'`', u'big', u'cats', u"'", u'of', u'the', u'genus', u'Panthera', u',', u'along', u'with', u'the', u'tiger', u',', u'lion', u',', u'and', u'jaguar', u'.'], u'lemmas': [u'the', u'leopard', u'-lrb-', u'panthera', u'pardus', u'-rrb-', u'be', u'a', u'old', u'world', u'mammal', u'of', u'the', u'Felidae', u'family', u'and', u'the', u'smallest', u'of', u'the', u'four', u'`', u'big', u'cat', u"'", u'of', u'the', u'genus', u'panthera', u',', u'along', u'with', u'the', u'tiger', u',', u'lion', u',', u'and', u'jaguar', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NN', u'CC', u'DT', u'JJS', u'IN', u'DT', u'CD', u'``', u'JJ', u'NNS', u'POS', u'IN', u'DT', u'NN', u'NN', u',', u'IN', u'IN', u'DT', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[0, 3], [4, 11], [12, 13], [13, 21], [22, 28], [28, 29], [30, 32], [33, 35], [36, 39], [40, 45], [46, 52], [53, 55], [56, 59], [60, 67], [68, 74], [75, 78], [79, 82], [83, 91], [92, 94], [95, 98], [99, 103], [104, 105], [105, 108], [109, 113], [113, 114], [115, 117], [118, 121], [122, 127], [128, 136], [136, 137], [138, 143], [144, 148], [149, 152], [153, 158], [158, 159], [160, 164], [164, 165], [166, 169], [170, 176], [176, 177]]}) 
answer: set([u'one'])
candidate Sentence: (0.19199164211750031, {u'tokens': [u'However', u',', u'three', u'or', u'four', u'are', u'sometimes', u'seen', u'together', u'.'], u'lemmas': [u'however', u',', u'three', u'or', u'four', u'be', u'sometimes', u'see', u'together', u'.'], u'pos': [u'RB', u',', u'CD', u'CC', u'CD', u'VBP', u'RB', u'VBN', u'RB', u'.'], u'char_offsets': [[5500, 5507], [5507, 5508], [5509, 5514], [5515, 5517], [5518, 5522], [5523, 5526], [5527, 5536], [5537, 5541], [5542, 5550], [5550, 5551]]}) 
answer: set([u'big', u'one', u'cat'])
candidate Sentence: (0.1594136655330658, {u'tokens': [u'These', u'cats', u'are', u'solitary', u',', u'avoiding', u'one', u'another', u'.'], u'lemmas': [u'these', u'cat', u'be', u'solitary', u',', u'avoid', u'one', u'another', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'JJ', u',', u'VBG', u'CD', u'DT', u'.'], u'char_offsets': [[5453, 5458], [5459, 5463], [5464, 5467], [5468, 5476], [5476, 5477], [5478, 5486], [5487, 5490], [5491, 5498], [5498, 5499]]}) 
answer: set([u'four', u'big'])
candidate Sentence: (0.14659266173839569, {u'tokens': [u'Hearing', u'and', u'eyesight', u'are', u'the', u'strongest', u'of', u'these', u'cats', u"'", u'senses', u'and', u'are', u'extremely', u'acute', u'.'], u'lemmas': [u'hearing', u'and', u'eyesight', u'be', u'the', u'strongest', u'of', u'these', u'cat', u"'", u'sens', u'and', u'be', u'extremely', u'acute', u'.'], u'pos': [u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'IN', u'DT', u'NNS', u'POS', u'NNS', u'CC', u'VBP', u'RB', u'JJ', u'.'], u'char_offsets': [[5552, 5559], [5560, 5563], [5564, 5572], [5573, 5576], [5577, 5580], [5581, 5590], [5591, 5593], [5594, 5599], [5600, 5604], [5604, 5605], [5606, 5612], [5613, 5616], [5617, 5620], [5621, 5630], [5631, 5636], [5636, 5637]]}) 
answer: set([u'four', u'big', u'one'])
candidate Sentence: (0.10144495218992233, {u'tokens': [u'The', u'victims', u"'", u'flesh', u'would', u'be', u'cut', u'from', u'their', u'bodies', u'and', u'distributed', u'to', u'members', u'of', u'the', u'society', u'.'], u'lemmas': [u'the', u'victim', u"'", u'flesh', u'would', u'be', u'cut', u'from', u'they', u'body', u'and', u'distribute', u'to', u'member', u'of', u'the', u'society', u'.'], u'pos': [u'DT', u'NNS', u'POS', u'NN', u'MD', u'VB', u'VBN', u'IN', u'PRP$', u'NNS', u'CC', u'VBN', u'TO', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18410, 18413], [18414, 18421], [18421, 18422], [18423, 18428], [18429, 18434], [18435, 18437], [18438, 18441], [18442, 18446], [18447, 18452], [18453, 18459], [18460, 18463], [18464, 18475], [18476, 18478], [18479, 18486], [18487, 18489], [18490, 18493], [18494, 18501], [18501, 18502]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.088105201721191406, {u'tokens': [u'Johns', u'Hopkins', u'University', u'Press', u',', u'1999', u'ISBN', u'0-8018-5789-9', u'One', u'of', u'many', u'spotted', u'cats', u',', u'a', u'leopard', u'may', u'be', u'mistaken', u'for', u'a', u'cheetah', u'or', u'a', u'jaguar', u'.'], u'lemmas': [u'Johns', u'Hopkins', u'University', u'Press', u',', u'1999', u'ISBN', u'0-8018-5789-9', u'one', u'of', u'many', u'spotted', u'cat', u',', u'a', u'leopard', u'may', u'be', u'mistake', u'for', u'a', u'cheetah', u'or', u'a', u'jaguar', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u',', u'CD', u'NNP', u'CD', u'CD', u'IN', u'JJ', u'JJ', u'NNS', u',', u'DT', u'NN', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[2903, 2908], [2909, 2916], [2917, 2927], [2928, 2933], [2933, 2934], [2935, 2939], [2940, 2944], [2945, 2958], [2959, 2962], [2963, 2965], [2966, 2970], [2971, 2978], [2979, 2983], [2983, 2984], [2985, 2986], [2987, 2994], [2995, 2998], [2999, 3001], [3002, 3010], [3011, 3014], [3015, 3016], [3017, 3024], [3025, 3027], [3028, 3029], [3030, 3036], [3036, 3037]]}) 
answer: set([u'four', u'big'])
candidate Sentence: (0.083992108702659607, {u'tokens': [u'Members', u'would', u'dress', u'in', u'leopard', u'skins', u',', u'waylaying', u'travellers', u'with', u'sharp', u'claw-like', u'weapons', u'in', u'the', u'form', u'of', u'leopards', u"'", u'claws', u'and', u'teeth', u'.'], u'lemmas': [u'member', u'would', u'dress', u'in', u'leopard', u'skin', u',', u'waylay', u'traveller', u'with', u'sharp', u'claw-like', u'weapon', u'in', u'the', u'form', u'of', u'leopard', u"'", u'claw', u'and', u'tooth', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'IN', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'POS', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[18280, 18287], [18288, 18293], [18294, 18299], [18300, 18302], [18303, 18310], [18311, 18316], [18316, 18317], [18318, 18327], [18328, 18338], [18339, 18343], [18344, 18349], [18350, 18359], [18360, 18367], [18368, 18370], [18371, 18374], [18375, 18379], [18380, 18382], [18383, 18391], [18391, 18392], [18393, 18398], [18399, 18402], [18403, 18408], [18408, 18409]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.081276416778564453, {u'tokens': [u'In', u'Asia', u',', u'one', u'can', u'see', u'leopards', u'Yala', u'National', u'Park', u'in', u'Sri', u'Lanka', u',', u'which', u'has', u'one', u'of', u'the', u'world', u"'s", u'highest', u'density', u'of', u'wild', u'leopards', u',', u'but', u'even', u'here', u'sightings', u'are', u'by', u'no', u'means', u'guaranteed', u'because', u'more', u'than', u'half', u'the', u'park', u'is', u'closed', u'off', u'to', u'the', u'public', u',', u'allowing', u'the', u'animals', u'to', u'thrive', u'.'], u'lemmas': [u'in', u'Asia', u',', u'one', u'can', u'see', u'leopard', u'Yala', u'National', u'Park', u'in', u'Sri', u'Lanka', u',', u'which', u'have', u'one', u'of', u'the', u'world', u"'s", u'highest', u'density', u'of', u'wild', u'leopard', u',', u'but', u'even', u'here', u'sighting', u'be', u'by', u'no', u'means', u'guarantee', u'because', u'more', u'than', u'half', u'the', u'park', u'be', u'close', u'off', u'to', u'the', u'public', u',', u'allow', u'the', u'animal', u'to', u'thrive', u'.'], u'pos': [u'IN', u'NNP', u',', u'CD', u'MD', u'VB', u'NNS', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'CD', u'IN', u'DT', u'NN', u'POS', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u',', u'CC', u'RB', u'RB', u'NNS', u'VBP', u'IN', u'DT', u'NNS', u'VBN', u'IN', u'JJR', u'IN', u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'TO', u'DT', u'NN', u',', u'VBG', u'DT', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[16651, 16653], [16654, 16658], [16658, 16659], [16660, 16663], [16664, 16667], [16668, 16671], [16672, 16680], [16681, 16685], [16686, 16694], [16695, 16699], [16700, 16702], [16703, 16706], [16707, 16712], [16712, 16713], [16714, 16719], [16720, 16723], [16724, 16727], [16728, 16730], [16731, 16734], [16735, 16740], [16740, 16742], [16743, 16750], [16751, 16758], [16759, 16761], [16762, 16766], [16767, 16775], [16775, 16776], [16777, 16780], [16781, 16785], [16786, 16790], [16791, 16800], [16801, 16804], [16805, 16807], [16808, 16810], [16811, 16816], [16817, 16827], [16828, 16835], [16836, 16840], [16841, 16845], [16846, 16850], [16851, 16854], [16855, 16859], [16860, 16862], [16863, 16869], [16870, 16873], [16874, 16876], [16877, 16880], [16881, 16887], [16887, 16888], [16889, 16897], [16898, 16901], [16902, 16909], [16910, 16912], [16913, 16919], [16919, 16920]]}) 
answer: set([u'four', u'big', u'cat'])
candidate Sentence: (0.08021111786365509, {u'tokens': [u'The', u'species', u"'", u'success', u'owes', u'in', u'part', u'to', u'its', u'opportunistic', u'hunting', u'behaviour', u'and', u'its', u'adaptability', u'to', u'a', u'variety', u'of', u'habitats', u'.'], u'lemmas': [u'the', u'species', u"'", u'success', u'owe', u'in', u'part', u'to', u'its', u'opportunistic', u'hunting', u'behaviour', u'and', u'its', u'adaptability', u'to', u'a', u'variety', u'of', u'habitat', u'.'], u'pos': [u'DT', u'NNS', u'POS', u'NN', u'VBZ', u'IN', u'NN', u'TO', u'PRP$', u'JJ', u'NN', u'NN', u'CC', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[809, 812], [813, 820], [820, 821], [822, 829], [830, 834], [835, 837], [838, 842], [843, 845], [846, 849], [850, 863], [864, 871], [872, 881], [882, 885], [886, 889], [890, 902], [903, 905], [906, 907], [908, 915], [916, 918], [919, 927], [927, 928]]}) 
answer: set([u'four', u'big', u'one', u'cat'])
candidate Sentence: (0.077804386615753174, {u'tokens': [u'One', u'of', u'these', u'was', u'purchased', u'in', u'1898', u'by', u'Berlin', u'Zoo', u'.'], u'lemmas': [u'one', u'of', u'these', u'be', u'purchase', u'in', u'1898', u'by', u'Berlin', u'Zoo', u'.'], u'pos': [u'CD', u'IN', u'DT', u'VBD', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[14858, 14861], [14862, 14864], [14865, 14870], [14871, 14874], [14875, 14884], [14885, 14887], [14888, 14892], [14893, 14895], [14896, 14902], [14903, 14906], [14906, 14907]]}) 
answer: set([u'four', u'big', u'cat'])

Is the leopard one of the four 'big cats'?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa92440>.answer
_____________________________ test_yesno[param228] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa92710>, (<src.tfidf.TF_IDF object at 0x1061d2050>, set(['liechtenstein'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa92710>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.68320053815841675, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'territory', u'of', u'Liechtenstein', u'formed', u'a', u'part', u'of', u'the', u'ancient', u'Roman', u'province', u'of', u'Raetia', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'territory', u'of', u'liechtenstein', u'form', u'a', u'part', u'of', u'the', u'ancient', u'roman', u'province', u'of', u'raetium', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NN', u'IN', u'NN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[490, 492], [493, 496], [497, 501], [501, 502], [503, 506], [507, 516], [517, 519], [520, 533], [534, 540], [541, 542], [543, 547], [548, 550], [551, 554], [555, 562], [563, 568], [569, 577], [578, 580], [581, 587], [587, 588]]}) 
answer: set([u'raetia'])
candidate Sentence: (0.19336217641830444, {u'tokens': [u'Music', u'and', u'theatre', u'are', u'an', u'important', u'part', u'of', u'the', u'culture', u'.'], u'lemmas': [u'music', u'and', u'theatre', u'be', u'a', u'important', u'part', u'of', u'the', u'culture', u'.'], u'pos': [u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[20477, 20482], [20483, 20486], [20487, 20494], [20495, 20498], [20499, 20501], [20502, 20511], [20512, 20516], [20517, 20519], [20520, 20523], [20524, 20531], [20531, 20532]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient'])
candidate Sentence: (0.12203865498304367, {u'tokens': [u'The', u'country', u"'s", u'railways', u'are', u'administered', u'by', u'the', u'Austrian', u'Federal', u'Railways', u'as', u'part', u'of', u'the', u'route', u'between', u'Feldkirch', u',', u'Austria', u',', u'and', u'Buchs', u'SG', u',', u'Switzerland', u'.'], u'lemmas': [u'the', u'country', u"'s", u'railway', u'be', u'administer', u'by', u'the', u'austrian', u'Federal', u'Railways', u'as', u'part', u'of', u'the', u'route', u'between', u'Feldkirch', u',', u'Austria', u',', u'and', u'Buchs', u'SG', u',', u'Switzerland', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNPS', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[18250, 18253], [18254, 18261], [18261, 18263], [18264, 18272], [18273, 18276], [18277, 18289], [18290, 18292], [18293, 18296], [18297, 18305], [18306, 18313], [18314, 18322], [18323, 18325], [18326, 18330], [18331, 18333], [18334, 18337], [18338, 18343], [18344, 18351], [18352, 18361], [18361, 18362], [18363, 18370], [18370, 18371], [18372, 18375], [18376, 18381], [18382, 18384], [18384, 18385], [18386, 18397], [18397, 18398]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient'])
candidate Sentence: (0.11243034154176712, {u'tokens': [u'It', u'is', u'on', u'this', u'date', u'that', u'Liechtenstein', u'became', u'a', u'sovereign', u'member', u'state', u'of', u'the', u'Holy', u'Roman', u'Empire', u'.'], u'lemmas': [u'it', u'be', u'on', u'this', u'date', u'that', u'Liechtenstein', u'become', u'a', u'sovereign', u'member', u'state', u'of', u'the', u'holy', u'roman', u'empire', u'.'], u'pos': [u'PRP', u'VBZ', u'IN', u'DT', u'NN', u'WDT', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[2541, 2543], [2544, 2546], [2547, 2549], [2550, 2554], [2555, 2559], [2560, 2564], [2565, 2578], [2579, 2585], [2586, 2587], [2588, 2597], [2598, 2604], [2605, 2610], [2611, 2613], [2614, 2617], [2618, 2622], [2623, 2628], [2629, 2635], [2635, 2636]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.094838574528694153, {u'tokens': [u'Liechtenstein', u'is', u'thus', u'the', u'last', u'independent', u'state', u'in', u'Europe', u'which', u'can', u'claim', u'an', u'element', u'of', u'continuity', u'from', u'the', u'Holy', u'Roman', u'Empire', u'.'], u'lemmas': [u'Liechtenstein', u'be', u'thus', u'the', u'last', u'independent', u'state', u'in', u'Europe', u'which', u'can', u'claim', u'a', u'element', u'of', u'continuity', u'from', u'the', u'holy', u'roman', u'empire', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'WDT', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[5715, 5728], [5729, 5731], [5732, 5736], [5737, 5740], [5741, 5745], [5746, 5757], [5758, 5763], [5764, 5766], [5767, 5773], [5774, 5779], [5780, 5783], [5784, 5789], [5790, 5792], [5793, 5800], [5801, 5803], [5804, 5814], [5815, 5819], [5820, 5823], [5824, 5828], [5829, 5834], [5835, 5841], [5841, 5842]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.082907773554325104, {u'tokens': [u'Schloss', u'Vaduz', u',', u'overlooking', u'the', u'capital', u',', u'is', u'still', u'home', u'to', u'the', u'prince', u'of', u'Liechtenstein', u'In', u'1806', u',', u'most', u'of', u'the', u'Holy', u'Roman', u'Empire', u'was', u'invaded', u'by', u'Napoleon', u'I', u'of', u'the', u'First', u'French', u'Empire', u'.'], u'lemmas': [u'Schloss', u'Vaduz', u',', u'overlook', u'the', u'capital', u',', u'be', u'still', u'home', u'to', u'the', u'prince', u'of', u'Liechtenstein', u'in', u'1806', u',', u'most', u'of', u'the', u'holy', u'roman', u'empire', u'be', u'invade', u'by', u'Napoleon', u'i', u'of', u'the', u'First', u'French', u'Empire', u'.'], u'pos': [u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u',', u'VBZ', u'RB', u'NN', u'TO', u'DT', u'NN', u'IN', u'NNP', u'IN', u'CD', u',', u'JJS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'NNP', u'CD', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[2795, 2802], [2803, 2808], [2808, 2809], [2810, 2821], [2822, 2825], [2826, 2833], [2833, 2834], [2835, 2837], [2838, 2843], [2844, 2848], [2849, 2851], [2852, 2855], [2856, 2862], [2863, 2865], [2866, 2879], [2880, 2882], [2883, 2887], [2887, 2888], [2889, 2893], [2894, 2896], [2897, 2900], [2901, 2905], [2906, 2911], [2912, 2918], [2919, 2922], [2923, 2930], [2931, 2933], [2934, 2942], [2943, 2944], [2945, 2947], [2948, 2951], [2952, 2957], [2958, 2964], [2965, 2971], [2971, 2972]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.04879692941904068, {u'tokens': [u'At', u'the', u'time', u'of', u'the', u'dissolution', u'of', u'the', u'Austro-Hungarian', u'Empire', u',', u'it', u'was', u'argued', u'that', u'Liechtenstein', u'as', u'a', u'fief', u'of', u'the', u'Holy', u'Roman', u'Empire', u'-LRB-', u'supposedly', u'still', u'incarnated', u'in', u'Liechtensteiner', u'eyes', u'at', u'an', u'abstract', u'level', u'in', u'the', u'person', u'of', u'the', u'then-dethroned', u'Austro-Hungarian', u'Emperor', u',', u'despite', u'its', u'formal', u'dissolution', u'in', u'1806', u'-RRB-', u'was', u'no', u'longer', u'bound', u'to', u'Austria', u',', u'then', u'emerging', u'as', u'an', u'independent', u'state', u',', u'which', u'did', u'not', u'consider', u'itself', u'as', u'the', u'legal', u'successor', u'to', u'the', u'Empire', u'.'], u'lemmas': [u'at', u'the', u'time', u'of', u'the', u'dissolution', u'of', u'the', u'Austro-Hungarian', u'Empire', u',', u'it', u'be', u'argue', u'that', u'liechtenstein', u'as', u'a', u'fief', u'of', u'the', u'holy', u'roman', u'empire', u'-lrb-', u'supposedly', u'still', u'incarnate', u'in', u'Liechtensteiner', u'eye', u'at', u'a', u'abstract', u'level', u'in', u'the', u'person', u'of', u'the', u'then-dethroned', u'Austro-Hungarian', u'Emperor', u',', u'despite', u'its', u'formal', u'dissolution', u'in', u'1806', u'-rrb-', u'be', u'no', u'longer', u'bind', u'to', u'Austria', u',', u'then', u'emerge', u'as', u'a', u'independent', u'state', u',', u'which', u'do', u'not', u'consider', u'itself', u'as', u'the', u'legal', u'successor', u'to', u'the', u'Empire', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'RB', u'VBN', u'IN', u'NNP', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u',', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'CD', u'-RRB-', u'VBD', u'RB', u'RB', u'VBN', u'TO', u'NNP', u',', u'RB', u'VBG', u'IN', u'DT', u'JJ', u'NN', u',', u'WDT', u'VBD', u'RB', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[5269, 5271], [5272, 5275], [5276, 5280], [5281, 5283], [5284, 5287], [5288, 5299], [5300, 5302], [5303, 5306], [5307, 5323], [5324, 5330], [5330, 5331], [5332, 5334], [5335, 5338], [5339, 5345], [5346, 5350], [5351, 5364], [5365, 5367], [5368, 5369], [5370, 5374], [5375, 5377], [5378, 5381], [5382, 5386], [5387, 5392], [5393, 5399], [5400, 5401], [5401, 5411], [5412, 5417], [5418, 5428], [5429, 5431], [5432, 5447], [5448, 5452], [5453, 5455], [5456, 5458], [5459, 5467], [5468, 5473], [5474, 5476], [5477, 5480], [5481, 5487], [5488, 5490], [5491, 5494], [5495, 5509], [5510, 5526], [5527, 5534], [5534, 5535], [5536, 5543], [5544, 5547], [5548, 5554], [5555, 5566], [5567, 5569], [5570, 5574], [5574, 5575], [5576, 5579], [5580, 5582], [5583, 5589], [5590, 5595], [5596, 5598], [5599, 5606], [5606, 5607], [5608, 5612], [5613, 5621], [5622, 5624], [5625, 5627], [5628, 5639], [5640, 5645], [5645, 5646], [5647, 5652], [5653, 5656], [5657, 5660], [5661, 5669], [5670, 5676], [5677, 5679], [5680, 5683], [5684, 5689], [5690, 5699], [5700, 5702], [5703, 5706], [5707, 5713], [5713, 5714]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.048309303820133209, {u'tokens': [u'The', u'family', u'yearned', u'greatly', u'for', u'the', u'added', u'power', u'which', u'a', u'seat', u'in', u'the', u'Imperial', u'government', u'would', u'garner', u',', u'and', u'therefore', u',', u'searched', u'for', u'lands', u'to', u'acquire', u'which', u'would', u'be', u'unmittelbar', u'or', u'held', u'without', u'any', u'feudal', u'personage', u'other', u'than', u'the', u'Holy', u'Roman', u'Emperor', u'himself', u'having', u'rights', u'on', u'the', u'land', u'.'], u'lemmas': [u'the', u'family', u'yearn', u'greatly', u'for', u'the', u'add', u'power', u'which', u'a', u'seat', u'in', u'the', u'Imperial', u'government', u'would', u'garner', u',', u'and', u'therefore', u',', u'search', u'for', u'land', u'to', u'acquire', u'which', u'would', u'be', u'unmittelbar', u'or', u'hold', u'without', u'any', u'feudal', u'personage', u'other', u'than', u'the', u'holy', u'roman', u'emperor', u'himself', u'have', u'rights', u'on', u'the', u'land', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'IN', u'DT', u'VBN', u'NN', u'WDT', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NN', u'MD', u'VB', u',', u'CC', u'RB', u',', u'VBD', u'IN', u'NNS', u'TO', u'VB', u'WDT', u'MD', u'VB', u'JJ', u'CC', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'PRP', u'VBG', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1625, 1628], [1629, 1635], [1636, 1643], [1644, 1651], [1652, 1655], [1656, 1659], [1660, 1665], [1666, 1671], [1672, 1677], [1678, 1679], [1680, 1684], [1685, 1687], [1688, 1691], [1692, 1700], [1701, 1711], [1712, 1717], [1718, 1724], [1724, 1725], [1726, 1729], [1730, 1739], [1739, 1740], [1741, 1749], [1750, 1753], [1754, 1759], [1760, 1762], [1763, 1770], [1771, 1776], [1777, 1782], [1783, 1785], [1786, 1797], [1798, 1800], [1801, 1805], [1806, 1813], [1814, 1817], [1818, 1824], [1825, 1834], [1835, 1840], [1841, 1845], [1846, 1849], [1850, 1854], [1855, 1860], [1861, 1868], [1869, 1876], [1877, 1883], [1884, 1890], [1891, 1893], [1894, 1897], [1898, 1902], [1902, 1903]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.025309786200523376, {u'tokens': [u'The', u'Kunstmuseum', u'Liechtenstein', u'is', u'the', u'museum', u'of', u'modern', u'and', u'contemporary', u'art', u'in', u'Vaduz', u'and', u'the', u'national', u'gallery', u'of', u'the', u'Principality', u'of', u'Liechtenstein', u'.'], u'lemmas': [u'the', u'Kunstmuseum', u'Liechtenstein', u'be', u'the', u'museum', u'of', u'modern', u'and', u'contemporary', u'art', u'in', u'Vaduz', u'and', u'the', u'national', u'gallery', u'of', u'the', u'Principality', u'of', u'Liechtenstein', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[19181, 19184], [19185, 19196], [19197, 19210], [19211, 19213], [19214, 19217], [19218, 19224], [19225, 19227], [19228, 19234], [19235, 19238], [19239, 19251], [19252, 19255], [19256, 19258], [19259, 19264], [19265, 19268], [19269, 19272], [19273, 19281], [19282, 19289], [19290, 19292], [19293, 19296], [19297, 19309], [19310, 19312], [19313, 19326], [19326, 19327]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient', u'part'])
candidate Sentence: (0.021094541996717453, {u'tokens': [u'The', u'reigning', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'is', u'the', u'head', u'of', u'state', u'and', u',', u'as', u'such', u',', u'represents', u'Liechtenstein', u'in', u'its', u'international', u'relations', u'-LRB-', u'although', u'Switzerland', u'has', u'taken', u'responsibility', u'for', u'much', u'of', u'Liechtenstein', u"'s", u'diplomatic', u'relations', u'-RRB-', u'.'], u'lemmas': [u'the', u'reign', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'be', u'the', u'head', u'of', u'state', u'and', u',', u'as', u'such', u',', u'represent', u'Liechtenstein', u'in', u'its', u'international', u'relation', u'-lrb-', u'although', u'Switzerland', u'have', u'take', u'responsibility', u'for', u'much', u'of', u'Liechtenstein', u"'s", u'diplomatic', u'relation', u'-rrb-', u'.'], u'pos': [u'DT', u'VBG', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u'CC', u',', u'IN', u'JJ', u',', u'VBZ', u'NNP', u'IN', u'PRP$', u'JJ', u'NNS', u'-LRB-', u'IN', u'NNP', u'VBZ', u'VBN', u'NN', u'IN', u'JJ', u'IN', u'NNP', u'POS', u'JJ', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[9051, 9054], [9055, 9063], [9064, 9070], [9071, 9073], [9074, 9077], [9078, 9086], [9087, 9092], [9093, 9095], [9096, 9109], [9110, 9112], [9113, 9116], [9117, 9121], [9122, 9124], [9125, 9130], [9131, 9134], [9134, 9135], [9136, 9138], [9139, 9143], [9143, 9144], [9145, 9155], [9156, 9169], [9170, 9172], [9173, 9176], [9177, 9190], [9191, 9200], [9201, 9202], [9202, 9210], [9211, 9222], [9223, 9226], [9227, 9232], [9233, 9247], [9248, 9251], [9252, 9256], [9257, 9259], [9260, 9273], [9273, 9275], [9276, 9286], [9287, 9296], [9296, 9297], [9297, 9298]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient', u'part'])

Was Liechtenstein part of the ancient Roman province of Raetia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa92710>.answer
_____________________________ test_yesno[param229] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa927a0>, (<src.tfidf.TF_IDF object at 0x1061d2050>, set(['liechtenstein'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa927a0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.68320053815841675, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'territory', u'of', u'Liechtenstein', u'formed', u'a', u'part', u'of', u'the', u'ancient', u'Roman', u'province', u'of', u'Raetia', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'territory', u'of', u'liechtenstein', u'form', u'a', u'part', u'of', u'the', u'ancient', u'roman', u'province', u'of', u'raetium', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NN', u'IN', u'NN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[490, 492], [493, 496], [497, 501], [501, 502], [503, 506], [507, 516], [517, 519], [520, 533], [534, 540], [541, 542], [543, 547], [548, 550], [551, 554], [555, 562], [563, 568], [569, 577], [578, 580], [581, 587], [587, 588]]}) 
answer: set([u'raetia'])
candidate Sentence: (0.19336217641830444, {u'tokens': [u'Music', u'and', u'theatre', u'are', u'an', u'important', u'part', u'of', u'the', u'culture', u'.'], u'lemmas': [u'music', u'and', u'theatre', u'be', u'a', u'important', u'part', u'of', u'the', u'culture', u'.'], u'pos': [u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[20477, 20482], [20483, 20486], [20487, 20494], [20495, 20498], [20499, 20501], [20502, 20511], [20512, 20516], [20517, 20519], [20520, 20523], [20524, 20531], [20531, 20532]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient'])
candidate Sentence: (0.12203865498304367, {u'tokens': [u'The', u'country', u"'s", u'railways', u'are', u'administered', u'by', u'the', u'Austrian', u'Federal', u'Railways', u'as', u'part', u'of', u'the', u'route', u'between', u'Feldkirch', u',', u'Austria', u',', u'and', u'Buchs', u'SG', u',', u'Switzerland', u'.'], u'lemmas': [u'the', u'country', u"'s", u'railway', u'be', u'administer', u'by', u'the', u'austrian', u'Federal', u'Railways', u'as', u'part', u'of', u'the', u'route', u'between', u'Feldkirch', u',', u'Austria', u',', u'and', u'Buchs', u'SG', u',', u'Switzerland', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'NNPS', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[18250, 18253], [18254, 18261], [18261, 18263], [18264, 18272], [18273, 18276], [18277, 18289], [18290, 18292], [18293, 18296], [18297, 18305], [18306, 18313], [18314, 18322], [18323, 18325], [18326, 18330], [18331, 18333], [18334, 18337], [18338, 18343], [18344, 18351], [18352, 18361], [18361, 18362], [18363, 18370], [18370, 18371], [18372, 18375], [18376, 18381], [18382, 18384], [18384, 18385], [18386, 18397], [18397, 18398]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient'])
candidate Sentence: (0.11243034154176712, {u'tokens': [u'It', u'is', u'on', u'this', u'date', u'that', u'Liechtenstein', u'became', u'a', u'sovereign', u'member', u'state', u'of', u'the', u'Holy', u'Roman', u'Empire', u'.'], u'lemmas': [u'it', u'be', u'on', u'this', u'date', u'that', u'Liechtenstein', u'become', u'a', u'sovereign', u'member', u'state', u'of', u'the', u'holy', u'roman', u'empire', u'.'], u'pos': [u'PRP', u'VBZ', u'IN', u'DT', u'NN', u'WDT', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[2541, 2543], [2544, 2546], [2547, 2549], [2550, 2554], [2555, 2559], [2560, 2564], [2565, 2578], [2579, 2585], [2586, 2587], [2588, 2597], [2598, 2604], [2605, 2610], [2611, 2613], [2614, 2617], [2618, 2622], [2623, 2628], [2629, 2635], [2635, 2636]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.094838574528694153, {u'tokens': [u'Liechtenstein', u'is', u'thus', u'the', u'last', u'independent', u'state', u'in', u'Europe', u'which', u'can', u'claim', u'an', u'element', u'of', u'continuity', u'from', u'the', u'Holy', u'Roman', u'Empire', u'.'], u'lemmas': [u'Liechtenstein', u'be', u'thus', u'the', u'last', u'independent', u'state', u'in', u'Europe', u'which', u'can', u'claim', u'a', u'element', u'of', u'continuity', u'from', u'the', u'holy', u'roman', u'empire', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'WDT', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[5715, 5728], [5729, 5731], [5732, 5736], [5737, 5740], [5741, 5745], [5746, 5757], [5758, 5763], [5764, 5766], [5767, 5773], [5774, 5779], [5780, 5783], [5784, 5789], [5790, 5792], [5793, 5800], [5801, 5803], [5804, 5814], [5815, 5819], [5820, 5823], [5824, 5828], [5829, 5834], [5835, 5841], [5841, 5842]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.082907773554325104, {u'tokens': [u'Schloss', u'Vaduz', u',', u'overlooking', u'the', u'capital', u',', u'is', u'still', u'home', u'to', u'the', u'prince', u'of', u'Liechtenstein', u'In', u'1806', u',', u'most', u'of', u'the', u'Holy', u'Roman', u'Empire', u'was', u'invaded', u'by', u'Napoleon', u'I', u'of', u'the', u'First', u'French', u'Empire', u'.'], u'lemmas': [u'Schloss', u'Vaduz', u',', u'overlook', u'the', u'capital', u',', u'be', u'still', u'home', u'to', u'the', u'prince', u'of', u'Liechtenstein', u'in', u'1806', u',', u'most', u'of', u'the', u'holy', u'roman', u'empire', u'be', u'invade', u'by', u'Napoleon', u'i', u'of', u'the', u'First', u'French', u'Empire', u'.'], u'pos': [u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u',', u'VBZ', u'RB', u'NN', u'TO', u'DT', u'NN', u'IN', u'NNP', u'IN', u'CD', u',', u'JJS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'NNP', u'CD', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[2795, 2802], [2803, 2808], [2808, 2809], [2810, 2821], [2822, 2825], [2826, 2833], [2833, 2834], [2835, 2837], [2838, 2843], [2844, 2848], [2849, 2851], [2852, 2855], [2856, 2862], [2863, 2865], [2866, 2879], [2880, 2882], [2883, 2887], [2887, 2888], [2889, 2893], [2894, 2896], [2897, 2900], [2901, 2905], [2906, 2911], [2912, 2918], [2919, 2922], [2923, 2930], [2931, 2933], [2934, 2942], [2943, 2944], [2945, 2947], [2948, 2951], [2952, 2957], [2958, 2964], [2965, 2971], [2971, 2972]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.04879692941904068, {u'tokens': [u'At', u'the', u'time', u'of', u'the', u'dissolution', u'of', u'the', u'Austro-Hungarian', u'Empire', u',', u'it', u'was', u'argued', u'that', u'Liechtenstein', u'as', u'a', u'fief', u'of', u'the', u'Holy', u'Roman', u'Empire', u'-LRB-', u'supposedly', u'still', u'incarnated', u'in', u'Liechtensteiner', u'eyes', u'at', u'an', u'abstract', u'level', u'in', u'the', u'person', u'of', u'the', u'then-dethroned', u'Austro-Hungarian', u'Emperor', u',', u'despite', u'its', u'formal', u'dissolution', u'in', u'1806', u'-RRB-', u'was', u'no', u'longer', u'bound', u'to', u'Austria', u',', u'then', u'emerging', u'as', u'an', u'independent', u'state', u',', u'which', u'did', u'not', u'consider', u'itself', u'as', u'the', u'legal', u'successor', u'to', u'the', u'Empire', u'.'], u'lemmas': [u'at', u'the', u'time', u'of', u'the', u'dissolution', u'of', u'the', u'Austro-Hungarian', u'Empire', u',', u'it', u'be', u'argue', u'that', u'liechtenstein', u'as', u'a', u'fief', u'of', u'the', u'holy', u'roman', u'empire', u'-lrb-', u'supposedly', u'still', u'incarnate', u'in', u'Liechtensteiner', u'eye', u'at', u'a', u'abstract', u'level', u'in', u'the', u'person', u'of', u'the', u'then-dethroned', u'Austro-Hungarian', u'Emperor', u',', u'despite', u'its', u'formal', u'dissolution', u'in', u'1806', u'-rrb-', u'be', u'no', u'longer', u'bind', u'to', u'Austria', u',', u'then', u'emerge', u'as', u'a', u'independent', u'state', u',', u'which', u'do', u'not', u'consider', u'itself', u'as', u'the', u'legal', u'successor', u'to', u'the', u'Empire', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'RB', u'VBN', u'IN', u'NNP', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u',', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'CD', u'-RRB-', u'VBD', u'RB', u'RB', u'VBN', u'TO', u'NNP', u',', u'RB', u'VBG', u'IN', u'DT', u'JJ', u'NN', u',', u'WDT', u'VBD', u'RB', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[5269, 5271], [5272, 5275], [5276, 5280], [5281, 5283], [5284, 5287], [5288, 5299], [5300, 5302], [5303, 5306], [5307, 5323], [5324, 5330], [5330, 5331], [5332, 5334], [5335, 5338], [5339, 5345], [5346, 5350], [5351, 5364], [5365, 5367], [5368, 5369], [5370, 5374], [5375, 5377], [5378, 5381], [5382, 5386], [5387, 5392], [5393, 5399], [5400, 5401], [5401, 5411], [5412, 5417], [5418, 5428], [5429, 5431], [5432, 5447], [5448, 5452], [5453, 5455], [5456, 5458], [5459, 5467], [5468, 5473], [5474, 5476], [5477, 5480], [5481, 5487], [5488, 5490], [5491, 5494], [5495, 5509], [5510, 5526], [5527, 5534], [5534, 5535], [5536, 5543], [5544, 5547], [5548, 5554], [5555, 5566], [5567, 5569], [5570, 5574], [5574, 5575], [5576, 5579], [5580, 5582], [5583, 5589], [5590, 5595], [5596, 5598], [5599, 5606], [5606, 5607], [5608, 5612], [5613, 5621], [5622, 5624], [5625, 5627], [5628, 5639], [5640, 5645], [5645, 5646], [5647, 5652], [5653, 5656], [5657, 5660], [5661, 5669], [5670, 5676], [5677, 5679], [5680, 5683], [5684, 5689], [5690, 5699], [5700, 5702], [5703, 5706], [5707, 5713], [5713, 5714]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.048309303820133209, {u'tokens': [u'The', u'family', u'yearned', u'greatly', u'for', u'the', u'added', u'power', u'which', u'a', u'seat', u'in', u'the', u'Imperial', u'government', u'would', u'garner', u',', u'and', u'therefore', u',', u'searched', u'for', u'lands', u'to', u'acquire', u'which', u'would', u'be', u'unmittelbar', u'or', u'held', u'without', u'any', u'feudal', u'personage', u'other', u'than', u'the', u'Holy', u'Roman', u'Emperor', u'himself', u'having', u'rights', u'on', u'the', u'land', u'.'], u'lemmas': [u'the', u'family', u'yearn', u'greatly', u'for', u'the', u'add', u'power', u'which', u'a', u'seat', u'in', u'the', u'Imperial', u'government', u'would', u'garner', u',', u'and', u'therefore', u',', u'search', u'for', u'land', u'to', u'acquire', u'which', u'would', u'be', u'unmittelbar', u'or', u'hold', u'without', u'any', u'feudal', u'personage', u'other', u'than', u'the', u'holy', u'roman', u'emperor', u'himself', u'have', u'rights', u'on', u'the', u'land', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'IN', u'DT', u'VBN', u'NN', u'WDT', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NN', u'MD', u'VB', u',', u'CC', u'RB', u',', u'VBD', u'IN', u'NNS', u'TO', u'VB', u'WDT', u'MD', u'VB', u'JJ', u'CC', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'PRP', u'VBG', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1625, 1628], [1629, 1635], [1636, 1643], [1644, 1651], [1652, 1655], [1656, 1659], [1660, 1665], [1666, 1671], [1672, 1677], [1678, 1679], [1680, 1684], [1685, 1687], [1688, 1691], [1692, 1700], [1701, 1711], [1712, 1717], [1718, 1724], [1724, 1725], [1726, 1729], [1730, 1739], [1739, 1740], [1741, 1749], [1750, 1753], [1754, 1759], [1760, 1762], [1763, 1770], [1771, 1776], [1777, 1782], [1783, 1785], [1786, 1797], [1798, 1800], [1801, 1805], [1806, 1813], [1814, 1817], [1818, 1824], [1825, 1834], [1835, 1840], [1841, 1845], [1846, 1849], [1850, 1854], [1855, 1860], [1861, 1868], [1869, 1876], [1877, 1883], [1884, 1890], [1891, 1893], [1894, 1897], [1898, 1902], [1902, 1903]]}) 
answer: set([u'province', u'raetia', u'part', u'ancient'])
candidate Sentence: (0.025309786200523376, {u'tokens': [u'The', u'Kunstmuseum', u'Liechtenstein', u'is', u'the', u'museum', u'of', u'modern', u'and', u'contemporary', u'art', u'in', u'Vaduz', u'and', u'the', u'national', u'gallery', u'of', u'the', u'Principality', u'of', u'Liechtenstein', u'.'], u'lemmas': [u'the', u'Kunstmuseum', u'Liechtenstein', u'be', u'the', u'museum', u'of', u'modern', u'and', u'contemporary', u'art', u'in', u'Vaduz', u'and', u'the', u'national', u'gallery', u'of', u'the', u'Principality', u'of', u'Liechtenstein', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[19181, 19184], [19185, 19196], [19197, 19210], [19211, 19213], [19214, 19217], [19218, 19224], [19225, 19227], [19228, 19234], [19235, 19238], [19239, 19251], [19252, 19255], [19256, 19258], [19259, 19264], [19265, 19268], [19269, 19272], [19273, 19281], [19282, 19289], [19290, 19292], [19293, 19296], [19297, 19309], [19310, 19312], [19313, 19326], [19326, 19327]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient', u'part'])
candidate Sentence: (0.021094541996717453, {u'tokens': [u'The', u'reigning', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'is', u'the', u'head', u'of', u'state', u'and', u',', u'as', u'such', u',', u'represents', u'Liechtenstein', u'in', u'its', u'international', u'relations', u'-LRB-', u'although', u'Switzerland', u'has', u'taken', u'responsibility', u'for', u'much', u'of', u'Liechtenstein', u"'s", u'diplomatic', u'relations', u'-RRB-', u'.'], u'lemmas': [u'the', u'reign', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'be', u'the', u'head', u'of', u'state', u'and', u',', u'as', u'such', u',', u'represent', u'Liechtenstein', u'in', u'its', u'international', u'relation', u'-lrb-', u'although', u'Switzerland', u'have', u'take', u'responsibility', u'for', u'much', u'of', u'Liechtenstein', u"'s", u'diplomatic', u'relation', u'-rrb-', u'.'], u'pos': [u'DT', u'VBG', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u'CC', u',', u'IN', u'JJ', u',', u'VBZ', u'NNP', u'IN', u'PRP$', u'JJ', u'NNS', u'-LRB-', u'IN', u'NNP', u'VBZ', u'VBN', u'NN', u'IN', u'JJ', u'IN', u'NNP', u'POS', u'JJ', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[9051, 9054], [9055, 9063], [9064, 9070], [9071, 9073], [9074, 9077], [9078, 9086], [9087, 9092], [9093, 9095], [9096, 9109], [9110, 9112], [9113, 9116], [9117, 9121], [9122, 9124], [9125, 9130], [9131, 9134], [9134, 9135], [9136, 9138], [9139, 9143], [9143, 9144], [9145, 9155], [9156, 9169], [9170, 9172], [9173, 9176], [9177, 9190], [9191, 9200], [9201, 9202], [9202, 9210], [9211, 9222], [9223, 9226], [9227, 9232], [9233, 9247], [9248, 9251], [9252, 9256], [9257, 9259], [9260, 9273], [9273, 9275], [9276, 9286], [9287, 9296], [9296, 9297], [9297, 9298]]}) 
answer: set([u'province', u'raetia', u'roman', u'ancient', u'part'])

Was Liechtenstein part of the ancient Roman province of Raetia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa927a0>.answer
_____________________________ test_yesno[param230] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa92830>, (<src.tfidf.TF_IDF object at 0x1061d2050>, set(['liechtenstein'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aa92830>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.64279663562774658, {u'tokens': [u'Air', u':', u'There', u'is', u'no', u'airport', u'in', u'Liechtenstein', u'-LRB-', u'the', u'nearest', u'large', u'airport', u'is', u'Z\xfcrich', u'Airport', u'-RRB-', u'.'], u'lemmas': [u'Air', u':', u'there', u'be', u'no', u'airport', u'in', u'Liechtenstein', u'-lrb-', u'the', u'nearest', u'large', u'airport', u'be', u'Z\xfcrich', u'Airport', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'EX', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'DT', u'JJS', u'JJ', u'NN', u'VBZ', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18994, 18997], [18997, 18998], [18999, 19004], [19005, 19007], [19008, 19010], [19011, 19018], [19019, 19021], [19022, 19035], [19036, 19037], [19037, 19040], [19041, 19048], [19049, 19054], [19055, 19062], [19063, 19065], [19066, 19072], [19073, 19080], [19080, 19081], [19081, 19082]]}) 
answer: set([])
candidate Sentence: (0.20217536389827728, {u'tokens': [u'There', u'are', u'also', u'a', u'Stamp', u'and', u'a', u'Ski', u'Museum', u'.'], u'lemmas': [u'there', u'be', u'also', u'a', u'stamp', u'and', u'a', u'Ski', u'Museum', u'.'], u'pos': [u'EX', u'VBP', u'RB', u'DT', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[20322, 20327], [20328, 20331], [20332, 20336], [20337, 20338], [20339, 20344], [20345, 20348], [20349, 20350], [20351, 20354], [20355, 20361], [20361, 20362]]}) 
answer: set([u'airport'])
candidate Sentence: (0.17266294360160828, {u'tokens': [u'Currently', u',', u'there', u'is', u'only', u'one', u'hospital', u'in', u'Liechtenstein', u',', u'the', u'Liechtensteinisches', u'Landesspital', u'in', u'Vaduz', u'.'], u'lemmas': [u'currently', u',', u'there', u'be', u'only', u'one', u'hospital', u'in', u'Liechtenstein', u',', u'the', u'Liechtensteinisches', u'Landesspital', u'in', u'Vaduz', u'.'], u'pos': [u'RB', u',', u'EX', u'VBZ', u'RB', u'CD', u'NN', u'IN', u'NNP', u',', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[16094, 16103], [16103, 16104], [16105, 16110], [16111, 16113], [16114, 16118], [16119, 16122], [16123, 16131], [16132, 16134], [16135, 16148], [16148, 16149], [16150, 16153], [16154, 16173], [16174, 16186], [16187, 16189], [16190, 16195], [16195, 16196]]}) 
answer: set([u'airport'])
candidate Sentence: (0.14367499947547913, {u'tokens': [u'There', u'is', u'a', u'small', u'heliport', u'at', u'Balzers', u'in', u'Liechtenstein', u'available', u'for', u'charter', u'helicopter', u'flights', u'.'], u'lemmas': [u'there', u'be', u'a', u'small', u'heliport', u'at', u'Balzers', u'in', u'Liechtenstein', u'available', u'for', u'charter', u'helicopter', u'flight', u'.'], u'pos': [u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'JJ', u'IN', u'NN', u'NN', u'NNS', u'.'], u'char_offsets': [[19083, 19088], [19089, 19091], [19092, 19093], [19094, 19099], [19100, 19108], [19109, 19111], [19112, 19119], [19120, 19122], [19123, 19136], [19139, 19148], [19149, 19152], [19153, 19160], [19161, 19171], [19172, 19179], [19179, 19180]]}) 
answer: set([u'airport'])
candidate Sentence: (0.12137433886528015, {u'tokens': [u'Bike', u':', u'There', u'are', u'90', u'kilometres', u'-LRB-', u'56', u'miles', u'-RRB-', u'of', u'marked', u'bicycle', u'paths', u'in', u'the', u'country', u'.'], u'lemmas': [u'bike', u':', u'there', u'be', u'90', u'kilometre', u'-lrb-', u'56', u'mile', u'-rrb-', u'of', u'marked', u'bicycle', u'path', u'in', u'the', u'country', u'.'], u'pos': [u'NN', u':', u'EX', u'VBP', u'CD', u'NNS', u'-LRB-', u'CD', u'NNS', u'-RRB-', u'IN', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18913, 18917], [18917, 18918], [18919, 18924], [18925, 18928], [18929, 18931], [18932, 18942], [18943, 18944], [18944, 18946], [18947, 18952], [18952, 18953], [18954, 18956], [18957, 18963], [18964, 18971], [18972, 18977], [18978, 18980], [18981, 18984], [18985, 18992], [18992, 18993]]}) 
answer: set([u'airport'])
candidate Sentence: (0.11997095495462418, {u'tokens': [u'Road', u':', u'There', u'are', u'about', u'250', u'kilometres', u'-LRB-', u'155', u'mi', u'-RRB-', u'of', u'paved', u'roadway', u'within', u'Liechtenstein', u'.'], u'lemmas': [u'Road', u':', u'there', u'be', u'about', u'250', u'kilometre', u'-lrb-', u'155', u'mi', u'-rrb-', u'of', u'paved', u'roadway', u'within', u'Liechtenstein', u'.'], u'pos': [u'NNP', u':', u'EX', u'VBP', u'RB', u'CD', u'NNS', u'-LRB-', u'CD', u'NN', u'-RRB-', u'IN', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[18069, 18073], [18073, 18074], [18075, 18080], [18081, 18084], [18085, 18090], [18091, 18094], [18095, 18105], [18106, 18107], [18107, 18110], [18111, 18113], [18113, 18114], [18115, 18117], [18118, 18123], [18124, 18131], [18132, 18138], [18139, 18152], [18152, 18153]]}) 
answer: set([u'airport'])
candidate Sentence: (0.087247550487518311, {u'tokens': [u'There', u'are', u'numerous', u'music', u'organisations', u'such', u'as', u'the', u'Liechtenstein', u'Musical', u'Company', u',', u'the', u'annual', u'Guitar', u'Days', u'and', u'the', u'International', u'Josef', u'Gabriel', u'Rheinberger', u'Society', u';', u'and', u'two', u'main', u'theatres', u'.'], u'lemmas': [u'there', u'be', u'numerous', u'music', u'organisation', u'such', u'as', u'the', u'Liechtenstein', u'musical', u'company', u',', u'the', u'annual', u'Guitar', u'day', u'and', u'the', u'International', u'Josef', u'Gabriel', u'Rheinberger', u'Society', u';', u'and', u'two', u'main', u'theatre', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'NN', u'NNS', u'JJ', u'IN', u'DT', u'NNP', u'JJ', u'NN', u',', u'DT', u'JJ', u'NNP', u'NNS', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'CC', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[20533, 20538], [20539, 20542], [20543, 20551], [20552, 20557], [20558, 20571], [20572, 20576], [20577, 20579], [20580, 20583], [20584, 20597], [20598, 20605], [20606, 20613], [20613, 20614], [20615, 20618], [20619, 20625], [20626, 20632], [20633, 20637], [20638, 20641], [20642, 20645], [20646, 20659], [20660, 20665], [20666, 20673], [20674, 20685], [20686, 20693], [20693, 20694], [20695, 20698], [20699, 20702], [20703, 20707], [20708, 20716], [20716, 20717]]}) 
answer: set([u'airport'])
candidate Sentence: (0.032694585621356964, {u'tokens': [u'The', u'foundation', u'is', u'registered', u'in', u'the', u'name', u'of', u'a', u'Liechtensteiner', u',', u'often', u'a', u'lawyer', u'.'], u'lemmas': [u'the', u'foundation', u'be', u'register', u'in', u'the', u'name', u'of', u'a', u'Liechtensteiner', u',', u'often', u'a', u'lawyer', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u',', u'RB', u'DT', u'NN', u'.'], u'char_offsets': [[15250, 15253], [15254, 15264], [15265, 15267], [15268, 15278], [15279, 15281], [15282, 15285], [15286, 15290], [15291, 15293], [15294, 15295], [15296, 15311], [15311, 15312], [15313, 15318], [15319, 15320], [15321, 15327], [15327, 15328]]}) 
answer: set([u'airport'])
candidate Sentence: (0.031146923080086708, {u'tokens': [u'It', u'established', u'in', u'Liechtenstein', u'a', u'constitutional', u'monarchy', u'ruled', u'by', u'the', u'reigning', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'.'], u'lemmas': [u'it', u'establish', u'in', u'Liechtenstein', u'a', u'constitutional', u'monarchy', u'rule', u'by', u'the', u'reign', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'NNP', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'DT', u'VBG', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[8809, 8811], [8812, 8823], [8824, 8826], [8827, 8840], [8841, 8842], [8843, 8857], [8858, 8866], [8867, 8872], [8873, 8875], [8876, 8879], [8880, 8888], [8889, 8895], [8896, 8898], [8899, 8902], [8903, 8911], [8912, 8917], [8918, 8920], [8921, 8934], [8934, 8935]]}) 
answer: set([u'airport'])
candidate Sentence: (0.030814468860626221, {u'tokens': [u'Two', u'bridges', u'over', u'the', u'Rhine', u'were', u'built', u'in', u'1868', u',', u'and', u'in', u'1872', u'a', u'railway', u'line', u'across', u'Liechtenstein', u'was', u'constructed', u'.'], u'lemmas': [u'two', u'bridge', u'over', u'the', u'Rhine', u'be', u'build', u'in', u'1868', u',', u'and', u'in', u'1872', u'a', u'railway', u'line', u'across', u'Liechtenstein', u'be', u'construct', u'.'], u'pos': [u'CD', u'NNS', u'IN', u'DT', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u',', u'CC', u'IN', u'CD', u'DT', u'NN', u'NN', u'IN', u'NNP', u'VBD', u'VBN', u'.'], u'char_offsets': [[4334, 4337], [4338, 4345], [4346, 4350], [4351, 4354], [4355, 4360], [4361, 4365], [4366, 4371], [4372, 4374], [4375, 4379], [4379, 4380], [4381, 4384], [4385, 4387], [4388, 4392], [4393, 4394], [4395, 4402], [4403, 4407], [4408, 4414], [4415, 4428], [4429, 4432], [4433, 4444], [4444, 4445]]}) 
answer: set([u'airport'])

Is there an airport in Liechtenstein?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aa92830>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param231] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa928c0>, (<src.tfidf.TF_IDF object at 0x1061d2050>, set(['liechtenstein'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa928c0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.64279663562774658, {u'tokens': [u'Air', u':', u'There', u'is', u'no', u'airport', u'in', u'Liechtenstein', u'-LRB-', u'the', u'nearest', u'large', u'airport', u'is', u'Z\xfcrich', u'Airport', u'-RRB-', u'.'], u'lemmas': [u'Air', u':', u'there', u'be', u'no', u'airport', u'in', u'Liechtenstein', u'-lrb-', u'the', u'nearest', u'large', u'airport', u'be', u'Z\xfcrich', u'Airport', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'EX', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'DT', u'JJS', u'JJ', u'NN', u'VBZ', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18994, 18997], [18997, 18998], [18999, 19004], [19005, 19007], [19008, 19010], [19011, 19018], [19019, 19021], [19022, 19035], [19036, 19037], [19037, 19040], [19041, 19048], [19049, 19054], [19055, 19062], [19063, 19065], [19066, 19072], [19073, 19080], [19080, 19081], [19081, 19082]]}) 
answer: set([])
candidate Sentence: (0.20217536389827728, {u'tokens': [u'There', u'are', u'also', u'a', u'Stamp', u'and', u'a', u'Ski', u'Museum', u'.'], u'lemmas': [u'there', u'be', u'also', u'a', u'stamp', u'and', u'a', u'Ski', u'Museum', u'.'], u'pos': [u'EX', u'VBP', u'RB', u'DT', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[20322, 20327], [20328, 20331], [20332, 20336], [20337, 20338], [20339, 20344], [20345, 20348], [20349, 20350], [20351, 20354], [20355, 20361], [20361, 20362]]}) 
answer: set([u'airport'])
candidate Sentence: (0.17266294360160828, {u'tokens': [u'Currently', u',', u'there', u'is', u'only', u'one', u'hospital', u'in', u'Liechtenstein', u',', u'the', u'Liechtensteinisches', u'Landesspital', u'in', u'Vaduz', u'.'], u'lemmas': [u'currently', u',', u'there', u'be', u'only', u'one', u'hospital', u'in', u'Liechtenstein', u',', u'the', u'Liechtensteinisches', u'Landesspital', u'in', u'Vaduz', u'.'], u'pos': [u'RB', u',', u'EX', u'VBZ', u'RB', u'CD', u'NN', u'IN', u'NNP', u',', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[16094, 16103], [16103, 16104], [16105, 16110], [16111, 16113], [16114, 16118], [16119, 16122], [16123, 16131], [16132, 16134], [16135, 16148], [16148, 16149], [16150, 16153], [16154, 16173], [16174, 16186], [16187, 16189], [16190, 16195], [16195, 16196]]}) 
answer: set([u'airport'])
candidate Sentence: (0.14367499947547913, {u'tokens': [u'There', u'is', u'a', u'small', u'heliport', u'at', u'Balzers', u'in', u'Liechtenstein', u'available', u'for', u'charter', u'helicopter', u'flights', u'.'], u'lemmas': [u'there', u'be', u'a', u'small', u'heliport', u'at', u'Balzers', u'in', u'Liechtenstein', u'available', u'for', u'charter', u'helicopter', u'flight', u'.'], u'pos': [u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'JJ', u'IN', u'NN', u'NN', u'NNS', u'.'], u'char_offsets': [[19083, 19088], [19089, 19091], [19092, 19093], [19094, 19099], [19100, 19108], [19109, 19111], [19112, 19119], [19120, 19122], [19123, 19136], [19139, 19148], [19149, 19152], [19153, 19160], [19161, 19171], [19172, 19179], [19179, 19180]]}) 
answer: set([u'airport'])
candidate Sentence: (0.12137433886528015, {u'tokens': [u'Bike', u':', u'There', u'are', u'90', u'kilometres', u'-LRB-', u'56', u'miles', u'-RRB-', u'of', u'marked', u'bicycle', u'paths', u'in', u'the', u'country', u'.'], u'lemmas': [u'bike', u':', u'there', u'be', u'90', u'kilometre', u'-lrb-', u'56', u'mile', u'-rrb-', u'of', u'marked', u'bicycle', u'path', u'in', u'the', u'country', u'.'], u'pos': [u'NN', u':', u'EX', u'VBP', u'CD', u'NNS', u'-LRB-', u'CD', u'NNS', u'-RRB-', u'IN', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18913, 18917], [18917, 18918], [18919, 18924], [18925, 18928], [18929, 18931], [18932, 18942], [18943, 18944], [18944, 18946], [18947, 18952], [18952, 18953], [18954, 18956], [18957, 18963], [18964, 18971], [18972, 18977], [18978, 18980], [18981, 18984], [18985, 18992], [18992, 18993]]}) 
answer: set([u'airport'])
candidate Sentence: (0.11997095495462418, {u'tokens': [u'Road', u':', u'There', u'are', u'about', u'250', u'kilometres', u'-LRB-', u'155', u'mi', u'-RRB-', u'of', u'paved', u'roadway', u'within', u'Liechtenstein', u'.'], u'lemmas': [u'Road', u':', u'there', u'be', u'about', u'250', u'kilometre', u'-lrb-', u'155', u'mi', u'-rrb-', u'of', u'paved', u'roadway', u'within', u'Liechtenstein', u'.'], u'pos': [u'NNP', u':', u'EX', u'VBP', u'RB', u'CD', u'NNS', u'-LRB-', u'CD', u'NN', u'-RRB-', u'IN', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[18069, 18073], [18073, 18074], [18075, 18080], [18081, 18084], [18085, 18090], [18091, 18094], [18095, 18105], [18106, 18107], [18107, 18110], [18111, 18113], [18113, 18114], [18115, 18117], [18118, 18123], [18124, 18131], [18132, 18138], [18139, 18152], [18152, 18153]]}) 
answer: set([u'airport'])
candidate Sentence: (0.087247550487518311, {u'tokens': [u'There', u'are', u'numerous', u'music', u'organisations', u'such', u'as', u'the', u'Liechtenstein', u'Musical', u'Company', u',', u'the', u'annual', u'Guitar', u'Days', u'and', u'the', u'International', u'Josef', u'Gabriel', u'Rheinberger', u'Society', u';', u'and', u'two', u'main', u'theatres', u'.'], u'lemmas': [u'there', u'be', u'numerous', u'music', u'organisation', u'such', u'as', u'the', u'Liechtenstein', u'musical', u'company', u',', u'the', u'annual', u'Guitar', u'day', u'and', u'the', u'International', u'Josef', u'Gabriel', u'Rheinberger', u'Society', u';', u'and', u'two', u'main', u'theatre', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'NN', u'NNS', u'JJ', u'IN', u'DT', u'NNP', u'JJ', u'NN', u',', u'DT', u'JJ', u'NNP', u'NNS', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'CC', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[20533, 20538], [20539, 20542], [20543, 20551], [20552, 20557], [20558, 20571], [20572, 20576], [20577, 20579], [20580, 20583], [20584, 20597], [20598, 20605], [20606, 20613], [20613, 20614], [20615, 20618], [20619, 20625], [20626, 20632], [20633, 20637], [20638, 20641], [20642, 20645], [20646, 20659], [20660, 20665], [20666, 20673], [20674, 20685], [20686, 20693], [20693, 20694], [20695, 20698], [20699, 20702], [20703, 20707], [20708, 20716], [20716, 20717]]}) 
answer: set([u'airport'])
candidate Sentence: (0.032694585621356964, {u'tokens': [u'The', u'foundation', u'is', u'registered', u'in', u'the', u'name', u'of', u'a', u'Liechtensteiner', u',', u'often', u'a', u'lawyer', u'.'], u'lemmas': [u'the', u'foundation', u'be', u'register', u'in', u'the', u'name', u'of', u'a', u'Liechtensteiner', u',', u'often', u'a', u'lawyer', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u',', u'RB', u'DT', u'NN', u'.'], u'char_offsets': [[15250, 15253], [15254, 15264], [15265, 15267], [15268, 15278], [15279, 15281], [15282, 15285], [15286, 15290], [15291, 15293], [15294, 15295], [15296, 15311], [15311, 15312], [15313, 15318], [15319, 15320], [15321, 15327], [15327, 15328]]}) 
answer: set([u'airport'])
candidate Sentence: (0.031146923080086708, {u'tokens': [u'It', u'established', u'in', u'Liechtenstein', u'a', u'constitutional', u'monarchy', u'ruled', u'by', u'the', u'reigning', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'.'], u'lemmas': [u'it', u'establish', u'in', u'Liechtenstein', u'a', u'constitutional', u'monarchy', u'rule', u'by', u'the', u'reign', u'prince', u'of', u'the', u'Princely', u'House', u'of', u'Liechtenstein', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'NNP', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'DT', u'VBG', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[8809, 8811], [8812, 8823], [8824, 8826], [8827, 8840], [8841, 8842], [8843, 8857], [8858, 8866], [8867, 8872], [8873, 8875], [8876, 8879], [8880, 8888], [8889, 8895], [8896, 8898], [8899, 8902], [8903, 8911], [8912, 8917], [8918, 8920], [8921, 8934], [8934, 8935]]}) 
answer: set([u'airport'])
candidate Sentence: (0.030814468860626221, {u'tokens': [u'Two', u'bridges', u'over', u'the', u'Rhine', u'were', u'built', u'in', u'1868', u',', u'and', u'in', u'1872', u'a', u'railway', u'line', u'across', u'Liechtenstein', u'was', u'constructed', u'.'], u'lemmas': [u'two', u'bridge', u'over', u'the', u'Rhine', u'be', u'build', u'in', u'1868', u',', u'and', u'in', u'1872', u'a', u'railway', u'line', u'across', u'Liechtenstein', u'be', u'construct', u'.'], u'pos': [u'CD', u'NNS', u'IN', u'DT', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u',', u'CC', u'IN', u'CD', u'DT', u'NN', u'NN', u'IN', u'NNP', u'VBD', u'VBN', u'.'], u'char_offsets': [[4334, 4337], [4338, 4345], [4346, 4350], [4351, 4354], [4355, 4360], [4361, 4365], [4366, 4371], [4372, 4374], [4375, 4379], [4379, 4380], [4381, 4384], [4385, 4387], [4388, 4392], [4393, 4394], [4395, 4402], [4403, 4407], [4408, 4414], [4415, 4428], [4429, 4432], [4433, 4444], [4444, 4445]]}) 
answer: set([u'airport'])

Is there an airport in Liechtenstein?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa928c0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param244] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95050>, (<src.tfidf.TF_IDF object at 0x1084de810>, set(['fillmore', 'millard'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95050>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38283181190490723, {u'tokens': [u'Millard', u'Fillmore', u'-LRB-', u'January', u'7', u',', u'1800', u'March', u'8', u',', u'1874', u'-RRB-', u'was', u'the', u'thirteenth', u'President', u'of', u'the', u'United', u'States', u',', u'serving', u'from', u'1850', u'until', u'1853', u',', u'and', u'the', u'last', u'member', u'of', u'the', u'Whig', u'Party', u'to', u'hold', u'that', u'office', u'.'], u'lemmas': [u'Millard', u'Fillmore', u'-lrb-', u'January', u'7', u',', u'1800', u'March', u'8', u',', u'1874', u'-rrb-', u'be', u'the', u'thirteenth', u'President', u'of', u'the', u'United', u'States', u',', u'serve', u'from', u'1850', u'until', u'1853', u',', u'and', u'the', u'last', u'member', u'of', u'the', u'Whig', u'Party', u'to', u'hold', u'that', u'office', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u',', u'VBG', u'IN', u'CD', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'VB', u'DT', u'NN', u'.'], u'char_offsets': [[0, 7], [8, 16], [17, 18], [18, 25], [26, 27], [27, 28], [29, 33], [36, 41], [42, 43], [43, 44], [45, 49], [49, 50], [51, 54], [55, 58], [59, 69], [70, 79], [80, 82], [83, 86], [87, 93], [94, 100], [100, 101], [102, 109], [110, 114], [115, 119], [120, 125], [126, 130], [130, 131], [132, 135], [136, 139], [140, 144], [145, 151], [152, 154], [155, 158], [159, 163], [164, 169], [170, 172], [173, 177], [178, 182], [183, 189], [189, 190]]}) 
answer: set([u'bear'])
candidate Sentence: (0.27046597003936768, {u'tokens': [u'On', u'January', u'7', u'each', u'year', u',', u'a', u'ceremony', u'is', u'held', u'at', u'his', u'grave', u'site', u'in', u'the', u'Forest', u'Lawn', u'Cemetery', u'in', u'Buffalo', u'.'], u'lemmas': [u'on', u'January', u'7', u'each', u'year', u',', u'a', u'ceremony', u'be', u'hold', u'at', u'he', u'grave', u'site', u'in', u'the', u'forest', u'lawn', u'cemetery', u'in', u'Buffalo', u'.'], u'pos': [u'IN', u'NNP', u'CD', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[12792, 12794], [12795, 12802], [12803, 12804], [12805, 12809], [12810, 12814], [12814, 12815], [12816, 12817], [12818, 12826], [12827, 12829], [12830, 12834], [12835, 12837], [12838, 12841], [12842, 12847], [12848, 12852], [12853, 12855], [12856, 12859], [12860, 12866], [12867, 12871], [12872, 12880], [12881, 12883], [12884, 12891], [12891, 12892]]}) 
answer: set([u'bear', u'1800'])
candidate Sentence: (0.23530928790569305, {u'tokens': [u'*', u'Fillmore', u'was', u'the', u'first', u'U.S.', u'President', u'born', u'after', u'the', u'death', u'of', u'a', u'former', u'president', u',', u'as', u'he', u'was', u'born', u'three', u'weeks', u'after', u'George', u'Washington', u"'s", u'death', u'on', u'December', u'14', u',', u'1799', u'.'], u'lemmas': [u'*', u'Fillmore', u'be', u'the', u'first', u'U.S.', u'President', u'bear', u'after', u'the', u'death', u'of', u'a', u'former', u'president', u',', u'as', u'he', u'be', u'bear', u'three', u'week', u'after', u'George', u'Washington', u"'s", u'death', u'on', u'December', u'14', u',', u'1799', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'PRP', u'VBD', u'VBN', u'CD', u'NNS', u'IN', u'NNP', u'NNP', u'POS', u'NN', u'IN', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[14587, 14588], [14588, 14596], [14597, 14600], [14601, 14604], [14605, 14610], [14611, 14615], [14616, 14625], [14626, 14630], [14631, 14636], [14637, 14640], [14641, 14646], [14647, 14649], [14650, 14651], [14652, 14658], [14659, 14668], [14668, 14669], [14670, 14672], [14673, 14675], [14676, 14679], [14680, 14684], [14685, 14690], [14691, 14696], [14697, 14702], [14703, 14709], [14710, 14720], [14720, 14722], [14723, 14728], [14729, 14731], [14732, 14740], [14741, 14743], [14743, 14744], [14745, 14749], [14749, 14750]]}) 
answer: set([u'january', u'7', u'1800'])
candidate Sentence: (0.16066570580005646, {u'tokens': [u'Fillmore', u'was', u'born', u'in', u'a', u'log', u'cabin', u'in', u'Summerhill', u',', u'New', u'York', u',', u'to', u'Nathaniel', u'and', u'Phoebe', u'Millard', u'Fillmore', u',', u'as', u'the', u'second', u'of', u'nine', u'children', u'and', u'the', u'eldest', u'son', u'.'], u'lemmas': [u'Fillmore', u'be', u'bear', u'in', u'a', u'log', u'cabin', u'in', u'Summerhill', u',', u'New', u'York', u',', u'to', u'Nathaniel', u'and', u'Phoebe', u'Millard', u'Fillmore', u',', u'as', u'the', u'second', u'of', u'nine', u'child', u'and', u'the', u'eldest', u'son', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u',', u'TO', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'CD', u'NNS', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[669, 677], [678, 681], [682, 686], [687, 689], [690, 691], [692, 695], [696, 701], [702, 704], [705, 715], [715, 716], [717, 720], [721, 725], [725, 726], [727, 729], [730, 739], [740, 743], [744, 750], [751, 758], [759, 767], [767, 768], [769, 771], [772, 775], [776, 782], [783, 785], [786, 790], [791, 799], [800, 803], [804, 807], [808, 814], [815, 818], [818, 819]]}) 
answer: set([u'january', u'7', u'1800'])
candidate Sentence: (0.071343414485454559, {u'tokens': [u'Engraving', u'of', u'Millard', u'FillmoreIn', u'1828', u',', u'Fillmore', u'was', u'elected', u'to', u'the', u'New', u'York', u'State', u'Assembly', u'on', u'the', u'Anti-Masonic', u'ticket', u',', u'serving', u'for', u'one', u'term', u',', u'from', u'1829', u'to', u'1831', u'.'], u'lemmas': [u'Engraving', u'of', u'Millard', u'FillmoreIn', u'1828', u',', u'Fillmore', u'be', u'elect', u'to', u'the', u'New', u'York', u'State', u'Assembly', u'on', u'the', u'anti-masonic', u'ticket', u',', u'serve', u'for', u'one', u'term', u',', u'from', u'1829', u'to', u'1831', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'CD', u',', u'NNP', u'VBD', u'VBN', u'TO', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NN', u',', u'VBG', u'IN', u'CD', u'NN', u',', u'IN', u'CD', u'TO', u'CD', u'.'], u'char_offsets': [[2043, 2052], [2053, 2055], [2056, 2063], [2064, 2074], [2075, 2079], [2079, 2080], [2081, 2089], [2090, 2093], [2094, 2101], [2102, 2104], [2105, 2108], [2109, 2112], [2113, 2117], [2118, 2123], [2124, 2132], [2133, 2135], [2136, 2139], [2140, 2152], [2153, 2159], [2159, 2160], [2161, 2168], [2169, 2172], [2173, 2176], [2177, 2181], [2181, 2182], [2183, 2187], [2188, 2192], [2193, 2195], [2196, 2200], [2200, 2201]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.06690661609172821, {u'tokens': [u'*', u'In', u'2007', u',', u'George', u'Pendle', u'wrote', u'The', u'Remarkable', u'Millard', u'Fillmore', u',', u'a', u'fake', u'biography', u'based', u'on', u'real', u'events', u'that', u'happened', u'in', u'Fillmore', u"'s", u'life', u'.'], u'lemmas': [u'*', u'in', u'2007', u',', u'George', u'Pendle', u'write', u'the', u'remarkable', u'Millard', u'Fillmore', u',', u'a', u'fake', u'biography', u'base', u'on', u'real', u'event', u'that', u'happen', u'in', u'Fillmore', u"'s", u'life', u'.'], u'pos': [u'SYM', u'IN', u'CD', u',', u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'JJ', u'NNS', u'WDT', u'VBD', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[13148, 13149], [13149, 13151], [13152, 13156], [13156, 13157], [13158, 13164], [13165, 13171], [13172, 13177], [13178, 13181], [13182, 13192], [13193, 13200], [13201, 13209], [13209, 13210], [13211, 13212], [13213, 13217], [13218, 13227], [13228, 13233], [13234, 13236], [13237, 13241], [13242, 13248], [13249, 13253], [13254, 13262], [13263, 13265], [13266, 13274], [13274, 13276], [13277, 13281], [13281, 13282]]}) 
answer: set([u'january', u'bear', u'7', u'1800'])
candidate Sentence: (0.061906442046165466, {u'tokens': [u'Though', u'a', u'Unitarian', u'in', u'later', u'life', u',', u'Fillmore', u'was', u'descended', u'from', u'Scottish', u'Presbyterians', u'on', u'his', u'father', u"'s", u'side', u'and', u'English', u'dissenters', u'on', u'his', u'mother', u"'s", u'.'], u'lemmas': [u'though', u'a', u'Unitarian', u'in', u'later', u'life', u',', u'Fillmore', u'be', u'descend', u'from', u'scottish', u'Presbyterians', u'on', u'he', u'father', u"'s", u'side', u'and', u'english', u'dissenter', u'on', u'he', u'mother', u"'s", u'.'], u'pos': [u'IN', u'DT', u'NNP', u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'VBN', u'IN', u'JJ', u'NNPS', u'IN', u'PRP$', u'NN', u'POS', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'POS', u'.'], u'char_offsets': [[823, 829], [830, 831], [832, 841], [842, 844], [845, 850], [851, 855], [855, 856], [860, 868], [869, 872], [873, 882], [883, 887], [888, 896], [897, 910], [911, 913], [914, 917], [918, 924], [924, 926], [927, 931], [932, 935], [936, 943], [944, 954], [955, 957], [958, 961], [962, 968], [968, 970], [970, 971]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.058234367519617081, {u'tokens': [u'The', u'couple', u'had', u'two', u'children', u',', u'Millard', u'Powers', u'Fillmore', u'and', u'Mary', u'Abigail', u'Fillmore', u'.'], u'lemmas': [u'the', u'couple', u'have', u'two', u'child', u',', u'Millard', u'Powers', u'Fillmore', u'and', u'Mary', u'Abigail', u'Fillmore', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'CD', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[1299, 1302], [1303, 1309], [1310, 1313], [1314, 1317], [1318, 1326], [1326, 1327], [1328, 1335], [1336, 1342], [1343, 1351], [1352, 1355], [1356, 1360], [1361, 1368], [1369, 1377], [1377, 1378]]}) 
answer: set([u'january', u'bear', u'7', u'1800'])
candidate Sentence: (0.05328582227230072, {u'tokens': [u'*', u'As', u'of', u'2007', u',', u'Millard', u'Fillmore', u'remains', u'the', u'last', u'U.S.', u'president', u'who', u'was', u'neither', u'a', u'Democrat', u'nor', u'a', u'Republican', u'-LRB-', u'although', u'Abraham', u'Lincoln', u'was', u're-elected', u'in', u'1864', u'running', u'on', u'the', u'National', u'Union', u'Party', u'ticket', u'with', u'Democrat', u'Andrew', u'Johnson', u'as', u'his', u'running', u'mate', u'-RRB-', u'.'], u'lemmas': [u'*', u'as', u'of', u'2007', u',', u'Millard', u'Fillmore', u'remain', u'the', u'last', u'U.S.', u'president', u'who', u'be', u'neither', u'a', u'Democrat', u'nor', u'a', u'republican', u'-lrb-', u'although', u'Abraham', u'Lincoln', u'be', u're-elect', u'in', u'1864', u'run', u'on', u'the', u'National', u'Union', u'Party', u'ticket', u'with', u'Democrat', u'Andrew', u'Johnson', u'as', u'he', u'run', u'mate', u'-rrb-', u'.'], u'pos': [u'SYM', u'IN', u'IN', u'CD', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NNP', u'NN', u'WP', u'VBD', u'CC', u'DT', u'NNP', u'CC', u'DT', u'JJ', u'-LRB-', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'PRP$', u'VBG', u'NN', u'-RRB-', u'.'], u'char_offsets': [[14338, 14339], [14339, 14341], [14342, 14344], [14345, 14349], [14349, 14350], [14351, 14358], [14359, 14367], [14368, 14375], [14376, 14379], [14380, 14384], [14385, 14389], [14390, 14399], [14400, 14403], [14404, 14407], [14408, 14415], [14416, 14417], [14418, 14426], [14427, 14430], [14431, 14432], [14433, 14443], [14444, 14445], [14445, 14453], [14454, 14461], [14462, 14469], [14470, 14473], [14474, 14484], [14485, 14487], [14488, 14492], [14493, 14500], [14501, 14503], [14504, 14507], [14508, 14516], [14517, 14522], [14523, 14528], [14529, 14535], [14536, 14540], [14541, 14549], [14550, 14556], [14557, 14564], [14565, 14567], [14568, 14571], [14572, 14579], [14580, 14584], [14584, 14585], [14585, 14586]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.052577480673789978, {u'tokens': [u'Fillmore', u'made', u'no', u'public', u'comment', u'on', u'the', u'merits', u'of', u'the', u'compromise', u'proposals', u',', u'but', u'a', u'few', u'days', u'before', u'President', u'Taylor', u"'s", u'death', u',', u'Fillmore', u'suggested', u'to', u'the', u'president', u'that', u',', u'should', u'there', u'be', u'a', u'tie', u'vote', u'on', u'Henry', u'Clay', u"'s", u'bill', u',', u'he', u'would', u'vote', u'in', u'favor', u'of', u'the', u'North', u'.'], u'lemmas': [u'Fillmore', u'make', u'no', u'public', u'comment', u'on', u'the', u'merit', u'of', u'the', u'compromise', u'proposal', u',', u'but', u'a', u'few', u'day', u'before', u'President', u'Taylor', u"'s", u'death', u',', u'Fillmore', u'suggest', u'to', u'the', u'president', u'that', u',', u'should', u'there', u'be', u'a', u'tie', u'vote', u'on', u'Henry', u'Clay', u"'s", u'bill', u',', u'he', u'would', u'vote', u'in', u'favor', u'of', u'the', u'North', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'NNS', u',', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'POS', u'NN', u',', u'NNP', u'VBD', u'TO', u'DT', u'NN', u'IN', u',', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'NN', u',', u'PRP', u'MD', u'VB', u'IN', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[4976, 4984], [4985, 4989], [4990, 4992], [4993, 4999], [5000, 5007], [5008, 5010], [5011, 5014], [5015, 5021], [5022, 5024], [5025, 5028], [5029, 5039], [5040, 5049], [5049, 5050], [5051, 5054], [5055, 5056], [5057, 5060], [5061, 5065], [5066, 5072], [5073, 5082], [5083, 5089], [5089, 5091], [5092, 5097], [5097, 5098], [5099, 5107], [5108, 5117], [5118, 5120], [5121, 5124], [5125, 5134], [5135, 5139], [5139, 5140], [5141, 5147], [5148, 5153], [5154, 5156], [5157, 5158], [5159, 5162], [5163, 5167], [5168, 5170], [5171, 5176], [5177, 5181], [5181, 5183], [5184, 5188], [5188, 5189], [5190, 5192], [5193, 5198], [5199, 5203], [5204, 5206], [5207, 5212], [5213, 5215], [5216, 5219], [5220, 5225], [5225, 5226]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])

Was Millard Fillmore born on January 7, 1800?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95050>.answer
_____________________________ test_yesno[param245] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa950e0>, (<src.tfidf.TF_IDF object at 0x1084de810>, set(['fillmore', 'millard'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa950e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38283181190490723, {u'tokens': [u'Millard', u'Fillmore', u'-LRB-', u'January', u'7', u',', u'1800', u'March', u'8', u',', u'1874', u'-RRB-', u'was', u'the', u'thirteenth', u'President', u'of', u'the', u'United', u'States', u',', u'serving', u'from', u'1850', u'until', u'1853', u',', u'and', u'the', u'last', u'member', u'of', u'the', u'Whig', u'Party', u'to', u'hold', u'that', u'office', u'.'], u'lemmas': [u'Millard', u'Fillmore', u'-lrb-', u'January', u'7', u',', u'1800', u'March', u'8', u',', u'1874', u'-rrb-', u'be', u'the', u'thirteenth', u'President', u'of', u'the', u'United', u'States', u',', u'serve', u'from', u'1850', u'until', u'1853', u',', u'and', u'the', u'last', u'member', u'of', u'the', u'Whig', u'Party', u'to', u'hold', u'that', u'office', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u',', u'VBG', u'IN', u'CD', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'VB', u'DT', u'NN', u'.'], u'char_offsets': [[0, 7], [8, 16], [17, 18], [18, 25], [26, 27], [27, 28], [29, 33], [36, 41], [42, 43], [43, 44], [45, 49], [49, 50], [51, 54], [55, 58], [59, 69], [70, 79], [80, 82], [83, 86], [87, 93], [94, 100], [100, 101], [102, 109], [110, 114], [115, 119], [120, 125], [126, 130], [130, 131], [132, 135], [136, 139], [140, 144], [145, 151], [152, 154], [155, 158], [159, 163], [164, 169], [170, 172], [173, 177], [178, 182], [183, 189], [189, 190]]}) 
answer: set([u'bear'])
candidate Sentence: (0.27046597003936768, {u'tokens': [u'On', u'January', u'7', u'each', u'year', u',', u'a', u'ceremony', u'is', u'held', u'at', u'his', u'grave', u'site', u'in', u'the', u'Forest', u'Lawn', u'Cemetery', u'in', u'Buffalo', u'.'], u'lemmas': [u'on', u'January', u'7', u'each', u'year', u',', u'a', u'ceremony', u'be', u'hold', u'at', u'he', u'grave', u'site', u'in', u'the', u'forest', u'lawn', u'cemetery', u'in', u'Buffalo', u'.'], u'pos': [u'IN', u'NNP', u'CD', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[12792, 12794], [12795, 12802], [12803, 12804], [12805, 12809], [12810, 12814], [12814, 12815], [12816, 12817], [12818, 12826], [12827, 12829], [12830, 12834], [12835, 12837], [12838, 12841], [12842, 12847], [12848, 12852], [12853, 12855], [12856, 12859], [12860, 12866], [12867, 12871], [12872, 12880], [12881, 12883], [12884, 12891], [12891, 12892]]}) 
answer: set([u'bear', u'1800'])
candidate Sentence: (0.23530928790569305, {u'tokens': [u'*', u'Fillmore', u'was', u'the', u'first', u'U.S.', u'President', u'born', u'after', u'the', u'death', u'of', u'a', u'former', u'president', u',', u'as', u'he', u'was', u'born', u'three', u'weeks', u'after', u'George', u'Washington', u"'s", u'death', u'on', u'December', u'14', u',', u'1799', u'.'], u'lemmas': [u'*', u'Fillmore', u'be', u'the', u'first', u'U.S.', u'President', u'bear', u'after', u'the', u'death', u'of', u'a', u'former', u'president', u',', u'as', u'he', u'be', u'bear', u'three', u'week', u'after', u'George', u'Washington', u"'s", u'death', u'on', u'December', u'14', u',', u'1799', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'PRP', u'VBD', u'VBN', u'CD', u'NNS', u'IN', u'NNP', u'NNP', u'POS', u'NN', u'IN', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[14587, 14588], [14588, 14596], [14597, 14600], [14601, 14604], [14605, 14610], [14611, 14615], [14616, 14625], [14626, 14630], [14631, 14636], [14637, 14640], [14641, 14646], [14647, 14649], [14650, 14651], [14652, 14658], [14659, 14668], [14668, 14669], [14670, 14672], [14673, 14675], [14676, 14679], [14680, 14684], [14685, 14690], [14691, 14696], [14697, 14702], [14703, 14709], [14710, 14720], [14720, 14722], [14723, 14728], [14729, 14731], [14732, 14740], [14741, 14743], [14743, 14744], [14745, 14749], [14749, 14750]]}) 
answer: set([u'january', u'7', u'1800'])
candidate Sentence: (0.16066570580005646, {u'tokens': [u'Fillmore', u'was', u'born', u'in', u'a', u'log', u'cabin', u'in', u'Summerhill', u',', u'New', u'York', u',', u'to', u'Nathaniel', u'and', u'Phoebe', u'Millard', u'Fillmore', u',', u'as', u'the', u'second', u'of', u'nine', u'children', u'and', u'the', u'eldest', u'son', u'.'], u'lemmas': [u'Fillmore', u'be', u'bear', u'in', u'a', u'log', u'cabin', u'in', u'Summerhill', u',', u'New', u'York', u',', u'to', u'Nathaniel', u'and', u'Phoebe', u'Millard', u'Fillmore', u',', u'as', u'the', u'second', u'of', u'nine', u'child', u'and', u'the', u'eldest', u'son', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u',', u'TO', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'CD', u'NNS', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[669, 677], [678, 681], [682, 686], [687, 689], [690, 691], [692, 695], [696, 701], [702, 704], [705, 715], [715, 716], [717, 720], [721, 725], [725, 726], [727, 729], [730, 739], [740, 743], [744, 750], [751, 758], [759, 767], [767, 768], [769, 771], [772, 775], [776, 782], [783, 785], [786, 790], [791, 799], [800, 803], [804, 807], [808, 814], [815, 818], [818, 819]]}) 
answer: set([u'january', u'7', u'1800'])
candidate Sentence: (0.071343414485454559, {u'tokens': [u'Engraving', u'of', u'Millard', u'FillmoreIn', u'1828', u',', u'Fillmore', u'was', u'elected', u'to', u'the', u'New', u'York', u'State', u'Assembly', u'on', u'the', u'Anti-Masonic', u'ticket', u',', u'serving', u'for', u'one', u'term', u',', u'from', u'1829', u'to', u'1831', u'.'], u'lemmas': [u'Engraving', u'of', u'Millard', u'FillmoreIn', u'1828', u',', u'Fillmore', u'be', u'elect', u'to', u'the', u'New', u'York', u'State', u'Assembly', u'on', u'the', u'anti-masonic', u'ticket', u',', u'serve', u'for', u'one', u'term', u',', u'from', u'1829', u'to', u'1831', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'CD', u',', u'NNP', u'VBD', u'VBN', u'TO', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NN', u',', u'VBG', u'IN', u'CD', u'NN', u',', u'IN', u'CD', u'TO', u'CD', u'.'], u'char_offsets': [[2043, 2052], [2053, 2055], [2056, 2063], [2064, 2074], [2075, 2079], [2079, 2080], [2081, 2089], [2090, 2093], [2094, 2101], [2102, 2104], [2105, 2108], [2109, 2112], [2113, 2117], [2118, 2123], [2124, 2132], [2133, 2135], [2136, 2139], [2140, 2152], [2153, 2159], [2159, 2160], [2161, 2168], [2169, 2172], [2173, 2176], [2177, 2181], [2181, 2182], [2183, 2187], [2188, 2192], [2193, 2195], [2196, 2200], [2200, 2201]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.06690661609172821, {u'tokens': [u'*', u'In', u'2007', u',', u'George', u'Pendle', u'wrote', u'The', u'Remarkable', u'Millard', u'Fillmore', u',', u'a', u'fake', u'biography', u'based', u'on', u'real', u'events', u'that', u'happened', u'in', u'Fillmore', u"'s", u'life', u'.'], u'lemmas': [u'*', u'in', u'2007', u',', u'George', u'Pendle', u'write', u'the', u'remarkable', u'Millard', u'Fillmore', u',', u'a', u'fake', u'biography', u'base', u'on', u'real', u'event', u'that', u'happen', u'in', u'Fillmore', u"'s", u'life', u'.'], u'pos': [u'SYM', u'IN', u'CD', u',', u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'JJ', u'NNS', u'WDT', u'VBD', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[13148, 13149], [13149, 13151], [13152, 13156], [13156, 13157], [13158, 13164], [13165, 13171], [13172, 13177], [13178, 13181], [13182, 13192], [13193, 13200], [13201, 13209], [13209, 13210], [13211, 13212], [13213, 13217], [13218, 13227], [13228, 13233], [13234, 13236], [13237, 13241], [13242, 13248], [13249, 13253], [13254, 13262], [13263, 13265], [13266, 13274], [13274, 13276], [13277, 13281], [13281, 13282]]}) 
answer: set([u'january', u'bear', u'7', u'1800'])
candidate Sentence: (0.061906442046165466, {u'tokens': [u'Though', u'a', u'Unitarian', u'in', u'later', u'life', u',', u'Fillmore', u'was', u'descended', u'from', u'Scottish', u'Presbyterians', u'on', u'his', u'father', u"'s", u'side', u'and', u'English', u'dissenters', u'on', u'his', u'mother', u"'s", u'.'], u'lemmas': [u'though', u'a', u'Unitarian', u'in', u'later', u'life', u',', u'Fillmore', u'be', u'descend', u'from', u'scottish', u'Presbyterians', u'on', u'he', u'father', u"'s", u'side', u'and', u'english', u'dissenter', u'on', u'he', u'mother', u"'s", u'.'], u'pos': [u'IN', u'DT', u'NNP', u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'VBN', u'IN', u'JJ', u'NNPS', u'IN', u'PRP$', u'NN', u'POS', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'POS', u'.'], u'char_offsets': [[823, 829], [830, 831], [832, 841], [842, 844], [845, 850], [851, 855], [855, 856], [860, 868], [869, 872], [873, 882], [883, 887], [888, 896], [897, 910], [911, 913], [914, 917], [918, 924], [924, 926], [927, 931], [932, 935], [936, 943], [944, 954], [955, 957], [958, 961], [962, 968], [968, 970], [970, 971]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.058234367519617081, {u'tokens': [u'The', u'couple', u'had', u'two', u'children', u',', u'Millard', u'Powers', u'Fillmore', u'and', u'Mary', u'Abigail', u'Fillmore', u'.'], u'lemmas': [u'the', u'couple', u'have', u'two', u'child', u',', u'Millard', u'Powers', u'Fillmore', u'and', u'Mary', u'Abigail', u'Fillmore', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'CD', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[1299, 1302], [1303, 1309], [1310, 1313], [1314, 1317], [1318, 1326], [1326, 1327], [1328, 1335], [1336, 1342], [1343, 1351], [1352, 1355], [1356, 1360], [1361, 1368], [1369, 1377], [1377, 1378]]}) 
answer: set([u'january', u'bear', u'7', u'1800'])
candidate Sentence: (0.05328582227230072, {u'tokens': [u'*', u'As', u'of', u'2007', u',', u'Millard', u'Fillmore', u'remains', u'the', u'last', u'U.S.', u'president', u'who', u'was', u'neither', u'a', u'Democrat', u'nor', u'a', u'Republican', u'-LRB-', u'although', u'Abraham', u'Lincoln', u'was', u're-elected', u'in', u'1864', u'running', u'on', u'the', u'National', u'Union', u'Party', u'ticket', u'with', u'Democrat', u'Andrew', u'Johnson', u'as', u'his', u'running', u'mate', u'-RRB-', u'.'], u'lemmas': [u'*', u'as', u'of', u'2007', u',', u'Millard', u'Fillmore', u'remain', u'the', u'last', u'U.S.', u'president', u'who', u'be', u'neither', u'a', u'Democrat', u'nor', u'a', u'republican', u'-lrb-', u'although', u'Abraham', u'Lincoln', u'be', u're-elect', u'in', u'1864', u'run', u'on', u'the', u'National', u'Union', u'Party', u'ticket', u'with', u'Democrat', u'Andrew', u'Johnson', u'as', u'he', u'run', u'mate', u'-rrb-', u'.'], u'pos': [u'SYM', u'IN', u'IN', u'CD', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NNP', u'NN', u'WP', u'VBD', u'CC', u'DT', u'NNP', u'CC', u'DT', u'JJ', u'-LRB-', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'PRP$', u'VBG', u'NN', u'-RRB-', u'.'], u'char_offsets': [[14338, 14339], [14339, 14341], [14342, 14344], [14345, 14349], [14349, 14350], [14351, 14358], [14359, 14367], [14368, 14375], [14376, 14379], [14380, 14384], [14385, 14389], [14390, 14399], [14400, 14403], [14404, 14407], [14408, 14415], [14416, 14417], [14418, 14426], [14427, 14430], [14431, 14432], [14433, 14443], [14444, 14445], [14445, 14453], [14454, 14461], [14462, 14469], [14470, 14473], [14474, 14484], [14485, 14487], [14488, 14492], [14493, 14500], [14501, 14503], [14504, 14507], [14508, 14516], [14517, 14522], [14523, 14528], [14529, 14535], [14536, 14540], [14541, 14549], [14550, 14556], [14557, 14564], [14565, 14567], [14568, 14571], [14572, 14579], [14580, 14584], [14584, 14585], [14585, 14586]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])
candidate Sentence: (0.052577480673789978, {u'tokens': [u'Fillmore', u'made', u'no', u'public', u'comment', u'on', u'the', u'merits', u'of', u'the', u'compromise', u'proposals', u',', u'but', u'a', u'few', u'days', u'before', u'President', u'Taylor', u"'s", u'death', u',', u'Fillmore', u'suggested', u'to', u'the', u'president', u'that', u',', u'should', u'there', u'be', u'a', u'tie', u'vote', u'on', u'Henry', u'Clay', u"'s", u'bill', u',', u'he', u'would', u'vote', u'in', u'favor', u'of', u'the', u'North', u'.'], u'lemmas': [u'Fillmore', u'make', u'no', u'public', u'comment', u'on', u'the', u'merit', u'of', u'the', u'compromise', u'proposal', u',', u'but', u'a', u'few', u'day', u'before', u'President', u'Taylor', u"'s", u'death', u',', u'Fillmore', u'suggest', u'to', u'the', u'president', u'that', u',', u'should', u'there', u'be', u'a', u'tie', u'vote', u'on', u'Henry', u'Clay', u"'s", u'bill', u',', u'he', u'would', u'vote', u'in', u'favor', u'of', u'the', u'North', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'NNS', u',', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'POS', u'NN', u',', u'NNP', u'VBD', u'TO', u'DT', u'NN', u'IN', u',', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'NN', u',', u'PRP', u'MD', u'VB', u'IN', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[4976, 4984], [4985, 4989], [4990, 4992], [4993, 4999], [5000, 5007], [5008, 5010], [5011, 5014], [5015, 5021], [5022, 5024], [5025, 5028], [5029, 5039], [5040, 5049], [5049, 5050], [5051, 5054], [5055, 5056], [5057, 5060], [5061, 5065], [5066, 5072], [5073, 5082], [5083, 5089], [5089, 5091], [5092, 5097], [5097, 5098], [5099, 5107], [5108, 5117], [5118, 5120], [5121, 5124], [5125, 5134], [5135, 5139], [5139, 5140], [5141, 5147], [5148, 5153], [5154, 5156], [5157, 5158], [5159, 5162], [5163, 5167], [5168, 5170], [5171, 5176], [5177, 5181], [5181, 5183], [5184, 5188], [5188, 5189], [5190, 5192], [5193, 5198], [5199, 5203], [5204, 5206], [5207, 5212], [5213, 5215], [5216, 5219], [5220, 5225], [5225, 5226]]}) 
answer: set([u'january', u'7', u'bear', u'1800'])

Was Millard Fillmore born on January 7, 1800?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa950e0>.answer
_____________________________ test_yesno[param248] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95290>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa95290>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.59163969755172729, {u'tokens': [u'Most', u'have', u'sharp', u'claws', u'on', u'their', u'feet', u',', u'and', u'all', u'but', u'the', u'sea', u'otter', u'have', u'long', u'muscular', u'tails', u'.'], u'lemmas': [u'most', u'have', u'sharp', u'claw', u'on', u'they', u'foot', u',', u'and', u'all', u'but', u'the', u'sea', u'otter', u'have', u'long', u'muscular', u'tail', u'.'], u'pos': [u'JJS', u'VBP', u'JJ', u'NNS', u'IN', u'PRP$', u'NNS', u',', u'CC', u'DT', u'CC', u'DT', u'NN', u'NN', u'VBP', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[580, 584], [585, 589], [590, 595], [596, 601], [602, 604], [605, 610], [611, 615], [615, 616], [617, 620], [621, 624], [625, 628], [629, 632], [633, 636], [637, 642], [643, 647], [648, 652], [653, 661], [662, 667], [667, 668]]}) 
answer: set([])
candidate Sentence: (0.17072425782680511, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.1617872416973114, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.1276557445526123, {u'tokens': [u'Otters', u'have', u'long', u',', u'slim', u'bodies', u'and', u'relatively', u'short', u'limbs', u',', u'with', u'webbed', u'paws', u'.'], u'lemmas': [u'otter', u'have', u'long', u',', u'slim', u'body', u'and', u'relatively', u'short', u'limb', u',', u'with', u'webbed', u'paw', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u',', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NNS', u',', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[504, 510], [511, 515], [516, 520], [520, 521], [522, 526], [527, 533], [534, 537], [538, 548], [549, 554], [555, 560], [560, 561], [562, 566], [567, 573], [574, 578], [578, 579]]}) 
answer: set([u'tail', u'muscular', u'sea'])
candidate Sentence: (0.12024500221014023, {u'tokens': [u'They', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'is', u'protected', u'by', u'their', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'lemmas': [u'they', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'be', u'protect', u'by', u'they', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'pos': [u'PRP', u'VBP', u'DT', u'RB', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[669, 673], [674, 678], [679, 680], [681, 685], [686, 690], [691, 699], [700, 705], [706, 708], [709, 718], [719, 721], [722, 727], [728, 733], [734, 739], [740, 742], [743, 747], [748, 753], [754, 758], [758, 759]]}) 
answer: set([u'tail', u'sea', u'muscular'])
candidate Sentence: (0.11541936546564102, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([u'tail', u'long', u'muscular', u'sea'])
candidate Sentence: (0.054490990936756134, {u'tokens': [u'By', u'the', u'time', u'the', u'1911', u'Fur', u'Seal', u'Treaty', u'gave', u'them', u'protection', u',', u'so', u'few', u'sea', u'otters', u'remained', u'that', u'the', u'fur', u'trade', u'had', u'become', u'unprofitable', u'.'], u'lemmas': [u'by', u'the', u'time', u'the', u'1911', u'Fur', u'Seal', u'Treaty', u'give', u'they', u'protection', u',', u'so', u'few', u'sea', u'otter', u'remain', u'that', u'the', u'fur', u'trade', u'have', u'become', u'unprofitable', u'.'], u'pos': [u'IN', u'DT', u'NN', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u'VBD', u'PRP', u'NN', u',', u'RB', u'JJ', u'NN', u'NNS', u'VBD', u'IN', u'DT', u'NN', u'NN', u'VBD', u'VBN', u'JJ', u'.'], u'char_offsets': [[3217, 3219], [3220, 3223], [3224, 3228], [3229, 3232], [3233, 3237], [3238, 3241], [3242, 3246], [3247, 3253], [3254, 3258], [3259, 3263], [3264, 3274], [3274, 3275], [3276, 3278], [3279, 3282], [3283, 3286], [3287, 3293], [3294, 3302], [3303, 3307], [3308, 3311], [3312, 3315], [3316, 3321], [3322, 3325], [3326, 3332], [3333, 3345], [3345, 3346]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.045961085706949234, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.042437359690666199, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2876, 2877], [2878, 2881], [2882, 2887], [2888, 2890], [2891, 2896], [2897, 2900], [2900, 2901], [2902, 2912], [2913, 2916], [2917, 2923], [2924, 2925], [2925, 2932], [2933, 2939], [2939, 2940], [2941, 2945], [2946, 2951], [2952, 2955], [2956, 2963], [2964, 2969], [2970, 2972], [2973, 2978], [2979, 2986], [2986, 2987]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.037140604108572006, {u'tokens': [u'It', u'is', u'native', u'to', u'the', u'Tigris-Euphrates', u'alluvial', u'salt', u'marsh', u'of', u'Iraq', u',', u'but', u'it', u'has', u'been', u'suggested', u'that', u'it', u'may', u'have', u'become', u'extinct', u'as', u'a', u'result', u'of', u'the', u'large-scale', u'drainage', u'that', u'has', u'taken', u'place', u'in', u'the', u'region', u'since', u'the', u'1960s', u'.'], u'lemmas': [u'it', u'be', u'native', u'to', u'the', u'Tigris-Euphrates', u'alluvial', u'salt', u'marsh', u'of', u'Iraq', u',', u'but', u'it', u'have', u'be', u'suggest', u'that', u'it', u'may', u'have', u'become', u'extinct', u'as', u'a', u'result', u'of', u'the', u'large-scale', u'drainage', u'that', u'have', u'take', u'place', u'in', u'the', u'region', u'since', u'the', u'1960', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'TO', u'DT', u'NNP', u'JJ', u'NN', u'NN', u'IN', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'VBN', u'VBN', u'IN', u'PRP', u'MD', u'VB', u'VBN', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[4256, 4258], [4259, 4261], [4262, 4268], [4269, 4271], [4272, 4275], [4276, 4292], [4293, 4301], [4302, 4306], [4307, 4312], [4313, 4315], [4316, 4320], [4320, 4321], [4322, 4325], [4326, 4328], [4329, 4332], [4333, 4337], [4338, 4347], [4348, 4352], [4353, 4355], [4356, 4359], [4360, 4364], [4365, 4371], [4372, 4379], [4380, 4382], [4383, 4384], [4385, 4391], [4392, 4394], [4395, 4398], [4399, 4410], [4411, 4419], [4420, 4424], [4425, 4428], [4429, 4434], [4435, 4440], [4441, 4443], [4444, 4447], [4448, 4454], [4455, 4460], [4461, 4464], [4465, 4470], [4471, 4472]]}) 
answer: set([u'tail', u'long', u'muscular', u'sea'])

Do sea otters have long muscular tails?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa95290>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param249] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95320>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa95320>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.59163969755172729, {u'tokens': [u'Most', u'have', u'sharp', u'claws', u'on', u'their', u'feet', u',', u'and', u'all', u'but', u'the', u'sea', u'otter', u'have', u'long', u'muscular', u'tails', u'.'], u'lemmas': [u'most', u'have', u'sharp', u'claw', u'on', u'they', u'foot', u',', u'and', u'all', u'but', u'the', u'sea', u'otter', u'have', u'long', u'muscular', u'tail', u'.'], u'pos': [u'JJS', u'VBP', u'JJ', u'NNS', u'IN', u'PRP$', u'NNS', u',', u'CC', u'DT', u'CC', u'DT', u'NN', u'NN', u'VBP', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[580, 584], [585, 589], [590, 595], [596, 601], [602, 604], [605, 610], [611, 615], [615, 616], [617, 620], [621, 624], [625, 628], [629, 632], [633, 636], [637, 642], [643, 647], [648, 652], [653, 661], [662, 667], [667, 668]]}) 
answer: set([])
candidate Sentence: (0.17072425782680511, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.1617872416973114, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.1276557445526123, {u'tokens': [u'Otters', u'have', u'long', u',', u'slim', u'bodies', u'and', u'relatively', u'short', u'limbs', u',', u'with', u'webbed', u'paws', u'.'], u'lemmas': [u'otter', u'have', u'long', u',', u'slim', u'body', u'and', u'relatively', u'short', u'limb', u',', u'with', u'webbed', u'paw', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u',', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NNS', u',', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[504, 510], [511, 515], [516, 520], [520, 521], [522, 526], [527, 533], [534, 537], [538, 548], [549, 554], [555, 560], [560, 561], [562, 566], [567, 573], [574, 578], [578, 579]]}) 
answer: set([u'tail', u'muscular', u'sea'])
candidate Sentence: (0.12024500221014023, {u'tokens': [u'They', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'is', u'protected', u'by', u'their', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'lemmas': [u'they', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'be', u'protect', u'by', u'they', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'pos': [u'PRP', u'VBP', u'DT', u'RB', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[669, 673], [674, 678], [679, 680], [681, 685], [686, 690], [691, 699], [700, 705], [706, 708], [709, 718], [719, 721], [722, 727], [728, 733], [734, 739], [740, 742], [743, 747], [748, 753], [754, 758], [758, 759]]}) 
answer: set([u'tail', u'sea', u'muscular'])
candidate Sentence: (0.11541936546564102, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([u'tail', u'long', u'muscular', u'sea'])
candidate Sentence: (0.054490990936756134, {u'tokens': [u'By', u'the', u'time', u'the', u'1911', u'Fur', u'Seal', u'Treaty', u'gave', u'them', u'protection', u',', u'so', u'few', u'sea', u'otters', u'remained', u'that', u'the', u'fur', u'trade', u'had', u'become', u'unprofitable', u'.'], u'lemmas': [u'by', u'the', u'time', u'the', u'1911', u'Fur', u'Seal', u'Treaty', u'give', u'they', u'protection', u',', u'so', u'few', u'sea', u'otter', u'remain', u'that', u'the', u'fur', u'trade', u'have', u'become', u'unprofitable', u'.'], u'pos': [u'IN', u'DT', u'NN', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u'VBD', u'PRP', u'NN', u',', u'RB', u'JJ', u'NN', u'NNS', u'VBD', u'IN', u'DT', u'NN', u'NN', u'VBD', u'VBN', u'JJ', u'.'], u'char_offsets': [[3217, 3219], [3220, 3223], [3224, 3228], [3229, 3232], [3233, 3237], [3238, 3241], [3242, 3246], [3247, 3253], [3254, 3258], [3259, 3263], [3264, 3274], [3274, 3275], [3276, 3278], [3279, 3282], [3283, 3286], [3287, 3293], [3294, 3302], [3303, 3307], [3308, 3311], [3312, 3315], [3316, 3321], [3322, 3325], [3326, 3332], [3333, 3345], [3345, 3346]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.045961085706949234, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.042437359690666199, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2876, 2877], [2878, 2881], [2882, 2887], [2888, 2890], [2891, 2896], [2897, 2900], [2900, 2901], [2902, 2912], [2913, 2916], [2917, 2923], [2924, 2925], [2925, 2932], [2933, 2939], [2939, 2940], [2941, 2945], [2946, 2951], [2952, 2955], [2956, 2963], [2964, 2969], [2970, 2972], [2973, 2978], [2979, 2986], [2986, 2987]]}) 
answer: set([u'tail', u'long', u'muscular'])
candidate Sentence: (0.037140604108572006, {u'tokens': [u'It', u'is', u'native', u'to', u'the', u'Tigris-Euphrates', u'alluvial', u'salt', u'marsh', u'of', u'Iraq', u',', u'but', u'it', u'has', u'been', u'suggested', u'that', u'it', u'may', u'have', u'become', u'extinct', u'as', u'a', u'result', u'of', u'the', u'large-scale', u'drainage', u'that', u'has', u'taken', u'place', u'in', u'the', u'region', u'since', u'the', u'1960s', u'.'], u'lemmas': [u'it', u'be', u'native', u'to', u'the', u'Tigris-Euphrates', u'alluvial', u'salt', u'marsh', u'of', u'Iraq', u',', u'but', u'it', u'have', u'be', u'suggest', u'that', u'it', u'may', u'have', u'become', u'extinct', u'as', u'a', u'result', u'of', u'the', u'large-scale', u'drainage', u'that', u'have', u'take', u'place', u'in', u'the', u'region', u'since', u'the', u'1960', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'TO', u'DT', u'NNP', u'JJ', u'NN', u'NN', u'IN', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'VBN', u'VBN', u'IN', u'PRP', u'MD', u'VB', u'VBN', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[4256, 4258], [4259, 4261], [4262, 4268], [4269, 4271], [4272, 4275], [4276, 4292], [4293, 4301], [4302, 4306], [4307, 4312], [4313, 4315], [4316, 4320], [4320, 4321], [4322, 4325], [4326, 4328], [4329, 4332], [4333, 4337], [4338, 4347], [4348, 4352], [4353, 4355], [4356, 4359], [4360, 4364], [4365, 4371], [4372, 4379], [4380, 4382], [4383, 4384], [4385, 4391], [4392, 4394], [4395, 4398], [4399, 4410], [4411, 4419], [4420, 4424], [4425, 4428], [4429, 4434], [4435, 4440], [4441, 4443], [4444, 4447], [4448, 4454], [4455, 4460], [4461, 4464], [4465, 4470], [4471, 4472]]}) 
answer: set([u'tail', u'long', u'muscular', u'sea'])

Do sea otters have long muscular tails?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa95320>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param250] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa953b0>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa953b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24687570333480835, {u'tokens': [u'In', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'C', u'an', u'otter', u'needs', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'lemmas': [u'in', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'c', u'a', u'otter', u'need', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'pos': [u'IN', u'NN', u'IN', u'JJ', u'IN', u'CD', u'CD', u'NN', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'CD', u'NN', u'IN', u'NN', u'IN', u'NN', u'TO', u'VB', u'.'], u'char_offsets': [[1097, 1099], [1100, 1105], [1106, 1108], [1109, 1113], [1114, 1116], [1117, 1119], [1119, 1120], [1120, 1121], [1122, 1124], [1125, 1130], [1131, 1136], [1137, 1139], [1140, 1145], [1146, 1149], [1150, 1151], [1152, 1154], [1155, 1159], [1160, 1163], [1164, 1168], [1169, 1171], [1172, 1179], [1179, 1180]]}) 
answer: set([u'cold'])
candidate Sentence: (0.22407764196395874, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([u'survive'])
candidate Sentence: (0.060843661427497864, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.06029704213142395, {u'tokens': [u'They', u'spend', u'most', u'of', u'their', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otters', u'spend', u'much', u'of', u'their', u'time', u'on', u'land', u'.'], u'lemmas': [u'they', u'spend', u'most', u'of', u'they', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otter', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'.'], u'pos': [u'PRP', u'VBP', u'JJS', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[3963, 3967], [3968, 3973], [3974, 3978], [3979, 3981], [3982, 3987], [3988, 3992], [3993, 3995], [3996, 3999], [4000, 4005], [4005, 4006], [4007, 4014], [4015, 4020], [4021, 4027], [4028, 4033], [4034, 4038], [4039, 4041], [4042, 4047], [4048, 4052], [4053, 4055], [4056, 4060], [4060, 4061]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.058991231024265289, {u'tokens': [u'This', u'traps', u'a', u'layer', u'of', u'air', u',', u'and', u'keeps', u'them', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'lemmas': [u'this', u'trap', u'a', u'layer', u'of', u'air', u',', u'and', u'keep', u'they', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'pos': [u'DT', u'NNS', u'DT', u'NN', u'IN', u'NN', u',', u'CC', u'VBZ', u'PRP', u'JJ', u'CC', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[760, 764], [765, 770], [771, 772], [773, 778], [779, 781], [782, 785], [785, 786], [787, 790], [791, 796], [797, 801], [802, 805], [806, 809], [810, 814], [815, 820], [821, 826], [826, 827]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.045159779489040375, {u'tokens': [u'In', u'the', u'British', u'Isles', u'they', u'occurred', u'commonly', u'as', u'recently', u'as', u'the', u'1950s', u',', u'but', u'became', u'rare', u'in', u'many', u'areas', u'due', u'to', u'the', u'use', u'of', u'chlorinated', u'hydrocarbon', u'pesticides', u'and', u'as', u'a', u'result', u'of', u'habitat-loss', u'and', u'water', u'pollution', u'-LRB-', u'they', u'remained', u'relatively', u'common', u'in', u'parts', u'of', u'Scotland', u'and', u'Ireland', u'-RRB-', u'.'], u'lemmas': [u'in', u'the', u'british', u'Isles', u'they', u'occur', u'commonly', u'as', u'recently', u'as', u'the', u'1950s', u',', u'but', u'become', u'rare', u'in', u'many', u'area', u'due', u'to', u'the', u'use', u'of', u'chlorinate', u'hydrocarbon', u'pesticide', u'and', u'as', u'a', u'result', u'of', u'habitat-loss', u'and', u'water', u'pollution', u'-lrb-', u'they', u'remain', u'relatively', u'common', u'in', u'part', u'of', u'Scotland', u'and', u'Ireland', u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNPS', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'CC', u'VBD', u'JJ', u'IN', u'JJ', u'NNS', u'JJ', u'TO', u'DT', u'NN', u'IN', u'VBN', u'NN', u'NNS', u'CC', u'IN', u'DT', u'NN', u'IN', u'NN', u'CC', u'NN', u'NN', u'-LRB-', u'PRP', u'VBD', u'RB', u'JJ', u'IN', u'NNS', u'IN', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4591, 4593], [4594, 4597], [4598, 4605], [4606, 4611], [4612, 4616], [4617, 4625], [4626, 4634], [4635, 4637], [4638, 4646], [4647, 4649], [4650, 4653], [4654, 4659], [4659, 4660], [4661, 4664], [4665, 4671], [4672, 4676], [4677, 4679], [4680, 4684], [4685, 4690], [4691, 4694], [4695, 4697], [4698, 4701], [4702, 4705], [4706, 4708], [4709, 4720], [4721, 4732], [4733, 4743], [4744, 4747], [4748, 4750], [4751, 4752], [4753, 4759], [4760, 4762], [4763, 4775], [4776, 4779], [4780, 4785], [4786, 4795], [4796, 4797], [4797, 4801], [4802, 4810], [4811, 4821], [4822, 4828], [4829, 4831], [4832, 4837], [4838, 4840], [4841, 4849], [4850, 4853], [4854, 4861], [4861, 4862], [4862, 4863]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.042374081909656525, {u'tokens': [u'Their', u'historic', u'range', u'included', u'shallow', u'waters', u'of', u'the', u'Bering', u'Strait', u'and', u'Kamchatka', u',', u'and', u'as', u'far', u'south', u'as', u'Japan', u'.'], u'lemmas': [u'they', u'historic', u'range', u'include', u'shallow', u'water', u'of', u'the', u'Bering', u'Strait', u'and', u'Kamchatka', u',', u'and', u'as', u'far', u'south', u'as', u'Japan', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u'VBD', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CC', u'IN', u'RB', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[2989, 2994], [2995, 3003], [3004, 3009], [3010, 3018], [3019, 3026], [3027, 3033], [3034, 3036], [3037, 3040], [3041, 3047], [3048, 3054], [3055, 3058], [3059, 3068], [3068, 3069], [3070, 3073], [3074, 3076], [3077, 3080], [3081, 3086], [3087, 3089], [3090, 3095], [3095, 3096]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.038224395364522934, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[1636, 1640], [1641, 1648], [1649, 1653], [1654, 1660], [1661, 1666], [1666, 1667], [1668, 1676], [1677, 1679], [1680, 1686], [1687, 1689], [1690, 1694], [1695, 1697], [1698, 1704], [1704, 1705], [1706, 1715], [1716, 1724], [1725, 1729], [1730, 1732], [1733, 1738], [1739, 1743], [1744, 1746], [1747, 1751], [1752, 1754], [1755, 1760], [1761, 1766], [1767, 1770], [1771, 1779], [1780, 1791], [1791, 1792]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.031349577009677887, {u'tokens': [u'This', u'and', u'cognate', u'words', u'in', u'other', u'Indo-European', u'languages', u'ultimately', u'stem', u'from', u'a', u'root', u'which', u'also', u'gave', u'rise', u'to', u'the', u'English', u'words', u'``', u'water', u"''", u',', u'``', u'wet', u"''", u'and', u'``', u'winter', u"''", u'.'], u'lemmas': [u'this', u'and', u'cognate', u'word', u'in', u'other', u'indo-european', u'language', u'ultimately', u'stem', u'from', u'a', u'root', u'which', u'also', u'give', u'rise', u'to', u'the', u'English', u'word', u'``', u'water', u"''", u',', u'``', u'wet', u"''", u'and', u'``', u'winter', u"''", u'.'], u'pos': [u'DT', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'IN', u'DT', u'NN', u'WDT', u'RB', u'VBD', u'NN', u'TO', u'DT', u'NNP', u'NNS', u'``', u'NN', u"''", u',', u'``', u'JJ', u"''", u'CC', u'``', u'NN', u"''", u'.'], u'char_offsets': [[5700, 5704], [5705, 5708], [5709, 5716], [5717, 5722], [5723, 5725], [5726, 5731], [5732, 5745], [5746, 5755], [5756, 5766], [5767, 5771], [5772, 5776], [5777, 5778], [5779, 5783], [5784, 5789], [5790, 5794], [5795, 5799], [5800, 5804], [5805, 5807], [5808, 5811], [5812, 5819], [5820, 5825], [5826, 5827], [5827, 5832], [5832, 5833], [5833, 5834], [5835, 5836], [5836, 5839], [5839, 5840], [5841, 5844], [5845, 5846], [5846, 5852], [5852, 5853], [5853, 5854]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.022167710587382317, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'water', u'survive', u'cold'])

Can otters survive in cold water?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa953b0>.answer
_____________________________ test_yesno[param251] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95440>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa95440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24687570333480835, {u'tokens': [u'In', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'C', u'an', u'otter', u'needs', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'lemmas': [u'in', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'c', u'a', u'otter', u'need', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'pos': [u'IN', u'NN', u'IN', u'JJ', u'IN', u'CD', u'CD', u'NN', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'CD', u'NN', u'IN', u'NN', u'IN', u'NN', u'TO', u'VB', u'.'], u'char_offsets': [[1097, 1099], [1100, 1105], [1106, 1108], [1109, 1113], [1114, 1116], [1117, 1119], [1119, 1120], [1120, 1121], [1122, 1124], [1125, 1130], [1131, 1136], [1137, 1139], [1140, 1145], [1146, 1149], [1150, 1151], [1152, 1154], [1155, 1159], [1160, 1163], [1164, 1168], [1169, 1171], [1172, 1179], [1179, 1180]]}) 
answer: set([u'cold'])
candidate Sentence: (0.22407764196395874, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([u'survive'])
candidate Sentence: (0.060843661427497864, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.06029704213142395, {u'tokens': [u'They', u'spend', u'most', u'of', u'their', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otters', u'spend', u'much', u'of', u'their', u'time', u'on', u'land', u'.'], u'lemmas': [u'they', u'spend', u'most', u'of', u'they', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otter', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'.'], u'pos': [u'PRP', u'VBP', u'JJS', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[3963, 3967], [3968, 3973], [3974, 3978], [3979, 3981], [3982, 3987], [3988, 3992], [3993, 3995], [3996, 3999], [4000, 4005], [4005, 4006], [4007, 4014], [4015, 4020], [4021, 4027], [4028, 4033], [4034, 4038], [4039, 4041], [4042, 4047], [4048, 4052], [4053, 4055], [4056, 4060], [4060, 4061]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.058991231024265289, {u'tokens': [u'This', u'traps', u'a', u'layer', u'of', u'air', u',', u'and', u'keeps', u'them', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'lemmas': [u'this', u'trap', u'a', u'layer', u'of', u'air', u',', u'and', u'keep', u'they', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'pos': [u'DT', u'NNS', u'DT', u'NN', u'IN', u'NN', u',', u'CC', u'VBZ', u'PRP', u'JJ', u'CC', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[760, 764], [765, 770], [771, 772], [773, 778], [779, 781], [782, 785], [785, 786], [787, 790], [791, 796], [797, 801], [802, 805], [806, 809], [810, 814], [815, 820], [821, 826], [826, 827]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.045159779489040375, {u'tokens': [u'In', u'the', u'British', u'Isles', u'they', u'occurred', u'commonly', u'as', u'recently', u'as', u'the', u'1950s', u',', u'but', u'became', u'rare', u'in', u'many', u'areas', u'due', u'to', u'the', u'use', u'of', u'chlorinated', u'hydrocarbon', u'pesticides', u'and', u'as', u'a', u'result', u'of', u'habitat-loss', u'and', u'water', u'pollution', u'-LRB-', u'they', u'remained', u'relatively', u'common', u'in', u'parts', u'of', u'Scotland', u'and', u'Ireland', u'-RRB-', u'.'], u'lemmas': [u'in', u'the', u'british', u'Isles', u'they', u'occur', u'commonly', u'as', u'recently', u'as', u'the', u'1950s', u',', u'but', u'become', u'rare', u'in', u'many', u'area', u'due', u'to', u'the', u'use', u'of', u'chlorinate', u'hydrocarbon', u'pesticide', u'and', u'as', u'a', u'result', u'of', u'habitat-loss', u'and', u'water', u'pollution', u'-lrb-', u'they', u'remain', u'relatively', u'common', u'in', u'part', u'of', u'Scotland', u'and', u'Ireland', u'-rrb-', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNPS', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'CC', u'VBD', u'JJ', u'IN', u'JJ', u'NNS', u'JJ', u'TO', u'DT', u'NN', u'IN', u'VBN', u'NN', u'NNS', u'CC', u'IN', u'DT', u'NN', u'IN', u'NN', u'CC', u'NN', u'NN', u'-LRB-', u'PRP', u'VBD', u'RB', u'JJ', u'IN', u'NNS', u'IN', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4591, 4593], [4594, 4597], [4598, 4605], [4606, 4611], [4612, 4616], [4617, 4625], [4626, 4634], [4635, 4637], [4638, 4646], [4647, 4649], [4650, 4653], [4654, 4659], [4659, 4660], [4661, 4664], [4665, 4671], [4672, 4676], [4677, 4679], [4680, 4684], [4685, 4690], [4691, 4694], [4695, 4697], [4698, 4701], [4702, 4705], [4706, 4708], [4709, 4720], [4721, 4732], [4733, 4743], [4744, 4747], [4748, 4750], [4751, 4752], [4753, 4759], [4760, 4762], [4763, 4775], [4776, 4779], [4780, 4785], [4786, 4795], [4796, 4797], [4797, 4801], [4802, 4810], [4811, 4821], [4822, 4828], [4829, 4831], [4832, 4837], [4838, 4840], [4841, 4849], [4850, 4853], [4854, 4861], [4861, 4862], [4862, 4863]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.042374081909656525, {u'tokens': [u'Their', u'historic', u'range', u'included', u'shallow', u'waters', u'of', u'the', u'Bering', u'Strait', u'and', u'Kamchatka', u',', u'and', u'as', u'far', u'south', u'as', u'Japan', u'.'], u'lemmas': [u'they', u'historic', u'range', u'include', u'shallow', u'water', u'of', u'the', u'Bering', u'Strait', u'and', u'Kamchatka', u',', u'and', u'as', u'far', u'south', u'as', u'Japan', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u'VBD', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CC', u'IN', u'RB', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[2989, 2994], [2995, 3003], [3004, 3009], [3010, 3018], [3019, 3026], [3027, 3033], [3034, 3036], [3037, 3040], [3041, 3047], [3048, 3054], [3055, 3058], [3059, 3068], [3068, 3069], [3070, 3073], [3074, 3076], [3077, 3080], [3081, 3086], [3087, 3089], [3090, 3095], [3095, 3096]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.038224395364522934, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[1636, 1640], [1641, 1648], [1649, 1653], [1654, 1660], [1661, 1666], [1666, 1667], [1668, 1676], [1677, 1679], [1680, 1686], [1687, 1689], [1690, 1694], [1695, 1697], [1698, 1704], [1704, 1705], [1706, 1715], [1716, 1724], [1725, 1729], [1730, 1732], [1733, 1738], [1739, 1743], [1744, 1746], [1747, 1751], [1752, 1754], [1755, 1760], [1761, 1766], [1767, 1770], [1771, 1779], [1780, 1791], [1791, 1792]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.031349577009677887, {u'tokens': [u'This', u'and', u'cognate', u'words', u'in', u'other', u'Indo-European', u'languages', u'ultimately', u'stem', u'from', u'a', u'root', u'which', u'also', u'gave', u'rise', u'to', u'the', u'English', u'words', u'``', u'water', u"''", u',', u'``', u'wet', u"''", u'and', u'``', u'winter', u"''", u'.'], u'lemmas': [u'this', u'and', u'cognate', u'word', u'in', u'other', u'indo-european', u'language', u'ultimately', u'stem', u'from', u'a', u'root', u'which', u'also', u'give', u'rise', u'to', u'the', u'English', u'word', u'``', u'water', u"''", u',', u'``', u'wet', u"''", u'and', u'``', u'winter', u"''", u'.'], u'pos': [u'DT', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'IN', u'DT', u'NN', u'WDT', u'RB', u'VBD', u'NN', u'TO', u'DT', u'NNP', u'NNS', u'``', u'NN', u"''", u',', u'``', u'JJ', u"''", u'CC', u'``', u'NN', u"''", u'.'], u'char_offsets': [[5700, 5704], [5705, 5708], [5709, 5716], [5717, 5722], [5723, 5725], [5726, 5731], [5732, 5745], [5746, 5755], [5756, 5766], [5767, 5771], [5772, 5776], [5777, 5778], [5779, 5783], [5784, 5789], [5790, 5794], [5795, 5799], [5800, 5804], [5805, 5807], [5808, 5811], [5812, 5819], [5820, 5825], [5826, 5827], [5827, 5832], [5832, 5833], [5833, 5834], [5835, 5836], [5836, 5839], [5839, 5840], [5841, 5844], [5845, 5846], [5846, 5852], [5852, 5853], [5853, 5854]]}) 
answer: set([u'survive', u'cold'])
candidate Sentence: (0.022167710587382317, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'water', u'survive', u'cold'])

Can otters survive in cold water?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa95440>.answer
_____________________________ test_yesno[param254] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa955f0>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa955f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30650162696838379, {u'tokens': [u'Otters', u'are', u'amphibious', u'-LRB-', u'or', u'in', u'one', u'case', u'aquatic', u'-RRB-', u'carnivorous', u'mammals', u'.'], u'lemmas': [u'otter', u'be', u'amphibious', u'-lrb-', u'or', u'in', u'one', u'case', u'aquatic', u'-rrb-', u'carnivorous', u'mammal', u'.'], u'pos': [u'NNS', u'VBP', u'JJ', u'-LRB-', u'CC', u'IN', u'CD', u'NN', u'JJ', u'-RRB-', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 6], [7, 10], [11, 21], [22, 23], [23, 25], [26, 28], [29, 32], [33, 37], [38, 45], [45, 46], [47, 58], [59, 66], [66, 67]]}) 
answer: set([u'kind'])
candidate Sentence: (0.25741410255432129, {u'tokens': [u'River', u'otters', u'eat', u'a', u'variety', u'of', u'fish', u'and', u'shellfish', u',', u'as', u'well', u'as', u'small', u'land', u'mammals', u'and', u'birds', u'.'], u'lemmas': [u'river', u'otter', u'eat', u'a', u'variety', u'of', u'fish', u'and', u'shellfish', u',', u'as', u'well', u'as', u'small', u'land', u'mammal', u'and', u'bird', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'NN', u'CC', u'NN', u',', u'RB', u'RB', u'IN', u'JJ', u'NN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[2569, 2574], [2575, 2581], [2582, 2585], [2586, 2587], [2588, 2595], [2596, 2598], [2599, 2603], [2604, 2607], [2608, 2617], [2617, 2618], [2619, 2621], [2622, 2626], [2627, 2629], [2630, 2635], [2636, 2640], [2641, 2648], [2649, 2652], [2653, 2658], [2658, 2659]]}) 
answer: set([u'kind'])
candidate Sentence: (0.21472088992595673, {u'tokens': [u'Some', u'are', u'expert', u'at', u'opening', u'shellfish', u',', u'and', u'others', u'will', u'take', u'any', u'available', u'small', u'mammals', u'or', u'birds', u'.'], u'lemmas': [u'some', u'be', u'expert', u'at', u'open', u'shellfish', u',', u'and', u'other', u'will', u'take', u'any', u'available', u'small', u'mammal', u'or', u'bird', u'.'], u'pos': [u'DT', u'VBP', u'JJ', u'IN', u'VBG', u'NN', u',', u'CC', u'NNS', u'MD', u'VB', u'DT', u'JJ', u'JJ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[1366, 1370], [1371, 1374], [1375, 1381], [1382, 1384], [1385, 1392], [1393, 1402], [1402, 1403], [1404, 1407], [1408, 1414], [1415, 1419], [1420, 1424], [1425, 1428], [1429, 1438], [1439, 1444], [1445, 1452], [1453, 1455], [1456, 1461], [1461, 1462]]}) 
answer: set([u'kind'])
candidate Sentence: (0.20421493053436279, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'kind'])
candidate Sentence: (0.10931961238384247, {u'tokens': [u'An', u'otter', u"'s", u'den', u'is', u'called', u'a', u'holt', u'.'], u'lemmas': [u'a', u'otter', u"'s", u'den', u'be', u'call', u'a', u'holt', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NN', u'VBZ', u'VBN', u'DT', u'NN', u'.'], u'char_offsets': [[277, 279], [280, 285], [285, 287], [288, 291], [292, 294], [295, 301], [302, 303], [304, 308], [308, 309]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.10660403966903687, {u'tokens': [u'Male', u'otters', u'are', u'dog-otters', u',', u'females', u'are', u'bitches', u'and', u'babies', u'are', u'cubs', u'or', u'pups', u'.'], u'lemmas': [u'male', u'otter', u'be', u'dog-otter', u',', u'female', u'be', u'bitch', u'and', u'baby', u'be', u'cub', u'or', u'pup', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'NNS', u',', u'NNS', u'VBP', u'NNS', u'CC', u'NNS', u'VBP', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[311, 315], [316, 322], [323, 326], [327, 337], [337, 338], [339, 346], [347, 350], [351, 358], [359, 362], [363, 369], [370, 373], [374, 378], [379, 381], [382, 386], [386, 387]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.10353220999240875, {u'tokens': [u'The', u'collective', u'noun', u'romp', u'is', u'sometimes', u'used', u'for', u'a', u'group', u'of', u'otters', u',', u'being', u'descriptive', u'of', u'their', u'often', u'playful', u'nature', u'.'], u'lemmas': [u'the', u'collective', u'noun', u'romp', u'be', u'sometimes', u'use', u'for', u'a', u'group', u'of', u'otter', u',', u'be', u'descriptive', u'of', u'they', u'often', u'playful', u'nature', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VB', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'VBG', u'JJ', u'IN', u'PRP$', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[389, 392], [393, 403], [404, 408], [409, 413], [414, 416], [417, 426], [427, 431], [432, 435], [436, 437], [438, 443], [444, 446], [447, 453], [453, 454], [455, 460], [461, 472], [473, 475], [476, 481], [482, 487], [488, 495], [496, 502], [502, 503]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.068465471267700195, {u'tokens': [u'This', u'sub-species', u'-LRB-', u'Lutrogale', u'perspicillata', u'maxwelli', u'-RRB-', u'of', u'the', u'smooth-coated', u'otter', u'was', u'the', u'subject', u'of', u'the', u'book', u'Ring', u'of', u'Bright', u'Water', u'by', u'the', u'British', u'naturalist', u'Gavin', u'Maxwell', u',', u'and', u'is', u'named', u'after', u'him', u'.'], u'lemmas': [u'this', u'sub-species', u'-lrb-', u'lutrogale', u'perspicilla', u'maxwellus', u'-rrb-', u'of', u'the', u'smooth-coated', u'otter', u'be', u'the', u'subject', u'of', u'the', u'book', u'ring', u'of', u'Bright', u'Water', u'by', u'the', u'british', u'naturalist', u'Gavin', u'Maxwell', u',', u'and', u'be', u'name', u'after', u'he', u'.'], u'pos': [u'DT', u'NNS', u'-LRB-', u'NN', u'NN', u'NNS', u'-RRB-', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'VBN', u'IN', u'PRP', u'.'], u'char_offsets': [[4062, 4066], [4067, 4078], [4079, 4080], [4080, 4089], [4090, 4103], [4104, 4112], [4112, 4113], [4114, 4116], [4117, 4120], [4121, 4134], [4135, 4140], [4141, 4144], [4145, 4148], [4149, 4156], [4157, 4159], [4160, 4163], [4164, 4168], [4169, 4173], [4174, 4176], [4177, 4183], [4184, 4189], [4190, 4192], [4193, 4196], [4197, 4204], [4205, 4215], [4216, 4221], [4222, 4229], [4229, 4230], [4231, 4234], [4235, 4237], [4238, 4243], [4244, 4249], [4250, 4253], [4253, 4254]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.061984635889530182, {u'tokens': [u'They', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'is', u'protected', u'by', u'their', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'lemmas': [u'they', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'be', u'protect', u'by', u'they', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'pos': [u'PRP', u'VBP', u'DT', u'RB', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[669, 673], [674, 678], [679, 680], [681, 685], [686, 690], [691, 699], [700, 705], [706, 708], [709, 718], [719, 721], [722, 727], [728, 733], [734, 739], [740, 742], [743, 747], [748, 753], [754, 758], [758, 759]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.059646066278219223, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[1947, 1956], [1957, 1964], [1965, 1969], [1970, 1972], [1973, 1978], [1979, 1985], [1986, 1995], [1995, 1996], [1997, 2001], [2002, 2006], [2007, 2012], [2013, 2020], [2021, 2029], [2029, 2030], [2031, 2036], [2037, 2043], [2044, 2048], [2049, 2051], [2052, 2058], [2061, 2063], [2064, 2065], [2066, 2069], [2070, 2077], [2078, 2083], [2084, 2090], [2091, 2094], [2095, 2097], [2098, 2104], [2105, 2110], [2110, 2111]]}) 
answer: set([u'mammal', u'kind'])

Is otter a kind of mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa955f0>.answer
_____________________________ test_yesno[param255] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95680>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa95680>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30650162696838379, {u'tokens': [u'Otters', u'are', u'amphibious', u'-LRB-', u'or', u'in', u'one', u'case', u'aquatic', u'-RRB-', u'carnivorous', u'mammals', u'.'], u'lemmas': [u'otter', u'be', u'amphibious', u'-lrb-', u'or', u'in', u'one', u'case', u'aquatic', u'-rrb-', u'carnivorous', u'mammal', u'.'], u'pos': [u'NNS', u'VBP', u'JJ', u'-LRB-', u'CC', u'IN', u'CD', u'NN', u'JJ', u'-RRB-', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 6], [7, 10], [11, 21], [22, 23], [23, 25], [26, 28], [29, 32], [33, 37], [38, 45], [45, 46], [47, 58], [59, 66], [66, 67]]}) 
answer: set([u'kind'])
candidate Sentence: (0.25741410255432129, {u'tokens': [u'River', u'otters', u'eat', u'a', u'variety', u'of', u'fish', u'and', u'shellfish', u',', u'as', u'well', u'as', u'small', u'land', u'mammals', u'and', u'birds', u'.'], u'lemmas': [u'river', u'otter', u'eat', u'a', u'variety', u'of', u'fish', u'and', u'shellfish', u',', u'as', u'well', u'as', u'small', u'land', u'mammal', u'and', u'bird', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'NN', u'CC', u'NN', u',', u'RB', u'RB', u'IN', u'JJ', u'NN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[2569, 2574], [2575, 2581], [2582, 2585], [2586, 2587], [2588, 2595], [2596, 2598], [2599, 2603], [2604, 2607], [2608, 2617], [2617, 2618], [2619, 2621], [2622, 2626], [2627, 2629], [2630, 2635], [2636, 2640], [2641, 2648], [2649, 2652], [2653, 2658], [2658, 2659]]}) 
answer: set([u'kind'])
candidate Sentence: (0.21472088992595673, {u'tokens': [u'Some', u'are', u'expert', u'at', u'opening', u'shellfish', u',', u'and', u'others', u'will', u'take', u'any', u'available', u'small', u'mammals', u'or', u'birds', u'.'], u'lemmas': [u'some', u'be', u'expert', u'at', u'open', u'shellfish', u',', u'and', u'other', u'will', u'take', u'any', u'available', u'small', u'mammal', u'or', u'bird', u'.'], u'pos': [u'DT', u'VBP', u'JJ', u'IN', u'VBG', u'NN', u',', u'CC', u'NNS', u'MD', u'VB', u'DT', u'JJ', u'JJ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[1366, 1370], [1371, 1374], [1375, 1381], [1382, 1384], [1385, 1392], [1393, 1402], [1402, 1403], [1404, 1407], [1408, 1414], [1415, 1419], [1420, 1424], [1425, 1428], [1429, 1438], [1439, 1444], [1445, 1452], [1453, 1455], [1456, 1461], [1461, 1462]]}) 
answer: set([u'kind'])
candidate Sentence: (0.20421493053436279, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'kind'])
candidate Sentence: (0.10931961238384247, {u'tokens': [u'An', u'otter', u"'s", u'den', u'is', u'called', u'a', u'holt', u'.'], u'lemmas': [u'a', u'otter', u"'s", u'den', u'be', u'call', u'a', u'holt', u'.'], u'pos': [u'DT', u'NN', u'POS', u'NN', u'VBZ', u'VBN', u'DT', u'NN', u'.'], u'char_offsets': [[277, 279], [280, 285], [285, 287], [288, 291], [292, 294], [295, 301], [302, 303], [304, 308], [308, 309]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.10660403966903687, {u'tokens': [u'Male', u'otters', u'are', u'dog-otters', u',', u'females', u'are', u'bitches', u'and', u'babies', u'are', u'cubs', u'or', u'pups', u'.'], u'lemmas': [u'male', u'otter', u'be', u'dog-otter', u',', u'female', u'be', u'bitch', u'and', u'baby', u'be', u'cub', u'or', u'pup', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'NNS', u',', u'NNS', u'VBP', u'NNS', u'CC', u'NNS', u'VBP', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[311, 315], [316, 322], [323, 326], [327, 337], [337, 338], [339, 346], [347, 350], [351, 358], [359, 362], [363, 369], [370, 373], [374, 378], [379, 381], [382, 386], [386, 387]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.10353220999240875, {u'tokens': [u'The', u'collective', u'noun', u'romp', u'is', u'sometimes', u'used', u'for', u'a', u'group', u'of', u'otters', u',', u'being', u'descriptive', u'of', u'their', u'often', u'playful', u'nature', u'.'], u'lemmas': [u'the', u'collective', u'noun', u'romp', u'be', u'sometimes', u'use', u'for', u'a', u'group', u'of', u'otter', u',', u'be', u'descriptive', u'of', u'they', u'often', u'playful', u'nature', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VB', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'VBG', u'JJ', u'IN', u'PRP$', u'RB', u'JJ', u'NN', u'.'], u'char_offsets': [[389, 392], [393, 403], [404, 408], [409, 413], [414, 416], [417, 426], [427, 431], [432, 435], [436, 437], [438, 443], [444, 446], [447, 453], [453, 454], [455, 460], [461, 472], [473, 475], [476, 481], [482, 487], [488, 495], [496, 502], [502, 503]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.068465471267700195, {u'tokens': [u'This', u'sub-species', u'-LRB-', u'Lutrogale', u'perspicillata', u'maxwelli', u'-RRB-', u'of', u'the', u'smooth-coated', u'otter', u'was', u'the', u'subject', u'of', u'the', u'book', u'Ring', u'of', u'Bright', u'Water', u'by', u'the', u'British', u'naturalist', u'Gavin', u'Maxwell', u',', u'and', u'is', u'named', u'after', u'him', u'.'], u'lemmas': [u'this', u'sub-species', u'-lrb-', u'lutrogale', u'perspicilla', u'maxwellus', u'-rrb-', u'of', u'the', u'smooth-coated', u'otter', u'be', u'the', u'subject', u'of', u'the', u'book', u'ring', u'of', u'Bright', u'Water', u'by', u'the', u'british', u'naturalist', u'Gavin', u'Maxwell', u',', u'and', u'be', u'name', u'after', u'he', u'.'], u'pos': [u'DT', u'NNS', u'-LRB-', u'NN', u'NN', u'NNS', u'-RRB-', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'VBN', u'IN', u'PRP', u'.'], u'char_offsets': [[4062, 4066], [4067, 4078], [4079, 4080], [4080, 4089], [4090, 4103], [4104, 4112], [4112, 4113], [4114, 4116], [4117, 4120], [4121, 4134], [4135, 4140], [4141, 4144], [4145, 4148], [4149, 4156], [4157, 4159], [4160, 4163], [4164, 4168], [4169, 4173], [4174, 4176], [4177, 4183], [4184, 4189], [4190, 4192], [4193, 4196], [4197, 4204], [4205, 4215], [4216, 4221], [4222, 4229], [4229, 4230], [4231, 4234], [4235, 4237], [4238, 4243], [4244, 4249], [4250, 4253], [4253, 4254]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.061984635889530182, {u'tokens': [u'They', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'is', u'protected', u'by', u'their', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'lemmas': [u'they', u'have', u'a', u'very', u'soft', u'underfur', u'which', u'be', u'protect', u'by', u'they', u'outer', u'layer', u'of', u'long', u'guard', u'hair', u'.'], u'pos': [u'PRP', u'VBP', u'DT', u'RB', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[669, 673], [674, 678], [679, 680], [681, 685], [686, 690], [691, 699], [700, 705], [706, 708], [709, 718], [719, 721], [722, 727], [728, 733], [734, 739], [740, 742], [743, 747], [748, 753], [754, 758], [758, 759]]}) 
answer: set([u'mammal', u'kind'])
candidate Sentence: (0.059646066278219223, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[1947, 1956], [1957, 1964], [1965, 1969], [1970, 1972], [1973, 1978], [1979, 1985], [1986, 1995], [1995, 1996], [1997, 2001], [2002, 2006], [2007, 2012], [2013, 2020], [2021, 2029], [2029, 2030], [2031, 2036], [2037, 2043], [2044, 2048], [2049, 2051], [2052, 2058], [2061, 2063], [2064, 2065], [2066, 2069], [2070, 2077], [2078, 2083], [2084, 2090], [2091, 2094], [2095, 2097], [2098, 2104], [2105, 2110], [2110, 2111]]}) 
answer: set([u'mammal', u'kind'])

Is otter a kind of mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa95680>.answer
_____________________________ test_yesno[param258] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95830>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95830>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30555814504623413, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([])
candidate Sentence: (0.2305416464805603, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'water'])
candidate Sentence: (0.18789099156856537, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'water', u'live'])
candidate Sentence: (0.1381620317697525, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[1636, 1640], [1641, 1648], [1649, 1653], [1654, 1660], [1661, 1666], [1666, 1667], [1668, 1676], [1677, 1679], [1680, 1686], [1687, 1689], [1690, 1694], [1695, 1697], [1698, 1704], [1704, 1705], [1706, 1715], [1716, 1724], [1725, 1729], [1730, 1732], [1733, 1738], [1739, 1743], [1744, 1746], [1747, 1751], [1752, 1754], [1755, 1760], [1761, 1766], [1767, 1770], [1771, 1779], [1780, 1791], [1791, 1792]]}) 
answer: set([])
candidate Sentence: (0.11575070023536682, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2876, 2877], [2878, 2881], [2882, 2887], [2888, 2890], [2891, 2896], [2897, 2900], [2900, 2901], [2902, 2912], [2913, 2916], [2917, 2923], [2924, 2925], [2925, 2932], [2933, 2939], [2939, 2940], [2941, 2945], [2946, 2951], [2952, 2955], [2956, 2963], [2964, 2969], [2970, 2972], [2973, 2978], [2979, 2986], [2986, 2987]]}) 
answer: set([u'water'])
candidate Sentence: (0.10332761704921722, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[1947, 1956], [1957, 1964], [1965, 1969], [1970, 1972], [1973, 1978], [1979, 1985], [1986, 1995], [1995, 1996], [1997, 2001], [2002, 2006], [2007, 2012], [2013, 2020], [2021, 2029], [2029, 2030], [2031, 2036], [2037, 2043], [2044, 2048], [2049, 2051], [2052, 2058], [2061, 2063], [2064, 2065], [2066, 2069], [2070, 2077], [2078, 2083], [2084, 2090], [2091, 2094], [2095, 2097], [2098, 2104], [2105, 2110], [2110, 2111]]}) 
answer: set([u'water'])
candidate Sentence: (0.08007475733757019, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'live'])
candidate Sentence: (0.079355359077453613, {u'tokens': [u'They', u'spend', u'most', u'of', u'their', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otters', u'spend', u'much', u'of', u'their', u'time', u'on', u'land', u'.'], u'lemmas': [u'they', u'spend', u'most', u'of', u'they', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otter', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'.'], u'pos': [u'PRP', u'VBP', u'JJS', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[3963, 3967], [3968, 3973], [3974, 3978], [3979, 3981], [3982, 3987], [3988, 3992], [3993, 3995], [3996, 3999], [4000, 4005], [4005, 4006], [4007, 4014], [4015, 4020], [4021, 4027], [4028, 4033], [4034, 4038], [4039, 4041], [4042, 4047], [4048, 4052], [4053, 4055], [4056, 4060], [4060, 4061]]}) 
answer: set([u'live'])
candidate Sentence: (0.077636823058128357, {u'tokens': [u'This', u'traps', u'a', u'layer', u'of', u'air', u',', u'and', u'keeps', u'them', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'lemmas': [u'this', u'trap', u'a', u'layer', u'of', u'air', u',', u'and', u'keep', u'they', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'pos': [u'DT', u'NNS', u'DT', u'NN', u'IN', u'NN', u',', u'CC', u'VBZ', u'PRP', u'JJ', u'CC', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[760, 764], [765, 770], [771, 772], [773, 778], [779, 781], [782, 785], [785, 786], [787, 790], [791, 796], [797, 801], [802, 805], [806, 809], [810, 814], [815, 820], [821, 826], [826, 827]]}) 
answer: set([u'live'])
candidate Sentence: (0.066725172102451324, {u'tokens': [u'In', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'C', u'an', u'otter', u'needs', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'lemmas': [u'in', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'c', u'a', u'otter', u'need', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'pos': [u'IN', u'NN', u'IN', u'JJ', u'IN', u'CD', u'CD', u'NN', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'CD', u'NN', u'IN', u'NN', u'IN', u'NN', u'TO', u'VB', u'.'], u'char_offsets': [[1097, 1099], [1100, 1105], [1106, 1108], [1109, 1113], [1114, 1116], [1117, 1119], [1119, 1120], [1120, 1121], [1122, 1124], [1125, 1130], [1131, 1136], [1137, 1139], [1140, 1145], [1146, 1149], [1150, 1151], [1152, 1154], [1155, 1159], [1160, 1163], [1164, 1168], [1169, 1171], [1172, 1179], [1179, 1180]]}) 
answer: set([u'live'])

Do otters live in water?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95830>.answer
_____________________________ test_yesno[param259] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa958c0>, (<src.tfidf.TF_IDF object at 0x1084de690>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa958c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30555814504623413, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[828, 834], [835, 837], [838, 841], [842, 848], [849, 851], [852, 857], [858, 869], [870, 873], [874, 879], [880, 883], [884, 892], [893, 895], [896, 899], [900, 904], [905, 911], [912, 917], [918, 922], [923, 927], [927, 928], [929, 933], [934, 938], [939, 943], [944, 948], [949, 953], [954, 963], [964, 969], [969, 970]]}) 
answer: set([])
candidate Sentence: (0.2305416464805603, {u'tokens': [u'The', u'sea', u'otter', u'lives', u'actually', u'in', u'the', u'sea', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'live', u'actually', u'in', u'the', u'sea', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1794, 1797], [1798, 1801], [1802, 1807], [1808, 1813], [1814, 1822], [1823, 1825], [1826, 1829], [1830, 1833], [1833, 1834]]}) 
answer: set([u'water'])
candidate Sentence: (0.18789099156856537, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'such', u'as', u'-LRB-', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'such', u'as', u'-lrb-', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'JJ', u'IN', u'-LRB-', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[3703, 3709], [3710, 3714], [3715, 3721], [3722, 3729], [3730, 3734], [3735, 3737], [3738, 3739], [3739, 3744], [3745, 3747], [3748, 3754], [3754, 3755], [3755, 3756], [3757, 3760], [3761, 3767], [3768, 3770], [3771, 3774], [3775, 3779], [3780, 3781], [3782, 3787], [3788, 3790], [3791, 3801], [3802, 3809], [3809, 3810]]}) 
answer: set([u'water', u'live'])
candidate Sentence: (0.1381620317697525, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[1636, 1640], [1641, 1648], [1649, 1653], [1654, 1660], [1661, 1666], [1666, 1667], [1668, 1676], [1677, 1679], [1680, 1686], [1687, 1689], [1690, 1694], [1695, 1697], [1698, 1704], [1704, 1705], [1706, 1715], [1716, 1724], [1725, 1729], [1730, 1732], [1733, 1738], [1739, 1743], [1744, 1746], [1747, 1751], [1752, 1754], [1755, 1760], [1761, 1766], [1767, 1770], [1771, 1779], [1780, 1791], [1791, 1792]]}) 
answer: set([])
candidate Sentence: (0.11575070023536682, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2876, 2877], [2878, 2881], [2882, 2887], [2888, 2890], [2891, 2896], [2897, 2900], [2900, 2901], [2902, 2912], [2913, 2916], [2917, 2923], [2924, 2925], [2925, 2932], [2933, 2939], [2939, 2940], [2941, 2945], [2946, 2951], [2952, 2955], [2956, 2963], [2964, 2969], [2970, 2972], [2973, 2978], [2979, 2986], [2986, 2987]]}) 
answer: set([u'water'])
candidate Sentence: (0.10332761704921722, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[1947, 1956], [1957, 1964], [1965, 1969], [1970, 1972], [1973, 1978], [1979, 1985], [1986, 1995], [1995, 1996], [1997, 2001], [2002, 2006], [2007, 2012], [2013, 2020], [2021, 2029], [2029, 2030], [2031, 2036], [2037, 2043], [2044, 2048], [2049, 2051], [2052, 2058], [2061, 2063], [2064, 2065], [2066, 2069], [2070, 2077], [2078, 2083], [2084, 2090], [2091, 2094], [2095, 2097], [2098, 2104], [2105, 2110], [2110, 2111]]}) 
answer: set([u'water'])
candidate Sentence: (0.08007475733757019, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1534, 1540], [1541, 1544], [1545, 1549], [1550, 1556], [1556, 1557], [1558, 1565], [1566, 1570], [1571, 1573], [1574, 1577], [1578, 1583], [1584, 1586], [1587, 1596], [1597, 1600], [1601, 1605], [1606, 1608], [1609, 1615], [1615, 1616], [1617, 1622], [1623, 1625], [1626, 1629], [1630, 1633], [1633, 1634]]}) 
answer: set([u'live'])
candidate Sentence: (0.079355359077453613, {u'tokens': [u'They', u'spend', u'most', u'of', u'their', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otters', u'spend', u'much', u'of', u'their', u'time', u'on', u'land', u'.'], u'lemmas': [u'they', u'spend', u'most', u'of', u'they', u'time', u'in', u'the', u'water', u',', u'whereas', u'other', u'otter', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'.'], u'pos': [u'PRP', u'VBP', u'JJS', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[3963, 3967], [3968, 3973], [3974, 3978], [3979, 3981], [3982, 3987], [3988, 3992], [3993, 3995], [3996, 3999], [4000, 4005], [4005, 4006], [4007, 4014], [4015, 4020], [4021, 4027], [4028, 4033], [4034, 4038], [4039, 4041], [4042, 4047], [4048, 4052], [4053, 4055], [4056, 4060], [4060, 4061]]}) 
answer: set([u'live'])
candidate Sentence: (0.077636823058128357, {u'tokens': [u'This', u'traps', u'a', u'layer', u'of', u'air', u',', u'and', u'keeps', u'them', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'lemmas': [u'this', u'trap', u'a', u'layer', u'of', u'air', u',', u'and', u'keep', u'they', u'dry', u'and', u'warm', u'under', u'water', u'.'], u'pos': [u'DT', u'NNS', u'DT', u'NN', u'IN', u'NN', u',', u'CC', u'VBZ', u'PRP', u'JJ', u'CC', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[760, 764], [765, 770], [771, 772], [773, 778], [779, 781], [782, 785], [785, 786], [787, 790], [791, 796], [797, 801], [802, 805], [806, 809], [810, 814], [815, 820], [821, 826], [826, 827]]}) 
answer: set([u'live'])
candidate Sentence: (0.066725172102451324, {u'tokens': [u'In', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'C', u'an', u'otter', u'needs', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'lemmas': [u'in', u'water', u'as', u'warm', u'as', u'10', u'\xb0', u'c', u'a', u'otter', u'need', u'to', u'catch', u'100', u'g', u'of', u'fish', u'per', u'hour', u'to', u'survive', u'.'], u'pos': [u'IN', u'NN', u'IN', u'JJ', u'IN', u'CD', u'CD', u'NN', u'DT', u'NN', u'VBZ', u'TO', u'VB', u'CD', u'NN', u'IN', u'NN', u'IN', u'NN', u'TO', u'VB', u'.'], u'char_offsets': [[1097, 1099], [1100, 1105], [1106, 1108], [1109, 1113], [1114, 1116], [1117, 1119], [1119, 1120], [1120, 1121], [1122, 1124], [1125, 1130], [1131, 1136], [1137, 1139], [1140, 1145], [1146, 1149], [1150, 1151], [1152, 1154], [1155, 1159], [1160, 1163], [1164, 1168], [1169, 1171], [1172, 1179], [1179, 1180]]}) 
answer: set([u'live'])

Do otters live in water?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa958c0>.answer
_____________________________ test_yesno[param271] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa95f80>, (<src.tfidf.TF_IDF object at 0x10a153190>, set(['penguin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95f80>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25079154968261719, {u'tokens': [u'The', u'air', u'layer', u'also', u'helps', u'insulate', u'the', u'birds', u'in', u'cold', u'waters', u'.'], u'lemmas': [u'the', u'air', u'layer', u'also', u'help', u'insulate', u'the', u'bird', u'in', u'cold', u'water', u'.'], u'pos': [u'DT', u'NN', u'NN', u'RB', u'VBZ', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3115, 3118], [3119, 3122], [3123, 3128], [3129, 3133], [3134, 3139], [3140, 3148], [3149, 3152], [3153, 3158], [3159, 3161], [3162, 3166], [3167, 3173], [3173, 3174]]}) 
answer: set([])
candidate Sentence: (0.19034008681774139, {u'tokens': [u'Penguins', u'-LRB-', u'order', u'Sphenisciformes', u',', u'family', u'Spheniscidae', u'-RRB-', u'are', u'a', u'group', u'of', u'aquatic', u',', u'flightless', u'birds', u'living', u'almost', u'exclusively', u'in', u'the', u'Southern', u'Hemisphere', u'.'], u'lemmas': [u'penguin', u'-lrb-', u'order', u'sphenisciforme', u',', u'family', u'spheniscida', u'-rrb-', u'be', u'a', u'group', u'of', u'aquatic', u',', u'flightless', u'bird', u'live', u'almost', u'exclusively', u'in', u'the', u'Southern', u'Hemisphere', u'.'], u'pos': [u'NNS', u'-LRB-', u'NN', u'NNS', u',', u'NN', u'NN', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'JJ', u',', u'JJ', u'NNS', u'VBG', u'RB', u'RB', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[54, 62], [63, 64], [64, 69], [70, 85], [85, 86], [87, 93], [94, 106], [106, 107], [108, 111], [112, 113], [114, 119], [120, 122], [123, 130], [130, 131], [132, 142], [143, 148], [149, 155], [156, 162], [163, 174], [175, 177], [178, 181], [182, 190], [191, 201], [201, 202]]}) 
answer: set([])
candidate Sentence: (0.17065736651420593, {u'tokens': [u'While', u'they', u'were', u'not', u'as', u'well', u'adapted', u'to', u'aquatic', u'life', u'as', u'modern', u'penguins', u',', u'Waimanu', u'were', u'generally', u'loon-like', u'birds', u'but', u'already', u'flightless', u',', u'with', u'short', u'wings', u'adapted', u'for', u'deep', u'diving', u'.'], u'lemmas': [u'while', u'they', u'be', u'not', u'as', u'well', u'adapt', u'to', u'aquatic', u'life', u'as', u'modern', u'penguin', u',', u'Waimanu', u'be', u'generally', u'loon-like', u'bird', u'but', u'already', u'flightless', u',', u'with', u'short', u'wing', u'adapt', u'for', u'deep', u'diving', u'.'], u'pos': [u'IN', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'VBN', u'TO', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'RB', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[9863, 9868], [9869, 9873], [9874, 9878], [9879, 9882], [9883, 9885], [9886, 9890], [9891, 9898], [9899, 9901], [9902, 9909], [9910, 9914], [9915, 9917], [9918, 9924], [9925, 9933], [9933, 9934], [9935, 9942], [9943, 9947], [9948, 9957], [9958, 9967], [9968, 9973], [9974, 9977], [9978, 9985], [9986, 9996], [9996, 9997], [9998, 10002], [10003, 10008], [10009, 10014], [10015, 10022], [10023, 10026], [10027, 10031], [10032, 10038], [10038, 10039]]}) 
answer: set([])
candidate Sentence: (0.15422138571739197, {u'tokens': [u'This', u'group', u'contains', u'such', u'birds', u'as', u'storks', u',', u'rails', u',', u'and', u'the', u'seabirds', u',', u'with', u'the', u'possible', u'exception', u'of', u'the', u'Charadriiformes', u'-LRB-', u'Fain', u'&', u'Houde', u'2004', u'-RRB-', u'.'], u'lemmas': [u'this', u'group', u'contain', u'such', u'bird', u'as', u'stork', u',', u'rail', u',', u'and', u'the', u'seabird', u',', u'with', u'the', u'possible', u'exception', u'of', u'the', u'charadriiforme', u'-lrb-', u'Fain', u'&', u'Houde', u'2004', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'JJ', u'NNS', u'IN', u'NNS', u',', u'NNS', u',', u'CC', u'DT', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNS', u'-LRB-', u'NNP', u'CC', u'NNP', u'CD', u'-RRB-', u'.'], u'char_offsets': [[18311, 18315], [18316, 18321], [18322, 18330], [18331, 18335], [18336, 18341], [18342, 18344], [18345, 18351], [18351, 18352], [18353, 18358], [18358, 18359], [18360, 18363], [18364, 18367], [18368, 18376], [18376, 18377], [18378, 18382], [18383, 18386], [18387, 18395], [18396, 18405], [18406, 18408], [18409, 18412], [18413, 18428], [18429, 18430], [18430, 18434], [18435, 18436], [18437, 18442], [18443, 18447], [18447, 18448], [18448, 18449]]}) 
answer: set([])
candidate Sentence: (0.15388695895671844, {u'tokens': [u'They', u'swam', u'on', u'the', u'surface', u'using', u'mainly', u'their', u'feet', u',', u'but', u'the', u'wings', u'were', u'-', u'as', u'opposed', u'to', u'most', u'other', u'diving', u'birds', u',', u'living', u'and', u'extinct', u'-', u'already', u'adapting', u'to', u'underwater', u'locomotion', u'.'], u'lemmas': [u'they', u'swim', u'on', u'the', u'surface', u'use', u'mainly', u'they', u'foot', u',', u'but', u'the', u'wing', u'be', u'-', u'as', u'oppose', u'to', u'most', u'other', u'diving', u'bird', u',', u'live', u'and', u'extinct', u'-', u'already', u'adapt', u'to', u'underwater', u'locomotion', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'VBG', u'RB', u'PRP$', u'NNS', u',', u'CC', u'DT', u'NNS', u'VBD', u':', u'IN', u'VBN', u'TO', u'RBS', u'JJ', u'JJ', u'NNS', u',', u'VBG', u'CC', u'JJ', u':', u'RB', u'VBG', u'TO', u'JJ', u'NN', u'.'], u'char_offsets': [[10040, 10044], [10045, 10049], [10050, 10052], [10053, 10056], [10057, 10064], [10065, 10070], [10071, 10077], [10078, 10083], [10084, 10088], [10088, 10089], [10090, 10093], [10094, 10097], [10098, 10103], [10104, 10108], [10109, 10110], [10111, 10113], [10114, 10121], [10122, 10124], [10125, 10129], [10130, 10135], [10136, 10142], [10143, 10148], [10148, 10149], [10150, 10156], [10157, 10160], [10161, 10168], [10169, 10170], [10171, 10178], [10179, 10187], [10188, 10190], [10191, 10201], [10202, 10212], [10212, 10213]]}) 
answer: set([])
candidate Sentence: (0.14678345620632172, {u'tokens': [u'Tux', u'the', u'Linux', u'kernel', u'mascot', u'Penguins', u'are', u'popular', u'around', u'the', u'world', u',', u'primarily', u'for', u'their', u'unusually', u'upright', u',', u'waddling', u'pace', u'and', u'-LRB-', u'compared', u'to', u'other', u'birds', u'-RRB-', u'lack', u'of', u'fear', u'of', u'humans', u'.'], u'lemmas': [u'tux', u'the', u'Linux', u'kernel', u'mascot', u'penguin', u'be', u'popular', u'around', u'the', u'world', u',', u'primarily', u'for', u'they', u'unusually', u'upright', u',', u'waddle', u'pace', u'and', u'-lrb-', u'compare', u'to', u'other', u'bird', u'-rrb-', u'lack', u'of', u'fear', u'of', u'human', u'.'], u'pos': [u'NN', u'DT', u'NNP', u'NN', u'NN', u'NNS', u'VBP', u'JJ', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'PRP$', u'RB', u'JJ', u',', u'VBG', u'NN', u'CC', u'-LRB-', u'VBN', u'TO', u'JJ', u'NNS', u'-RRB-', u'NN', u'IN', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[20467, 20470], [20471, 20474], [20475, 20480], [20481, 20487], [20488, 20494], [20495, 20503], [20504, 20507], [20508, 20515], [20516, 20522], [20523, 20526], [20527, 20532], [20532, 20533], [20534, 20543], [20544, 20547], [20548, 20553], [20554, 20563], [20564, 20571], [20571, 20572], [20573, 20581], [20582, 20586], [20587, 20590], [20591, 20592], [20592, 20600], [20601, 20603], [20604, 20609], [20610, 20615], [20615, 20616], [20617, 20621], [20622, 20624], [20625, 20629], [20630, 20632], [20633, 20639], [20639, 20640]]}) 
answer: set([])
candidate Sentence: (0.13644270598888397, {u'tokens': [u'Penguins', u'have', u'an', u'average', u'sense', u'of', u'hearing', u'for', u'birds', u'-LRB-', u'Wever', u'et', u'al', u'1969', u'-RRB-', u';', u'this', u'is', u'used', u'by', u'parents', u'and', u'chicks', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colonies', u'-LRB-', u'Jouventin', u'et', u'al', u'1999', u'-RRB-', u'.'], u'lemmas': [u'penguin', u'have', u'a', u'average', u'sense', u'of', u'hearing', u'for', u'bird', u'-lrb-', u'Wever', u'et', u'al', u'1969', u'-rrb-', u';', u'this', u'be', u'use', u'by', u'parent', u'and', u'chick', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colony', u'-lrb-', u'Jouventin', u'et', u'al', u'1999', u'-rrb-', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u':', u'DT', u'VBZ', u'VBN', u'IN', u'NNS', u'CC', u'NNS', u'TO', u'VB', u'CD', u'DT', u'IN', u'JJ', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[4361, 4369], [4370, 4374], [4375, 4377], [4378, 4385], [4386, 4391], [4392, 4394], [4395, 4402], [4403, 4406], [4407, 4412], [4413, 4414], [4414, 4419], [4420, 4422], [4423, 4425], [4426, 4430], [4430, 4431], [4431, 4432], [4433, 4437], [4438, 4440], [4441, 4445], [4446, 4448], [4449, 4456], [4457, 4460], [4461, 4467], [4468, 4470], [4471, 4477], [4478, 4481], [4482, 4489], [4490, 4492], [4493, 4500], [4501, 4509], [4510, 4511], [4511, 4520], [4521, 4523], [4524, 4526], [4527, 4531], [4531, 4532], [4532, 4533]]}) 
answer: set([])
candidate Sentence: (0.13532443344593048, {u'tokens': [u'What', u'seems', u'clear', u'is', u'that', u'penguins', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-LRB-', u'living', u'birds', u'except', u'paleognaths', u'and', u'fowl', u'-RRB-', u'which', u'comprises', u'what', u'is', u'sometimes', u'called', u'``', u'higher', u'waterbirds', u"''", u'to', u'distinguish', u'them', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'lemmas': [u'what', u'seem', u'clear', u'be', u'that', u'penguin', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-lrb-', u'live', u'bird', u'except', u'paleognath', u'and', u'fowl', u'-rrb-', u'which', u'comprise', u'what', u'be', u'sometimes', u'call', u'``', u'higher', u'waterbird', u"''", u'to', u'distinguish', u'they', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'pos': [u'WDT', u'VBZ', u'JJ', u'VBZ', u'IN', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'VBG', u'NNS', u'IN', u'NNS', u'CC', u'NN', u'-RRB-', u'WDT', u'VBZ', u'WP', u'VBZ', u'RB', u'VBN', u'``', u'JJR', u'NNS', u"''", u'TO', u'VB', u'PRP', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'.'], u'char_offsets': [[18091, 18095], [18096, 18101], [18102, 18107], [18108, 18110], [18111, 18115], [18116, 18124], [18125, 18131], [18132, 18134], [18135, 18136], [18137, 18142], [18143, 18145], [18146, 18153], [18154, 18155], [18155, 18161], [18162, 18167], [18168, 18174], [18175, 18186], [18187, 18190], [18191, 18195], [18195, 18196], [18197, 18202], [18203, 18212], [18213, 18217], [18218, 18220], [18221, 18230], [18231, 18237], [18238, 18239], [18239, 18245], [18246, 18256], [18256, 18257], [18258, 18260], [18261, 18272], [18273, 18277], [18278, 18282], [18283, 18286], [18287, 18291], [18292, 18299], [18300, 18309], [18309, 18310]]}) 
answer: set([])
candidate Sentence: (0.099818706512451172, {u'tokens': [u'The', u'Auk', u'of', u'the', u'Northern', u'Hemisphere', u'is', u'superficially', u'similar', u'to', u'penguins', u',', u'they', u'are', u'not', u'related', u'to', u'the', u'penguins', u'at', u'all', u',', u'but', u'considered', u'by', u'some', u'to', u'be', u'a', u'product', u'of', u'moderate', u'convergent', u'evolution', u'Convergence', u'and', u'divergence', u'in', u'the', u'evolution', u'of', u'aquatic', u'birds', u'by', u'Marcel', u'Van', u'Tuinen', u',', u'Dave', u'Brian', u'Butvill', u',', u'John', u'A.', u'W.', u'Kirsch', u'and', u'S.', u'Blair', u'Hedges', u'The', u'word', u'Penguin', u'is', u'thought', u'by', u'some', u'to', u'derive', u'from', u'the', u'Welsh', u'words', u'pen', u'-LRB-', u'head', u'-RRB-', u'and', u'gwyn', u'-LRB-', u'white', u'-RRB-', u',', u'Oxford', u'English', u'Dictionary', u'.'], u'lemmas': [u'the', u'auk', u'of', u'the', u'northern', u'Hemisphere', u'be', u'superficially', u'similar', u'to', u'penguin', u',', u'they', u'be', u'not', u'relate', u'to', u'the', u'penguin', u'at', u'all', u',', u'but', u'consider', u'by', u'some', u'to', u'be', u'a', u'product', u'of', u'moderate', u'convergent', u'evolution', u'convergence', u'and', u'divergence', u'in', u'the', u'evolution', u'of', u'aquatic', u'bird', u'by', u'Marcel', u'Van', u'Tuinen', u',', u'Dave', u'Brian', u'Butvill', u',', u'John', u'A.', u'W.', u'Kirsch', u'and', u'S.', u'Blair', u'Hedges', u'The', u'word', u'Penguin', u'be', u'think', u'by', u'some', u'to', u'derive', u'from', u'the', u'Welsh', u'word', u'pen', u'-lrb-', u'head', u'-rrb-', u'and', u'gwyn', u'-lrb-', u'white', u'-rrb-', u',', u'Oxford', u'English', u'Dictionary', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'VBZ', u'RB', u'JJ', u'TO', u'NNS', u',', u'PRP', u'VBP', u'RB', u'VBN', u'TO', u'DT', u'NNS', u'IN', u'DT', u',', u'CC', u'VBN', u'IN', u'DT', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'NNP', u'NN', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'TO', u'VB', u'IN', u'DT', u'NNP', u'NNS', u'NN', u'-LRB-', u'NN', u'-RRB-', u'CC', u'NN', u'-LRB-', u'JJ', u'-RRB-', u',', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[19149, 19152], [19153, 19156], [19157, 19159], [19160, 19163], [19164, 19172], [19173, 19183], [19184, 19186], [19187, 19200], [19201, 19208], [19209, 19211], [19212, 19220], [19220, 19221], [19222, 19226], [19227, 19230], [19231, 19234], [19235, 19242], [19243, 19245], [19246, 19249], [19250, 19258], [19259, 19261], [19262, 19265], [19265, 19266], [19267, 19270], [19271, 19281], [19282, 19284], [19285, 19289], [19290, 19292], [19293, 19295], [19296, 19297], [19298, 19305], [19306, 19308], [19309, 19317], [19318, 19328], [19329, 19338], [19341, 19352], [19353, 19356], [19357, 19367], [19368, 19370], [19371, 19374], [19375, 19384], [19385, 19387], [19388, 19395], [19396, 19401], [19402, 19404], [19405, 19411], [19412, 19415], [19416, 19422], [19422, 19423], [19424, 19428], [19429, 19434], [19435, 19442], [19442, 19443], [19444, 19448], [19449, 19451], [19452, 19454], [19455, 19461], [19462, 19465], [19466, 19468], [19469, 19474], [19475, 19481], [19482, 19485], [19486, 19490], [19491, 19498], [19499, 19501], [19502, 19509], [19510, 19512], [19513, 19517], [19518, 19520], [19521, 19527], [19528, 19532], [19533, 19536], [19537, 19542], [19543, 19548], [19549, 19552], [19553, 19554], [19554, 19558], [19558, 19559], [19560, 19563], [19564, 19568], [19569, 19570], [19570, 19575], [19575, 19576], [19576, 19577], [19579, 19585], [19586, 19593], [19594, 19604], [19604, 19605]]}) 
answer: set([])
candidate Sentence: (0.097943857312202454, {u'tokens': [u'What', u'can', u'be', u'said', u'as', u'certainly', u'as', u'possible', u'in', u'the', u'absence', u'of', u'direct', u'-LRB-', u'i.e.', u',', u'fossil', u'-RRB-', u'evidence', u'is', u'that', u'by', u'the', u'end', u'of', u'the', u'Cretaceous', u',', u'the', u'penguin', u'lineage', u'must', u'have', u'been', u'evolutionarily', u'well', u'distinct', u',', u'though', u'much', u'less', u'so', u'morphologically', u';', u'it', u'is', u'fairly', u'likely', u'that', u'they', u'were', u'not', u'yet', u'entirely', u'flightless', u'at', u'that', u'time', u',', u'as', u'flightless', u'birds', u'have', u'generally', u'low', u'resilience', u'to', u'the', u'breakdown', u'of', u'trophic', u'webs', u'which', u'follows', u'the', u'initial', u'phase', u'of', u'mass', u'extinctions', u'because', u'of', u'their', u'below-average', u'dispersal', u'capabilities', u'-LRB-', u'see', u'also', u'Flightless', u'Cormorant', u'-RRB-', u'.'], u'lemmas': [u'what', u'can', u'be', u'say', u'as', u'certainly', u'as', u'possible', u'in', u'the', u'absence', u'of', u'direct', u'-lrb-', u'i.e.', u',', u'fossil', u'-rrb-', u'evidence', u'be', u'that', u'by', u'the', u'end', u'of', u'the', u'cretaceous', u',', u'the', u'penguin', u'lineage', u'must', u'have', u'be', u'evolutionarily', u'well', u'distinct', u',', u'though', u'much', u'less', u'so', u'morphologically', u';', u'it', u'be', u'fairly', u'likely', u'that', u'they', u'be', u'not', u'yet', u'entirely', u'flightless', u'at', u'that', u'time', u',', u'as', u'flightless', u'bird', u'have', u'generally', u'low', u'resilience', u'to', u'the', u'breakdown', u'of', u'trophic', u'web', u'which', u'follow', u'the', u'initial', u'phase', u'of', u'mass', u'extinction', u'because', u'of', u'they', u'below-average', u'dispersal', u'capability', u'-lrb-', u'see', u'also', u'flightless', u'cormorant', u'-rrb-', u'.'], u'pos': [u'WDT', u'MD', u'VB', u'VBN', u'IN', u'RB', u'IN', u'JJ', u'IN', u'DT', u'NN', u'IN', u'JJ', u'-LRB-', u'FW', u',', u'NN', u'-RRB-', u'NN', u'VBZ', u'IN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u',', u'DT', u'NN', u'NN', u'MD', u'VB', u'VBN', u'RB', u'RB', u'JJ', u',', u'RB', u'RB', u'RBR', u'RB', u'RB', u':', u'PRP', u'VBZ', u'RB', u'JJ', u'IN', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'JJ', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u'NN', u'TO', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NNS', u'IN', u'IN', u'PRP$', u'JJ', u'NN', u'NNS', u'-LRB-', u'VB', u'RB', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[9176, 9180], [9181, 9184], [9185, 9187], [9188, 9192], [9193, 9195], [9196, 9205], [9206, 9208], [9209, 9217], [9218, 9220], [9221, 9224], [9225, 9232], [9233, 9235], [9236, 9242], [9243, 9244], [9244, 9248], [9248, 9249], [9250, 9256], [9256, 9257], [9258, 9266], [9267, 9269], [9270, 9274], [9275, 9277], [9278, 9281], [9282, 9285], [9286, 9288], [9289, 9292], [9293, 9303], [9303, 9304], [9305, 9308], [9309, 9316], [9317, 9324], [9325, 9329], [9330, 9334], [9335, 9339], [9340, 9354], [9355, 9359], [9360, 9368], [9368, 9369], [9370, 9376], [9377, 9381], [9382, 9386], [9387, 9389], [9390, 9405], [9405, 9406], [9407, 9409], [9410, 9412], [9413, 9419], [9420, 9426], [9427, 9431], [9432, 9436], [9437, 9441], [9442, 9445], [9446, 9449], [9450, 9458], [9459, 9469], [9470, 9472], [9473, 9477], [9478, 9482], [9482, 9483], [9484, 9486], [9487, 9497], [9498, 9503], [9504, 9508], [9509, 9518], [9519, 9522], [9523, 9533], [9534, 9536], [9537, 9540], [9541, 9550], [9551, 9553], [9554, 9561], [9562, 9566], [9567, 9572], [9573, 9580], [9581, 9584], [9585, 9592], [9593, 9598], [9599, 9601], [9602, 9606], [9607, 9618], [9619, 9626], [9627, 9629], [9630, 9635], [9636, 9649], [9650, 9659], [9660, 9672], [9673, 9674], [9674, 9677], [9678, 9682], [9683, 9693], [9694, 9703], [9703, 9704], [9704, 9705]]}) 
answer: set([])

Are penguins birds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa95f80>.answer
_____________________________ test_yesno[param272] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98050>, (<src.tfidf.TF_IDF object at 0x10a153190>, set(['penguin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98050>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25079154968261719, {u'tokens': [u'The', u'air', u'layer', u'also', u'helps', u'insulate', u'the', u'birds', u'in', u'cold', u'waters', u'.'], u'lemmas': [u'the', u'air', u'layer', u'also', u'help', u'insulate', u'the', u'bird', u'in', u'cold', u'water', u'.'], u'pos': [u'DT', u'NN', u'NN', u'RB', u'VBZ', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3115, 3118], [3119, 3122], [3123, 3128], [3129, 3133], [3134, 3139], [3140, 3148], [3149, 3152], [3153, 3158], [3159, 3161], [3162, 3166], [3167, 3173], [3173, 3174]]}) 
answer: set([])
candidate Sentence: (0.19034008681774139, {u'tokens': [u'Penguins', u'-LRB-', u'order', u'Sphenisciformes', u',', u'family', u'Spheniscidae', u'-RRB-', u'are', u'a', u'group', u'of', u'aquatic', u',', u'flightless', u'birds', u'living', u'almost', u'exclusively', u'in', u'the', u'Southern', u'Hemisphere', u'.'], u'lemmas': [u'penguin', u'-lrb-', u'order', u'sphenisciforme', u',', u'family', u'spheniscida', u'-rrb-', u'be', u'a', u'group', u'of', u'aquatic', u',', u'flightless', u'bird', u'live', u'almost', u'exclusively', u'in', u'the', u'Southern', u'Hemisphere', u'.'], u'pos': [u'NNS', u'-LRB-', u'NN', u'NNS', u',', u'NN', u'NN', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'JJ', u',', u'JJ', u'NNS', u'VBG', u'RB', u'RB', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[54, 62], [63, 64], [64, 69], [70, 85], [85, 86], [87, 93], [94, 106], [106, 107], [108, 111], [112, 113], [114, 119], [120, 122], [123, 130], [130, 131], [132, 142], [143, 148], [149, 155], [156, 162], [163, 174], [175, 177], [178, 181], [182, 190], [191, 201], [201, 202]]}) 
answer: set([])
candidate Sentence: (0.17065736651420593, {u'tokens': [u'While', u'they', u'were', u'not', u'as', u'well', u'adapted', u'to', u'aquatic', u'life', u'as', u'modern', u'penguins', u',', u'Waimanu', u'were', u'generally', u'loon-like', u'birds', u'but', u'already', u'flightless', u',', u'with', u'short', u'wings', u'adapted', u'for', u'deep', u'diving', u'.'], u'lemmas': [u'while', u'they', u'be', u'not', u'as', u'well', u'adapt', u'to', u'aquatic', u'life', u'as', u'modern', u'penguin', u',', u'Waimanu', u'be', u'generally', u'loon-like', u'bird', u'but', u'already', u'flightless', u',', u'with', u'short', u'wing', u'adapt', u'for', u'deep', u'diving', u'.'], u'pos': [u'IN', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'VBN', u'TO', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'RB', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[9863, 9868], [9869, 9873], [9874, 9878], [9879, 9882], [9883, 9885], [9886, 9890], [9891, 9898], [9899, 9901], [9902, 9909], [9910, 9914], [9915, 9917], [9918, 9924], [9925, 9933], [9933, 9934], [9935, 9942], [9943, 9947], [9948, 9957], [9958, 9967], [9968, 9973], [9974, 9977], [9978, 9985], [9986, 9996], [9996, 9997], [9998, 10002], [10003, 10008], [10009, 10014], [10015, 10022], [10023, 10026], [10027, 10031], [10032, 10038], [10038, 10039]]}) 
answer: set([])
candidate Sentence: (0.15422138571739197, {u'tokens': [u'This', u'group', u'contains', u'such', u'birds', u'as', u'storks', u',', u'rails', u',', u'and', u'the', u'seabirds', u',', u'with', u'the', u'possible', u'exception', u'of', u'the', u'Charadriiformes', u'-LRB-', u'Fain', u'&', u'Houde', u'2004', u'-RRB-', u'.'], u'lemmas': [u'this', u'group', u'contain', u'such', u'bird', u'as', u'stork', u',', u'rail', u',', u'and', u'the', u'seabird', u',', u'with', u'the', u'possible', u'exception', u'of', u'the', u'charadriiforme', u'-lrb-', u'Fain', u'&', u'Houde', u'2004', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'JJ', u'NNS', u'IN', u'NNS', u',', u'NNS', u',', u'CC', u'DT', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNS', u'-LRB-', u'NNP', u'CC', u'NNP', u'CD', u'-RRB-', u'.'], u'char_offsets': [[18311, 18315], [18316, 18321], [18322, 18330], [18331, 18335], [18336, 18341], [18342, 18344], [18345, 18351], [18351, 18352], [18353, 18358], [18358, 18359], [18360, 18363], [18364, 18367], [18368, 18376], [18376, 18377], [18378, 18382], [18383, 18386], [18387, 18395], [18396, 18405], [18406, 18408], [18409, 18412], [18413, 18428], [18429, 18430], [18430, 18434], [18435, 18436], [18437, 18442], [18443, 18447], [18447, 18448], [18448, 18449]]}) 
answer: set([])
candidate Sentence: (0.15388695895671844, {u'tokens': [u'They', u'swam', u'on', u'the', u'surface', u'using', u'mainly', u'their', u'feet', u',', u'but', u'the', u'wings', u'were', u'-', u'as', u'opposed', u'to', u'most', u'other', u'diving', u'birds', u',', u'living', u'and', u'extinct', u'-', u'already', u'adapting', u'to', u'underwater', u'locomotion', u'.'], u'lemmas': [u'they', u'swim', u'on', u'the', u'surface', u'use', u'mainly', u'they', u'foot', u',', u'but', u'the', u'wing', u'be', u'-', u'as', u'oppose', u'to', u'most', u'other', u'diving', u'bird', u',', u'live', u'and', u'extinct', u'-', u'already', u'adapt', u'to', u'underwater', u'locomotion', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'VBG', u'RB', u'PRP$', u'NNS', u',', u'CC', u'DT', u'NNS', u'VBD', u':', u'IN', u'VBN', u'TO', u'RBS', u'JJ', u'JJ', u'NNS', u',', u'VBG', u'CC', u'JJ', u':', u'RB', u'VBG', u'TO', u'JJ', u'NN', u'.'], u'char_offsets': [[10040, 10044], [10045, 10049], [10050, 10052], [10053, 10056], [10057, 10064], [10065, 10070], [10071, 10077], [10078, 10083], [10084, 10088], [10088, 10089], [10090, 10093], [10094, 10097], [10098, 10103], [10104, 10108], [10109, 10110], [10111, 10113], [10114, 10121], [10122, 10124], [10125, 10129], [10130, 10135], [10136, 10142], [10143, 10148], [10148, 10149], [10150, 10156], [10157, 10160], [10161, 10168], [10169, 10170], [10171, 10178], [10179, 10187], [10188, 10190], [10191, 10201], [10202, 10212], [10212, 10213]]}) 
answer: set([])
candidate Sentence: (0.14678345620632172, {u'tokens': [u'Tux', u'the', u'Linux', u'kernel', u'mascot', u'Penguins', u'are', u'popular', u'around', u'the', u'world', u',', u'primarily', u'for', u'their', u'unusually', u'upright', u',', u'waddling', u'pace', u'and', u'-LRB-', u'compared', u'to', u'other', u'birds', u'-RRB-', u'lack', u'of', u'fear', u'of', u'humans', u'.'], u'lemmas': [u'tux', u'the', u'Linux', u'kernel', u'mascot', u'penguin', u'be', u'popular', u'around', u'the', u'world', u',', u'primarily', u'for', u'they', u'unusually', u'upright', u',', u'waddle', u'pace', u'and', u'-lrb-', u'compare', u'to', u'other', u'bird', u'-rrb-', u'lack', u'of', u'fear', u'of', u'human', u'.'], u'pos': [u'NN', u'DT', u'NNP', u'NN', u'NN', u'NNS', u'VBP', u'JJ', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'PRP$', u'RB', u'JJ', u',', u'VBG', u'NN', u'CC', u'-LRB-', u'VBN', u'TO', u'JJ', u'NNS', u'-RRB-', u'NN', u'IN', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[20467, 20470], [20471, 20474], [20475, 20480], [20481, 20487], [20488, 20494], [20495, 20503], [20504, 20507], [20508, 20515], [20516, 20522], [20523, 20526], [20527, 20532], [20532, 20533], [20534, 20543], [20544, 20547], [20548, 20553], [20554, 20563], [20564, 20571], [20571, 20572], [20573, 20581], [20582, 20586], [20587, 20590], [20591, 20592], [20592, 20600], [20601, 20603], [20604, 20609], [20610, 20615], [20615, 20616], [20617, 20621], [20622, 20624], [20625, 20629], [20630, 20632], [20633, 20639], [20639, 20640]]}) 
answer: set([])
candidate Sentence: (0.13644270598888397, {u'tokens': [u'Penguins', u'have', u'an', u'average', u'sense', u'of', u'hearing', u'for', u'birds', u'-LRB-', u'Wever', u'et', u'al', u'1969', u'-RRB-', u';', u'this', u'is', u'used', u'by', u'parents', u'and', u'chicks', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colonies', u'-LRB-', u'Jouventin', u'et', u'al', u'1999', u'-RRB-', u'.'], u'lemmas': [u'penguin', u'have', u'a', u'average', u'sense', u'of', u'hearing', u'for', u'bird', u'-lrb-', u'Wever', u'et', u'al', u'1969', u'-rrb-', u';', u'this', u'be', u'use', u'by', u'parent', u'and', u'chick', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colony', u'-lrb-', u'Jouventin', u'et', u'al', u'1999', u'-rrb-', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u':', u'DT', u'VBZ', u'VBN', u'IN', u'NNS', u'CC', u'NNS', u'TO', u'VB', u'CD', u'DT', u'IN', u'JJ', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[4361, 4369], [4370, 4374], [4375, 4377], [4378, 4385], [4386, 4391], [4392, 4394], [4395, 4402], [4403, 4406], [4407, 4412], [4413, 4414], [4414, 4419], [4420, 4422], [4423, 4425], [4426, 4430], [4430, 4431], [4431, 4432], [4433, 4437], [4438, 4440], [4441, 4445], [4446, 4448], [4449, 4456], [4457, 4460], [4461, 4467], [4468, 4470], [4471, 4477], [4478, 4481], [4482, 4489], [4490, 4492], [4493, 4500], [4501, 4509], [4510, 4511], [4511, 4520], [4521, 4523], [4524, 4526], [4527, 4531], [4531, 4532], [4532, 4533]]}) 
answer: set([])
candidate Sentence: (0.13532443344593048, {u'tokens': [u'What', u'seems', u'clear', u'is', u'that', u'penguins', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-LRB-', u'living', u'birds', u'except', u'paleognaths', u'and', u'fowl', u'-RRB-', u'which', u'comprises', u'what', u'is', u'sometimes', u'called', u'``', u'higher', u'waterbirds', u"''", u'to', u'distinguish', u'them', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'lemmas': [u'what', u'seem', u'clear', u'be', u'that', u'penguin', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-lrb-', u'live', u'bird', u'except', u'paleognath', u'and', u'fowl', u'-rrb-', u'which', u'comprise', u'what', u'be', u'sometimes', u'call', u'``', u'higher', u'waterbird', u"''", u'to', u'distinguish', u'they', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'pos': [u'WDT', u'VBZ', u'JJ', u'VBZ', u'IN', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'VBG', u'NNS', u'IN', u'NNS', u'CC', u'NN', u'-RRB-', u'WDT', u'VBZ', u'WP', u'VBZ', u'RB', u'VBN', u'``', u'JJR', u'NNS', u"''", u'TO', u'VB', u'PRP', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'.'], u'char_offsets': [[18091, 18095], [18096, 18101], [18102, 18107], [18108, 18110], [18111, 18115], [18116, 18124], [18125, 18131], [18132, 18134], [18135, 18136], [18137, 18142], [18143, 18145], [18146, 18153], [18154, 18155], [18155, 18161], [18162, 18167], [18168, 18174], [18175, 18186], [18187, 18190], [18191, 18195], [18195, 18196], [18197, 18202], [18203, 18212], [18213, 18217], [18218, 18220], [18221, 18230], [18231, 18237], [18238, 18239], [18239, 18245], [18246, 18256], [18256, 18257], [18258, 18260], [18261, 18272], [18273, 18277], [18278, 18282], [18283, 18286], [18287, 18291], [18292, 18299], [18300, 18309], [18309, 18310]]}) 
answer: set([])
candidate Sentence: (0.099818706512451172, {u'tokens': [u'The', u'Auk', u'of', u'the', u'Northern', u'Hemisphere', u'is', u'superficially', u'similar', u'to', u'penguins', u',', u'they', u'are', u'not', u'related', u'to', u'the', u'penguins', u'at', u'all', u',', u'but', u'considered', u'by', u'some', u'to', u'be', u'a', u'product', u'of', u'moderate', u'convergent', u'evolution', u'Convergence', u'and', u'divergence', u'in', u'the', u'evolution', u'of', u'aquatic', u'birds', u'by', u'Marcel', u'Van', u'Tuinen', u',', u'Dave', u'Brian', u'Butvill', u',', u'John', u'A.', u'W.', u'Kirsch', u'and', u'S.', u'Blair', u'Hedges', u'The', u'word', u'Penguin', u'is', u'thought', u'by', u'some', u'to', u'derive', u'from', u'the', u'Welsh', u'words', u'pen', u'-LRB-', u'head', u'-RRB-', u'and', u'gwyn', u'-LRB-', u'white', u'-RRB-', u',', u'Oxford', u'English', u'Dictionary', u'.'], u'lemmas': [u'the', u'auk', u'of', u'the', u'northern', u'Hemisphere', u'be', u'superficially', u'similar', u'to', u'penguin', u',', u'they', u'be', u'not', u'relate', u'to', u'the', u'penguin', u'at', u'all', u',', u'but', u'consider', u'by', u'some', u'to', u'be', u'a', u'product', u'of', u'moderate', u'convergent', u'evolution', u'convergence', u'and', u'divergence', u'in', u'the', u'evolution', u'of', u'aquatic', u'bird', u'by', u'Marcel', u'Van', u'Tuinen', u',', u'Dave', u'Brian', u'Butvill', u',', u'John', u'A.', u'W.', u'Kirsch', u'and', u'S.', u'Blair', u'Hedges', u'The', u'word', u'Penguin', u'be', u'think', u'by', u'some', u'to', u'derive', u'from', u'the', u'Welsh', u'word', u'pen', u'-lrb-', u'head', u'-rrb-', u'and', u'gwyn', u'-lrb-', u'white', u'-rrb-', u',', u'Oxford', u'English', u'Dictionary', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'VBZ', u'RB', u'JJ', u'TO', u'NNS', u',', u'PRP', u'VBP', u'RB', u'VBN', u'TO', u'DT', u'NNS', u'IN', u'DT', u',', u'CC', u'VBN', u'IN', u'DT', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'NNP', u'NN', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'TO', u'VB', u'IN', u'DT', u'NNP', u'NNS', u'NN', u'-LRB-', u'NN', u'-RRB-', u'CC', u'NN', u'-LRB-', u'JJ', u'-RRB-', u',', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[19149, 19152], [19153, 19156], [19157, 19159], [19160, 19163], [19164, 19172], [19173, 19183], [19184, 19186], [19187, 19200], [19201, 19208], [19209, 19211], [19212, 19220], [19220, 19221], [19222, 19226], [19227, 19230], [19231, 19234], [19235, 19242], [19243, 19245], [19246, 19249], [19250, 19258], [19259, 19261], [19262, 19265], [19265, 19266], [19267, 19270], [19271, 19281], [19282, 19284], [19285, 19289], [19290, 19292], [19293, 19295], [19296, 19297], [19298, 19305], [19306, 19308], [19309, 19317], [19318, 19328], [19329, 19338], [19341, 19352], [19353, 19356], [19357, 19367], [19368, 19370], [19371, 19374], [19375, 19384], [19385, 19387], [19388, 19395], [19396, 19401], [19402, 19404], [19405, 19411], [19412, 19415], [19416, 19422], [19422, 19423], [19424, 19428], [19429, 19434], [19435, 19442], [19442, 19443], [19444, 19448], [19449, 19451], [19452, 19454], [19455, 19461], [19462, 19465], [19466, 19468], [19469, 19474], [19475, 19481], [19482, 19485], [19486, 19490], [19491, 19498], [19499, 19501], [19502, 19509], [19510, 19512], [19513, 19517], [19518, 19520], [19521, 19527], [19528, 19532], [19533, 19536], [19537, 19542], [19543, 19548], [19549, 19552], [19553, 19554], [19554, 19558], [19558, 19559], [19560, 19563], [19564, 19568], [19569, 19570], [19570, 19575], [19575, 19576], [19576, 19577], [19579, 19585], [19586, 19593], [19594, 19604], [19604, 19605]]}) 
answer: set([])
candidate Sentence: (0.097943857312202454, {u'tokens': [u'What', u'can', u'be', u'said', u'as', u'certainly', u'as', u'possible', u'in', u'the', u'absence', u'of', u'direct', u'-LRB-', u'i.e.', u',', u'fossil', u'-RRB-', u'evidence', u'is', u'that', u'by', u'the', u'end', u'of', u'the', u'Cretaceous', u',', u'the', u'penguin', u'lineage', u'must', u'have', u'been', u'evolutionarily', u'well', u'distinct', u',', u'though', u'much', u'less', u'so', u'morphologically', u';', u'it', u'is', u'fairly', u'likely', u'that', u'they', u'were', u'not', u'yet', u'entirely', u'flightless', u'at', u'that', u'time', u',', u'as', u'flightless', u'birds', u'have', u'generally', u'low', u'resilience', u'to', u'the', u'breakdown', u'of', u'trophic', u'webs', u'which', u'follows', u'the', u'initial', u'phase', u'of', u'mass', u'extinctions', u'because', u'of', u'their', u'below-average', u'dispersal', u'capabilities', u'-LRB-', u'see', u'also', u'Flightless', u'Cormorant', u'-RRB-', u'.'], u'lemmas': [u'what', u'can', u'be', u'say', u'as', u'certainly', u'as', u'possible', u'in', u'the', u'absence', u'of', u'direct', u'-lrb-', u'i.e.', u',', u'fossil', u'-rrb-', u'evidence', u'be', u'that', u'by', u'the', u'end', u'of', u'the', u'cretaceous', u',', u'the', u'penguin', u'lineage', u'must', u'have', u'be', u'evolutionarily', u'well', u'distinct', u',', u'though', u'much', u'less', u'so', u'morphologically', u';', u'it', u'be', u'fairly', u'likely', u'that', u'they', u'be', u'not', u'yet', u'entirely', u'flightless', u'at', u'that', u'time', u',', u'as', u'flightless', u'bird', u'have', u'generally', u'low', u'resilience', u'to', u'the', u'breakdown', u'of', u'trophic', u'web', u'which', u'follow', u'the', u'initial', u'phase', u'of', u'mass', u'extinction', u'because', u'of', u'they', u'below-average', u'dispersal', u'capability', u'-lrb-', u'see', u'also', u'flightless', u'cormorant', u'-rrb-', u'.'], u'pos': [u'WDT', u'MD', u'VB', u'VBN', u'IN', u'RB', u'IN', u'JJ', u'IN', u'DT', u'NN', u'IN', u'JJ', u'-LRB-', u'FW', u',', u'NN', u'-RRB-', u'NN', u'VBZ', u'IN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u',', u'DT', u'NN', u'NN', u'MD', u'VB', u'VBN', u'RB', u'RB', u'JJ', u',', u'RB', u'RB', u'RBR', u'RB', u'RB', u':', u'PRP', u'VBZ', u'RB', u'JJ', u'IN', u'PRP', u'VBD', u'RB', u'RB', u'RB', u'JJ', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u'NN', u'TO', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NNS', u'IN', u'IN', u'PRP$', u'JJ', u'NN', u'NNS', u'-LRB-', u'VB', u'RB', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[9176, 9180], [9181, 9184], [9185, 9187], [9188, 9192], [9193, 9195], [9196, 9205], [9206, 9208], [9209, 9217], [9218, 9220], [9221, 9224], [9225, 9232], [9233, 9235], [9236, 9242], [9243, 9244], [9244, 9248], [9248, 9249], [9250, 9256], [9256, 9257], [9258, 9266], [9267, 9269], [9270, 9274], [9275, 9277], [9278, 9281], [9282, 9285], [9286, 9288], [9289, 9292], [9293, 9303], [9303, 9304], [9305, 9308], [9309, 9316], [9317, 9324], [9325, 9329], [9330, 9334], [9335, 9339], [9340, 9354], [9355, 9359], [9360, 9368], [9368, 9369], [9370, 9376], [9377, 9381], [9382, 9386], [9387, 9389], [9390, 9405], [9405, 9406], [9407, 9409], [9410, 9412], [9413, 9419], [9420, 9426], [9427, 9431], [9432, 9436], [9437, 9441], [9442, 9445], [9446, 9449], [9450, 9458], [9459, 9469], [9470, 9472], [9473, 9477], [9478, 9482], [9482, 9483], [9484, 9486], [9487, 9497], [9498, 9503], [9504, 9508], [9509, 9518], [9519, 9522], [9523, 9533], [9534, 9536], [9537, 9540], [9541, 9550], [9551, 9553], [9554, 9561], [9562, 9566], [9567, 9572], [9573, 9580], [9581, 9584], [9585, 9592], [9593, 9598], [9599, 9601], [9602, 9606], [9607, 9618], [9619, 9626], [9627, 9629], [9630, 9635], [9636, 9649], [9650, 9659], [9660, 9672], [9673, 9674], [9674, 9677], [9678, 9682], [9683, 9693], [9694, 9703], [9703, 9704], [9704, 9705]]}) 
answer: set([])

Are penguins birds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98050>.answer
_____________________________ test_yesno[param273] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa980e0>, (<src.tfidf.TF_IDF object at 0x10a153190>, set(['penguin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa980e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39478155970573425, {u'tokens': [u'Penguins', u'have', u'an', u'average', u'sense', u'of', u'hearing', u'for', u'birds', u'-LRB-', u'Wever', u'et', u'al', u'1969', u'-RRB-', u';', u'this', u'is', u'used', u'by', u'parents', u'and', u'chicks', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colonies', u'-LRB-', u'Jouventin', u'et', u'al', u'1999', u'-RRB-', u'.'], u'lemmas': [u'penguin', u'have', u'a', u'average', u'sense', u'of', u'hearing', u'for', u'bird', u'-lrb-', u'Wever', u'et', u'al', u'1969', u'-rrb-', u';', u'this', u'be', u'use', u'by', u'parent', u'and', u'chick', u'to', u'locate', u'one', u'another', u'in', u'crowded', u'colony', u'-lrb-', u'Jouventin', u'et', u'al', u'1999', u'-rrb-', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u':', u'DT', u'VBZ', u'VBN', u'IN', u'NNS', u'CC', u'NNS', u'TO', u'VB', u'CD', u'DT', u'IN', u'JJ', u'NNS', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[4361, 4369], [4370, 4374], [4375, 4377], [4378, 4385], [4386, 4391], [4392, 4394], [4395, 4402], [4403, 4406], [4407, 4412], [4413, 4414], [4414, 4419], [4420, 4422], [4423, 4425], [4426, 4430], [4430, 4431], [4431, 4432], [4433, 4437], [4438, 4440], [4441, 4445], [4446, 4448], [4449, 4456], [4457, 4460], [4461, 4467], [4468, 4470], [4471, 4477], [4478, 4481], [4482, 4489], [4490, 4492], [4493, 4500], [4501, 4509], [4510, 4511], [4511, 4520], [4521, 4523], [4524, 4526], [4527, 4531], [4531, 4532], [4532, 4533]]}) 
answer: set([u'better'])
candidate Sentence: (0.12021374702453613, {u'tokens': [u'Typically', u',', u'penguins', u'do', u'not', u'approach', u'closer', u'than', u'about', u'3', u'meters', u'-LRB-', u'9', u'ft', u'-RRB-', u';', u'they', u'become', u'nervous', u'at', u'about', u'that', u'distance', u'.'], u'lemmas': [u'typically', u',', u'penguin', u'do', u'not', u'approach', u'closer', u'than', u'about', u'3', u'meter', u'-lrb-', u'9', u'ft', u'-rrb-', u';', u'they', u'become', u'nervous', u'at', u'about', u'that', u'distance', u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'RB', u'VB', u'JJR', u'IN', u'IN', u'CD', u'NNS', u'-LRB-', u'CD', u'NN', u'-RRB-', u':', u'PRP', u'VBP', u'JJ', u'IN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2549, 2558], [2558, 2559], [2560, 2568], [2569, 2571], [2572, 2575], [2576, 2584], [2585, 2591], [2592, 2596], [2597, 2602], [2603, 2604], [2605, 2611], [2612, 2613], [2613, 2614], [2615, 2617], [2617, 2618], [2618, 2619], [2620, 2624], [2625, 2631], [2632, 2639], [2640, 2642], [2643, 2648], [2649, 2653], [2654, 2662], [2662, 2663]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.11298156529664993, {u'tokens': [u'Due', u'to', u'plate', u'tectonics', u',', u'these', u'areas', u'were', u'at', u'that', u'time', u'less', u'than', u'apart', u'rather', u'than', u'the', u'of', u'today', u'.'], u'lemmas': [u'due', u'to', u'plate', u'tectonic', u',', u'these', u'area', u'be', u'at', u'that', u'time', u'less', u'than', u'apart', u'rather', u'than', u'the', u'of', u'today', u'.'], u'pos': [u'JJ', u'TO', u'NN', u'NNS', u',', u'DT', u'NNS', u'VBD', u'IN', u'DT', u'NN', u'RBR', u'IN', u'RB', u'RB', u'IN', u'DT', u'IN', u'NN', u'.'], u'char_offsets': [[8704, 8707], [8708, 8710], [8711, 8716], [8717, 8726], [8726, 8727], [8728, 8733], [8734, 8739], [8740, 8744], [8745, 8747], [8748, 8752], [8753, 8757], [8758, 8762], [8763, 8767], [8770, 8775], [8776, 8782], [8783, 8787], [8788, 8791], [8794, 8796], [8797, 8802], [8802, 8803]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.084173694252967834, {u'tokens': [u'This', u'is', u'for', u'camouflage', u'.'], u'lemmas': [u'this', u'be', u'for', u'camouflage', u'.'], u'pos': [u'DT', u'VBZ', u'IN', u'NN', u'.'], u'char_offsets': [[3373, 3377], [3378, 3380], [3381, 3384], [3385, 3395], [3395, 3396]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.084169819951057434, {u'tokens': [u'Some', u'penguins', u'mate', u'for', u'life', u',', u'others', u'for', u'just', u'one', u'season', u'.'], u'lemmas': [u'some', u'penguin', u'mate', u'for', u'life', u',', u'other', u'for', u'just', u'one', u'season', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'IN', u'NN', u',', u'NNS', u'IN', u'RB', u'CD', u'NN', u'.'], u'char_offsets': [[5685, 5689], [5690, 5698], [5699, 5703], [5704, 5707], [5708, 5712], [5712, 5713], [5714, 5720], [5721, 5724], [5725, 5729], [5730, 5733], [5734, 5740], [5740, 5741]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.078694574534893036, {u'tokens': [u'The', u'largest', u'living', u'species', u'is', u'the', u'Emperor', u'Penguin', u'-LRB-', u'Aptenodytes', u'forsteri', u'-RRB-', u':', u'adults', u'average', u'about', u'1.1', u'm', u'-LRB-', u'3', u'ft', u'7', u'in', u'-RRB-', u'tall', u'and', u'weigh', u'35', u'kg', u'-LRB-', u'75', u'lb', u'-RRB-', u'or', u'more', u'.'], u'lemmas': [u'the', u'largest', u'living', u'species', u'be', u'the', u'Emperor', u'Penguin', u'-lrb-', u'Aptenodytes', u'forsterus', u'-rrb-', u':', u'adult', u'average', u'about', u'1.1', u'm', u'-lrb-', u'3', u'ft', u'7', u'in', u'-rrb-', u'tall', u'and', u'weigh', u'35', u'kg', u'-lrb-', u'75', u'lb', u'-rrb-', u'or', u'more', u'.'], u'pos': [u'DT', u'JJS', u'NN', u'NNS', u'VBZ', u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NNS', u'-RRB-', u':', u'NNS', u'VBP', u'IN', u'CD', u'NN', u'-LRB-', u'CD', u'NN', u'CD', u'IN', u'-RRB-', u'JJ', u'CC', u'VB', u'CD', u'NN', u'-LRB-', u'CD', u'NN', u'-RRB-', u'CC', u'RBR', u'.'], u'char_offsets': [[1208, 1211], [1212, 1219], [1220, 1226], [1227, 1234], [1235, 1237], [1238, 1241], [1242, 1249], [1250, 1257], [1258, 1259], [1259, 1270], [1271, 1279], [1279, 1280], [1280, 1281], [1282, 1288], [1289, 1296], [1297, 1302], [1303, 1306], [1307, 1308], [1309, 1310], [1310, 1311], [1312, 1314], [1315, 1316], [1317, 1319], [1319, 1320], [1321, 1325], [1326, 1329], [1330, 1335], [1336, 1338], [1339, 1341], [1342, 1343], [1343, 1345], [1346, 1348], [1348, 1349], [1350, 1352], [1353, 1357], [1357, 1358]]}) 
answer: set([u'better', u'hearing', u'bird', u'sense'])
candidate Sentence: (0.077171668410301208, {u'tokens': [u'With', u'habitat', u'on', u'the', u'Antarctic', u'coasts', u'declining', u',', u'by', u'the', u'Priabonian', u'more', u'hospitable', u'conditions', u'for', u'most', u'penguins', u'existed', u'in', u'the', u'subantarctic', u'regions', u'rather', u'than', u'in', u'Antarctica', u'itself', u'.'], u'lemmas': [u'with', u'habitat', u'on', u'the', u'antarctic', u'coast', u'decline', u',', u'by', u'the', u'Priabonian', u'more', u'hospitable', u'condition', u'for', u'most', u'penguin', u'exist', u'in', u'the', u'subantarctic', u'region', u'rather', u'than', u'in', u'Antarctica', u'itself', u'.'], u'pos': [u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u',', u'IN', u'DT', u'NNP', u'RBR', u'JJ', u'NNS', u'IN', u'JJS', u'NNS', u'VBD', u'IN', u'DT', u'JJ', u'NNS', u'RB', u'IN', u'IN', u'NNP', u'PRP', u'.'], u'char_offsets': [[16680, 16684], [16685, 16692], [16693, 16695], [16696, 16699], [16700, 16709], [16710, 16716], [16717, 16726], [16726, 16727], [16728, 16730], [16731, 16734], [16735, 16745], [16746, 16750], [16751, 16761], [16762, 16772], [16773, 16776], [16777, 16781], [16782, 16790], [16791, 16798], [16799, 16801], [16802, 16805], [16806, 16818], [16819, 16826], [16827, 16833], [16834, 16838], [16839, 16841], [16842, 16852], [16853, 16859], [16859, 16860]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.076111935079097748, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'different', u'DNA', u'sequence', u'datasets', u'do', u'not', u'agree', u'in', u'detail', u'with', u'each', u'other', u'either', u'.'], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'different', u'dna', u'sequence', u'dataset', u'do', u'not', u'agree', u'in', u'detail', u'with', u'each', u'other', u'either', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'CC', u'.'], u'char_offsets': [[17993, 17995], [17996, 17999], [18000, 18005], [18006, 18010], [18010, 18011], [18012, 18021], [18022, 18025], [18026, 18034], [18035, 18043], [18044, 18046], [18047, 18050], [18051, 18056], [18057, 18059], [18060, 18066], [18067, 18071], [18072, 18076], [18077, 18082], [18083, 18089], [18089, 18090]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.074195995926856995, {u'tokens': [u'Penguins', u'have', u'a', u'thick', u'layer', u'of', u'insulating', u'feathers', u'which', u'are', u'designed', u'to', u'keep', u'them', u'warm', u'in', u'water', u'-LRB-', u'heat', u'loss', u'in', u'water', u'is', u'much', u'greater', u'than', u'in', u'air', u'-RRB-', u'.'], u'lemmas': [u'penguin', u'have', u'a', u'thick', u'layer', u'of', u'insulate', u'feather', u'which', u'be', u'design', u'to', u'keep', u'they', u'warm', u'in', u'water', u'-lrb-', u'heat', u'loss', u'in', u'water', u'be', u'much', u'greater', u'than', u'in', u'air', u'-rrb-', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'NNS', u'WDT', u'VBP', u'VBN', u'TO', u'VB', u'PRP', u'JJ', u'IN', u'NN', u'-LRB-', u'NN', u'NN', u'IN', u'NN', u'VBZ', u'RB', u'JJR', u'IN', u'IN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[4777, 4785], [4786, 4790], [4791, 4792], [4793, 4798], [4799, 4804], [4805, 4807], [4808, 4818], [4819, 4827], [4828, 4833], [4834, 4837], [4838, 4846], [4847, 4849], [4850, 4854], [4855, 4859], [4860, 4864], [4865, 4867], [4868, 4873], [4874, 4875], [4875, 4879], [4880, 4884], [4885, 4887], [4888, 4893], [4894, 4896], [4897, 4901], [4902, 4909], [4910, 4914], [4915, 4917], [4918, 4921], [4921, 4922], [4922, 4923]]}) 
answer: set([u'better', u'average', u'sense', u'bird', u'hearing'])
candidate Sentence: (0.070136860013008118, {u'tokens': [u'The', u'air', u'layer', u'also', u'helps', u'insulate', u'the', u'birds', u'in', u'cold', u'waters', u'.'], u'lemmas': [u'the', u'air', u'layer', u'also', u'help', u'insulate', u'the', u'bird', u'in', u'cold', u'water', u'.'], u'pos': [u'DT', u'NN', u'NN', u'RB', u'VBZ', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3115, 3118], [3119, 3122], [3123, 3128], [3129, 3133], [3134, 3139], [3140, 3148], [3149, 3152], [3153, 3158], [3159, 3161], [3162, 3166], [3167, 3173], [3173, 3174]]}) 
answer: set([u'better', u'average', u'hearing', u'sense'])

Do penguins have a better than average sense of hearing for birds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa980e0>.answer
_____________________________ test_yesno[param275] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98200>, (<src.tfidf.TF_IDF object at 0x10a153190>, set(['penguin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36797311902046204, {u'tokens': [u'What', u'seems', u'clear', u'is', u'that', u'penguins', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-LRB-', u'living', u'birds', u'except', u'paleognaths', u'and', u'fowl', u'-RRB-', u'which', u'comprises', u'what', u'is', u'sometimes', u'called', u'``', u'higher', u'waterbirds', u"''", u'to', u'distinguish', u'them', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'lemmas': [u'what', u'seem', u'clear', u'be', u'that', u'penguin', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-lrb-', u'live', u'bird', u'except', u'paleognath', u'and', u'fowl', u'-rrb-', u'which', u'comprise', u'what', u'be', u'sometimes', u'call', u'``', u'higher', u'waterbird', u"''", u'to', u'distinguish', u'they', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'pos': [u'WDT', u'VBZ', u'JJ', u'VBZ', u'IN', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'VBG', u'NNS', u'IN', u'NNS', u'CC', u'NN', u'-RRB-', u'WDT', u'VBZ', u'WP', u'VBZ', u'RB', u'VBN', u'``', u'JJR', u'NNS', u"''", u'TO', u'VB', u'PRP', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'.'], u'char_offsets': [[18091, 18095], [18096, 18101], [18102, 18107], [18108, 18110], [18111, 18115], [18116, 18124], [18125, 18131], [18132, 18134], [18135, 18136], [18137, 18142], [18143, 18145], [18146, 18153], [18154, 18155], [18155, 18161], [18162, 18167], [18168, 18174], [18175, 18186], [18187, 18190], [18191, 18195], [18195, 18196], [18197, 18202], [18203, 18212], [18213, 18217], [18218, 18220], [18221, 18230], [18231, 18237], [18238, 18239], [18239, 18245], [18246, 18256], [18256, 18257], [18258, 18260], [18261, 18272], [18273, 18277], [18278, 18282], [18283, 18286], [18287, 18291], [18292, 18299], [18300, 18309], [18309, 18310]]}) 
answer: set([u'consider'])
candidate Sentence: (0.19569998979568481, {u'tokens': [u'It', u'is', u'also', u'possible', u'that', u'penguin', u'comes', u'from', u'the', u'Latin', u'pinguis', u',', u'``', u'fat', u"''", u'.'], u'lemmas': [u'it', u'be', u'also', u'possible', u'that', u'penguin', u'come', u'from', u'the', u'latin', u'pingui', u',', u'``', u'fat', u"''", u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'JJ', u'IN', u'NN', u'VBZ', u'IN', u'DT', u'JJ', u'NNS', u',', u'``', u'JJ', u"''", u'.'], u'char_offsets': [[19976, 19978], [19979, 19981], [19982, 19986], [19987, 19995], [19996, 20000], [20001, 20008], [20009, 20014], [20015, 20019], [20020, 20023], [20024, 20029], [20030, 20037], [20037, 20038], [20039, 20040], [20040, 20043], [20043, 20044], [20044, 20045]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.1341647207736969, {u'tokens': [u'Another', u'theory', u'states', u'that', u'the', u'word', u'is', u'an', u'alteration', u'of', u'``', u'pen-wing', u"''", u',', u'with', u'reference', u'to', u'the', u'rudimentary', u'wings', u'of', u'both', u'Great', u'Auks', u'and', u'penguins', u',', u'but', u'there', u'is', u'no', u'evidence', u'for', u'this', u'.'], u'lemmas': [u'another', u'theory', u'state', u'that', u'the', u'word', u'be', u'a', u'alteration', u'of', u'``', u'pen-wing', u"''", u',', u'with', u'reference', u'to', u'the', u'rudimentary', u'wing', u'of', u'both', u'great', u'Auks', u'and', u'penguin', u',', u'but', u'there', u'be', u'no', u'evidence', u'for', u'this', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'``', u'JJ', u"''", u',', u'IN', u'NN', u'TO', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNPS', u'CC', u'NNS', u',', u'CC', u'EX', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'.'], u'char_offsets': [[20291, 20298], [20299, 20305], [20306, 20312], [20313, 20317], [20318, 20321], [20322, 20326], [20327, 20329], [20330, 20332], [20333, 20343], [20344, 20346], [20347, 20348], [20348, 20356], [20356, 20357], [20357, 20358], [20359, 20363], [20364, 20373], [20374, 20376], [20377, 20380], [20381, 20392], [20393, 20398], [20399, 20401], [20402, 20406], [20407, 20412], [20413, 20417], [20418, 20421], [20422, 20430], [20430, 20431], [20432, 20435], [20436, 20441], [20442, 20444], [20445, 20447], [20448, 20456], [20457, 20460], [20461, 20465], [20465, 20466]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.12255123257637024, {u'tokens': [u'Penguins', u'either', u'waddle', u'on', u'their', u'feet', u'or', u'slide', u'on', u'their', u'bellies', u'across', u'the', u'snow', u',', u'a', u'movement', u'called', u'``', u'tobogganing', u"''", u',', u'which', u'conserves', u'energy', u'while', u'moving', u'quickly', u'.'], u'lemmas': [u'penguin', u'either', u'waddle', u'on', u'they', u'foot', u'or', u'slide', u'on', u'they', u'belly', u'across', u'the', u'snow', u',', u'a', u'movement', u'call', u'``', u'toboggan', u"''", u',', u'which', u'conserve', u'energy', u'while', u'move', u'quickly', u'.'], u'pos': [u'NNS', u'CC', u'NN', u'IN', u'PRP$', u'NNS', u'CC', u'NN', u'IN', u'PRP$', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBN', u'``', u'VBG', u"''", u',', u'WDT', u'VBZ', u'NN', u'IN', u'VBG', u'RB', u'.'], u'char_offsets': [[4096, 4104], [4105, 4111], [4112, 4118], [4119, 4121], [4122, 4127], [4128, 4132], [4133, 4135], [4136, 4141], [4142, 4144], [4145, 4150], [4151, 4158], [4159, 4165], [4166, 4169], [4170, 4174], [4174, 4175], [4176, 4177], [4178, 4186], [4187, 4193], [4194, 4195], [4195, 4206], [4206, 4207], [4207, 4208], [4209, 4214], [4215, 4224], [4225, 4231], [4232, 4237], [4238, 4244], [4245, 4252], [4252, 4253]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.086068026721477509, {u'tokens': [u'When', u'mothers', u'lose', u'a', u'chick', u',', u'they', u'sometimes', u'attempt', u'to', u'``', u'steal', u"''", u'another', u'mother', u"'s", u'chick', u',', u'usually', u'unsuccessfully', u'as', u'other', u'females', u'in', u'the', u'vicinity', u'assist', u'the', u'defending', u'mother', u'in', u'keeping', u'her', u'chick', u'.'], u'lemmas': [u'when', u'mother', u'lose', u'a', u'chick', u',', u'they', u'sometimes', u'attempt', u'to', u'``', u'steal', u"''", u'another', u'mother', u"'s", u'chick', u',', u'usually', u'unsuccessfully', u'as', u'other', u'female', u'in', u'the', u'vicinity', u'assist', u'the', u'defend', u'mother', u'in', u'keep', u'she', u'chick', u'.'], u'pos': [u'WRB', u'NNS', u'VBP', u'DT', u'NN', u',', u'PRP', u'RB', u'VBP', u'TO', u'``', u'VB', u"''", u'DT', u'NN', u'POS', u'NN', u',', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'VB', u'DT', u'VBG', u'NN', u'IN', u'VBG', u'PRP$', u'NN', u'.'], u'char_offsets': [[6101, 6105], [6106, 6113], [6114, 6118], [6119, 6120], [6121, 6126], [6126, 6127], [6128, 6132], [6133, 6142], [6143, 6150], [6151, 6153], [6154, 6155], [6155, 6160], [6160, 6161], [6162, 6169], [6170, 6176], [6176, 6178], [6179, 6184], [6184, 6185], [6186, 6193], [6194, 6208], [6209, 6211], [6212, 6217], [6218, 6225], [6226, 6228], [6229, 6232], [6233, 6241], [6242, 6248], [6249, 6252], [6253, 6262], [6263, 6269], [6270, 6272], [6273, 6280], [6281, 6284], [6285, 6290], [6290, 6291]]}) 
answer: set([u'higher', u'waterbird', u'consider'])
candidate Sentence: (0.085883036255836487, {u'tokens': [u'Furthermore', u',', u'they', u'restrict', u'the', u'phylogenetic', u'taxon', u'Sphenisciformes', u'to', u'flightless', u'taxa', u',', u'and', u'establish', u'-LRB-', u'Clarke', u'et', u'al.', u'2003', u'-RRB-', u'the', u'phylogenetic', u'taxon', u'Pansphenisciformes', u'as', u'equivalent', u'to', u'the', u'Linnean', u'taxon', u'Sphenisciformes', u',', u'i.e.', u',', u'including', u'any', u'flying', u'basal', u'``', u'proto-penguins', u"''", u'to', u'be', u'discovered', u'eventually', u'.'], u'lemmas': [u'furthermore', u',', u'they', u'restrict', u'the', u'phylogenetic', u'taxon', u'sphenisciforme', u'to', u'flightless', u'taxa', u',', u'and', u'establish', u'-lrb-', u'Clarke', u'et', u'al.', u'2003', u'-rrb-', u'the', u'phylogenetic', u'taxon', u'pansphenisciforme', u'as', u'equivalent', u'to', u'the', u'linnean', u'taxon', u'sphenisciforme', u',', u'i.e.', u',', u'include', u'any', u'fly', u'basal', u'``', u'proto-penguin', u"''", u'to', u'be', u'discover', u'eventually', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'JJ', u'NN', u',', u'CC', u'VB', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u'DT', u'JJ', u'NN', u'NN', u'IN', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'NNS', u',', u'FW', u',', u'VBG', u'DT', u'VBG', u'JJ', u'``', u'NNS', u"''", u'TO', u'VB', u'VBN', u'RB', u'.'], u'char_offsets': [[7372, 7383], [7383, 7384], [7385, 7389], [7390, 7398], [7399, 7402], [7403, 7415], [7416, 7421], [7422, 7437], [7438, 7440], [7441, 7451], [7452, 7456], [7456, 7457], [7458, 7461], [7462, 7471], [7472, 7473], [7473, 7479], [7480, 7482], [7483, 7486], [7487, 7491], [7491, 7492], [7493, 7496], [7497, 7509], [7510, 7515], [7516, 7534], [7535, 7537], [7538, 7548], [7549, 7551], [7552, 7555], [7556, 7563], [7564, 7569], [7570, 7585], [7585, 7586], [7587, 7591], [7591, 7592], [7593, 7602], [7603, 7606], [7607, 7613], [7614, 7619], [7620, 7621], [7621, 7635], [7635, 7636], [7637, 7639], [7640, 7642], [7643, 7653], [7654, 7664], [7664, 7665]]}) 
answer: set([u'waterbird', u'consider', u'higher'])
candidate Sentence: (0.06139698252081871, {u'tokens': [u'Some', u'seminal', u'articles', u'about', u'penguin', u'prehistory', u'have', u'been', u'published', u'since', u'2005', u'-LRB-', u'Bertelli', u'&', u'Giannini', u'2005', u',', u'Baker', u'et', u'al.', u'2006', u',', u'Ksepka', u'et', u'al.', u'2006', u',', u'Slack', u'et', u'al.', u'2006', u'-RRB-', u',', u'the', u'evolution', u'of', u'the', u'living', u'genera', u'can', u'be', u'considered', u'resolved', u'by', u'now', u'.'], u'lemmas': [u'some', u'seminal', u'article', u'about', u'penguin', u'prehistory', u'have', u'be', u'publish', u'since', u'2005', u'-lrb-', u'Bertelli', u'&', u'Giannini', u'2005', u',', u'Baker', u'et', u'al.', u'2006', u',', u'Ksepka', u'et', u'al.', u'2006', u',', u'Slack', u'et', u'al.', u'2006', u'-rrb-', u',', u'the', u'evolution', u'of', u'the', u'living', u'genus', u'can', u'be', u'consider', u'resolve', u'by', u'now', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NN', u'NN', u'VBP', u'VBN', u'VBN', u'IN', u'CD', u'-LRB-', u'NNP', u'CC', u'NNP', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'MD', u'VB', u'VBN', u'VBN', u'IN', u'RB', u'.'], u'char_offsets': [[8213, 8217], [8218, 8225], [8226, 8234], [8235, 8240], [8241, 8248], [8249, 8259], [8260, 8264], [8265, 8269], [8270, 8279], [8280, 8285], [8286, 8290], [8291, 8292], [8292, 8300], [8301, 8302], [8303, 8311], [8312, 8316], [8316, 8317], [8318, 8323], [8324, 8326], [8327, 8330], [8331, 8335], [8335, 8336], [8337, 8343], [8344, 8346], [8347, 8350], [8351, 8355], [8355, 8356], [8357, 8362], [8363, 8365], [8366, 8369], [8370, 8374], [8374, 8375], [8375, 8376], [8377, 8380], [8381, 8390], [8391, 8393], [8394, 8397], [8398, 8404], [8405, 8411], [8412, 8415], [8416, 8418], [8419, 8429], [8430, 8438], [8439, 8441], [8442, 8445], [8445, 8446]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.05971657857298851, {u'tokens': [u'Some', u'sources', u'consider', u'the', u'White-flippered', u'Penguin', u'a', u'separate', u'Eudyptula', u'species', u',', u'while', u'others', u'treat', u'it', u'as', u'a', u'subspecies', u'of', u'the', u'Little', u'Penguin', u'-LRB-', u'e.g.', u'Williams', u',', u'1995', u';', u'Davis', u'&', u'Renner', u',', u'2003', u'-RRB-', u';', u'the', u'actual', u'situation', u'seems', u'to', u'be', u'more', u'complicated', u'-LRB-', u'Banks', u'et', u'al.', u'2002', u'-RRB-', u'.'], u'lemmas': [u'some', u'source', u'consider', u'the', u'white-flippered', u'Penguin', u'a', u'separate', u'Eudyptula', u'species', u',', u'while', u'other', u'treat', u'it', u'as', u'a', u'subspecy', u'of', u'the', u'little', u'penguin', u'-lrb-', u'e.g.', u'Williams', u',', u'1995', u';', u'Davis', u'&', u'Renner', u',', u'2003', u'-rrb-', u';', u'the', u'actual', u'situation', u'seem', u'to', u'be', u'more', u'complicated', u'-lrb-', u'bank', u'et', u'al.', u'2002', u'-rrb-', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'DT', u'JJ', u'NNP', u'DT', u'JJ', u'NNP', u'NNS', u',', u'IN', u'NNS', u'VBP', u'PRP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'FW', u'NNP', u',', u'CD', u':', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u':', u'DT', u'JJ', u'NN', u'VBZ', u'TO', u'VB', u'RBR', u'JJ', u'-LRB-', u'NNS', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[384, 388], [389, 396], [397, 405], [406, 409], [410, 425], [426, 433], [434, 435], [436, 444], [445, 454], [455, 462], [462, 463], [464, 469], [470, 476], [477, 482], [483, 485], [486, 488], [489, 490], [491, 501], [502, 504], [505, 508], [509, 515], [516, 523], [524, 525], [525, 529], [530, 538], [538, 539], [540, 544], [544, 545], [546, 551], [552, 553], [554, 560], [560, 561], [562, 566], [566, 567], [567, 568], [569, 572], [573, 579], [580, 589], [590, 595], [596, 598], [599, 601], [602, 606], [607, 618], [619, 620], [620, 625], [626, 628], [629, 632], [633, 637], [637, 638], [638, 639]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.046415511518716812, {u'tokens': [u'It', u'is', u'not', u'even', u'known', u'whether', u'the', u'gigantic', u'palaeeudyptines', u'constitute', u'a', u'monophyletic', u'lineage', u',', u'or', u'whether', u'gigantism', u'was', u'evolved', u'independently', u'in', u'a', u'much', u'restricted', u'Palaeeudyptinae', u'and', u'the', u'Anthropornithinae', u'-', u'were', u'they', u'considered', u'valid', u'-', u',', u'or', u'whether', u'there', u'was', u'a', u'wide', u'size', u'range', u'present', u'in', u'the', u'Palaeeudyptinae', u'as', u'delimited', u'as', u'usually', u'done', u'these', u'days', u'-LRB-', u'i.e.', u',', u'including', u'Anthropornis', u'nordenskjoeldi', u'-RRB-', u'-LRB-', u'Ksepka', u'et', u'al.', u'2006', u'-RRB-', u'.'], u'lemmas': [u'it', u'be', u'not', u'even', u'know', u'whether', u'the', u'gigantic', u'palaeeudyptine', u'constitute', u'a', u'monophyletic', u'lineage', u',', u'or', u'whether', u'gigantism', u'be', u'evolve', u'independently', u'in', u'a', u'much', u'restricted', u'palaeeudyptina', u'and', u'the', u'Anthropornithinae', u'-', u'be', u'they', u'consider', u'valid', u'-', u',', u'or', u'whether', u'there', u'be', u'a', u'wide', u'size', u'range', u'present', u'in', u'the', u'Palaeeudyptinae', u'as', u'delimit', u'as', u'usually', u'do', u'these', u'day', u'-lrb-', u'i.e.', u',', u'include', u'Anthropornis', u'nordenskjoeldus', u'-rrb-', u'-lrb-', u'ksepka', u'et', u'al.', u'2006', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u',', u'CC', u'IN', u'NN', u'VBD', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'DT', u'NNP', u':', u'VBD', u'PRP', u'VBD', u'JJ', u':', u',', u'CC', u'IN', u'EX', u'VBD', u'DT', u'JJ', u'NN', u'NN', u'JJ', u'IN', u'DT', u'NNP', u'IN', u'VBN', u'IN', u'RB', u'VBN', u'DT', u'NNS', u'-LRB-', u'FW', u',', u'VBG', u'NNP', u'NNS', u'-RRB-', u'-LRB-', u'FW', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[11657, 11659], [11660, 11662], [11663, 11666], [11667, 11671], [11672, 11677], [11678, 11685], [11686, 11689], [11690, 11698], [11699, 11714], [11715, 11725], [11726, 11727], [11728, 11740], [11741, 11748], [11748, 11749], [11750, 11752], [11753, 11760], [11761, 11770], [11771, 11774], [11775, 11782], [11783, 11796], [11797, 11799], [11800, 11801], [11802, 11806], [11807, 11817], [11818, 11833], [11834, 11837], [11838, 11841], [11842, 11859], [11860, 11861], [11862, 11866], [11867, 11871], [11872, 11882], [11883, 11888], [11889, 11890], [11890, 11891], [11892, 11894], [11895, 11902], [11903, 11908], [11909, 11912], [11913, 11914], [11915, 11919], [11920, 11924], [11925, 11930], [11931, 11938], [11939, 11941], [11942, 11945], [11946, 11961], [11962, 11964], [11965, 11974], [11975, 11977], [11978, 11985], [11986, 11990], [11991, 11996], [11997, 12001], [12002, 12003], [12003, 12007], [12007, 12008], [12009, 12018], [12019, 12031], [12032, 12046], [12046, 12047], [12048, 12049], [12049, 12055], [12056, 12058], [12059, 12062], [12063, 12067], [12067, 12068], [12068, 12069]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.045494124293327332, {u'tokens': [u'Some', u'-LRB-', u'e.g.', u'Mayr', u'2005', u'-RRB-', u'think', u'the', u'penguin-like', u'plotopterids', u'-LRB-', u'usually', u'considered', u'relatives', u'of', u'anhingas', u'and', u'cormorants', u'-RRB-', u'may', u'actually', u'be', u'a', u'sister', u'group', u'of', u'the', u'penguins', u',', u'and', u'that', u'penguins', u'may', u'have', u'ultimately', u'shared', u'a', u'common', u'ancestor', u'with', u'the', u'Pelecaniformes', u'and', u'consequently', u'would', u'have', u'to', u'be', u'included', u'in', u'that', u'order', u',', u'or', u'that', u'the', u'plotopterids', u'were', u'not', u'as', u'close', u'to', u'other', u'pelecaniforms', u'as', u'generally', u'assumed', u',', u'which', u'would', u'necessitate', u'splitting', u'the', u'traditional', u'Pelecaniformes', u'in', u'three', u'.'], u'lemmas': [u'some', u'-lrb-', u'e.g.', u'mayr', u'2005', u'-rrb-', u'think', u'the', u'penguin-like', u'plotopterid', u'-lrb-', u'usually', u'consider', u'relative', u'of', u'anhinga', u'and', u'cormorant', u'-rrb-', u'may', u'actually', u'be', u'a', u'sister', u'group', u'of', u'the', u'penguin', u',', u'and', u'that', u'penguin', u'may', u'have', u'ultimately', u'share', u'a', u'common', u'ancestor', u'with', u'the', u'Pelecaniformes', u'and', u'consequently', u'would', u'have', u'to', u'be', u'include', u'in', u'that', u'order', u',', u'or', u'that', u'the', u'plotopterid', u'be', u'not', u'as', u'close', u'to', u'other', u'pelecaniform', u'as', u'generally', u'assume', u',', u'which', u'would', u'necessitate', u'splitting', u'the', u'traditional', u'Pelecaniformes', u'in', u'three', u'.'], u'pos': [u'DT', u'-LRB-', u'FW', u'FW', u'CD', u'-RRB-', u'VBP', u'DT', u'JJ', u'NNS', u'-LRB-', u'RB', u'VBN', u'NNS', u'IN', u'NNS', u'CC', u'NNS', u'-RRB-', u'MD', u'RB', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNS', u',', u'CC', u'IN', u'NNS', u'MD', u'VB', u'RB', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNPS', u'CC', u'RB', u'MD', u'VB', u'TO', u'VB', u'VBN', u'IN', u'DT', u'NN', u',', u'CC', u'IN', u'DT', u'NNS', u'VBD', u'RB', u'RB', u'JJ', u'TO', u'JJ', u'NNS', u'IN', u'RB', u'VBN', u',', u'WDT', u'MD', u'VB', u'NN', u'DT', u'JJ', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[18677, 18681], [18682, 18683], [18683, 18687], [18688, 18692], [18693, 18697], [18697, 18698], [18699, 18704], [18705, 18708], [18709, 18721], [18722, 18734], [18735, 18736], [18736, 18743], [18744, 18754], [18755, 18764], [18765, 18767], [18768, 18776], [18777, 18780], [18781, 18791], [18791, 18792], [18793, 18796], [18797, 18805], [18806, 18808], [18809, 18810], [18811, 18817], [18818, 18823], [18824, 18826], [18827, 18830], [18831, 18839], [18839, 18840], [18841, 18844], [18845, 18849], [18850, 18858], [18859, 18862], [18863, 18867], [18868, 18878], [18879, 18885], [18886, 18887], [18888, 18894], [18895, 18903], [18904, 18908], [18909, 18912], [18913, 18927], [18928, 18931], [18932, 18944], [18945, 18950], [18951, 18955], [18956, 18958], [18959, 18961], [18962, 18970], [18971, 18973], [18974, 18978], [18979, 18984], [18984, 18985], [18986, 18988], [18989, 18993], [18994, 18997], [18998, 19010], [19011, 19015], [19016, 19019], [19020, 19022], [19023, 19028], [19029, 19031], [19032, 19037], [19038, 19051], [19052, 19054], [19055, 19064], [19065, 19072], [19072, 19073], [19074, 19079], [19080, 19085], [19086, 19097], [19098, 19107], [19108, 19111], [19112, 19123], [19124, 19138], [19139, 19141], [19142, 19147], [19147, 19148]]}) 
answer: set([u'waterbird', u'higher'])

Are penguins considered "higher waterbirds"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98200>.answer
_____________________________ test_yesno[param276] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98290>, (<src.tfidf.TF_IDF object at 0x10a153190>, set(['penguin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36797311902046204, {u'tokens': [u'What', u'seems', u'clear', u'is', u'that', u'penguins', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-LRB-', u'living', u'birds', u'except', u'paleognaths', u'and', u'fowl', u'-RRB-', u'which', u'comprises', u'what', u'is', u'sometimes', u'called', u'``', u'higher', u'waterbirds', u"''", u'to', u'distinguish', u'them', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'lemmas': [u'what', u'seem', u'clear', u'be', u'that', u'penguin', u'belong', u'to', u'a', u'clade', u'of', u'Neoaves', u'-lrb-', u'live', u'bird', u'except', u'paleognath', u'and', u'fowl', u'-rrb-', u'which', u'comprise', u'what', u'be', u'sometimes', u'call', u'``', u'higher', u'waterbird', u"''", u'to', u'distinguish', u'they', u'from', u'the', u'more', u'ancient', u'waterfowl', u'.'], u'pos': [u'WDT', u'VBZ', u'JJ', u'VBZ', u'IN', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'VBG', u'NNS', u'IN', u'NNS', u'CC', u'NN', u'-RRB-', u'WDT', u'VBZ', u'WP', u'VBZ', u'RB', u'VBN', u'``', u'JJR', u'NNS', u"''", u'TO', u'VB', u'PRP', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'.'], u'char_offsets': [[18091, 18095], [18096, 18101], [18102, 18107], [18108, 18110], [18111, 18115], [18116, 18124], [18125, 18131], [18132, 18134], [18135, 18136], [18137, 18142], [18143, 18145], [18146, 18153], [18154, 18155], [18155, 18161], [18162, 18167], [18168, 18174], [18175, 18186], [18187, 18190], [18191, 18195], [18195, 18196], [18197, 18202], [18203, 18212], [18213, 18217], [18218, 18220], [18221, 18230], [18231, 18237], [18238, 18239], [18239, 18245], [18246, 18256], [18256, 18257], [18258, 18260], [18261, 18272], [18273, 18277], [18278, 18282], [18283, 18286], [18287, 18291], [18292, 18299], [18300, 18309], [18309, 18310]]}) 
answer: set([u'consider'])
candidate Sentence: (0.19569998979568481, {u'tokens': [u'It', u'is', u'also', u'possible', u'that', u'penguin', u'comes', u'from', u'the', u'Latin', u'pinguis', u',', u'``', u'fat', u"''", u'.'], u'lemmas': [u'it', u'be', u'also', u'possible', u'that', u'penguin', u'come', u'from', u'the', u'latin', u'pingui', u',', u'``', u'fat', u"''", u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'JJ', u'IN', u'NN', u'VBZ', u'IN', u'DT', u'JJ', u'NNS', u',', u'``', u'JJ', u"''", u'.'], u'char_offsets': [[19976, 19978], [19979, 19981], [19982, 19986], [19987, 19995], [19996, 20000], [20001, 20008], [20009, 20014], [20015, 20019], [20020, 20023], [20024, 20029], [20030, 20037], [20037, 20038], [20039, 20040], [20040, 20043], [20043, 20044], [20044, 20045]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.1341647207736969, {u'tokens': [u'Another', u'theory', u'states', u'that', u'the', u'word', u'is', u'an', u'alteration', u'of', u'``', u'pen-wing', u"''", u',', u'with', u'reference', u'to', u'the', u'rudimentary', u'wings', u'of', u'both', u'Great', u'Auks', u'and', u'penguins', u',', u'but', u'there', u'is', u'no', u'evidence', u'for', u'this', u'.'], u'lemmas': [u'another', u'theory', u'state', u'that', u'the', u'word', u'be', u'a', u'alteration', u'of', u'``', u'pen-wing', u"''", u',', u'with', u'reference', u'to', u'the', u'rudimentary', u'wing', u'of', u'both', u'great', u'Auks', u'and', u'penguin', u',', u'but', u'there', u'be', u'no', u'evidence', u'for', u'this', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'``', u'JJ', u"''", u',', u'IN', u'NN', u'TO', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNPS', u'CC', u'NNS', u',', u'CC', u'EX', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'.'], u'char_offsets': [[20291, 20298], [20299, 20305], [20306, 20312], [20313, 20317], [20318, 20321], [20322, 20326], [20327, 20329], [20330, 20332], [20333, 20343], [20344, 20346], [20347, 20348], [20348, 20356], [20356, 20357], [20357, 20358], [20359, 20363], [20364, 20373], [20374, 20376], [20377, 20380], [20381, 20392], [20393, 20398], [20399, 20401], [20402, 20406], [20407, 20412], [20413, 20417], [20418, 20421], [20422, 20430], [20430, 20431], [20432, 20435], [20436, 20441], [20442, 20444], [20445, 20447], [20448, 20456], [20457, 20460], [20461, 20465], [20465, 20466]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.12255123257637024, {u'tokens': [u'Penguins', u'either', u'waddle', u'on', u'their', u'feet', u'or', u'slide', u'on', u'their', u'bellies', u'across', u'the', u'snow', u',', u'a', u'movement', u'called', u'``', u'tobogganing', u"''", u',', u'which', u'conserves', u'energy', u'while', u'moving', u'quickly', u'.'], u'lemmas': [u'penguin', u'either', u'waddle', u'on', u'they', u'foot', u'or', u'slide', u'on', u'they', u'belly', u'across', u'the', u'snow', u',', u'a', u'movement', u'call', u'``', u'toboggan', u"''", u',', u'which', u'conserve', u'energy', u'while', u'move', u'quickly', u'.'], u'pos': [u'NNS', u'CC', u'NN', u'IN', u'PRP$', u'NNS', u'CC', u'NN', u'IN', u'PRP$', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBN', u'``', u'VBG', u"''", u',', u'WDT', u'VBZ', u'NN', u'IN', u'VBG', u'RB', u'.'], u'char_offsets': [[4096, 4104], [4105, 4111], [4112, 4118], [4119, 4121], [4122, 4127], [4128, 4132], [4133, 4135], [4136, 4141], [4142, 4144], [4145, 4150], [4151, 4158], [4159, 4165], [4166, 4169], [4170, 4174], [4174, 4175], [4176, 4177], [4178, 4186], [4187, 4193], [4194, 4195], [4195, 4206], [4206, 4207], [4207, 4208], [4209, 4214], [4215, 4224], [4225, 4231], [4232, 4237], [4238, 4244], [4245, 4252], [4252, 4253]]}) 
answer: set([u'higher', u'consider', u'waterbird'])
candidate Sentence: (0.086068026721477509, {u'tokens': [u'When', u'mothers', u'lose', u'a', u'chick', u',', u'they', u'sometimes', u'attempt', u'to', u'``', u'steal', u"''", u'another', u'mother', u"'s", u'chick', u',', u'usually', u'unsuccessfully', u'as', u'other', u'females', u'in', u'the', u'vicinity', u'assist', u'the', u'defending', u'mother', u'in', u'keeping', u'her', u'chick', u'.'], u'lemmas': [u'when', u'mother', u'lose', u'a', u'chick', u',', u'they', u'sometimes', u'attempt', u'to', u'``', u'steal', u"''", u'another', u'mother', u"'s", u'chick', u',', u'usually', u'unsuccessfully', u'as', u'other', u'female', u'in', u'the', u'vicinity', u'assist', u'the', u'defend', u'mother', u'in', u'keep', u'she', u'chick', u'.'], u'pos': [u'WRB', u'NNS', u'VBP', u'DT', u'NN', u',', u'PRP', u'RB', u'VBP', u'TO', u'``', u'VB', u"''", u'DT', u'NN', u'POS', u'NN', u',', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'VB', u'DT', u'VBG', u'NN', u'IN', u'VBG', u'PRP$', u'NN', u'.'], u'char_offsets': [[6101, 6105], [6106, 6113], [6114, 6118], [6119, 6120], [6121, 6126], [6126, 6127], [6128, 6132], [6133, 6142], [6143, 6150], [6151, 6153], [6154, 6155], [6155, 6160], [6160, 6161], [6162, 6169], [6170, 6176], [6176, 6178], [6179, 6184], [6184, 6185], [6186, 6193], [6194, 6208], [6209, 6211], [6212, 6217], [6218, 6225], [6226, 6228], [6229, 6232], [6233, 6241], [6242, 6248], [6249, 6252], [6253, 6262], [6263, 6269], [6270, 6272], [6273, 6280], [6281, 6284], [6285, 6290], [6290, 6291]]}) 
answer: set([u'higher', u'waterbird', u'consider'])
candidate Sentence: (0.085883036255836487, {u'tokens': [u'Furthermore', u',', u'they', u'restrict', u'the', u'phylogenetic', u'taxon', u'Sphenisciformes', u'to', u'flightless', u'taxa', u',', u'and', u'establish', u'-LRB-', u'Clarke', u'et', u'al.', u'2003', u'-RRB-', u'the', u'phylogenetic', u'taxon', u'Pansphenisciformes', u'as', u'equivalent', u'to', u'the', u'Linnean', u'taxon', u'Sphenisciformes', u',', u'i.e.', u',', u'including', u'any', u'flying', u'basal', u'``', u'proto-penguins', u"''", u'to', u'be', u'discovered', u'eventually', u'.'], u'lemmas': [u'furthermore', u',', u'they', u'restrict', u'the', u'phylogenetic', u'taxon', u'sphenisciforme', u'to', u'flightless', u'taxa', u',', u'and', u'establish', u'-lrb-', u'Clarke', u'et', u'al.', u'2003', u'-rrb-', u'the', u'phylogenetic', u'taxon', u'pansphenisciforme', u'as', u'equivalent', u'to', u'the', u'linnean', u'taxon', u'sphenisciforme', u',', u'i.e.', u',', u'include', u'any', u'fly', u'basal', u'``', u'proto-penguin', u"''", u'to', u'be', u'discover', u'eventually', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'JJ', u'NN', u',', u'CC', u'VB', u'-LRB-', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u'DT', u'JJ', u'NN', u'NN', u'IN', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'NNS', u',', u'FW', u',', u'VBG', u'DT', u'VBG', u'JJ', u'``', u'NNS', u"''", u'TO', u'VB', u'VBN', u'RB', u'.'], u'char_offsets': [[7372, 7383], [7383, 7384], [7385, 7389], [7390, 7398], [7399, 7402], [7403, 7415], [7416, 7421], [7422, 7437], [7438, 7440], [7441, 7451], [7452, 7456], [7456, 7457], [7458, 7461], [7462, 7471], [7472, 7473], [7473, 7479], [7480, 7482], [7483, 7486], [7487, 7491], [7491, 7492], [7493, 7496], [7497, 7509], [7510, 7515], [7516, 7534], [7535, 7537], [7538, 7548], [7549, 7551], [7552, 7555], [7556, 7563], [7564, 7569], [7570, 7585], [7585, 7586], [7587, 7591], [7591, 7592], [7593, 7602], [7603, 7606], [7607, 7613], [7614, 7619], [7620, 7621], [7621, 7635], [7635, 7636], [7637, 7639], [7640, 7642], [7643, 7653], [7654, 7664], [7664, 7665]]}) 
answer: set([u'waterbird', u'consider', u'higher'])
candidate Sentence: (0.06139698252081871, {u'tokens': [u'Some', u'seminal', u'articles', u'about', u'penguin', u'prehistory', u'have', u'been', u'published', u'since', u'2005', u'-LRB-', u'Bertelli', u'&', u'Giannini', u'2005', u',', u'Baker', u'et', u'al.', u'2006', u',', u'Ksepka', u'et', u'al.', u'2006', u',', u'Slack', u'et', u'al.', u'2006', u'-RRB-', u',', u'the', u'evolution', u'of', u'the', u'living', u'genera', u'can', u'be', u'considered', u'resolved', u'by', u'now', u'.'], u'lemmas': [u'some', u'seminal', u'article', u'about', u'penguin', u'prehistory', u'have', u'be', u'publish', u'since', u'2005', u'-lrb-', u'Bertelli', u'&', u'Giannini', u'2005', u',', u'Baker', u'et', u'al.', u'2006', u',', u'Ksepka', u'et', u'al.', u'2006', u',', u'Slack', u'et', u'al.', u'2006', u'-rrb-', u',', u'the', u'evolution', u'of', u'the', u'living', u'genus', u'can', u'be', u'consider', u'resolve', u'by', u'now', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'IN', u'NN', u'NN', u'VBP', u'VBN', u'VBN', u'IN', u'CD', u'-LRB-', u'NNP', u'CC', u'NNP', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u',', u'NNP', u'FW', u'FW', u'CD', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'MD', u'VB', u'VBN', u'VBN', u'IN', u'RB', u'.'], u'char_offsets': [[8213, 8217], [8218, 8225], [8226, 8234], [8235, 8240], [8241, 8248], [8249, 8259], [8260, 8264], [8265, 8269], [8270, 8279], [8280, 8285], [8286, 8290], [8291, 8292], [8292, 8300], [8301, 8302], [8303, 8311], [8312, 8316], [8316, 8317], [8318, 8323], [8324, 8326], [8327, 8330], [8331, 8335], [8335, 8336], [8337, 8343], [8344, 8346], [8347, 8350], [8351, 8355], [8355, 8356], [8357, 8362], [8363, 8365], [8366, 8369], [8370, 8374], [8374, 8375], [8375, 8376], [8377, 8380], [8381, 8390], [8391, 8393], [8394, 8397], [8398, 8404], [8405, 8411], [8412, 8415], [8416, 8418], [8419, 8429], [8430, 8438], [8439, 8441], [8442, 8445], [8445, 8446]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.05971657857298851, {u'tokens': [u'Some', u'sources', u'consider', u'the', u'White-flippered', u'Penguin', u'a', u'separate', u'Eudyptula', u'species', u',', u'while', u'others', u'treat', u'it', u'as', u'a', u'subspecies', u'of', u'the', u'Little', u'Penguin', u'-LRB-', u'e.g.', u'Williams', u',', u'1995', u';', u'Davis', u'&', u'Renner', u',', u'2003', u'-RRB-', u';', u'the', u'actual', u'situation', u'seems', u'to', u'be', u'more', u'complicated', u'-LRB-', u'Banks', u'et', u'al.', u'2002', u'-RRB-', u'.'], u'lemmas': [u'some', u'source', u'consider', u'the', u'white-flippered', u'Penguin', u'a', u'separate', u'Eudyptula', u'species', u',', u'while', u'other', u'treat', u'it', u'as', u'a', u'subspecy', u'of', u'the', u'little', u'penguin', u'-lrb-', u'e.g.', u'Williams', u',', u'1995', u';', u'Davis', u'&', u'Renner', u',', u'2003', u'-rrb-', u';', u'the', u'actual', u'situation', u'seem', u'to', u'be', u'more', u'complicated', u'-lrb-', u'bank', u'et', u'al.', u'2002', u'-rrb-', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'DT', u'JJ', u'NNP', u'DT', u'JJ', u'NNP', u'NNS', u',', u'IN', u'NNS', u'VBP', u'PRP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'FW', u'NNP', u',', u'CD', u':', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u':', u'DT', u'JJ', u'NN', u'VBZ', u'TO', u'VB', u'RBR', u'JJ', u'-LRB-', u'NNS', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[384, 388], [389, 396], [397, 405], [406, 409], [410, 425], [426, 433], [434, 435], [436, 444], [445, 454], [455, 462], [462, 463], [464, 469], [470, 476], [477, 482], [483, 485], [486, 488], [489, 490], [491, 501], [502, 504], [505, 508], [509, 515], [516, 523], [524, 525], [525, 529], [530, 538], [538, 539], [540, 544], [544, 545], [546, 551], [552, 553], [554, 560], [560, 561], [562, 566], [566, 567], [567, 568], [569, 572], [573, 579], [580, 589], [590, 595], [596, 598], [599, 601], [602, 606], [607, 618], [619, 620], [620, 625], [626, 628], [629, 632], [633, 637], [637, 638], [638, 639]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.046415511518716812, {u'tokens': [u'It', u'is', u'not', u'even', u'known', u'whether', u'the', u'gigantic', u'palaeeudyptines', u'constitute', u'a', u'monophyletic', u'lineage', u',', u'or', u'whether', u'gigantism', u'was', u'evolved', u'independently', u'in', u'a', u'much', u'restricted', u'Palaeeudyptinae', u'and', u'the', u'Anthropornithinae', u'-', u'were', u'they', u'considered', u'valid', u'-', u',', u'or', u'whether', u'there', u'was', u'a', u'wide', u'size', u'range', u'present', u'in', u'the', u'Palaeeudyptinae', u'as', u'delimited', u'as', u'usually', u'done', u'these', u'days', u'-LRB-', u'i.e.', u',', u'including', u'Anthropornis', u'nordenskjoeldi', u'-RRB-', u'-LRB-', u'Ksepka', u'et', u'al.', u'2006', u'-RRB-', u'.'], u'lemmas': [u'it', u'be', u'not', u'even', u'know', u'whether', u'the', u'gigantic', u'palaeeudyptine', u'constitute', u'a', u'monophyletic', u'lineage', u',', u'or', u'whether', u'gigantism', u'be', u'evolve', u'independently', u'in', u'a', u'much', u'restricted', u'palaeeudyptina', u'and', u'the', u'Anthropornithinae', u'-', u'be', u'they', u'consider', u'valid', u'-', u',', u'or', u'whether', u'there', u'be', u'a', u'wide', u'size', u'range', u'present', u'in', u'the', u'Palaeeudyptinae', u'as', u'delimit', u'as', u'usually', u'do', u'these', u'day', u'-lrb-', u'i.e.', u',', u'include', u'Anthropornis', u'nordenskjoeldus', u'-rrb-', u'-lrb-', u'ksepka', u'et', u'al.', u'2006', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u',', u'CC', u'IN', u'NN', u'VBD', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'DT', u'NNP', u':', u'VBD', u'PRP', u'VBD', u'JJ', u':', u',', u'CC', u'IN', u'EX', u'VBD', u'DT', u'JJ', u'NN', u'NN', u'JJ', u'IN', u'DT', u'NNP', u'IN', u'VBN', u'IN', u'RB', u'VBN', u'DT', u'NNS', u'-LRB-', u'FW', u',', u'VBG', u'NNP', u'NNS', u'-RRB-', u'-LRB-', u'FW', u'FW', u'FW', u'CD', u'-RRB-', u'.'], u'char_offsets': [[11657, 11659], [11660, 11662], [11663, 11666], [11667, 11671], [11672, 11677], [11678, 11685], [11686, 11689], [11690, 11698], [11699, 11714], [11715, 11725], [11726, 11727], [11728, 11740], [11741, 11748], [11748, 11749], [11750, 11752], [11753, 11760], [11761, 11770], [11771, 11774], [11775, 11782], [11783, 11796], [11797, 11799], [11800, 11801], [11802, 11806], [11807, 11817], [11818, 11833], [11834, 11837], [11838, 11841], [11842, 11859], [11860, 11861], [11862, 11866], [11867, 11871], [11872, 11882], [11883, 11888], [11889, 11890], [11890, 11891], [11892, 11894], [11895, 11902], [11903, 11908], [11909, 11912], [11913, 11914], [11915, 11919], [11920, 11924], [11925, 11930], [11931, 11938], [11939, 11941], [11942, 11945], [11946, 11961], [11962, 11964], [11965, 11974], [11975, 11977], [11978, 11985], [11986, 11990], [11991, 11996], [11997, 12001], [12002, 12003], [12003, 12007], [12007, 12008], [12009, 12018], [12019, 12031], [12032, 12046], [12046, 12047], [12048, 12049], [12049, 12055], [12056, 12058], [12059, 12062], [12063, 12067], [12067, 12068], [12068, 12069]]}) 
answer: set([u'waterbird', u'higher'])
candidate Sentence: (0.045494124293327332, {u'tokens': [u'Some', u'-LRB-', u'e.g.', u'Mayr', u'2005', u'-RRB-', u'think', u'the', u'penguin-like', u'plotopterids', u'-LRB-', u'usually', u'considered', u'relatives', u'of', u'anhingas', u'and', u'cormorants', u'-RRB-', u'may', u'actually', u'be', u'a', u'sister', u'group', u'of', u'the', u'penguins', u',', u'and', u'that', u'penguins', u'may', u'have', u'ultimately', u'shared', u'a', u'common', u'ancestor', u'with', u'the', u'Pelecaniformes', u'and', u'consequently', u'would', u'have', u'to', u'be', u'included', u'in', u'that', u'order', u',', u'or', u'that', u'the', u'plotopterids', u'were', u'not', u'as', u'close', u'to', u'other', u'pelecaniforms', u'as', u'generally', u'assumed', u',', u'which', u'would', u'necessitate', u'splitting', u'the', u'traditional', u'Pelecaniformes', u'in', u'three', u'.'], u'lemmas': [u'some', u'-lrb-', u'e.g.', u'mayr', u'2005', u'-rrb-', u'think', u'the', u'penguin-like', u'plotopterid', u'-lrb-', u'usually', u'consider', u'relative', u'of', u'anhinga', u'and', u'cormorant', u'-rrb-', u'may', u'actually', u'be', u'a', u'sister', u'group', u'of', u'the', u'penguin', u',', u'and', u'that', u'penguin', u'may', u'have', u'ultimately', u'share', u'a', u'common', u'ancestor', u'with', u'the', u'Pelecaniformes', u'and', u'consequently', u'would', u'have', u'to', u'be', u'include', u'in', u'that', u'order', u',', u'or', u'that', u'the', u'plotopterid', u'be', u'not', u'as', u'close', u'to', u'other', u'pelecaniform', u'as', u'generally', u'assume', u',', u'which', u'would', u'necessitate', u'splitting', u'the', u'traditional', u'Pelecaniformes', u'in', u'three', u'.'], u'pos': [u'DT', u'-LRB-', u'FW', u'FW', u'CD', u'-RRB-', u'VBP', u'DT', u'JJ', u'NNS', u'-LRB-', u'RB', u'VBN', u'NNS', u'IN', u'NNS', u'CC', u'NNS', u'-RRB-', u'MD', u'RB', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNS', u',', u'CC', u'IN', u'NNS', u'MD', u'VB', u'RB', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNPS', u'CC', u'RB', u'MD', u'VB', u'TO', u'VB', u'VBN', u'IN', u'DT', u'NN', u',', u'CC', u'IN', u'DT', u'NNS', u'VBD', u'RB', u'RB', u'JJ', u'TO', u'JJ', u'NNS', u'IN', u'RB', u'VBN', u',', u'WDT', u'MD', u'VB', u'NN', u'DT', u'JJ', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[18677, 18681], [18682, 18683], [18683, 18687], [18688, 18692], [18693, 18697], [18697, 18698], [18699, 18704], [18705, 18708], [18709, 18721], [18722, 18734], [18735, 18736], [18736, 18743], [18744, 18754], [18755, 18764], [18765, 18767], [18768, 18776], [18777, 18780], [18781, 18791], [18791, 18792], [18793, 18796], [18797, 18805], [18806, 18808], [18809, 18810], [18811, 18817], [18818, 18823], [18824, 18826], [18827, 18830], [18831, 18839], [18839, 18840], [18841, 18844], [18845, 18849], [18850, 18858], [18859, 18862], [18863, 18867], [18868, 18878], [18879, 18885], [18886, 18887], [18888, 18894], [18895, 18903], [18904, 18908], [18909, 18912], [18913, 18927], [18928, 18931], [18932, 18944], [18945, 18950], [18951, 18955], [18956, 18958], [18959, 18961], [18962, 18970], [18971, 18973], [18974, 18978], [18979, 18984], [18984, 18985], [18986, 18988], [18989, 18993], [18994, 18997], [18998, 19010], [19011, 19015], [19016, 19019], [19020, 19022], [19023, 19028], [19029, 19031], [19032, 19037], [19038, 19051], [19052, 19054], [19055, 19064], [19065, 19072], [19072, 19073], [19074, 19079], [19080, 19085], [19086, 19097], [19098, 19107], [19108, 19111], [19112, 19123], [19124, 19138], [19139, 19141], [19142, 19147], [19147, 19148]]}) 
answer: set([u'waterbird', u'higher'])

Are penguins considered "higher waterbirds"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98290>.answer
_____________________________ test_yesno[param277] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98320>, (<src.tfidf.TF_IDF object at 0x1061d2410>, set(['bear', 'polar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37155479192733765, {u'tokens': [u'Because', u'many', u'marine', u'mammal', u'populations', u'had', u'plummeted', u'due', u'to', u'over-hunting', u',', u'the', u'United', u'States', u'passed', u'the', u'federal', u'Marine', u'Mammal', u'Protection', u'Act', u'in', u'1972', u',', u'which', u'prohibited', u'the', u'harassment', u',', u'injuring', u'or', u'killing', u'of', u'all', u'marine', u'mammal', u'species', u',', u'including', u'polar', u'bears', u'.'], u'lemmas': [u'because', u'many', u'marine', u'mammal', u'population', u'have', u'plummet', u'due', u'to', u'over-hunting', u',', u'the', u'United', u'States', u'pass', u'the', u'federal', u'Marine', u'mammal', u'Protection', u'Act', u'in', u'1972', u',', u'which', u'prohibit', u'the', u'harassment', u',', u'injure', u'or', u'kill', u'of', u'all', u'marine', u'mammal', u'species', u',', u'include', u'polar', u'bear', u'.'], u'pos': [u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'VBD', u'VBN', u'JJ', u'TO', u'NN', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'JJ', u'NNP', u'JJ', u'NNP', u'NNP', u'IN', u'CD', u',', u'WDT', u'VBD', u'DT', u'NN', u',', u'VBG', u'CC', u'VBG', u'IN', u'DT', u'JJ', u'NN', u'NNS', u',', u'VBG', u'JJ', u'NNS', u'.'], u'char_offsets': [[23699, 23706], [23707, 23711], [23712, 23718], [23719, 23725], [23726, 23737], [23738, 23741], [23742, 23751], [23752, 23755], [23756, 23758], [23759, 23771], [23771, 23772], [23773, 23776], [23777, 23783], [23784, 23790], [23791, 23797], [23798, 23801], [23802, 23809], [23810, 23816], [23817, 23823], [23824, 23834], [23835, 23838], [23839, 23841], [23842, 23846], [23846, 23847], [23848, 23853], [23854, 23864], [23865, 23868], [23869, 23879], [23879, 23880], [23881, 23889], [23890, 23892], [23893, 23900], [23901, 23903], [23904, 23907], [23908, 23914], [23915, 23921], [23922, 23929], [23929, 23930], [23931, 23940], [23941, 23946], [23947, 23952], [23952, 23953]]}) 
answer: set([])
candidate Sentence: (0.24142472445964813, {u'tokens': [u'Though', u'it', u'spends', u'time', u'on', u'land', u'and', u'ice', u',', u'the', u'polar', u'bear', u'is', u'regarded', u'as', u'a', u'marine', u'mammal', u'due', u'to', u'its', u'intimate', u'relationship', u'with', u'the', u'sea', u'.'], u'lemmas': [u'though', u'it', u'spend', u'time', u'on', u'land', u'and', u'ice', u',', u'the', u'polar', u'bear', u'be', u'regard', u'as', u'a', u'marine', u'mammal', u'due', u'to', u'its', u'intimate', u'relationship', u'with', u'the', u'sea', u'.'], u'pos': [u'IN', u'PRP', u'VBZ', u'NN', u'IN', u'NN', u'CC', u'NN', u',', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'TO', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[8361, 8367], [8368, 8370], [8371, 8377], [8378, 8382], [8383, 8385], [8386, 8390], [8391, 8394], [8395, 8398], [8398, 8399], [8400, 8403], [8404, 8409], [8410, 8414], [8415, 8417], [8418, 8426], [8427, 8429], [8430, 8431], [8432, 8438], [8439, 8445], [8446, 8449], [8450, 8452], [8453, 8456], [8457, 8465], [8466, 8478], [8479, 8483], [8484, 8487], [8488, 8491], [8491, 8492]]}) 
answer: set([])
candidate Sentence: (0.23972487449645996, {u'tokens': [u'A', u'semi-aquatic', u'marine', u'mammal', u',', u'the', u'polar', u'bear', u'has', u'adapted', u'for', u'life', u'on', u'a', u'combination', u'of', u'land', u',', u'sea', u',', u'and', u'ice', u',', u'and', u'is', u'the', u'apex', u'predator', u'within', u'its', u'range', u'.'], u'lemmas': [u'a', u'semi-aquatic', u'marine', u'mammal', u',', u'the', u'polar', u'bear', u'have', u'adapt', u'for', u'life', u'on', u'a', u'combination', u'of', u'land', u',', u'sea', u',', u'and', u'ice', u',', u'and', u'be', u'the', u'apex', u'predator', u'within', u'its', u'range', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'CC', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[627, 628], [629, 641], [642, 648], [649, 655], [655, 656], [657, 660], [661, 666], [667, 671], [672, 675], [676, 683], [684, 687], [688, 692], [693, 695], [696, 697], [698, 709], [710, 712], [713, 717], [717, 718], [719, 722], [722, 723], [724, 727], [728, 731], [731, 732], [737, 740], [741, 743], [744, 747], [748, 752], [753, 761], [762, 768], [769, 772], [773, 778], [778, 779]]}) 
answer: set([])
candidate Sentence: (0.22259677946567535, {u'tokens': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammals', u',', u'polar', u'bears', u'do', u'not', u'shed', u'their', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'lemmas': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammal', u',', u'polar', u'bear', u'do', u'not', u'shed', u'they', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'pos': [u'RB', u',', u'IN', u'JJ', u'NNP', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NN', u'IN', u'DT', u'JJR', u'NN', u'TO', u'NN', u'PRP', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[3139, 3146], [3146, 3147], [3148, 3154], [3155, 3160], [3161, 3167], [3168, 3175], [3175, 3176], [3177, 3182], [3183, 3188], [3189, 3191], [3192, 3195], [3196, 3200], [3201, 3206], [3207, 3211], [3212, 3215], [3216, 3217], [3218, 3224], [3225, 3230], [3231, 3233], [3234, 3244], [3245, 3255], [3256, 3258], [3259, 3262], [3263, 3269], [3270, 3277], [3277, 3278]]}) 
answer: set([])
candidate Sentence: (0.19761334359645844, {u'tokens': [u'The', u'U.S.', u'began', u'regulating', u'in', u'1971', u'and', u'adopted', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u'in', u'1972', u'.'], u'lemmas': [u'the', u'U.S.', u'begin', u'regulate', u'in', u'1971', u'and', u'adopt', u'the', u'Marine', u'mammal', u'Protection', u'Act', u'in', u'1972', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'VBG', u'IN', u'CD', u'CC', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[20489, 20492], [20493, 20497], [20498, 20503], [20504, 20514], [20515, 20517], [20518, 20522], [20523, 20526], [20527, 20534], [20535, 20538], [20539, 20545], [20546, 20552], [20553, 20563], [20564, 20567], [20568, 20570], [20571, 20575], [20575, 20576]]}) 
answer: set([])
candidate Sentence: (0.18499946594238281, {u'tokens': [u'Only', u'female', u'polar', u'bears', u'enter', u'a', u'dormant', u'state', u'referred', u'to', u'as', u'``', u'denning', u"''", u'during', u'pregnancy', u',', u'though', u'their', u'body', u'temperature', u'does', u'not', u'decrease', u'during', u'this', u'period', u'as', u'it', u'would', u'for', u'a', u'typical', u'mammal', u'in', u'hibernation', u'.'], u'lemmas': [u'only', u'female', u'polar', u'bear', u'enter', u'a', u'dormant', u'state', u'refer', u'to', u'as', u'``', u'denning', u"''", u'during', u'pregnancy', u',', u'though', u'they', u'body', u'temperature', u'do', u'not', u'decrease', u'during', u'this', u'period', u'as', u'it', u'would', u'for', u'a', u'typical', u'mammal', u'in', u'hibernation', u'.'], u'pos': [u'RB', u'JJ', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'VBD', u'TO', u'IN', u'``', u'NN', u"''", u'IN', u'NN', u',', u'IN', u'PRP$', u'NN', u'NN', u'VBZ', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'PRP', u'MD', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[7300, 7304], [7305, 7311], [7312, 7317], [7318, 7323], [7324, 7329], [7330, 7331], [7332, 7339], [7340, 7345], [7346, 7354], [7355, 7357], [7358, 7360], [7361, 7362], [7362, 7369], [7369, 7370], [7371, 7377], [7378, 7387], [7387, 7388], [7389, 7395], [7396, 7401], [7402, 7406], [7407, 7418], [7419, 7423], [7424, 7427], [7428, 7436], [7437, 7443], [7444, 7448], [7449, 7455], [7456, 7458], [7459, 7461], [7462, 7467], [7468, 7471], [7472, 7473], [7474, 7481], [7482, 7488], [7489, 7491], [7492, 7503], [7503, 7504]]}) 
answer: set([])
candidate Sentence: (0.17572230100631714, {u'tokens': [u'The', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'What', u'You', u'Can', u'Do', u'to', u'Protect', u'Polar', u'Bears', u"''", u'In', u'1994', u',', u'the', u'United', u'States', u'modified', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u',', u'allowing', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophies', u'into', u'the', u'country', u'and', u'clearing', u'the', u'way', u'for', u'an', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'lemmas': [u'the', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'what', u'you', u'can', u'do', u'to', u'protect', u'Polar', u'Bears', u"''", u'in', u'1994', u',', u'the', u'United', u'States', u'modify', u'the', u'Marine', u'mammal', u'Protection', u'Act', u',', u'allow', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophy', u'into', u'the', u'country', u'and', u'clear', u'the', u'way', u'for', u'a', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'``', u'WP', u'PRP', u'MD', u'VB', u'TO', u'VB', u'NNP', u'NNPS', u"''", u'IN', u'CD', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[24042, 24045], [24046, 24052], [24053, 24060], [24061, 24063], [24064, 24067], [24068, 24074], [24075, 24081], [24082, 24083], [24083, 24087], [24088, 24091], [24092, 24095], [24096, 24098], [24099, 24101], [24102, 24109], [24110, 24115], [24116, 24121], [24121, 24122], [24123, 24125], [24126, 24130], [24130, 24131], [24132, 24135], [24136, 24142], [24143, 24149], [24150, 24158], [24159, 24162], [24163, 24169], [24170, 24176], [24177, 24187], [24188, 24191], [24191, 24192], [24193, 24201], [24202, 24205], [24206, 24217], [24218, 24220], [24221, 24233], [24234, 24239], [24240, 24244], [24245, 24253], [24254, 24258], [24259, 24262], [24263, 24270], [24271, 24274], [24275, 24283], [24284, 24287], [24288, 24291], [24292, 24295], [24296, 24298], [24299, 24307], [24308, 24310], [24311, 24316], [24317, 24321], [24322, 24329], [24329, 24330]]}) 
answer: set([])
candidate Sentence: (0.17214952409267426, {u'tokens': [u'Its', u'biology', u'is', u'specialized', u'to', u'digest', u'fat', u'from', u'marine', u'mammals', u'and', u'can', u'not', u'derive', u'much', u'nutrition', u'from', u'terrestrial', u'food', u'.'], u'lemmas': [u'its', u'biology', u'be', u'specialize', u'to', u'digest', u'fat', u'from', u'marine', u'mammal', u'and', u'can', u'not', u'derive', u'much', u'nutrition', u'from', u'terrestrial', u'food', u'.'], u'pos': [u'PRP$', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'MD', u'RB', u'VB', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[11733, 11736], [11737, 11744], [11745, 11747], [11748, 11759], [11760, 11762], [11763, 11769], [11770, 11773], [11774, 11778], [11779, 11785], [11786, 11793], [11794, 11797], [11798, 11801], [11801, 11804], [11805, 11811], [11812, 11816], [11817, 11826], [11827, 11831], [11832, 11843], [11844, 11848], [11848, 11849]]}) 
answer: set([])
candidate Sentence: (0.15716002881526947, {u'tokens': [u'Stirling', u'makes', u'no', u'mention', u'of', u'length', u',', u'these', u'are', u'from', u'SeaWorld', u'The', u'great', u'difference', u'in', u'body', u'size', u'makes', u'the', u'polar', u'bear', u'among', u'the', u'most', u'sexually', u'dimorphic', u'of', u'mammals', u',', u'surpassed', u'only', u'by', u'the', u'eared', u'seals', u'.'], u'lemmas': [u'Stirling', u'make', u'no', u'mention', u'of', u'length', u',', u'these', u'be', u'from', u'SeaWorld', u'the', u'great', u'difference', u'in', u'body', u'size', u'make', u'the', u'polar', u'bear', u'among', u'the', u'most', u'sexually', u'dimorphic', u'of', u'mammal', u',', u'surpass', u'only', u'by', u'the', u'eared', u'seal', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u',', u'DT', u'VBP', u'IN', u'NNP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'RBS', u'RB', u'JJ', u'IN', u'NNS', u',', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'NNS', u'.'], u'char_offsets': [[2145, 2153], [2154, 2159], [2160, 2162], [2163, 2170], [2171, 2173], [2174, 2180], [2180, 2181], [2182, 2187], [2188, 2191], [2192, 2196], [2198, 2206], [2208, 2211], [2212, 2217], [2218, 2228], [2229, 2231], [2232, 2236], [2237, 2241], [2242, 2247], [2248, 2251], [2252, 2257], [2258, 2262], [2263, 2268], [2269, 2272], [2273, 2277], [2278, 2286], [2287, 2296], [2297, 2299], [2300, 2307], [2307, 2308], [2309, 2318], [2319, 2323], [2324, 2326], [2327, 2330], [2331, 2336], [2337, 2342], [2342, 2343]]}) 
answer: set([])
candidate Sentence: (0.10673089325428009, {u'tokens': [u'The', u'polar', u'bear', u'-LRB-', u'Ursus', u'maritimus', u'-RRB-', u'is', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'lemmas': [u'the', u'polar', u'bear', u'-lrb-', u'Ursus', u'maritimus', u'-rrb-', u'be', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 14], [15, 16], [16, 21], [22, 31], [31, 32], [33, 35], [36, 37], [38, 42], [43, 49], [50, 52], [53, 56], [57, 63], [63, 64]]}) 
answer: set([u'mammal'])

Is polar bear a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa98320>.answer
_____________________________ test_yesno[param278] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa983b0>, (<src.tfidf.TF_IDF object at 0x1061d2410>, set(['bear', 'polar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa983b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37155479192733765, {u'tokens': [u'Because', u'many', u'marine', u'mammal', u'populations', u'had', u'plummeted', u'due', u'to', u'over-hunting', u',', u'the', u'United', u'States', u'passed', u'the', u'federal', u'Marine', u'Mammal', u'Protection', u'Act', u'in', u'1972', u',', u'which', u'prohibited', u'the', u'harassment', u',', u'injuring', u'or', u'killing', u'of', u'all', u'marine', u'mammal', u'species', u',', u'including', u'polar', u'bears', u'.'], u'lemmas': [u'because', u'many', u'marine', u'mammal', u'population', u'have', u'plummet', u'due', u'to', u'over-hunting', u',', u'the', u'United', u'States', u'pass', u'the', u'federal', u'Marine', u'mammal', u'Protection', u'Act', u'in', u'1972', u',', u'which', u'prohibit', u'the', u'harassment', u',', u'injure', u'or', u'kill', u'of', u'all', u'marine', u'mammal', u'species', u',', u'include', u'polar', u'bear', u'.'], u'pos': [u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'VBD', u'VBN', u'JJ', u'TO', u'NN', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'JJ', u'NNP', u'JJ', u'NNP', u'NNP', u'IN', u'CD', u',', u'WDT', u'VBD', u'DT', u'NN', u',', u'VBG', u'CC', u'VBG', u'IN', u'DT', u'JJ', u'NN', u'NNS', u',', u'VBG', u'JJ', u'NNS', u'.'], u'char_offsets': [[23699, 23706], [23707, 23711], [23712, 23718], [23719, 23725], [23726, 23737], [23738, 23741], [23742, 23751], [23752, 23755], [23756, 23758], [23759, 23771], [23771, 23772], [23773, 23776], [23777, 23783], [23784, 23790], [23791, 23797], [23798, 23801], [23802, 23809], [23810, 23816], [23817, 23823], [23824, 23834], [23835, 23838], [23839, 23841], [23842, 23846], [23846, 23847], [23848, 23853], [23854, 23864], [23865, 23868], [23869, 23879], [23879, 23880], [23881, 23889], [23890, 23892], [23893, 23900], [23901, 23903], [23904, 23907], [23908, 23914], [23915, 23921], [23922, 23929], [23929, 23930], [23931, 23940], [23941, 23946], [23947, 23952], [23952, 23953]]}) 
answer: set([])
candidate Sentence: (0.24142472445964813, {u'tokens': [u'Though', u'it', u'spends', u'time', u'on', u'land', u'and', u'ice', u',', u'the', u'polar', u'bear', u'is', u'regarded', u'as', u'a', u'marine', u'mammal', u'due', u'to', u'its', u'intimate', u'relationship', u'with', u'the', u'sea', u'.'], u'lemmas': [u'though', u'it', u'spend', u'time', u'on', u'land', u'and', u'ice', u',', u'the', u'polar', u'bear', u'be', u'regard', u'as', u'a', u'marine', u'mammal', u'due', u'to', u'its', u'intimate', u'relationship', u'with', u'the', u'sea', u'.'], u'pos': [u'IN', u'PRP', u'VBZ', u'NN', u'IN', u'NN', u'CC', u'NN', u',', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'TO', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[8361, 8367], [8368, 8370], [8371, 8377], [8378, 8382], [8383, 8385], [8386, 8390], [8391, 8394], [8395, 8398], [8398, 8399], [8400, 8403], [8404, 8409], [8410, 8414], [8415, 8417], [8418, 8426], [8427, 8429], [8430, 8431], [8432, 8438], [8439, 8445], [8446, 8449], [8450, 8452], [8453, 8456], [8457, 8465], [8466, 8478], [8479, 8483], [8484, 8487], [8488, 8491], [8491, 8492]]}) 
answer: set([])
candidate Sentence: (0.23972487449645996, {u'tokens': [u'A', u'semi-aquatic', u'marine', u'mammal', u',', u'the', u'polar', u'bear', u'has', u'adapted', u'for', u'life', u'on', u'a', u'combination', u'of', u'land', u',', u'sea', u',', u'and', u'ice', u',', u'and', u'is', u'the', u'apex', u'predator', u'within', u'its', u'range', u'.'], u'lemmas': [u'a', u'semi-aquatic', u'marine', u'mammal', u',', u'the', u'polar', u'bear', u'have', u'adapt', u'for', u'life', u'on', u'a', u'combination', u'of', u'land', u',', u'sea', u',', u'and', u'ice', u',', u'and', u'be', u'the', u'apex', u'predator', u'within', u'its', u'range', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'CC', u'VBZ', u'DT', u'NN', u'NN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[627, 628], [629, 641], [642, 648], [649, 655], [655, 656], [657, 660], [661, 666], [667, 671], [672, 675], [676, 683], [684, 687], [688, 692], [693, 695], [696, 697], [698, 709], [710, 712], [713, 717], [717, 718], [719, 722], [722, 723], [724, 727], [728, 731], [731, 732], [737, 740], [741, 743], [744, 747], [748, 752], [753, 761], [762, 768], [769, 772], [773, 778], [778, 779]]}) 
answer: set([])
candidate Sentence: (0.22259677946567535, {u'tokens': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammals', u',', u'polar', u'bears', u'do', u'not', u'shed', u'their', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'lemmas': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammal', u',', u'polar', u'bear', u'do', u'not', u'shed', u'they', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'pos': [u'RB', u',', u'IN', u'JJ', u'NNP', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NN', u'IN', u'DT', u'JJR', u'NN', u'TO', u'NN', u'PRP', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[3139, 3146], [3146, 3147], [3148, 3154], [3155, 3160], [3161, 3167], [3168, 3175], [3175, 3176], [3177, 3182], [3183, 3188], [3189, 3191], [3192, 3195], [3196, 3200], [3201, 3206], [3207, 3211], [3212, 3215], [3216, 3217], [3218, 3224], [3225, 3230], [3231, 3233], [3234, 3244], [3245, 3255], [3256, 3258], [3259, 3262], [3263, 3269], [3270, 3277], [3277, 3278]]}) 
answer: set([])
candidate Sentence: (0.19761334359645844, {u'tokens': [u'The', u'U.S.', u'began', u'regulating', u'in', u'1971', u'and', u'adopted', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u'in', u'1972', u'.'], u'lemmas': [u'the', u'U.S.', u'begin', u'regulate', u'in', u'1971', u'and', u'adopt', u'the', u'Marine', u'mammal', u'Protection', u'Act', u'in', u'1972', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'VBG', u'IN', u'CD', u'CC', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[20489, 20492], [20493, 20497], [20498, 20503], [20504, 20514], [20515, 20517], [20518, 20522], [20523, 20526], [20527, 20534], [20535, 20538], [20539, 20545], [20546, 20552], [20553, 20563], [20564, 20567], [20568, 20570], [20571, 20575], [20575, 20576]]}) 
answer: set([])
candidate Sentence: (0.18499946594238281, {u'tokens': [u'Only', u'female', u'polar', u'bears', u'enter', u'a', u'dormant', u'state', u'referred', u'to', u'as', u'``', u'denning', u"''", u'during', u'pregnancy', u',', u'though', u'their', u'body', u'temperature', u'does', u'not', u'decrease', u'during', u'this', u'period', u'as', u'it', u'would', u'for', u'a', u'typical', u'mammal', u'in', u'hibernation', u'.'], u'lemmas': [u'only', u'female', u'polar', u'bear', u'enter', u'a', u'dormant', u'state', u'refer', u'to', u'as', u'``', u'denning', u"''", u'during', u'pregnancy', u',', u'though', u'they', u'body', u'temperature', u'do', u'not', u'decrease', u'during', u'this', u'period', u'as', u'it', u'would', u'for', u'a', u'typical', u'mammal', u'in', u'hibernation', u'.'], u'pos': [u'RB', u'JJ', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'VBD', u'TO', u'IN', u'``', u'NN', u"''", u'IN', u'NN', u',', u'IN', u'PRP$', u'NN', u'NN', u'VBZ', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'PRP', u'MD', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[7300, 7304], [7305, 7311], [7312, 7317], [7318, 7323], [7324, 7329], [7330, 7331], [7332, 7339], [7340, 7345], [7346, 7354], [7355, 7357], [7358, 7360], [7361, 7362], [7362, 7369], [7369, 7370], [7371, 7377], [7378, 7387], [7387, 7388], [7389, 7395], [7396, 7401], [7402, 7406], [7407, 7418], [7419, 7423], [7424, 7427], [7428, 7436], [7437, 7443], [7444, 7448], [7449, 7455], [7456, 7458], [7459, 7461], [7462, 7467], [7468, 7471], [7472, 7473], [7474, 7481], [7482, 7488], [7489, 7491], [7492, 7503], [7503, 7504]]}) 
answer: set([])
candidate Sentence: (0.17572230100631714, {u'tokens': [u'The', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'What', u'You', u'Can', u'Do', u'to', u'Protect', u'Polar', u'Bears', u"''", u'In', u'1994', u',', u'the', u'United', u'States', u'modified', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u',', u'allowing', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophies', u'into', u'the', u'country', u'and', u'clearing', u'the', u'way', u'for', u'an', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'lemmas': [u'the', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'what', u'you', u'can', u'do', u'to', u'protect', u'Polar', u'Bears', u"''", u'in', u'1994', u',', u'the', u'United', u'States', u'modify', u'the', u'Marine', u'mammal', u'Protection', u'Act', u',', u'allow', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophy', u'into', u'the', u'country', u'and', u'clear', u'the', u'way', u'for', u'a', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'``', u'WP', u'PRP', u'MD', u'VB', u'TO', u'VB', u'NNP', u'NNPS', u"''", u'IN', u'CD', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[24042, 24045], [24046, 24052], [24053, 24060], [24061, 24063], [24064, 24067], [24068, 24074], [24075, 24081], [24082, 24083], [24083, 24087], [24088, 24091], [24092, 24095], [24096, 24098], [24099, 24101], [24102, 24109], [24110, 24115], [24116, 24121], [24121, 24122], [24123, 24125], [24126, 24130], [24130, 24131], [24132, 24135], [24136, 24142], [24143, 24149], [24150, 24158], [24159, 24162], [24163, 24169], [24170, 24176], [24177, 24187], [24188, 24191], [24191, 24192], [24193, 24201], [24202, 24205], [24206, 24217], [24218, 24220], [24221, 24233], [24234, 24239], [24240, 24244], [24245, 24253], [24254, 24258], [24259, 24262], [24263, 24270], [24271, 24274], [24275, 24283], [24284, 24287], [24288, 24291], [24292, 24295], [24296, 24298], [24299, 24307], [24308, 24310], [24311, 24316], [24317, 24321], [24322, 24329], [24329, 24330]]}) 
answer: set([])
candidate Sentence: (0.17214952409267426, {u'tokens': [u'Its', u'biology', u'is', u'specialized', u'to', u'digest', u'fat', u'from', u'marine', u'mammals', u'and', u'can', u'not', u'derive', u'much', u'nutrition', u'from', u'terrestrial', u'food', u'.'], u'lemmas': [u'its', u'biology', u'be', u'specialize', u'to', u'digest', u'fat', u'from', u'marine', u'mammal', u'and', u'can', u'not', u'derive', u'much', u'nutrition', u'from', u'terrestrial', u'food', u'.'], u'pos': [u'PRP$', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'MD', u'RB', u'VB', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[11733, 11736], [11737, 11744], [11745, 11747], [11748, 11759], [11760, 11762], [11763, 11769], [11770, 11773], [11774, 11778], [11779, 11785], [11786, 11793], [11794, 11797], [11798, 11801], [11801, 11804], [11805, 11811], [11812, 11816], [11817, 11826], [11827, 11831], [11832, 11843], [11844, 11848], [11848, 11849]]}) 
answer: set([])
candidate Sentence: (0.15716002881526947, {u'tokens': [u'Stirling', u'makes', u'no', u'mention', u'of', u'length', u',', u'these', u'are', u'from', u'SeaWorld', u'The', u'great', u'difference', u'in', u'body', u'size', u'makes', u'the', u'polar', u'bear', u'among', u'the', u'most', u'sexually', u'dimorphic', u'of', u'mammals', u',', u'surpassed', u'only', u'by', u'the', u'eared', u'seals', u'.'], u'lemmas': [u'Stirling', u'make', u'no', u'mention', u'of', u'length', u',', u'these', u'be', u'from', u'SeaWorld', u'the', u'great', u'difference', u'in', u'body', u'size', u'make', u'the', u'polar', u'bear', u'among', u'the', u'most', u'sexually', u'dimorphic', u'of', u'mammal', u',', u'surpass', u'only', u'by', u'the', u'eared', u'seal', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NN', u',', u'DT', u'VBP', u'IN', u'NNP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'RBS', u'RB', u'JJ', u'IN', u'NNS', u',', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'NNS', u'.'], u'char_offsets': [[2145, 2153], [2154, 2159], [2160, 2162], [2163, 2170], [2171, 2173], [2174, 2180], [2180, 2181], [2182, 2187], [2188, 2191], [2192, 2196], [2198, 2206], [2208, 2211], [2212, 2217], [2218, 2228], [2229, 2231], [2232, 2236], [2237, 2241], [2242, 2247], [2248, 2251], [2252, 2257], [2258, 2262], [2263, 2268], [2269, 2272], [2273, 2277], [2278, 2286], [2287, 2296], [2297, 2299], [2300, 2307], [2307, 2308], [2309, 2318], [2319, 2323], [2324, 2326], [2327, 2330], [2331, 2336], [2337, 2342], [2342, 2343]]}) 
answer: set([])
candidate Sentence: (0.10673089325428009, {u'tokens': [u'The', u'polar', u'bear', u'-LRB-', u'Ursus', u'maritimus', u'-RRB-', u'is', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'lemmas': [u'the', u'polar', u'bear', u'-lrb-', u'Ursus', u'maritimus', u'-rrb-', u'be', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 14], [15, 16], [16, 21], [22, 31], [31, 32], [33, 35], [36, 37], [38, 42], [43, 49], [50, 52], [53, 56], [57, 63], [63, 64]]}) 
answer: set([u'mammal'])

Is polar bear a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa983b0>.answer
_____________________________ test_yesno[param281] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98560>, (<src.tfidf.TF_IDF object at 0x1061d2410>, set(['bear', 'polar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98560>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23187094926834106, {u'tokens': [u'Polar', u'bears', u'still', u'have', u'vestigial', u'hibernation', u'induction', u'trigger', u'in', u'their', u'blood', u',', u'but', u'they', u'do', u'not', u'hibernate', u'in', u'the', u'winter', u'as', u'the', u'brown', u'bear', u'does', u'.'], u'lemmas': [u'Polar', u'bear', u'still', u'have', u'vestigial', u'hibernation', u'induction', u'trigger', u'in', u'they', u'blood', u',', u'but', u'they', u'do', u'not', u'hibernate', u'in', u'the', u'winter', u'as', u'the', u'brown', u'bear', u'do', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VB', u'JJ', u'NN', u'NN', u'NN', u'IN', u'PRP$', u'NN', u',', u'CC', u'PRP', u'VBP', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'.'], u'char_offsets': [[7157, 7162], [7163, 7168], [7169, 7174], [7175, 7179], [7180, 7189], [7190, 7201], [7202, 7211], [7212, 7219], [7220, 7222], [7223, 7228], [7229, 7234], [7234, 7235], [7236, 7239], [7240, 7244], [7245, 7247], [7248, 7251], [7252, 7261], [7262, 7264], [7265, 7268], [7269, 7275], [7276, 7278], [7279, 7282], [7283, 7288], [7289, 7293], [7294, 7298], [7298, 7299]]}) 
answer: set([u'arctic', u'live'])
candidate Sentence: (0.22456152737140656, {u'tokens': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammals', u',', u'polar', u'bears', u'do', u'not', u'shed', u'their', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'lemmas': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammal', u',', u'polar', u'bear', u'do', u'not', u'shed', u'they', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'pos': [u'RB', u',', u'IN', u'JJ', u'NNP', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NN', u'IN', u'DT', u'JJR', u'NN', u'TO', u'NN', u'PRP', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[3139, 3146], [3146, 3147], [3148, 3154], [3155, 3160], [3161, 3167], [3168, 3175], [3175, 3176], [3177, 3182], [3183, 3188], [3189, 3191], [3192, 3195], [3196, 3200], [3201, 3206], [3207, 3211], [3212, 3215], [3216, 3217], [3218, 3224], [3225, 3230], [3231, 3233], [3234, 3244], [3245, 3255], [3256, 3258], [3259, 3262], [3263, 3269], [3270, 3277], [3277, 3278]]}) 
answer: set([u'live'])
candidate Sentence: (0.22165553271770477, {u'tokens': [u'About', u'60', u'%', u'of', u'the', u'world', u"'s", u'polar', u'bears', u'live', u'in', u'Canada', u',', u'where', u'conservation', u'laws', u'are', u'a', u'provincial', u'jurisdiction', u'.'], u'lemmas': [u'about', u'60', u'%', u'of', u'the', u'world', u"'s", u'polar', u'bear', u'live', u'in', u'Canada', u',', u'where', u'conservation', u'law', u'be', u'a', u'provincial', u'jurisdiction', u'.'], u'pos': [u'RB', u'CD', u'NN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NNS', u'VBP', u'IN', u'NNP', u',', u'WRB', u'NN', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[21788, 21793], [21794, 21796], [21796, 21797], [21798, 21800], [21801, 21804], [21805, 21810], [21810, 21812], [21813, 21818], [21819, 21824], [21825, 21829], [21830, 21832], [21833, 21839], [21839, 21840], [21842, 21847], [21848, 21860], [21861, 21865], [21866, 21869], [21870, 21871], [21872, 21882], [21883, 21895], [21895, 21896]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.19836775958538055, {u'tokens': [u'The', u'FWS', u'did', u'not', u'respond', u'to', u'the', u'petition', u',', u'despite', u'being', u'required', u'to', u'do', u'so', u'within', u'90', u'days', u'under', u'United', u'States', u'law', u'.'], u'lemmas': [u'the', u'fw', u'do', u'not', u'respond', u'to', u'the', u'petition', u',', u'despite', u'be', u'require', u'to', u'do', u'so', u'within', u'90', u'day', u'under', u'United', u'States', u'law', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'VB', u'TO', u'DT', u'NN', u',', u'IN', u'VBG', u'VBN', u'TO', u'VB', u'RB', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'NNPS', u'NN', u'.'], u'char_offsets': [[25162, 25165], [25166, 25169], [25170, 25173], [25174, 25177], [25178, 25185], [25186, 25188], [25189, 25192], [25193, 25201], [25201, 25202], [25203, 25210], [25211, 25216], [25217, 25225], [25226, 25228], [25229, 25231], [25232, 25234], [25235, 25241], [25242, 25244], [25245, 25249], [25250, 25255], [25256, 25262], [25263, 25269], [25270, 25273], [25273, 25274]]}) 
answer: set([u'arctic', u'live'])
candidate Sentence: (0.18126785755157471, {u'tokens': [u'The', u'polar', u'bear', u'-LRB-', u'Ursus', u'maritimus', u'-RRB-', u'is', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'lemmas': [u'the', u'polar', u'bear', u'-lrb-', u'Ursus', u'maritimus', u'-rrb-', u'be', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 14], [15, 16], [16, 21], [22, 31], [31, 32], [33, 35], [36, 37], [38, 42], [43, 49], [50, 52], [53, 56], [57, 63], [63, 64]]}) 
answer: set([u'live'])
candidate Sentence: (0.17866721749305725, {u'tokens': [u'They', u'live', u'off', u'of', u'their', u'fat', u'reserves', u'through', u'the', u'late', u'summer', u'and', u'early', u'fall', u'when', u'the', u'sea-ice', u'is', u'at', u'a', u'minimum', u'.'], u'lemmas': [u'they', u'live', u'off', u'of', u'they', u'fat', u'reserve', u'through', u'the', u'late', u'summer', u'and', u'early', u'fall', u'when', u'the', u'sea-ice', u'be', u'at', u'a', u'minimum', u'.'], u'pos': [u'PRP', u'VBP', u'IN', u'IN', u'PRP$', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'WRB', u'DT', u'NN', u'VBZ', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[12160, 12164], [12165, 12169], [12170, 12173], [12174, 12176], [12177, 12182], [12183, 12186], [12187, 12195], [12196, 12203], [12204, 12207], [12208, 12212], [12213, 12219], [12220, 12223], [12224, 12229], [12230, 12234], [12235, 12239], [12240, 12243], [12244, 12251], [12252, 12254], [12255, 12257], [12258, 12259], [12260, 12267], [12267, 12268]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.17400094866752625, {u'tokens': [u'The', u'first', u'has', u'consistently', u'displayed', u'the', u'bears', u'as', u'thriving', u'near', u'penguins', u',', u'though', u'the', u'animals', u'naturally', u'live', u'in', u'opposite', u'hemispheres', u'.'], u'lemmas': [u'the', u'first', u'have', u'consistently', u'display', u'the', u'bear', u'as', u'thrive', u'near', u'penguin', u',', u'though', u'the', u'animal', u'naturally', u'live', u'in', u'opposite', u'hemisphere', u'.'], u'pos': [u'DT', u'JJ', u'VBZ', u'RB', u'VBN', u'DT', u'NNS', u'IN', u'VBG', u'IN', u'NNS', u',', u'IN', u'DT', u'NNS', u'RB', u'VBP', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[27274, 27277], [27278, 27283], [27284, 27287], [27288, 27300], [27301, 27310], [27311, 27314], [27315, 27320], [27321, 27323], [27324, 27332], [27333, 27337], [27338, 27346], [27346, 27347], [27348, 27354], [27355, 27358], [27359, 27366], [27367, 27376], [27377, 27381], [27382, 27384], [27385, 27393], [27394, 27405], [27405, 27406]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.14547720551490784, {u'tokens': [u'The', u'destruction', u'of', u'its', u'habitat', u'on', u'the', u'Arctic', u'ice', u'threatens', u'the', u'bear', u"'s", u'survival', u'as', u'a', u'species', u'.'], u'lemmas': [u'the', u'destruction', u'of', u'its', u'habitat', u'on', u'the', u'Arctic', u'ice', u'threaten', u'the', u'bear', u"'s", u'survival', u'as', u'a', u'species', u'.'], u'pos': [u'DT', u'NN', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'NN', u'VBZ', u'DT', u'NN', u'POS', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[9062, 9065], [9066, 9077], [9078, 9080], [9081, 9084], [9085, 9092], [9093, 9095], [9096, 9099], [9100, 9106], [9107, 9110], [9111, 9120], [9121, 9124], [9125, 9129], [9129, 9131], [9132, 9140], [9141, 9143], [9144, 9145], [9146, 9153], [9153, 9154]]}) 
answer: set([u'live'])
candidate Sentence: (0.14325080811977386, {u'tokens': [u',', u'Most', u'animals', u'can', u'easily', u'outrun', u'a', u'polar', u'bear', u'on', u'the', u'open', u'land', u'or', u'in', u'the', u'open', u'water', u',', u'and', u'polar', u'bears', u'overheat', u'quickly', u':', u'thus', u'the', u'polar', u'bear', u'subsists', u'almost', u'entirely', u'on', u'live', u'seals', u'and', u'walrus', u'calves', u'taken', u'at', u'the', u'edge', u'of', u'sea-ice', u'in', u'the', u'winter', u'and', u'spring', u',', u'or', u'on', u'the', u'carcasses', u'of', u'dead', u'adult', u'walruses', u'or', u'whales', u'.'], u'lemmas': [u',', u'most', u'animal', u'can', u'easily', u'outrun', u'a', u'polar', u'bear', u'on', u'the', u'open', u'land', u'or', u'in', u'the', u'open', u'water', u',', u'and', u'polar', u'bear', u'overheat', u'quickly', u':', u'thus', u'the', u'polar', u'bear', u'subsist', u'almost', u'entirely', u'on', u'live', u'seal', u'and', u'walrus', u'calf', u'take', u'at', u'the', u'edge', u'of', u'sea-ice', u'in', u'the', u'winter', u'and', u'spring', u',', u'or', u'on', u'the', u'carcass', u'of', u'dead', u'adult', u'walrus', u'or', u'whale', u'.'], u'pos': [u',', u'JJS', u'NNS', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u':', u'RB', u'DT', u'JJ', u'NN', u'NNS', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'CC', u'NN', u',', u'CC', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[11852, 11853], [11857, 11861], [11862, 11869], [11870, 11873], [11874, 11880], [11881, 11887], [11888, 11889], [11890, 11895], [11896, 11900], [11901, 11903], [11904, 11907], [11908, 11912], [11913, 11917], [11918, 11920], [11921, 11923], [11924, 11927], [11928, 11932], [11933, 11938], [11938, 11939], [11940, 11943], [11944, 11949], [11950, 11955], [11956, 11964], [11965, 11972], [11972, 11973], [11974, 11978], [11979, 11982], [11983, 11988], [11989, 11993], [11994, 12002], [12003, 12009], [12010, 12018], [12019, 12021], [12022, 12026], [12027, 12032], [12033, 12036], [12037, 12043], [12044, 12050], [12051, 12056], [12057, 12059], [12060, 12063], [12064, 12068], [12069, 12071], [12072, 12079], [12080, 12082], [12083, 12086], [12087, 12093], [12094, 12097], [12098, 12104], [12104, 12105], [12106, 12108], [12109, 12111], [12112, 12115], [12116, 12125], [12126, 12128], [12129, 12133], [12134, 12139], [12140, 12148], [12149, 12151], [12152, 12158], [12158, 12159]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.13184493780136108, {u'tokens': [u'The', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'What', u'You', u'Can', u'Do', u'to', u'Protect', u'Polar', u'Bears', u"''", u'In', u'1994', u',', u'the', u'United', u'States', u'modified', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u',', u'allowing', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophies', u'into', u'the', u'country', u'and', u'clearing', u'the', u'way', u'for', u'an', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'lemmas': [u'the', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'what', u'you', u'can', u'do', u'to', u'protect', u'Polar', u'Bears', u"''", u'in', u'1994', u',', u'the', u'United', u'States', u'modify', u'the', u'Marine', u'mammal', u'Protection', u'Act', u',', u'allow', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophy', u'into', u'the', u'country', u'and', u'clear', u'the', u'way', u'for', u'a', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'``', u'WP', u'PRP', u'MD', u'VB', u'TO', u'VB', u'NNP', u'NNPS', u"''", u'IN', u'CD', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[24042, 24045], [24046, 24052], [24053, 24060], [24061, 24063], [24064, 24067], [24068, 24074], [24075, 24081], [24082, 24083], [24083, 24087], [24088, 24091], [24092, 24095], [24096, 24098], [24099, 24101], [24102, 24109], [24110, 24115], [24116, 24121], [24121, 24122], [24123, 24125], [24126, 24130], [24130, 24131], [24132, 24135], [24136, 24142], [24143, 24149], [24150, 24158], [24159, 24162], [24163, 24169], [24170, 24176], [24177, 24187], [24188, 24191], [24191, 24192], [24193, 24201], [24202, 24205], [24206, 24217], [24218, 24220], [24221, 24233], [24234, 24239], [24240, 24244], [24245, 24253], [24254, 24258], [24259, 24262], [24263, 24270], [24271, 24274], [24275, 24283], [24284, 24287], [24288, 24291], [24292, 24295], [24296, 24298], [24299, 24307], [24308, 24310], [24311, 24316], [24317, 24321], [24322, 24329], [24329, 24330]]}) 
answer: set([u'arctic', u'live'])

Does a polar bear live in the Arctic?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98560>.answer
_____________________________ test_yesno[param282] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa985f0>, (<src.tfidf.TF_IDF object at 0x1061d2410>, set(['bear', 'polar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa985f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23187094926834106, {u'tokens': [u'Polar', u'bears', u'still', u'have', u'vestigial', u'hibernation', u'induction', u'trigger', u'in', u'their', u'blood', u',', u'but', u'they', u'do', u'not', u'hibernate', u'in', u'the', u'winter', u'as', u'the', u'brown', u'bear', u'does', u'.'], u'lemmas': [u'Polar', u'bear', u'still', u'have', u'vestigial', u'hibernation', u'induction', u'trigger', u'in', u'they', u'blood', u',', u'but', u'they', u'do', u'not', u'hibernate', u'in', u'the', u'winter', u'as', u'the', u'brown', u'bear', u'do', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VB', u'JJ', u'NN', u'NN', u'NN', u'IN', u'PRP$', u'NN', u',', u'CC', u'PRP', u'VBP', u'RB', u'VB', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'.'], u'char_offsets': [[7157, 7162], [7163, 7168], [7169, 7174], [7175, 7179], [7180, 7189], [7190, 7201], [7202, 7211], [7212, 7219], [7220, 7222], [7223, 7228], [7229, 7234], [7234, 7235], [7236, 7239], [7240, 7244], [7245, 7247], [7248, 7251], [7252, 7261], [7262, 7264], [7265, 7268], [7269, 7275], [7276, 7278], [7279, 7282], [7283, 7288], [7289, 7293], [7294, 7298], [7298, 7299]]}) 
answer: set([u'arctic', u'live'])
candidate Sentence: (0.22456152737140656, {u'tokens': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammals', u',', u'polar', u'bears', u'do', u'not', u'shed', u'their', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'lemmas': [u'however', u',', u'unlike', u'other', u'Arctic', u'mammal', u',', u'polar', u'bear', u'do', u'not', u'shed', u'they', u'coat', u'for', u'a', u'darker', u'shade', u'to', u'camouflage', u'themselves', u'in', u'the', u'summer', u'habitat', u'.'], u'pos': [u'RB', u',', u'IN', u'JJ', u'NNP', u'NNS', u',', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NN', u'IN', u'DT', u'JJR', u'NN', u'TO', u'NN', u'PRP', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[3139, 3146], [3146, 3147], [3148, 3154], [3155, 3160], [3161, 3167], [3168, 3175], [3175, 3176], [3177, 3182], [3183, 3188], [3189, 3191], [3192, 3195], [3196, 3200], [3201, 3206], [3207, 3211], [3212, 3215], [3216, 3217], [3218, 3224], [3225, 3230], [3231, 3233], [3234, 3244], [3245, 3255], [3256, 3258], [3259, 3262], [3263, 3269], [3270, 3277], [3277, 3278]]}) 
answer: set([u'live'])
candidate Sentence: (0.22165553271770477, {u'tokens': [u'About', u'60', u'%', u'of', u'the', u'world', u"'s", u'polar', u'bears', u'live', u'in', u'Canada', u',', u'where', u'conservation', u'laws', u'are', u'a', u'provincial', u'jurisdiction', u'.'], u'lemmas': [u'about', u'60', u'%', u'of', u'the', u'world', u"'s", u'polar', u'bear', u'live', u'in', u'Canada', u',', u'where', u'conservation', u'law', u'be', u'a', u'provincial', u'jurisdiction', u'.'], u'pos': [u'RB', u'CD', u'NN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NNS', u'VBP', u'IN', u'NNP', u',', u'WRB', u'NN', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[21788, 21793], [21794, 21796], [21796, 21797], [21798, 21800], [21801, 21804], [21805, 21810], [21810, 21812], [21813, 21818], [21819, 21824], [21825, 21829], [21830, 21832], [21833, 21839], [21839, 21840], [21842, 21847], [21848, 21860], [21861, 21865], [21866, 21869], [21870, 21871], [21872, 21882], [21883, 21895], [21895, 21896]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.19836775958538055, {u'tokens': [u'The', u'FWS', u'did', u'not', u'respond', u'to', u'the', u'petition', u',', u'despite', u'being', u'required', u'to', u'do', u'so', u'within', u'90', u'days', u'under', u'United', u'States', u'law', u'.'], u'lemmas': [u'the', u'fw', u'do', u'not', u'respond', u'to', u'the', u'petition', u',', u'despite', u'be', u'require', u'to', u'do', u'so', u'within', u'90', u'day', u'under', u'United', u'States', u'law', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'VB', u'TO', u'DT', u'NN', u',', u'IN', u'VBG', u'VBN', u'TO', u'VB', u'RB', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'NNPS', u'NN', u'.'], u'char_offsets': [[25162, 25165], [25166, 25169], [25170, 25173], [25174, 25177], [25178, 25185], [25186, 25188], [25189, 25192], [25193, 25201], [25201, 25202], [25203, 25210], [25211, 25216], [25217, 25225], [25226, 25228], [25229, 25231], [25232, 25234], [25235, 25241], [25242, 25244], [25245, 25249], [25250, 25255], [25256, 25262], [25263, 25269], [25270, 25273], [25273, 25274]]}) 
answer: set([u'arctic', u'live'])
candidate Sentence: (0.18126785755157471, {u'tokens': [u'The', u'polar', u'bear', u'-LRB-', u'Ursus', u'maritimus', u'-RRB-', u'is', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'lemmas': [u'the', u'polar', u'bear', u'-lrb-', u'Ursus', u'maritimus', u'-rrb-', u'be', u'a', u'bear', u'native', u'to', u'the', u'Arctic', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 14], [15, 16], [16, 21], [22, 31], [31, 32], [33, 35], [36, 37], [38, 42], [43, 49], [50, 52], [53, 56], [57, 63], [63, 64]]}) 
answer: set([u'live'])
candidate Sentence: (0.17866721749305725, {u'tokens': [u'They', u'live', u'off', u'of', u'their', u'fat', u'reserves', u'through', u'the', u'late', u'summer', u'and', u'early', u'fall', u'when', u'the', u'sea-ice', u'is', u'at', u'a', u'minimum', u'.'], u'lemmas': [u'they', u'live', u'off', u'of', u'they', u'fat', u'reserve', u'through', u'the', u'late', u'summer', u'and', u'early', u'fall', u'when', u'the', u'sea-ice', u'be', u'at', u'a', u'minimum', u'.'], u'pos': [u'PRP', u'VBP', u'IN', u'IN', u'PRP$', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'WRB', u'DT', u'NN', u'VBZ', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[12160, 12164], [12165, 12169], [12170, 12173], [12174, 12176], [12177, 12182], [12183, 12186], [12187, 12195], [12196, 12203], [12204, 12207], [12208, 12212], [12213, 12219], [12220, 12223], [12224, 12229], [12230, 12234], [12235, 12239], [12240, 12243], [12244, 12251], [12252, 12254], [12255, 12257], [12258, 12259], [12260, 12267], [12267, 12268]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.17400094866752625, {u'tokens': [u'The', u'first', u'has', u'consistently', u'displayed', u'the', u'bears', u'as', u'thriving', u'near', u'penguins', u',', u'though', u'the', u'animals', u'naturally', u'live', u'in', u'opposite', u'hemispheres', u'.'], u'lemmas': [u'the', u'first', u'have', u'consistently', u'display', u'the', u'bear', u'as', u'thrive', u'near', u'penguin', u',', u'though', u'the', u'animal', u'naturally', u'live', u'in', u'opposite', u'hemisphere', u'.'], u'pos': [u'DT', u'JJ', u'VBZ', u'RB', u'VBN', u'DT', u'NNS', u'IN', u'VBG', u'IN', u'NNS', u',', u'IN', u'DT', u'NNS', u'RB', u'VBP', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[27274, 27277], [27278, 27283], [27284, 27287], [27288, 27300], [27301, 27310], [27311, 27314], [27315, 27320], [27321, 27323], [27324, 27332], [27333, 27337], [27338, 27346], [27346, 27347], [27348, 27354], [27355, 27358], [27359, 27366], [27367, 27376], [27377, 27381], [27382, 27384], [27385, 27393], [27394, 27405], [27405, 27406]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.14547720551490784, {u'tokens': [u'The', u'destruction', u'of', u'its', u'habitat', u'on', u'the', u'Arctic', u'ice', u'threatens', u'the', u'bear', u"'s", u'survival', u'as', u'a', u'species', u'.'], u'lemmas': [u'the', u'destruction', u'of', u'its', u'habitat', u'on', u'the', u'Arctic', u'ice', u'threaten', u'the', u'bear', u"'s", u'survival', u'as', u'a', u'species', u'.'], u'pos': [u'DT', u'NN', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'NN', u'VBZ', u'DT', u'NN', u'POS', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[9062, 9065], [9066, 9077], [9078, 9080], [9081, 9084], [9085, 9092], [9093, 9095], [9096, 9099], [9100, 9106], [9107, 9110], [9111, 9120], [9121, 9124], [9125, 9129], [9129, 9131], [9132, 9140], [9141, 9143], [9144, 9145], [9146, 9153], [9153, 9154]]}) 
answer: set([u'live'])
candidate Sentence: (0.14325080811977386, {u'tokens': [u',', u'Most', u'animals', u'can', u'easily', u'outrun', u'a', u'polar', u'bear', u'on', u'the', u'open', u'land', u'or', u'in', u'the', u'open', u'water', u',', u'and', u'polar', u'bears', u'overheat', u'quickly', u':', u'thus', u'the', u'polar', u'bear', u'subsists', u'almost', u'entirely', u'on', u'live', u'seals', u'and', u'walrus', u'calves', u'taken', u'at', u'the', u'edge', u'of', u'sea-ice', u'in', u'the', u'winter', u'and', u'spring', u',', u'or', u'on', u'the', u'carcasses', u'of', u'dead', u'adult', u'walruses', u'or', u'whales', u'.'], u'lemmas': [u',', u'most', u'animal', u'can', u'easily', u'outrun', u'a', u'polar', u'bear', u'on', u'the', u'open', u'land', u'or', u'in', u'the', u'open', u'water', u',', u'and', u'polar', u'bear', u'overheat', u'quickly', u':', u'thus', u'the', u'polar', u'bear', u'subsist', u'almost', u'entirely', u'on', u'live', u'seal', u'and', u'walrus', u'calf', u'take', u'at', u'the', u'edge', u'of', u'sea-ice', u'in', u'the', u'winter', u'and', u'spring', u',', u'or', u'on', u'the', u'carcass', u'of', u'dead', u'adult', u'walrus', u'or', u'whale', u'.'], u'pos': [u',', u'JJS', u'NNS', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u':', u'RB', u'DT', u'JJ', u'NN', u'NNS', u'RB', u'RB', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'CC', u'NN', u',', u'CC', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[11852, 11853], [11857, 11861], [11862, 11869], [11870, 11873], [11874, 11880], [11881, 11887], [11888, 11889], [11890, 11895], [11896, 11900], [11901, 11903], [11904, 11907], [11908, 11912], [11913, 11917], [11918, 11920], [11921, 11923], [11924, 11927], [11928, 11932], [11933, 11938], [11938, 11939], [11940, 11943], [11944, 11949], [11950, 11955], [11956, 11964], [11965, 11972], [11972, 11973], [11974, 11978], [11979, 11982], [11983, 11988], [11989, 11993], [11994, 12002], [12003, 12009], [12010, 12018], [12019, 12021], [12022, 12026], [12027, 12032], [12033, 12036], [12037, 12043], [12044, 12050], [12051, 12056], [12057, 12059], [12060, 12063], [12064, 12068], [12069, 12071], [12072, 12079], [12080, 12082], [12083, 12086], [12087, 12093], [12094, 12097], [12098, 12104], [12104, 12105], [12106, 12108], [12109, 12111], [12112, 12115], [12116, 12125], [12126, 12128], [12129, 12133], [12134, 12139], [12140, 12148], [12149, 12151], [12152, 12158], [12158, 12159]]}) 
answer: set([u'arctic'])
candidate Sentence: (0.13184493780136108, {u'tokens': [u'The', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'What', u'You', u'Can', u'Do', u'to', u'Protect', u'Polar', u'Bears', u"''", u'In', u'1994', u',', u'the', u'United', u'States', u'modified', u'the', u'Marine', u'Mammal', u'Protection', u'Act', u',', u'allowing', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophies', u'into', u'the', u'country', u'and', u'clearing', u'the', u'way', u'for', u'an', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'lemmas': [u'the', u'Humane', u'Society', u'of', u'the', u'United', u'States', u'``', u'what', u'you', u'can', u'do', u'to', u'protect', u'Polar', u'Bears', u"''", u'in', u'1994', u',', u'the', u'United', u'States', u'modify', u'the', u'Marine', u'mammal', u'Protection', u'Act', u',', u'allow', u'the', u'importation', u'of', u'sport-hunted', u'polar', u'bear', u'trophy', u'into', u'the', u'country', u'and', u'clear', u'the', u'way', u'for', u'a', u'increase', u'in', u'polar', u'bear', u'hunting', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'``', u'WP', u'PRP', u'MD', u'VB', u'TO', u'VB', u'NNP', u'NNPS', u"''", u'IN', u'CD', u',', u'DT', u'NNP', u'NNPS', u'VBD', u'DT', u'NNP', u'JJ', u'NNP', u'NNP', u',', u'VBG', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[24042, 24045], [24046, 24052], [24053, 24060], [24061, 24063], [24064, 24067], [24068, 24074], [24075, 24081], [24082, 24083], [24083, 24087], [24088, 24091], [24092, 24095], [24096, 24098], [24099, 24101], [24102, 24109], [24110, 24115], [24116, 24121], [24121, 24122], [24123, 24125], [24126, 24130], [24130, 24131], [24132, 24135], [24136, 24142], [24143, 24149], [24150, 24158], [24159, 24162], [24163, 24169], [24170, 24176], [24177, 24187], [24188, 24191], [24191, 24192], [24193, 24201], [24202, 24205], [24206, 24217], [24218, 24220], [24221, 24233], [24234, 24239], [24240, 24244], [24245, 24253], [24254, 24258], [24259, 24262], [24263, 24270], [24271, 24274], [24275, 24283], [24284, 24287], [24288, 24291], [24292, 24295], [24296, 24298], [24299, 24307], [24308, 24310], [24311, 24316], [24317, 24321], [24322, 24329], [24329, 24330]]}) 
answer: set([u'arctic', u'live'])

Does a polar bear live in the Arctic?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa985f0>.answer
_____________________________ test_yesno[param291] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98b00>, (<src.tfidf.TF_IDF object at 0x10a153750>, set(['qatar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa98b00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.7104792594909668, {u'tokens': [u'Women', u'can', u'legally', u'drive', u'in', u'Qatar', u',', u'whereas', u'they', u'may', u'not', u'in', u'Saudi', u'Arabia', u'.'], u'lemmas': [u'woman', u'can', u'legally', u'drive', u'in', u'Qatar', u',', u'whereas', u'they', u'may', u'not', u'in', u'Saudi', u'Arabia', u'.'], u'pos': [u'NNS', u'MD', u'RB', u'VB', u'IN', u'NNP', u',', u'IN', u'PRP', u'MD', u'RB', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12841, 12846], [12847, 12850], [12851, 12858], [12859, 12864], [12865, 12867], [12868, 12873], [12873, 12874], [12875, 12882], [12883, 12887], [12888, 12891], [12892, 12895], [12896, 12898], [12899, 12904], [12905, 12911], [12911, 12912]]}) 
answer: set([])
candidate Sentence: (0.23685914278030396, {u'tokens': [u'Also', u',', u'women', u'can', u'dress', u'mostly', u'as', u'they', u'please', u'in', u'public', u'-LRB-', u'although', u'in', u'practice', u'local', u'Qatari', u'women', u'generally', u'don', u'the', u'black', u'abaya', u'-RRB-', u'.'], u'lemmas': [u'also', u',', u'woman', u'can', u'dress', u'mostly', u'as', u'they', u'please', u'in', u'public', u'-lrb-', u'although', u'in', u'practice', u'local', u'qatari', u'woman', u'generally', u'don', u'the', u'black', u'abaya', u'-rrb-', u'.'], u'pos': [u'RB', u',', u'NNS', u'MD', u'VB', u'RB', u'IN', u'PRP', u'VB', u'IN', u'JJ', u'-LRB-', u'IN', u'IN', u'NN', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'DT', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13291, 13295], [13295, 13296], [13297, 13302], [13303, 13306], [13307, 13312], [13313, 13319], [13320, 13322], [13323, 13327], [13328, 13334], [13335, 13337], [13338, 13344], [13345, 13346], [13346, 13354], [13355, 13357], [13358, 13366], [13367, 13372], [13373, 13379], [13380, 13385], [13386, 13395], [13396, 13399], [13400, 13403], [13404, 13409], [13410, 13415], [13415, 13416], [13416, 13417]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.14199241995811462, {u'tokens': [u'Under', u'his', u'rule', u',', u'Qatar', u'became', u'the', u'first', u'Arab', u'country', u'in', u'the', u'Persian', u'Gulf', u'where', u'women', u'gained', u'the', u'right', u'to', u'vote', u'The', u'role', u'of', u'Saudi', u'women', u'as', u'well', u'as', u'holding', u'senior', u'positions', u'in', u'government', u'.'], u'lemmas': [u'under', u'he', u'rule', u',', u'Qatar', u'become', u'the', u'first', u'Arab', u'country', u'in', u'the', u'Persian', u'Gulf', u'where', u'woman', u'gain', u'the', u'right', u'to', u'vote', u'the', u'role', u'of', u'saudi', u'woman', u'as', u'well', u'as', u'hold', u'senior', u'position', u'in', u'government', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'WRB', u'NNS', u'VBD', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'RB', u'RB', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[13103, 13108], [13109, 13112], [13113, 13117], [13117, 13118], [13119, 13124], [13125, 13131], [13132, 13135], [13136, 13141], [13142, 13146], [13147, 13154], [13155, 13157], [13158, 13161], [13162, 13169], [13170, 13174], [13175, 13180], [13181, 13186], [13187, 13193], [13194, 13197], [13198, 13203], [13204, 13206], [13207, 13211], [13214, 13217], [13218, 13222], [13223, 13225], [13226, 13231], [13232, 13237], [13239, 13241], [13242, 13246], [13247, 13249], [13250, 13257], [13258, 13264], [13265, 13274], [13275, 13277], [13278, 13288], [13288, 13289]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.11561745405197144, {u'tokens': [u'She', u'chairs', u'the', u'Qatar', u'Foundation', u',', u'sits', u'on', u'the', u'board', u'of', u'Qatar', u"'s", u'Supreme', u'Education', u'Council', u',', u'and', u'is', u'a', u'major', u'driving', u'force', u'behind', u'the', u'importation', u'of', u'western', u'expertise', u'into', u'the', u'education', u'system', u',', u'particularly', u'at', u'the', u'college', u'level', u'.'], u'lemmas': [u'she', u'chair', u'the', u'Qatar', u'Foundation', u',', u'sit', u'on', u'the', u'board', u'of', u'Qatar', u"'s", u'Supreme', u'Education', u'Council', u',', u'and', u'be', u'a', u'major', u'drive', u'force', u'behind', u'the', u'importation', u'of', u'western', u'expertise', u'into', u'the', u'education', u'system', u',', u'particularly', u'at', u'the', u'college', u'level', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'NNP', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'VBG', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u',', u'RB', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[15512, 15515], [15516, 15522], [15523, 15526], [15527, 15532], [15533, 15543], [15543, 15544], [15545, 15549], [15550, 15552], [15553, 15556], [15557, 15562], [15563, 15565], [15566, 15571], [15571, 15573], [15574, 15581], [15582, 15591], [15592, 15599], [15599, 15600], [15601, 15604], [15605, 15607], [15608, 15609], [15610, 15615], [15616, 15623], [15624, 15629], [15630, 15636], [15637, 15640], [15641, 15652], [15653, 15655], [15656, 15663], [15664, 15673], [15674, 15678], [15679, 15682], [15683, 15692], [15693, 15699], [15699, 15700], [15701, 15713], [15714, 15716], [15717, 15720], [15721, 15728], [15729, 15734], [15734, 15735]]}) 
answer: set([u'legally', u'woman'])
candidate Sentence: (0.071120992302894592, {u'tokens': [u'According', u'to', u'the', u'US', u'State', u'Department', u"'s", u'Trafficking', u'in', u'Persons', u'Report', u',', u'men', u'and', u'women', u'who', u'are', u'lured', u'into', u'Qatar', u'by', u'promises', u'of', u'high', u'wages', u'are', u'often', u'forced', u'into', u'underpaid', u'labor', u'.'], u'lemmas': [u'accord', u'to', u'the', u'US', u'State', u'Department', u"'s", u'trafficking', u'in', u'Persons', u'Report', u',', u'man', u'and', u'woman', u'who', u'be', u'lure', u'into', u'Qatar', u'by', u'promise', u'of', u'high', u'wages', u'be', u'often', u'force', u'into', u'underpaid', u'labor', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'NNP', u'NNP', u'NNP', u'POS', u'NN', u'IN', u'NNPS', u'NNP', u',', u'NNS', u'CC', u'NNS', u'WP', u'VBP', u'VBN', u'IN', u'NNP', u'IN', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[16777, 16786], [16787, 16789], [16790, 16793], [16794, 16796], [16797, 16802], [16803, 16813], [16813, 16815], [16816, 16827], [16828, 16830], [16831, 16838], [16839, 16845], [16845, 16846], [16847, 16850], [16851, 16854], [16855, 16860], [16861, 16864], [16865, 16868], [16869, 16874], [16875, 16879], [16880, 16885], [16886, 16888], [16889, 16897], [16898, 16900], [16901, 16905], [16906, 16911], [16912, 16915], [16916, 16921], [16922, 16928], [16929, 16933], [16934, 16943], [16944, 16949], [16949, 16950]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.070048503577709198, {u'tokens': [u'People', u'can', u'call', u'to', u'Qatar', u'using', u'their', u'submarine', u'cable', u',', u'satellite', u'or', u'using', u'VoIP', u'-LRB-', u'Voice', u'over', u'Internet', u'Protocol', u'-RRB-', u';', u'however', u',', u'Qtel', u'has', u'interfered', u'with', u'VoIP', u'systems', u'in', u'the', u'past', u',', u'and', u'Skype', u"'s", u'website', u'has', u'been', u'blocked', u'before', u'.'], u'lemmas': [u'people', u'can', u'call', u'to', u'Qatar', u'use', u'they', u'submarine', u'cable', u',', u'satellite', u'or', u'use', u'voip', u'-lrb-', u'Voice', u'over', u'Internet', u'Protocol', u'-rrb-', u';', u'however', u',', u'Qtel', u'have', u'interfere', u'with', u'voip', u'system', u'in', u'the', u'past', u',', u'and', u'skype', u"'s", u'website', u'have', u'be', u'block', u'before', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'TO', u'NNP', u'VBG', u'PRP$', u'NN', u'NN', u',', u'NN', u'CC', u'VBG', u'NN', u'-LRB-', u'NNP', u'IN', u'NNP', u'NNP', u'-RRB-', u':', u'RB', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'NN', u'NNS', u'IN', u'DT', u'NN', u',', u'CC', u'VB', u'POS', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'.'], u'char_offsets': [[16005, 16011], [16012, 16015], [16016, 16020], [16021, 16023], [16024, 16029], [16030, 16035], [16036, 16041], [16042, 16051], [16052, 16057], [16057, 16058], [16059, 16068], [16069, 16071], [16072, 16077], [16078, 16082], [16083, 16084], [16084, 16089], [16090, 16094], [16095, 16103], [16104, 16112], [16112, 16113], [16113, 16114], [16115, 16122], [16122, 16123], [16124, 16128], [16129, 16132], [16133, 16143], [16144, 16148], [16149, 16153], [16154, 16161], [16162, 16164], [16165, 16168], [16169, 16173], [16173, 16174], [16175, 16178], [16179, 16184], [16184, 16186], [16187, 16194], [16195, 16198], [16199, 16203], [16204, 16211], [16212, 16218], [16218, 16219]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.063884884119033813, {u'tokens': [u'The', u'q', u'and', u'the', u't', u'have', u'no', u'direct', u'counterparts', u',', u'but', u'are', u'closest', u'to', u'the', u'unaspirated', u'allophones', u'of', u'English', u'k', u'and', u't.', u'However', u',', u'since', u'these', u'allophones', u'can', u'not', u'occur', u'in', u'these', u'positions', u'in', u'English', u',', u'in', u'this', u'context', u'they', u'will', u'sound', u'more', u'like', u'English', u'g', u'and', u'd', u'.'], u'lemmas': [u'the', u'q', u'and', u'the', u't', u'have', u'no', u'direct', u'counterpart', u',', u'but', u'be', u'closest', u'to', u'the', u'unaspirated', u'allophone', u'of', u'English', u'k', u'and', u't.', u'however', u',', u'since', u'these', u'allophone', u'can', u'not', u'occur', u'in', u'these', u'position', u'in', u'English', u',', u'in', u'this', u'context', u'they', u'will', u'sound', u'more', u'like', u'English', u'g', u'and', u'd', u'.'], u'pos': [u'DT', u'NN', u'CC', u'DT', u'NN', u'VBP', u'DT', u'JJ', u'NNS', u',', u'CC', u'VBP', u'JJS', u'TO', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NN', u'CC', u'NN', u'RB', u',', u'IN', u'DT', u'NNS', u'MD', u'RB', u'VB', u'IN', u'DT', u'NNS', u'IN', u'NNP', u',', u'IN', u'DT', u'NN', u'PRP', u'MD', u'VB', u'JJR', u'IN', u'NNP', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[204, 207], [208, 209], [210, 213], [214, 217], [218, 219], [220, 224], [225, 227], [228, 234], [235, 247], [247, 248], [249, 252], [253, 256], [257, 264], [265, 267], [268, 271], [272, 283], [284, 294], [295, 297], [298, 305], [306, 307], [308, 311], [312, 314], [315, 322], [322, 323], [324, 329], [330, 335], [336, 346], [347, 350], [350, 353], [354, 359], [360, 362], [363, 368], [369, 378], [379, 381], [382, 389], [389, 390], [391, 393], [394, 398], [399, 406], [407, 411], [412, 416], [417, 422], [423, 427], [428, 432], [433, 440], [441, 442], [443, 446], [447, 448], [448, 449]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.060993269085884094, {u'tokens': [u'Under', u'Emir', u'Hamad', u',', u'Qatar', u'has', u'experienced', u'a', u'notable', u'amount', u'of', u'sociopolitical', u'liberalization', u',', u'including', u'the', u'enfranchisement', u'of', u'women', u',', u'a', u'new', u'constitution', u',', u'and', u'the', u'launch', u'of', u'Al', u'Jazeera', u',', u'a', u'leading', u'English', u'and', u'Arabic', u'news', u'source', u',', u'which', u'operates', u'a', u'website', u'and', u'satellite', u'television', u'news', u'channel', u'.'], u'lemmas': [u'under', u'Emir', u'Hamad', u',', u'Qatar', u'have', u'experience', u'a', u'notable', u'amount', u'of', u'sociopolitical', u'liberalization', u',', u'include', u'the', u'enfranchisement', u'of', u'woman', u',', u'a', u'new', u'constitution', u',', u'and', u'the', u'launch', u'of', u'Al', u'Jazeera', u',', u'a', u'lead', u'english', u'and', u'arabic', u'news', u'source', u',', u'which', u'operate', u'a', u'website', u'and', u'satellite', u'television', u'news', u'channel', u'.'], u'pos': [u'IN', u'NNP', u'NNP', u',', u'NNP', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'IN', u'NNS', u',', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'VBG', u'JJ', u'CC', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[4774, 4779], [4780, 4784], [4785, 4790], [4790, 4791], [4792, 4797], [4798, 4801], [4802, 4813], [4814, 4815], [4816, 4823], [4824, 4830], [4831, 4833], [4834, 4848], [4849, 4863], [4863, 4864], [4865, 4874], [4875, 4878], [4879, 4894], [4895, 4897], [4898, 4903], [4903, 4904], [4905, 4906], [4907, 4910], [4911, 4923], [4923, 4924], [4925, 4928], [4929, 4932], [4933, 4939], [4940, 4942], [4943, 4945], [4946, 4953], [4953, 4954], [4955, 4956], [4957, 4964], [4965, 4972], [4973, 4976], [4977, 4983], [4984, 4988], [4989, 4995], [4995, 4996], [4997, 5002], [5003, 5011], [5012, 5013], [5014, 5021], [5022, 5025], [5026, 5035], [5036, 5046], [5047, 5051], [5052, 5059], [5059, 5060]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.015679545700550079, {u'tokens': [u'Qatar', u'University', u'was', u'founded', u'in', u'1973', u'.'], u'lemmas': [u'Qatar', u'University', u'be', u'found', u'in', u'1973', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[14261, 14266], [14267, 14277], [14278, 14281], [14282, 14289], [14290, 14292], [14293, 14297], [14297, 14298]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.013059062883257866, {u'tokens': [u'Qatar', u'has', u'a', u'modern', u'Telecommunication', u'system', u'centered', u'in', u'Doha', u'.'], u'lemmas': [u'Qatar', u'have', u'a', u'modern', u'telecommunication', u'system', u'center', u'in', u'Doha', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[15736, 15741], [15742, 15745], [15746, 15747], [15748, 15754], [15755, 15772], [15773, 15779], [15780, 15788], [15789, 15791], [15792, 15796], [15796, 15797]]}) 
answer: set([u'legally', u'woman', u'drive'])

Can women legally drive in Qatar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa98b00>.answer
_____________________________ test_yesno[param292] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa98b90>, (<src.tfidf.TF_IDF object at 0x10a153750>, set(['qatar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.7104792594909668, {u'tokens': [u'Women', u'can', u'legally', u'drive', u'in', u'Qatar', u',', u'whereas', u'they', u'may', u'not', u'in', u'Saudi', u'Arabia', u'.'], u'lemmas': [u'woman', u'can', u'legally', u'drive', u'in', u'Qatar', u',', u'whereas', u'they', u'may', u'not', u'in', u'Saudi', u'Arabia', u'.'], u'pos': [u'NNS', u'MD', u'RB', u'VB', u'IN', u'NNP', u',', u'IN', u'PRP', u'MD', u'RB', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12841, 12846], [12847, 12850], [12851, 12858], [12859, 12864], [12865, 12867], [12868, 12873], [12873, 12874], [12875, 12882], [12883, 12887], [12888, 12891], [12892, 12895], [12896, 12898], [12899, 12904], [12905, 12911], [12911, 12912]]}) 
answer: set([])
candidate Sentence: (0.23685914278030396, {u'tokens': [u'Also', u',', u'women', u'can', u'dress', u'mostly', u'as', u'they', u'please', u'in', u'public', u'-LRB-', u'although', u'in', u'practice', u'local', u'Qatari', u'women', u'generally', u'don', u'the', u'black', u'abaya', u'-RRB-', u'.'], u'lemmas': [u'also', u',', u'woman', u'can', u'dress', u'mostly', u'as', u'they', u'please', u'in', u'public', u'-lrb-', u'although', u'in', u'practice', u'local', u'qatari', u'woman', u'generally', u'don', u'the', u'black', u'abaya', u'-rrb-', u'.'], u'pos': [u'RB', u',', u'NNS', u'MD', u'VB', u'RB', u'IN', u'PRP', u'VB', u'IN', u'JJ', u'-LRB-', u'IN', u'IN', u'NN', u'JJ', u'JJ', u'NNS', u'RB', u'VBP', u'DT', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[13291, 13295], [13295, 13296], [13297, 13302], [13303, 13306], [13307, 13312], [13313, 13319], [13320, 13322], [13323, 13327], [13328, 13334], [13335, 13337], [13338, 13344], [13345, 13346], [13346, 13354], [13355, 13357], [13358, 13366], [13367, 13372], [13373, 13379], [13380, 13385], [13386, 13395], [13396, 13399], [13400, 13403], [13404, 13409], [13410, 13415], [13415, 13416], [13416, 13417]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.14199241995811462, {u'tokens': [u'Under', u'his', u'rule', u',', u'Qatar', u'became', u'the', u'first', u'Arab', u'country', u'in', u'the', u'Persian', u'Gulf', u'where', u'women', u'gained', u'the', u'right', u'to', u'vote', u'The', u'role', u'of', u'Saudi', u'women', u'as', u'well', u'as', u'holding', u'senior', u'positions', u'in', u'government', u'.'], u'lemmas': [u'under', u'he', u'rule', u',', u'Qatar', u'become', u'the', u'first', u'Arab', u'country', u'in', u'the', u'Persian', u'Gulf', u'where', u'woman', u'gain', u'the', u'right', u'to', u'vote', u'the', u'role', u'of', u'saudi', u'woman', u'as', u'well', u'as', u'hold', u'senior', u'position', u'in', u'government', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'WRB', u'NNS', u'VBD', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'RB', u'RB', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[13103, 13108], [13109, 13112], [13113, 13117], [13117, 13118], [13119, 13124], [13125, 13131], [13132, 13135], [13136, 13141], [13142, 13146], [13147, 13154], [13155, 13157], [13158, 13161], [13162, 13169], [13170, 13174], [13175, 13180], [13181, 13186], [13187, 13193], [13194, 13197], [13198, 13203], [13204, 13206], [13207, 13211], [13214, 13217], [13218, 13222], [13223, 13225], [13226, 13231], [13232, 13237], [13239, 13241], [13242, 13246], [13247, 13249], [13250, 13257], [13258, 13264], [13265, 13274], [13275, 13277], [13278, 13288], [13288, 13289]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.11561745405197144, {u'tokens': [u'She', u'chairs', u'the', u'Qatar', u'Foundation', u',', u'sits', u'on', u'the', u'board', u'of', u'Qatar', u"'s", u'Supreme', u'Education', u'Council', u',', u'and', u'is', u'a', u'major', u'driving', u'force', u'behind', u'the', u'importation', u'of', u'western', u'expertise', u'into', u'the', u'education', u'system', u',', u'particularly', u'at', u'the', u'college', u'level', u'.'], u'lemmas': [u'she', u'chair', u'the', u'Qatar', u'Foundation', u',', u'sit', u'on', u'the', u'board', u'of', u'Qatar', u"'s", u'Supreme', u'Education', u'Council', u',', u'and', u'be', u'a', u'major', u'drive', u'force', u'behind', u'the', u'importation', u'of', u'western', u'expertise', u'into', u'the', u'education', u'system', u',', u'particularly', u'at', u'the', u'college', u'level', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'NNP', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'VBG', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u',', u'RB', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[15512, 15515], [15516, 15522], [15523, 15526], [15527, 15532], [15533, 15543], [15543, 15544], [15545, 15549], [15550, 15552], [15553, 15556], [15557, 15562], [15563, 15565], [15566, 15571], [15571, 15573], [15574, 15581], [15582, 15591], [15592, 15599], [15599, 15600], [15601, 15604], [15605, 15607], [15608, 15609], [15610, 15615], [15616, 15623], [15624, 15629], [15630, 15636], [15637, 15640], [15641, 15652], [15653, 15655], [15656, 15663], [15664, 15673], [15674, 15678], [15679, 15682], [15683, 15692], [15693, 15699], [15699, 15700], [15701, 15713], [15714, 15716], [15717, 15720], [15721, 15728], [15729, 15734], [15734, 15735]]}) 
answer: set([u'legally', u'woman'])
candidate Sentence: (0.071120992302894592, {u'tokens': [u'According', u'to', u'the', u'US', u'State', u'Department', u"'s", u'Trafficking', u'in', u'Persons', u'Report', u',', u'men', u'and', u'women', u'who', u'are', u'lured', u'into', u'Qatar', u'by', u'promises', u'of', u'high', u'wages', u'are', u'often', u'forced', u'into', u'underpaid', u'labor', u'.'], u'lemmas': [u'accord', u'to', u'the', u'US', u'State', u'Department', u"'s", u'trafficking', u'in', u'Persons', u'Report', u',', u'man', u'and', u'woman', u'who', u'be', u'lure', u'into', u'Qatar', u'by', u'promise', u'of', u'high', u'wages', u'be', u'often', u'force', u'into', u'underpaid', u'labor', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'NNP', u'NNP', u'NNP', u'POS', u'NN', u'IN', u'NNPS', u'NNP', u',', u'NNS', u'CC', u'NNS', u'WP', u'VBP', u'VBN', u'IN', u'NNP', u'IN', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[16777, 16786], [16787, 16789], [16790, 16793], [16794, 16796], [16797, 16802], [16803, 16813], [16813, 16815], [16816, 16827], [16828, 16830], [16831, 16838], [16839, 16845], [16845, 16846], [16847, 16850], [16851, 16854], [16855, 16860], [16861, 16864], [16865, 16868], [16869, 16874], [16875, 16879], [16880, 16885], [16886, 16888], [16889, 16897], [16898, 16900], [16901, 16905], [16906, 16911], [16912, 16915], [16916, 16921], [16922, 16928], [16929, 16933], [16934, 16943], [16944, 16949], [16949, 16950]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.070048503577709198, {u'tokens': [u'People', u'can', u'call', u'to', u'Qatar', u'using', u'their', u'submarine', u'cable', u',', u'satellite', u'or', u'using', u'VoIP', u'-LRB-', u'Voice', u'over', u'Internet', u'Protocol', u'-RRB-', u';', u'however', u',', u'Qtel', u'has', u'interfered', u'with', u'VoIP', u'systems', u'in', u'the', u'past', u',', u'and', u'Skype', u"'s", u'website', u'has', u'been', u'blocked', u'before', u'.'], u'lemmas': [u'people', u'can', u'call', u'to', u'Qatar', u'use', u'they', u'submarine', u'cable', u',', u'satellite', u'or', u'use', u'voip', u'-lrb-', u'Voice', u'over', u'Internet', u'Protocol', u'-rrb-', u';', u'however', u',', u'Qtel', u'have', u'interfere', u'with', u'voip', u'system', u'in', u'the', u'past', u',', u'and', u'skype', u"'s", u'website', u'have', u'be', u'block', u'before', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'TO', u'NNP', u'VBG', u'PRP$', u'NN', u'NN', u',', u'NN', u'CC', u'VBG', u'NN', u'-LRB-', u'NNP', u'IN', u'NNP', u'NNP', u'-RRB-', u':', u'RB', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'NN', u'NNS', u'IN', u'DT', u'NN', u',', u'CC', u'VB', u'POS', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'.'], u'char_offsets': [[16005, 16011], [16012, 16015], [16016, 16020], [16021, 16023], [16024, 16029], [16030, 16035], [16036, 16041], [16042, 16051], [16052, 16057], [16057, 16058], [16059, 16068], [16069, 16071], [16072, 16077], [16078, 16082], [16083, 16084], [16084, 16089], [16090, 16094], [16095, 16103], [16104, 16112], [16112, 16113], [16113, 16114], [16115, 16122], [16122, 16123], [16124, 16128], [16129, 16132], [16133, 16143], [16144, 16148], [16149, 16153], [16154, 16161], [16162, 16164], [16165, 16168], [16169, 16173], [16173, 16174], [16175, 16178], [16179, 16184], [16184, 16186], [16187, 16194], [16195, 16198], [16199, 16203], [16204, 16211], [16212, 16218], [16218, 16219]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.063884884119033813, {u'tokens': [u'The', u'q', u'and', u'the', u't', u'have', u'no', u'direct', u'counterparts', u',', u'but', u'are', u'closest', u'to', u'the', u'unaspirated', u'allophones', u'of', u'English', u'k', u'and', u't.', u'However', u',', u'since', u'these', u'allophones', u'can', u'not', u'occur', u'in', u'these', u'positions', u'in', u'English', u',', u'in', u'this', u'context', u'they', u'will', u'sound', u'more', u'like', u'English', u'g', u'and', u'd', u'.'], u'lemmas': [u'the', u'q', u'and', u'the', u't', u'have', u'no', u'direct', u'counterpart', u',', u'but', u'be', u'closest', u'to', u'the', u'unaspirated', u'allophone', u'of', u'English', u'k', u'and', u't.', u'however', u',', u'since', u'these', u'allophone', u'can', u'not', u'occur', u'in', u'these', u'position', u'in', u'English', u',', u'in', u'this', u'context', u'they', u'will', u'sound', u'more', u'like', u'English', u'g', u'and', u'd', u'.'], u'pos': [u'DT', u'NN', u'CC', u'DT', u'NN', u'VBP', u'DT', u'JJ', u'NNS', u',', u'CC', u'VBP', u'JJS', u'TO', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NN', u'CC', u'NN', u'RB', u',', u'IN', u'DT', u'NNS', u'MD', u'RB', u'VB', u'IN', u'DT', u'NNS', u'IN', u'NNP', u',', u'IN', u'DT', u'NN', u'PRP', u'MD', u'VB', u'JJR', u'IN', u'NNP', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[204, 207], [208, 209], [210, 213], [214, 217], [218, 219], [220, 224], [225, 227], [228, 234], [235, 247], [247, 248], [249, 252], [253, 256], [257, 264], [265, 267], [268, 271], [272, 283], [284, 294], [295, 297], [298, 305], [306, 307], [308, 311], [312, 314], [315, 322], [322, 323], [324, 329], [330, 335], [336, 346], [347, 350], [350, 353], [354, 359], [360, 362], [363, 368], [369, 378], [379, 381], [382, 389], [389, 390], [391, 393], [394, 398], [399, 406], [407, 411], [412, 416], [417, 422], [423, 427], [428, 432], [433, 440], [441, 442], [443, 446], [447, 448], [448, 449]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.060993269085884094, {u'tokens': [u'Under', u'Emir', u'Hamad', u',', u'Qatar', u'has', u'experienced', u'a', u'notable', u'amount', u'of', u'sociopolitical', u'liberalization', u',', u'including', u'the', u'enfranchisement', u'of', u'women', u',', u'a', u'new', u'constitution', u',', u'and', u'the', u'launch', u'of', u'Al', u'Jazeera', u',', u'a', u'leading', u'English', u'and', u'Arabic', u'news', u'source', u',', u'which', u'operates', u'a', u'website', u'and', u'satellite', u'television', u'news', u'channel', u'.'], u'lemmas': [u'under', u'Emir', u'Hamad', u',', u'Qatar', u'have', u'experience', u'a', u'notable', u'amount', u'of', u'sociopolitical', u'liberalization', u',', u'include', u'the', u'enfranchisement', u'of', u'woman', u',', u'a', u'new', u'constitution', u',', u'and', u'the', u'launch', u'of', u'Al', u'Jazeera', u',', u'a', u'lead', u'english', u'and', u'arabic', u'news', u'source', u',', u'which', u'operate', u'a', u'website', u'and', u'satellite', u'television', u'news', u'channel', u'.'], u'pos': [u'IN', u'NNP', u'NNP', u',', u'NNP', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'IN', u'NNS', u',', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'VBG', u'JJ', u'CC', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[4774, 4779], [4780, 4784], [4785, 4790], [4790, 4791], [4792, 4797], [4798, 4801], [4802, 4813], [4814, 4815], [4816, 4823], [4824, 4830], [4831, 4833], [4834, 4848], [4849, 4863], [4863, 4864], [4865, 4874], [4875, 4878], [4879, 4894], [4895, 4897], [4898, 4903], [4903, 4904], [4905, 4906], [4907, 4910], [4911, 4923], [4923, 4924], [4925, 4928], [4929, 4932], [4933, 4939], [4940, 4942], [4943, 4945], [4946, 4953], [4953, 4954], [4955, 4956], [4957, 4964], [4965, 4972], [4973, 4976], [4977, 4983], [4984, 4988], [4989, 4995], [4995, 4996], [4997, 5002], [5003, 5011], [5012, 5013], [5014, 5021], [5022, 5025], [5026, 5035], [5036, 5046], [5047, 5051], [5052, 5059], [5059, 5060]]}) 
answer: set([u'legally', u'drive'])
candidate Sentence: (0.015679545700550079, {u'tokens': [u'Qatar', u'University', u'was', u'founded', u'in', u'1973', u'.'], u'lemmas': [u'Qatar', u'University', u'be', u'found', u'in', u'1973', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[14261, 14266], [14267, 14277], [14278, 14281], [14282, 14289], [14290, 14292], [14293, 14297], [14297, 14298]]}) 
answer: set([u'legally', u'woman', u'drive'])
candidate Sentence: (0.013059062883257866, {u'tokens': [u'Qatar', u'has', u'a', u'modern', u'Telecommunication', u'system', u'centered', u'in', u'Doha', u'.'], u'lemmas': [u'Qatar', u'have', u'a', u'modern', u'telecommunication', u'system', u'center', u'in', u'Doha', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[15736, 15741], [15742, 15745], [15746, 15747], [15748, 15754], [15755, 15772], [15773, 15779], [15780, 15788], [15789, 15791], [15792, 15796], [15796, 15797]]}) 
answer: set([u'legally', u'woman', u'drive'])

Can women legally drive in Qatar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa98b90>.answer
_____________________________ test_yesno[param304] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9b290>, (<src.tfidf.TF_IDF object at 0x1061d2650>, set(['romania'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Practically') == True
E                +  where 'Practically' = <src.question_processing.Question_parser instance at 0x10aa9b290>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25369369983673096, {u'tokens': [u'U.S.', u'Department', u'of', u'State', u'-', u'Background', u'Note', u':', u'Romania', u'-', u'U.S.-ROMANIAN', u'RELATIONS', u'Relations', u'with', u'Moldova', u'are', u'rather', u'special', u',', u'considering', u'that', u'the', u'two', u'countries', u'practically', u'share', u'the', u'same', u'language', u',', u'and', u'a', u'fairly', u'common', u'historical', u'background', u'.'], u'lemmas': [u'U.S.', u'Department', u'of', u'State', u'-', u'background', u'note', u':', u'Romania', u'-', u'U.S.-ROMANIAN', u'RELATIONS', u'Relations', u'with', u'Moldova', u'be', u'rather', u'special', u',', u'consider', u'that', u'the', u'two', u'country', u'practically', u'share', u'the', u'same', u'language', u',', u'and', u'a', u'fairly', u'common', u'historical', u'background', u'.'], u'pos': [u'NNP', u'NNP', u'IN', u'NNP', u':', u'NN', u'NN', u':', u'NNP', u':', u'NNP', u'NNP', u'NNPS', u'IN', u'NNP', u'VBP', u'RB', u'JJ', u',', u'VBG', u'IN', u'DT', u'CD', u'NNS', u'RB', u'VBP', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'RB', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[58359, 58363], [58364, 58374], [58375, 58377], [58378, 58383], [58384, 58385], [58386, 58396], [58397, 58401], [58401, 58402], [58403, 58410], [58411, 58412], [58413, 58426], [58427, 58436], [58437, 58446], [58447, 58451], [58452, 58459], [58460, 58463], [58464, 58470], [58471, 58478], [58478, 58479], [58480, 58491], [58492, 58496], [58497, 58500], [58501, 58504], [58505, 58514], [58515, 58526], [58527, 58532], [58533, 58536], [58537, 58541], [58542, 58550], [58550, 58551], [58552, 58555], [58556, 58557], [58558, 58564], [58565, 58571], [58572, 58582], [58583, 58593], [58593, 58594]]}) 
answer: set([])
candidate Sentence: (0.1982925683259964, {u'tokens': [u'With', u'Turkey', u',', u'Romania', u'shares', u'a', u'privileged', u'economic', u'relation', u'.'], u'lemmas': [u'with', u'Turkey', u',', u'Romania', u'share', u'a', u'privileged', u'economic', u'relation', u'.'], u'pos': [u'IN', u'NNP', u',', u'NNP', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[57891, 57895], [57896, 57902], [57902, 57903], [57904, 57911], [57912, 57918], [57919, 57920], [57921, 57931], [57932, 57940], [57941, 57949], [57949, 57950]]}) 
answer: set([u'language', u'moldova'])
candidate Sentence: (0.180820032954216, {u'tokens': [u'It', u'shares', u'a', u'border', u'with', u'Hungary', u'and', u'Serbia', u'to', u'the', u'west', u',', u'Ukraine', u'and', u'the', u'Republic', u'of', u'Moldova', u'to', u'the', u'northeast', u',', u'and', u'Bulgaria', u'to', u'the', u'south', u'.'], u'lemmas': [u'it', u'share', u'a', u'border', u'with', u'Hungary', u'and', u'Serbia', u'to', u'the', u'west', u',', u'Ukraine', u'and', u'the', u'republic', u'of', u'Moldova', u'to', u'the', u'northeast', u',', u'and', u'Bulgaria', u'to', u'the', u'south', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'TO', u'DT', u'NN', u',', u'NNP', u'CC', u'DT', u'NN', u'IN', u'NNP', u'TO', u'DT', u'NN', u',', u'CC', u'NNP', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[52, 54], [55, 61], [62, 63], [64, 70], [71, 75], [76, 83], [84, 87], [88, 94], [95, 97], [98, 101], [102, 106], [106, 107], [108, 115], [116, 119], [120, 123], [124, 132], [133, 135], [136, 143], [144, 146], [147, 150], [151, 160], [160, 161], [162, 165], [166, 174], [175, 177], [178, 181], [182, 187], [187, 188]]}) 
answer: set([u'language'])
candidate Sentence: (0.16798578202724457, {u'tokens': [u'The', u'official', u'language', u'of', u'Romania', u'is', u'Romanian', u',', u'an', u'Eastern', u'Romance', u'language', u'related', u'to', u'Italian', u',', u'French', u',', u'Spanish', u',', u'Portuguese', u'and', u'Catalan', u'.'], u'lemmas': [u'the', u'official', u'language', u'of', u'Romania', u'be', u'romanian', u',', u'a', u'Eastern', u'Romance', u'language', u'related', u'to', u'italian', u',', u'french', u',', u'spanish', u',', u'portuguese', u'and', u'catalan', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBZ', u'JJ', u',', u'DT', u'NNP', u'NNP', u'NN', u'JJ', u'TO', u'JJ', u',', u'JJ', u',', u'JJ', u',', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[30505, 30508], [30509, 30517], [30518, 30526], [30527, 30529], [30530, 30537], [30538, 30540], [30541, 30549], [30549, 30550], [30551, 30553], [30554, 30561], [30562, 30569], [30570, 30578], [30579, 30586], [30587, 30589], [30590, 30597], [30597, 30598], [30599, 30605], [30605, 30606], [30607, 30614], [30614, 30615], [30616, 30626], [30627, 30630], [30631, 30638], [30638, 30639]]}) 
answer: set([u'share', u'moldova'])
candidate Sentence: (0.16590285301208496, {u'tokens': [u'Economy', u'Ranking', u',', u'Doing', u'Business', u'2007', u'Report', u',', u'World', u'Bank', u'Additionally', u',', u'the', u'same', u'study', u'judged', u'it', u'to', u'be', u'the', u'world', u"'s", u'second-fastest', u'economic', u'reformer', u'in', u'2006', u'.'], u'lemmas': [u'Economy', u'Ranking', u',', u'do', u'business', u'2007', u'Report', u',', u'World', u'Bank', u'additionally', u',', u'the', u'same', u'study', u'judge', u'it', u'to', u'be', u'the', u'world', u"'s", u'second-fastest', u'economic', u'reformer', u'in', u'2006', u'.'], u'pos': [u'NNP', u'NNP', u',', u'VBG', u'NN', u'CD', u'NNP', u',', u'NNP', u'NNP', u'RB', u',', u'DT', u'JJ', u'NN', u'VBD', u'PRP', u'TO', u'VB', u'DT', u'NN', u'POS', u'JJS', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[40554, 40561], [40562, 40569], [40569, 40570], [40571, 40576], [40577, 40585], [40586, 40590], [40591, 40597], [40597, 40598], [40599, 40604], [40605, 40609], [40611, 40623], [40623, 40624], [40625, 40628], [40629, 40633], [40634, 40639], [40640, 40646], [40647, 40649], [40650, 40652], [40653, 40655], [40656, 40659], [40660, 40665], [40665, 40667], [40668, 40682], [40683, 40691], [40692, 40700], [40701, 40703], [40704, 40708], [40708, 40709]]}) 
answer: set([u'share', u'language', u'moldova'])
candidate Sentence: (0.14218269288539886, {u'tokens': [u'Romanian', u'is', u'spoken', u'as', u'a', u'first', u'language', u'by', u'91', u'%', u'of', u'the', u'population', u',', u'with', u'Hungarian', u'and', u'Romani', u'being', u'the', u'most', u'important', u'minority', u'languages', u',', u'spoken', u'by', u'6.7', u'%', u'and', u'1.1', u'%', u'of', u'the', u'population', u',', u'respectively', u'.'], u'lemmas': [u'romanian', u'be', u'speak', u'as', u'a', u'first', u'language', u'by', u'91', u'%', u'of', u'the', u'population', u',', u'with', u'hungarian', u'and', u'romani', u'be', u'the', u'most', u'important', u'minority', u'language', u',', u'speak', u'by', u'6.7', u'%', u'and', u'1.1', u'%', u'of', u'the', u'population', u',', u'respectively', u'.'], u'pos': [u'JJ', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'CD', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'CC', u'JJ', u'VBG', u'DT', u'RBS', u'JJ', u'NN', u'NNS', u',', u'VBN', u'IN', u'CD', u'NN', u'CC', u'CD', u'NN', u'IN', u'DT', u'NN', u',', u'RB', u'.'], u'char_offsets': [[30640, 30648], [30649, 30651], [30652, 30658], [30659, 30661], [30662, 30663], [30664, 30669], [30670, 30678], [30679, 30681], [30682, 30684], [30684, 30685], [30686, 30688], [30689, 30692], [30693, 30703], [30703, 30704], [30705, 30709], [30710, 30719], [30720, 30723], [30724, 30730], [30731, 30736], [30737, 30740], [30741, 30745], [30746, 30755], [30756, 30764], [30765, 30774], [30774, 30775], [30776, 30782], [30783, 30785], [30786, 30789], [30789, 30790], [30791, 30794], [30795, 30798], [30798, 30799], [30800, 30802], [30803, 30806], [30807, 30817], [30817, 30818], [30819, 30831], [30831, 30832]]}) 
answer: set([u'share', u'moldova'])
candidate Sentence: (0.12127925455570221, {u'tokens': [u'English', u'and', u'French', u'are', u'the', u'main', u'foreign', u'languages', u'taught', u'in', u'schools', u'.'], u'lemmas': [u'English', u'and', u'French', u'be', u'the', u'main', u'foreign', u'language', u'teach', u'in', u'school', u'.'], u'pos': [u'NNP', u'CC', u'NNP', u'VBP', u'DT', u'JJ', u'JJ', u'NNS', u'VBD', u'IN', u'NNS', u'.'], u'char_offsets': [[31267, 31274], [31275, 31278], [31279, 31285], [31286, 31289], [31290, 31293], [31294, 31298], [31299, 31306], [31307, 31316], [31317, 31323], [31324, 31326], [31327, 31334], [31334, 31335]]}) 
answer: set([u'share', u'moldova'])
candidate Sentence: (0.11583514511585236, {u'tokens': [u'Romania', u'is', u'a', u'semi-presidential', u'democratic', u'republic', u'where', u'executive', u'functions', u'are', u'shared', u'between', u'the', u'president', u'and', u'the', u'prime', u'minister', u'.'], u'lemmas': [u'Romania', u'be', u'a', u'semi-presidential', u'democratic', u'republic', u'where', u'executive', u'function', u'be', u'share', u'between', u'the', u'president', u'and', u'the', u'prime', u'minister', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'WRB', u'NN', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[52573, 52580], [52581, 52583], [52584, 52585], [52586, 52603], [52604, 52614], [52615, 52623], [52624, 52629], [52630, 52639], [52640, 52649], [52650, 52653], [52654, 52660], [52661, 52668], [52669, 52672], [52673, 52682], [52683, 52686], [52687, 52690], [52691, 52696], [52697, 52705], [52705, 52706]]}) 
answer: set([u'language', u'moldova'])
candidate Sentence: (0.10368478298187256, {u'tokens': [u'The', u'electors', u'in', u'both', u'Moldavia', u'and', u'Wallachia', u'chose', u'in', u'1859', u'the', u'same', u'person', u'Alexandru', u'Ioan', u'Cuza', u'as', u'prince', u'-LRB-', u'Domnitor', u'in', u'Romanian', u'-RRB-', u'.'], u'lemmas': [u'the', u'elector', u'in', u'both', u'Moldavia', u'and', u'Wallachia', u'choose', u'in', u'1859', u'the', u'same', u'person', u'Alexandru', u'Ioan', u'Cuza', u'as', u'prince', u'-lrb-', u'domnitor', u'in', u'romanian', u'-rrb-', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'VBD', u'IN', u'CD', u'DT', u'JJ', u'NN', u'NNP', u'NNP', u'NNP', u'IN', u'NN', u'-LRB-', u'NN', u'IN', u'JJ', u'-RRB-', u'.'], u'char_offsets': [[12372, 12375], [12376, 12384], [12385, 12387], [12388, 12392], [12393, 12401], [12402, 12405], [12406, 12415], [12416, 12421], [12422, 12424], [12425, 12429], [12430, 12433], [12434, 12438], [12439, 12445], [12448, 12457], [12458, 12462], [12463, 12467], [12470, 12472], [12473, 12479], [12480, 12481], [12481, 12489], [12490, 12492], [12493, 12501], [12501, 12502], [12502, 12503]]}) 
answer: set([u'share', u'language', u'moldova'])
candidate Sentence: (0.10010648518800735, {u'tokens': [u'The', u'Danube', u'is', u'joined', u'by', u'the', u'Prut', u'River', u',', u'which', u'forms', u'the', u'border', u'with', u'the', u'Republic', u'of', u'Moldova', u'.'], u'lemmas': [u'the', u'Danube', u'be', u'join', u'by', u'the', u'Prut', u'River', u',', u'which', u'form', u'the', u'border', u'with', u'the', u'republic', u'of', u'Moldova', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[24502, 24505], [24506, 24512], [24513, 24515], [24516, 24522], [24523, 24525], [24526, 24529], [24530, 24534], [24535, 24540], [24540, 24541], [24542, 24547], [24548, 24553], [24554, 24557], [24558, 24564], [24565, 24569], [24570, 24573], [24574, 24582], [24583, 24585], [24586, 24593], [24593, 24594]]}) 
answer: set([u'share', u'language'])

Does Romania share the same language with Moldova?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Practically
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('Practically') == True
 +  where 'Practically' = <src.question_processing.Question_parser instance at 0x10aa9b290>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param312] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9b710>, (<src.tfidf.TF_IDF object at 0x1084deb10>, set(['singapore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa9b710>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37822696566581726, {u'tokens': [u'Singapore', u'-LRB-', u';', u';', u',', u'-RRB-', u',', u'officially', u'the', u'Republic', u'of', u'Singapore', u'-LRB-', u';', u';', u',', u'-RRB-', u',', u'is', u'an', u'island', u'nation', u'located', u'at', u'the', u'southern', u'tip', u'of', u'the', u'Malay', u'Peninsula', u'.'], u'lemmas': [u'Singapore', u'-lrb-', u';', u';', u',', u'-rrb-', u',', u'officially', u'the', u'republic', u'of', u'Singapore', u'-lrb-', u';', u';', u',', u'-rrb-', u',', u'be', u'a', u'island', u'nation', u'located', u'at', u'the', u'southern', u'tip', u'of', u'the', u'Malay', u'Peninsula', u'.'], u'pos': [u'NNP', u'-LRB-', u':', u':', u',', u'-RRB-', u',', u'RB', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u':', u':', u',', u'-RRB-', u',', u'VBZ', u'DT', u'NN', u'NN', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[0, 9], [10, 11], [12, 13], [15, 16], [18, 19], [21, 22], [22, 23], [24, 34], [35, 38], [39, 47], [48, 50], [51, 60], [61, 62], [63, 64], [66, 67], [69, 70], [72, 73], [73, 74], [75, 77], [78, 80], [81, 87], [88, 94], [95, 102], [103, 105], [106, 109], [110, 118], [119, 122], [123, 125], [126, 129], [130, 135], [136, 145], [145, 146]]}) 
answer: set([u'locate', u'korean', u'penisulum'])
candidate Sentence: (0.1337556391954422, {u'tokens': [u'Scuba', u'diving', u'is', u'another', u'recreation', u',', u'particularly', u'around', u'the', u'southern', u'island', u'of', u'Pulau', u'Hantu', u'which', u'is', u'known', u'for', u'its', u'rich', u'coral', u'reefs', u'.'], u'lemmas': [u'scuba', u'diving', u'be', u'another', u'recreation', u',', u'particularly', u'around', u'the', u'southern', u'island', u'of', u'Pulau', u'Hantu', u'which', u'be', u'know', u'for', u'its', u'rich', u'coral', u'reef', u'.'], u'pos': [u'NN', u'NN', u'VBZ', u'DT', u'NN', u',', u'RB', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'WDT', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[36446, 36451], [36452, 36458], [36459, 36461], [36462, 36469], [36470, 36480], [36480, 36481], [36482, 36494], [36495, 36501], [36502, 36505], [36506, 36514], [36515, 36521], [36522, 36524], [36525, 36530], [36531, 36536], [36537, 36542], [36543, 36545], [36546, 36551], [36552, 36555], [36556, 36559], [36560, 36564], [36565, 36570], [36571, 36576], [36576, 36577]]}) 
answer: set([u'locate', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.13302686810493469, {u'tokens': [u'Singapore', u'is', u'linked', u'to', u'Johor', u',', u'Malaysia', u'via', u'the', u'Johor-Singapore', u'Causeway', u'and', u'the', u'Tuas', u'Second', u'Link', u',', u'as', u'well', u'as', u'a', u'railway', u'operated', u'by', u'Keretapi', u'Tanah', u'Melayu', u'of', u'Malaysia', u',', u'with', u'its', u'southern', u'terminus', u'at', u'Tanjong', u'Pagar', u'railway', u'station', u'.'], u'lemmas': [u'Singapore', u'be', u'link', u'to', u'Johor', u',', u'Malaysia', u'via', u'the', u'Johor-Singapore', u'Causeway', u'and', u'the', u'Tuas', u'Second', u'Link', u',', u'as', u'well', u'as', u'a', u'railway', u'operate', u'by', u'Keretapi', u'Tanah', u'Melayu', u'of', u'Malaysia', u',', u'with', u'its', u'southern', u'terminus', u'at', u'Tanjong', u'Pagar', u'railway', u'station', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'NNP', u',', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u',', u'RB', u'RB', u'IN', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u',', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'NN', u'NN', u'.'], u'char_offsets': [[44294, 44303], [44304, 44306], [44307, 44313], [44314, 44316], [44317, 44322], [44322, 44323], [44324, 44332], [44333, 44336], [44337, 44340], [44341, 44356], [44357, 44365], [44366, 44369], [44370, 44373], [44374, 44378], [44379, 44385], [44386, 44390], [44390, 44391], [44392, 44394], [44395, 44399], [44400, 44402], [44403, 44404], [44405, 44412], [44413, 44421], [44422, 44424], [44425, 44433], [44434, 44439], [44440, 44446], [44447, 44449], [44450, 44458], [44458, 44459], [44460, 44464], [44465, 44468], [44469, 44477], [44478, 44486], [44487, 44489], [44490, 44497], [44498, 44503], [44504, 44511], [44512, 44519], [44519, 44520]]}) 
answer: set([u'locate', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.10686957836151123, {u'tokens': [u'The', u'Japanese', u'renamed', u'Singapore', u',', u'from', u'Japanese', u',', u'or', u'``', u'southern', u'island', u'obtained', u'in', u'the', u'age', u'of', u'Sh\u014dwa', u"''", u',', u'and', u'occupied', u'it', u'until', u'the', u'British', u'repossessed', u'the', u'island', u'on', u'September', u'12', u'1945', u',', u'a', u'month', u'after', u'the', u'Japanese', u'surrender', u'.'], u'lemmas': [u'the', u'japanese', u'rename', u'Singapore', u',', u'from', u'japanese', u',', u'or', u'``', u'southern', u'island', u'obtain', u'in', u'the', u'age', u'of', u'Sh\u014dwa', u"''", u',', u'and', u'occupy', u'it', u'until', u'the', u'british', u'repossessed', u'the', u'island', u'on', u'September', u'12', u'1945', u',', u'a', u'month', u'after', u'the', u'japanese', u'surrender', u'.'], u'pos': [u'DT', u'JJ', u'VBN', u'NNP', u',', u'IN', u'JJ', u',', u'CC', u'``', u'JJ', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u"''", u',', u'CC', u'VBD', u'PRP', u'IN', u'DT', u'JJ', u'JJ', u'DT', u'NN', u'IN', u'NNP', u'CD', u'CD', u',', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[5835, 5838], [5839, 5847], [5848, 5855], [5856, 5865], [5867, 5868], [5869, 5873], [5874, 5882], [5884, 5885], [5886, 5888], [5889, 5890], [5890, 5898], [5899, 5905], [5906, 5914], [5915, 5917], [5918, 5921], [5922, 5925], [5926, 5928], [5929, 5934], [5934, 5935], [5935, 5936], [5937, 5940], [5941, 5949], [5950, 5952], [5953, 5958], [5959, 5962], [5963, 5970], [5971, 5982], [5983, 5986], [5987, 5993], [5994, 5996], [5997, 6006], [6007, 6009], [6010, 6014], [6014, 6015], [6016, 6017], [6018, 6023], [6024, 6029], [6030, 6033], [6034, 6042], [6043, 6052], [6052, 6053]]}) 
answer: set([u'locate', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.099723495543003082, {u'tokens': [u'Statue', u'of', u'Thomas', u'Stamford', u'Raffles', u'by', u'Thomas', u'Woolner', u',', u'erected', u'at', u'the', u'location', u'where', u'he', u'first', u'landed', u'at', u'Singapore', u'.'], u'lemmas': [u'Statue', u'of', u'Thomas', u'Stamford', u'Raffles', u'by', u'Thomas', u'Woolner', u',', u'erect', u'at', u'the', u'location', u'where', u'he', u'first', u'land', u'at', u'Singapore', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'DT', u'NN', u'WRB', u'PRP', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[5325, 5331], [5332, 5334], [5335, 5341], [5342, 5350], [5351, 5358], [5359, 5361], [5362, 5368], [5369, 5376], [5376, 5377], [5378, 5385], [5386, 5388], [5389, 5392], [5393, 5401], [5402, 5407], [5408, 5410], [5411, 5416], [5417, 5423], [5424, 5426], [5427, 5436], [5436, 5437]]}) 
answer: set([u'locate', u'tip', u'korean', u'southern', u'penisulum'])
candidate Sentence: (0.087353795766830444, {u'tokens': [u'The', u'highest', u'natural', u'point', u'of', u'Singapore', u'is', u'Bukit', u'Timah', u'Hill', u'at', u'.'], u'lemmas': [u'the', u'highest', u'natural', u'point', u'of', u'Singapore', u'be', u'Bukit', u'Timah', u'Hill', u'at', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'VBZ', u'NNP', u'NNP', u'NNP', u'IN', u'.'], u'char_offsets': [[12651, 12654], [12655, 12662], [12663, 12670], [12671, 12676], [12677, 12679], [12680, 12689], [12690, 12692], [12693, 12698], [12699, 12704], [12705, 12709], [12710, 12712], [12714, 12715]]}) 
answer: set([u'locate', u'southern', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.083869107067584991, {u'tokens': [u'The', u'Downtown', u'Core', u'of', u'Singapore', u'at', u'dusk', u'The', u'first', u'records', u'of', u'settlement', u'in', u'Singapore', u'are', u'from', u'the', u'second', u'century', u'AD', u'.'], u'lemmas': [u'the', u'downtown', u'core', u'of', u'Singapore', u'at', u'dusk', u'the', u'first', u'record', u'of', u'settlement', u'in', u'Singapore', u'be', u'from', u'the', u'second', u'century', u'ad', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'IN', u'NN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u'IN', u'NNP', u'VBP', u'IN', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[2644, 2647], [2648, 2656], [2657, 2661], [2662, 2664], [2665, 2674], [2675, 2677], [2678, 2682], [2683, 2686], [2687, 2692], [2693, 2700], [2701, 2703], [2704, 2714], [2715, 2717], [2718, 2727], [2728, 2731], [2732, 2736], [2737, 2740], [2741, 2747], [2748, 2755], [2756, 2758], [2758, 2759]]}) 
answer: set([u'locate', u'southern', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.075721532106399536, {u'tokens': [u'A', u'circulation', u'version', u'of', u'the', u'$', u'20', u'note', u'can', u'be', u'exchanged', u'at', u'banks', u'in', u'Singapore', u'.'], u'lemmas': [u'a', u'circulation', u'version', u'of', u'the', u'$', u'20', u'note', u'can', u'be', u'exchange', u'at', u'bank', u'in', u'Singapore', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'DT', u'$', u'CD', u'NN', u'MD', u'VB', u'VBN', u'IN', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[21095, 21096], [21097, 21108], [21109, 21116], [21117, 21119], [21120, 21123], [21124, 21125], [21125, 21127], [21128, 21132], [21133, 21136], [21137, 21139], [21140, 21149], [21150, 21152], [21153, 21158], [21159, 21161], [21162, 21171], [21171, 21172]]}) 
answer: set([u'locate', u'southern', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.07471039891242981, {u'tokens': [u'The', u'main', u'settlement', u'up', u'to', u'that', u'point', u'was', u'a', u'Malay', u'fishing', u'village', u'at', u'the', u'mouth', u'of', u'the', u'Singapore', u'River', u'.'], u'lemmas': [u'the', u'main', u'settlement', u'up', u'to', u'that', u'point', u'be', u'a', u'malay', u'fishing', u'village', u'at', u'the', u'mouth', u'of', u'the', u'Singapore', u'River', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'TO', u'DT', u'NN', u'VBD', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[484, 487], [488, 492], [493, 503], [504, 506], [507, 509], [510, 514], [515, 520], [521, 524], [525, 526], [527, 532], [533, 540], [541, 548], [549, 551], [552, 555], [556, 561], [562, 564], [565, 568], [569, 578], [579, 584], [584, 585]]}) 
answer: set([u'locate', u'southern', u'korean', u'tip', u'penisulum'])
candidate Sentence: (0.071488805115222931, {u'tokens': [u'The', u'Singapore', u'dollar', u'was', u'exchangeable', u'at', u'par', u'with', u'the', u'Malaysian', u'ringgit', u'until', u'1973', u'.'], u'lemmas': [u'the', u'Singapore', u'dollar', u'be', u'exchangeable', u'at', u'par', u'with', u'the', u'malaysian', u'ringgit', u'until', u'1973', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'VBD', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[20753, 20756], [20757, 20766], [20767, 20773], [20774, 20777], [20778, 20790], [20791, 20793], [20794, 20797], [20798, 20802], [20803, 20806], [20807, 20816], [20817, 20824], [20825, 20830], [20831, 20835], [20835, 20836]]}) 
answer: set([u'locate', u'southern', u'korean', u'tip', u'penisulum'])

Is Singapore located at the southern tip of the Korean Penisula?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa9b710>.answer
_____________________________ test_yesno[param315] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9b8c0>, (<src.tfidf.TF_IDF object at 0x1084deb10>, set(['singapore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa9b8c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.28596669435501099, {u'tokens': [u'Recent', u'studies', u'of', u'Singapore', u'indicate', u'that', u'lions', u'have', u'never', u'lived', u'there', u'-LRB-', u'not', u'even', u'Asiatic', u'lions', u'-RRB-', u',', u'and', u'the', u'beast', u'seen', u'by', u'Sang', u'Nila', u'Utama', u'was', u'likely', u'a', u'tiger', u',', u'most', u'likely', u'the', u'Malayan', u'Tiger', u'.'], u'lemmas': [u'recent', u'study', u'of', u'Singapore', u'indicate', u'that', u'lion', u'have', u'never', u'live', u'there', u'-lrb-', u'not', u'even', u'asiatic', u'lion', u'-rrb-', u',', u'and', u'the', u'beast', u'see', u'by', u'Sang', u'Nila', u'Utama', u'be', u'likely', u'a', u'tiger', u',', u'most', u'likely', u'the', u'Malayan', u'Tiger', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'NNP', u'VBP', u'IN', u'NNS', u'VBP', u'RB', u'VBN', u'EX', u'-LRB-', u'RB', u'RB', u'JJ', u'NNS', u'-RRB-', u',', u'CC', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'RB', u'DT', u'NN', u',', u'RBS', u'RB', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[2458, 2464], [2465, 2472], [2473, 2475], [2476, 2485], [2486, 2494], [2495, 2499], [2500, 2505], [2506, 2510], [2511, 2516], [2517, 2522], [2523, 2528], [2529, 2530], [2530, 2533], [2534, 2538], [2539, 2546], [2547, 2552], [2552, 2553], [2553, 2554], [2555, 2558], [2559, 2562], [2563, 2568], [2569, 2573], [2574, 2576], [2577, 2581], [2582, 2586], [2587, 2592], [2593, 2596], [2597, 2603], [2604, 2605], [2606, 2611], [2611, 2612], [2613, 2617], [2618, 2624], [2625, 2628], [2629, 2636], [2637, 2642], [2642, 2643]]}) 
answer: set([u'visit'])
candidate Sentence: (0.28371605277061462, {u'tokens': [u'About', u'9.7', u'million', u'tourists', u'visited', u'Singapore', u'in', u'2006', u'.'], u'lemmas': [u'about', u'9.7', u'million', u'tourist', u'visit', u'Singapore', u'in', u'2006', u'.'], u'pos': [u'IN', u'CD', u'CD', u'NNS', u'VBD', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[18457, 18462], [18463, 18466], [18467, 18474], [18475, 18483], [18484, 18491], [18492, 18501], [18502, 18504], [18505, 18509], [18509, 18510]]}) 
answer: set([u'sang', u'nila', u'utama'])
candidate Sentence: (0.26630127429962158, {u'tokens': [u'According', u'to', u'the', u'Malay', u'Annals', u',', u'this', u'name', u'was', u'given', u'by', u'a', u'14th', u'century', u'Sumatran', u'prince', u'named', u'Sang', u'Nila', u'Utama', u',', u'who', u',', u'landing', u'on', u'the', u'island', u'after', u'a', u'thunderstorm', u',', u'spotted', u'an', u'auspicious', u'beast', u'on', u'the', u'shore', u'that', u'his', u'chief', u'minister', u'identified', u'as', u'a', u'lion', u'.'], u'lemmas': [u'accord', u'to', u'the', u'Malay', u'Annals', u',', u'this', u'name', u'be', u'give', u'by', u'a', u'14th', u'century', u'Sumatran', u'prince', u'name', u'Sang', u'Nila', u'Utama', u',', u'who', u',', u'landing', u'on', u'the', u'island', u'after', u'a', u'thunderstorm', u',', u'spot', u'a', u'auspicious', u'beast', u'on', u'the', u'shore', u'that', u'he', u'chief', u'minister', u'identify', u'as', u'a', u'lion', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NNP', u'NN', u'VBN', u'NNP', u'NNP', u'NNP', u',', u'WP', u',', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2210, 2219], [2220, 2222], [2223, 2226], [2227, 2232], [2233, 2239], [2239, 2240], [2241, 2245], [2246, 2250], [2251, 2254], [2255, 2260], [2261, 2263], [2264, 2265], [2266, 2270], [2271, 2278], [2279, 2287], [2288, 2294], [2295, 2300], [2301, 2305], [2306, 2310], [2311, 2316], [2316, 2317], [2318, 2321], [2321, 2322], [2323, 2330], [2331, 2333], [2334, 2337], [2338, 2344], [2345, 2350], [2351, 2352], [2353, 2365], [2365, 2366], [2367, 2374], [2375, 2377], [2378, 2388], [2389, 2394], [2395, 2397], [2398, 2401], [2402, 2407], [2408, 2412], [2413, 2416], [2417, 2422], [2423, 2431], [2432, 2442], [2443, 2445], [2446, 2447], [2448, 2452], [2452, 2453]]}) 
answer: set([u'visit'])
candidate Sentence: (0.038941800594329834, {u'tokens': [u'Singapore', u'has', u'a', u'high', u'literacy', u'rate', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'high', u'literacy', u'rate', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[26903, 26912], [26913, 26916], [26917, 26918], [26919, 26923], [26924, 26932], [26933, 26937], [26940, 26941]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.036193687468767166, {u'tokens': [u'Singapore', u'has', u'a', u'network', u'of', u'reservoirs', u'and', u'water', u'catchment', u'areas', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'network', u'of', u'reservoir', u'and', u'water', u'catchment', u'area', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNS', u'CC', u'NN', u'NN', u'NNS', u'.'], u'char_offsets': [[41953, 41962], [41963, 41966], [41967, 41968], [41969, 41976], [41977, 41979], [41980, 41990], [41991, 41994], [41995, 42000], [42001, 42010], [42011, 42016], [42016, 42017]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.035711649805307388, {u'tokens': [u'Amnesty', u'International', u'has', u'criticised', u'Singapore', u'for', u'having', u'``', u'possibly', u'the', u'highest', u'execution', u'rate', u'in', u'the', u'world', u"''", u'per', u'capita', u'.'], u'lemmas': [u'Amnesty', u'International', u'have', u'criticise', u'Singapore', u'for', u'have', u'``', u'possibly', u'the', u'highest', u'execution', u'rate', u'in', u'the', u'world', u"''", u'per', u'capita', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'NNP', u'IN', u'VBG', u'``', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'DT', u'NN', u"''", u'IN', u'NN', u'.'], u'char_offsets': [[11123, 11130], [11131, 11144], [11145, 11148], [11149, 11159], [11160, 11169], [11170, 11173], [11174, 11180], [11181, 11182], [11182, 11190], [11191, 11194], [11195, 11202], [11203, 11212], [11213, 11217], [11218, 11220], [11221, 11224], [11225, 11230], [11230, 11231], [11232, 11235], [11236, 11242], [11242, 11243]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.032297149300575256, {u'tokens': [u'Singapore', u'has', u'also', u'become', u'a', u'centre', u'for', u'postmodern', u'architecture', u'.'], u'lemmas': [u'Singapore', u'have', u'also', u'become', u'a', u'centre', u'for', u'postmodern', u'architecture', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[40644, 40653], [40654, 40657], [40658, 40662], [40663, 40669], [40670, 40671], [40672, 40678], [40679, 40682], [40683, 40693], [40694, 40706], [40706, 40707]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.030644882470369339, {u'tokens': [u'Singapore', u'has', u'a', u'successful', u'and', u'transparent', u'market', u'economy', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'successful', u'and', u'transparent', u'market', u'economy', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'CC', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[9988, 9997], [9998, 10001], [10002, 10003], [10004, 10014], [10015, 10018], [10019, 10030], [10031, 10037], [10038, 10045], [10045, 10046]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.029201017692685127, {u'tokens': [u'Students', u'having', u'assembly', u'in', u'the', u'hall', u'of', u'a', u'Singapore', u'secondary', u'school', u'.'], u'lemmas': [u'student', u'have', u'assembly', u'in', u'the', u'hall', u'of', u'a', u'Singapore', u'secondary', u'school', u'.'], u'pos': [u'NNS', u'VBG', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'JJ', u'NN', u'.'], u'char_offsets': [[26833, 26841], [26842, 26848], [26849, 26857], [26858, 26860], [26861, 26864], [26865, 26869], [26870, 26872], [26873, 26874], [26875, 26884], [26885, 26894], [26895, 26901], [26901, 26902]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.029027679935097694, {u'tokens': [u'The', u'airport', u'has', u'two', u'passenger', u'terminals', u'.'], u'lemmas': [u'the', u'airport', u'have', u'two', u'passenger', u'terminal', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'CD', u'NN', u'NNS', u'.'], u'char_offsets': [[43932, 43935], [43936, 43943], [43944, 43947], [43948, 43951], [43952, 43961], [43962, 43971], [43971, 43972]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])

Has Sang Nila Utama visited Singapore?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa9b8c0>.answer
_____________________________ test_yesno[param316] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9b950>, (<src.tfidf.TF_IDF object at 0x1084deb10>, set(['singapore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa9b950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.28596669435501099, {u'tokens': [u'Recent', u'studies', u'of', u'Singapore', u'indicate', u'that', u'lions', u'have', u'never', u'lived', u'there', u'-LRB-', u'not', u'even', u'Asiatic', u'lions', u'-RRB-', u',', u'and', u'the', u'beast', u'seen', u'by', u'Sang', u'Nila', u'Utama', u'was', u'likely', u'a', u'tiger', u',', u'most', u'likely', u'the', u'Malayan', u'Tiger', u'.'], u'lemmas': [u'recent', u'study', u'of', u'Singapore', u'indicate', u'that', u'lion', u'have', u'never', u'live', u'there', u'-lrb-', u'not', u'even', u'asiatic', u'lion', u'-rrb-', u',', u'and', u'the', u'beast', u'see', u'by', u'Sang', u'Nila', u'Utama', u'be', u'likely', u'a', u'tiger', u',', u'most', u'likely', u'the', u'Malayan', u'Tiger', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'NNP', u'VBP', u'IN', u'NNS', u'VBP', u'RB', u'VBN', u'EX', u'-LRB-', u'RB', u'RB', u'JJ', u'NNS', u'-RRB-', u',', u'CC', u'DT', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'RB', u'DT', u'NN', u',', u'RBS', u'RB', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[2458, 2464], [2465, 2472], [2473, 2475], [2476, 2485], [2486, 2494], [2495, 2499], [2500, 2505], [2506, 2510], [2511, 2516], [2517, 2522], [2523, 2528], [2529, 2530], [2530, 2533], [2534, 2538], [2539, 2546], [2547, 2552], [2552, 2553], [2553, 2554], [2555, 2558], [2559, 2562], [2563, 2568], [2569, 2573], [2574, 2576], [2577, 2581], [2582, 2586], [2587, 2592], [2593, 2596], [2597, 2603], [2604, 2605], [2606, 2611], [2611, 2612], [2613, 2617], [2618, 2624], [2625, 2628], [2629, 2636], [2637, 2642], [2642, 2643]]}) 
answer: set([u'visit'])
candidate Sentence: (0.28371605277061462, {u'tokens': [u'About', u'9.7', u'million', u'tourists', u'visited', u'Singapore', u'in', u'2006', u'.'], u'lemmas': [u'about', u'9.7', u'million', u'tourist', u'visit', u'Singapore', u'in', u'2006', u'.'], u'pos': [u'IN', u'CD', u'CD', u'NNS', u'VBD', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[18457, 18462], [18463, 18466], [18467, 18474], [18475, 18483], [18484, 18491], [18492, 18501], [18502, 18504], [18505, 18509], [18509, 18510]]}) 
answer: set([u'sang', u'nila', u'utama'])
candidate Sentence: (0.26630127429962158, {u'tokens': [u'According', u'to', u'the', u'Malay', u'Annals', u',', u'this', u'name', u'was', u'given', u'by', u'a', u'14th', u'century', u'Sumatran', u'prince', u'named', u'Sang', u'Nila', u'Utama', u',', u'who', u',', u'landing', u'on', u'the', u'island', u'after', u'a', u'thunderstorm', u',', u'spotted', u'an', u'auspicious', u'beast', u'on', u'the', u'shore', u'that', u'his', u'chief', u'minister', u'identified', u'as', u'a', u'lion', u'.'], u'lemmas': [u'accord', u'to', u'the', u'Malay', u'Annals', u',', u'this', u'name', u'be', u'give', u'by', u'a', u'14th', u'century', u'Sumatran', u'prince', u'name', u'Sang', u'Nila', u'Utama', u',', u'who', u',', u'landing', u'on', u'the', u'island', u'after', u'a', u'thunderstorm', u',', u'spot', u'a', u'auspicious', u'beast', u'on', u'the', u'shore', u'that', u'he', u'chief', u'minister', u'identify', u'as', u'a', u'lion', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NNP', u'NN', u'VBN', u'NNP', u'NNP', u'NNP', u',', u'WP', u',', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2210, 2219], [2220, 2222], [2223, 2226], [2227, 2232], [2233, 2239], [2239, 2240], [2241, 2245], [2246, 2250], [2251, 2254], [2255, 2260], [2261, 2263], [2264, 2265], [2266, 2270], [2271, 2278], [2279, 2287], [2288, 2294], [2295, 2300], [2301, 2305], [2306, 2310], [2311, 2316], [2316, 2317], [2318, 2321], [2321, 2322], [2323, 2330], [2331, 2333], [2334, 2337], [2338, 2344], [2345, 2350], [2351, 2352], [2353, 2365], [2365, 2366], [2367, 2374], [2375, 2377], [2378, 2388], [2389, 2394], [2395, 2397], [2398, 2401], [2402, 2407], [2408, 2412], [2413, 2416], [2417, 2422], [2423, 2431], [2432, 2442], [2443, 2445], [2446, 2447], [2448, 2452], [2452, 2453]]}) 
answer: set([u'visit'])
candidate Sentence: (0.038941800594329834, {u'tokens': [u'Singapore', u'has', u'a', u'high', u'literacy', u'rate', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'high', u'literacy', u'rate', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[26903, 26912], [26913, 26916], [26917, 26918], [26919, 26923], [26924, 26932], [26933, 26937], [26940, 26941]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.036193687468767166, {u'tokens': [u'Singapore', u'has', u'a', u'network', u'of', u'reservoirs', u'and', u'water', u'catchment', u'areas', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'network', u'of', u'reservoir', u'and', u'water', u'catchment', u'area', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNS', u'CC', u'NN', u'NN', u'NNS', u'.'], u'char_offsets': [[41953, 41962], [41963, 41966], [41967, 41968], [41969, 41976], [41977, 41979], [41980, 41990], [41991, 41994], [41995, 42000], [42001, 42010], [42011, 42016], [42016, 42017]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.035711649805307388, {u'tokens': [u'Amnesty', u'International', u'has', u'criticised', u'Singapore', u'for', u'having', u'``', u'possibly', u'the', u'highest', u'execution', u'rate', u'in', u'the', u'world', u"''", u'per', u'capita', u'.'], u'lemmas': [u'Amnesty', u'International', u'have', u'criticise', u'Singapore', u'for', u'have', u'``', u'possibly', u'the', u'highest', u'execution', u'rate', u'in', u'the', u'world', u"''", u'per', u'capita', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'NNP', u'IN', u'VBG', u'``', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'DT', u'NN', u"''", u'IN', u'NN', u'.'], u'char_offsets': [[11123, 11130], [11131, 11144], [11145, 11148], [11149, 11159], [11160, 11169], [11170, 11173], [11174, 11180], [11181, 11182], [11182, 11190], [11191, 11194], [11195, 11202], [11203, 11212], [11213, 11217], [11218, 11220], [11221, 11224], [11225, 11230], [11230, 11231], [11232, 11235], [11236, 11242], [11242, 11243]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.032297149300575256, {u'tokens': [u'Singapore', u'has', u'also', u'become', u'a', u'centre', u'for', u'postmodern', u'architecture', u'.'], u'lemmas': [u'Singapore', u'have', u'also', u'become', u'a', u'centre', u'for', u'postmodern', u'architecture', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[40644, 40653], [40654, 40657], [40658, 40662], [40663, 40669], [40670, 40671], [40672, 40678], [40679, 40682], [40683, 40693], [40694, 40706], [40706, 40707]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.030644882470369339, {u'tokens': [u'Singapore', u'has', u'a', u'successful', u'and', u'transparent', u'market', u'economy', u'.'], u'lemmas': [u'Singapore', u'have', u'a', u'successful', u'and', u'transparent', u'market', u'economy', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'JJ', u'CC', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[9988, 9997], [9998, 10001], [10002, 10003], [10004, 10014], [10015, 10018], [10019, 10030], [10031, 10037], [10038, 10045], [10045, 10046]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.029201017692685127, {u'tokens': [u'Students', u'having', u'assembly', u'in', u'the', u'hall', u'of', u'a', u'Singapore', u'secondary', u'school', u'.'], u'lemmas': [u'student', u'have', u'assembly', u'in', u'the', u'hall', u'of', u'a', u'Singapore', u'secondary', u'school', u'.'], u'pos': [u'NNS', u'VBG', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'JJ', u'NN', u'.'], u'char_offsets': [[26833, 26841], [26842, 26848], [26849, 26857], [26858, 26860], [26861, 26864], [26865, 26869], [26870, 26872], [26873, 26874], [26875, 26884], [26885, 26894], [26895, 26901], [26901, 26902]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])
candidate Sentence: (0.029027679935097694, {u'tokens': [u'The', u'airport', u'has', u'two', u'passenger', u'terminals', u'.'], u'lemmas': [u'the', u'airport', u'have', u'two', u'passenger', u'terminal', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'CD', u'NN', u'NNS', u'.'], u'char_offsets': [[43932, 43935], [43936, 43943], [43944, 43947], [43948, 43951], [43952, 43961], [43962, 43971], [43971, 43972]]}) 
answer: set([u'sang', u'nila', u'utama', u'visit'])

Has Sang Nila Utama visited Singapore?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x10aa9b950>.answer
_____________________________ test_yesno[param320] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9bb90>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bb90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23316915333271027, {u'tokens': [u'Roosevelt', u'beat', u'Taft', u'in', u'the', u'popular', u'vote', u'and', u'pulled', u'so', u'many', u'Progressives', u'out', u'of', u'the', u'Republican', u'Party', u'that', u'Democrat', u'Woodrow', u'Wilson', u'won', u'in', u'1912', u',', u'and', u'the', u'conservative', u'faction', u'took', u'control', u'of', u'the', u'Republican', u'Party', u'for', u'the', u'next', u'two', u'decades', u'.'], u'lemmas': [u'Roosevelt', u'beat', u'Taft', u'in', u'the', u'popular', u'vote', u'and', u'pull', u'so', u'many', u'Progressives', u'out', u'of', u'the', u'Republican', u'Party', u'that', u'Democrat', u'Woodrow', u'Wilson', u'win', u'in', u'1912', u',', u'and', u'the', u'conservative', u'faction', u'take', u'control', u'of', u'the', u'Republican', u'Party', u'for', u'the', u'next', u'two', u'decade', u'.'], u'pos': [u'NNP', u'VBD', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'CC', u'VBD', u'RB', u'JJ', u'NNPS', u'IN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'CD', u'NNS', u'.'], u'char_offsets': [[2422, 2431], [2432, 2436], [2437, 2441], [2442, 2444], [2445, 2448], [2449, 2456], [2457, 2461], [2462, 2465], [2466, 2472], [2473, 2475], [2476, 2480], [2481, 2493], [2494, 2497], [2498, 2500], [2501, 2504], [2505, 2515], [2516, 2521], [2522, 2526], [2527, 2535], [2536, 2543], [2544, 2550], [2551, 2554], [2555, 2557], [2558, 2562], [2562, 2563], [2564, 2567], [2568, 2571], [2572, 2584], [2585, 2592], [2593, 2597], [2598, 2605], [2606, 2608], [2609, 2612], [2613, 2623], [2624, 2629], [2630, 2633], [2634, 2637], [2638, 2642], [2643, 2646], [2647, 2654], [2654, 2655]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.22253616154193878, {u'tokens': [u'TR', u'and', u'Will', u':', u'A', u'Friendship', u'that', u'Split', u'the', u'Republican', u'Party', u'.'], u'lemmas': [u'tr', u'and', u'will', u':', u'a', u'friendship', u'that', u'split', u'the', u'Republican', u'Party', u'.'], u'pos': [u'NN', u'CC', u'MD', u':', u'DT', u'NN', u'WDT', u'VBP', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[64756, 64758], [64759, 64762], [64763, 64767], [64767, 64768], [64769, 64770], [64771, 64781], [64782, 64786], [64787, 64792], [64793, 64796], [64797, 64807], [64808, 64813], [64813, 64814]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.21017386019229889, {u'tokens': [u'The', u'left', u'wing', u'of', u'the', u'Republican', u'Party', u'began', u'agitating', u'against', u'Taft', u'.'], u'lemmas': [u'the', u'left', u'wing', u'of', u'the', u'Republican', u'Party', u'begin', u'agitate', u'against', u'Taft', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'VBD', u'VBG', u'IN', u'NNP', u'.'], u'char_offsets': [[50928, 50931], [50932, 50936], [50937, 50941], [50942, 50944], [50945, 50948], [50949, 50959], [50960, 50965], [50966, 50971], [50972, 50981], [50982, 50989], [50990, 50994], [50994, 50995]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.18923750519752502, {u'tokens': [u'Roosevelt', u'was', u'a', u'Progressive', u'reformer', u'who', u'sought', u'to', u'move', u'the', u'dominant', u'Republican', u'Party', u'into', u'the', u'Progressive', u'camp', u'.'], u'lemmas': [u'Roosevelt', u'be', u'a', u'progressive', u'reformer', u'who', u'seek', u'to', u'move', u'the', u'dominant', u'Republican', u'Party', u'into', u'the', u'Progressive', u'camp', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'WP', u'VBD', u'TO', u'VB', u'DT', u'JJ', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[1521, 1530], [1531, 1534], [1535, 1536], [1537, 1548], [1549, 1557], [1558, 1561], [1562, 1568], [1569, 1571], [1572, 1576], [1577, 1580], [1581, 1589], [1590, 1600], [1601, 1606], [1607, 1611], [1612, 1615], [1616, 1627], [1628, 1632], [1632, 1633]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.18547484278678894, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'member', u'party', u'republican', u'thedore'])
candidate Sentence: (0.16723255813121796, {u'tokens': [u'The', u'family', u'was', u'strongly', u'Democratic', u'in', u'its', u'political', u'affiliation', u'until', u'the', u'mid-1850s', u',', u'then', u'joined', u'the', u'new', u'Republican', u'Party', u'.'], u'lemmas': [u'the', u'family', u'be', u'strongly', u'democratic', u'in', u'its', u'political', u'affiliation', u'until', u'the', u'mid-1850s', u',', u'then', u'join', u'the', u'new', u'Republican', u'Party', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'JJ', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'CD', u',', u'RB', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[4500, 4503], [4504, 4510], [4511, 4514], [4515, 4523], [4524, 4534], [4535, 4537], [4538, 4541], [4542, 4551], [4552, 4563], [4564, 4569], [4570, 4573], [4574, 4583], [4583, 4584], [4585, 4589], [4590, 4596], [4597, 4600], [4601, 4604], [4605, 4615], [4616, 4621], [4621, 4622]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.15858918428421021, {u'tokens': [u'Roosevelt', u'did', u'so', u',', u'but', u'after', u'winning', u'election', u'in', u'1904', u',', u'he', u'moved', u'to', u'the', u'political', u'left', u',', u'stretching', u'his', u'ties', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leaders', u'.'], u'lemmas': [u'Roosevelt', u'do', u'so', u',', u'but', u'after', u'win', u'election', u'in', u'1904', u',', u'he', u'move', u'to', u'the', u'political', u'left', u',', u'stretch', u'he', u'tie', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leader', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u',', u'CC', u'IN', u'VBG', u'NN', u'IN', u'CD', u',', u'PRP', u'VBD', u'TO', u'DT', u'JJ', u'NN', u',', u'VBG', u'PRP$', u'NNS', u'TO', u'DT', u'NNP', u'NNP', u'POS', u'JJ', u'NNS', u'.'], u'char_offsets': [[25730, 25739], [25740, 25743], [25744, 25746], [25746, 25747], [25748, 25751], [25752, 25757], [25758, 25765], [25766, 25774], [25775, 25777], [25778, 25782], [25782, 25783], [25784, 25786], [25787, 25792], [25793, 25795], [25796, 25799], [25800, 25809], [25810, 25814], [25814, 25815], [25816, 25826], [25827, 25830], [25831, 25835], [25836, 25838], [25839, 25842], [25843, 25853], [25854, 25859], [25859, 25861], [25862, 25874], [25875, 25882], [25882, 25883]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.15491798520088196, {u'tokens': [u'The', u'battle', u'between', u'Taft', u'and', u'Roosevelt', u'bitterly', u'split', u'the', u'Republican', u'Party', u';', u'Taft', u"'s", u'people', u'dominated', u'the', u'party', u'until', u'1936', u'.'], u'lemmas': [u'the', u'battle', u'between', u'Taft', u'and', u'Roosevelt', u'bitterly', u'split', u'the', u'Republican', u'Party', u';', u'Taft', u"'s", u'people', u'dominate', u'the', u'party', u'until', u'1936', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'RB', u'VBD', u'DT', u'NNP', u'NNP', u':', u'NNP', u'POS', u'NNS', u'VBD', u'DT', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[52126, 52129], [52130, 52136], [52137, 52144], [52145, 52149], [52150, 52153], [52154, 52163], [52164, 52172], [52173, 52178], [52179, 52182], [52183, 52193], [52194, 52199], [52199, 52200], [52201, 52205], [52205, 52207], [52208, 52214], [52215, 52224], [52225, 52228], [52229, 52234], [52235, 52240], [52241, 52245], [52245, 52246]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.14662635326385498, {u'tokens': [u'/', u'ref', u'>', u'Roosevelt', u'took', u'Cabinet', u'members', u'and', u'friends', u'on', u'long', u',', u'fast-paced', u'hikes', u',', u'boxed', u'in', u'the', u'state', u'rooms', u'of', u'the', u'White', u'House', u',', u'romped', u'with', u'his', u'children', u',', u'and', u'read', u'voraciously', u'.'], u'lemmas': [u'/', u'ref', u'>', u'Roosevelt', u'take', u'Cabinet', u'member', u'and', u'friend', u'on', u'long', u',', u'fast-paced', u'hike', u',', u'box', u'in', u'the', u'state', u'room', u'of', u'the', u'White', u'House', u',', u'romp', u'with', u'he', u'child', u',', u'and', u'read', u'voraciously', u'.'], u'pos': [u':', u'NN', u'JJR', u'NNP', u'VBD', u'NNP', u'NNS', u'CC', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u',', u'VBN', u'IN', u'DT', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBD', u'IN', u'PRP$', u'NNS', u',', u'CC', u'VB', u'RB', u'.'], u'char_offsets': [[41410, 41411], [41411, 41414], [41414, 41415], [41416, 41425], [41426, 41430], [41431, 41438], [41439, 41446], [41447, 41450], [41451, 41458], [41459, 41461], [41462, 41466], [41466, 41467], [41468, 41478], [41479, 41484], [41484, 41485], [41486, 41491], [41492, 41494], [41495, 41498], [41499, 41504], [41505, 41510], [41511, 41513], [41514, 41517], [41518, 41523], [41524, 41529], [41529, 41530], [41531, 41537], [41538, 41542], [41543, 41546], [41547, 41555], [41555, 41556], [41557, 41560], [41561, 41565], [41566, 41577], [41577, 41578]]}) 
answer: set([u'party', u'republican', u'thedore'])
candidate Sentence: (0.13684627413749695, {u'tokens': [u'After', u'Senator', u'Mark', u'Hanna', u',', u'McKinley', u"'s", u'old', u'campaign', u'manager', u',', u'died', u'in', u'February', u'1904', u',', u'there', u'was', u'no', u'one', u'in', u'the', u'Republican', u'Party', u'to', u'oppose', u'Roosevelt', u'and', u'he', u'easily', u'won', u'the', u'nomination', u'.'], u'lemmas': [u'after', u'Senator', u'Mark', u'Hanna', u',', u'McKinley', u"'s", u'old', u'campaign', u'manager', u',', u'die', u'in', u'February', u'1904', u',', u'there', u'be', u'no', u'one', u'in', u'the', u'Republican', u'Party', u'to', u'oppose', u'Roosevelt', u'and', u'he', u'easily', u'win', u'the', u'nomination', u'.'], u'pos': [u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'POS', u'JJ', u'NN', u'NN', u',', u'VBD', u'IN', u'NNP', u'CD', u',', u'EX', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'VB', u'NNP', u'CC', u'PRP', u'RB', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[28903, 28908], [28909, 28916], [28917, 28921], [28922, 28927], [28927, 28928], [28929, 28937], [28937, 28939], [28940, 28943], [28944, 28952], [28953, 28960], [28960, 28961], [28962, 28966], [28967, 28969], [28970, 28978], [28979, 28983], [28983, 28984], [28985, 28990], [28991, 28994], [28995, 28997], [28998, 29001], [29002, 29004], [29005, 29008], [29009, 29019], [29020, 29025], [29026, 29028], [29029, 29035], [29036, 29045], [29046, 29049], [29050, 29052], [29053, 29059], [29060, 29063], [29064, 29067], [29068, 29078], [29078, 29079]]}) 
answer: set([u'member', u'thedore'])

Was Thedore Roosevelt  a member of the Republican Party?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bb90>.answer
_____________________________ test_yesno[param321] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9bc20>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bc20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.23316915333271027, {u'tokens': [u'Roosevelt', u'beat', u'Taft', u'in', u'the', u'popular', u'vote', u'and', u'pulled', u'so', u'many', u'Progressives', u'out', u'of', u'the', u'Republican', u'Party', u'that', u'Democrat', u'Woodrow', u'Wilson', u'won', u'in', u'1912', u',', u'and', u'the', u'conservative', u'faction', u'took', u'control', u'of', u'the', u'Republican', u'Party', u'for', u'the', u'next', u'two', u'decades', u'.'], u'lemmas': [u'Roosevelt', u'beat', u'Taft', u'in', u'the', u'popular', u'vote', u'and', u'pull', u'so', u'many', u'Progressives', u'out', u'of', u'the', u'Republican', u'Party', u'that', u'Democrat', u'Woodrow', u'Wilson', u'win', u'in', u'1912', u',', u'and', u'the', u'conservative', u'faction', u'take', u'control', u'of', u'the', u'Republican', u'Party', u'for', u'the', u'next', u'two', u'decade', u'.'], u'pos': [u'NNP', u'VBD', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'CC', u'VBD', u'RB', u'JJ', u'NNPS', u'IN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'VBD', u'IN', u'CD', u',', u'CC', u'DT', u'JJ', u'NN', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'CD', u'NNS', u'.'], u'char_offsets': [[2422, 2431], [2432, 2436], [2437, 2441], [2442, 2444], [2445, 2448], [2449, 2456], [2457, 2461], [2462, 2465], [2466, 2472], [2473, 2475], [2476, 2480], [2481, 2493], [2494, 2497], [2498, 2500], [2501, 2504], [2505, 2515], [2516, 2521], [2522, 2526], [2527, 2535], [2536, 2543], [2544, 2550], [2551, 2554], [2555, 2557], [2558, 2562], [2562, 2563], [2564, 2567], [2568, 2571], [2572, 2584], [2585, 2592], [2593, 2597], [2598, 2605], [2606, 2608], [2609, 2612], [2613, 2623], [2624, 2629], [2630, 2633], [2634, 2637], [2638, 2642], [2643, 2646], [2647, 2654], [2654, 2655]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.22253616154193878, {u'tokens': [u'TR', u'and', u'Will', u':', u'A', u'Friendship', u'that', u'Split', u'the', u'Republican', u'Party', u'.'], u'lemmas': [u'tr', u'and', u'will', u':', u'a', u'friendship', u'that', u'split', u'the', u'Republican', u'Party', u'.'], u'pos': [u'NN', u'CC', u'MD', u':', u'DT', u'NN', u'WDT', u'VBP', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[64756, 64758], [64759, 64762], [64763, 64767], [64767, 64768], [64769, 64770], [64771, 64781], [64782, 64786], [64787, 64792], [64793, 64796], [64797, 64807], [64808, 64813], [64813, 64814]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.21017386019229889, {u'tokens': [u'The', u'left', u'wing', u'of', u'the', u'Republican', u'Party', u'began', u'agitating', u'against', u'Taft', u'.'], u'lemmas': [u'the', u'left', u'wing', u'of', u'the', u'Republican', u'Party', u'begin', u'agitate', u'against', u'Taft', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'VBD', u'VBG', u'IN', u'NNP', u'.'], u'char_offsets': [[50928, 50931], [50932, 50936], [50937, 50941], [50942, 50944], [50945, 50948], [50949, 50959], [50960, 50965], [50966, 50971], [50972, 50981], [50982, 50989], [50990, 50994], [50994, 50995]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.18923750519752502, {u'tokens': [u'Roosevelt', u'was', u'a', u'Progressive', u'reformer', u'who', u'sought', u'to', u'move', u'the', u'dominant', u'Republican', u'Party', u'into', u'the', u'Progressive', u'camp', u'.'], u'lemmas': [u'Roosevelt', u'be', u'a', u'progressive', u'reformer', u'who', u'seek', u'to', u'move', u'the', u'dominant', u'Republican', u'Party', u'into', u'the', u'Progressive', u'camp', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'WP', u'VBD', u'TO', u'VB', u'DT', u'JJ', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[1521, 1530], [1531, 1534], [1535, 1536], [1537, 1548], [1549, 1557], [1558, 1561], [1562, 1568], [1569, 1571], [1572, 1576], [1577, 1580], [1581, 1589], [1590, 1600], [1601, 1606], [1607, 1611], [1612, 1615], [1616, 1627], [1628, 1632], [1632, 1633]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.18547484278678894, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'member', u'party', u'republican', u'thedore'])
candidate Sentence: (0.16723255813121796, {u'tokens': [u'The', u'family', u'was', u'strongly', u'Democratic', u'in', u'its', u'political', u'affiliation', u'until', u'the', u'mid-1850s', u',', u'then', u'joined', u'the', u'new', u'Republican', u'Party', u'.'], u'lemmas': [u'the', u'family', u'be', u'strongly', u'democratic', u'in', u'its', u'political', u'affiliation', u'until', u'the', u'mid-1850s', u',', u'then', u'join', u'the', u'new', u'Republican', u'Party', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'JJ', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'DT', u'CD', u',', u'RB', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[4500, 4503], [4504, 4510], [4511, 4514], [4515, 4523], [4524, 4534], [4535, 4537], [4538, 4541], [4542, 4551], [4552, 4563], [4564, 4569], [4570, 4573], [4574, 4583], [4583, 4584], [4585, 4589], [4590, 4596], [4597, 4600], [4601, 4604], [4605, 4615], [4616, 4621], [4621, 4622]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.15858918428421021, {u'tokens': [u'Roosevelt', u'did', u'so', u',', u'but', u'after', u'winning', u'election', u'in', u'1904', u',', u'he', u'moved', u'to', u'the', u'political', u'left', u',', u'stretching', u'his', u'ties', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leaders', u'.'], u'lemmas': [u'Roosevelt', u'do', u'so', u',', u'but', u'after', u'win', u'election', u'in', u'1904', u',', u'he', u'move', u'to', u'the', u'political', u'left', u',', u'stretch', u'he', u'tie', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leader', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u',', u'CC', u'IN', u'VBG', u'NN', u'IN', u'CD', u',', u'PRP', u'VBD', u'TO', u'DT', u'JJ', u'NN', u',', u'VBG', u'PRP$', u'NNS', u'TO', u'DT', u'NNP', u'NNP', u'POS', u'JJ', u'NNS', u'.'], u'char_offsets': [[25730, 25739], [25740, 25743], [25744, 25746], [25746, 25747], [25748, 25751], [25752, 25757], [25758, 25765], [25766, 25774], [25775, 25777], [25778, 25782], [25782, 25783], [25784, 25786], [25787, 25792], [25793, 25795], [25796, 25799], [25800, 25809], [25810, 25814], [25814, 25815], [25816, 25826], [25827, 25830], [25831, 25835], [25836, 25838], [25839, 25842], [25843, 25853], [25854, 25859], [25859, 25861], [25862, 25874], [25875, 25882], [25882, 25883]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.15491798520088196, {u'tokens': [u'The', u'battle', u'between', u'Taft', u'and', u'Roosevelt', u'bitterly', u'split', u'the', u'Republican', u'Party', u';', u'Taft', u"'s", u'people', u'dominated', u'the', u'party', u'until', u'1936', u'.'], u'lemmas': [u'the', u'battle', u'between', u'Taft', u'and', u'Roosevelt', u'bitterly', u'split', u'the', u'Republican', u'Party', u';', u'Taft', u"'s", u'people', u'dominate', u'the', u'party', u'until', u'1936', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'RB', u'VBD', u'DT', u'NNP', u'NNP', u':', u'NNP', u'POS', u'NNS', u'VBD', u'DT', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[52126, 52129], [52130, 52136], [52137, 52144], [52145, 52149], [52150, 52153], [52154, 52163], [52164, 52172], [52173, 52178], [52179, 52182], [52183, 52193], [52194, 52199], [52199, 52200], [52201, 52205], [52205, 52207], [52208, 52214], [52215, 52224], [52225, 52228], [52229, 52234], [52235, 52240], [52241, 52245], [52245, 52246]]}) 
answer: set([u'member', u'thedore'])
candidate Sentence: (0.14662635326385498, {u'tokens': [u'/', u'ref', u'>', u'Roosevelt', u'took', u'Cabinet', u'members', u'and', u'friends', u'on', u'long', u',', u'fast-paced', u'hikes', u',', u'boxed', u'in', u'the', u'state', u'rooms', u'of', u'the', u'White', u'House', u',', u'romped', u'with', u'his', u'children', u',', u'and', u'read', u'voraciously', u'.'], u'lemmas': [u'/', u'ref', u'>', u'Roosevelt', u'take', u'Cabinet', u'member', u'and', u'friend', u'on', u'long', u',', u'fast-paced', u'hike', u',', u'box', u'in', u'the', u'state', u'room', u'of', u'the', u'White', u'House', u',', u'romp', u'with', u'he', u'child', u',', u'and', u'read', u'voraciously', u'.'], u'pos': [u':', u'NN', u'JJR', u'NNP', u'VBD', u'NNP', u'NNS', u'CC', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u',', u'VBN', u'IN', u'DT', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBD', u'IN', u'PRP$', u'NNS', u',', u'CC', u'VB', u'RB', u'.'], u'char_offsets': [[41410, 41411], [41411, 41414], [41414, 41415], [41416, 41425], [41426, 41430], [41431, 41438], [41439, 41446], [41447, 41450], [41451, 41458], [41459, 41461], [41462, 41466], [41466, 41467], [41468, 41478], [41479, 41484], [41484, 41485], [41486, 41491], [41492, 41494], [41495, 41498], [41499, 41504], [41505, 41510], [41511, 41513], [41514, 41517], [41518, 41523], [41524, 41529], [41529, 41530], [41531, 41537], [41538, 41542], [41543, 41546], [41547, 41555], [41555, 41556], [41557, 41560], [41561, 41565], [41566, 41577], [41577, 41578]]}) 
answer: set([u'party', u'republican', u'thedore'])
candidate Sentence: (0.13684627413749695, {u'tokens': [u'After', u'Senator', u'Mark', u'Hanna', u',', u'McKinley', u"'s", u'old', u'campaign', u'manager', u',', u'died', u'in', u'February', u'1904', u',', u'there', u'was', u'no', u'one', u'in', u'the', u'Republican', u'Party', u'to', u'oppose', u'Roosevelt', u'and', u'he', u'easily', u'won', u'the', u'nomination', u'.'], u'lemmas': [u'after', u'Senator', u'Mark', u'Hanna', u',', u'McKinley', u"'s", u'old', u'campaign', u'manager', u',', u'die', u'in', u'February', u'1904', u',', u'there', u'be', u'no', u'one', u'in', u'the', u'Republican', u'Party', u'to', u'oppose', u'Roosevelt', u'and', u'he', u'easily', u'win', u'the', u'nomination', u'.'], u'pos': [u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'POS', u'JJ', u'NN', u'NN', u',', u'VBD', u'IN', u'NNP', u'CD', u',', u'EX', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'TO', u'VB', u'NNP', u'CC', u'PRP', u'RB', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[28903, 28908], [28909, 28916], [28917, 28921], [28922, 28927], [28927, 28928], [28929, 28937], [28937, 28939], [28940, 28943], [28944, 28952], [28953, 28960], [28960, 28961], [28962, 28966], [28967, 28969], [28970, 28978], [28979, 28983], [28983, 28984], [28985, 28990], [28991, 28994], [28995, 28997], [28998, 29001], [29002, 29004], [29005, 29008], [29009, 29019], [29020, 29025], [29026, 29028], [29029, 29035], [29036, 29045], [29046, 29049], [29050, 29052], [29053, 29059], [29060, 29063], [29064, 29067], [29068, 29078], [29078, 29079]]}) 
answer: set([u'member', u'thedore'])

Was Thedore Roosevelt  a member of the Republican Party?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bc20>.answer
_____________________________ test_yesno[param324] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9bdd0>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bdd0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24069637060165405, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.18039253354072571, {u'tokens': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'lemmas': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'pos': [u'``', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[66856, 66857], [66857, 66865], [66866, 66875], [66875, 66876], [66876, 66877]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.18039253354072571, {u'tokens': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'lemmas': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'pos': [u'``', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[64246, 64247], [64247, 64255], [64256, 64265], [64265, 64266], [64266, 64267]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.15821558237075806, {u'tokens': [u'He', u'was', u'runner-up', u'in', u'the', u'Harvard', u'boxing', u'championship', u',', u'losing', u'to', u'C.S.', u'Hanks', u'.'], u'lemmas': [u'he', u'be', u'runner-up', u'in', u'the', u'Harvard', u'boxing', u'championship', u',', u'lose', u'to', u'C.S.', u'Hanks', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'IN', u'DT', u'NNP', u'NN', u'NN', u',', u'VBG', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[8802, 8804], [8805, 8808], [8809, 8818], [8819, 8821], [8822, 8825], [8826, 8833], [8834, 8840], [8841, 8853], [8853, 8854], [8855, 8861], [8862, 8864], [8865, 8869], [8870, 8875], [8875, 8876]]}) 
answer: set([u'go'])
candidate Sentence: (0.13945490121841431, {u'tokens': [u'Roosevelt', u'said', u'to', u'the', u'officers', u'of', u'the', u'Fleet', u',', u'``', u'Other', u'nations', u'may', u'do', u'what', u'you', u'have', u'done', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'lemmas': [u'Roosevelt', u'say', u'to', u'the', u'officer', u'of', u'the', u'Fleet', u',', u'``', u'other', u'nation', u'may', u'do', u'what', u'you', u'have', u'do', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'pos': [u'NNP', u'VBD', u'TO', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'``', u'JJ', u'NNS', u'MD', u'VB', u'WP', u'PRP', u'VBP', u'VBN', u',', u'CC', u'PRP', u'MD', u'VB', u'TO', u'VB', u'PRP', u'.', u"''"], u'char_offsets': [[39668, 39677], [39678, 39682], [39683, 39685], [39686, 39689], [39690, 39698], [39699, 39701], [39702, 39705], [39706, 39711], [39711, 39712], [39713, 39714], [39714, 39719], [39720, 39727], [39728, 39731], [39732, 39734], [39735, 39739], [39740, 39743], [39744, 39748], [39749, 39753], [39753, 39754], [39755, 39758], [39759, 39763], [39763, 39766], [39767, 39771], [39772, 39774], [39775, 39781], [39782, 39785], [39785, 39786], [39786, 39787]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.13928496837615967, {u'tokens': [u'They', u'did', u'not', u'act', u'but', u'Roosevelt', u'did', u',', u'issuing', u'44', u'lawsuits', u'against', u'major', u'corporations', u';', u'he', u'was', u'called', u'the', u'``', u'trust-buster', u'.', u"''"], u'lemmas': [u'they', u'do', u'not', u'act', u'but', u'Roosevelt', u'do', u',', u'issue', u'44', u'lawsuit', u'against', u'major', u'corporation', u';', u'he', u'be', u'call', u'the', u'``', u'trust-buster', u'.', u"''"], u'pos': [u'PRP', u'VBD', u'RB', u'VB', u'CC', u'NNP', u'VBD', u',', u'VBG', u'CD', u'NNS', u'IN', u'JJ', u'NNS', u':', u'PRP', u'VBD', u'VBN', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[26667, 26671], [26672, 26675], [26676, 26679], [26680, 26683], [26684, 26687], [26688, 26697], [26698, 26701], [26701, 26702], [26703, 26710], [26711, 26713], [26714, 26722], [26723, 26730], [26731, 26736], [26737, 26749], [26749, 26750], [26751, 26753], [26754, 26757], [26758, 26764], [26765, 26768], [26769, 26770], [26770, 26782], [26782, 26783], [26783, 26784]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.11154303699731827, {u'tokens': [u'Brands', u'T.', u'R.', u'p.', u'49', u'--', u'50', u'He', u'matriculated', u'at', u'Harvard', u'College', u'in', u'1876', u',', u'graduating', u'magna', u'cum', u'laude', u'.'], u'lemmas': [u'Brands', u'T.', u'R.', u'p.', u'49', u'--', u'50', u'he', u'matriculate', u'at', u'Harvard', u'College', u'in', u'1876', u',', u'graduate', u'magna', u'cum', u'laude', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'CD', u':', u'CD', u'PRP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u',', u'VBG', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[7879, 7885], [7886, 7888], [7889, 7891], [7892, 7894], [7895, 7897], [7897, 7898], [7898, 7900], [7902, 7904], [7905, 7917], [7918, 7920], [7921, 7928], [7929, 7936], [7937, 7939], [7940, 7944], [7944, 7945], [7946, 7956], [7957, 7962], [7963, 7966], [7967, 7972], [7972, 7973]]}) 
answer: set([u'go'])
candidate Sentence: (0.11017994582653046, {u'tokens': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'lemmas': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'pos': [u'PRP', u'MD', u'RB', u'RB', u'VB', u'DT', u'.', u"''"], u'char_offsets': [[43710, 43711], [43712, 43715], [43715, 43718], [43719, 43727], [43728, 43730], [43731, 43735], [43735, 43736], [43736, 43737]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.10769964009523392, {u'tokens': [u'While', u'at', u'Harvard', u',', u'Roosevelt', u'was', u'active', u'in', u'rowing', u',', u'boxing', u'and', u'the', u'Alpha', u'Delta', u'Phi', u'and', u'Delta', u'Kappa', u'Epsilon', u'fraternities', u'.'], u'lemmas': [u'while', u'at', u'Harvard', u',', u'Roosevelt', u'be', u'active', u'in', u'rowing', u',', u'boxing', u'and', u'the', u'Alpha', u'Delta', u'Phi', u'and', u'Delta', u'Kappa', u'Epsilon', u'fraternity', u'.'], u'pos': [u'IN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'JJ', u'IN', u'NN', u',', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'NNS', u'.'], u'char_offsets': [[8647, 8652], [8653, 8655], [8656, 8663], [8663, 8664], [8665, 8674], [8675, 8678], [8679, 8685], [8686, 8688], [8689, 8695], [8695, 8696], [8697, 8703], [8704, 8707], [8708, 8711], [8712, 8717], [8718, 8723], [8724, 8727], [8728, 8731], [8732, 8737], [8738, 8743], [8744, 8751], [8752, 8764], [8764, 8765]]}) 
answer: set([u'go'])
candidate Sentence: (0.10447822511196136, {u'tokens': [u'Roosevelt', u',', u'Theodore', u'-LRB-', u'1913', u'-RRB-', u'.'], u'lemmas': [u'Roosevelt', u',', u'Theodore', u'-lrb-', u'1913', u'-rrb-', u'.'], u'pos': [u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[6940, 6949], [6949, 6950], [6951, 6959], [6960, 6961], [6961, 6965], [6965, 6966], [6966, 6967]]}) 
answer: set([u'go', u'harvard'])

Did Theodore Roosevelt go to Harvard?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9bdd0>.answer
_____________________________ test_yesno[param325] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9be60>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9be60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24069637060165405, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.18039253354072571, {u'tokens': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'lemmas': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'pos': [u'``', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[66856, 66857], [66857, 66865], [66866, 66875], [66875, 66876], [66876, 66877]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.18039253354072571, {u'tokens': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'lemmas': [u'``', u'Theodore', u'Roosevelt', u"''", u'.'], u'pos': [u'``', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[64246, 64247], [64247, 64255], [64256, 64265], [64265, 64266], [64266, 64267]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.15821558237075806, {u'tokens': [u'He', u'was', u'runner-up', u'in', u'the', u'Harvard', u'boxing', u'championship', u',', u'losing', u'to', u'C.S.', u'Hanks', u'.'], u'lemmas': [u'he', u'be', u'runner-up', u'in', u'the', u'Harvard', u'boxing', u'championship', u',', u'lose', u'to', u'C.S.', u'Hanks', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'IN', u'DT', u'NNP', u'NN', u'NN', u',', u'VBG', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[8802, 8804], [8805, 8808], [8809, 8818], [8819, 8821], [8822, 8825], [8826, 8833], [8834, 8840], [8841, 8853], [8853, 8854], [8855, 8861], [8862, 8864], [8865, 8869], [8870, 8875], [8875, 8876]]}) 
answer: set([u'go'])
candidate Sentence: (0.13945490121841431, {u'tokens': [u'Roosevelt', u'said', u'to', u'the', u'officers', u'of', u'the', u'Fleet', u',', u'``', u'Other', u'nations', u'may', u'do', u'what', u'you', u'have', u'done', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'lemmas': [u'Roosevelt', u'say', u'to', u'the', u'officer', u'of', u'the', u'Fleet', u',', u'``', u'other', u'nation', u'may', u'do', u'what', u'you', u'have', u'do', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'pos': [u'NNP', u'VBD', u'TO', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'``', u'JJ', u'NNS', u'MD', u'VB', u'WP', u'PRP', u'VBP', u'VBN', u',', u'CC', u'PRP', u'MD', u'VB', u'TO', u'VB', u'PRP', u'.', u"''"], u'char_offsets': [[39668, 39677], [39678, 39682], [39683, 39685], [39686, 39689], [39690, 39698], [39699, 39701], [39702, 39705], [39706, 39711], [39711, 39712], [39713, 39714], [39714, 39719], [39720, 39727], [39728, 39731], [39732, 39734], [39735, 39739], [39740, 39743], [39744, 39748], [39749, 39753], [39753, 39754], [39755, 39758], [39759, 39763], [39763, 39766], [39767, 39771], [39772, 39774], [39775, 39781], [39782, 39785], [39785, 39786], [39786, 39787]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.13928496837615967, {u'tokens': [u'They', u'did', u'not', u'act', u'but', u'Roosevelt', u'did', u',', u'issuing', u'44', u'lawsuits', u'against', u'major', u'corporations', u';', u'he', u'was', u'called', u'the', u'``', u'trust-buster', u'.', u"''"], u'lemmas': [u'they', u'do', u'not', u'act', u'but', u'Roosevelt', u'do', u',', u'issue', u'44', u'lawsuit', u'against', u'major', u'corporation', u';', u'he', u'be', u'call', u'the', u'``', u'trust-buster', u'.', u"''"], u'pos': [u'PRP', u'VBD', u'RB', u'VB', u'CC', u'NNP', u'VBD', u',', u'VBG', u'CD', u'NNS', u'IN', u'JJ', u'NNS', u':', u'PRP', u'VBD', u'VBN', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[26667, 26671], [26672, 26675], [26676, 26679], [26680, 26683], [26684, 26687], [26688, 26697], [26698, 26701], [26701, 26702], [26703, 26710], [26711, 26713], [26714, 26722], [26723, 26730], [26731, 26736], [26737, 26749], [26749, 26750], [26751, 26753], [26754, 26757], [26758, 26764], [26765, 26768], [26769, 26770], [26770, 26782], [26782, 26783], [26783, 26784]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.11154303699731827, {u'tokens': [u'Brands', u'T.', u'R.', u'p.', u'49', u'--', u'50', u'He', u'matriculated', u'at', u'Harvard', u'College', u'in', u'1876', u',', u'graduating', u'magna', u'cum', u'laude', u'.'], u'lemmas': [u'Brands', u'T.', u'R.', u'p.', u'49', u'--', u'50', u'he', u'matriculate', u'at', u'Harvard', u'College', u'in', u'1876', u',', u'graduate', u'magna', u'cum', u'laude', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NN', u'CD', u':', u'CD', u'PRP', u'VBD', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u',', u'VBG', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[7879, 7885], [7886, 7888], [7889, 7891], [7892, 7894], [7895, 7897], [7897, 7898], [7898, 7900], [7902, 7904], [7905, 7917], [7918, 7920], [7921, 7928], [7929, 7936], [7937, 7939], [7940, 7944], [7944, 7945], [7946, 7956], [7957, 7962], [7963, 7966], [7967, 7972], [7972, 7973]]}) 
answer: set([u'go'])
candidate Sentence: (0.11017994582653046, {u'tokens': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'lemmas': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'pos': [u'PRP', u'MD', u'RB', u'RB', u'VB', u'DT', u'.', u"''"], u'char_offsets': [[43710, 43711], [43712, 43715], [43715, 43718], [43719, 43727], [43728, 43730], [43731, 43735], [43735, 43736], [43736, 43737]]}) 
answer: set([u'go', u'harvard'])
candidate Sentence: (0.10769964009523392, {u'tokens': [u'While', u'at', u'Harvard', u',', u'Roosevelt', u'was', u'active', u'in', u'rowing', u',', u'boxing', u'and', u'the', u'Alpha', u'Delta', u'Phi', u'and', u'Delta', u'Kappa', u'Epsilon', u'fraternities', u'.'], u'lemmas': [u'while', u'at', u'Harvard', u',', u'Roosevelt', u'be', u'active', u'in', u'rowing', u',', u'boxing', u'and', u'the', u'Alpha', u'Delta', u'Phi', u'and', u'Delta', u'Kappa', u'Epsilon', u'fraternity', u'.'], u'pos': [u'IN', u'IN', u'NNP', u',', u'NNP', u'VBD', u'JJ', u'IN', u'NN', u',', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'NNS', u'.'], u'char_offsets': [[8647, 8652], [8653, 8655], [8656, 8663], [8663, 8664], [8665, 8674], [8675, 8678], [8679, 8685], [8686, 8688], [8689, 8695], [8695, 8696], [8697, 8703], [8704, 8707], [8708, 8711], [8712, 8717], [8718, 8723], [8724, 8727], [8728, 8731], [8732, 8737], [8738, 8743], [8744, 8751], [8752, 8764], [8764, 8765]]}) 
answer: set([u'go'])
candidate Sentence: (0.10447822511196136, {u'tokens': [u'Roosevelt', u',', u'Theodore', u'-LRB-', u'1913', u'-RRB-', u'.'], u'lemmas': [u'Roosevelt', u',', u'Theodore', u'-lrb-', u'1913', u'-rrb-', u'.'], u'pos': [u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'.'], u'char_offsets': [[6940, 6949], [6949, 6950], [6951, 6959], [6960, 6961], [6961, 6965], [6965, 6966], [6966, 6967]]}) 
answer: set([u'go', u'harvard'])

Did Theodore Roosevelt go to Harvard?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9be60>.answer
_____________________________ test_yesno[param329] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e0e0>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('nein') == True
E                +  where 'nein' = <src.question_processing.Question_parser instance at 0x10aa9e0e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32645326852798462, {u'tokens': [u'#In', u'2001', u',', u'he', u'became', u'the', u'first', u'and', u'only', u'President', u'up', u'to', u'date', u'to', u'receive', u'a', u'Medal', u'of', u'Honor', u',', u'making', u'him', u'the', u'only', u'person', u'to', u'date', u'to', u'win', u'the', u'world', u"'s", u'highest', u'peace', u'honor', u',', u'as', u'well', u'as', u'his', u'nation', u"'s", u'top', u'military', u'honor', u'.'], u'lemmas': [u'#in', u'2001', u',', u'he', u'become', u'the', u'first', u'and', u'only', u'President', u'up', u'to', u'date', u'to', u'receive', u'a', u'medal', u'of', u'honor', u',', u'make', u'he', u'the', u'only', u'person', u'to', u'date', u'to', u'win', u'the', u'world', u"'s", u'highest', u'peace', u'honor', u',', u'as', u'well', u'as', u'he', u'nation', u"'s", u'top', u'military', u'honor', u'.'], u'pos': [u'JJ', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'CC', u'RB', u'NNP', u'IN', u'TO', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'NN', u',', u'VBG', u'PRP', u'DT', u'JJ', u'NN', u'TO', u'NN', u'TO', u'VB', u'DT', u'NN', u'POS', u'JJS', u'NN', u'NN', u',', u'RB', u'RB', u'IN', u'PRP$', u'NN', u'POS', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[45510, 45513], [45514, 45518], [45518, 45519], [45520, 45522], [45523, 45529], [45530, 45533], [45534, 45539], [45540, 45543], [45544, 45548], [45549, 45558], [45559, 45561], [45562, 45564], [45565, 45569], [45570, 45572], [45573, 45580], [45581, 45582], [45583, 45588], [45589, 45591], [45592, 45597], [45597, 45598], [45599, 45605], [45606, 45609], [45610, 45613], [45614, 45618], [45619, 45625], [45626, 45628], [45629, 45633], [45634, 45636], [45637, 45640], [45641, 45644], [45645, 45650], [45650, 45652], [45653, 45660], [45661, 45666], [45667, 45672], [45672, 45673], [45674, 45676], [45677, 45681], [45682, 45684], [45685, 45688], [45689, 45695], [45695, 45697], [45698, 45701], [45702, 45710], [45711, 45716], [45716, 45717]]}) 
answer: set([])
candidate Sentence: (0.29790014028549194, {u'tokens': [u'Roosevelt', u"'s", u'eldest', u'son', u',', u'Brigadier', u'General', u'Theodore', u'Roosevelt', u',', u'Jr.', u',', u'received', u'the', u'Medal', u'of', u'Honor', u'for', u'heroism', u'at', u'the', u'Battle', u'of', u'Normandy', u'in', u'1944', u'.'], u'lemmas': [u'Roosevelt', u"'s", u'eldest', u'son', u',', u'Brigadier', u'General', u'Theodore', u'Roosevelt', u',', u'Jr.', u',', u'receive', u'the', u'medal', u'of', u'honor', u'for', u'heroism', u'at', u'the', u'battle', u'of', u'Normandy', u'in', u'1944', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'NN', u',', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'NNP', u',', u'VBD', u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[68184, 68193], [68193, 68195], [68196, 68202], [68203, 68206], [68206, 68207], [68208, 68217], [68218, 68225], [68226, 68234], [68235, 68244], [68244, 68245], [68246, 68249], [68249, 68250], [68251, 68259], [68260, 68263], [68264, 68269], [68270, 68272], [68273, 68278], [68279, 68282], [68283, 68290], [68291, 68293], [68294, 68297], [68298, 68304], [68305, 68307], [68308, 68316], [68317, 68319], [68320, 68324], [68324, 68325]]}) 
answer: set([])
candidate Sentence: (0.25866943597793579, {u'tokens': [u'For', u'his', u'actions', u',', u'Roosevelt', u'was', u'nominated', u'for', u'the', u'Medal', u'of', u'Honor', u'which', u'was', u'subsequently', u'disapproved', u'.'], u'lemmas': [u'for', u'he', u'action', u',', u'Roosevelt', u'be', u'nominate', u'for', u'the', u'medal', u'of', u'honor', u'which', u'be', u'subsequently', u'disapprove', u'.'], u'pos': [u'IN', u'PRP$', u'NNS', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBD', u'RB', u'VBN', u'.'], u'char_offsets': [[20991, 20994], [20995, 20998], [20999, 21006], [21006, 21007], [21008, 21017], [21018, 21021], [21022, 21031], [21032, 21035], [21036, 21039], [21040, 21045], [21046, 21048], [21049, 21054], [21055, 21060], [21061, 21064], [21065, 21077], [21078, 21089], [21089, 21090]]}) 
answer: set([u'receive'])
candidate Sentence: (0.24650377035140991, {u'tokens': [u'Soots', u'Letter', u'Roosevelt', u'was', u'posthumously', u'awarded', u'the', u'Medal', u'of', u'Honor', u'in', u'2001', u'for', u'his', u'actions', u'.'], u'lemmas': [u'Soots', u'Letter', u'Roosevelt', u'be', u'posthumously', u'award', u'the', u'medal', u'of', u'honor', u'in', u'2001', u'for', u'he', u'action', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'VBD', u'RB', u'VBN', u'DT', u'NN', u'IN', u'NN', u'IN', u'CD', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[21591, 21596], [21597, 21603], [21605, 21614], [21615, 21618], [21619, 21631], [21632, 21639], [21640, 21643], [21644, 21649], [21650, 21652], [21653, 21658], [21659, 21661], [21662, 21666], [21667, 21670], [21671, 21674], [21675, 21682], [21682, 21683]]}) 
answer: set([u'receive'])
candidate Sentence: (0.23148193955421448, {u'tokens': [u'The', u'Roosevelts', u'thus', u'became', u'one', u'of', u'only', u'two', u'father-son', u'pairs', u'to', u'receive', u'this', u'honor', u'.'], u'lemmas': [u'the', u'Roosevelts', u'thus', u'become', u'one', u'of', u'only', u'two', u'father-son', u'pair', u'to', u'receive', u'this', u'honor', u'.'], u'pos': [u'DT', u'NNPS', u'RB', u'VBD', u'CD', u'IN', u'RB', u'CD', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'NN', u'.'], u'char_offsets': [[68326, 68329], [68330, 68340], [68341, 68345], [68346, 68352], [68353, 68356], [68357, 68359], [68360, 68364], [68365, 68368], [68369, 68379], [68380, 68385], [68386, 68388], [68389, 68396], [68397, 68401], [68402, 68407], [68407, 68408]]}) 
answer: set([u'medal'])
candidate Sentence: (0.220381960272789, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'receive', u'medal', u'honor'])
candidate Sentence: (0.1832326203584671, {u'tokens': [u'Brands', u'ch', u'13', u'He', u'was', u'the', u'first', u'and', u',', u'as', u'of', u'2007', u',', u'the', u'only', u'President', u'of', u'the', u'United', u'States', u'to', u'be', u'awarded', u'with', u'America', u"'s", u'highest', u'military', u'honor', u',', u'and', u'the', u'only', u'person', u'in', u'history', u'to', u'receive', u'both', u'his', u'nation', u"'s", u'highest', u'honor', u'for', u'military', u'valor', u'and', u'the', u'world', u"'s", u'foremost', u'prize', u'for', u'peace', u'.'], u'lemmas': [u'Brands', u'ch', u'13', u'he', u'be', u'the', u'first', u'and', u',', u'as', u'of', u'2007', u',', u'the', u'only', u'president', u'of', u'the', u'United', u'States', u'to', u'be', u'award', u'with', u'America', u"'s", u'highest', u'military', u'honor', u',', u'and', u'the', u'only', u'person', u'in', u'history', u'to', u'receive', u'both', u'he', u'nation', u"'s", u'highest', u'honor', u'for', u'military', u'valor', u'and', u'the', u'world', u"'s", u'foremost', u'prize', u'for', u'peace', u'.'], u'pos': [u'NNP', u'NN', u'CD', u'PRP', u'VBD', u'DT', u'JJ', u'CC', u',', u'IN', u'IN', u'CD', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNPS', u'TO', u'VB', u'VBN', u'IN', u'NNP', u'POS', u'JJS', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u'IN', u'NN', u'TO', u'VB', u'CC', u'PRP$', u'NN', u'POS', u'JJS', u'NN', u'IN', u'JJ', u'NN', u'CC', u'DT', u'NN', u'POS', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[21684, 21690], [21691, 21693], [21694, 21696], [21698, 21700], [21701, 21704], [21705, 21708], [21709, 21714], [21715, 21718], [21718, 21719], [21720, 21722], [21723, 21725], [21726, 21730], [21730, 21731], [21732, 21735], [21736, 21740], [21741, 21750], [21751, 21753], [21754, 21757], [21758, 21764], [21765, 21771], [21772, 21774], [21775, 21777], [21778, 21785], [21786, 21790], [21791, 21798], [21798, 21800], [21801, 21808], [21809, 21817], [21818, 21823], [21823, 21824], [21825, 21828], [21829, 21832], [21833, 21837], [21838, 21844], [21845, 21847], [21848, 21855], [21856, 21858], [21859, 21866], [21867, 21871], [21872, 21875], [21876, 21882], [21882, 21884], [21885, 21892], [21893, 21898], [21899, 21902], [21903, 21911], [21912, 21917], [21918, 21921], [21922, 21925], [21926, 21931], [21931, 21933], [21934, 21942], [21943, 21948], [21949, 21952], [21953, 21958], [21958, 21959]]}) 
answer: set([u'medal'])
candidate Sentence: (0.17054146528244019, {u'tokens': [u'On', u'January', u'16', u',', u'2001', u',', u'President', u'Bill', u'Clinton', u'awarded', u'Theodore', u'Roosevelt', u'the', u'Medal', u'of', u'Honor', u'posthumously', u'for', u'his', u'charge', u'up', u'San', u'Juan', u'Hill', u',', u'Cuba', u',', u'during', u'the', u'Spanish-American', u'War', u'.'], u'lemmas': [u'on', u'January', u'16', u',', u'2001', u',', u'President', u'Bill', u'Clinton', u'award', u'Theodore', u'Roosevelt', u'the', u'medal', u'of', u'honor', u'posthumously', u'for', u'he', u'charge', u'up', u'San', u'Juan', u'Hill', u',', u'Cuba', u',', u'during', u'the', u'spanish-american', u'war', u'.'], u'pos': [u'IN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'DT', u'NN', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u',', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[68009, 68011], [68012, 68019], [68020, 68022], [68022, 68023], [68024, 68028], [68028, 68029], [68030, 68039], [68040, 68044], [68045, 68052], [68053, 68060], [68061, 68069], [68070, 68079], [68080, 68083], [68084, 68089], [68090, 68092], [68093, 68098], [68099, 68111], [68112, 68115], [68116, 68119], [68120, 68126], [68127, 68129], [68130, 68133], [68134, 68138], [68139, 68143], [68143, 68144], [68145, 68149], [68149, 68150], [68151, 68157], [68158, 68161], [68162, 68178], [68179, 68182], [68182, 68183]]}) 
answer: set([u'receive'])
candidate Sentence: (0.12998469173908234, {u'tokens': [u'They', u'did', u'not', u'act', u'but', u'Roosevelt', u'did', u',', u'issuing', u'44', u'lawsuits', u'against', u'major', u'corporations', u';', u'he', u'was', u'called', u'the', u'``', u'trust-buster', u'.', u"''"], u'lemmas': [u'they', u'do', u'not', u'act', u'but', u'Roosevelt', u'do', u',', u'issue', u'44', u'lawsuit', u'against', u'major', u'corporation', u';', u'he', u'be', u'call', u'the', u'``', u'trust-buster', u'.', u"''"], u'pos': [u'PRP', u'VBD', u'RB', u'VB', u'CC', u'NNP', u'VBD', u',', u'VBG', u'CD', u'NNS', u'IN', u'JJ', u'NNS', u':', u'PRP', u'VBD', u'VBN', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[26667, 26671], [26672, 26675], [26676, 26679], [26680, 26683], [26684, 26687], [26688, 26697], [26698, 26701], [26701, 26702], [26703, 26710], [26711, 26713], [26714, 26722], [26723, 26730], [26731, 26736], [26737, 26749], [26749, 26750], [26751, 26753], [26754, 26757], [26758, 26764], [26765, 26768], [26769, 26770], [26770, 26782], [26782, 26783], [26783, 26784]]}) 
answer: set([u'receive', u'medal', u'honor'])
candidate Sentence: (0.12317319959402084, {u'tokens': [u'Roosevelt', u'said', u'to', u'the', u'officers', u'of', u'the', u'Fleet', u',', u'``', u'Other', u'nations', u'may', u'do', u'what', u'you', u'have', u'done', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'lemmas': [u'Roosevelt', u'say', u'to', u'the', u'officer', u'of', u'the', u'Fleet', u',', u'``', u'other', u'nation', u'may', u'do', u'what', u'you', u'have', u'do', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'pos': [u'NNP', u'VBD', u'TO', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'``', u'JJ', u'NNS', u'MD', u'VB', u'WP', u'PRP', u'VBP', u'VBN', u',', u'CC', u'PRP', u'MD', u'VB', u'TO', u'VB', u'PRP', u'.', u"''"], u'char_offsets': [[39668, 39677], [39678, 39682], [39683, 39685], [39686, 39689], [39690, 39698], [39699, 39701], [39702, 39705], [39706, 39711], [39711, 39712], [39713, 39714], [39714, 39719], [39720, 39727], [39728, 39731], [39732, 39734], [39735, 39739], [39740, 39743], [39744, 39748], [39749, 39753], [39753, 39754], [39755, 39758], [39759, 39763], [39763, 39766], [39767, 39771], [39772, 39774], [39775, 39781], [39782, 39785], [39785, 39786], [39786, 39787]]}) 
answer: set([u'receive', u'medal', u'honor'])

Did Roosevelt receive a Medal of Honor?
Validity= False
Question Type = NA
Answer Type = NA
Answer = nein
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('nein') == True
 +  where 'nein' = <src.question_processing.Question_parser instance at 0x10aa9e0e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param331] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e200>, (<src.tfidf.TF_IDF object at 0x1061d2b50>, set(['roosevelt', 'theodore'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('He was strong in biology.') == True
E                +  where 'He was strong in biology.' = <src.question_processing.Question_parser instance at 0x10aa9e200>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.33672282099723816, {u'tokens': [u'He', u'studied', u'biology', u'with', u'great', u'interest', u'and', u'indeed', u'was', u'already', u'an', u'accomplished', u'naturalist', u'and', u'published', u'ornithologist', u'.'], u'lemmas': [u'he', u'study', u'biology', u'with', u'great', u'interest', u'and', u'indeed', u'be', u'already', u'a', u'accomplished', u'naturalist', u'and', u'publish', u'ornithologist', u'.'], u'pos': [u'PRP', u'VBD', u'NN', u'IN', u'JJ', u'NN', u'CC', u'RB', u'VBD', u'RB', u'DT', u'JJ', u'NN', u'CC', u'VBN', u'NN', u'.'], u'char_offsets': [[8158, 8160], [8161, 8168], [8169, 8176], [8177, 8181], [8182, 8187], [8188, 8196], [8197, 8200], [8201, 8207], [8208, 8211], [8212, 8219], [8220, 8222], [8223, 8235], [8236, 8246], [8247, 8250], [8251, 8260], [8261, 8274], [8274, 8275]]}) 
answer: set([])
candidate Sentence: (0.21480005979537964, {u'tokens': [u'Do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'thought', u'the', u'new', u'spelling', u'was', u'wrong', u'thru', u'was', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'our', u'discomfiture', u'?', u"''"], u'lemmas': [u'do', u'you', u'know', u'that', u'the', u'one', u'word', u'as', u'to', u'which', u'I', u'think', u'the', u'new', u'spelling', u'be', u'wrong', u'thru', u'be', u'more', u'responsible', u'than', u'anything', u'else', u'for', u'we', u'discomfiture', u'?', u"''"], u'pos': [u'VBP', u'PRP', u'VB', u'IN', u'DT', u'CD', u'NN', u'IN', u'TO', u'WDT', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'JJ', u'IN', u'VBD', u'RBR', u'JJ', u'IN', u'NN', u'RB', u'IN', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[43139, 43141], [43142, 43145], [43146, 43150], [43151, 43155], [43156, 43159], [43160, 43163], [43164, 43168], [43169, 43171], [43172, 43174], [43175, 43180], [43181, 43182], [43183, 43190], [43191, 43194], [43195, 43198], [43199, 43207], [43208, 43211], [43212, 43217], [43220, 43224], [43227, 43230], [43231, 43235], [43236, 43247], [43248, 43252], [43253, 43261], [43262, 43266], [43267, 43270], [43271, 43274], [43275, 43287], [43287, 43288], [43288, 43289]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.14500568807125092, {u'tokens': [u'Learning', u'the', u'rudiments', u'of', u'taxidermy', u',', u'he', u'filled', u'his', u'makeshift', u'museum', u'with', u'many', u'animals', u'that', u'he', u'killed', u'or', u'caught', u',', u'studied', u',', u'and', u'prepared', u'for', u'display', u'.'], u'lemmas': [u'learn', u'the', u'rudiment', u'of', u'taxidermy', u',', u'he', u'fill', u'he', u'makeshift', u'museum', u'with', u'many', u'animal', u'that', u'he', u'kill', u'or', u'catch', u',', u'study', u',', u'and', u'prepare', u'for', u'display', u'.'], u'pos': [u'VBG', u'DT', u'NNS', u'IN', u'NN', u',', u'PRP', u'VBD', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'PRP', u'VBD', u'CC', u'VBD', u',', u'VBN', u',', u'CC', u'VBN', u'IN', u'NN', u'.'], u'char_offsets': [[5918, 5926], [5927, 5930], [5931, 5940], [5941, 5943], [5944, 5953], [5953, 5954], [5955, 5957], [5958, 5964], [5965, 5968], [5969, 5978], [5979, 5985], [5986, 5990], [5991, 5995], [5996, 6003], [6004, 6008], [6009, 6011], [6012, 6018], [6019, 6021], [6022, 6028], [6028, 6029], [6030, 6037], [6037, 6038], [6039, 6042], [6043, 6051], [6052, 6055], [6056, 6063], [6063, 6064]]}) 
answer: set([u'biology'])
candidate Sentence: (0.12669241428375244, {u'tokens': [u'They', u'did', u'not', u'act', u'but', u'Roosevelt', u'did', u',', u'issuing', u'44', u'lawsuits', u'against', u'major', u'corporations', u';', u'he', u'was', u'called', u'the', u'``', u'trust-buster', u'.', u"''"], u'lemmas': [u'they', u'do', u'not', u'act', u'but', u'Roosevelt', u'do', u',', u'issue', u'44', u'lawsuit', u'against', u'major', u'corporation', u';', u'he', u'be', u'call', u'the', u'``', u'trust-buster', u'.', u"''"], u'pos': [u'PRP', u'VBD', u'RB', u'VB', u'CC', u'NNP', u'VBD', u',', u'VBG', u'CD', u'NNS', u'IN', u'JJ', u'NNS', u':', u'PRP', u'VBD', u'VBN', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[26667, 26671], [26672, 26675], [26676, 26679], [26680, 26683], [26684, 26687], [26688, 26697], [26698, 26701], [26701, 26702], [26703, 26710], [26711, 26713], [26714, 26722], [26723, 26730], [26731, 26736], [26737, 26749], [26749, 26750], [26751, 26753], [26754, 26757], [26758, 26764], [26765, 26768], [26769, 26770], [26770, 26782], [26782, 26783], [26783, 26784]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.11733085662126541, {u'tokens': [u'Roosevelt', u'said', u'to', u'the', u'officers', u'of', u'the', u'Fleet', u',', u'``', u'Other', u'nations', u'may', u'do', u'what', u'you', u'have', u'done', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'lemmas': [u'Roosevelt', u'say', u'to', u'the', u'officer', u'of', u'the', u'Fleet', u',', u'``', u'other', u'nation', u'may', u'do', u'what', u'you', u'have', u'do', u',', u'but', u'they', u"'ll", u'have', u'to', u'follow', u'you', u'.', u"''"], u'pos': [u'NNP', u'VBD', u'TO', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u'``', u'JJ', u'NNS', u'MD', u'VB', u'WP', u'PRP', u'VBP', u'VBN', u',', u'CC', u'PRP', u'MD', u'VB', u'TO', u'VB', u'PRP', u'.', u"''"], u'char_offsets': [[39668, 39677], [39678, 39682], [39683, 39685], [39686, 39689], [39690, 39698], [39699, 39701], [39702, 39705], [39706, 39711], [39711, 39712], [39713, 39714], [39714, 39719], [39720, 39727], [39728, 39731], [39732, 39734], [39735, 39739], [39740, 39743], [39744, 39748], [39749, 39753], [39753, 39754], [39755, 39758], [39759, 39763], [39763, 39766], [39767, 39771], [39772, 39774], [39775, 39781], [39782, 39785], [39785, 39786], [39786, 39787]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.1164075955748558, {u'tokens': [u'He', u'was', u'solid', u'in', u'geography', u'-LRB-', u'thanks', u'to', u'his', u'careful', u'observations', u'on', u'all', u'his', u'travels', u'-RRB-', u'and', u'very', u'well', u'read', u'in', u'history', u',', u'strong', u'in', u'biology', u',', u'French', u'and', u'German', u',', u'but', u'deficient', u'in', u'mathematics', u',', u'Latin', u'and', u'Greek', u'.'], u'lemmas': [u'he', u'be', u'solid', u'in', u'geography', u'-lrb-', u'thanks', u'to', u'he', u'careful', u'observation', u'on', u'all', u'he', u'travels', u'-rrb-', u'and', u'very', u'well', u'read', u'in', u'history', u',', u'strong', u'in', u'biology', u',', u'french', u'and', u'german', u',', u'but', u'deficient', u'in', u'mathematics', u',', u'Latin', u'and', u'greek', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'IN', u'NN', u'-LRB-', u'NNS', u'TO', u'PRP$', u'JJ', u'NNS', u'IN', u'PDT', u'PRP$', u'NNS', u'-RRB-', u'CC', u'RB', u'RB', u'VB', u'IN', u'NN', u',', u'JJ', u'IN', u'NN', u',', u'JJ', u'CC', u'JJ', u',', u'CC', u'JJ', u'IN', u'NNS', u',', u'NNP', u'CC', u'JJ', u'.'], u'char_offsets': [[7680, 7682], [7683, 7686], [7687, 7692], [7693, 7695], [7696, 7705], [7706, 7707], [7707, 7713], [7714, 7716], [7717, 7720], [7721, 7728], [7729, 7741], [7742, 7744], [7745, 7748], [7749, 7752], [7753, 7760], [7760, 7761], [7762, 7765], [7766, 7770], [7771, 7775], [7776, 7780], [7781, 7783], [7784, 7791], [7791, 7792], [7793, 7799], [7800, 7802], [7803, 7810], [7810, 7811], [7812, 7818], [7819, 7822], [7823, 7829], [7829, 7830], [7831, 7834], [7835, 7844], [7845, 7847], [7848, 7859], [7859, 7860], [7861, 7866], [7867, 7870], [7871, 7876], [7876, 7877]]}) 
answer: set([u'study'])
candidate Sentence: (0.10021872818470001, {u'tokens': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'lemmas': [u'I', u'can', u'not', u'possibly', u'do', u'both', u'.', u"''"], u'pos': [u'PRP', u'MD', u'RB', u'RB', u'VB', u'DT', u'.', u"''"], u'char_offsets': [[43710, 43711], [43712, 43715], [43715, 43718], [43719, 43727], [43728, 43730], [43731, 43735], [43735, 43736], [43736, 43737]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.07508627325296402, {u'tokens': [u'During', u'his', u'presidency', u',', u'Roosevelt', u'tried', u'but', u'did', u'not', u'succeed', u'to', u'advance', u'the', u'cause', u'of', u'simplified', u'spelling', u'.'], u'lemmas': [u'during', u'he', u'presidency', u',', u'Roosevelt', u'try', u'but', u'do', u'not', u'succeed', u'to', u'advance', u'the', u'cause', u'of', u'simplify', u'spelling', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'CC', u'VBD', u'RB', u'VB', u'TO', u'VB', u'DT', u'NN', u'IN', u'VBN', u'NN', u'.'], u'char_offsets': [[42322, 42328], [42329, 42332], [42333, 42343], [42343, 42344], [42345, 42354], [42355, 42360], [42361, 42364], [42365, 42368], [42369, 42372], [42373, 42380], [42381, 42383], [42384, 42391], [42392, 42395], [42396, 42401], [42402, 42404], [42405, 42415], [42416, 42424], [42424, 42425]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.068002067506313324, {u'tokens': [u'Roosevelt', u'did', u'so', u',', u'but', u'after', u'winning', u'election', u'in', u'1904', u',', u'he', u'moved', u'to', u'the', u'political', u'left', u',', u'stretching', u'his', u'ties', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leaders', u'.'], u'lemmas': [u'Roosevelt', u'do', u'so', u',', u'but', u'after', u'win', u'election', u'in', u'1904', u',', u'he', u'move', u'to', u'the', u'political', u'left', u',', u'stretch', u'he', u'tie', u'to', u'the', u'Republican', u'Party', u"'s", u'conservative', u'leader', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u',', u'CC', u'IN', u'VBG', u'NN', u'IN', u'CD', u',', u'PRP', u'VBD', u'TO', u'DT', u'JJ', u'NN', u',', u'VBG', u'PRP$', u'NNS', u'TO', u'DT', u'NNP', u'NNP', u'POS', u'JJ', u'NNS', u'.'], u'char_offsets': [[25730, 25739], [25740, 25743], [25744, 25746], [25746, 25747], [25748, 25751], [25752, 25757], [25758, 25765], [25766, 25774], [25775, 25777], [25778, 25782], [25782, 25783], [25784, 25786], [25787, 25792], [25793, 25795], [25796, 25799], [25800, 25809], [25810, 25814], [25814, 25815], [25816, 25826], [25827, 25830], [25831, 25835], [25836, 25838], [25839, 25842], [25843, 25853], [25854, 25859], [25859, 25861], [25862, 25874], [25875, 25882], [25882, 25883]]}) 
answer: set([u'study', u'biology'])
candidate Sentence: (0.063782669603824615, {u'tokens': [u'He', u'did', u'well', u'in', u'science', u',', u'philosophy', u'and', u'rhetoric', u'courses', u'but', u'fared', u'poorly', u'in', u'Latin', u'and', u'Greek', u'.'], u'lemmas': [u'he', u'do', u'well', u'in', u'science', u',', u'philosophy', u'and', u'rhetoric', u'course', u'but', u'fare', u'poorly', u'in', u'Latin', u'and', u'greek', u'.'], u'pos': [u'PRP', u'VBD', u'RB', u'IN', u'NN', u',', u'NN', u'CC', u'NN', u'NNS', u'CC', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'JJ', u'.'], u'char_offsets': [[8064, 8066], [8067, 8070], [8071, 8075], [8076, 8078], [8079, 8086], [8086, 8087], [8088, 8098], [8099, 8102], [8103, 8111], [8112, 8119], [8120, 8123], [8124, 8129], [8130, 8136], [8137, 8139], [8140, 8145], [8146, 8149], [8150, 8155], [8155, 8156]]}) 
answer: set([u'study', u'biology'])

Did Roosevelt study biology?
Validity= False
Question Type = NA
Answer Type = NA
Answer = He was strong in biology.
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('He was strong in biology.') == True
 +  where 'He was strong in biology.' = <src.question_processing.Question_parser instance at 0x10aa9e200>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param332] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e290>, (<src.tfidf.TF_IDF object at 0x1084de210>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9e290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2456478476524353, {u'tokens': [u'Like', u'other', u'reptiles', u',', u'turtles', u'are', u'ectothermic', u'-LRB-', u'or', u'``', u'cold-blooded', u"''", u'Reptile', u'blood', u'is', u"n't", u'necessarily', u'cold', u',', u'as', u'reptiles', u'sun', u'themselves', u'and', u'take', u'other', u'measures', u'to', u'stay', u'warm', u'.', u'-RRB-'], u'lemmas': [u'like', u'other', u'reptile', u',', u'turtle', u'be', u'ectothermic', u'-lrb-', u'or', u'``', u'cold-blooded', u"''", u'reptile', u'blood', u'be', u'not', u'necessarily', u'cold', u',', u'as', u'reptile', u'sun', u'themselves', u'and', u'take', u'other', u'measure', u'to', u'stay', u'warm', u'.', u'-rrb-'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'NNS', u'VBP', u'JJ', u'-LRB-', u'CC', u'``', u'JJ', u"''", u'JJ', u'NN', u'VBZ', u'RB', u'RB', u'JJ', u',', u'IN', u'NNS', u'NN', u'PRP', u'CC', u'VB', u'JJ', u'NNS', u'TO', u'VB', u'JJ', u'.', u'-RRB-'], u'char_offsets': [[518, 522], [523, 528], [529, 537], [537, 538], [539, 546], [547, 550], [551, 562], [563, 564], [564, 566], [567, 568], [568, 580], [580, 581], [582, 589], [590, 595], [596, 598], [598, 601], [602, 613], [614, 618], [618, 619], [620, 622], [623, 631], [632, 635], [636, 646], [647, 650], [651, 655], [656, 661], [662, 670], [671, 673], [674, 678], [679, 683], [683, 684], [685, 686]]}) 
answer: set([])
candidate Sentence: (0.055444709956645966, {u'tokens': [u'The', u'largest', u'turtles', u'are', u'aquatic', u'.'], u'lemmas': [u'the', u'largest', u'turtle', u'be', u'aquatic', u'.'], u'pos': [u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[844, 847], [848, 855], [856, 863], [864, 867], [868, 875], [875, 876]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.045553591102361679, {u'tokens': [u'Aquatic', u'respiration', u'in', u'Australian', u'freshwater', u'turtles', u'is', u'currently', u'being', u'studied', u'.'], u'lemmas': [u'aquatic', u'respiration', u'in', u'australian', u'freshwater', u'turtle', u'be', u'currently', u'be', u'study', u'.'], u'pos': [u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNS', u'VBZ', u'RB', u'VBG', u'VBN', u'.'], u'char_offsets': [[1136, 1143], [1144, 1155], [1156, 1158], [1159, 1169], [1170, 1180], [1181, 1188], [1189, 1191], [1192, 1201], [1202, 1207], [1208, 1215], [1215, 1216]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.035292208194732666, {u'tokens': [u'Different', u'animals', u'are', u'called', u'turtles', u',', u'tortoises', u',', u'or', u'terrapins', u'in', u'different', u'varieties', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtles', u',', u'are', u'commonly', u'kept', u'as', u'pets', u'.'], u'lemmas': [u'different', u'animal', u'be', u'call', u'turtle', u',', u'tortoise', u',', u'or', u'terrapin', u'in', u'different', u'variety', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtle', u',', u'be', u'commonly', u'keep', u'as', u'pet', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'NNPS', u',', u'RB', u'JJ', u'NN', u'CC', u'NN', u'NNS', u',', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[3558, 3567], [3568, 3575], [3576, 3579], [3580, 3586], [3587, 3594], [3594, 3595], [3596, 3605], [3605, 3606], [3607, 3609], [3610, 3619], [3620, 3622], [3623, 3632], [3633, 3642], [3643, 3645], [3646, 3653], [3654, 3661], [3661, 3662], [3663, 3675], [3676, 3681], [3682, 3693], [3694, 3697], [3698, 3708], [3709, 3716], [3716, 3717], [3718, 3721], [3722, 3730], [3731, 3735], [3736, 3738], [3739, 3743], [3743, 3744]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.031846217811107635, {u'tokens': [u'Immature', u'sea', u'turtles', u'are', u'not', u'cared', u'for', u'by', u'the', u'adults', u'.'], u'lemmas': [u'immature', u'sea', u'turtle', u'be', u'not', u'care', u'for', u'by', u'the', u'adult', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[2380, 2388], [2389, 2392], [2393, 2400], [2401, 2404], [2405, 2408], [2409, 2414], [2415, 2418], [2419, 2421], [2422, 2425], [2426, 2432], [2432, 2433]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.031249675899744034, {u'tokens': [u'Turtles', u'are', u'reptilians', u'of', u'the', u'Order', u'Testudines', u'-LRB-', u'all', u'living', u'turtles', u'belong', u'to', u'the', u'crown', u'group', u'Chelonia', u'-RRB-', u',', u'most', u'of', u'whose', u'body', u'is', u'shielded', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'developed', u'from', u'their', u'ribs', u'.'], u'lemmas': [u'turtle', u'be', u'reptilian', u'of', u'the', u'order', u'testudine', u'-lrb-', u'all', u'live', u'turtle', u'belong', u'to', u'the', u'crown', u'group', u'Chelonia', u'-rrb-', u',', u'most', u'of', u'whose', u'body', u'be', u'shield', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'develop', u'from', u'they', u'rib', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'DT', u'VBG', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'NN', u'NNP', u'-RRB-', u',', u'JJS', u'IN', u'WP$', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'VBN', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[0, 7], [8, 11], [12, 22], [23, 25], [26, 29], [30, 35], [36, 46], [47, 48], [48, 51], [52, 58], [59, 66], [67, 73], [74, 76], [77, 80], [81, 86], [87, 92], [93, 101], [101, 102], [102, 103], [104, 108], [109, 111], [112, 117], [118, 122], [123, 125], [126, 134], [135, 137], [138, 139], [140, 147], [148, 152], [153, 155], [156, 169], [170, 175], [176, 185], [186, 190], [191, 196], [197, 201], [201, 202]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.030800476670265198, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[3211, 3214], [3215, 3225], [3226, 3228], [3229, 3232], [3233, 3239], [3240, 3242], [3243, 3246], [3247, 3250], [3251, 3257], [3258, 3261], [3262, 3270], [3271, 3274], [3275, 3278], [3279, 3285], [3286, 3293], [3293, 3294], [3295, 3298], [3299, 3310], [3311, 3320], [3320, 3321], [3322, 3325], [3326, 3330], [3331, 3333], [3334, 3337], [3338, 3348], [3349, 3356], [3356, 3357]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.030517581850290298, {u'tokens': [u'It', u'was', u'found', u'that', u'the', u'liver', u',', u'lungs', u'and', u'kidneys', u'of', u'a', u'centenarian', u'turtle', u'are', u'virtually', u'indistinguishable', u'from', u'those', u'of', u'its', u'immature', u'counterpart', u'.'], u'lemmas': [u'it', u'be', u'find', u'that', u'the', u'liver', u',', u'lung', u'and', u'kidney', u'of', u'a', u'centenarian', u'turtle', u'be', u'virtually', u'indistinguishable', u'from', u'those', u'of', u'its', u'immature', u'counterpart', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'NNS', u'CC', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'VBP', u'RB', u'JJ', u'IN', u'DT', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[2760, 2762], [2763, 2766], [2767, 2772], [2773, 2777], [2778, 2781], [2782, 2787], [2787, 2788], [2789, 2794], [2795, 2798], [2799, 2806], [2807, 2809], [2810, 2811], [2812, 2823], [2824, 2830], [2831, 2834], [2835, 2844], [2845, 2862], [2863, 2867], [2868, 2873], [2874, 2876], [2877, 2880], [2881, 2889], [2890, 2901], [2901, 2902]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.028981119394302368, {u'tokens': [u'The', u'eggs', u'of', u'the', u'largest', u'species', u'are', u'spherical', u',', u'while', u'the', u'eggs', u'of', u'the', u'rest', u'are', u'elongated', u'.'], u'lemmas': [u'the', u'egg', u'of', u'the', u'largest', u'species', u'be', u'spherical', u',', u'while', u'the', u'egg', u'of', u'the', u'rest', u'be', u'elongate', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'VBN', u'.'], u'char_offsets': [[1634, 1637], [1638, 1642], [1643, 1645], [1646, 1649], [1650, 1657], [1658, 1665], [1666, 1669], [1670, 1679], [1679, 1680], [1681, 1686], [1687, 1690], [1691, 1695], [1696, 1698], [1699, 1702], [1703, 1707], [1708, 1711], [1712, 1721], [1721, 1722]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.028794992715120316, {u'tokens': [u'About', u'300', u'species', u'are', u'alive', u'today', u';', u'some', u'are', u'highly', u'endangered', u'.'], u'lemmas': [u'about', u'300', u'species', u'be', u'alive', u'today', u';', u'some', u'be', u'highly', u'endanger', u'.'], u'pos': [u'IN', u'CD', u'NNS', u'VBP', u'JJ', u'NN', u':', u'DT', u'VBP', u'RB', u'VBN', u'.'], u'char_offsets': [[455, 460], [461, 464], [465, 472], [473, 476], [477, 482], [483, 488], [488, 489], [490, 494], [495, 498], [499, 505], [506, 516], [516, 517]]}) 
answer: set([u'ectothermic'])

Are turtles ectothermic?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aa9e290>.answer
_____________________________ test_yesno[param333] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e320>, (<src.tfidf.TF_IDF object at 0x1084de210>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa9e320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2456478476524353, {u'tokens': [u'Like', u'other', u'reptiles', u',', u'turtles', u'are', u'ectothermic', u'-LRB-', u'or', u'``', u'cold-blooded', u"''", u'Reptile', u'blood', u'is', u"n't", u'necessarily', u'cold', u',', u'as', u'reptiles', u'sun', u'themselves', u'and', u'take', u'other', u'measures', u'to', u'stay', u'warm', u'.', u'-RRB-'], u'lemmas': [u'like', u'other', u'reptile', u',', u'turtle', u'be', u'ectothermic', u'-lrb-', u'or', u'``', u'cold-blooded', u"''", u'reptile', u'blood', u'be', u'not', u'necessarily', u'cold', u',', u'as', u'reptile', u'sun', u'themselves', u'and', u'take', u'other', u'measure', u'to', u'stay', u'warm', u'.', u'-rrb-'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'NNS', u'VBP', u'JJ', u'-LRB-', u'CC', u'``', u'JJ', u"''", u'JJ', u'NN', u'VBZ', u'RB', u'RB', u'JJ', u',', u'IN', u'NNS', u'NN', u'PRP', u'CC', u'VB', u'JJ', u'NNS', u'TO', u'VB', u'JJ', u'.', u'-RRB-'], u'char_offsets': [[518, 522], [523, 528], [529, 537], [537, 538], [539, 546], [547, 550], [551, 562], [563, 564], [564, 566], [567, 568], [568, 580], [580, 581], [582, 589], [590, 595], [596, 598], [598, 601], [602, 613], [614, 618], [618, 619], [620, 622], [623, 631], [632, 635], [636, 646], [647, 650], [651, 655], [656, 661], [662, 670], [671, 673], [674, 678], [679, 683], [683, 684], [685, 686]]}) 
answer: set([])
candidate Sentence: (0.055444709956645966, {u'tokens': [u'The', u'largest', u'turtles', u'are', u'aquatic', u'.'], u'lemmas': [u'the', u'largest', u'turtle', u'be', u'aquatic', u'.'], u'pos': [u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[844, 847], [848, 855], [856, 863], [864, 867], [868, 875], [875, 876]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.045553591102361679, {u'tokens': [u'Aquatic', u'respiration', u'in', u'Australian', u'freshwater', u'turtles', u'is', u'currently', u'being', u'studied', u'.'], u'lemmas': [u'aquatic', u'respiration', u'in', u'australian', u'freshwater', u'turtle', u'be', u'currently', u'be', u'study', u'.'], u'pos': [u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNS', u'VBZ', u'RB', u'VBG', u'VBN', u'.'], u'char_offsets': [[1136, 1143], [1144, 1155], [1156, 1158], [1159, 1169], [1170, 1180], [1181, 1188], [1189, 1191], [1192, 1201], [1202, 1207], [1208, 1215], [1215, 1216]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.035292208194732666, {u'tokens': [u'Different', u'animals', u'are', u'called', u'turtles', u',', u'tortoises', u',', u'or', u'terrapins', u'in', u'different', u'varieties', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtles', u',', u'are', u'commonly', u'kept', u'as', u'pets', u'.'], u'lemmas': [u'different', u'animal', u'be', u'call', u'turtle', u',', u'tortoise', u',', u'or', u'terrapin', u'in', u'different', u'variety', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtle', u',', u'be', u'commonly', u'keep', u'as', u'pet', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'NNPS', u',', u'RB', u'JJ', u'NN', u'CC', u'NN', u'NNS', u',', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[3558, 3567], [3568, 3575], [3576, 3579], [3580, 3586], [3587, 3594], [3594, 3595], [3596, 3605], [3605, 3606], [3607, 3609], [3610, 3619], [3620, 3622], [3623, 3632], [3633, 3642], [3643, 3645], [3646, 3653], [3654, 3661], [3661, 3662], [3663, 3675], [3676, 3681], [3682, 3693], [3694, 3697], [3698, 3708], [3709, 3716], [3716, 3717], [3718, 3721], [3722, 3730], [3731, 3735], [3736, 3738], [3739, 3743], [3743, 3744]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.031846217811107635, {u'tokens': [u'Immature', u'sea', u'turtles', u'are', u'not', u'cared', u'for', u'by', u'the', u'adults', u'.'], u'lemmas': [u'immature', u'sea', u'turtle', u'be', u'not', u'care', u'for', u'by', u'the', u'adult', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[2380, 2388], [2389, 2392], [2393, 2400], [2401, 2404], [2405, 2408], [2409, 2414], [2415, 2418], [2419, 2421], [2422, 2425], [2426, 2432], [2432, 2433]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.031249675899744034, {u'tokens': [u'Turtles', u'are', u'reptilians', u'of', u'the', u'Order', u'Testudines', u'-LRB-', u'all', u'living', u'turtles', u'belong', u'to', u'the', u'crown', u'group', u'Chelonia', u'-RRB-', u',', u'most', u'of', u'whose', u'body', u'is', u'shielded', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'developed', u'from', u'their', u'ribs', u'.'], u'lemmas': [u'turtle', u'be', u'reptilian', u'of', u'the', u'order', u'testudine', u'-lrb-', u'all', u'live', u'turtle', u'belong', u'to', u'the', u'crown', u'group', u'Chelonia', u'-rrb-', u',', u'most', u'of', u'whose', u'body', u'be', u'shield', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'develop', u'from', u'they', u'rib', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'DT', u'VBG', u'NNS', u'VBP', u'TO', u'DT', u'NN', u'NN', u'NNP', u'-RRB-', u',', u'JJS', u'IN', u'WP$', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'VBN', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[0, 7], [8, 11], [12, 22], [23, 25], [26, 29], [30, 35], [36, 46], [47, 48], [48, 51], [52, 58], [59, 66], [67, 73], [74, 76], [77, 80], [81, 86], [87, 92], [93, 101], [101, 102], [102, 103], [104, 108], [109, 111], [112, 117], [118, 122], [123, 125], [126, 134], [135, 137], [138, 139], [140, 147], [148, 152], [153, 155], [156, 169], [170, 175], [176, 185], [186, 190], [191, 196], [197, 201], [201, 202]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.030800476670265198, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[3211, 3214], [3215, 3225], [3226, 3228], [3229, 3232], [3233, 3239], [3240, 3242], [3243, 3246], [3247, 3250], [3251, 3257], [3258, 3261], [3262, 3270], [3271, 3274], [3275, 3278], [3279, 3285], [3286, 3293], [3293, 3294], [3295, 3298], [3299, 3310], [3311, 3320], [3320, 3321], [3322, 3325], [3326, 3330], [3331, 3333], [3334, 3337], [3338, 3348], [3349, 3356], [3356, 3357]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.030517581850290298, {u'tokens': [u'It', u'was', u'found', u'that', u'the', u'liver', u',', u'lungs', u'and', u'kidneys', u'of', u'a', u'centenarian', u'turtle', u'are', u'virtually', u'indistinguishable', u'from', u'those', u'of', u'its', u'immature', u'counterpart', u'.'], u'lemmas': [u'it', u'be', u'find', u'that', u'the', u'liver', u',', u'lung', u'and', u'kidney', u'of', u'a', u'centenarian', u'turtle', u'be', u'virtually', u'indistinguishable', u'from', u'those', u'of', u'its', u'immature', u'counterpart', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'NNS', u'CC', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'VBP', u'RB', u'JJ', u'IN', u'DT', u'IN', u'PRP$', u'JJ', u'NN', u'.'], u'char_offsets': [[2760, 2762], [2763, 2766], [2767, 2772], [2773, 2777], [2778, 2781], [2782, 2787], [2787, 2788], [2789, 2794], [2795, 2798], [2799, 2806], [2807, 2809], [2810, 2811], [2812, 2823], [2824, 2830], [2831, 2834], [2835, 2844], [2845, 2862], [2863, 2867], [2868, 2873], [2874, 2876], [2877, 2880], [2881, 2889], [2890, 2901], [2901, 2902]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.028981119394302368, {u'tokens': [u'The', u'eggs', u'of', u'the', u'largest', u'species', u'are', u'spherical', u',', u'while', u'the', u'eggs', u'of', u'the', u'rest', u'are', u'elongated', u'.'], u'lemmas': [u'the', u'egg', u'of', u'the', u'largest', u'species', u'be', u'spherical', u',', u'while', u'the', u'egg', u'of', u'the', u'rest', u'be', u'elongate', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'VBN', u'.'], u'char_offsets': [[1634, 1637], [1638, 1642], [1643, 1645], [1646, 1649], [1650, 1657], [1658, 1665], [1666, 1669], [1670, 1679], [1679, 1680], [1681, 1686], [1687, 1690], [1691, 1695], [1696, 1698], [1699, 1702], [1703, 1707], [1708, 1711], [1712, 1721], [1721, 1722]]}) 
answer: set([u'ectothermic'])
candidate Sentence: (0.028794992715120316, {u'tokens': [u'About', u'300', u'species', u'are', u'alive', u'today', u';', u'some', u'are', u'highly', u'endangered', u'.'], u'lemmas': [u'about', u'300', u'species', u'be', u'alive', u'today', u';', u'some', u'be', u'highly', u'endanger', u'.'], u'pos': [u'IN', u'CD', u'NNS', u'VBP', u'JJ', u'NN', u':', u'DT', u'VBP', u'RB', u'VBN', u'.'], u'char_offsets': [[455, 460], [461, 464], [465, 472], [473, 476], [477, 482], [483, 488], [488, 489], [490, 494], [495, 498], [499, 505], [506, 516], [516, 517]]}) 
answer: set([u'ectothermic'])

Are turtles ectothermic?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aa9e320>.answer
_____________________________ test_yesno[param334] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e3b0>, (<src.tfidf.TF_IDF object at 0x1084de210>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa9e3b0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.60667192935943604, {u'tokens': [u'There', u'are', u'no', u'known', u'species', u'wherein', u'the', u'mother', u'cares', u'for', u'the', u'young', u'.'], u'lemmas': [u'there', u'be', u'no', u'known', u'species', u'wherein', u'the', u'mother', u'care', u'for', u'the', u'young', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'JJ', u'NNS', u'WRB', u'DT', u'NN', u'VBZ', u'IN', u'DT', u'JJ', u'.'], u'char_offsets': [[2264, 2269], [2270, 2273], [2274, 2276], [2277, 2282], [2283, 2290], [2291, 2298], [2299, 2302], [2303, 2309], [2310, 2315], [2316, 2319], [2320, 2323], [2324, 2329], [2329, 2330]]}) 
answer: set([])
candidate Sentence: (0.24408881366252899, {u'tokens': [u'Immature', u'sea', u'turtles', u'are', u'not', u'cared', u'for', u'by', u'the', u'adults', u'.'], u'lemmas': [u'immature', u'sea', u'turtle', u'be', u'not', u'care', u'for', u'by', u'the', u'adult', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[2380, 2388], [2389, 2392], [2393, 2400], [2401, 2404], [2405, 2408], [2409, 2414], [2415, 2418], [2419, 2421], [2422, 2425], [2426, 2432], [2432, 2433]]}) 
answer: set([u'young', u'mother'])
candidate Sentence: (0.16056953370571136, {u'tokens': [u'When', u'the', u'turtles', u'hatch', u'they', u'squirm', u'their', u'way', u'to', u'the', u'surface', u'and', u'make', u'for', u'the', u'water', u'.'], u'lemmas': [u'when', u'the', u'turtle', u'hatch', u'they', u'squirm', u'they', u'way', u'to', u'the', u'surface', u'and', u'make', u'for', u'the', u'water', u'.'], u'pos': [u'WRB', u'DT', u'NNS', u'VBP', u'PRP', u'VBP', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'CC', u'VB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2180, 2184], [2185, 2188], [2189, 2196], [2197, 2202], [2203, 2207], [2208, 2214], [2215, 2220], [2221, 2224], [2225, 2227], [2228, 2231], [2232, 2239], [2240, 2243], [2244, 2248], [2249, 2252], [2253, 2256], [2257, 2262], [2262, 2263]]}) 
answer: set([u'care', u'young', u'mother'])
candidate Sentence: (0.15244162082672119, {u'tokens': [u'*', u'-', u'A', u'website', u'on', u'all', u'pet', u'turtle', u'species', u'including', u'a', u'guide', u'on', u'caring', u'for', u'your', u'turtles', u'.'], u'lemmas': [u'*', u'-', u'a', u'website', u'on', u'all', u'pet', u'turtle', u'species', u'include', u'a', u'guide', u'on', u'care', u'for', u'you', u'turtle', u'.'], u'pos': [u'SYM', u':', u'NN', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNS', u'VBG', u'DT', u'NN', u'IN', u'VBG', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[4379, 4380], [4382, 4383], [4384, 4385], [4386, 4393], [4394, 4396], [4397, 4400], [4401, 4404], [4405, 4411], [4412, 4419], [4420, 4429], [4430, 4431], [4432, 4437], [4438, 4440], [4441, 4447], [4448, 4451], [4452, 4456], [4457, 4464], [4464, 4465]]}) 
answer: set([u'young', u'mother'])
candidate Sentence: (0.15236660838127136, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[3211, 3214], [3215, 3225], [3226, 3228], [3229, 3232], [3233, 3239], [3240, 3242], [3243, 3246], [3247, 3250], [3251, 3257], [3258, 3261], [3262, 3270], [3271, 3274], [3275, 3278], [3279, 3285], [3286, 3293], [3293, 3294], [3295, 3298], [3299, 3310], [3311, 3320], [3320, 3321], [3322, 3325], [3326, 3330], [3331, 3333], [3334, 3337], [3338, 3348], [3349, 3356], [3356, 3357]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.11627013236284256, {u'tokens': [u'The', u'two', u'extant', u'suborders', u'are', u'the', u'Cryptodira', u'and', u'the', u'Pleurodira', u'.'], u'lemmas': [u'the', u'two', u'extant', u'suborder', u'be', u'the', u'Cryptodira', u'and', u'the', u'Pleurodira', u'.'], u'pos': [u'DT', u'CD', u'JJ', u'NNS', u'VBP', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[3147, 3150], [3151, 3154], [3155, 3161], [3162, 3171], [3172, 3175], [3176, 3179], [3180, 3190], [3191, 3194], [3195, 3198], [3199, 3209], [3209, 3210]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.11620189994573593, {u'tokens': [u'The', u'eggs', u'of', u'the', u'largest', u'species', u'are', u'spherical', u',', u'while', u'the', u'eggs', u'of', u'the', u'rest', u'are', u'elongated', u'.'], u'lemmas': [u'the', u'egg', u'of', u'the', u'largest', u'species', u'be', u'spherical', u',', u'while', u'the', u'egg', u'of', u'the', u'rest', u'be', u'elongate', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'VBN', u'.'], u'char_offsets': [[1634, 1637], [1638, 1642], [1643, 1645], [1646, 1649], [1650, 1657], [1658, 1665], [1666, 1669], [1670, 1679], [1679, 1680], [1681, 1686], [1687, 1690], [1691, 1695], [1696, 1698], [1699, 1702], [1703, 1707], [1708, 1711], [1712, 1721], [1721, 1722]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.091739378869533539, {u'tokens': [u'Like', u'other', u'amniotes', u'-LRB-', u'reptiles', u',', u'dinosaurs', u',', u'birds', u',', u'and', u'mammals', u'-RRB-', u',', u'they', u'breathe', u'air', u'and', u'do', u"n't", u'lay', u'eggs', u'underwater', u',', u'though', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'lemmas': [u'like', u'other', u'amniote', u'-lrb-', u'reptile', u',', u'dinosaur', u',', u'bird', u',', u'and', u'mammal', u'-rrb-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'egg', u'underwater', u',', u'though', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'-LRB-', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'-RRB-', u',', u'PRP', u'VBP', u'NN', u'CC', u'VBP', u'RB', u'VB', u'NNS', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBP', u'IN', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[688, 692], [693, 698], [699, 707], [708, 709], [709, 717], [717, 718], [719, 728], [728, 729], [730, 735], [735, 736], [737, 740], [741, 748], [748, 749], [749, 750], [751, 755], [756, 763], [764, 767], [768, 771], [772, 774], [774, 777], [778, 781], [782, 786], [787, 797], [797, 798], [799, 805], [806, 810], [811, 818], [819, 823], [824, 826], [827, 829], [830, 836], [837, 842], [842, 843]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.084556639194488525, {u'tokens': [u'Researchers', u'have', u'recently', u'discovered', u'a', u'turtle', u"'s", u'organs', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animals', u'.'], u'lemmas': [u'researcher', u'have', u'recently', u'discover', u'a', u'turtle', u"'s", u'organ', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animal', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'DT', u'NN', u'POS', u'NNS', u'VBP', u'RB', u'RB', u'VB', u'RP', u'CC', u'VB', u'RBR', u'JJ', u'IN', u'NN', u',', u'IN', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[2614, 2625], [2626, 2630], [2631, 2639], [2640, 2650], [2651, 2652], [2653, 2659], [2659, 2661], [2662, 2668], [2669, 2671], [2672, 2675], [2676, 2685], [2686, 2691], [2692, 2696], [2697, 2699], [2700, 2706], [2707, 2711], [2712, 2721], [2722, 2726], [2727, 2731], [2731, 2732], [2733, 2739], [2740, 2744], [2745, 2750], [2751, 2758], [2758, 2759]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.084062375128269196, {u'tokens': [u'This', u'has', u'inspired', u'genetic', u'researchers', u'to', u'begin', u'examining', u'the', u'turtle', u'genome', u'for', u'longevity', u'genes', u'.'], u'lemmas': [u'this', u'have', u'inspire', u'genetic', u'researcher', u'to', u'begin', u'examine', u'the', u'turtle', u'genome', u'for', u'longevity', u'gene', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'JJ', u'NNS', u'TO', u'VB', u'VBG', u'DT', u'NN', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[2903, 2907], [2908, 2911], [2912, 2920], [2921, 2928], [2929, 2940], [2941, 2943], [2944, 2949], [2950, 2959], [2960, 2963], [2964, 2970], [2971, 2977], [2978, 2981], [2982, 2991], [2992, 2997], [2997, 2998]]}) 
answer: set([u'care', u'young', u'mother'])

Does the mother care for the young?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aa9e3b0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param335] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9e440>, (<src.tfidf.TF_IDF object at 0x1084de210>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa9e440>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.60667192935943604, {u'tokens': [u'There', u'are', u'no', u'known', u'species', u'wherein', u'the', u'mother', u'cares', u'for', u'the', u'young', u'.'], u'lemmas': [u'there', u'be', u'no', u'known', u'species', u'wherein', u'the', u'mother', u'care', u'for', u'the', u'young', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'JJ', u'NNS', u'WRB', u'DT', u'NN', u'VBZ', u'IN', u'DT', u'JJ', u'.'], u'char_offsets': [[2264, 2269], [2270, 2273], [2274, 2276], [2277, 2282], [2283, 2290], [2291, 2298], [2299, 2302], [2303, 2309], [2310, 2315], [2316, 2319], [2320, 2323], [2324, 2329], [2329, 2330]]}) 
answer: set([])
candidate Sentence: (0.24408881366252899, {u'tokens': [u'Immature', u'sea', u'turtles', u'are', u'not', u'cared', u'for', u'by', u'the', u'adults', u'.'], u'lemmas': [u'immature', u'sea', u'turtle', u'be', u'not', u'care', u'for', u'by', u'the', u'adult', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[2380, 2388], [2389, 2392], [2393, 2400], [2401, 2404], [2405, 2408], [2409, 2414], [2415, 2418], [2419, 2421], [2422, 2425], [2426, 2432], [2432, 2433]]}) 
answer: set([u'young', u'mother'])
candidate Sentence: (0.16056953370571136, {u'tokens': [u'When', u'the', u'turtles', u'hatch', u'they', u'squirm', u'their', u'way', u'to', u'the', u'surface', u'and', u'make', u'for', u'the', u'water', u'.'], u'lemmas': [u'when', u'the', u'turtle', u'hatch', u'they', u'squirm', u'they', u'way', u'to', u'the', u'surface', u'and', u'make', u'for', u'the', u'water', u'.'], u'pos': [u'WRB', u'DT', u'NNS', u'VBP', u'PRP', u'VBP', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'CC', u'VB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2180, 2184], [2185, 2188], [2189, 2196], [2197, 2202], [2203, 2207], [2208, 2214], [2215, 2220], [2221, 2224], [2225, 2227], [2228, 2231], [2232, 2239], [2240, 2243], [2244, 2248], [2249, 2252], [2253, 2256], [2257, 2262], [2262, 2263]]}) 
answer: set([u'care', u'young', u'mother'])
candidate Sentence: (0.15244162082672119, {u'tokens': [u'*', u'-', u'A', u'website', u'on', u'all', u'pet', u'turtle', u'species', u'including', u'a', u'guide', u'on', u'caring', u'for', u'your', u'turtles', u'.'], u'lemmas': [u'*', u'-', u'a', u'website', u'on', u'all', u'pet', u'turtle', u'species', u'include', u'a', u'guide', u'on', u'care', u'for', u'you', u'turtle', u'.'], u'pos': [u'SYM', u':', u'NN', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNS', u'VBG', u'DT', u'NN', u'IN', u'VBG', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[4379, 4380], [4382, 4383], [4384, 4385], [4386, 4393], [4394, 4396], [4397, 4400], [4401, 4404], [4405, 4411], [4412, 4419], [4420, 4429], [4430, 4431], [4432, 4437], [4438, 4440], [4441, 4447], [4448, 4451], [4452, 4456], [4457, 4464], [4464, 4465]]}) 
answer: set([u'young', u'mother'])
candidate Sentence: (0.15236660838127136, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[3211, 3214], [3215, 3225], [3226, 3228], [3229, 3232], [3233, 3239], [3240, 3242], [3243, 3246], [3247, 3250], [3251, 3257], [3258, 3261], [3262, 3270], [3271, 3274], [3275, 3278], [3279, 3285], [3286, 3293], [3293, 3294], [3295, 3298], [3299, 3310], [3311, 3320], [3320, 3321], [3322, 3325], [3326, 3330], [3331, 3333], [3334, 3337], [3338, 3348], [3349, 3356], [3356, 3357]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.11627013236284256, {u'tokens': [u'The', u'two', u'extant', u'suborders', u'are', u'the', u'Cryptodira', u'and', u'the', u'Pleurodira', u'.'], u'lemmas': [u'the', u'two', u'extant', u'suborder', u'be', u'the', u'Cryptodira', u'and', u'the', u'Pleurodira', u'.'], u'pos': [u'DT', u'CD', u'JJ', u'NNS', u'VBP', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[3147, 3150], [3151, 3154], [3155, 3161], [3162, 3171], [3172, 3175], [3176, 3179], [3180, 3190], [3191, 3194], [3195, 3198], [3199, 3209], [3209, 3210]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.11620189994573593, {u'tokens': [u'The', u'eggs', u'of', u'the', u'largest', u'species', u'are', u'spherical', u',', u'while', u'the', u'eggs', u'of', u'the', u'rest', u'are', u'elongated', u'.'], u'lemmas': [u'the', u'egg', u'of', u'the', u'largest', u'species', u'be', u'spherical', u',', u'while', u'the', u'egg', u'of', u'the', u'rest', u'be', u'elongate', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u',', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'VBN', u'.'], u'char_offsets': [[1634, 1637], [1638, 1642], [1643, 1645], [1646, 1649], [1650, 1657], [1658, 1665], [1666, 1669], [1670, 1679], [1679, 1680], [1681, 1686], [1687, 1690], [1691, 1695], [1696, 1698], [1699, 1702], [1703, 1707], [1708, 1711], [1712, 1721], [1721, 1722]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.091739378869533539, {u'tokens': [u'Like', u'other', u'amniotes', u'-LRB-', u'reptiles', u',', u'dinosaurs', u',', u'birds', u',', u'and', u'mammals', u'-RRB-', u',', u'they', u'breathe', u'air', u'and', u'do', u"n't", u'lay', u'eggs', u'underwater', u',', u'though', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'lemmas': [u'like', u'other', u'amniote', u'-lrb-', u'reptile', u',', u'dinosaur', u',', u'bird', u',', u'and', u'mammal', u'-rrb-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'egg', u'underwater', u',', u'though', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'-LRB-', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'-RRB-', u',', u'PRP', u'VBP', u'NN', u'CC', u'VBP', u'RB', u'VB', u'NNS', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBP', u'IN', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[688, 692], [693, 698], [699, 707], [708, 709], [709, 717], [717, 718], [719, 728], [728, 729], [730, 735], [735, 736], [737, 740], [741, 748], [748, 749], [749, 750], [751, 755], [756, 763], [764, 767], [768, 771], [772, 774], [774, 777], [778, 781], [782, 786], [787, 797], [797, 798], [799, 805], [806, 810], [811, 818], [819, 823], [824, 826], [827, 829], [830, 836], [837, 842], [842, 843]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.084556639194488525, {u'tokens': [u'Researchers', u'have', u'recently', u'discovered', u'a', u'turtle', u"'s", u'organs', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animals', u'.'], u'lemmas': [u'researcher', u'have', u'recently', u'discover', u'a', u'turtle', u"'s", u'organ', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animal', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'DT', u'NN', u'POS', u'NNS', u'VBP', u'RB', u'RB', u'VB', u'RP', u'CC', u'VB', u'RBR', u'JJ', u'IN', u'NN', u',', u'IN', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[2614, 2625], [2626, 2630], [2631, 2639], [2640, 2650], [2651, 2652], [2653, 2659], [2659, 2661], [2662, 2668], [2669, 2671], [2672, 2675], [2676, 2685], [2686, 2691], [2692, 2696], [2697, 2699], [2700, 2706], [2707, 2711], [2712, 2721], [2722, 2726], [2727, 2731], [2731, 2732], [2733, 2739], [2740, 2744], [2745, 2750], [2751, 2758], [2758, 2759]]}) 
answer: set([u'mother', u'young', u'care'])
candidate Sentence: (0.084062375128269196, {u'tokens': [u'This', u'has', u'inspired', u'genetic', u'researchers', u'to', u'begin', u'examining', u'the', u'turtle', u'genome', u'for', u'longevity', u'genes', u'.'], u'lemmas': [u'this', u'have', u'inspire', u'genetic', u'researcher', u'to', u'begin', u'examine', u'the', u'turtle', u'genome', u'for', u'longevity', u'gene', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'JJ', u'NNS', u'TO', u'VB', u'VBG', u'DT', u'NN', u'NN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[2903, 2907], [2908, 2911], [2912, 2920], [2921, 2928], [2929, 2940], [2941, 2943], [2944, 2949], [2950, 2959], [2960, 2963], [2964, 2970], [2971, 2977], [2978, 2981], [2982, 2991], [2992, 2997], [2997, 2998]]}) 
answer: set([u'care', u'young', u'mother'])

Does the mother care for the young?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aa9e440>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param352] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9edd0>, (<src.tfidf.TF_IDF object at 0x10a1535d0>, set(['grant', 's.', 'ulysses'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('yup') == True
E                +  where 'yup' = <src.question_processing.Question_parser instance at 0x10aa9edd0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.51906752586364746, {u'tokens': [u'?'], u'lemmas': [u'?'], u'pos': [u'.'], u'char_offsets': [[4006, 4007]]}) 
answer: set([u'father-in-law', u'democrat'])
candidate Sentence: (0.44796416163444519, {u'tokens': [u"'s", u'name', u'?'], u'lemmas': [u"'s", u'name', u'?'], u'pos': [u'POS', u'NN', u'.'], u'char_offsets': [[4042, 4044], [4045, 4049], [4049, 4050]]}) 
answer: set([u'father-in-law', u'democrat'])
candidate Sentence: (0.31135976314544678, {u'tokens': [u'Although', u'Grant', u'was', u'essentially', u'apolitical', u',', u'his', u'father-in-law', u'was', u'a', u'prominent', u'Democrat', u'in', u'St.', u'Louis', u'-LRB-', u'a', u'fact', u'that', u'lost', u'Grant', u'the', u'good', u'job', u'of', u'county', u'engineer', u'in', u'1859', u'-RRB-', u'.'], u'lemmas': [u'although', u'Grant', u'be', u'essentially', u'apolitical', u',', u'he', u'father-in-law', u'be', u'a', u'prominent', u'Democrat', u'in', u'St.', u'Louis', u'-lrb-', u'a', u'fact', u'that', u'lose', u'Grant', u'the', u'good', u'job', u'of', u'county', u'engineer', u'in', u'1859', u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'RB', u'JJ', u',', u'PRP$', u'NN', u'VBD', u'DT', u'JJ', u'NNP', u'IN', u'NNP', u'NNP', u'-LRB-', u'DT', u'NN', u'IN', u'VBN', u'NNP', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'IN', u'CD', u'-RRB-', u'.'], u'char_offsets': [[8748, 8756], [8757, 8762], [8763, 8766], [8767, 8778], [8779, 8789], [8789, 8790], [8791, 8794], [8795, 8808], [8809, 8812], [8813, 8814], [8815, 8824], [8825, 8833], [8834, 8836], [8837, 8840], [8841, 8846], [8847, 8848], [8848, 8849], [8850, 8854], [8855, 8859], [8860, 8864], [8865, 8870], [8871, 8874], [8875, 8879], [8880, 8883], [8884, 8886], [8887, 8893], [8894, 8902], [8903, 8905], [8906, 8910], [8910, 8911], [8911, 8912]]}) 
answer: set([])
candidate Sentence: (0.2483024001121521, {u'tokens': [u'*', u'The', u'question', u'``', u'Who', u"'s", u'buried', u'in', u'Grant', u"'s", u'Tomb', u'?', u"''"], u'lemmas': [u'*', u'the', u'question', u'``', u'who', u'be', u'bury', u'in', u'Grant', u"'s", u'Tomb', u'?', u"''"], u'pos': [u'SYM', u'DT', u'NN', u'``', u'WP', u'VBZ', u'VBN', u'IN', u'NNP', u'POS', u'NNP', u'.', u"''"], u'char_offsets': [[49075, 49076], [49077, 49080], [49081, 49089], [49090, 49091], [49091, 49094], [49094, 49096], [49097, 49103], [49104, 49106], [49107, 49112], [49112, 49114], [49115, 49119], [49119, 49120], [49120, 49121]]}) 
answer: set([u'father-in-law', u'democrat'])
candidate Sentence: (0.19507405161857605, {u'tokens': [u'In', u'1860', u',', u'he', u'favored', u'Democrat', u'Stephen', u'A.', u'Douglas', u'but', u'did', u'not', u'vote', u'.'], u'lemmas': [u'in', u'1860', u',', u'he', u'favor', u'Democrat', u'Stephen', u'A.', u'Douglas', u'but', u'do', u'not', u'vote', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'CC', u'VBD', u'RB', u'VB', u'.'], u'char_offsets': [[9048, 9050], [9051, 9055], [9055, 9056], [9057, 9059], [9060, 9067], [9068, 9076], [9077, 9084], [9085, 9087], [9088, 9095], [9096, 9099], [9100, 9103], [9104, 9107], [9108, 9112], [9112, 9113]]}) 
answer: set([u'father-in-law'])
candidate Sentence: (0.16725164651870728, {u'tokens': [u'From', u'1854', u'to', u'1858', u'he', u'labored', u'on', u'a', u'family', u'farm', u'near', u'St.', u'Louis', u',', u'Missouri', u',', u'using', u'slaves', u'owned', u'by', u'his', u'father-in-law', u',', u'but', u'it', u'did', u'not', u'prosper', u'.'], u'lemmas': [u'from', u'1854', u'to', u'1858', u'he', u'labor', u'on', u'a', u'family', u'farm', u'near', u'St.', u'Louis', u',', u'Missouri', u',', u'use', u'slave', u'own', u'by', u'he', u'father-in-law', u',', u'but', u'it', u'do', u'not', u'prosper', u'.'], u'pos': [u'IN', u'CD', u'TO', u'CD', u'PRP', u'VBD', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'VBG', u'NNS', u'VBN', u'IN', u'PRP$', u'NN', u',', u'CC', u'PRP', u'VBD', u'RB', u'VB', u'.'], u'char_offsets': [[7877, 7881], [7882, 7886], [7887, 7889], [7890, 7894], [7895, 7897], [7898, 7905], [7906, 7908], [7909, 7910], [7911, 7917], [7918, 7922], [7923, 7927], [7928, 7931], [7932, 7937], [7937, 7938], [7939, 7947], [7947, 7948], [7949, 7954], [7955, 7961], [7962, 7967], [7968, 7970], [7971, 7974], [7975, 7988], [7988, 7989], [7990, 7993], [7994, 7996], [7997, 8000], [8001, 8004], [8005, 8012], [8012, 8013]]}) 
answer: set([u'democrat'])
candidate Sentence: (0.14537987112998962, {u'tokens': [u'In', u'1856', u'he', u'voted', u'for', u'Democrat', u'James', u'Buchanan', u'for', u'president', u'to', u'avert', u'secession', u'and', u'because', u'``', u'I', u'knew', u'Fr\xe9mont', u"''", u'-LRB-', u'the', u'Republican', u'candidate', u'-RRB-', u'.'], u'lemmas': [u'in', u'1856', u'he', u'vote', u'for', u'Democrat', u'James', u'Buchanan', u'for', u'president', u'to', u'avert', u'secession', u'and', u'because', u'``', u'I', u'know', u'Fr\xe9mont', u"''", u'-lrb-', u'the', u'republican', u'candidate', u'-rrb-', u'.'], u'pos': [u'IN', u'CD', u'PRP', u'VBD', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'NN', u'TO', u'VB', u'NN', u'CC', u'IN', u'``', u'PRP', u'VBD', u'NNP', u"''", u'-LRB-', u'DT', u'JJ', u'NN', u'-RRB-', u'.'], u'char_offsets': [[8913, 8915], [8916, 8920], [8921, 8923], [8924, 8929], [8930, 8933], [8934, 8942], [8943, 8948], [8949, 8957], [8958, 8961], [8962, 8971], [8972, 8974], [8975, 8980], [8981, 8990], [8991, 8994], [8995, 9002], [9003, 9004], [9004, 9005], [9006, 9010], [9011, 9018], [9018, 9019], [9020, 9021], [9021, 9024], [9025, 9035], [9036, 9045], [9045, 9046], [9046, 9047]]}) 
answer: set([u'father-in-law'])
candidate Sentence: (0.12120373547077179, {u'tokens': [u'In', u'a', u'letter', u'to', u'his', u'wife', u'Julia', u'dated', u'March', u'31', u',', u'1853', u',', u'Grant', u'wrote', u',', u'``', u'Why', u'did', u'you', u'not', u'tell', u'me', u'more', u'about', u'our', u'dear', u'little', u'boys', u'?'], u'lemmas': [u'in', u'a', u'letter', u'to', u'he', u'wife', u'Julia', u'date', u'March', u'31', u',', u'1853', u',', u'Grant', u'write', u',', u'``', u'why', u'do', u'you', u'not', u'tell', u'I', u'more', u'about', u'we', u'dear', u'little', u'boy', u'?'], u'pos': [u'IN', u'DT', u'NN', u'TO', u'PRP$', u'NN', u'NNP', u'VBN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'VBD', u',', u'``', u'WRB', u'VBD', u'PRP', u'RB', u'VB', u'PRP', u'RBR', u'IN', u'PRP$', u'RB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3851, 3853], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3874], [3875, 3880], [3881, 3886], [3887, 3892], [3893, 3895], [3895, 3896], [3897, 3901], [3901, 3902], [3903, 3908], [3909, 3914], [3914, 3915], [3916, 3917], [3917, 3920], [3921, 3924], [3925, 3928], [3929, 3932], [3933, 3937], [3938, 3940], [3941, 3945], [3946, 3951], [3952, 3955], [3956, 3960], [3961, 3967], [3968, 3972], [3973, 3974]]}) 
answer: set([u'father-in-law', u'democrat'])
candidate Sentence: (0.055665194988250732, {u'tokens': [u'knowing', u'Grant', u"'s", u'mother', u"'s", u'maiden', u'name', u'was', u'Simpson', u'and', u'forgetting', u'that', u'Grant', u'was', u'referred', u'to', u'in', u'his', u'youth', u'as', u'``', u'H.', u'Ulysses', u'Grant', u"''", u'or', u'``', u'Lyss', u'.', u"''"], u'lemmas': [u'know', u'Grant', u"'s", u'mother', u"'s", u'maiden', u'name', u'be', u'Simpson', u'and', u'forget', u'that', u'Grant', u'be', u'refer', u'to', u'in', u'he', u'youth', u'as', u'``', u'H.', u'Ulysses', u'Grant', u"''", u'or', u'``', u'Lyss', u'.', u"''"], u'pos': [u'VBG', u'NNP', u'POS', u'NN', u'POS', u'JJ', u'NN', u'VBD', u'NNP', u'CC', u'VBG', u'IN', u'NNP', u'VBD', u'VBN', u'TO', u'IN', u'PRP$', u'NN', u'IN', u'``', u'NNP', u'NNP', u'NNP', u"''", u'CC', u'``', u'NNP', u'.', u"''"], u'char_offsets': [[3378, 3385], [3386, 3391], [3391, 3393], [3394, 3400], [3400, 3402], [3403, 3409], [3410, 3414], [3415, 3418], [3419, 3426], [3427, 3430], [3431, 3441], [3442, 3446], [3447, 3452], [3453, 3456], [3457, 3465], [3466, 3468], [3469, 3471], [3472, 3475], [3476, 3481], [3482, 3484], [3485, 3486], [3486, 3488], [3489, 3496], [3497, 3502], [3502, 3503], [3504, 3506], [3507, 3508], [3508, 3512], [3512, 3513], [3513, 3514]]}) 
answer: set([u'father-in-law', u'democrat'])
candidate Sentence: (0.054502785205841064, {u'tokens': [u'Grant', u"'s", u'strategy', u'was', u'not', u'just', u'to', u'win', u'individual', u'battles', u',', u'it', u'was', u'to', u'fight', u'constant', u'battles', u'in', u'order', u'to', u'wear', u'down', u'and', u'destroy', u'Lee', u"'s", u'army', u'.'], u'lemmas': [u'Grant', u"'s", u'strategy', u'be', u'not', u'just', u'to', u'win', u'individual', u'battle', u',', u'it', u'be', u'to', u'fight', u'constant', u'battle', u'in', u'order', u'to', u'wear', u'down', u'and', u'destroy', u'Lee', u"'s", u'army', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'RB', u'RB', u'TO', u'VB', u'JJ', u'NNS', u',', u'PRP', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'IN', u'NN', u'TO', u'VB', u'RB', u'CC', u'VB', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[21618, 21623], [21623, 21625], [21626, 21634], [21635, 21638], [21639, 21642], [21643, 21647], [21648, 21650], [21651, 21654], [21655, 21665], [21666, 21673], [21673, 21674], [21675, 21677], [21678, 21681], [21682, 21684], [21685, 21690], [21691, 21699], [21700, 21707], [21708, 21710], [21711, 21716], [21717, 21719], [21720, 21724], [21725, 21729], [21730, 21733], [21734, 21741], [21742, 21745], [21745, 21747], [21748, 21752], [21752, 21753]]}) 
answer: set([u'father-in-law', u'democrat'])

Was Grant's father-in-law a Democrat?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yup
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('yup') == True
 +  where 'yup' = <src.question_processing.Question_parser instance at 0x10aa9edd0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param354] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aa9eef0>, (<src.tfidf.TF_IDF object at 0x10a1535d0>, set(['grant', 's.', 'ulysses'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('you betcha') == True
E                +  where 'you betcha' = <src.question_processing.Question_parser instance at 0x10aa9eef0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43280982971191406, {u'tokens': [u'?'], u'lemmas': [u'?'], u'pos': [u'.'], u'char_offsets': [[4006, 4007]]}) 
answer: set([u'battle', u'win', u'champion', u'hill'])
candidate Sentence: (0.4057731032371521, {u'tokens': [u'Lt.', u'Gen.', u'Ulysses', u'S.', u'Grant', u'Knowing', u'that', u'the', u'Confederates', u'could', u'no', u'longer', u'send', u'reinforcements', u'to', u'the', u'Vicksburg', u'garrison', u',', u'Grant', u'turned', u'west', u'and', u'won', u'the', u'Battle', u'of', u'Champion', u'Hill', u'.'], u'lemmas': [u'Lt.', u'Gen.', u'Ulysses', u'S.', u'Grant', u'know', u'that', u'the', u'confederate', u'could', u'no', u'longer', u'send', u'reinforcement', u'to', u'the', u'Vicksburg', u'garrison', u',', u'Grant', u'turn', u'west', u'and', u'win', u'the', u'battle', u'of', u'Champion', u'Hill', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'VBG', u'IN', u'DT', u'NNS', u'MD', u'RB', u'RB', u'VB', u'NNS', u'TO', u'DT', u'NNP', u'NN', u',', u'NNP', u'VBD', u'NN', u'CC', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[16249, 16252], [16253, 16257], [16258, 16265], [16266, 16268], [16269, 16274], [16275, 16282], [16283, 16287], [16288, 16291], [16292, 16304], [16305, 16310], [16311, 16313], [16314, 16320], [16321, 16325], [16326, 16340], [16341, 16343], [16344, 16347], [16348, 16357], [16358, 16366], [16366, 16367], [16368, 16373], [16374, 16380], [16381, 16385], [16386, 16389], [16390, 16393], [16394, 16397], [16398, 16404], [16405, 16407], [16408, 16416], [16417, 16421], [16421, 16422]]}) 
answer: set([])
candidate Sentence: (0.36181026697158813, {u'tokens': [u'This', u'supply', u'train', u'was', u'a', u'target', u'of', u'Pemberton', u'until', u'Champion', u'Hill', u'.'], u'lemmas': [u'this', u'supply', u'train', u'be', u'a', u'target', u'of', u'Pemberton', u'until', u'Champion', u'Hill', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[15894, 15898], [15899, 15905], [15906, 15911], [15912, 15915], [15916, 15917], [15918, 15924], [15925, 15927], [15928, 15937], [15938, 15943], [15944, 15952], [15953, 15957], [15957, 15958]]}) 
answer: set([u'battle', u'win'])
candidate Sentence: (0.32591059803962708, {u'tokens': [u"'s", u'name', u'?'], u'lemmas': [u"'s", u'name', u'?'], u'pos': [u'POS', u'NN', u'.'], u'char_offsets': [[4042, 4044], [4045, 4049], [4049, 4050]]}) 
answer: set([u'battle', u'win', u'champion', u'hill'])
candidate Sentence: (0.20938637852668762, {u'tokens': [u'*', u'The', u'Ulysses', u'S.', u'Grant', u'Memorial', u',', u'located', u'on', u'Capitol', u'Hill', u'in', u'Washington', u',', u'D.C.', u',', u'honors', u'Grant', u'.'], u'lemmas': [u'*', u'the', u'Ulysses', u'S.', u'Grant', u'Memorial', u',', u'located', u'on', u'Capitol', u'Hill', u'in', u'Washington', u',', u'D.C.', u',', u'honor', u'Grant', u'.'], u'pos': [u'SYM', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'JJ', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'NNS', u'NNP', u'.'], u'char_offsets': [[45492, 45493], [45493, 45496], [45497, 45504], [45505, 45507], [45508, 45513], [45514, 45522], [45522, 45523], [45524, 45531], [45532, 45534], [45535, 45542], [45543, 45547], [45548, 45550], [45551, 45561], [45561, 45562], [45563, 45567], [45567, 45568], [45569, 45575], [45576, 45581], [45581, 45582]]}) 
answer: set([u'battle', u'win', u'champion'])
candidate Sentence: (0.20431150496006012, {u'tokens': [u'Although', u'Grant', u'lost', u'battles', u'in', u'1864', u',', u'he', u'won', u'all', u'his', u'campaigns', u'.'], u'lemmas': [u'although', u'Grant', u'lose', u'battle', u'in', u'1864', u',', u'he', u'win', u'all', u'he', u'campaign', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'NNS', u'IN', u'CD', u',', u'PRP', u'VBD', u'PDT', u'PRP$', u'NNS', u'.'], u'char_offsets': [[27729, 27737], [27738, 27743], [27744, 27748], [27749, 27756], [27757, 27759], [27760, 27764], [27764, 27765], [27766, 27768], [27769, 27772], [27773, 27776], [27777, 27780], [27781, 27790], [27790, 27791]]}) 
answer: set([u'champion', u'hill'])
candidate Sentence: (0.17240186035633087, {u'tokens': [u'*', u'The', u'question', u'``', u'Who', u"'s", u'buried', u'in', u'Grant', u"'s", u'Tomb', u'?', u"''"], u'lemmas': [u'*', u'the', u'question', u'``', u'who', u'be', u'bury', u'in', u'Grant', u"'s", u'Tomb', u'?', u"''"], u'pos': [u'SYM', u'DT', u'NN', u'``', u'WP', u'VBZ', u'VBN', u'IN', u'NNP', u'POS', u'NNP', u'.', u"''"], u'char_offsets': [[49075, 49076], [49077, 49080], [49081, 49089], [49090, 49091], [49091, 49094], [49094, 49096], [49097, 49103], [49104, 49106], [49107, 49112], [49112, 49114], [49115, 49119], [49119, 49120], [49120, 49121]]}) 
answer: set([u'battle', u'win', u'champion', u'hill'])
candidate Sentence: (0.16002362966537476, {u'tokens': [u'Grant', u"'s", u'strategy', u'was', u'not', u'just', u'to', u'win', u'individual', u'battles', u',', u'it', u'was', u'to', u'fight', u'constant', u'battles', u'in', u'order', u'to', u'wear', u'down', u'and', u'destroy', u'Lee', u"'s", u'army', u'.'], u'lemmas': [u'Grant', u"'s", u'strategy', u'be', u'not', u'just', u'to', u'win', u'individual', u'battle', u',', u'it', u'be', u'to', u'fight', u'constant', u'battle', u'in', u'order', u'to', u'wear', u'down', u'and', u'destroy', u'Lee', u"'s", u'army', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'RB', u'RB', u'TO', u'VB', u'JJ', u'NNS', u',', u'PRP', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'IN', u'NN', u'TO', u'VB', u'RB', u'CC', u'VB', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[21618, 21623], [21623, 21625], [21626, 21634], [21635, 21638], [21639, 21642], [21643, 21647], [21648, 21650], [21651, 21654], [21655, 21665], [21666, 21673], [21673, 21674], [21675, 21677], [21678, 21681], [21682, 21684], [21685, 21690], [21691, 21699], [21700, 21707], [21708, 21710], [21711, 21716], [21717, 21719], [21720, 21724], [21725, 21729], [21730, 21733], [21734, 21741], [21742, 21745], [21745, 21747], [21748, 21752], [21752, 21753]]}) 
answer: set([u'champion', u'hill'])
candidate Sentence: (0.13849782943725586, {u'tokens': [u'In', u'a', u'letter', u'to', u'his', u'wife', u'Julia', u'dated', u'March', u'31', u',', u'1853', u',', u'Grant', u'wrote', u',', u'``', u'Why', u'did', u'you', u'not', u'tell', u'me', u'more', u'about', u'our', u'dear', u'little', u'boys', u'?'], u'lemmas': [u'in', u'a', u'letter', u'to', u'he', u'wife', u'Julia', u'date', u'March', u'31', u',', u'1853', u',', u'Grant', u'write', u',', u'``', u'why', u'do', u'you', u'not', u'tell', u'I', u'more', u'about', u'we', u'dear', u'little', u'boy', u'?'], u'pos': [u'IN', u'DT', u'NN', u'TO', u'PRP$', u'NN', u'NNP', u'VBN', u'NNP', u'CD', u',', u'CD', u',', u'NNP', u'VBD', u',', u'``', u'WRB', u'VBD', u'PRP', u'RB', u'VB', u'PRP', u'RBR', u'IN', u'PRP$', u'RB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3851, 3853], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3874], [3875, 3880], [3881, 3886], [3887, 3892], [3893, 3895], [3895, 3896], [3897, 3901], [3901, 3902], [3903, 3908], [3909, 3914], [3914, 3915], [3916, 3917], [3917, 3920], [3921, 3924], [3925, 3928], [3929, 3932], [3933, 3937], [3938, 3940], [3941, 3945], [3946, 3951], [3952, 3955], [3956, 3960], [3961, 3967], [3968, 3972], [3973, 3974]]}) 
answer: set([u'battle', u'win', u'champion', u'hill'])
candidate Sentence: (0.11080177128314972, {u'tokens': [u'Grant', u'reportedly', u'said', u'afterward', u',', u'``', u'Damn', u',', u'I', u'had', u'nothing', u'to', u'do', u'with', u'this', u'battle', u',', u"''", u'according', u'to', u'Hooker', u'.'], u'lemmas': [u'Grant', u'reportedly', u'say', u'afterward', u',', u'``', u'damn', u',', u'I', u'have', u'nothing', u'to', u'do', u'with', u'this', u'battle', u',', u"''", u'accord', u'to', u'Hooker', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'RB', u',', u'``', u'JJ', u',', u'PRP', u'VBD', u'NN', u'TO', u'VB', u'IN', u'DT', u'NN', u',', u"''", u'VBG', u'TO', u'NNP', u'.'], u'char_offsets': [[19114, 19119], [19120, 19130], [19131, 19135], [19136, 19145], [19145, 19146], [19147, 19148], [19148, 19152], [19152, 19153], [19154, 19155], [19156, 19159], [19160, 19167], [19168, 19170], [19171, 19173], [19174, 19178], [19179, 19183], [19184, 19190], [19190, 19191], [19191, 19192], [19193, 19202], [19203, 19205], [19206, 19212], [19212, 19213]]}) 
answer: set([u'win', u'champion', u'hill'])

Did Ulysses win the Battle of Champion Hill?
Validity= False
Question Type = NA
Answer Type = NA
Answer = you betcha
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('you betcha') == True
 +  where 'you betcha' = <src.question_processing.Question_parser instance at 0x10aa9eef0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param359] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1200>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aaa1200>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37147539854049683, {u'tokens': [u'Uruguay', u'shares', u'borders', u'with', u'two', u'countries', u',', u'with', u'Argentina', u':', u'The', u'climate', u'in', u'Uruguay', u'is', u'temperate', u':', u'it', u'has', u'warm', u'summers', u'and', u'cold', u'winters', u'.'], u'lemmas': [u'Uruguay', u'share', u'border', u'with', u'two', u'country', u',', u'with', u'Argentina', u':', u'the', u'climate', u'in', u'Uruguay', u'be', u'temperate', u':', u'it', u'have', u'warm', u'summer', u'and', u'cold', u'winter', u'.'], u'pos': [u'NNP', u'NNS', u'NNS', u'IN', u'CD', u'NNS', u',', u'IN', u'NNP', u':', u'DT', u'NN', u'IN', u'NNP', u'VBZ', u'JJ', u':', u'PRP', u'VBZ', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[10188, 10195], [10196, 10202], [10203, 10210], [10211, 10215], [10216, 10219], [10220, 10229], [10229, 10230], [10231, 10235], [10236, 10245], [10245, 10246], [10248, 10251], [10252, 10259], [10260, 10262], [10263, 10270], [10271, 10273], [10274, 10283], [10283, 10284], [10285, 10287], [10288, 10291], [10292, 10296], [10297, 10304], [10305, 10308], [10309, 10313], [10314, 10321], [10321, 10322]]}) 
answer: set([])
candidate Sentence: (0.20075096189975739, {u'tokens': [u'There', u'can', u'be', u'frequent', u'thunderstorms', u'in', u'the', u'summer', u'.'], u'lemmas': [u'there', u'can', u'be', u'frequent', u'thunderstorm', u'in', u'the', u'summer', u'.'], u'pos': [u'EX', u'MD', u'VB', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10837, 10842], [10843, 10846], [10847, 10849], [10850, 10858], [10859, 10872], [10873, 10875], [10876, 10879], [10880, 10886], [10886, 10887]]}) 
answer: set([u'cold'])
candidate Sentence: (0.14067712426185608, {u'tokens': [u'Although', u'the', u'majority', u'of', u'Uruguayans', u'do', u'not', u'actively', u'practice', u'a', u'religion', u',', u'they', u'are', u'nominally', u'church', u'members', u'in', u'the', u'Catholic', u',', u'Protestant', u'and', u'Jewish', u'communities', u'.'], u'lemmas': [u'although', u'the', u'majority', u'of', u'Uruguayans', u'do', u'not', u'actively', u'practice', u'a', u'religion', u',', u'they', u'be', u'nominally', u'church', u'member', u'in', u'the', u'Catholic', u',', u'Protestant', u'and', u'jewish', u'community', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NNPS', u'VBP', u'RB', u'RB', u'VB', u'DT', u'NN', u',', u'PRP', u'VBP', u'RB', u'NN', u'NNS', u'IN', u'DT', u'NNP', u',', u'NNP', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[16808, 16816], [16817, 16820], [16821, 16829], [16830, 16832], [16833, 16843], [16844, 16846], [16847, 16850], [16851, 16859], [16860, 16868], [16869, 16870], [16871, 16879], [16879, 16880], [16881, 16885], [16886, 16889], [16890, 16899], [16900, 16906], [16907, 16914], [16915, 16917], [16918, 16921], [16922, 16930], [16930, 16931], [16932, 16942], [16943, 16946], [16947, 16953], [16954, 16965], [16965, 16966]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.13688595592975616, {u'tokens': [u'To', u'the', u'southwest', u'is', u'the', u'R\xedo', u'de', u'la', u'Plata', u',', u'the', u'estuary', u'of', u'the', u'Uruguay', u'River', u',', u'which', u'forms', u'the', u'western', u'border', u',', u'and', u'the', u'Paran\xe1', u'River', u',', u'that', u'does', u'not', u'run', u'through', u'Uruguay', u'itself', u'.'], u'lemmas': [u'to', u'the', u'southwest', u'be', u'the', u'R\xedo', u'de', u'la', u'Plata', u',', u'the', u'estuary', u'of', u'the', u'Uruguay', u'River', u',', u'which', u'form', u'the', u'western', u'border', u',', u'and', u'the', u'Paran\xe1', u'River', u',', u'that', u'do', u'not', u'run', u'through', u'Uruguay', u'itself', u'.'], u'pos': [u'TO', u'DT', u'NN', u'VBZ', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'RB', u'VB', u'IN', u'NNP', u'PRP', u'.'], u'char_offsets': [[9690, 9692], [9693, 9696], [9697, 9706], [9707, 9709], [9710, 9713], [9714, 9717], [9718, 9720], [9721, 9723], [9724, 9729], [9729, 9730], [9731, 9734], [9735, 9742], [9743, 9745], [9746, 9749], [9750, 9757], [9758, 9763], [9763, 9764], [9765, 9770], [9771, 9776], [9777, 9780], [9781, 9788], [9789, 9795], [9795, 9796], [9797, 9800], [9801, 9804], [9805, 9811], [9812, 9817], [9817, 9818], [9819, 9823], [9824, 9828], [9829, 9832], [9833, 9836], [9837, 9844], [9845, 9852], [9853, 9859], [9859, 9860]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.12220378220081329, {u'tokens': [u'It', u'receives', u'the', u'periodic', u'influence', u'of', u'the', u'polar', u'air', u'in', u'winter', u',', u'and', u'tropical', u'air', u'from', u'Brazil', u'in', u'summer', u'.'], u'lemmas': [u'it', u'receive', u'the', u'periodic', u'influence', u'of', u'the', u'polar', u'air', u'in', u'winter', u',', u'and', u'tropical', u'air', u'from', u'Brazil', u'in', u'summer', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NN', u'.'], u'char_offsets': [[10435, 10437], [10438, 10446], [10447, 10450], [10451, 10459], [10460, 10469], [10470, 10472], [10473, 10476], [10477, 10482], [10483, 10486], [10487, 10489], [10490, 10496], [10496, 10497], [10498, 10501], [10502, 10510], [10511, 10514], [10515, 10519], [10520, 10526], [10527, 10529], [10530, 10536], [10536, 10537]]}) 
answer: set([u'cold'])
candidate Sentence: (0.058568805456161499, {u'tokens': [u'In', u'recent', u'years', u'Uruguay', u'has', u'shifted', u'some', u'of', u'its', u'energy', u'into', u'developing', u'the', u'commercial', u'use', u'of', u'IT', u'technologies', u'and', u'has', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'in', u'recent', u'year', u'Uruguay', u'have', u'shift', u'some', u'of', u'its', u'energy', u'into', u'develop', u'the', u'commercial', u'use', u'of', u'it', u'technology', u'and', u'have', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'NNP', u'VBZ', u'VBN', u'DT', u'IN', u'PRP$', u'NN', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'PRP', u'NNS', u'CC', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12078, 12080], [12081, 12087], [12088, 12093], [12094, 12101], [12102, 12105], [12106, 12113], [12114, 12118], [12119, 12121], [12122, 12125], [12126, 12132], [12133, 12137], [12138, 12148], [12149, 12152], [12153, 12163], [12164, 12167], [12168, 12170], [12171, 12173], [12174, 12186], [12187, 12190], [12191, 12194], [12195, 12201], [12202, 12205], [12206, 12211], [12212, 12220], [12221, 12223], [12224, 12232], [12233, 12235], [12236, 12241], [12242, 12249], [12249, 12250]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.0544096939265728, {u'tokens': [u'It', u'has', u'many', u'possible', u'meanings', u'.'], u'lemmas': [u'it', u'have', u'many', u'possible', u'meaning', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[1978, 1980], [1981, 1984], [1985, 1989], [1990, 1998], [1999, 2007], [2007, 2008]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.046841219067573547, {u'tokens': [u'Many', u'relocated', u'to', u'Montevideo', u',', u'which', u'had', u'a', u'larger', u'black', u'community', u',', u'seemed', u'lest', u'hostile', u'politically', u'than', u'Buenos', u'Aires', u',', u'and', u'had', u'a', u'more', u'favorable', u'climate', u'with', u'lower', u'humidity', u'.'], u'lemmas': [u'many', u'relocate', u'to', u'Montevideo', u',', u'which', u'have', u'a', u'larger', u'black', u'community', u',', u'seem', u'lest', u'hostile', u'politically', u'than', u'Buenos', u'Aires', u',', u'and', u'have', u'a', u'more', u'favorable', u'climate', u'with', u'lower', u'humidity', u'.'], u'pos': [u'JJ', u'VBN', u'TO', u'NNP', u',', u'WDT', u'VBD', u'DT', u'JJR', u'JJ', u'NN', u',', u'VBD', u'IN', u'JJ', u'RB', u'IN', u'NNP', u'NNP', u',', u'CC', u'VBD', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'JJR', u'NN', u'.'], u'char_offsets': [[3733, 3737], [3738, 3747], [3748, 3750], [3751, 3761], [3761, 3762], [3763, 3768], [3769, 3772], [3773, 3774], [3775, 3781], [3782, 3787], [3788, 3797], [3797, 3798], [3799, 3805], [3806, 3810], [3811, 3818], [3819, 3830], [3831, 3835], [3836, 3842], [3843, 3848], [3848, 3849], [3850, 3853], [3854, 3857], [3858, 3859], [3860, 3864], [3865, 3874], [3875, 3882], [3883, 3887], [3888, 3893], [3894, 3902], [3902, 3903]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.042865768074989319, {u'tokens': [u'For', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternated', u'in', u'power', u'.'], u'lemmas': [u'for', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternate', u'in', u'power', u'.'], u'pos': [u'IN', u'JJS', u'IN', u'NNP', u'POS', u'NN', u',', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'VBP', u'VBN', u'IN', u'NN', u'.'], u'char_offsets': [[6448, 6451], [6452, 6456], [6457, 6459], [6460, 6467], [6467, 6469], [6470, 6477], [6477, 6478], [6479, 6482], [6483, 6490], [6491, 6499], [6500, 6503], [6504, 6511], [6512, 6518], [6519, 6523], [6524, 6534], [6535, 6537], [6538, 6543], [6543, 6544]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.039306811988353729, {u'tokens': [u'Out', u'of', u'the', u'World', u'Cup', u'winners', u',', u'the', u'nation', u'with', u'the', u'second', u'smallest', u'population', u'is', u'Argentina', u'-LRB-', u'winners', u'of', u'the', u'1978', u'and', u'1986', u'editions', u'-RRB-', u'who', u'currently', u'have', u'just', u'over', u'40,000,000', u'people', u'according', u'to', u'the', u'latest', u'estimate', u';', u'the', u'2002', u'census', u'has', u'Uruguay', u"'s", u'current', u'population', u'slightly', u'under', u'3,400,000', u'.'], u'lemmas': [u'out', u'of', u'the', u'World', u'Cup', u'winner', u',', u'the', u'nation', u'with', u'the', u'second', u'smallest', u'population', u'be', u'Argentina', u'-lrb-', u'winner', u'of', u'the', u'1978', u'and', u'1986', u'edition', u'-rrb-', u'who', u'currently', u'have', u'just', u'over', u'40,000,000', u'people', u'accord', u'to', u'the', u'latest', u'estimate', u';', u'the', u'2002', u'census', u'have', u'Uruguay', u"'s", u'current', u'population', u'slightly', u'under', u'3,400,000', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NNP', u'NNP', u'NNS', u',', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJS', u'NN', u'VBZ', u'NNP', u'-LRB-', u'NNS', u'IN', u'DT', u'CD', u'CC', u'CD', u'NNS', u'-RRB-', u'WP', u'RB', u'VBP', u'RB', u'IN', u'CD', u'NNS', u'VBG', u'TO', u'DT', u'JJS', u'NN', u':', u'DT', u'CD', u'NN', u'VBZ', u'NNP', u'POS', u'JJ', u'NN', u'RB', u'IN', u'CD', u'.'], u'char_offsets': [[20109, 20112], [20113, 20115], [20116, 20119], [20120, 20125], [20126, 20129], [20130, 20137], [20137, 20138], [20139, 20142], [20143, 20149], [20150, 20154], [20155, 20158], [20159, 20165], [20166, 20174], [20175, 20185], [20186, 20188], [20189, 20198], [20199, 20200], [20200, 20207], [20208, 20210], [20211, 20214], [20215, 20219], [20220, 20223], [20224, 20228], [20229, 20237], [20237, 20238], [20239, 20242], [20243, 20252], [20253, 20257], [20258, 20262], [20263, 20267], [20268, 20278], [20279, 20285], [20286, 20295], [20296, 20298], [20299, 20302], [20303, 20309], [20310, 20318], [20318, 20319], [20320, 20323], [20324, 20328], [20329, 20335], [20336, 20339], [20340, 20347], [20347, 20349], [20350, 20357], [20358, 20368], [20369, 20377], [20378, 20383], [20384, 20393], [20393, 20394]]}) 
answer: set([u'summer', u'cold'])

Does Uruguay have cold summers?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x10aaa1200>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param360] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1290>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aaa1290>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37147539854049683, {u'tokens': [u'Uruguay', u'shares', u'borders', u'with', u'two', u'countries', u',', u'with', u'Argentina', u':', u'The', u'climate', u'in', u'Uruguay', u'is', u'temperate', u':', u'it', u'has', u'warm', u'summers', u'and', u'cold', u'winters', u'.'], u'lemmas': [u'Uruguay', u'share', u'border', u'with', u'two', u'country', u',', u'with', u'Argentina', u':', u'the', u'climate', u'in', u'Uruguay', u'be', u'temperate', u':', u'it', u'have', u'warm', u'summer', u'and', u'cold', u'winter', u'.'], u'pos': [u'NNP', u'NNS', u'NNS', u'IN', u'CD', u'NNS', u',', u'IN', u'NNP', u':', u'DT', u'NN', u'IN', u'NNP', u'VBZ', u'JJ', u':', u'PRP', u'VBZ', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[10188, 10195], [10196, 10202], [10203, 10210], [10211, 10215], [10216, 10219], [10220, 10229], [10229, 10230], [10231, 10235], [10236, 10245], [10245, 10246], [10248, 10251], [10252, 10259], [10260, 10262], [10263, 10270], [10271, 10273], [10274, 10283], [10283, 10284], [10285, 10287], [10288, 10291], [10292, 10296], [10297, 10304], [10305, 10308], [10309, 10313], [10314, 10321], [10321, 10322]]}) 
answer: set([])
candidate Sentence: (0.20075096189975739, {u'tokens': [u'There', u'can', u'be', u'frequent', u'thunderstorms', u'in', u'the', u'summer', u'.'], u'lemmas': [u'there', u'can', u'be', u'frequent', u'thunderstorm', u'in', u'the', u'summer', u'.'], u'pos': [u'EX', u'MD', u'VB', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10837, 10842], [10843, 10846], [10847, 10849], [10850, 10858], [10859, 10872], [10873, 10875], [10876, 10879], [10880, 10886], [10886, 10887]]}) 
answer: set([u'cold'])
candidate Sentence: (0.14067712426185608, {u'tokens': [u'Although', u'the', u'majority', u'of', u'Uruguayans', u'do', u'not', u'actively', u'practice', u'a', u'religion', u',', u'they', u'are', u'nominally', u'church', u'members', u'in', u'the', u'Catholic', u',', u'Protestant', u'and', u'Jewish', u'communities', u'.'], u'lemmas': [u'although', u'the', u'majority', u'of', u'Uruguayans', u'do', u'not', u'actively', u'practice', u'a', u'religion', u',', u'they', u'be', u'nominally', u'church', u'member', u'in', u'the', u'Catholic', u',', u'Protestant', u'and', u'jewish', u'community', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NNPS', u'VBP', u'RB', u'RB', u'VB', u'DT', u'NN', u',', u'PRP', u'VBP', u'RB', u'NN', u'NNS', u'IN', u'DT', u'NNP', u',', u'NNP', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[16808, 16816], [16817, 16820], [16821, 16829], [16830, 16832], [16833, 16843], [16844, 16846], [16847, 16850], [16851, 16859], [16860, 16868], [16869, 16870], [16871, 16879], [16879, 16880], [16881, 16885], [16886, 16889], [16890, 16899], [16900, 16906], [16907, 16914], [16915, 16917], [16918, 16921], [16922, 16930], [16930, 16931], [16932, 16942], [16943, 16946], [16947, 16953], [16954, 16965], [16965, 16966]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.13688595592975616, {u'tokens': [u'To', u'the', u'southwest', u'is', u'the', u'R\xedo', u'de', u'la', u'Plata', u',', u'the', u'estuary', u'of', u'the', u'Uruguay', u'River', u',', u'which', u'forms', u'the', u'western', u'border', u',', u'and', u'the', u'Paran\xe1', u'River', u',', u'that', u'does', u'not', u'run', u'through', u'Uruguay', u'itself', u'.'], u'lemmas': [u'to', u'the', u'southwest', u'be', u'the', u'R\xedo', u'de', u'la', u'Plata', u',', u'the', u'estuary', u'of', u'the', u'Uruguay', u'River', u',', u'which', u'form', u'the', u'western', u'border', u',', u'and', u'the', u'Paran\xe1', u'River', u',', u'that', u'do', u'not', u'run', u'through', u'Uruguay', u'itself', u'.'], u'pos': [u'TO', u'DT', u'NN', u'VBZ', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'RB', u'VB', u'IN', u'NNP', u'PRP', u'.'], u'char_offsets': [[9690, 9692], [9693, 9696], [9697, 9706], [9707, 9709], [9710, 9713], [9714, 9717], [9718, 9720], [9721, 9723], [9724, 9729], [9729, 9730], [9731, 9734], [9735, 9742], [9743, 9745], [9746, 9749], [9750, 9757], [9758, 9763], [9763, 9764], [9765, 9770], [9771, 9776], [9777, 9780], [9781, 9788], [9789, 9795], [9795, 9796], [9797, 9800], [9801, 9804], [9805, 9811], [9812, 9817], [9817, 9818], [9819, 9823], [9824, 9828], [9829, 9832], [9833, 9836], [9837, 9844], [9845, 9852], [9853, 9859], [9859, 9860]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.12220378220081329, {u'tokens': [u'It', u'receives', u'the', u'periodic', u'influence', u'of', u'the', u'polar', u'air', u'in', u'winter', u',', u'and', u'tropical', u'air', u'from', u'Brazil', u'in', u'summer', u'.'], u'lemmas': [u'it', u'receive', u'the', u'periodic', u'influence', u'of', u'the', u'polar', u'air', u'in', u'winter', u',', u'and', u'tropical', u'air', u'from', u'Brazil', u'in', u'summer', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NN', u'.'], u'char_offsets': [[10435, 10437], [10438, 10446], [10447, 10450], [10451, 10459], [10460, 10469], [10470, 10472], [10473, 10476], [10477, 10482], [10483, 10486], [10487, 10489], [10490, 10496], [10496, 10497], [10498, 10501], [10502, 10510], [10511, 10514], [10515, 10519], [10520, 10526], [10527, 10529], [10530, 10536], [10536, 10537]]}) 
answer: set([u'cold'])
candidate Sentence: (0.058568805456161499, {u'tokens': [u'In', u'recent', u'years', u'Uruguay', u'has', u'shifted', u'some', u'of', u'its', u'energy', u'into', u'developing', u'the', u'commercial', u'use', u'of', u'IT', u'technologies', u'and', u'has', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'in', u'recent', u'year', u'Uruguay', u'have', u'shift', u'some', u'of', u'its', u'energy', u'into', u'develop', u'the', u'commercial', u'use', u'of', u'it', u'technology', u'and', u'have', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'NNP', u'VBZ', u'VBN', u'DT', u'IN', u'PRP$', u'NN', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'PRP', u'NNS', u'CC', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12078, 12080], [12081, 12087], [12088, 12093], [12094, 12101], [12102, 12105], [12106, 12113], [12114, 12118], [12119, 12121], [12122, 12125], [12126, 12132], [12133, 12137], [12138, 12148], [12149, 12152], [12153, 12163], [12164, 12167], [12168, 12170], [12171, 12173], [12174, 12186], [12187, 12190], [12191, 12194], [12195, 12201], [12202, 12205], [12206, 12211], [12212, 12220], [12221, 12223], [12224, 12232], [12233, 12235], [12236, 12241], [12242, 12249], [12249, 12250]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.0544096939265728, {u'tokens': [u'It', u'has', u'many', u'possible', u'meanings', u'.'], u'lemmas': [u'it', u'have', u'many', u'possible', u'meaning', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[1978, 1980], [1981, 1984], [1985, 1989], [1990, 1998], [1999, 2007], [2007, 2008]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.046841219067573547, {u'tokens': [u'Many', u'relocated', u'to', u'Montevideo', u',', u'which', u'had', u'a', u'larger', u'black', u'community', u',', u'seemed', u'lest', u'hostile', u'politically', u'than', u'Buenos', u'Aires', u',', u'and', u'had', u'a', u'more', u'favorable', u'climate', u'with', u'lower', u'humidity', u'.'], u'lemmas': [u'many', u'relocate', u'to', u'Montevideo', u',', u'which', u'have', u'a', u'larger', u'black', u'community', u',', u'seem', u'lest', u'hostile', u'politically', u'than', u'Buenos', u'Aires', u',', u'and', u'have', u'a', u'more', u'favorable', u'climate', u'with', u'lower', u'humidity', u'.'], u'pos': [u'JJ', u'VBN', u'TO', u'NNP', u',', u'WDT', u'VBD', u'DT', u'JJR', u'JJ', u'NN', u',', u'VBD', u'IN', u'JJ', u'RB', u'IN', u'NNP', u'NNP', u',', u'CC', u'VBD', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'JJR', u'NN', u'.'], u'char_offsets': [[3733, 3737], [3738, 3747], [3748, 3750], [3751, 3761], [3761, 3762], [3763, 3768], [3769, 3772], [3773, 3774], [3775, 3781], [3782, 3787], [3788, 3797], [3797, 3798], [3799, 3805], [3806, 3810], [3811, 3818], [3819, 3830], [3831, 3835], [3836, 3842], [3843, 3848], [3848, 3849], [3850, 3853], [3854, 3857], [3858, 3859], [3860, 3864], [3865, 3874], [3875, 3882], [3883, 3887], [3888, 3893], [3894, 3902], [3902, 3903]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.042865768074989319, {u'tokens': [u'For', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternated', u'in', u'power', u'.'], u'lemmas': [u'for', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternate', u'in', u'power', u'.'], u'pos': [u'IN', u'JJS', u'IN', u'NNP', u'POS', u'NN', u',', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'VBP', u'VBN', u'IN', u'NN', u'.'], u'char_offsets': [[6448, 6451], [6452, 6456], [6457, 6459], [6460, 6467], [6467, 6469], [6470, 6477], [6477, 6478], [6479, 6482], [6483, 6490], [6491, 6499], [6500, 6503], [6504, 6511], [6512, 6518], [6519, 6523], [6524, 6534], [6535, 6537], [6538, 6543], [6543, 6544]]}) 
answer: set([u'summer', u'cold'])
candidate Sentence: (0.039306811988353729, {u'tokens': [u'Out', u'of', u'the', u'World', u'Cup', u'winners', u',', u'the', u'nation', u'with', u'the', u'second', u'smallest', u'population', u'is', u'Argentina', u'-LRB-', u'winners', u'of', u'the', u'1978', u'and', u'1986', u'editions', u'-RRB-', u'who', u'currently', u'have', u'just', u'over', u'40,000,000', u'people', u'according', u'to', u'the', u'latest', u'estimate', u';', u'the', u'2002', u'census', u'has', u'Uruguay', u"'s", u'current', u'population', u'slightly', u'under', u'3,400,000', u'.'], u'lemmas': [u'out', u'of', u'the', u'World', u'Cup', u'winner', u',', u'the', u'nation', u'with', u'the', u'second', u'smallest', u'population', u'be', u'Argentina', u'-lrb-', u'winner', u'of', u'the', u'1978', u'and', u'1986', u'edition', u'-rrb-', u'who', u'currently', u'have', u'just', u'over', u'40,000,000', u'people', u'accord', u'to', u'the', u'latest', u'estimate', u';', u'the', u'2002', u'census', u'have', u'Uruguay', u"'s", u'current', u'population', u'slightly', u'under', u'3,400,000', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NNP', u'NNP', u'NNS', u',', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJS', u'NN', u'VBZ', u'NNP', u'-LRB-', u'NNS', u'IN', u'DT', u'CD', u'CC', u'CD', u'NNS', u'-RRB-', u'WP', u'RB', u'VBP', u'RB', u'IN', u'CD', u'NNS', u'VBG', u'TO', u'DT', u'JJS', u'NN', u':', u'DT', u'CD', u'NN', u'VBZ', u'NNP', u'POS', u'JJ', u'NN', u'RB', u'IN', u'CD', u'.'], u'char_offsets': [[20109, 20112], [20113, 20115], [20116, 20119], [20120, 20125], [20126, 20129], [20130, 20137], [20137, 20138], [20139, 20142], [20143, 20149], [20150, 20154], [20155, 20158], [20159, 20165], [20166, 20174], [20175, 20185], [20186, 20188], [20189, 20198], [20199, 20200], [20200, 20207], [20208, 20210], [20211, 20214], [20215, 20219], [20220, 20223], [20224, 20228], [20229, 20237], [20237, 20238], [20239, 20242], [20243, 20252], [20253, 20257], [20258, 20262], [20263, 20267], [20268, 20278], [20279, 20285], [20286, 20295], [20296, 20298], [20299, 20302], [20303, 20309], [20310, 20318], [20318, 20319], [20320, 20323], [20324, 20328], [20329, 20335], [20336, 20339], [20340, 20347], [20347, 20349], [20350, 20357], [20358, 20368], [20369, 20377], [20378, 20383], [20384, 20393], [20393, 20394]]}) 
answer: set([u'summer', u'cold'])

Does Uruguay have cold summers?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aaa1290>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param361] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1320>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool("Yes. It's located in the southeastern part")
E                +    where "Yes. It's located in the southeastern part" = <src.question_processing.Question_parser instance at 0x10aaa1320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39224755764007568, {u'tokens': [u',', u'Eastern', u'Republic', u'of', u'Uruguay', u'-RRB-', u'is', u'a', u'country', u'located', u'in', u'the', u'southeastern', u'part', u'of', u'South', u'America', u'.'], u'lemmas': [u',', u'Eastern', u'Republic', u'of', u'Uruguay', u'-rrb-', u'be', u'a', u'country', u'located', u'in', u'the', u'southeastern', u'part', u'of', u'South', u'America', u'.'], u'pos': [u',', u'NNP', u'NNP', u'IN', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[41, 42], [43, 50], [51, 59], [60, 62], [64, 71], [71, 72], [73, 75], [76, 77], [78, 85], [86, 93], [94, 96], [97, 100], [101, 113], [114, 118], [119, 121], [122, 127], [128, 135], [135, 136]]}) 
answer: set([u'locate'])
candidate Sentence: (0.31452837586402893, {u'tokens': [u'About.com', u':', u'Go', u'South', u'America', u',', u'based', u'on', u'information', u'from', u'the', u'CIA', u'World', u'Factbook', u'.'], u'lemmas': [u'About.com', u':', u'go', u'South', u'America', u',', u'base', u'on', u'information', u'from', u'the', u'CIA', u'World', u'Factbook', u'.'], u'pos': [u'NNP', u':', u'VB', u'NNP', u'NNP', u',', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[11998, 12007], [12007, 12008], [12009, 12011], [12012, 12017], [12018, 12025], [12025, 12026], [12027, 12032], [12033, 12035], [12036, 12047], [12048, 12052], [12053, 12056], [12057, 12060], [12061, 12066], [12067, 12075], [12075, 12076]]}) 
answer: set([u'locate'])
candidate Sentence: (0.26614201068878174, {u'tokens': [u'It', u'is', u'the', u'second', u'smallest', u'independent', u'country', u'in', u'South', u'America', u',', u'larger', u'only', u'than', u'Suriname', u'and', u'the', u'French', u'overseas', u'department', u'of', u'French', u'Guiana', u'.'], u'lemmas': [u'it', u'be', u'the', u'second', u'smallest', u'independent', u'country', u'in', u'South', u'America', u',', u'larger', u'only', u'than', u'Suriname', u'and', u'the', u'french', u'overseas', u'department', u'of', u'french', u'Guiana', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'JJR', u'RB', u'IN', u'NNP', u'CC', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[457, 459], [460, 462], [463, 466], [467, 473], [474, 482], [483, 494], [495, 502], [503, 505], [506, 511], [512, 519], [519, 520], [521, 527], [528, 532], [533, 537], [538, 546], [547, 550], [551, 554], [555, 561], [562, 570], [571, 581], [582, 584], [585, 591], [592, 598], [598, 599]]}) 
answer: set([u'locate'])
candidate Sentence: (0.18363484740257263, {u'tokens': [u'Despite', u'the', u'severity', u'of', u'the', u'trade', u'shocks', u',', u'Uruguay', u"'s", u'financial', u'indicators', u'remained', u'stabler', u'than', u'those', u'of', u'its', u'neighbours', u',', u'a', u'reflection', u'of', u'its', u'solid', u'reputation', u'among', u'investors', u'and', u'its', u'investment-grade', u'sovereign', u'bond', u'rating', u'--', u'one', u'of', u'only', u'two', u'in', u'South', u'America', u'.'], u'lemmas': [u'despite', u'the', u'severity', u'of', u'the', u'trade', u'shock', u',', u'Uruguay', u"'s", u'financial', u'indicator', u'remain', u'stabler', u'than', u'those', u'of', u'its', u'neighbour', u',', u'a', u'reflection', u'of', u'its', u'solid', u'reputation', u'among', u'investor', u'and', u'its', u'investment-grade', u'sovereign', u'bond', u'rating', u'--', u'one', u'of', u'only', u'two', u'in', u'South', u'America', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNS', u',', u'NNP', u'POS', u'JJ', u'NNS', u'VBD', u'JJR', u'IN', u'DT', u'IN', u'PRP$', u'NNS', u',', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'NNS', u'CC', u'PRP$', u'JJ', u'JJ', u'NN', u'NN', u':', u'CD', u'IN', u'RB', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[11741, 11748], [11749, 11752], [11753, 11761], [11762, 11764], [11765, 11768], [11769, 11774], [11775, 11781], [11781, 11782], [11783, 11790], [11790, 11792], [11793, 11802], [11803, 11813], [11814, 11822], [11823, 11830], [11831, 11835], [11836, 11841], [11842, 11844], [11845, 11848], [11849, 11859], [11859, 11860], [11861, 11862], [11863, 11873], [11874, 11876], [11877, 11880], [11881, 11886], [11887, 11897], [11898, 11903], [11904, 11913], [11914, 11917], [11918, 11921], [11922, 11938], [11939, 11948], [11949, 11953], [11954, 11960], [11961, 11962], [11963, 11966], [11967, 11969], [11970, 11974], [11975, 11978], [11979, 11981], [11982, 11987], [11988, 11995], [11995, 11996]]}) 
answer: set([u'locate'])
candidate Sentence: (0.18262018263339996, {u'tokens': [u'It', u'is', u'widely', u'considered', u'the', u'most', u'secular', u'nation', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'it', u'be', u'widely', u'consider', u'the', u'most', u'secular', u'nation', u'in', u'Latin', u'America', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'VBN', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[16967, 16969], [16970, 16972], [16973, 16979], [16980, 16990], [16991, 16994], [16995, 16999], [17000, 17007], [17008, 17014], [17015, 17017], [17018, 17023], [17024, 17031], [17031, 17032]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.15641658008098602, {u'tokens': [u'According', u'to', u'Transparency', u'International', u',', u'Uruguay', u'is', u'the', u'second', u'least', u'corrupt', u'country', u'in', u'Latin', u'America', u'-LRB-', u'after', u'Chile', u'-RRB-', u',', u'Transparency.org', u'.'], u'lemmas': [u'accord', u'to', u'Transparency', u'International', u',', u'Uruguay', u'be', u'the', u'second', u'least', u'corrupt', u'country', u'in', u'Latin', u'America', u'-lrb-', u'after', u'Chile', u'-rrb-', u',', u'transparency.org', u'.'], u'pos': [u'VBG', u'TO', u'NNP', u'NNP', u',', u'NNP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'IN', u'NNP', u'-RRB-', u',', u'NN', u'.'], u'char_offsets': [[1268, 1277], [1278, 1280], [1281, 1293], [1294, 1307], [1307, 1308], [1309, 1316], [1317, 1319], [1320, 1323], [1324, 1330], [1331, 1336], [1337, 1344], [1345, 1352], [1353, 1355], [1356, 1361], [1362, 1369], [1370, 1371], [1371, 1376], [1377, 1382], [1382, 1383], [1383, 1384], [1386, 1402], [1402, 1403]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.13768717646598816, {u'tokens': [u'At', u'176,214', u'square', u'kilometres', u'-LRB-', u'68,036', u'square', u'miles', u'-RRB-', u'of', u'continental', u'land', u'and', u'142,199', u'square', u'kilometres', u'-LRB-', u'54,903', u'sq', u'mi', u'-RRB-', u'of', u'jurisdictional', u'waters', u'and', u'small', u'river', u'islands', u',', u'Instituto', u'Nacional', u'Estadistica', u'Uruguay', u'is', u'the', u'second', u'smallest', u'sovereign', u'nation', u'in', u'South', u'America', u'-LRB-', u'after', u'Suriname', u'-RRB-', u'and', u'the', u'third', u'smallest', u'territory', u'-LRB-', u'French', u'Guiana', u'is', u'the', u'smallest', u'-RRB-', u'.'], u'lemmas': [u'at', u'176,214', u'square', u'kilometre', u'-lrb-', u'68,036', u'square', u'mile', u'-rrb-', u'of', u'continental', u'land', u'and', u'142,199', u'square', u'kilometre', u'-lrb-', u'54,903', u'sq', u'mi', u'-rrb-', u'of', u'jurisdictional', u'water', u'and', u'small', u'river', u'island', u',', u'Instituto', u'Nacional', u'Estadistica', u'Uruguay', u'be', u'the', u'second', u'smallest', u'sovereign', u'nation', u'in', u'South', u'America', u'-lrb-', u'after', u'Suriname', u'-rrb-', u'and', u'the', u'third', u'smallest', u'territory', u'-lrb-', u'french', u'Guiana', u'be', u'the', u'smallest', u'-rrb-', u'.'], u'pos': [u'IN', u'CD', u'JJ', u'NNS', u'-LRB-', u'CD', u'JJ', u'NNS', u'-RRB-', u'IN', u'JJ', u'NN', u'CC', u'CD', u'JJ', u'NNS', u'-LRB-', u'CD', u'NN', u'NN', u'-RRB-', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'IN', u'NNP', u'-RRB-', u'CC', u'DT', u'JJ', u'JJS', u'NN', u'-LRB-', u'JJ', u'NNP', u'VBZ', u'DT', u'JJS', u'-RRB-', u'.'], u'char_offsets': [[8830, 8832], [8833, 8840], [8841, 8847], [8848, 8858], [8859, 8860], [8860, 8866], [8867, 8873], [8874, 8879], [8879, 8880], [8881, 8883], [8884, 8895], [8896, 8900], [8901, 8904], [8905, 8912], [8913, 8919], [8920, 8930], [8931, 8932], [8932, 8938], [8939, 8941], [8942, 8944], [8944, 8945], [8946, 8948], [8949, 8963], [8964, 8970], [8971, 8974], [8975, 8980], [8981, 8986], [8987, 8994], [8994, 8995], [8997, 9006], [9007, 9015], [9016, 9027], [9029, 9036], [9037, 9039], [9040, 9043], [9044, 9050], [9051, 9059], [9060, 9069], [9070, 9076], [9077, 9079], [9080, 9085], [9086, 9093], [9094, 9095], [9095, 9100], [9101, 9109], [9109, 9110], [9111, 9114], [9115, 9118], [9119, 9124], [9125, 9133], [9134, 9143], [9144, 9145], [9145, 9151], [9152, 9158], [9159, 9161], [9162, 9165], [9166, 9174], [9174, 9175], [9175, 9176]]}) 
answer: set([u'locate'])
candidate Sentence: (0.13030378520488739, {u'tokens': [u'It', u'is', u'bordered', u'by', u'Brazil', u'to', u'the', u'north', u',', u'by', u'Argentina', u'across', u'the', u'bank', u'of', u'both', u'the', u'Uruguay', u'River', u'to', u'the', u'west', u'and', u'the', u'estuary', u'of', u'R\xedo', u'de', u'la', u'Plata', u'to', u'the', u'southwest', u',', u'and', u'the', u'South', u'Atlantic', u'Ocean', u'to', u'the', u'southeast', u'.'], u'lemmas': [u'it', u'be', u'border', u'by', u'Brazil', u'to', u'the', u'north', u',', u'by', u'Argentina', u'across', u'the', u'bank', u'of', u'both', u'the', u'Uruguay', u'River', u'to', u'the', u'west', u'and', u'the', u'estuary', u'of', u'R\xedo', u'de', u'la', u'plata', u'to', u'the', u'southwest', u',', u'and', u'the', u'South', u'Atlantic', u'Ocean', u'to', u'the', u'southeast', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NNP', u'TO', u'DT', u'NN', u',', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'CC', u'DT', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'CC', u'DT', u'NN', u'IN', u'NNP', u'FW', u'FW', u'FW', u'TO', u'DT', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[251, 253], [254, 256], [257, 265], [266, 268], [269, 275], [276, 278], [279, 282], [283, 288], [288, 289], [290, 292], [293, 302], [303, 309], [310, 313], [314, 318], [319, 321], [322, 326], [327, 330], [331, 338], [339, 344], [345, 347], [348, 351], [352, 356], [357, 360], [361, 364], [365, 372], [373, 375], [376, 379], [380, 382], [383, 385], [386, 391], [392, 394], [395, 398], [399, 408], [408, 409], [410, 413], [414, 417], [418, 423], [424, 432], [433, 438], [439, 441], [442, 445], [446, 455], [455, 456]]}) 
answer: set([u'locate', u'america'])
candidate Sentence: (0.1302722692489624, {u'tokens': [u'In', u'recent', u'years', u'Uruguay', u'has', u'shifted', u'some', u'of', u'its', u'energy', u'into', u'developing', u'the', u'commercial', u'use', u'of', u'IT', u'technologies', u'and', u'has', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'in', u'recent', u'year', u'Uruguay', u'have', u'shift', u'some', u'of', u'its', u'energy', u'into', u'develop', u'the', u'commercial', u'use', u'of', u'it', u'technology', u'and', u'have', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'NNP', u'VBZ', u'VBN', u'DT', u'IN', u'PRP$', u'NN', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'PRP', u'NNS', u'CC', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12078, 12080], [12081, 12087], [12088, 12093], [12094, 12101], [12102, 12105], [12106, 12113], [12114, 12118], [12119, 12121], [12122, 12125], [12126, 12132], [12133, 12137], [12138, 12148], [12149, 12152], [12153, 12163], [12164, 12167], [12168, 12170], [12171, 12173], [12174, 12186], [12187, 12190], [12191, 12194], [12195, 12201], [12202, 12205], [12206, 12211], [12212, 12220], [12221, 12223], [12224, 12232], [12233, 12235], [12236, 12241], [12242, 12249], [12249, 12250]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.11748060584068298, {u'tokens': [u'Diego', u'Stewart', u',', u'Building', u'out', u':', u'Uruguay', u'exports', u'architectural', u'services', u'to', u'India', u'and', u'Latin', u'America', u',', u"''", u'in', u'Latin', u'Trade', u',', u'May', u'2005', u'.'], u'lemmas': [u'diego', u'Stewart', u',', u'Building', u'out', u':', u'Uruguay', u'export', u'architectural', u'service', u'to', u'India', u'and', u'Latin', u'America', u',', u"''", u'in', u'Latin', u'Trade', u',', u'May', u'2005', u'.'], u'pos': [u'JJ', u'NNP', u',', u'NNP', u'IN', u':', u'NNP', u'NNS', u'JJ', u'NNS', u'TO', u'NNP', u'CC', u'NNP', u'NNP', u',', u"''", u'IN', u'NNP', u'NNP', u',', u'NNP', u'CD', u'.'], u'char_offsets': [[12251, 12256], [12257, 12264], [12264, 12265], [12267, 12275], [12276, 12279], [12279, 12280], [12281, 12288], [12289, 12296], [12297, 12310], [12311, 12319], [12320, 12322], [12323, 12328], [12329, 12332], [12333, 12338], [12339, 12346], [12346, 12347], [12347, 12348], [12349, 12351], [12352, 12357], [12358, 12363], [12363, 12364], [12365, 12368], [12369, 12373], [12373, 12374]]}) 
answer: set([u'locate', u'south'])

Is Uruguay located in South America?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes. It's located in the southeastern part
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool("Yes. It's located in the southeastern part")
 +    where "Yes. It's located in the southeastern part" = <src.question_processing.Question_parser instance at 0x10aaa1320>.answer
_____________________________ test_yesno[param362] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa13b0>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aaa13b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39224755764007568, {u'tokens': [u',', u'Eastern', u'Republic', u'of', u'Uruguay', u'-RRB-', u'is', u'a', u'country', u'located', u'in', u'the', u'southeastern', u'part', u'of', u'South', u'America', u'.'], u'lemmas': [u',', u'Eastern', u'Republic', u'of', u'Uruguay', u'-rrb-', u'be', u'a', u'country', u'located', u'in', u'the', u'southeastern', u'part', u'of', u'South', u'America', u'.'], u'pos': [u',', u'NNP', u'NNP', u'IN', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[41, 42], [43, 50], [51, 59], [60, 62], [64, 71], [71, 72], [73, 75], [76, 77], [78, 85], [86, 93], [94, 96], [97, 100], [101, 113], [114, 118], [119, 121], [122, 127], [128, 135], [135, 136]]}) 
answer: set([u'locate'])
candidate Sentence: (0.31452837586402893, {u'tokens': [u'About.com', u':', u'Go', u'South', u'America', u',', u'based', u'on', u'information', u'from', u'the', u'CIA', u'World', u'Factbook', u'.'], u'lemmas': [u'About.com', u':', u'go', u'South', u'America', u',', u'base', u'on', u'information', u'from', u'the', u'CIA', u'World', u'Factbook', u'.'], u'pos': [u'NNP', u':', u'VB', u'NNP', u'NNP', u',', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[11998, 12007], [12007, 12008], [12009, 12011], [12012, 12017], [12018, 12025], [12025, 12026], [12027, 12032], [12033, 12035], [12036, 12047], [12048, 12052], [12053, 12056], [12057, 12060], [12061, 12066], [12067, 12075], [12075, 12076]]}) 
answer: set([u'locate'])
candidate Sentence: (0.26614201068878174, {u'tokens': [u'It', u'is', u'the', u'second', u'smallest', u'independent', u'country', u'in', u'South', u'America', u',', u'larger', u'only', u'than', u'Suriname', u'and', u'the', u'French', u'overseas', u'department', u'of', u'French', u'Guiana', u'.'], u'lemmas': [u'it', u'be', u'the', u'second', u'smallest', u'independent', u'country', u'in', u'South', u'America', u',', u'larger', u'only', u'than', u'Suriname', u'and', u'the', u'french', u'overseas', u'department', u'of', u'french', u'Guiana', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'JJR', u'RB', u'IN', u'NNP', u'CC', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[457, 459], [460, 462], [463, 466], [467, 473], [474, 482], [483, 494], [495, 502], [503, 505], [506, 511], [512, 519], [519, 520], [521, 527], [528, 532], [533, 537], [538, 546], [547, 550], [551, 554], [555, 561], [562, 570], [571, 581], [582, 584], [585, 591], [592, 598], [598, 599]]}) 
answer: set([u'locate'])
candidate Sentence: (0.18363484740257263, {u'tokens': [u'Despite', u'the', u'severity', u'of', u'the', u'trade', u'shocks', u',', u'Uruguay', u"'s", u'financial', u'indicators', u'remained', u'stabler', u'than', u'those', u'of', u'its', u'neighbours', u',', u'a', u'reflection', u'of', u'its', u'solid', u'reputation', u'among', u'investors', u'and', u'its', u'investment-grade', u'sovereign', u'bond', u'rating', u'--', u'one', u'of', u'only', u'two', u'in', u'South', u'America', u'.'], u'lemmas': [u'despite', u'the', u'severity', u'of', u'the', u'trade', u'shock', u',', u'Uruguay', u"'s", u'financial', u'indicator', u'remain', u'stabler', u'than', u'those', u'of', u'its', u'neighbour', u',', u'a', u'reflection', u'of', u'its', u'solid', u'reputation', u'among', u'investor', u'and', u'its', u'investment-grade', u'sovereign', u'bond', u'rating', u'--', u'one', u'of', u'only', u'two', u'in', u'South', u'America', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNS', u',', u'NNP', u'POS', u'JJ', u'NNS', u'VBD', u'JJR', u'IN', u'DT', u'IN', u'PRP$', u'NNS', u',', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'NNS', u'CC', u'PRP$', u'JJ', u'JJ', u'NN', u'NN', u':', u'CD', u'IN', u'RB', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[11741, 11748], [11749, 11752], [11753, 11761], [11762, 11764], [11765, 11768], [11769, 11774], [11775, 11781], [11781, 11782], [11783, 11790], [11790, 11792], [11793, 11802], [11803, 11813], [11814, 11822], [11823, 11830], [11831, 11835], [11836, 11841], [11842, 11844], [11845, 11848], [11849, 11859], [11859, 11860], [11861, 11862], [11863, 11873], [11874, 11876], [11877, 11880], [11881, 11886], [11887, 11897], [11898, 11903], [11904, 11913], [11914, 11917], [11918, 11921], [11922, 11938], [11939, 11948], [11949, 11953], [11954, 11960], [11961, 11962], [11963, 11966], [11967, 11969], [11970, 11974], [11975, 11978], [11979, 11981], [11982, 11987], [11988, 11995], [11995, 11996]]}) 
answer: set([u'locate'])
candidate Sentence: (0.18262018263339996, {u'tokens': [u'It', u'is', u'widely', u'considered', u'the', u'most', u'secular', u'nation', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'it', u'be', u'widely', u'consider', u'the', u'most', u'secular', u'nation', u'in', u'Latin', u'America', u'.'], u'pos': [u'PRP', u'VBZ', u'RB', u'VBN', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[16967, 16969], [16970, 16972], [16973, 16979], [16980, 16990], [16991, 16994], [16995, 16999], [17000, 17007], [17008, 17014], [17015, 17017], [17018, 17023], [17024, 17031], [17031, 17032]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.15641658008098602, {u'tokens': [u'According', u'to', u'Transparency', u'International', u',', u'Uruguay', u'is', u'the', u'second', u'least', u'corrupt', u'country', u'in', u'Latin', u'America', u'-LRB-', u'after', u'Chile', u'-RRB-', u',', u'Transparency.org', u'.'], u'lemmas': [u'accord', u'to', u'Transparency', u'International', u',', u'Uruguay', u'be', u'the', u'second', u'least', u'corrupt', u'country', u'in', u'Latin', u'America', u'-lrb-', u'after', u'Chile', u'-rrb-', u',', u'transparency.org', u'.'], u'pos': [u'VBG', u'TO', u'NNP', u'NNP', u',', u'NNP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'IN', u'NNP', u'-RRB-', u',', u'NN', u'.'], u'char_offsets': [[1268, 1277], [1278, 1280], [1281, 1293], [1294, 1307], [1307, 1308], [1309, 1316], [1317, 1319], [1320, 1323], [1324, 1330], [1331, 1336], [1337, 1344], [1345, 1352], [1353, 1355], [1356, 1361], [1362, 1369], [1370, 1371], [1371, 1376], [1377, 1382], [1382, 1383], [1383, 1384], [1386, 1402], [1402, 1403]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.13768717646598816, {u'tokens': [u'At', u'176,214', u'square', u'kilometres', u'-LRB-', u'68,036', u'square', u'miles', u'-RRB-', u'of', u'continental', u'land', u'and', u'142,199', u'square', u'kilometres', u'-LRB-', u'54,903', u'sq', u'mi', u'-RRB-', u'of', u'jurisdictional', u'waters', u'and', u'small', u'river', u'islands', u',', u'Instituto', u'Nacional', u'Estadistica', u'Uruguay', u'is', u'the', u'second', u'smallest', u'sovereign', u'nation', u'in', u'South', u'America', u'-LRB-', u'after', u'Suriname', u'-RRB-', u'and', u'the', u'third', u'smallest', u'territory', u'-LRB-', u'French', u'Guiana', u'is', u'the', u'smallest', u'-RRB-', u'.'], u'lemmas': [u'at', u'176,214', u'square', u'kilometre', u'-lrb-', u'68,036', u'square', u'mile', u'-rrb-', u'of', u'continental', u'land', u'and', u'142,199', u'square', u'kilometre', u'-lrb-', u'54,903', u'sq', u'mi', u'-rrb-', u'of', u'jurisdictional', u'water', u'and', u'small', u'river', u'island', u',', u'Instituto', u'Nacional', u'Estadistica', u'Uruguay', u'be', u'the', u'second', u'smallest', u'sovereign', u'nation', u'in', u'South', u'America', u'-lrb-', u'after', u'Suriname', u'-rrb-', u'and', u'the', u'third', u'smallest', u'territory', u'-lrb-', u'french', u'Guiana', u'be', u'the', u'smallest', u'-rrb-', u'.'], u'pos': [u'IN', u'CD', u'JJ', u'NNS', u'-LRB-', u'CD', u'JJ', u'NNS', u'-RRB-', u'IN', u'JJ', u'NN', u'CC', u'CD', u'JJ', u'NNS', u'-LRB-', u'CD', u'NN', u'NN', u'-RRB-', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'IN', u'NNP', u'-RRB-', u'CC', u'DT', u'JJ', u'JJS', u'NN', u'-LRB-', u'JJ', u'NNP', u'VBZ', u'DT', u'JJS', u'-RRB-', u'.'], u'char_offsets': [[8830, 8832], [8833, 8840], [8841, 8847], [8848, 8858], [8859, 8860], [8860, 8866], [8867, 8873], [8874, 8879], [8879, 8880], [8881, 8883], [8884, 8895], [8896, 8900], [8901, 8904], [8905, 8912], [8913, 8919], [8920, 8930], [8931, 8932], [8932, 8938], [8939, 8941], [8942, 8944], [8944, 8945], [8946, 8948], [8949, 8963], [8964, 8970], [8971, 8974], [8975, 8980], [8981, 8986], [8987, 8994], [8994, 8995], [8997, 9006], [9007, 9015], [9016, 9027], [9029, 9036], [9037, 9039], [9040, 9043], [9044, 9050], [9051, 9059], [9060, 9069], [9070, 9076], [9077, 9079], [9080, 9085], [9086, 9093], [9094, 9095], [9095, 9100], [9101, 9109], [9109, 9110], [9111, 9114], [9115, 9118], [9119, 9124], [9125, 9133], [9134, 9143], [9144, 9145], [9145, 9151], [9152, 9158], [9159, 9161], [9162, 9165], [9166, 9174], [9174, 9175], [9175, 9176]]}) 
answer: set([u'locate'])
candidate Sentence: (0.13030378520488739, {u'tokens': [u'It', u'is', u'bordered', u'by', u'Brazil', u'to', u'the', u'north', u',', u'by', u'Argentina', u'across', u'the', u'bank', u'of', u'both', u'the', u'Uruguay', u'River', u'to', u'the', u'west', u'and', u'the', u'estuary', u'of', u'R\xedo', u'de', u'la', u'Plata', u'to', u'the', u'southwest', u',', u'and', u'the', u'South', u'Atlantic', u'Ocean', u'to', u'the', u'southeast', u'.'], u'lemmas': [u'it', u'be', u'border', u'by', u'Brazil', u'to', u'the', u'north', u',', u'by', u'Argentina', u'across', u'the', u'bank', u'of', u'both', u'the', u'Uruguay', u'River', u'to', u'the', u'west', u'and', u'the', u'estuary', u'of', u'R\xedo', u'de', u'la', u'plata', u'to', u'the', u'southwest', u',', u'and', u'the', u'South', u'Atlantic', u'Ocean', u'to', u'the', u'southeast', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NNP', u'TO', u'DT', u'NN', u',', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'CC', u'DT', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'CC', u'DT', u'NN', u'IN', u'NNP', u'FW', u'FW', u'FW', u'TO', u'DT', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[251, 253], [254, 256], [257, 265], [266, 268], [269, 275], [276, 278], [279, 282], [283, 288], [288, 289], [290, 292], [293, 302], [303, 309], [310, 313], [314, 318], [319, 321], [322, 326], [327, 330], [331, 338], [339, 344], [345, 347], [348, 351], [352, 356], [357, 360], [361, 364], [365, 372], [373, 375], [376, 379], [380, 382], [383, 385], [386, 391], [392, 394], [395, 398], [399, 408], [408, 409], [410, 413], [414, 417], [418, 423], [424, 432], [433, 438], [439, 441], [442, 445], [446, 455], [455, 456]]}) 
answer: set([u'locate', u'america'])
candidate Sentence: (0.1302722692489624, {u'tokens': [u'In', u'recent', u'years', u'Uruguay', u'has', u'shifted', u'some', u'of', u'its', u'energy', u'into', u'developing', u'the', u'commercial', u'use', u'of', u'IT', u'technologies', u'and', u'has', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'lemmas': [u'in', u'recent', u'year', u'Uruguay', u'have', u'shift', u'some', u'of', u'its', u'energy', u'into', u'develop', u'the', u'commercial', u'use', u'of', u'it', u'technology', u'and', u'have', u'become', u'the', u'first', u'exporter', u'of', u'software', u'in', u'Latin', u'America', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'NNP', u'VBZ', u'VBN', u'DT', u'IN', u'PRP$', u'NN', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'PRP', u'NNS', u'CC', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[12078, 12080], [12081, 12087], [12088, 12093], [12094, 12101], [12102, 12105], [12106, 12113], [12114, 12118], [12119, 12121], [12122, 12125], [12126, 12132], [12133, 12137], [12138, 12148], [12149, 12152], [12153, 12163], [12164, 12167], [12168, 12170], [12171, 12173], [12174, 12186], [12187, 12190], [12191, 12194], [12195, 12201], [12202, 12205], [12206, 12211], [12212, 12220], [12221, 12223], [12224, 12232], [12233, 12235], [12236, 12241], [12242, 12249], [12249, 12250]]}) 
answer: set([u'locate', u'south'])
candidate Sentence: (0.11748060584068298, {u'tokens': [u'Diego', u'Stewart', u',', u'Building', u'out', u':', u'Uruguay', u'exports', u'architectural', u'services', u'to', u'India', u'and', u'Latin', u'America', u',', u"''", u'in', u'Latin', u'Trade', u',', u'May', u'2005', u'.'], u'lemmas': [u'diego', u'Stewart', u',', u'Building', u'out', u':', u'Uruguay', u'export', u'architectural', u'service', u'to', u'India', u'and', u'Latin', u'America', u',', u"''", u'in', u'Latin', u'Trade', u',', u'May', u'2005', u'.'], u'pos': [u'JJ', u'NNP', u',', u'NNP', u'IN', u':', u'NNP', u'NNS', u'JJ', u'NNS', u'TO', u'NNP', u'CC', u'NNP', u'NNP', u',', u"''", u'IN', u'NNP', u'NNP', u',', u'NNP', u'CD', u'.'], u'char_offsets': [[12251, 12256], [12257, 12264], [12264, 12265], [12267, 12275], [12276, 12279], [12279, 12280], [12281, 12288], [12289, 12296], [12297, 12310], [12311, 12319], [12320, 12322], [12323, 12328], [12329, 12332], [12333, 12338], [12339, 12346], [12346, 12347], [12347, 12348], [12349, 12351], [12352, 12357], [12358, 12363], [12363, 12364], [12365, 12368], [12369, 12373], [12373, 12374]]}) 
answer: set([u'locate', u'south'])

Is Uruguay located in South America?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x10aaa13b0>.answer
_____________________________ test_yesno[param371] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa18c0>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa18c0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.6697697639465332, {u'tokens': [u'The', u'coolest', u'month', u'is', u'June', u',', u'while', u'the', u'warmest', u'is', u'January', u'.'], u'lemmas': [u'the', u'coolest', u'month', u'be', u'June', u',', u'while', u'the', u'warmest', u'be', u'January', u'.'], u'pos': [u'DT', u'JJS', u'NN', u'VBZ', u'NNP', u',', u'IN', u'DT', u'JJS', u'VBZ', u'NNP', u'.'], u'char_offsets': [[10665, 10668], [10669, 10676], [10677, 10682], [10683, 10685], [10686, 10690], [10690, 10691], [10692, 10697], [10698, 10701], [10702, 10709], [10710, 10712], [10713, 10720], [10720, 10721]]}) 
answer: set([])
candidate Sentence: (0.1640600860118866, {u'tokens': [u'The', u'newly', u'elected', u'Frente', u'Amplio', u'government', u',', u'while', u'pledging', u'to', u'continue', u'payments', u'on', u'Uruguay', u"'s", u'external', u'debt', u',', u'Michael', u'Fox', u',', u'Uruguay', u"'s", u'Frente', u'Amplio', u':', u'From', u'Revolution', u'to', u'Dilution', u',', u'June', u'19', u',', u'2007', u'.'], u'lemmas': [u'the', u'newly', u'elect', u'Frente', u'Amplio', u'government', u',', u'while', u'pledge', u'to', u'continue', u'payment', u'on', u'Uruguay', u"'s", u'external', u'debt', u',', u'Michael', u'Fox', u',', u'Uruguay', u"'s", u'Frente', u'Amplio', u':', u'from', u'revolution', u'to', u'Dilution', u',', u'June', u'19', u',', u'2007', u'.'], u'pos': [u'DT', u'RB', u'VBN', u'NNP', u'NNP', u'NN', u',', u'IN', u'VBG', u'TO', u'VB', u'NNS', u'IN', u'NNP', u'POS', u'JJ', u'NN', u',', u'NNP', u'NNP', u',', u'NNP', u'POS', u'NNP', u'NNP', u':', u'IN', u'NN', u'TO', u'NNP', u',', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[12917, 12920], [12921, 12926], [12927, 12934], [12935, 12941], [12942, 12948], [12949, 12959], [12959, 12960], [12961, 12966], [12967, 12975], [12976, 12978], [12979, 12987], [12988, 12996], [12997, 12999], [13000, 13007], [13007, 13009], [13010, 13018], [13019, 13023], [13023, 13024], [13025, 13032], [13033, 13036], [13036, 13037], [13039, 13046], [13046, 13048], [13049, 13055], [13056, 13062], [13062, 13063], [13064, 13068], [13069, 13079], [13080, 13082], [13083, 13091], [13091, 13092], [13093, 13097], [13098, 13100], [13100, 13101], [13102, 13106], [13106, 13107]]}) 
answer: set([u'warmest', u'month'])
candidate Sentence: (0.14858543872833252, {u'tokens': [u'The', u'rainfall', u'is', u'equally', u'distributed', u'throughout', u'the', u'year', u',', u'but', u'tends', u'to', u'be', u'a', u'bit', u'more', u'frequent', u'in', u'the', u'autumn', u'months', u'.'], u'lemmas': [u'the', u'rainfall', u'be', u'equally', u'distribute', u'throughout', u'the', u'year', u',', u'but', u'tend', u'to', u'be', u'a', u'bit', u'more', u'frequent', u'in', u'the', u'autumn', u'month', u'.'], u'pos': [u'DT', u'NNS', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'TO', u'VB', u'DT', u'NN', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[10722, 10725], [10726, 10734], [10735, 10737], [10738, 10745], [10746, 10757], [10758, 10768], [10769, 10772], [10773, 10777], [10777, 10778], [10779, 10782], [10783, 10788], [10789, 10791], [10792, 10794], [10795, 10796], [10797, 10800], [10801, 10805], [10806, 10814], [10815, 10817], [10818, 10821], [10822, 10828], [10829, 10835], [10835, 10836]]}) 
answer: set([u'warmest', u'june'])
candidate Sentence: (0.07890705019235611, {u'tokens': [u'/', u'ref', u'>', u'Spanish', u'colonization', u'increased', u'as', u'Spain', u'sought', u'to', u'limit', u'Portugal', u"'s", u'expansion', u'of', u'Brazil', u"'s", u'frontiers', u'.'], u'lemmas': [u'/', u'ref', u'>', u'spanish', u'colonization', u'increase', u'as', u'Spain', u'seek', u'to', u'limit', u'Portugal', u"'s", u'expansion', u'of', u'Brazil', u"'s", u'frontier', u'.'], u'pos': [u':', u'NN', u'JJR', u'JJ', u'NN', u'VBD', u'IN', u'NNP', u'VBD', u'TO', u'VB', u'NNP', u'POS', u'NN', u'IN', u'NNP', u'POS', u'NNS', u'.'], u'char_offsets': [[3429, 3430], [3430, 3433], [3433, 3434], [3435, 3442], [3443, 3455], [3456, 3465], [3466, 3468], [3469, 3474], [3475, 3481], [3482, 3484], [3485, 3490], [3491, 3499], [3499, 3501], [3502, 3511], [3512, 3514], [3515, 3521], [3521, 3523], [3524, 3533], [3533, 3534]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.067311219871044159, {u'tokens': [u'Uruguay', u"'s", u'capital', u',', u'Montevideo', u',', u'was', u'founded', u'by', u'the', u'Spanish', u'in', u'the', u'early', u'18th', u'century', u'as', u'a', u'military', u'stronghold', u';', u'its', u'natural', u'harbor', u'soon', u'developed', u'into', u'a', u'commercial', u'center', u'competing', u'with', u'Argentina', u"'s", u'capital', u',', u'Buenos', u'Aires', u'.'], u'lemmas': [u'Uruguay', u"'s", u'capital', u',', u'Montevideo', u',', u'be', u'found', u'by', u'the', u'spanish', u'in', u'the', u'early', u'18th', u'century', u'as', u'a', u'military', u'stronghold', u';', u'its', u'natural', u'harbor', u'soon', u'develop', u'into', u'a', u'commercial', u'center', u'compete', u'with', u'Argentina', u"'s", u'capital', u',', u'Buenos', u'Aires', u'.'], u'pos': [u'NNP', u'POS', u'NN', u',', u'NNP', u',', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u':', u'PRP$', u'JJ', u'NN', u'RB', u'VBD', u'IN', u'DT', u'JJ', u'NN', u'VBG', u'IN', u'NNP', u'POS', u'NN', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[4188, 4195], [4195, 4197], [4198, 4205], [4205, 4206], [4207, 4217], [4217, 4218], [4219, 4222], [4223, 4230], [4231, 4233], [4234, 4237], [4238, 4245], [4246, 4248], [4249, 4252], [4253, 4258], [4259, 4263], [4264, 4271], [4272, 4274], [4275, 4276], [4277, 4285], [4286, 4296], [4296, 4297], [4298, 4301], [4302, 4309], [4310, 4316], [4317, 4321], [4322, 4331], [4332, 4336], [4337, 4338], [4339, 4349], [4350, 4356], [4357, 4366], [4367, 4371], [4372, 4381], [4381, 4383], [4384, 4391], [4391, 4392], [4393, 4399], [4400, 4405], [4405, 4406]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.065440446138381958, {u'tokens': [u'/', u'ref', u'>', u'Uruguay', u"'s", u'oldest', u'church', u'is', u'in', u'San', u'Carlos', u',', u'Maldonado', u'.'], u'lemmas': [u'/', u'ref', u'>', u'Uruguay', u"'s", u'oldest', u'church', u'be', u'in', u'San', u'Carlos', u',', u'Maldonado', u'.'], u'pos': [u':', u'NN', u'JJR', u'NNP', u'POS', u'JJS', u'NN', u'VBZ', u'IN', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[16531, 16532], [16532, 16535], [16535, 16536], [16537, 16544], [16544, 16546], [16547, 16553], [16554, 16560], [16561, 16563], [16564, 16566], [16567, 16570], [16571, 16577], [16577, 16578], [16579, 16588], [16588, 16589]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.060581058263778687, {u'tokens': [u'Another', u'segment', u'of', u'colonial', u'Uruguay', u"'s", u'population', u'consisted', u'of', u'people', u'of', u'African', u'descent', u'.'], u'lemmas': [u'another', u'segment', u'of', u'colonial', u'Uruguay', u"'s", u'population', u'consist', u'of', u'people', u'of', u'african', u'descent', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[3535, 3542], [3543, 3550], [3551, 3553], [3554, 3562], [3563, 3570], [3570, 3572], [3573, 3583], [3584, 3593], [3594, 3596], [3597, 3603], [3604, 3606], [3607, 3614], [3615, 3622], [3622, 3623]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.055482100695371628, {u'tokens': [u'For', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternated', u'in', u'power', u'.'], u'lemmas': [u'for', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternate', u'in', u'power', u'.'], u'pos': [u'IN', u'JJS', u'IN', u'NNP', u'POS', u'NN', u',', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'VBP', u'VBN', u'IN', u'NN', u'.'], u'char_offsets': [[6448, 6451], [6452, 6456], [6457, 6459], [6460, 6467], [6467, 6469], [6470, 6477], [6477, 6478], [6479, 6482], [6483, 6490], [6491, 6499], [6500, 6503], [6504, 6511], [6512, 6518], [6519, 6523], [6524, 6534], [6535, 6537], [6538, 6543], [6543, 6544]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.047130953520536423, {u'tokens': [u'Colonial', u'Uruguay', u"'s", u'African', u'community', u'grew', u'in', u'number', u'as', u'its', u'members', u'escaped', u'harsh', u'treatment', u'in', u'Buenos', u'Aires', u'.'], u'lemmas': [u'Colonial', u'Uruguay', u"'s", u'african', u'community', u'grow', u'in', u'number', u'as', u'its', u'member', u'escape', u'harsh', u'treatment', u'in', u'Buenos', u'Aires', u'.'], u'pos': [u'NNP', u'NNP', u'POS', u'JJ', u'NN', u'VBD', u'IN', u'NN', u'IN', u'PRP$', u'NNS', u'VBD', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[3625, 3633], [3634, 3641], [3641, 3643], [3644, 3651], [3652, 3661], [3662, 3666], [3667, 3669], [3670, 3676], [3677, 3679], [3680, 3683], [3684, 3691], [3692, 3699], [3700, 3705], [3706, 3715], [3716, 3718], [3719, 3725], [3726, 3731], [3731, 3732]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.041572630405426025, {u'tokens': [u'Uruguay', u"'s", u'early', u'19th', u'century', u'history', u'was', u'shaped', u'by', u'ongoing', u'conflicts', u'between', u'the', u'British', u',', u'Spanish', u',', u'Portuguese', u',', u'and', u'colonial', u'forces', u'for', u'dominance', u'in', u'the', u'Argentina-Brazil-Uruguay', u'region', u'.'], u'lemmas': [u'Uruguay', u"'s", u'early', u'19th', u'century', u'history', u'be', u'shape', u'by', u'ongoing', u'conflict', u'between', u'the', u'British', u',', u'Spanish', u',', u'Portuguese', u',', u'and', u'colonial', u'force', u'for', u'dominance', u'in', u'the', u'argentina-brazil-uruguay', u'region', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u',', u'NNP', u',', u'NNP', u',', u'CC', u'JJ', u'NNS', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[4407, 4414], [4414, 4416], [4417, 4422], [4423, 4427], [4428, 4435], [4436, 4443], [4444, 4447], [4448, 4454], [4455, 4457], [4458, 4465], [4466, 4475], [4476, 4483], [4484, 4487], [4488, 4495], [4495, 4496], [4497, 4504], [4504, 4505], [4506, 4516], [4516, 4517], [4518, 4521], [4522, 4530], [4531, 4537], [4538, 4541], [4542, 4551], [4552, 4554], [4555, 4558], [4559, 4583], [4584, 4590], [4590, 4591]]}) 
answer: set([u'warmest', u'june', u'month'])

Is Uruguay's warmest month June?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa18c0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param372] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1950>, (<src.tfidf.TF_IDF object at 0x1084deed0>, set(['uruguay'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa1950>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.6697697639465332, {u'tokens': [u'The', u'coolest', u'month', u'is', u'June', u',', u'while', u'the', u'warmest', u'is', u'January', u'.'], u'lemmas': [u'the', u'coolest', u'month', u'be', u'June', u',', u'while', u'the', u'warmest', u'be', u'January', u'.'], u'pos': [u'DT', u'JJS', u'NN', u'VBZ', u'NNP', u',', u'IN', u'DT', u'JJS', u'VBZ', u'NNP', u'.'], u'char_offsets': [[10665, 10668], [10669, 10676], [10677, 10682], [10683, 10685], [10686, 10690], [10690, 10691], [10692, 10697], [10698, 10701], [10702, 10709], [10710, 10712], [10713, 10720], [10720, 10721]]}) 
answer: set([])
candidate Sentence: (0.1640600860118866, {u'tokens': [u'The', u'newly', u'elected', u'Frente', u'Amplio', u'government', u',', u'while', u'pledging', u'to', u'continue', u'payments', u'on', u'Uruguay', u"'s", u'external', u'debt', u',', u'Michael', u'Fox', u',', u'Uruguay', u"'s", u'Frente', u'Amplio', u':', u'From', u'Revolution', u'to', u'Dilution', u',', u'June', u'19', u',', u'2007', u'.'], u'lemmas': [u'the', u'newly', u'elect', u'Frente', u'Amplio', u'government', u',', u'while', u'pledge', u'to', u'continue', u'payment', u'on', u'Uruguay', u"'s", u'external', u'debt', u',', u'Michael', u'Fox', u',', u'Uruguay', u"'s", u'Frente', u'Amplio', u':', u'from', u'revolution', u'to', u'Dilution', u',', u'June', u'19', u',', u'2007', u'.'], u'pos': [u'DT', u'RB', u'VBN', u'NNP', u'NNP', u'NN', u',', u'IN', u'VBG', u'TO', u'VB', u'NNS', u'IN', u'NNP', u'POS', u'JJ', u'NN', u',', u'NNP', u'NNP', u',', u'NNP', u'POS', u'NNP', u'NNP', u':', u'IN', u'NN', u'TO', u'NNP', u',', u'NNP', u'CD', u',', u'CD', u'.'], u'char_offsets': [[12917, 12920], [12921, 12926], [12927, 12934], [12935, 12941], [12942, 12948], [12949, 12959], [12959, 12960], [12961, 12966], [12967, 12975], [12976, 12978], [12979, 12987], [12988, 12996], [12997, 12999], [13000, 13007], [13007, 13009], [13010, 13018], [13019, 13023], [13023, 13024], [13025, 13032], [13033, 13036], [13036, 13037], [13039, 13046], [13046, 13048], [13049, 13055], [13056, 13062], [13062, 13063], [13064, 13068], [13069, 13079], [13080, 13082], [13083, 13091], [13091, 13092], [13093, 13097], [13098, 13100], [13100, 13101], [13102, 13106], [13106, 13107]]}) 
answer: set([u'warmest', u'month'])
candidate Sentence: (0.14858543872833252, {u'tokens': [u'The', u'rainfall', u'is', u'equally', u'distributed', u'throughout', u'the', u'year', u',', u'but', u'tends', u'to', u'be', u'a', u'bit', u'more', u'frequent', u'in', u'the', u'autumn', u'months', u'.'], u'lemmas': [u'the', u'rainfall', u'be', u'equally', u'distribute', u'throughout', u'the', u'year', u',', u'but', u'tend', u'to', u'be', u'a', u'bit', u'more', u'frequent', u'in', u'the', u'autumn', u'month', u'.'], u'pos': [u'DT', u'NNS', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'TO', u'VB', u'DT', u'NN', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[10722, 10725], [10726, 10734], [10735, 10737], [10738, 10745], [10746, 10757], [10758, 10768], [10769, 10772], [10773, 10777], [10777, 10778], [10779, 10782], [10783, 10788], [10789, 10791], [10792, 10794], [10795, 10796], [10797, 10800], [10801, 10805], [10806, 10814], [10815, 10817], [10818, 10821], [10822, 10828], [10829, 10835], [10835, 10836]]}) 
answer: set([u'warmest', u'june'])
candidate Sentence: (0.07890705019235611, {u'tokens': [u'/', u'ref', u'>', u'Spanish', u'colonization', u'increased', u'as', u'Spain', u'sought', u'to', u'limit', u'Portugal', u"'s", u'expansion', u'of', u'Brazil', u"'s", u'frontiers', u'.'], u'lemmas': [u'/', u'ref', u'>', u'spanish', u'colonization', u'increase', u'as', u'Spain', u'seek', u'to', u'limit', u'Portugal', u"'s", u'expansion', u'of', u'Brazil', u"'s", u'frontier', u'.'], u'pos': [u':', u'NN', u'JJR', u'JJ', u'NN', u'VBD', u'IN', u'NNP', u'VBD', u'TO', u'VB', u'NNP', u'POS', u'NN', u'IN', u'NNP', u'POS', u'NNS', u'.'], u'char_offsets': [[3429, 3430], [3430, 3433], [3433, 3434], [3435, 3442], [3443, 3455], [3456, 3465], [3466, 3468], [3469, 3474], [3475, 3481], [3482, 3484], [3485, 3490], [3491, 3499], [3499, 3501], [3502, 3511], [3512, 3514], [3515, 3521], [3521, 3523], [3524, 3533], [3533, 3534]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.067311219871044159, {u'tokens': [u'Uruguay', u"'s", u'capital', u',', u'Montevideo', u',', u'was', u'founded', u'by', u'the', u'Spanish', u'in', u'the', u'early', u'18th', u'century', u'as', u'a', u'military', u'stronghold', u';', u'its', u'natural', u'harbor', u'soon', u'developed', u'into', u'a', u'commercial', u'center', u'competing', u'with', u'Argentina', u"'s", u'capital', u',', u'Buenos', u'Aires', u'.'], u'lemmas': [u'Uruguay', u"'s", u'capital', u',', u'Montevideo', u',', u'be', u'found', u'by', u'the', u'spanish', u'in', u'the', u'early', u'18th', u'century', u'as', u'a', u'military', u'stronghold', u';', u'its', u'natural', u'harbor', u'soon', u'develop', u'into', u'a', u'commercial', u'center', u'compete', u'with', u'Argentina', u"'s", u'capital', u',', u'Buenos', u'Aires', u'.'], u'pos': [u'NNP', u'POS', u'NN', u',', u'NNP', u',', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u':', u'PRP$', u'JJ', u'NN', u'RB', u'VBD', u'IN', u'DT', u'JJ', u'NN', u'VBG', u'IN', u'NNP', u'POS', u'NN', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[4188, 4195], [4195, 4197], [4198, 4205], [4205, 4206], [4207, 4217], [4217, 4218], [4219, 4222], [4223, 4230], [4231, 4233], [4234, 4237], [4238, 4245], [4246, 4248], [4249, 4252], [4253, 4258], [4259, 4263], [4264, 4271], [4272, 4274], [4275, 4276], [4277, 4285], [4286, 4296], [4296, 4297], [4298, 4301], [4302, 4309], [4310, 4316], [4317, 4321], [4322, 4331], [4332, 4336], [4337, 4338], [4339, 4349], [4350, 4356], [4357, 4366], [4367, 4371], [4372, 4381], [4381, 4383], [4384, 4391], [4391, 4392], [4393, 4399], [4400, 4405], [4405, 4406]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.065440446138381958, {u'tokens': [u'/', u'ref', u'>', u'Uruguay', u"'s", u'oldest', u'church', u'is', u'in', u'San', u'Carlos', u',', u'Maldonado', u'.'], u'lemmas': [u'/', u'ref', u'>', u'Uruguay', u"'s", u'oldest', u'church', u'be', u'in', u'San', u'Carlos', u',', u'Maldonado', u'.'], u'pos': [u':', u'NN', u'JJR', u'NNP', u'POS', u'JJS', u'NN', u'VBZ', u'IN', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[16531, 16532], [16532, 16535], [16535, 16536], [16537, 16544], [16544, 16546], [16547, 16553], [16554, 16560], [16561, 16563], [16564, 16566], [16567, 16570], [16571, 16577], [16577, 16578], [16579, 16588], [16588, 16589]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.060581058263778687, {u'tokens': [u'Another', u'segment', u'of', u'colonial', u'Uruguay', u"'s", u'population', u'consisted', u'of', u'people', u'of', u'African', u'descent', u'.'], u'lemmas': [u'another', u'segment', u'of', u'colonial', u'Uruguay', u"'s", u'population', u'consist', u'of', u'people', u'of', u'african', u'descent', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[3535, 3542], [3543, 3550], [3551, 3553], [3554, 3562], [3563, 3570], [3570, 3572], [3573, 3583], [3584, 3593], [3594, 3596], [3597, 3603], [3604, 3606], [3607, 3614], [3615, 3622], [3622, 3623]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.055482100695371628, {u'tokens': [u'For', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternated', u'in', u'power', u'.'], u'lemmas': [u'for', u'most', u'of', u'Uruguay', u"'s", u'history', u',', u'the', u'Partido', u'Colorado', u'and', u'Partido', u'Blanco', u'have', u'alternate', u'in', u'power', u'.'], u'pos': [u'IN', u'JJS', u'IN', u'NNP', u'POS', u'NN', u',', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'VBP', u'VBN', u'IN', u'NN', u'.'], u'char_offsets': [[6448, 6451], [6452, 6456], [6457, 6459], [6460, 6467], [6467, 6469], [6470, 6477], [6477, 6478], [6479, 6482], [6483, 6490], [6491, 6499], [6500, 6503], [6504, 6511], [6512, 6518], [6519, 6523], [6524, 6534], [6535, 6537], [6538, 6543], [6543, 6544]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.047130953520536423, {u'tokens': [u'Colonial', u'Uruguay', u"'s", u'African', u'community', u'grew', u'in', u'number', u'as', u'its', u'members', u'escaped', u'harsh', u'treatment', u'in', u'Buenos', u'Aires', u'.'], u'lemmas': [u'Colonial', u'Uruguay', u"'s", u'african', u'community', u'grow', u'in', u'number', u'as', u'its', u'member', u'escape', u'harsh', u'treatment', u'in', u'Buenos', u'Aires', u'.'], u'pos': [u'NNP', u'NNP', u'POS', u'JJ', u'NN', u'VBD', u'IN', u'NN', u'IN', u'PRP$', u'NNS', u'VBD', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[3625, 3633], [3634, 3641], [3641, 3643], [3644, 3651], [3652, 3661], [3662, 3666], [3667, 3669], [3670, 3676], [3677, 3679], [3680, 3683], [3684, 3691], [3692, 3699], [3700, 3705], [3706, 3715], [3716, 3718], [3719, 3725], [3726, 3731], [3731, 3732]]}) 
answer: set([u'warmest', u'june', u'month'])
candidate Sentence: (0.041572630405426025, {u'tokens': [u'Uruguay', u"'s", u'early', u'19th', u'century', u'history', u'was', u'shaped', u'by', u'ongoing', u'conflicts', u'between', u'the', u'British', u',', u'Spanish', u',', u'Portuguese', u',', u'and', u'colonial', u'forces', u'for', u'dominance', u'in', u'the', u'Argentina-Brazil-Uruguay', u'region', u'.'], u'lemmas': [u'Uruguay', u"'s", u'early', u'19th', u'century', u'history', u'be', u'shape', u'by', u'ongoing', u'conflict', u'between', u'the', u'British', u',', u'Spanish', u',', u'Portuguese', u',', u'and', u'colonial', u'force', u'for', u'dominance', u'in', u'the', u'argentina-brazil-uruguay', u'region', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u',', u'NNP', u',', u'NNP', u',', u'CC', u'JJ', u'NNS', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[4407, 4414], [4414, 4416], [4417, 4422], [4423, 4427], [4428, 4435], [4436, 4443], [4444, 4447], [4448, 4454], [4455, 4457], [4458, 4465], [4466, 4475], [4476, 4483], [4484, 4487], [4488, 4495], [4495, 4496], [4497, 4504], [4504, 4505], [4506, 4516], [4516, 4517], [4518, 4521], [4522, 4530], [4531, 4537], [4538, 4541], [4542, 4551], [4552, 4554], [4555, 4558], [4559, 4583], [4584, 4590], [4590, 4591]]}) 
answer: set([u'warmest', u'june', u'month'])

Is Uruguay's warmest month June?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa1950>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param377] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1c20>, (<src.tfidf.TF_IDF object at 0x1061d2c10>, set(['wilson', 'woodrow'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x10aaa1c20>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42267262935638428, {u'tokens': [u'The', u'League', u'of', u'Nations', u'went', u'into', u'operation', u'anyway', u',', u'but', u'the', u'U.S.', u'never', u'joined', u'.'], u'lemmas': [u'the', u'League', u'of', u'Nations', u'go', u'into', u'operation', u'anyway', u',', u'but', u'the', u'U.S.', u'never', u'join', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'NNP', u'VBD', u'IN', u'NN', u'RB', u',', u'CC', u'DT', u'NNP', u'RB', u'VBD', u'.'], u'char_offsets': [[2204, 2207], [2208, 2214], [2215, 2217], [2218, 2225], [2226, 2230], [2231, 2235], [2236, 2245], [2246, 2252], [2252, 2253], [2254, 2257], [2258, 2261], [2262, 2266], [2267, 2272], [2273, 2279], [2279, 2280]]}) 
answer: set([])
candidate Sentence: (0.22556000947952271, {u'tokens': [u'Because', u'his', u'plan', u'for', u'the', u'League', u'of', u'Nations', u'ultimately', u'failed', u',', u'he', u'died', u'feeling', u'that', u'he', u'had', u'lied', u'to', u'the', u'American', u'people', u'and', u'that', u'his', u'motives', u'for', u'joining', u'the', u'war', u'had', u'been', u'in', u'vain', u'.'], u'lemmas': [u'because', u'he', u'plan', u'for', u'the', u'League', u'of', u'Nations', u'ultimately', u'fail', u',', u'he', u'die', u'feeling', u'that', u'he', u'have', u'lie', u'to', u'the', u'american', u'people', u'and', u'that', u'he', u'motive', u'for', u'join', u'the', u'war', u'have', u'be', u'in', u'vain', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'RB', u'VBD', u',', u'PRP', u'VBD', u'NN', u'IN', u'PRP', u'VBD', u'VBN', u'TO', u'DT', u'JJ', u'NNS', u'CC', u'IN', u'PRP$', u'NNS', u'IN', u'VBG', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'JJ', u'.'], u'char_offsets': [[45899, 45906], [45907, 45910], [45911, 45915], [45916, 45919], [45920, 45923], [45924, 45930], [45931, 45933], [45934, 45941], [45942, 45952], [45953, 45959], [45959, 45960], [45961, 45963], [45964, 45968], [45969, 45976], [45977, 45981], [45982, 45984], [45985, 45988], [45989, 45993], [45994, 45996], [45997, 46000], [46001, 46009], [46010, 46016], [46017, 46020], [46021, 46025], [46026, 46029], [46030, 46037], [46038, 46041], [46042, 46049], [46050, 46053], [46054, 46057], [46058, 46061], [46062, 46066], [46067, 46069], [46070, 46074], [46074, 46075]]}) 
answer: set([u'u.s.'])
candidate Sentence: (0.22311916947364807, {u'tokens': [u'However', u',', u'Wilson', u'failed', u'to', u'win', u'Senate', u'support', u'for', u'ratification', u'and', u'the', u'United', u'States', u'never', u'joined', u'the', u'League', u'.'], u'lemmas': [u'however', u',', u'Wilson', u'fail', u'to', u'win', u'Senate', u'support', u'for', u'ratification', u'and', u'the', u'United', u'States', u'never', u'join', u'the', u'League', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBD', u'TO', u'VB', u'NNP', u'NN', u'IN', u'NN', u'CC', u'DT', u'NNP', u'NNPS', u'RB', u'VBD', u'DT', u'NNP', u'.'], u'char_offsets': [[33485, 33492], [33492, 33493], [33494, 33500], [33501, 33507], [33508, 33510], [33511, 33514], [33515, 33521], [33522, 33529], [33530, 33533], [33534, 33546], [33547, 33550], [33551, 33554], [33555, 33561], [33562, 33568], [33569, 33574], [33575, 33581], [33582, 33585], [33586, 33592], [33592, 33593]]}) 
answer: set([u'u.s.', u'nations'])
candidate Sentence: (0.18108826875686646, {u'tokens': [u'Wilson', u'joined', u'him', u'there', u'in', u'May', u'1882', u'.'], u'lemmas': [u'Wilson', u'join', u'he', u'there', u'in', u'May', u'1882', u'.'], u'pos': [u'NNP', u'VBD', u'PRP', u'EX', u'IN', u'NNP', u'CD', u'.'], u'char_offsets': [[6108, 6114], [6115, 6121], [6122, 6125], [6126, 6131], [6132, 6134], [6135, 6138], [6139, 6143], [6143, 6144]]}) 
answer: set([u'league', u'u.s.', u'nations'])
candidate Sentence: (0.16027465462684631, {u'tokens': [u'After', u'one', u'of', u'his', u'final', u'speeches', u'to', u'attempt', u'to', u'promote', u'the', u'League', u'of', u'Nations', u'in', u'Pueblo', u',', u'Colorado', u',', u'on', u'September', u'25', u',', u'1919', u',', u'he', u'collapsed', u'.'], u'lemmas': [u'after', u'one', u'of', u'he', u'final', u'speech', u'to', u'attempt', u'to', u'promote', u'the', u'League', u'of', u'Nations', u'in', u'Pueblo', u',', u'Colorado', u',', u'on', u'September', u'25', u',', u'1919', u',', u'he', u'collapse', u'.'], u'pos': [u'IN', u'CD', u'IN', u'PRP$', u'JJ', u'NNS', u'TO', u'VB', u'TO', u'VB', u'DT', u'NNP', u'IN', u'NNPS', u'IN', u'NNP', u',', u'NNP', u',', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'PRP', u'VBD', u'.'], u'char_offsets': [[37553, 37558], [37559, 37562], [37563, 37565], [37566, 37569], [37570, 37575], [37576, 37584], [37585, 37587], [37588, 37595], [37596, 37598], [37599, 37606], [37607, 37610], [37611, 37617], [37618, 37620], [37621, 37628], [37629, 37631], [37632, 37638], [37638, 37639], [37640, 37648], [37648, 37649], [37650, 37652], [37653, 37662], [37663, 37665], [37665, 37666], [37667, 37671], [37672, 37673], [37674, 37676], [37677, 37686], [37686, 37687]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.15691971778869629, {u'tokens': [u'Quoted', u'in', u'Palestine', u':', u'The', u'Original', u'Sin', u',', u'Meir', u'Abelson', u'Until', u'Wilson', u'announced', u'his', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'women', u'calling', u'themselves', u'Silent', u'Sentinels', u'protested', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'holding', u'banners', u'such', u'as', u'``', u'Mr.', u'President', u'What', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'lemmas': [u'quote', u'in', u'Palestine', u':', u'the', u'original', u'Sin', u',', u'Meir', u'abelson', u'until', u'Wilson', u'announce', u'he', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'woman', u'call', u'themselves', u'silent', u'sentinel', u'protest', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'hold', u'banner', u'such', u'as', u'``', u'Mr.', u'President', u'what', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'pos': [u'VBN', u'IN', u'NNP', u':', u'DT', u'JJ', u'NNP', u',', u'NNP', u'NN', u'IN', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'VBG', u'PRP', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'JJ', u'IN', u'``', u'NNP', u'NNP', u'WP', u'MD', u'PRP', u'VB', u'IN', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[36783, 36789], [36790, 36792], [36793, 36802], [36802, 36803], [36804, 36807], [36808, 36816], [36817, 36820], [36821, 36822], [36823, 36827], [36828, 36835], [36836, 36841], [36842, 36848], [36849, 36858], [36859, 36862], [36863, 36870], [36871, 36874], [36875, 36883], [36883, 36884], [36885, 36886], [36887, 36892], [36893, 36895], [36896, 36901], [36902, 36909], [36910, 36920], [36921, 36927], [36928, 36937], [36938, 36947], [36948, 36950], [36951, 36956], [36957, 36959], [36960, 36963], [36964, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36997], [36998, 37000], [37001, 37002], [37002, 37005], [37006, 37015], [37016, 37020], [37021, 37025], [37026, 37029], [37030, 37032], [37033, 37036], [37037, 37042], [37043, 37051], [37051, 37052], [37052, 37053]]}) 
answer: set([u'league', u'u.s.', u'join', u'nations'])
candidate Sentence: (0.15558731555938721, {u'tokens': [u'American', u'Rhetoric', u',', u'``', u'Final', u'Address', u'in', u'Support', u'of', u'the', u'League', u'of', u'Nations', u"''", u',', u'Woodrow', u'Wilson', u',', u'delivered', u'25', u'Sept', u'1919', u'in', u'Pueblo', u',', u'CO.', u'.'], u'lemmas': [u'american', u'Rhetoric', u',', u'``', u'final', u'address', u'in', u'support', u'of', u'the', u'League', u'of', u'Nations', u"''", u',', u'Woodrow', u'Wilson', u',', u'deliver', u'25', u'Sept', u'1919', u'in', u'Pueblo', u',', u'CO.', u'.'], u'pos': [u'JJ', u'NNP', u',', u'``', u'JJ', u'NN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u"''", u',', u'NNP', u'NNP', u',', u'VBN', u'CD', u'NNP', u'CD', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[45263, 45271], [45272, 45280], [45280, 45281], [45283, 45284], [45284, 45289], [45290, 45297], [45298, 45300], [45301, 45308], [45309, 45311], [45312, 45315], [45316, 45322], [45323, 45325], [45326, 45333], [45333, 45334], [45334, 45335], [45336, 45343], [45344, 45350], [45350, 45351], [45352, 45361], [45362, 45364], [45365, 45369], [45370, 45374], [45375, 45377], [45378, 45384], [45384, 45385], [45386, 45388], [45388, 45389]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.14654263854026794, {u'tokens': [u'In', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'did', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'Fourteen', u'Points', u'were', u'implemented', u'fully', u'in', u'Europe', u'.'], u'lemmas': [u'in', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'do', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'fourteen', u'point', u'be', u'implement', u'fully', u'in', u'Europe', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'POS', u'JJ', u'NNP', u'VBD', u'RB', u'VB', u'DT', u'NNP', u'CC', u'RB', u'CD', u'IN', u'DT', u'JJ', u'CD', u'NNS', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[30595, 30597], [30598, 30601], [30602, 30605], [30605, 30606], [30607, 30613], [30613, 30615], [30616, 30619], [30620, 30628], [30629, 30632], [30633, 30636], [30637, 30643], [30644, 30647], [30648, 30654], [30655, 30658], [30659, 30663], [30664, 30668], [30669, 30671], [30672, 30675], [30676, 30684], [30685, 30693], [30694, 30700], [30701, 30705], [30706, 30717], [30718, 30723], [30724, 30726], [30727, 30733], [30733, 30734]]}) 
answer: set([u'u.s.', u'join', u'nations'])
candidate Sentence: (0.14475524425506592, {u'tokens': [u'He', u'went', u'to', u'Paris', u'in', u'1919', u'to', u'create', u'the', u'League', u'of', u'Nations', u'and', u'shape', u'the', u'Treaty', u'of', u'Versailles', u',', u'with', u'special', u'attention', u'on', u'creating', u'new', u'nations', u'out', u'of', u'defunct', u'empires', u'.'], u'lemmas': [u'he', u'go', u'to', u'Paris', u'in', u'1919', u'to', u'create', u'the', u'League', u'of', u'Nations', u'and', u'shape', u'the', u'Treaty', u'of', u'Versailles', u',', u'with', u'special', u'attention', u'on', u'create', u'new', u'nation', u'out', u'of', u'defunct', u'empire', u'.'], u'pos': [u'PRP', u'VBD', u'TO', u'NNP', u'IN', u'CD', u'TO', u'VB', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'VB', u'DT', u'NNP', u'IN', u'NNP', u',', u'IN', u'JJ', u'NN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[1718, 1720], [1721, 1725], [1726, 1728], [1729, 1734], [1735, 1737], [1738, 1742], [1743, 1745], [1746, 1752], [1753, 1756], [1757, 1763], [1764, 1766], [1767, 1774], [1775, 1778], [1779, 1784], [1785, 1788], [1789, 1795], [1796, 1798], [1799, 1809], [1809, 1810], [1811, 1815], [1816, 1823], [1824, 1833], [1834, 1836], [1837, 1845], [1846, 1849], [1850, 1857], [1858, 1861], [1862, 1864], [1865, 1872], [1873, 1880], [1880, 1881]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.13284125924110413, {u'tokens': [u'Wilson', u'compromised', u'with', u'Clemenceau', u',', u'Lloyd', u'George', u',', u'and', u'many', u'other', u'European', u'leaders', u'during', u'the', u'Paris', u'Peace', u'talks', u'to', u'ensure', u'that', u'the', u'fourteenth', u'point', u',', u'the', u'League', u'of', u'Nations', u',', u'would', u'be', u'established', u'.'], u'lemmas': [u'Wilson', u'compromise', u'with', u'Clemenceau', u',', u'Lloyd', u'George', u',', u'and', u'many', u'other', u'european', u'leader', u'during', u'the', u'Paris', u'Peace', u'talk', u'to', u'ensure', u'that', u'the', u'fourteenth', u'point', u',', u'the', u'League', u'of', u'Nations', u',', u'would', u'be', u'establish', u'.'], u'pos': [u'NNP', u'VBD', u'IN', u'NNP', u',', u'NNP', u'NNP', u',', u'CC', u'JJ', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'VBZ', u'TO', u'VB', u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'NNP', u'IN', u'NNPS', u',', u'MD', u'VB', u'VBN', u'.'], u'char_offsets': [[30401, 30407], [30408, 30419], [30420, 30424], [30425, 30435], [30435, 30436], [30437, 30442], [30443, 30449], [30449, 30450], [30451, 30454], [30455, 30459], [30460, 30465], [30466, 30474], [30475, 30482], [30483, 30489], [30490, 30493], [30494, 30499], [30500, 30505], [30506, 30511], [30512, 30514], [30515, 30521], [30522, 30526], [30527, 30530], [30531, 30541], [30542, 30547], [30547, 30548], [30549, 30552], [30553, 30559], [30560, 30562], [30563, 30570], [30570, 30571], [30572, 30577], [30578, 30580], [30581, 30592], [30592, 30593]]}) 
answer: set([u'u.s.', u'join'])

Did the U.S. join the League of Nations?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x10aaa1c20>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param378] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1cb0>, (<src.tfidf.TF_IDF object at 0x1061d2c10>, set(['wilson', 'woodrow'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa1cb0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42267262935638428, {u'tokens': [u'The', u'League', u'of', u'Nations', u'went', u'into', u'operation', u'anyway', u',', u'but', u'the', u'U.S.', u'never', u'joined', u'.'], u'lemmas': [u'the', u'League', u'of', u'Nations', u'go', u'into', u'operation', u'anyway', u',', u'but', u'the', u'U.S.', u'never', u'join', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'NNP', u'VBD', u'IN', u'NN', u'RB', u',', u'CC', u'DT', u'NNP', u'RB', u'VBD', u'.'], u'char_offsets': [[2204, 2207], [2208, 2214], [2215, 2217], [2218, 2225], [2226, 2230], [2231, 2235], [2236, 2245], [2246, 2252], [2252, 2253], [2254, 2257], [2258, 2261], [2262, 2266], [2267, 2272], [2273, 2279], [2279, 2280]]}) 
answer: set([])
candidate Sentence: (0.22556000947952271, {u'tokens': [u'Because', u'his', u'plan', u'for', u'the', u'League', u'of', u'Nations', u'ultimately', u'failed', u',', u'he', u'died', u'feeling', u'that', u'he', u'had', u'lied', u'to', u'the', u'American', u'people', u'and', u'that', u'his', u'motives', u'for', u'joining', u'the', u'war', u'had', u'been', u'in', u'vain', u'.'], u'lemmas': [u'because', u'he', u'plan', u'for', u'the', u'League', u'of', u'Nations', u'ultimately', u'fail', u',', u'he', u'die', u'feeling', u'that', u'he', u'have', u'lie', u'to', u'the', u'american', u'people', u'and', u'that', u'he', u'motive', u'for', u'join', u'the', u'war', u'have', u'be', u'in', u'vain', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'RB', u'VBD', u',', u'PRP', u'VBD', u'NN', u'IN', u'PRP', u'VBD', u'VBN', u'TO', u'DT', u'JJ', u'NNS', u'CC', u'IN', u'PRP$', u'NNS', u'IN', u'VBG', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'JJ', u'.'], u'char_offsets': [[45899, 45906], [45907, 45910], [45911, 45915], [45916, 45919], [45920, 45923], [45924, 45930], [45931, 45933], [45934, 45941], [45942, 45952], [45953, 45959], [45959, 45960], [45961, 45963], [45964, 45968], [45969, 45976], [45977, 45981], [45982, 45984], [45985, 45988], [45989, 45993], [45994, 45996], [45997, 46000], [46001, 46009], [46010, 46016], [46017, 46020], [46021, 46025], [46026, 46029], [46030, 46037], [46038, 46041], [46042, 46049], [46050, 46053], [46054, 46057], [46058, 46061], [46062, 46066], [46067, 46069], [46070, 46074], [46074, 46075]]}) 
answer: set([u'u.s.'])
candidate Sentence: (0.22311916947364807, {u'tokens': [u'However', u',', u'Wilson', u'failed', u'to', u'win', u'Senate', u'support', u'for', u'ratification', u'and', u'the', u'United', u'States', u'never', u'joined', u'the', u'League', u'.'], u'lemmas': [u'however', u',', u'Wilson', u'fail', u'to', u'win', u'Senate', u'support', u'for', u'ratification', u'and', u'the', u'United', u'States', u'never', u'join', u'the', u'League', u'.'], u'pos': [u'RB', u',', u'NNP', u'VBD', u'TO', u'VB', u'NNP', u'NN', u'IN', u'NN', u'CC', u'DT', u'NNP', u'NNPS', u'RB', u'VBD', u'DT', u'NNP', u'.'], u'char_offsets': [[33485, 33492], [33492, 33493], [33494, 33500], [33501, 33507], [33508, 33510], [33511, 33514], [33515, 33521], [33522, 33529], [33530, 33533], [33534, 33546], [33547, 33550], [33551, 33554], [33555, 33561], [33562, 33568], [33569, 33574], [33575, 33581], [33582, 33585], [33586, 33592], [33592, 33593]]}) 
answer: set([u'u.s.', u'nations'])
candidate Sentence: (0.18108826875686646, {u'tokens': [u'Wilson', u'joined', u'him', u'there', u'in', u'May', u'1882', u'.'], u'lemmas': [u'Wilson', u'join', u'he', u'there', u'in', u'May', u'1882', u'.'], u'pos': [u'NNP', u'VBD', u'PRP', u'EX', u'IN', u'NNP', u'CD', u'.'], u'char_offsets': [[6108, 6114], [6115, 6121], [6122, 6125], [6126, 6131], [6132, 6134], [6135, 6138], [6139, 6143], [6143, 6144]]}) 
answer: set([u'league', u'u.s.', u'nations'])
candidate Sentence: (0.16027465462684631, {u'tokens': [u'After', u'one', u'of', u'his', u'final', u'speeches', u'to', u'attempt', u'to', u'promote', u'the', u'League', u'of', u'Nations', u'in', u'Pueblo', u',', u'Colorado', u',', u'on', u'September', u'25', u',', u'1919', u',', u'he', u'collapsed', u'.'], u'lemmas': [u'after', u'one', u'of', u'he', u'final', u'speech', u'to', u'attempt', u'to', u'promote', u'the', u'League', u'of', u'Nations', u'in', u'Pueblo', u',', u'Colorado', u',', u'on', u'September', u'25', u',', u'1919', u',', u'he', u'collapse', u'.'], u'pos': [u'IN', u'CD', u'IN', u'PRP$', u'JJ', u'NNS', u'TO', u'VB', u'TO', u'VB', u'DT', u'NNP', u'IN', u'NNPS', u'IN', u'NNP', u',', u'NNP', u',', u'IN', u'NNP', u'CD', u',', u'CD', u',', u'PRP', u'VBD', u'.'], u'char_offsets': [[37553, 37558], [37559, 37562], [37563, 37565], [37566, 37569], [37570, 37575], [37576, 37584], [37585, 37587], [37588, 37595], [37596, 37598], [37599, 37606], [37607, 37610], [37611, 37617], [37618, 37620], [37621, 37628], [37629, 37631], [37632, 37638], [37638, 37639], [37640, 37648], [37648, 37649], [37650, 37652], [37653, 37662], [37663, 37665], [37665, 37666], [37667, 37671], [37672, 37673], [37674, 37676], [37677, 37686], [37686, 37687]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.15691971778869629, {u'tokens': [u'Quoted', u'in', u'Palestine', u':', u'The', u'Original', u'Sin', u',', u'Meir', u'Abelson', u'Until', u'Wilson', u'announced', u'his', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'women', u'calling', u'themselves', u'Silent', u'Sentinels', u'protested', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'holding', u'banners', u'such', u'as', u'``', u'Mr.', u'President', u'What', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'lemmas': [u'quote', u'in', u'Palestine', u':', u'the', u'original', u'Sin', u',', u'Meir', u'abelson', u'until', u'Wilson', u'announce', u'he', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'woman', u'call', u'themselves', u'silent', u'sentinel', u'protest', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'hold', u'banner', u'such', u'as', u'``', u'Mr.', u'President', u'what', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'pos': [u'VBN', u'IN', u'NNP', u':', u'DT', u'JJ', u'NNP', u',', u'NNP', u'NN', u'IN', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'VBG', u'PRP', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'JJ', u'IN', u'``', u'NNP', u'NNP', u'WP', u'MD', u'PRP', u'VB', u'IN', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[36783, 36789], [36790, 36792], [36793, 36802], [36802, 36803], [36804, 36807], [36808, 36816], [36817, 36820], [36821, 36822], [36823, 36827], [36828, 36835], [36836, 36841], [36842, 36848], [36849, 36858], [36859, 36862], [36863, 36870], [36871, 36874], [36875, 36883], [36883, 36884], [36885, 36886], [36887, 36892], [36893, 36895], [36896, 36901], [36902, 36909], [36910, 36920], [36921, 36927], [36928, 36937], [36938, 36947], [36948, 36950], [36951, 36956], [36957, 36959], [36960, 36963], [36964, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36997], [36998, 37000], [37001, 37002], [37002, 37005], [37006, 37015], [37016, 37020], [37021, 37025], [37026, 37029], [37030, 37032], [37033, 37036], [37037, 37042], [37043, 37051], [37051, 37052], [37052, 37053]]}) 
answer: set([u'league', u'u.s.', u'join', u'nations'])
candidate Sentence: (0.15558731555938721, {u'tokens': [u'American', u'Rhetoric', u',', u'``', u'Final', u'Address', u'in', u'Support', u'of', u'the', u'League', u'of', u'Nations', u"''", u',', u'Woodrow', u'Wilson', u',', u'delivered', u'25', u'Sept', u'1919', u'in', u'Pueblo', u',', u'CO.', u'.'], u'lemmas': [u'american', u'Rhetoric', u',', u'``', u'final', u'address', u'in', u'support', u'of', u'the', u'League', u'of', u'Nations', u"''", u',', u'Woodrow', u'Wilson', u',', u'deliver', u'25', u'Sept', u'1919', u'in', u'Pueblo', u',', u'CO.', u'.'], u'pos': [u'JJ', u'NNP', u',', u'``', u'JJ', u'NN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u"''", u',', u'NNP', u'NNP', u',', u'VBN', u'CD', u'NNP', u'CD', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[45263, 45271], [45272, 45280], [45280, 45281], [45283, 45284], [45284, 45289], [45290, 45297], [45298, 45300], [45301, 45308], [45309, 45311], [45312, 45315], [45316, 45322], [45323, 45325], [45326, 45333], [45333, 45334], [45334, 45335], [45336, 45343], [45344, 45350], [45350, 45351], [45352, 45361], [45362, 45364], [45365, 45369], [45370, 45374], [45375, 45377], [45378, 45384], [45384, 45385], [45386, 45388], [45388, 45389]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.14654263854026794, {u'tokens': [u'In', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'did', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'Fourteen', u'Points', u'were', u'implemented', u'fully', u'in', u'Europe', u'.'], u'lemmas': [u'in', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'do', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'fourteen', u'point', u'be', u'implement', u'fully', u'in', u'Europe', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'POS', u'JJ', u'NNP', u'VBD', u'RB', u'VB', u'DT', u'NNP', u'CC', u'RB', u'CD', u'IN', u'DT', u'JJ', u'CD', u'NNS', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[30595, 30597], [30598, 30601], [30602, 30605], [30605, 30606], [30607, 30613], [30613, 30615], [30616, 30619], [30620, 30628], [30629, 30632], [30633, 30636], [30637, 30643], [30644, 30647], [30648, 30654], [30655, 30658], [30659, 30663], [30664, 30668], [30669, 30671], [30672, 30675], [30676, 30684], [30685, 30693], [30694, 30700], [30701, 30705], [30706, 30717], [30718, 30723], [30724, 30726], [30727, 30733], [30733, 30734]]}) 
answer: set([u'u.s.', u'join', u'nations'])
candidate Sentence: (0.14475524425506592, {u'tokens': [u'He', u'went', u'to', u'Paris', u'in', u'1919', u'to', u'create', u'the', u'League', u'of', u'Nations', u'and', u'shape', u'the', u'Treaty', u'of', u'Versailles', u',', u'with', u'special', u'attention', u'on', u'creating', u'new', u'nations', u'out', u'of', u'defunct', u'empires', u'.'], u'lemmas': [u'he', u'go', u'to', u'Paris', u'in', u'1919', u'to', u'create', u'the', u'League', u'of', u'Nations', u'and', u'shape', u'the', u'Treaty', u'of', u'Versailles', u',', u'with', u'special', u'attention', u'on', u'create', u'new', u'nation', u'out', u'of', u'defunct', u'empire', u'.'], u'pos': [u'PRP', u'VBD', u'TO', u'NNP', u'IN', u'CD', u'TO', u'VB', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'VB', u'DT', u'NNP', u'IN', u'NNP', u',', u'IN', u'JJ', u'NN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[1718, 1720], [1721, 1725], [1726, 1728], [1729, 1734], [1735, 1737], [1738, 1742], [1743, 1745], [1746, 1752], [1753, 1756], [1757, 1763], [1764, 1766], [1767, 1774], [1775, 1778], [1779, 1784], [1785, 1788], [1789, 1795], [1796, 1798], [1799, 1809], [1809, 1810], [1811, 1815], [1816, 1823], [1824, 1833], [1834, 1836], [1837, 1845], [1846, 1849], [1850, 1857], [1858, 1861], [1862, 1864], [1865, 1872], [1873, 1880], [1880, 1881]]}) 
answer: set([u'u.s.', u'join'])
candidate Sentence: (0.13284125924110413, {u'tokens': [u'Wilson', u'compromised', u'with', u'Clemenceau', u',', u'Lloyd', u'George', u',', u'and', u'many', u'other', u'European', u'leaders', u'during', u'the', u'Paris', u'Peace', u'talks', u'to', u'ensure', u'that', u'the', u'fourteenth', u'point', u',', u'the', u'League', u'of', u'Nations', u',', u'would', u'be', u'established', u'.'], u'lemmas': [u'Wilson', u'compromise', u'with', u'Clemenceau', u',', u'Lloyd', u'George', u',', u'and', u'many', u'other', u'european', u'leader', u'during', u'the', u'Paris', u'Peace', u'talk', u'to', u'ensure', u'that', u'the', u'fourteenth', u'point', u',', u'the', u'League', u'of', u'Nations', u',', u'would', u'be', u'establish', u'.'], u'pos': [u'NNP', u'VBD', u'IN', u'NNP', u',', u'NNP', u'NNP', u',', u'CC', u'JJ', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'VBZ', u'TO', u'VB', u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'NNP', u'IN', u'NNPS', u',', u'MD', u'VB', u'VBN', u'.'], u'char_offsets': [[30401, 30407], [30408, 30419], [30420, 30424], [30425, 30435], [30435, 30436], [30437, 30442], [30443, 30449], [30449, 30450], [30451, 30454], [30455, 30459], [30460, 30465], [30466, 30474], [30475, 30482], [30483, 30489], [30490, 30493], [30494, 30499], [30500, 30505], [30506, 30511], [30512, 30514], [30515, 30521], [30522, 30526], [30527, 30530], [30531, 30541], [30542, 30547], [30547, 30548], [30549, 30552], [30553, 30559], [30560, 30562], [30563, 30570], [30570, 30571], [30572, 30577], [30578, 30580], [30581, 30592], [30592, 30593]]}) 
answer: set([u'u.s.', u'join'])

Did the U.S. join the League of Nations?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x10aaa1cb0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param380] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1dd0>, (<src.tfidf.TF_IDF object at 0x1061d2c10>, set(['wilson', 'woodrow'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Totally.\t') == True
E                +  where 'Totally.\t' = <src.question_processing.Question_parser instance at 0x10aaa1dd0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.86186522245407104, {u'tokens': [u'*', u'Wilson', u'was', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'lemmas': [u'*', u'Wilson', u'be', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[47095, 47096], [47097, 47103], [47104, 47107], [47108, 47109], [47110, 47116], [47117, 47119], [47120, 47123], [47124, 47127], [47128, 47133], [47134, 47137], [47138, 47148], [47148, 47149]]}) 
answer: set([])
candidate Sentence: (0.85281050205230713, {u'tokens': [u'Wilson', u'was', u'also', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'lemmas': [u'Wilson', u'be', u'also', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[5015, 5021], [5022, 5025], [5026, 5030], [5031, 5032], [5033, 5039], [5040, 5042], [5043, 5046], [5047, 5050], [5051, 5056], [5057, 5060], [5061, 5071], [5071, 5072]]}) 
answer: set([])
candidate Sentence: (0.10093045234680176, {u'tokens': [u'While', u'there', u',', u'he', u'was', u'one', u'of', u'the', u'faculty', u'members', u'of', u'the', u'short-lived', u'coordinate', u'college', u',', u'Evelyn', u'College', u'for', u'Women', u'.'], u'lemmas': [u'while', u'there', u',', u'he', u'be', u'one', u'of', u'the', u'faculty', u'member', u'of', u'the', u'short-lived', u'coordinate', u'college', u',', u'Evelyn', u'College', u'for', u'Women', u'.'], u'pos': [u'IN', u'RB', u',', u'PRP', u'VBD', u'CD', u'IN', u'DT', u'NN', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u',', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[11165, 11170], [11171, 11176], [11176, 11177], [11178, 11180], [11181, 11184], [11185, 11188], [11189, 11191], [11192, 11195], [11196, 11203], [11204, 11211], [11212, 11214], [11215, 11218], [11219, 11230], [11231, 11241], [11242, 11249], [11249, 11250], [11251, 11257], [11258, 11265], [11266, 11269], [11270, 11275], [11275, 11276]]}) 
answer: set([u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.095809079706668854, {u'tokens': [u'Quoted', u'in', u'Palestine', u':', u'The', u'Original', u'Sin', u',', u'Meir', u'Abelson', u'Until', u'Wilson', u'announced', u'his', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'women', u'calling', u'themselves', u'Silent', u'Sentinels', u'protested', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'holding', u'banners', u'such', u'as', u'``', u'Mr.', u'President', u'What', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'lemmas': [u'quote', u'in', u'Palestine', u':', u'the', u'original', u'Sin', u',', u'Meir', u'abelson', u'until', u'Wilson', u'announce', u'he', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'woman', u'call', u'themselves', u'silent', u'sentinel', u'protest', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'hold', u'banner', u'such', u'as', u'``', u'Mr.', u'President', u'what', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'pos': [u'VBN', u'IN', u'NNP', u':', u'DT', u'JJ', u'NNP', u',', u'NNP', u'NN', u'IN', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'VBG', u'PRP', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'JJ', u'IN', u'``', u'NNP', u'NNP', u'WP', u'MD', u'PRP', u'VB', u'IN', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[36783, 36789], [36790, 36792], [36793, 36802], [36802, 36803], [36804, 36807], [36808, 36816], [36817, 36820], [36821, 36822], [36823, 36827], [36828, 36835], [36836, 36841], [36842, 36848], [36849, 36858], [36859, 36862], [36863, 36870], [36871, 36874], [36875, 36883], [36883, 36884], [36885, 36886], [36887, 36892], [36893, 36895], [36896, 36901], [36902, 36909], [36910, 36920], [36921, 36927], [36928, 36937], [36938, 36947], [36948, 36950], [36951, 36956], [36957, 36959], [36960, 36963], [36964, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36997], [36998, 37000], [37001, 37002], [37002, 37005], [37006, 37015], [37016, 37020], [37021, 37025], [37026, 37029], [37030, 37032], [37033, 37036], [37037, 37042], [37043, 37051], [37051, 37052], [37052, 37053]]}) 
answer: set([u'member', u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.082105733454227448, {u'tokens': [u'/', u'ref', u'>', u'Wilson', u'and', u'his', u'cabinet', u'members', u'fired', u'many', u'black', u'Republican', u'office', u'holders', u',', u'but', u'also', u'appointed', u'a', u'few', u'black', u'Democrats', u'.'], u'lemmas': [u'/', u'ref', u'>', u'Wilson', u'and', u'he', u'cabinet', u'member', u'fire', u'many', u'black', u'republican', u'office', u'holder', u',', u'but', u'also', u'appoint', u'a', u'few', u'black', u'Democrats', u'.'], u'pos': [u':', u'NN', u'JJR', u'NNP', u'CC', u'PRP$', u'NN', u'NNS', u'VBD', u'JJ', u'JJ', u'JJ', u'NN', u'NNS', u',', u'CC', u'RB', u'VBN', u'DT', u'JJ', u'JJ', u'NNPS', u'.'], u'char_offsets': [[40871, 40872], [40872, 40875], [40875, 40876], [40877, 40883], [40884, 40887], [40888, 40891], [40892, 40899], [40900, 40907], [40908, 40913], [40914, 40918], [40919, 40924], [40925, 40935], [40936, 40942], [40943, 40950], [40950, 40951], [40952, 40955], [40956, 40960], [40961, 40970], [40971, 40972], [40973, 40976], [40977, 40982], [40983, 40992], [40992, 40993]]}) 
answer: set([u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.066649124026298523, {u'tokens': [u'Wilson', u"'s", u'plan', u'still', u'allowed', u'the', u'large', u'banks', u'to', u'have', u'important', u'influence', u',', u'but', u'Wilson', u'went', u'beyond', u'the', u'Aldrich', u'plan', u'and', u'created', u'a', u'central', u'board', u'made', u'up', u'of', u'persons', u'appointed', u'by', u'the', u'President', u'and', u'approved', u'by', u'Congress', u'who', u'would', u'outnumber', u'the', u'board', u'members', u'who', u'were', u'bankers', u'.'], u'lemmas': [u'Wilson', u"'s", u'plan', u'still', u'allow', u'the', u'large', u'bank', u'to', u'have', u'important', u'influence', u',', u'but', u'Wilson', u'go', u'beyond', u'the', u'Aldrich', u'plan', u'and', u'create', u'a', u'central', u'board', u'make', u'up', u'of', u'person', u'appoint', u'by', u'the', u'President', u'and', u'approve', u'by', u'Congress', u'who', u'would', u'outnumber', u'the', u'board', u'member', u'who', u'be', u'banker', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'RB', u'VBD', u'DT', u'JJ', u'NNS', u'TO', u'VB', u'JJ', u'NN', u',', u'CC', u'NNP', u'VBD', u'IN', u'DT', u'NNP', u'NN', u'CC', u'VBD', u'DT', u'JJ', u'NN', u'VBD', u'RP', u'IN', u'NNS', u'VBN', u'IN', u'DT', u'NNP', u'CC', u'VBN', u'IN', u'NNP', u'WP', u'MD', u'VB', u'DT', u'NN', u'NNS', u'WP', u'VBD', u'NNS', u'.'], u'char_offsets': [[17654, 17660], [17660, 17662], [17663, 17667], [17668, 17673], [17674, 17681], [17682, 17685], [17686, 17691], [17692, 17697], [17698, 17700], [17701, 17705], [17706, 17715], [17716, 17725], [17725, 17726], [17727, 17730], [17731, 17737], [17738, 17742], [17743, 17749], [17750, 17753], [17754, 17761], [17762, 17766], [17767, 17770], [17771, 17778], [17779, 17780], [17781, 17788], [17789, 17794], [17795, 17799], [17800, 17802], [17803, 17805], [17806, 17813], [17814, 17823], [17824, 17826], [17827, 17830], [17831, 17840], [17841, 17844], [17845, 17853], [17854, 17856], [17857, 17865], [17866, 17869], [17870, 17875], [17876, 17885], [17886, 17889], [17890, 17895], [17896, 17903], [17904, 17907], [17908, 17912], [17913, 17920], [17920, 17921]]}) 
answer: set([u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.024870764464139938, {u'tokens': [u'Although', u'Wilson', u'had', u'a', u'volatile', u'relationship', u'with', u'American', u'Blacks', u'he', u'was', u'a', u'friend', u'of', u'the', u'Ethiopian', u'Emperor', u'Halie', u'Selassie', u',', u'a', u'black', u'African', u'Monarch', u'.'], u'lemmas': [u'although', u'Wilson', u'have', u'a', u'volatile', u'relationship', u'with', u'american', u'Blacks', u'he', u'be', u'a', u'friend', u'of', u'the', u'ethiopian', u'Emperor', u'Halie', u'Selassie', u',', u'a', u'black', u'african', u'Monarch', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'PRP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNP', u',', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[43654, 43662], [43663, 43669], [43670, 43673], [43674, 43675], [43676, 43684], [43685, 43697], [43698, 43702], [43703, 43711], [43712, 43718], [43719, 43721], [43722, 43725], [43726, 43727], [43728, 43734], [43735, 43737], [43738, 43741], [43742, 43751], [43752, 43759], [43760, 43765], [43766, 43774], [43774, 43775], [43776, 43777], [43778, 43783], [43784, 43791], [43792, 43799], [43799, 43800]]}) 
answer: set([u'member', u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.024522885680198669, {u'tokens': [u'Woodrow', u'Wilson', u'and', u'his', u'cabinet', u'in', u'the', u'Cabinet', u'Room', u'Wilson', u'appointed', u'the', u'following', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'The', u'official', u'White', u'House', u'portrait', u'of', u'President', u'Woodrow', u'Wilson', u'Wilson', u'was', u'a', u'remarkably', u'effective', u'writer', u'and', u'thinker', u'and', u'his', u'diplomatic', u'policies', u'had', u'a', u'profound', u'influence', u'on', u'shaping', u'the', u'world', u'.'], u'lemmas': [u'Woodrow', u'Wilson', u'and', u'he', u'cabinet', u'in', u'the', u'Cabinet', u'Room', u'Wilson', u'appoint', u'the', u'follow', u'Justices', u'to', u'the', u'Supreme', u'Court', u'of', u'the', u'United', u'States', u':', u'the', u'official', u'White', u'House', u'portrait', u'of', u'President', u'Woodrow', u'Wilson', u'Wilson', u'be', u'a', u'remarkably', u'effective', u'writer', u'and', u'thinker', u'and', u'he', u'diplomatic', u'policy', u'have', u'a', u'profound', u'influence', u'on', u'shape', u'the', u'world', u'.'], u'pos': [u'NNP', u'NNP', u'CC', u'PRP$', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'VBG', u'NNPS', u'TO', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u':', u'DT', u'JJ', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'VBD', u'DT', u'RB', u'JJ', u'NN', u'CC', u'NN', u'CC', u'PRP$', u'JJ', u'NNS', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[38994, 39001], [39002, 39008], [39009, 39012], [39013, 39016], [39017, 39024], [39025, 39027], [39028, 39031], [39032, 39039], [39040, 39044], [39045, 39051], [39052, 39061], [39062, 39065], [39066, 39075], [39076, 39084], [39085, 39087], [39088, 39091], [39092, 39099], [39100, 39105], [39106, 39108], [39109, 39112], [39113, 39119], [39120, 39126], [39126, 39127], [39128, 39131], [39132, 39140], [39141, 39146], [39147, 39152], [39153, 39161], [39162, 39164], [39165, 39174], [39175, 39182], [39183, 39189], [39190, 39196], [39197, 39200], [39201, 39202], [39203, 39213], [39214, 39223], [39224, 39230], [39231, 39234], [39235, 39242], [39243, 39246], [39247, 39250], [39251, 39261], [39262, 39270], [39271, 39274], [39275, 39276], [39277, 39285], [39286, 39295], [39296, 39298], [39299, 39306], [39307, 39310], [39311, 39316], [39316, 39317]]}) 
answer: set([u'member', u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.02448340505361557, {u'tokens': [u'Dixon', u'arranged', u'a', u'special', u'White', u'House', u'preview', u'-LRB-', u'this', u'was', u'the', u'first', u'time', u'a', u'film', u'was', u'shown', u'in', u'the', u'White', u'House', u'-RRB-', u'without', u'telling', u'Wilson', u'what', u'the', u'film', u'was', u'about', u'.'], u'lemmas': [u'Dixon', u'arrange', u'a', u'special', u'White', u'House', u'preview', u'-lrb-', u'this', u'be', u'the', u'first', u'time', u'a', u'film', u'be', u'show', u'in', u'the', u'White', u'House', u'-rrb-', u'without', u'tell', u'Wilson', u'what', u'the', u'film', u'be', u'about', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'NN', u'-LRB-', u'DT', u'VBD', u'DT', u'JJ', u'NN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'-RRB-', u'IN', u'VBG', u'NNP', u'WP', u'DT', u'NN', u'VBD', u'RB', u'.'], u'char_offsets': [[42775, 42780], [42781, 42789], [42790, 42791], [42792, 42799], [42800, 42805], [42806, 42811], [42812, 42819], [42820, 42821], [42821, 42825], [42826, 42829], [42830, 42833], [42834, 42839], [42840, 42844], [42845, 42846], [42847, 42851], [42852, 42855], [42856, 42861], [42862, 42864], [42865, 42868], [42869, 42874], [42875, 42880], [42880, 42881], [42882, 42889], [42890, 42897], [42898, 42904], [42905, 42909], [42910, 42913], [42914, 42918], [42919, 42922], [42923, 42928], [42928, 42929]]}) 
answer: set([u'member', u'phi', u'psi', u'kappa', u'fraternity'])
candidate Sentence: (0.024065254256129265, {u'tokens': [u'This', u'was', u',', u'as', u'of', u'2007', u',', u'the', u'most', u'serious', u'case', u'of', u'presidential', u'disability', u'in', u'American', u'history', u'and', u'was', u'later', u'cited', u'as', u'a', u'key', u'example', u'why', u'ratification', u'of', u'the', u'25th', u'Amendment', u'was', u'seen', u'as', u'important', u'.'], u'lemmas': [u'this', u'be', u',', u'as', u'of', u'2007', u',', u'the', u'most', u'serious', u'case', u'of', u'presidential', u'disability', u'in', u'american', u'history', u'and', u'be', u'later', u'cite', u'as', u'a', u'key', u'example', u'why', u'ratification', u'of', u'the', u'25th', u'amendment', u'be', u'see', u'as', u'important', u'.'], u'pos': [u'DT', u'VBD', u',', u'IN', u'IN', u'CD', u',', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'WRB', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'JJ', u'.'], u'char_offsets': [[38456, 38460], [38461, 38464], [38464, 38465], [38466, 38468], [38469, 38471], [38472, 38476], [38476, 38477], [38478, 38481], [38482, 38486], [38487, 38494], [38495, 38499], [38500, 38502], [38503, 38515], [38516, 38526], [38527, 38529], [38530, 38538], [38539, 38546], [38547, 38550], [38551, 38554], [38555, 38560], [38561, 38566], [38567, 38569], [38570, 38571], [38572, 38575], [38576, 38583], [38584, 38587], [38588, 38600], [38601, 38603], [38604, 38607], [38608, 38612], [38613, 38622], [38623, 38626], [38627, 38631], [38632, 38634], [38635, 38644], [38644, 38645]]}) 
answer: set([u'member', u'phi', u'psi', u'kappa', u'fraternity'])

Was Wilson a member of the Phi Kappa Psi fraternity?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Totally.\t
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('Totally.\t') == True
 +  where 'Totally.\t' = <src.question_processing.Question_parser instance at 0x10aaa1dd0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param381] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa1e60>, (<src.tfidf.TF_IDF object at 0x1061d2c10>, set(['wilson', 'woodrow'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aaa1e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.1926250159740448, {u'tokens': [u'Quoted', u'in', u'Palestine', u':', u'The', u'Original', u'Sin', u',', u'Meir', u'Abelson', u'Until', u'Wilson', u'announced', u'his', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'women', u'calling', u'themselves', u'Silent', u'Sentinels', u'protested', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'holding', u'banners', u'such', u'as', u'``', u'Mr.', u'President', u'What', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'lemmas': [u'quote', u'in', u'Palestine', u':', u'the', u'original', u'Sin', u',', u'Meir', u'abelson', u'until', u'Wilson', u'announce', u'he', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'woman', u'call', u'themselves', u'silent', u'sentinel', u'protest', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'hold', u'banner', u'such', u'as', u'``', u'Mr.', u'President', u'what', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'pos': [u'VBN', u'IN', u'NNP', u':', u'DT', u'JJ', u'NNP', u',', u'NNP', u'NN', u'IN', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'VBG', u'PRP', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'JJ', u'IN', u'``', u'NNP', u'NNP', u'WP', u'MD', u'PRP', u'VB', u'IN', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[36783, 36789], [36790, 36792], [36793, 36802], [36802, 36803], [36804, 36807], [36808, 36816], [36817, 36820], [36821, 36822], [36823, 36827], [36828, 36835], [36836, 36841], [36842, 36848], [36849, 36858], [36859, 36862], [36863, 36870], [36871, 36874], [36875, 36883], [36883, 36884], [36885, 36886], [36887, 36892], [36893, 36895], [36896, 36901], [36902, 36909], [36910, 36920], [36921, 36927], [36928, 36937], [36938, 36947], [36948, 36950], [36951, 36956], [36957, 36959], [36960, 36963], [36964, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36997], [36998, 37000], [37001, 37002], [37002, 37005], [37006, 37015], [37016, 37020], [37021, 37025], [37026, 37029], [37030, 37032], [37033, 37036], [37037, 37042], [37043, 37051], [37051, 37052], [37052, 37053]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.048891708254814148, {u'tokens': [u'Wilson', u"'s", u'mother', u'was', u'probably', u'a', u'hypochondriac', u'and', u'Wilson', u'seemed', u'to', u'think', u'that', u'he', u'was', u'often', u'in', u'poorer', u'health', u'than', u'he', u'really', u'was', u'.'], u'lemmas': [u'Wilson', u"'s", u'mother', u'be', u'probably', u'a', u'hypochondriac', u'and', u'Wilson', u'seem', u'to', u'think', u'that', u'he', u'be', u'often', u'in', u'poorer', u'health', u'than', u'he', u'really', u'be', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'RB', u'DT', u'NN', u'CC', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'PRP', u'VBD', u'RB', u'IN', u'JJR', u'NN', u'IN', u'PRP', u'RB', u'VBD', u'.'], u'char_offsets': [[5160, 5166], [5166, 5168], [5169, 5175], [5176, 5179], [5180, 5188], [5189, 5190], [5191, 5204], [5205, 5208], [5209, 5215], [5216, 5222], [5223, 5225], [5226, 5231], [5232, 5236], [5237, 5239], [5240, 5243], [5244, 5249], [5250, 5252], [5253, 5259], [5260, 5266], [5267, 5271], [5272, 5274], [5275, 5281], [5282, 5285], [5285, 5286]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.047708075493574142, {u'tokens': [u'Dixon', u'arranged', u'a', u'special', u'White', u'House', u'preview', u'-LRB-', u'this', u'was', u'the', u'first', u'time', u'a', u'film', u'was', u'shown', u'in', u'the', u'White', u'House', u'-RRB-', u'without', u'telling', u'Wilson', u'what', u'the', u'film', u'was', u'about', u'.'], u'lemmas': [u'Dixon', u'arrange', u'a', u'special', u'White', u'House', u'preview', u'-lrb-', u'this', u'be', u'the', u'first', u'time', u'a', u'film', u'be', u'show', u'in', u'the', u'White', u'House', u'-rrb-', u'without', u'tell', u'Wilson', u'what', u'the', u'film', u'be', u'about', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u'NN', u'-LRB-', u'DT', u'VBD', u'DT', u'JJ', u'NN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'-RRB-', u'IN', u'VBG', u'NNP', u'WP', u'DT', u'NN', u'VBD', u'RB', u'.'], u'char_offsets': [[42775, 42780], [42781, 42789], [42790, 42791], [42792, 42799], [42800, 42805], [42806, 42811], [42812, 42819], [42820, 42821], [42821, 42825], [42826, 42829], [42830, 42833], [42834, 42839], [42840, 42844], [42845, 42846], [42847, 42851], [42852, 42855], [42856, 42861], [42862, 42864], [42865, 42868], [42869, 42874], [42875, 42880], [42880, 42881], [42882, 42889], [42890, 42897], [42898, 42904], [42905, 42909], [42910, 42913], [42914, 42918], [42919, 42922], [42923, 42928], [42928, 42929]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.046922024339437485, {u'tokens': [u'For', u'at', u'least', u'a', u'few', u'months', u',', u'he', u'was', u'confined', u'to', u'a', u'wheelchair', u'.'], u'lemmas': [u'for', u'at', u'least', u'a', u'few', u'month', u',', u'he', u'be', u'confine', u'to', u'a', u'wheelchair', u'.'], u'pos': [u'IN', u'IN', u'JJS', u'DT', u'JJ', u'NNS', u',', u'PRP', u'VBD', u'VBN', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[37848, 37851], [37852, 37854], [37855, 37860], [37861, 37862], [37863, 37866], [37867, 37873], [37873, 37874], [37875, 37877], [37878, 37881], [37882, 37890], [37891, 37893], [37894, 37895], [37896, 37906], [37906, 37907]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.045791465789079666, {u'tokens': [u'ISSN', u'0021-8723', u'Fulltext', u'in', u'Jstor', u'When', u'a', u'delegation', u'of', u'blacks', u'protested', u'his', u'discriminatory', u'actions', u',', u'Wilson', u'told', u'them', u'that', u'``', u'segregation', u'is', u'not', u'a', u'humiliation', u'but', u'a', u'benefit', u',', u'and', u'ought', u'to', u'be', u'so', u'regarded', u'by', u'you', u'gentlemen', u'.', u"''"], u'lemmas': [u'ISSN', u'0021-8723', u'Fulltext', u'in', u'Jstor', u'when', u'a', u'delegation', u'of', u'black', u'protest', u'he', u'discriminatory', u'action', u',', u'Wilson', u'tell', u'they', u'that', u'``', u'segregation', u'be', u'not', u'a', u'humiliation', u'but', u'a', u'benefit', u',', u'and', u'ought', u'to', u'be', u'so', u'regard', u'by', u'you', u'gentleman', u'.', u"''"], u'pos': [u'NNP', u'CD', u'NNP', u'IN', u'NNP', u'WRB', u'DT', u'NN', u'IN', u'NNS', u'VBD', u'PRP$', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'PRP', u'IN', u'``', u'NN', u'VBZ', u'RB', u'DT', u'NN', u'CC', u'DT', u'NN', u',', u'CC', u'MD', u'TO', u'VB', u'RB', u'VBN', u'IN', u'PRP', u'NNS', u'.', u"''"], u'char_offsets': [[41338, 41342], [41343, 41352], [41353, 41361], [41362, 41364], [41365, 41370], [41372, 41376], [41377, 41378], [41379, 41389], [41390, 41392], [41393, 41399], [41400, 41409], [41410, 41413], [41414, 41428], [41429, 41436], [41436, 41437], [41438, 41444], [41445, 41449], [41450, 41454], [41455, 41459], [41460, 41461], [41461, 41472], [41473, 41475], [41476, 41479], [41480, 41481], [41482, 41493], [41494, 41497], [41498, 41499], [41500, 41507], [41507, 41508], [41509, 41512], [41513, 41518], [41519, 41521], [41522, 41524], [41525, 41527], [41528, 41536], [41537, 41539], [41540, 41543], [41544, 41553], [41553, 41554], [41554, 41555]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.045640874654054642, {u'tokens': [u'Although', u'Wilson', u'had', u'a', u'volatile', u'relationship', u'with', u'American', u'Blacks', u'he', u'was', u'a', u'friend', u'of', u'the', u'Ethiopian', u'Emperor', u'Halie', u'Selassie', u',', u'a', u'black', u'African', u'Monarch', u'.'], u'lemmas': [u'although', u'Wilson', u'have', u'a', u'volatile', u'relationship', u'with', u'american', u'Blacks', u'he', u'be', u'a', u'friend', u'of', u'the', u'ethiopian', u'Emperor', u'Halie', u'Selassie', u',', u'a', u'black', u'african', u'Monarch', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'PRP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'NNP', u',', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[43654, 43662], [43663, 43669], [43670, 43673], [43674, 43675], [43676, 43684], [43685, 43697], [43698, 43702], [43703, 43711], [43712, 43718], [43719, 43721], [43722, 43725], [43726, 43727], [43728, 43734], [43735, 43737], [43738, 43741], [43742, 43751], [43752, 43759], [43760, 43765], [43766, 43774], [43774, 43775], [43776, 43777], [43778, 43783], [43784, 43791], [43792, 43799], [43799, 43800]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.043714001774787903, {u'tokens': [u'A', u'sword', u'-LRB-', u'a', u'gift', u'from', u'Selassie', u'-RRB-', u'can', u'still', u'be', u'seen', u'in', u'Wilson', u"'s", u'Washington', u'DC', u'home', u'.'], u'lemmas': [u'a', u'sword', u'-lrb-', u'a', u'gift', u'from', u'Selassie', u'-rrb-', u'can', u'still', u'be', u'see', u'in', u'Wilson', u"'s", u'Washington', u'DC', u'home', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'DT', u'NN', u'IN', u'NNP', u'-RRB-', u'MD', u'RB', u'VB', u'VBN', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[43801, 43802], [43803, 43808], [43808, 43809], [43809, 43810], [43811, 43815], [43816, 43820], [43821, 43829], [43829, 43830], [43831, 43834], [43835, 43840], [43841, 43843], [43844, 43848], [43849, 43851], [43852, 43858], [43858, 43860], [43861, 43871], [43872, 43874], [43875, 43879], [43879, 43880]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.041840910911560059, {u'tokens': [u'Wilson', u"'s", u'father', u'was', u'originally', u'from', u'Steubenville', u',', u'Ohio', u'where', u'his', u'grandfather', u'had', u'been', u'an', u'abolitionist', u'newspaper', u'publisher', u'and', u'his', u'uncles', u'were', u'Republicans', u'.'], u'lemmas': [u'Wilson', u"'s", u'father', u'be', u'originally', u'from', u'Steubenville', u',', u'Ohio', u'where', u'he', u'grandfather', u'have', u'be', u'a', u'abolitionist', u'newspaper', u'publisher', u'and', u'he', u'uncle', u'be', u'Republicans', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'RB', u'IN', u'NNP', u',', u'NNP', u'WRB', u'PRP$', u'NN', u'VBD', u'VBN', u'DT', u'NN', u'NN', u'NN', u'CC', u'PRP$', u'NNS', u'VBD', u'NNPS', u'.'], u'char_offsets': [[2943, 2949], [2949, 2951], [2952, 2958], [2959, 2962], [2963, 2973], [2974, 2978], [2979, 2991], [2991, 2992], [2993, 2997], [2998, 3003], [3004, 3007], [3008, 3019], [3020, 3023], [3024, 3028], [3029, 3031], [3032, 3044], [3045, 3054], [3055, 3064], [3065, 3068], [3069, 3072], [3073, 3079], [3080, 3084], [3085, 3096], [3096, 3097]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.040760926902294159, {u'tokens': [u'*', u'His', u'earliest', u'memory', u',', u'from', u'age', u'3', u',', u'was', u'of', u'hearing', u'that', u'Abraham', u'Lincoln', u'had', u'been', u'elected', u'and', u'that', u'a', u'war', u'was', u'coming', u'.'], u'lemmas': [u'*', u'he', u'earliest', u'memory', u',', u'from', u'age', u'3', u',', u'be', u'of', u'hearing', u'that', u'Abraham', u'Lincoln', u'have', u'be', u'elect', u'and', u'that', u'a', u'war', u'be', u'come', u'.'], u'pos': [u'SYM', u'PRP$', u'JJS', u'NN', u',', u'IN', u'NN', u'CD', u',', u'VBD', u'IN', u'NN', u'WDT', u'NNP', u'NNP', u'VBD', u'VBN', u'VBN', u'CC', u'IN', u'DT', u'NN', u'VBD', u'VBG', u'.'], u'char_offsets': [[46530, 46531], [46532, 46535], [46536, 46544], [46545, 46551], [46551, 46552], [46553, 46557], [46558, 46561], [46562, 46563], [46563, 46564], [46565, 46568], [46569, 46571], [46572, 46579], [46580, 46584], [46585, 46592], [46593, 46600], [46601, 46604], [46605, 46609], [46610, 46617], [46618, 46621], [46622, 46626], [46627, 46628], [46629, 46632], [46633, 46636], [46637, 46643], [46643, 46644]]}) 
answer: set([u'enthusiast', u'automobile'])
candidate Sentence: (0.039270944893360138, {u'tokens': [u'*', u'Wilson', u'was', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'lemmas': [u'*', u'Wilson', u'be', u'a', u'member', u'of', u'the', u'Phi', u'Kappa', u'Psi', u'fraternity', u'.'], u'pos': [u'SYM', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[47095, 47096], [47097, 47103], [47104, 47107], [47108, 47109], [47110, 47116], [47117, 47119], [47120, 47123], [47124, 47127], [47128, 47133], [47134, 47137], [47138, 47148], [47148, 47149]]}) 
answer: set([u'enthusiast', u'automobile'])

Was Wilson an automobile enthusiast?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x10aaa1e60>.answer
_____________________________ test_yesno[param384] _____________________________

param = (<src.question_processing.Question_parser instance at 0x10aaa4050>, (<src.tfidf.TF_IDF object at 0x1061d2c10>, set(['wilson', 'woodrow'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Yeah') == True
E                +  where 'Yeah' = <src.question_processing.Question_parser instance at 0x10aaa4050>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42844122648239136, {u'tokens': [u'His', u'father', u'defended', u'slavery', u',', u'owned', u'slaves', u'and', u'set', u'up', u'a', u'Sunday', u'school', u'for', u'them', u'.'], u'lemmas': [u'he', u'father', u'defend', u'slavery', u',', u'own', u'slave', u'and', u'set', u'up', u'a', u'Sunday', u'school', u'for', u'they', u'.'], u'pos': [u'PRP$', u'NN', u'VBD', u'NN', u',', u'VBN', u'NNS', u'CC', u'VBN', u'RP', u'DT', u'NNP', u'NN', u'IN', u'PRP', u'.'], u'char_offsets': [[3171, 3174], [3175, 3181], [3182, 3190], [3191, 3198], [3198, 3199], [3200, 3205], [3206, 3212], [3213, 3216], [3217, 3220], [3221, 3223], [3224, 3225], [3226, 3232], [3233, 3239], [3240, 3243], [3244, 3248], [3248, 3249]]}) 
answer: set([])
candidate Sentence: (0.20742020010948181, {u'tokens': [u'In', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'did', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'Fourteen', u'Points', u'were', u'implemented', u'fully', u'in', u'Europe', u'.'], u'lemmas': [u'in', u'the', u'end', u',', u'Wilson', u"'s", u'own', u'Congress', u'do', u'not', u'accept', u'the', u'League', u'and', u'only', u'four', u'of', u'the', u'original', u'fourteen', u'point', u'be', u'implement', u'fully', u'in', u'Europe', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'POS', u'JJ', u'NNP', u'VBD', u'RB', u'VB', u'DT', u'NNP', u'CC', u'RB', u'CD', u'IN', u'DT', u'JJ', u'CD', u'NNS', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[30595, 30597], [30598, 30601], [30602, 30605], [30605, 30606], [30607, 30613], [30613, 30615], [30616, 30619], [30620, 30628], [30629, 30632], [30633, 30636], [30637, 30643], [30644, 30647], [30648, 30654], [30655, 30658], [30659, 30663], [30664, 30668], [30669, 30671], [30672, 30675], [30676, 30684], [30685, 30693], [30694, 30700], [30701, 30705], [30706, 30717], [30718, 30723], [30724, 30726], [30727, 30733], [30733, 30734]]}) 
answer: set([u'slave', u'father'])
candidate Sentence: (0.13761129975318909, {u'tokens': [u'Quoted', u'in', u'Palestine', u':', u'The', u'Original', u'Sin', u',', u'Meir', u'Abelson', u'Until', u'Wilson', u'announced', u'his', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'women', u'calling', u'themselves', u'Silent', u'Sentinels', u'protested', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'holding', u'banners', u'such', u'as', u'``', u'Mr.', u'President', u'What', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'lemmas': [u'quote', u'in', u'Palestine', u':', u'the', u'original', u'Sin', u',', u'Meir', u'abelson', u'until', u'Wilson', u'announce', u'he', u'support', u'for', u'suffrage', u',', u'a', u'group', u'of', u'woman', u'call', u'themselves', u'silent', u'sentinel', u'protest', u'in', u'front', u'of', u'the', u'White', u'House', u',', u'hold', u'banner', u'such', u'as', u'``', u'Mr.', u'President', u'what', u'will', u'you', u'do', u'for', u'woman', u'suffrage', u'?', u"''"], u'pos': [u'VBN', u'IN', u'NNP', u':', u'DT', u'JJ', u'NNP', u',', u'NNP', u'NN', u'IN', u'NNP', u'VBD', u'PRP$', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'VBG', u'PRP', u'JJ', u'NNS', u'VBN', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'JJ', u'IN', u'``', u'NNP', u'NNP', u'WP', u'MD', u'PRP', u'VB', u'IN', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[36783, 36789], [36790, 36792], [36793, 36802], [36802, 36803], [36804, 36807], [36808, 36816], [36817, 36820], [36821, 36822], [36823, 36827], [36828, 36835], [36836, 36841], [36842, 36848], [36849, 36858], [36859, 36862], [36863, 36870], [36871, 36874], [36875, 36883], [36883, 36884], [36885, 36886], [36887, 36892], [36893, 36895], [36896, 36901], [36902, 36909], [36910, 36920], [36921, 36927], [36928, 36937], [36938, 36947], [36948, 36950], [36951, 36956], [36957, 36959], [36960, 36963], [36964, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36997], [36998, 37000], [37001, 37002], [37002, 37005], [37006, 37015], [37016, 37020], [37021, 37025], [37026, 37029], [37030, 37032], [37033, 37036], [37037, 37042], [37043, 37051], [37051, 37052], [37052, 37053]]}) 
answer: set([u'father', u'slave'])
candidate Sentence: (0.11378587782382965, {u'tokens': [u'He', u'studied', u'at', u'home', u'under', u'his', u'father', u"'s", u'guidance', u'and', u'took', u'classes', u'in', u'a', u'small', u'school', u'in', u'Augusta', u'.'], u'lemmas': [u'he', u'study', u'at', u'home', u'under', u'he', u'father', u"'s", u'guidance', u'and', u'take', u'class', u'in', u'a', u'small', u'school', u'in', u'Augusta', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'NN', u'IN', u'PRP$', u'NN', u'POS', u'NN', u'CC', u'VBD', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[4121, 4123], [4124, 4131], [4132, 4134], [4135, 4139], [4140, 4145], [4146, 4149], [4150, 4156], [4156, 4158], [4159, 4167], [4168, 4171], [4172, 4176], [4177, 4184], [4185, 4187], [4188, 4189], [4190, 4195], [4196, 4202], [4203, 4205], [4206, 4213], [4213, 4214]]}) 
answer: set([u'slave'])
candidate Sentence: (0.10952600091695786, {u'tokens': [u'The', u'father', u'also', u'briefly', u'served', u'as', u'a', u'chaplain', u'to', u'the', u'Confederate', u'army', u'.'], u'lemmas': [u'the', u'father', u'also', u'briefly', u'serve', u'as', u'a', u'chaplain', u'to', u'the', u'confederate', u'army', u'.'], u'pos': [u'DT', u'NN', u'RB', u'RB', u'VBD', u'IN', u'DT', u'NN', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[3299, 3302], [3303, 3309], [3310, 3314], [3315, 3322], [3323, 3329], [3330, 3332], [3333, 3334], [3335, 3343], [3344, 3346], [3347, 3350], [3351, 3362], [3363, 3367], [3367, 3368]]}) 
answer: set([u'slave'])
candidate Sentence: (0.093991786241531372, {u'tokens': [u'Wilson', u"'s", u'father', u'was', u'originally', u'from', u'Steubenville', u',', u'Ohio', u'where', u'his', u'grandfather', u'had', u'been', u'an', u'abolitionist', u'newspaper', u'publisher', u'and', u'his', u'uncles', u'were', u'Republicans', u'.'], u'lemmas': [u'Wilson', u"'s", u'father', u'be', u'originally', u'from', u'Steubenville', u',', u'Ohio', u'where', u'he', u'grandfather', u'have', u'be', u'a', u'abolitionist', u'newspaper', u'publisher', u'and', u'he', u'uncle', u'be', u'Republicans', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'RB', u'IN', u'NNP', u',', u'NNP', u'WRB', u'PRP$', u'NN', u'VBD', u'VBN', u'DT', u'NN', u'NN', u'NN', u'CC', u'PRP$', u'NNS', u'VBD', u'NNPS', u'.'], u'char_offsets': [[2943, 2949], [2949, 2951], [2952, 2958], [2959, 2962], [2963, 2973], [2974, 2978], [2979, 2991], [2991, 2992], [2993, 2997], [2998, 3003], [3004, 3007], [3008, 3019], [3020, 3023], [3024, 3028], [3029, 3031], [3032, 3044], [3045, 3054], [3055, 3064], [3065, 3068], [3069, 3072], [3073, 3079], [3080, 3084], [3085, 3096], [3096, 3097]]}) 
answer: set([u'slave'])
candidate Sentence: (0.090179577469825745, {u'tokens': [u'Wilson', u"'s", u'father', u'was', u'one', u'of', u'the', u'founders', u'of', u'the', u'Southern', u'Presbyterian', u'Church', u'in', u'the', u'United', u'States', u'-LRB-', u'PCUS', u'-RRB-', u'after', u'it', u'split', u'from', u'the', u'northern', u'Presbyterians', u'in', u'1861', u'.'], u'lemmas': [u'Wilson', u"'s", u'father', u'be', u'one', u'of', u'the', u'founder', u'of', u'the', u'Southern', u'Presbyterian', u'Church', u'in', u'the', u'United', u'States', u'-lrb-', u'pcus', u'-rrb-', u'after', u'it', u'split', u'from', u'the', u'northern', u'Presbyterians', u'in', u'1861', u'.'], u'pos': [u'NNP', u'POS', u'NN', u'VBD', u'CD', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNPS', u'-LRB-', u'NN', u'-RRB-', u'IN', u'PRP', u'VBD', u'IN', u'DT', u'JJ', u'NNPS', u'IN', u'CD', u'.'], u'char_offsets': [[3369, 3375], [3375, 3377], [3378, 3384], [3385, 3388], [3389, 3392], [3393, 3395], [3396, 3399], [3400, 3408], [3409, 3411], [3412, 3415], [3416, 3424], [3425, 3437], [3438, 3444], [3445, 3447], [3448, 3451], [3452, 3458], [3459, 3465], [3466, 3467], [3467, 3471], [3471, 3472], [3473, 3478], [3479, 3481], [3482, 3487], [3488, 3492], [3493, 3496], [3497, 3505], [3506, 3519], [3520, 3522], [3523, 3527], [3527, 3528]]}) 
answer: set([u'slave'])
candidate Sentence: (0.084941104054450989, {u'tokens': [u'Wilson', u'did', u'not', u'learn', u'to', u'read', u'until', u'he', u'was', u'about', u'12', u'years', u'old', u'.'], u'lemmas': [u'Wilson', u'do', u'not', u'learn', u'to', u'read', u'until', u'he', u'be', u'about', u'12', u'year', u'old', u'.'], u'pos': [u'NNP', u'VBD', u'RB', u'VB', u'TO', u'VB', u'IN', u'PRP', u'VBD', u'RB', u'CD', u'NNS', u'JJ', u'.'], u'char_offsets': [[3856, 3862], [3863, 3866], [3867, 3870], [3871, 3876], [3877, 3879], [3880, 3884], [3885, 3890], [3891, 3893], [3894, 3897], [3898, 3903], [3904, 3906], [3907, 3912], [3913, 3916], [3916, 3917]]}) 
answer: set([u'slave', u'father'])
candidate Sentence: (0.083800248801708221, {u'tokens': [u'-LRB-', u'DuBois', u'accepted', u'but', u'failed', u'his', u'Army', u'physical', u'and', u'did', u'not', u'serve', u'.', u'-RRB-'], u'lemmas': [u'-lrb-', u'DuBois', u'accept', u'but', u'fail', u'he', u'Army', u'physical', u'and', u'do', u'not', u'serve', u'.', u'-rrb-'], u'pos': [u'-LRB-', u'NNP', u'VBD', u'CC', u'VBD', u'PRP$', u'NNP', u'JJ', u'CC', u'VBD', u'RB', u'VB', u'.', u'-RRB-'], u'char_offsets': [[41139, 41140], [41140, 41146], [41147, 41155], [41156, 41159], [41160, 41166], [41167, 41170], [41171, 41175], [41176, 41184], [41185, 41188], [41189, 41192], [41193, 41196], [41197, 41202], [41202, 41203], [41203, 41204]]}) 
answer: set([u'father', u'slave'])
candidate Sentence: (0.078670866787433624, {u'tokens': [u'Wilson', u'spent', u'the', u'majority', u'of', u'his', u'childhood', u',', u'up', u'to', u'age', u'14', u',', u'in', u'Augusta', u',', u'Georgia', u',', u'where', u'his', u'father', u'was', u'minister', u'of', u'the', u'First', u'Presbyterian', u'Church', u'.'], u'lemmas': [u'Wilson', u'spend', u'the', u'majority', u'of', u'he', u'childhood', u',', u'up', u'to', u'age', u'14', u',', u'in', u'Augusta', u',', u'Georgia', u',', u'where', u'he', u'father', u'be', u'minister', u'of', u'the', u'First', u'Presbyterian', u'Church', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'RB', u'TO', u'NN', u'CD', u',', u'IN', u'NNP', u',', u'NNP', u',', u'WRB', u'PRP$', u'NN', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[3713, 3719], [3720, 3725], [3726, 3729], [3730, 3738], [3739, 3741], [3742, 3745], [3746, 3755], [3755, 3756], [3757, 3759], [3760, 3762], [3763, 3766], [3767, 3769], [3769, 3770], [3771, 3773], [3774, 3781], [3781, 3782], [3783, 3790], [3790, 3791], [3792, 3797], [3798, 3801], [3802, 3808], [3809, 3812], [3813, 3821], [3822, 3824], [3825, 3828], [3829, 3834], [3835, 3847], [3848, 3854], [3854, 3855]]}) 
answer: set([u'slave'])

Did Wilson's father own slaves?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yeah
Difficulty = easy

Yes
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('Yeah') == True
 +  where 'Yeah' = <src.question_processing.Question_parser instance at 0x10aaa4050>.answer
 +  and   True = str2bool('Yes')
=============== 101 failed, 284 passed, 1 error in 35.41 seconds ===============
