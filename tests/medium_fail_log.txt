============================= test session starts ==============================
platform darwin -- Python 2.7.10, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
rootdir: /Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests, inifile: 
collected 192 items

test_compute.py EE....FF....F.FFF.FFFFFF...FF.FFFFFFFF.FFFFF..FFFF..FFF.FFFFFFFFFF.FFFFFFFFFFFF..FFFFFFFF..FFFF....FFFFFFFF....FF..FFFFFFFF..FFFFFFFF..FF..FFFF.FFFFFFFFF.FFFFFFFFF......FFFF..FFF.FFFF..FFFFFFF

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_yesno _________________________
file /Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py, line 23
  def test_yesno(param):
        fixture 'param' not found
        available fixtures: tmpdir_factory, pytestconfig, cache, recwarn, monkeypatch, record_xml_property, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py:23
_____________________ ERROR at setup of test_yesno_helper ______________________
file /Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py, line 27
  def test_yesno_helper(yesno_param):
        fixture 'yesno_param' not found
        available fixtures: tmpdir_factory, pytestconfig, cache, recwarn, monkeypatch, record_xml_property, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py:27
=================================== FAILURES ===================================
_________________________ test_factoid[param_factoid4] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fac5a8>, <src.tfidf.TF_IDF object at 0x112e02790>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02790>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Volta was born in Como , Italy and was taught in the public schools there .
[u'PERSON', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Como , Italy
Como , Italy
['Como , Italy', 'Como , Italy']
evaluated condition:  False
Genereated answer  Como , Italy
Ref Answer  Como

Where was Volta born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Como
Difficulty = medium
Article_Title = Alessandro_Volta
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
_________________________ test_factoid[param_factoid5] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fac7e8>, <src.tfidf.TF_IDF object at 0x112e02790>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02790>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Volta was born in Como , Italy and was taught in the public schools there .
[u'PERSON', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Como , Italy
Como , Italy
['Como , Italy', 'Como , Italy']
evaluated condition:  False
Genereated answer  Como , Italy
Ref Answer  Como, Italy

Where was Volta born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Como, Italy
Difficulty = medium
Article_Title = Alessandro_Volta
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid10] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88d88>, <src.tfidf.TF_IDF object at 0x10e2cb250>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb250>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Jacobus Henricus van ' t Hoff showed that Avogadro 's theory also held in dilute solutions .
[u'PERSON', u'PERSON', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Jacobus Henricus van '
[]
Avogadro 's
["Jacobus Henricus van '", '[]', "Avogadro 's"]
evaluated condition:  False
Genereated answer  Jacobus Henricus van '
Ref Answer  Jacobus Henricus van Hoff

Who showed that Avogadro's theory held in dilute solutions?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Jacobus Henricus van Hoff
Difficulty = medium
Article_Title = Amedeo_Avogadro
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid12] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88cb0>, <src.tfidf.TF_IDF object at 0x111107510>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107510>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  This is how new colonies start in most species .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  most ants travel by walking

How do most ants travel?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = most ants travel by walking
Difficulty = medium
Article_Title = Ant
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid13] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88e60>, <src.tfidf.TF_IDF object at 0x111107510>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107510>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  This is how new colonies start in most species .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  by walking

How do most ants travel?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = by walking
Difficulty = medium
Article_Title = Ant
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid14] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88b90>, <src.tfidf.TF_IDF object at 0x111107510>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107510>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Mark Twain wrote about ants in his A Tramp Abroad .
[u'PERSON', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Mark Twain
['Mark Twain']
evaluated condition:  False
Genereated answer  Mark Twain
Ref Answer  mark twain wrote about ants

Who wrote about ants in A Tramp Abroad?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = mark twain wrote about ants
Difficulty = medium
Article_Title = Ant
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid16] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88c68>, <src.tfidf.TF_IDF object at 0x111107510>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107510>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Bullet ants -LRB- Paraponera -RRB- , located in Central and South America , are considered to have the most painful sting of any insect , although it is usually not fatal to humans .
[u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Paraponera
Central and South America
['Paraponera', 'Central and South America']
evaluated condition:  False
Genereated answer  Paraponera
Ref Answer  Bullet ants are located in Central and South America.

Where are bullet ants located?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Bullet ants are located in Central and South America.
Difficulty = medium
Article_Title = Ant
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid17] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114e88c20>, <src.tfidf.TF_IDF object at 0x112e02710>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02710>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Brussels Airport is about 45 km from the city of Antwerp , and connects the city worldwide .
[u'LOCATION', u'LOCATION', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Brussels Airport
Antwerp
['Brussels Airport', 'Antwerp']
evaluated condition:  False
Genereated answer  Brussels Airport
Ref Answer  Antwerp is in Belgium

Where is the city of Antwerp?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Antwerp is in Belgium
Difficulty = medium
Article_Title = Antwerp
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid18] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114abe290>, <src.tfidf.TF_IDF object at 0x10f66b6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b6d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  * Iraqi Arabic , spoken by about 29 million people in Iraq .
[u'O', u'MISC', u'MISC', u'O', u'O', u'O', u'O', u'NUMBER', u'NUMBER', u'O', u'O', u'LOCATION', u'O']
[]
['[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  280 million people.

How many people speak the Arabic language?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 280 million people.
Difficulty = medium
Article_Title = Arabic_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid19] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114abe128>, <src.tfidf.TF_IDF object at 0x10f66b6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b6d0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  An example of a text written in Arabic calligraphy .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Many styles were developed after 786.

When was Arabic calligraphy invented?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Many styles were developed after 786.
Difficulty = medium
Article_Title = Arabic_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid20] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fad290>, <src.tfidf.TF_IDF object at 0x10f66b6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b6d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  * Bahrani Arabic , spoken by Bahrani Shia in Bahrain , where it exhibits some differences from Bahraini Arabic .
[u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'MISC', u'O']
Bahrain
['Bahrain']
evaluated condition:  False
Genereated answer  Bahrain
Ref Answer  The Middle East and North Africa

Where is Arabic spoken?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The Middle East and North Africa
Difficulty = medium
Article_Title = Arabic_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid21] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fad4d0>, <src.tfidf.TF_IDF object at 0x10f66b6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b6d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  In most of present-day North Africa , the Western Arabic numerals -LRB- 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 -RRB- are used .
[u'O', u'O', u'O', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'MISC', u'MISC', u'O', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'O', u'O', u'O']
present-day North Africa
['present-day North Africa']
evaluated condition:  False
Genereated answer  present-day North Africa
Ref Answer  North Africa

Where are the Western Arabic numerals used?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = North Africa
Difficulty = medium
Article_Title = Arabic_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid25] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fad5a8>, <src.tfidf.TF_IDF object at 0x112e02c10>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02c10>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Subsequently , the Altes Museum -LRB- Old Museum -RRB- in the Lustgarten displaying the bust of Queen Nefertiti , A 3,000-year-old smile , Expatica.Com .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'DURATION', u'O', u'O', u'O', u'O']
[]
Ref Answer  The bust of Queen Nefertiti is in the Altes Museum.

Where is the bust of Queen Nefertiti?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The bust of Queen Nefertiti is in the Altes Museum.
Difficulty = medium
Article_Title = Berlin
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid26] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fad638>, <src.tfidf.TF_IDF object at 0x112e02c10>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02c10>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  -LRB- `` Berlin will live and the wall will fall . '' -RRB-
[u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Berlin
['Berlin']
evaluated condition:  False
Genereated answer  Berlin
Ref Answer  The German President lives west of the center, Schloss Bellevue.

Where does the German President live?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The German President lives west of the center, Schloss Bellevue.
Difficulty = medium
Article_Title = Berlin
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid28] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2878>, <src.tfidf.TF_IDF object at 0x112e02110>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02110>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  How so ?
[u'O', u'O', u'O']
[]
Ref Answer  at the age of three

How old was Pascal when he lost his mother?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = at the age of three
Difficulty = medium
Article_Title = Blaise_Pascal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid29] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2638>, <src.tfidf.TF_IDF object at 0x112e02110>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02110>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  How so ?
[u'O', u'O', u'O']
[]
Ref Answer  3.

How old was Pascal when he lost his mother?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 3.
Difficulty = medium
Article_Title = Blaise_Pascal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid30] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2710>, <src.tfidf.TF_IDF object at 0x112e02110>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02110>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Pascal had two sisters , the younger Jacqueline and the elder Gilberte .
[u'PERSON', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'PERSON', u'O']
Pascal
Jacqueline
Gilberte
['Pascal', 'Jacqueline', 'Gilberte']
evaluated condition:  False
Genereated answer  Pascal
Ref Answer  Jacqueline

Who was Pascal's younger sister?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Jacqueline
Difficulty = medium
Article_Title = Blaise_Pascal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid31] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2830>, <src.tfidf.TF_IDF object at 0x112e02110>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02110>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Pascal had two sisters , the younger Jacqueline and the elder Gilberte .
[u'PERSON', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'PERSON', u'O']
Pascal
Jacqueline
Gilberte
['Pascal', 'Jacqueline', 'Gilberte']
evaluated condition:  False
Genereated answer  Pascal
Ref Answer  Jacqueline.

Who was Pascal's younger sister?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Jacqueline.
Difficulty = medium
Article_Title = Blaise_Pascal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid32] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb28c0>, <src.tfidf.TF_IDF object at 0x10f66b950>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b950>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  When Taira no Masakado was secretly preparing for his famous revolt , there appeared in Kyoto so vast a swarm of butterflies that the people were frightened - thinking the apparition to be a portent of coming evil .
[u'O', u'PERSON', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Taira no Masakado
Kyoto
['Taira no Masakado', 'Kyoto']
evaluated condition:  False
Genereated answer  Taira no Masakado
Ref Answer  In Kyoto there was a vast swarm of butterflies.

Where was there a vast swarm of butterflies?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = In Kyoto there was a vast swarm of butterflies.
Difficulty = medium
Article_Title = Butterfly
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a6.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid33] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2908>, <src.tfidf.TF_IDF object at 0x112e02e10>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02e10>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  From 1757 to 1759 he joined his father 's family in Montpellier and took part in the work of the academy of the city , directed by the mathematician Augustin Danyzy .
[u'O', u'DATE', u'O', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O']
[]
[]
['[]', '[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  From 1757 to 1759 he joined his father's family in Montpellier.

When did Charles-Augustin de Coulomb join his father's family in Montpeillier?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = From 1757 to 1759 he joined his father's family in Montpellier.
Difficulty = medium
Article_Title = Charles-Augustin_de_Coulomb
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a6.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid34] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fae1b8>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The Zhonghua Zihai -LRB- 1994 -RRB- contains 85,568 head entries for character definitions , and is the largest reference work based purely on character and its literary variants .
[u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
1994
85,568 head entries
['1994', '85,568 head entries']
evaluated condition:  False
Genereated answer  1994
Ref Answer  85,568 head entries

How many head entries for character definitions does the Zhonghua Zihai &#20013;&#21326;&#23383;&#28023; (1994) contain?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 85,568 head entries
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid35] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb1488>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The Zhonghua Zihai -LRB- 1994 -RRB- contains 85,568 head entries for character definitions , and is the largest reference work based purely on character and its literary variants .
[u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
1994
85,568 head entries
['1994', '85,568 head entries']
evaluated condition:  False
Genereated answer  1994
Ref Answer  54,678

How many head entries for character definitions does the Zhonghua Zihai &#20013;&#21326;&#23383;&#28023; (1994) contain?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 54,678
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid37] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb1f38>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Classical Chinese literature began in the Spring and Autumn period , although written records have been discovered as far back as the 14th to 11th centuries BCE Shang dynasty oracle bones using the oracle bone scripts .
[u'O', u'MISC', u'O', u'O', u'O', u'O', u'DATE', u'O', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'ORDINAL', u'O', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
the Spring
Autumn period
11th centuries
['the Spring', 'Autumn period', '11th centuries']
evaluated condition:  False
Genereated answer  the Spring
Ref Answer  Classical Chinese literature began in the 14th to 11th centuires BCE.

When did classical Chinese literature begin?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Classical Chinese literature began in the 14th to 11th centuires BCE.
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid38] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb19e0>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Within the Peoples Republic of China and Singapore , it is common for the government to refer to all divisions of the Sinitic language -LRB- s -RRB- beside Standard Mandarin as fangyan -LRB- regional tongues , often translated as dialects -RRB- .
[u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The government of the People's Republic of China refers to all divisions of the Sinitic language(s) besides Standard Mandarin as fangyan.

How does the government of the People's Republic of China often refer to all divisions of the Sinitic language(s) besides Standard Mandarin?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = The government of the People's Republic of China refers to all divisions of the Sinitic language(s) besides Standard Mandarin as fangyan.
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid39] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fafc68>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Within the Peoples Republic of China and Singapore , it is common for the government to refer to all divisions of the Sinitic language -LRB- s -RRB- beside Standard Mandarin as fangyan -LRB- regional tongues , often translated as dialects -RRB- .
[u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The PRC commonly refers to all divisons of the Sinitic language(s) beside Standard Mandarin as fangyan, or "regional tongues."

How does the government of the People's Republic of China often refer to all divisions of the Sinitic language(s) besides Standard Mandarin?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = The PRC commonly refers to all divisons of the Sinitic language(s) beside Standard Mandarin as fangyan, or "regional tongues."
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid40] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb24d0>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Linguists are more confident of having reconstructed how Middle Chinese sounded .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Middle Chinese was used during Southern and Northern Dynasties and the Sua, Tang, and Sang dynasties.

When was Middle Chinese used?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Middle Chinese was used during Southern and Northern Dynasties and the Sua, Tang, and Sang dynasties.
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid41] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb27e8>, <src.tfidf.TF_IDF object at 0x1111074d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111074d0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Linguists are more confident of having reconstructed how Middle Chinese sounded .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Middle Chinese was the language used in the 6th through 1-th centuries CE.

When was Middle Chinese used?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Middle Chinese was the language used in the 6th through 1-th centuries CE.
Difficulty = medium
Article_Title = Chinese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid44] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2170>, <src.tfidf.TF_IDF object at 0x114091690>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091690>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  An adult paw print is approximately 10 cm -LRB- 4 inches -RRB- long .
[u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O']
[]
4 inches
['[]', '4 inches']
evaluated condition:  False
Genereated answer  []
Ref Answer  An adult cougar's paw print is approximately 10 cm (4 inches) long.

How long is an adult cougar's paw print?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = An adult cougar's paw print is approximately 10 cm (4 inches) long.
Difficulty = medium
Article_Title = Cougar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid45] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb26c8>, <src.tfidf.TF_IDF object at 0x114091690>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091690>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  An adult paw print is approximately 10 cm -LRB- 4 inches -RRB- long .
[u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O']
[]
4 inches
['[]', '4 inches']
evaluated condition:  False
Genereated answer  []
Ref Answer  4 inches

How long is an adult cougar's paw print?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 4 inches
Difficulty = medium
Article_Title = Cougar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid46] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2cb0>, <src.tfidf.TF_IDF object at 0x112e02310>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02310>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Drums are the world 's oldest and most ubiquitous musical instruments , and the basic design has remained virtually unchanged for thousands of years .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'DURATION', u'DURATION', u'DURATION', u'O']
[]
Ref Answer  remained virtually unchanged for thousands of years

How long has the basic design of the drum remained unchanged?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = remained virtually unchanged for thousands of years
Difficulty = medium
Article_Title = Drum
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid47] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2560>, <src.tfidf.TF_IDF object at 0x112e02310>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02310>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Drums are the world 's oldest and most ubiquitous musical instruments , and the basic design has remained virtually unchanged for thousands of years .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'DURATION', u'DURATION', u'DURATION', u'O']
[]
Ref Answer  thousands of years

How long has the basic design of the drum remained unchanged?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = thousands of years
Difficulty = medium
Article_Title = Drum
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid50] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2d88>, <src.tfidf.TF_IDF object at 0x10e17df90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e17df90>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  They possess no pelvic fins , and many species also lack pectoral fins .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  approximately 800 species

How many species of true eels are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = approximately 800 species
Difficulty = medium
Article_Title = Eel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid51] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2dd0>, <src.tfidf.TF_IDF object at 0x10e17df90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e17df90>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  They possess no pelvic fins , and many species also lack pectoral fins .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  There are approximately 800 species of true eels.

How many species of true eels are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = There are approximately 800 species of true eels.
Difficulty = medium
Article_Title = Eel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid52] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2e18>, <src.tfidf.TF_IDF object at 0x10e17df90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e17df90>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  In northern Germany , The Netherlands , Denmark and Sweden , smoked eel is considered a delicacy .
[u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'LOCATION', u'O', u'LOCATION', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
northern Germany
The Netherlands
Denmark
Sweden
['northern Germany', 'The Netherlands', 'Denmark', 'Sweden']
evaluated condition:  False
Genereated answer  northern Germany
Ref Answer  Northern Germany, The Netherlands, Denmark, Sweden

Where is smoked eel considered a delicacy?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Northern Germany, The Netherlands, Denmark, Sweden
Difficulty = medium
Article_Title = Eel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid54] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2ea8>, <src.tfidf.TF_IDF object at 0x10e17df90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e17df90>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Eels begin life as flat and transparent larvae , called leptocephali .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  As flat and transparent larvae, called leptocephali

How do eels begin life?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = As flat and transparent larvae, called leptocephali
Difficulty = medium
Article_Title = Eel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid55] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2ef0>, <src.tfidf.TF_IDF object at 0x10e17df90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e17df90>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Eels begin life as flat and transparent larvae , called leptocephali .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Eels begin life as flat and transparent larvae, called leptocephali.

How do eels begin life?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Eels begin life as flat and transparent larvae, called leptocephali.
Difficulty = medium
Article_Title = Eel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid56] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2f38>, <src.tfidf.TF_IDF object at 0x111107ad0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107ad0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Do you speak English ?
[u'O', u'O', u'O', u'MISC', u'O']
[]
Ref Answer  Around 1900 BCE

When did Proto-Uralic language arrive in Finland?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Around 1900 BCE
Difficulty = medium
Article_Title = Finnish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a5.txt

----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 1401686 characters, 263097 tokens, 2803.4 char/doc, 526.2 tok/doc RATES: 14.523 doc/sec, 7641.9 tok/sec

Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid57] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2f80>, <src.tfidf.TF_IDF object at 0x111107ad0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107ad0>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Do you speak English ?
[u'O', u'O', u'O', u'MISC', u'O']
[]
Ref Answer  Proto-Uralic language arrived in Finland around 1900 BCE.

When did Proto-Uralic language arrive in Finland?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Proto-Uralic language arrived in Finland around 1900 BCE.
Difficulty = medium
Article_Title = Finnish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid58] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fb2fc8>, <src.tfidf.TF_IDF object at 0x111107ad0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107ad0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  where is ... ?
[u'O', u'O', u'O', u'O']
[]
Ref Answer  Norway

Where is the Kven language spoken?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Norway
Difficulty = medium
Article_Title = Finnish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid59] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc050>, <src.tfidf.TF_IDF object at 0x111107ad0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107ad0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  where is ... ?
[u'O', u'O', u'O', u'O']
[]
Ref Answer  The Kven language is spoken in Northern Norway.

Where is the Kven language spoken?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The Kven language is spoken in Northern Norway.
Difficulty = medium
Article_Title = Finnish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid60] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc098>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  A flute 's volume can generally be increased by making its resonator and tone holes larger .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  a flute's volume can generally be increased by making its resonator and tone holes larger

How can a flute's volume be increased?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = a flute's volume can generally be increased by making its resonator and tone holes larger
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid61] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc0e0>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  A flute 's volume can generally be increased by making its resonator and tone holes larger .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  A flute's volume can be increased by making its resonator and tone holes larger.

How can a flute's volume be increased?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = A flute's volume can be increased by making its resonator and tone holes larger.
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid62] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc128>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  Open-ended flutes such as the concert flute and the recorder have more harmonics , and thus more flexibility for the player , and brighter timbres .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  yes

Do open-ended flutes have brighter timbres?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = yes
Difficulty = easy
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid63] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc170>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  Open-ended flutes such as the concert flute and the recorder have more harmonics , and thus more flexibility for the player , and brighter timbres .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Yes.

Do open-ended flutes have brighter timbres?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Yes.
Difficulty = easy
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid65] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc200>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  The pan flute was used in Greece from the 7th century BC , and spread to other parts of Europe .
[u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'DATE', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O']
[]
['[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  the 7th century BC

When was the pan flute used in Greece?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = the 7th century BC
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid66] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc248>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  The pan flute was used in Greece from the 7th century BC , and spread to other parts of Europe .
[u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'DATE', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O']
[]
['[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  7th century BC

When was the pan flute used in Greece?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 7th century BC
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid67] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc290>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Following the 16th-century court music , concert flutes began appearing in chamber ensembles .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  the 16th-century

When did concert flutes begin appearing in concert ensembles?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = the 16th-century
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid68] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc2d8>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Following the 16th-century court music , concert flutes began appearing in chamber ensembles .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  

When did concert flutes begin appearing in concert ensembles?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid69] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc320>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Various type of flutes being sold by a boy in a local market in Bangalore , India Two main varieties of Indian flutes are currently used .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'NUMBER', u'O', u'O', u'O', u'MISC', u'O', u'O', u'DATE', u'O', u'O']
Two main varieties
[]
['Two main varieties', '[]']
evaluated condition:  False
Genereated answer  Two main varieties
Ref Answer  two

How many main varieties of Indian flutes are currently used?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = two
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid70] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc368>, <src.tfidf.TF_IDF object at 0x111107f50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107f50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Various type of flutes being sold by a boy in a local market in Bangalore , India Two main varieties of Indian flutes are currently used .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'NUMBER', u'O', u'O', u'O', u'MISC', u'O', u'O', u'DATE', u'O', u'O']
Two main varieties
[]
['Two main varieties', '[]']
evaluated condition:  False
Genereated answer  Two main varieties
Ref Answer  Two

How many main varieties of Indian flutes are currently used?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Two
Difficulty = medium
Article_Title = Flute
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid71] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc3b0>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  One to two weeks after birth , the cub 's skin turns gray where its hair will eventually become black .
[u'DURATION', u'DURATION', u'DURATION', u'DURATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  one to two weeks after birth

How long does it take for the panda cubs skin to turn gray?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = one to two weeks after birth
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid72] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc3f8>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  One to two weeks after birth , the cub 's skin turns gray where its hair will eventually become black .
[u'DURATION', u'DURATION', u'DURATION', u'DURATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  One to two weeks

How long does it take for the panda cubs skin to turn gray?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = One to two weeks
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid73] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc440>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Since the earliest collection of Chinese writings , the Chinese language has given the bear 20 different names , such as -LRB- hua xiong -RRB- `` spotted bear '' and -LRB- zhu xiong -RRB- `` bamboo bear . ''
[u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
20 different names
['20 different names']
evaluated condition:  False
Genereated answer  20 different names
Ref Answer  20

How many different names did Chinese writings give to the panda?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 20
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid74] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc488>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Since the earliest collection of Chinese writings , the Chinese language has given the bear 20 different names , such as -LRB- hua xiong -RRB- `` spotted bear '' and -LRB- zhu xiong -RRB- `` bamboo bear . ''
[u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
20 different names
['20 different names']
evaluated condition:  False
Genereated answer  20 different names
Ref Answer  20

How many different names did Chinese writings give to the panda?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 20
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 28319 characters, 5521 tokens, 56.6 char/doc, 11.0 tok/doc RATES: 20.666 doc/sec, 228.2 tok/sec

Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid75] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc4d0>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Pandas .
[u'O', u'O']
[]
Ref Answer  a few mountain ranges in central china

Where do Giant Pandas live?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = a few mountain ranges in central china
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid76] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc518>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Pandas .
[u'O', u'O']
[]
Ref Answer  Sichuan province, Shaanxi and Gansu provinces

Where do Giant Pandas live?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Sichuan province, Shaanxi and Gansu provinces
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid79] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc5f0>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  At this time , scientists do not know how the female chooses which cub to raise , and this is a topic of ongoing research .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Two

How many subspecies of the Giant Panda are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Two
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid80] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc638>, <src.tfidf.TF_IDF object at 0x10f66bd50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bd50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  At this time , scientists do not know how the female chooses which cub to raise , and this is a topic of ongoing research .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Two

How many subspecies of the Giant Panda are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Two
Difficulty = medium
Article_Title = Giant_Panda
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid81] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc680>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  The nut is a small strip of bone , plastic , brass , corian , graphite , stainless steel , or other medium-hard material , at the joint where the headstock meets the fretboard .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  end of the guitar neck furthest from the body

Where is the headstock located?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = end of the guitar neck furthest from the body
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid82] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc6c8>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  The nut is a small strip of bone , plastic , brass , corian , graphite , stainless steel , or other medium-hard material , at the joint where the headstock meets the fretboard .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  At the end of the guitar.

Where is the headstock located?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = At the end of the guitar.
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid83] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc710>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Guitars are made and repaired by luthiers .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  luthiers

Whom are guitars made and repaired by?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = luthiers
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid84] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc758>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Guitars are made and repaired by luthiers .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Luthiers.

Whom are guitars made and repaired by?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Luthiers.
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid85] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc7a0>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  It typically has six strings , but four , seven , eight , ten and twelve string guitars also exist .
[u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O']
six strings
four
seven
eight
ten
twelve string guitars
['six strings', 'four', 'seven', 'eight', 'ten', 'twelve string guitars']
evaluated condition:  False
Genereated answer  six strings
Ref Answer  Six

How many strings does a guitar typically have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Six
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid86] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc7e8>, <src.tfidf.TF_IDF object at 0x1111077d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1111077d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  It typically has six strings , but four , seven , eight , ten and twelve string guitars also exist .
[u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O']
six strings
four
seven
eight
ten
twelve string guitars
['six strings', 'four', 'seven', 'eight', 'ten', 'twelve string guitars']
evaluated condition:  False
Genereated answer  six strings
Ref Answer  six

How many strings does a guitar typically have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = six
Difficulty = medium
Article_Title = Guitar
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid89] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc8c0>, <src.tfidf.TF_IDF object at 0x112e02a10>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02a10>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  He died at the age of 55 in Le Croisic .
[u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'LOCATION', u'LOCATION', u'O']
[]
Ref Answer  1908

When did he die?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 1908
Difficulty = medium
Article_Title = Henri_Becquerel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid90] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc908>, <src.tfidf.TF_IDF object at 0x112e02a10>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02a10>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  He died at the age of 55 in Le Croisic .
[u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'LOCATION', u'LOCATION', u'O']
[]
Ref Answer  1908

When did he die?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 1908
Difficulty = medium
Article_Title = Henri_Becquerel
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid91] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc950>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  At Woolsthorpe Manor in Woosthorpe-by-Colsterworth.

Where was Isaac Newton born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = At Woolsthorpe Manor in Woosthorpe-by-Colsterworth.
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid92] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbc998>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  He was born at Woolsthorpe Manor in Woolsthorpe-by-Colsterworth, a hamlet in the county of Lincolnshire.

Where was Isaac Newton born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = He was born at Woolsthorpe Manor in Woolsthorpe-by-Colsterworth, a hamlet in the county of Lincolnshire.
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid97] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcb00>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  Woolsthorpe Manor in Woolsthorpe-by-Colsterworth

Where was Isaac Newton born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Woolsthorpe Manor in Woolsthorpe-by-Colsterworth
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid98] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcb48>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  Woolsthorpe Manor in Woolsthorpe-by-Colsterworth

Where was Isaac Newton born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Woolsthorpe Manor in Woolsthorpe-by-Colsterworth
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid99] _________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcb90>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  1687

When was the Principia published?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 1687
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid100] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcbd8>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  1687

When was the Principia published?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 1687
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid101] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcc20>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  Oxford University Museum of Natural History 

Where is there a Newton statue on display?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Oxford University Museum of Natural History 
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid102] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcc68>, <src.tfidf.TF_IDF object at 0x111107590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  in JSTOR * Pfizenmaier , Thomas C. `` Was Isaac Newton an Arian ?
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'PERSON', u'PERSON', u'O', u'PERSON', u'O']
[]
Ref Answer  Oxford University Museum of Natural History

Where is there a Newton statue on display?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Oxford University Museum of Natural History
Difficulty = medium
Article_Title = Isaac_Newton
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid103] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbccb0>, <src.tfidf.TF_IDF object at 0x10e2cb550>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb550>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Jakarta has a hot and humid equatorial/tropical climate -LRB- Af -RRB- according to the Kppen climate classification system .
[u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O']
[]
Ref Answer  Jakarta has a hot and humid equatorial/tropical climate 

How is the climate in the city?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Jakarta has a hot and humid equatorial/tropical climate 
Difficulty = medium
Article_Title = Jakarta
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid104] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbccf8>, <src.tfidf.TF_IDF object at 0x10e2cb550>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb550>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Jakarta has a hot and humid equatorial/tropical climate -LRB- Af -RRB- according to the Kppen climate classification system .
[u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O']
[]
Ref Answer  The city is hot and humid.

How is the climate in the city?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = The city is hot and humid.
Difficulty = medium
Article_Title = Jakarta
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid109] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbce60>, <src.tfidf.TF_IDF object at 0x111107290>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107290>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Watt retired in 1800 , the same year that his fundamental patent and partnership with Boulton expired .
[u'PERSON', u'O', u'O', u'DATE', u'DATE', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O']
[]
['[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  In 1800.

When did Watt retire?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = In 1800.
Difficulty = medium
Article_Title = James_Watt
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid110] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcea8>, <src.tfidf.TF_IDF object at 0x111107290>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107290>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Watt retired in 1800 , the same year that his fundamental patent and partnership with Boulton expired .
[u'PERSON', u'O', u'O', u'DATE', u'DATE', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O']
[]
['[]']
evaluated condition:  False
Genereated answer  []
Ref Answer  Watt retired in 1800.

When did Watt retire?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = Watt retired in 1800.
Difficulty = medium
Article_Title = James_Watt
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid113] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcf80>, <src.tfidf.TF_IDF object at 0x10f66b290>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b290>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  Traditionally , Korean was written in columns from top to bottom , right to left , but is now usually written in rows from left to right , top to bottom .
[u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  It is written in rows.

Is modern Korean written in columns or rows?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = It is written in rows.
Difficulty = easy
Article_Title = Korean_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a6.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid114] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3050>, <src.tfidf.TF_IDF object at 0x10f66b550>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b550>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  The new federal territory of Kuala Lumpur flag and anthem were introduced .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  February 1, 1974

when did kuala lumpur become a federal territory of malaysia?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = February 1, 1974
Difficulty = medium
Article_Title = Kuala_Lumpur
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid115] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fbcfc8>, <src.tfidf.TF_IDF object at 0x111107050>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107050>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Lobsters have 10 walking legs ; the front two adapted to claws .
[u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O']
10 walking legs
the front two
['10 walking legs', 'the front two']
evaluated condition:  False
Genereated answer  10 walking legs
Ref Answer  10.

How many legs do lobsters have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 10.
Difficulty = medium
Article_Title = Lobster
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid116] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3098>, <src.tfidf.TF_IDF object at 0x111107050>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107050>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Lobsters have 10 walking legs ; the front two adapted to claws .
[u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O']
10 walking legs
the front two
['10 walking legs', 'the front two']
evaluated condition:  False
Genereated answer  10 walking legs
Ref Answer  10

How many legs do lobsters have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 10
Difficulty = medium
Article_Title = Lobster
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid117] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc30e0>, <src.tfidf.TF_IDF object at 0x111107050>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107050>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Lobsters are found in all oceans .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  In all oceans.

Where are lobsters found?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = In all oceans.
Difficulty = medium
Article_Title = Lobster
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid118] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3128>, <src.tfidf.TF_IDF object at 0x111107050>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107050>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Lobsters are found in all oceans .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  In all oceans

Where are lobsters found?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = In all oceans
Difficulty = medium
Article_Title = Lobster
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a5.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid119] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc31b8>, <src.tfidf.TF_IDF object at 0x10e2cbf50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbf50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Extending from this sound-chest are two raised arms , which are sometimes hollow , and are curved both outward and forward .
[u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
two
['two']
evaluated condition:  False
Genereated answer  two
Ref Answer  Two

How many raised arms are extending from the sound-chest of a classical lyre?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Two
Difficulty = medium
Article_Title = Lyre
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid120] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3200>, <src.tfidf.TF_IDF object at 0x1140914d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x1140914d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Examples are : In Malay , there are 4 parts of speech : There are 16 types of function words in Malay which perform a grammatical function in a sentence .
[u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Malay
4 parts
16 types
['Malay', '4 parts', '16 types']
evaluated condition:  False
Genereated answer  Malay
Ref Answer  Four

How many parts of speech are there in Malay?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Four
Difficulty = medium
Article_Title = Malay_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid123] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3290>, <src.tfidf.TF_IDF object at 0x10f66b5d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b5d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  How Much Do Public Schools Really Cost ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  six

How many sister cities does the City of Melbourne have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = six
Difficulty = medium
Article_Title = Melbourne
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid124] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc32d8>, <src.tfidf.TF_IDF object at 0x10f66b5d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b5d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  How Much Do Public Schools Really Cost ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Six.

How many sister cities does the City of Melbourne have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Six.
Difficulty = medium
Article_Title = Melbourne
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a2.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid125] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3320>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  * Regarding the hereafter , `` Speculations ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Michael Faraday discovered benzene.

Who discovered benzene?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Michael Faraday discovered benzene.
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid126] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3368>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  * Regarding the hereafter , `` Speculations ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Michael Faraday

Who discovered benzene?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Michael Faraday
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 600 documents, 34611 characters, 6726 tokens, 57.7 char/doc, 11.2 tok/doc RATES: 21.472 doc/sec, 240.7 tok/sec

Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid127] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc33b0>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Michael was born the fall of that year .
[u'PERSON', u'O', u'O', u'O', u'DATE', u'O', u'O', u'DURATION', u'O']
[]
Ref Answer  Michael Faraday was born in Newington Butts.

Where was Michael Faraday born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Michael Faraday was born in Newington Butts.
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid128] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc33f8>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Michael was born the fall of that year .
[u'PERSON', u'O', u'O', u'O', u'DATE', u'O', u'O', u'DURATION', u'O']
[]
Ref Answer  Newington Butts

Where was Michael Faraday born?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Newington Butts
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid129] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3488>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  * Regarding the hereafter , `` Speculations ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  John 'Mad Jack' Fuller

who was his mentor?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = John 'Mad Jack' Fuller
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid130] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3440>, <src.tfidf.TF_IDF object at 0x10e2cb6d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb6d0>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  * Regarding the hereafter , `` Speculations ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Sarah Barnard

Who was Faraday's wife?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Sarah Barnard
Difficulty = medium
Article_Title = Michael_Faraday
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid133] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3560>, <src.tfidf.TF_IDF object at 0x10e2cb910>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb910>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  The project was initiated by Montreal Mayor Jean Drapeau , who would later bring the Summer Olympic Games to Montreal in 1976 .
[u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'PERSON', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'MISC', u'MISC', u'O', u'LOCATION', u'O', u'DATE', u'O']
Montreal Mayor Jean Drapeau
['Montreal Mayor Jean Drapeau']
evaluated condition:  False
Genereated answer  Montreal Mayor Jean Drapeau
Ref Answer  The mayor is Grald Tremblay.

Who is the Mayor of Montreal?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = The mayor is Grald Tremblay.
Difficulty = medium
Article_Title = Montreal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid134] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc35a8>, <src.tfidf.TF_IDF object at 0x10e2cb910>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb910>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  The project was initiated by Montreal Mayor Jean Drapeau , who would later bring the Summer Olympic Games to Montreal in 1976 .
[u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'PERSON', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'MISC', u'MISC', u'O', u'LOCATION', u'O', u'DATE', u'O']
Montreal Mayor Jean Drapeau
['Montreal Mayor Jean Drapeau']
evaluated condition:  False
Genereated answer  Montreal Mayor Jean Drapeau
Ref Answer  The mayor is Grald Tremblay.

Who is the Mayor of Montreal?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = The mayor is Grald Tremblay.
Difficulty = medium
Article_Title = Montreal
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a7.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid137] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3680>, <src.tfidf.TF_IDF object at 0x114091750>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091750>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Why the Name `` Tesla '' ?
[u'O', u'O', u'MISC', u'O', u'O', u'O', u'O']
[]
Ref Answer  Nikola Tesla became adversaries with Edison.

Who became adversaries with Nikola Tesla?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Nikola Tesla became adversaries with Edison.
Difficulty = medium
Article_Title = Nikola_Tesla
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid138] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc36c8>, <src.tfidf.TF_IDF object at 0x114091750>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091750>
No. of sentences=10
set(['PERSON', 'ORGANIZATION'])
Candidate sentence  Why the Name `` Tesla '' ?
[u'O', u'O', u'MISC', u'O', u'O', u'O', u'O']
[]
Ref Answer  Edison

Who became adversaries with Nikola Tesla?
Validity= True
Question Type = Factoid
Answer Type = set(['PERSON', 'ORGANIZATION'])
Answer = Edison
Difficulty = medium
Article_Title = Nikola_Tesla
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid139] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3710>, <src.tfidf.TF_IDF object at 0x114091750>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091750>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Did Tesla really invent the loudspeaker ? ''
[u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  In 1880, Nikola Tesla moved to Budapest.

Where did Nikola Tesla move to in 1880?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = In 1880, Nikola Tesla moved to Budapest.
Difficulty = medium
Article_Title = Nikola_Tesla
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid140] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3758>, <src.tfidf.TF_IDF object at 0x114091750>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091750>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Did Tesla really invent the loudspeaker ? ''
[u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Budapest

Where did Nikola Tesla move to in 1880?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Budapest
Difficulty = medium
Article_Title = Nikola_Tesla
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid142] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc37e8>, <src.tfidf.TF_IDF object at 0x114091750>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091750>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Did Tesla really invent the loudspeaker ? ''
[u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  1928

When did Tesla receive his last patent?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = 1928
Difficulty = medium
Article_Title = Nikola_Tesla
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set4/a3.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid143] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3878>, <src.tfidf.TF_IDF object at 0x112e02590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  An octopus has a hard beak , with its mouth at the center point of the arms .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The mouth of an octopus is at the center point of the arms.

Where is the mouth of an octopus?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The mouth of an octopus is at the center point of the arms.
Difficulty = medium
Article_Title = Octopus
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid144] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3830>, <src.tfidf.TF_IDF object at 0x112e02590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02590>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  An octopus has a hard beak , with its mouth at the center point of the arms .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The octopus' mouth is at the center point of the arms.

Where is the mouth of an octopus?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = The octopus' mouth is at the center point of the arms.
Difficulty = medium
Article_Title = Octopus
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid145] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc38c0>, <src.tfidf.TF_IDF object at 0x112e02590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02590>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Giant OctopusMighty but Secretive Denizen of the Deep Slate.com , How Smart is the Octopus ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  An octopus has four pairs of arms.

How many arms does an octopus have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = An octopus has four pairs of arms.
Difficulty = medium
Article_Title = Octopus
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid146] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3908>, <src.tfidf.TF_IDF object at 0x112e02590>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02590>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Giant OctopusMighty but Secretive Denizen of the Deep Slate.com , How Smart is the Octopus ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The octopus has four pairs of arms.

How many arms does an octopus have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = The octopus has four pairs of arms.
Difficulty = medium
Article_Title = Octopus
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid147] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3950>, <src.tfidf.TF_IDF object at 0x10f66bdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  For much of his career , Berlin only knew how to play the black keys .
[u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  36.

How many black keys do modern pianos have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 36.
Difficulty = medium
Article_Title = Piano
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid148] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3998>, <src.tfidf.TF_IDF object at 0x10f66bdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  For much of his career , Berlin only knew how to play the black keys .
[u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  36

How many black keys do modern pianos have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 36
Difficulty = medium
Article_Title = Piano
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid149] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc39e0>, <src.tfidf.TF_IDF object at 0x10f66bdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  In a modern grand the total string tension can exceed 20 tons .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O']
20 tons
['20 tons']
evaluated condition:  False
Genereated answer  20 tons
Ref Answer  88 keys.

How many total keys does a typical modern piano have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 88 keys.
Difficulty = medium
Article_Title = Piano
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid150] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3a28>, <src.tfidf.TF_IDF object at 0x10f66bdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  In a modern grand the total string tension can exceed 20 tons .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'NUMBER', u'O', u'O']
20 tons
['20 tons']
evaluated condition:  False
Genereated answer  20 tons
Ref Answer  A modern piano has 88 keys.

How many total keys does a typical modern piano have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = A modern piano has 88 keys.
Difficulty = medium
Article_Title = Piano
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid152] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3ab8>, <src.tfidf.TF_IDF object at 0x112e02b50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02b50>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Small Portuguese-speaking communities subsist in former overseas colonies of Portugal such as Macau , where it is spoken by 7 % of the population , and East Timor -LRB- 13.6 % -RRB- .
[u'MISC', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'PERCENT', u'PERCENT', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'LOCATION', u'O', u'PERCENT', u'PERCENT', u'O', u'O']
Portugal
Macau
East Timor
['Portugal', 'Macau', 'East Timor']
evaluated condition:  False
Genereated answer  Portugal
Ref Answer  There are small Portuguese-speaking communities in Macau and East Timor.

Where are there small Portuguese-speaking communities?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = There are small Portuguese-speaking communities in Macau and East Timor.
Difficulty = medium
Article_Title = Portuguese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a1.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid153] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3b00>, <src.tfidf.TF_IDF object at 0x10e2cb3d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb3d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Russian statistics - - People in urban Saint Petersburg live mostly in apartments .
[u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  apartments

Where do most people in urban Saint Petersburg live?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = apartments
Difficulty = medium
Article_Title = Saint_Petersburg
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid154] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3b48>, <src.tfidf.TF_IDF object at 0x10e2cb3d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cb3d0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  Russian statistics - - People in urban Saint Petersburg live mostly in apartments .
[u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'PERSON', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Apartments.

Where do most people in urban Saint Petersburg live?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = Apartments.
Difficulty = medium
Article_Title = Saint_Petersburg
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid155] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3b90>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The nearby Western Addition became established with a large African American population at the same time .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  The estimated population of San Francisco in the year 2008 was 808,976.

How large is the population of San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = The estimated population of San Francisco in the year 2008 was 808,976.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid156] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3bd8>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The nearby Western Addition became established with a large African American population at the same time .
[u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  San Francisco has an estimated population of 808,976.

How large is the population of San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = San Francisco has an estimated population of 808,976.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid157] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3c20>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The State of California uses San Francisco as the home of the state supreme court and other state agencies .
[u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'ORGANIZATION', u'ORGANIZATION', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  There is only one park managed by the California State Park system: Candlestick Point.

How many state parks are in San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = There is only one park managed by the California State Park system: Candlestick Point.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid158] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3c68>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The State of California uses San Francisco as the home of the state supreme court and other state agencies .
[u'O', u'O', u'O', u'LOCATION', u'O', u'LOCATION', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'ORGANIZATION', u'ORGANIZATION', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  There is one state park in San Francisco.

How many state parks are in San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = There is one state park in San Francisco.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid159] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3cb0>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  It is the city where Tony Bennett `` left his heart , '' where the Birdman of Alcatraz spent many of his final years , and where Rice-a-Roni was said to be the favorite treat .
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'DURATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Alcatraz
['Alcatraz']
evaluated condition:  False
Genereated answer  Alcatraz
Ref Answer  San Francisco is located on the West Coast of the United States at the tip of the San Francisco Peninsula.

Where is San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = San Francisco is located on the West Coast of the United States at the tip of the San Francisco Peninsula.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid160] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3cf8>, <src.tfidf.TF_IDF object at 0x10e2cbdd0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10e2cbdd0>
No. of sentences=10
set(['LOCATION'])
Candidate sentence  It is the city where Tony Bennett `` left his heart , '' where the Birdman of Alcatraz spent many of his final years , and where Rice-a-Roni was said to be the favorite treat .
[u'O', u'O', u'O', u'O', u'O', u'PERSON', u'PERSON', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'DURATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
Alcatraz
['Alcatraz']
evaluated condition:  False
Genereated answer  Alcatraz
Ref Answer  San Francisco is in California.

Where is San Francisco?
Validity= True
Question Type = Factoid
Answer Type = set(['LOCATION'])
Answer = San Francisco is in California.
Difficulty = medium
Article_Title = San_Francisco
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set3/a8.txt

----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 600 documents, 1405829 characters, 263924 tokens, 2343.0 char/doc, 439.9 tok/doc RATES: 14.047 doc/sec, 6179.0 tok/sec

Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid167] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3ef0>, <src.tfidf.TF_IDF object at 0x10f66bb50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb50>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  Education for all in whose language ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Yes, Swahili is spoken in parts of northern Mozambique.

Is Swahili spoken in Mozambique?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Yes, Swahili is spoken in parts of northern Mozambique.
Difficulty = easy
Article_Title = Swahili_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid168] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3f38>, <src.tfidf.TF_IDF object at 0x10f66bb50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb50>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  Education for all in whose language ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  yes

Is Swahili spoken in Mozambique?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = yes
Difficulty = easy
Article_Title = Swahili_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid169] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3f80>, <src.tfidf.TF_IDF object at 0x10f66bb50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Education for all in whose language ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  Swahili time runs from dawn to dusk.

How does Swahili time run?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Swahili time runs from dawn to dusk.
Difficulty = medium
Article_Title = Swahili_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid170] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fc3fc8>, <src.tfidf.TF_IDF object at 0x10f66bb50>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb50>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Education for all in whose language ?
[u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  from dawn to dusk

How does Swahili time run?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = from dawn to dusk
Difficulty = medium
Article_Title = Swahili_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a4.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid173] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc0e0>, <src.tfidf.TF_IDF object at 0x114091090>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091090>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The Swedish alphabet is a 29-letter alphabet , using the basic 26-letter Latin alphabet plus the three additional letters / , / , and / constructed in the 16th century by writing `` o '' and `` e '' on top of an `` a '' .
[u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
the three additional letters
the 16th century
['the three additional letters', 'the 16th century']
evaluated condition:  False
Genereated answer  the three additional letters
Ref Answer  26.

How many letters are in the basic Latin alphabet?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 26.
Difficulty = medium
Article_Title = Swedish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid174] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc128>, <src.tfidf.TF_IDF object at 0x114091090>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091090>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  The Swedish alphabet is a 29-letter alphabet , using the basic 26-letter Latin alphabet plus the three additional letters / , / , and / constructed in the 16th century by writing `` o '' and `` e '' on top of an `` a '' .
[u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
the three additional letters
the 16th century
['the three additional letters', 'the 16th century']
evaluated condition:  False
Genereated answer  the three additional letters
Ref Answer  26

How many letters are in the basic Latin alphabet?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = 26
Difficulty = medium
Article_Title = Swedish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid175] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc170>, <src.tfidf.TF_IDF object at 0x114091090>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x114091090>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Josephson , chapter 2 It was during the 20th century that a common , standardized national language became available to all Swedes .
[u'PERSON', u'O', u'O', u'NUMBER', u'O', u'O', u'O', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O']
the 20th century
['the 20th century']
evaluated condition:  False
Genereated answer  the 20th century
Ref Answer  In the 20th Century.

When did a standard and common language become available to all Swedes?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = In the 20th Century.
Difficulty = medium
Article_Title = Swedish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid177] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc200>, <src.tfidf.TF_IDF object at 0x112e02f90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02f90>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Concurrently , the newly founded Turkish Language Association initiated a drive to reform the language by removing Persian and Arabic loanwords in favor of native variants and coinages from Turkic roots .
[u'O', u'O', u'O', u'O', u'O', u'ORGANIZATION', u'ORGANIZATION', u'ORGANIZATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  In 1928.

When was the Turkish Language Association founded?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = In 1928.
Difficulty = medium
Article_Title = Turkish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid178] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc248>, <src.tfidf.TF_IDF object at 0x112e02f90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x112e02f90>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  Concurrently , the newly founded Turkish Language Association initiated a drive to reform the language by removing Persian and Arabic loanwords in favor of native variants and coinages from Turkic roots .
[u'O', u'O', u'O', u'O', u'O', u'ORGANIZATION', u'ORGANIZATION', u'ORGANIZATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  The Turkish Language Association was founded in 1932.

When was the Turkish Language Association founded?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = The Turkish Language Association was founded in 1932.
Difficulty = medium
Article_Title = Turkish_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid179] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc290>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  `` What 's so Chinese about Vietnamese ? ''
[u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Much vocabulary has been borrowed from Chinese.

Was Vietnamese influenced by Chinese?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Much vocabulary has been borrowed from Chinese.
Difficulty = easy
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 41541 characters, 8017 tokens, 59.3 char/doc, 11.5 tok/doc RATES: 17.644 doc/sec, 202.1 tok/sec

Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid180] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc2d8>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  `` What 's so Chinese about Vietnamese ? ''
[u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Yes.

Was Vietnamese influenced by Chinese?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Yes.
Difficulty = easy
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid183] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc3b0>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  The consonant clusters that were originally present in Middle Vietnamese -LRB- of the 17th century -RRB- have been lost in almost all modern Vietnamese varieties -LRB- but retained in other closely related Vietic languages -RRB- .
[u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'O', u'O', u'O', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O']
[]
Ref Answer  Yes

Have consonant clusters been lost?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Yes
Difficulty = easy
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid184] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc3f8>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['BOOLEAN'])
Candidate sentence  The consonant clusters that were originally present in Middle Vietnamese -LRB- of the 17th century -RRB- have been lost in almost all modern Vietnamese varieties -LRB- but retained in other closely related Vietic languages -RRB- .
[u'O', u'O', u'O', u'O', u'O', u'O', u'DATE', u'O', u'O', u'O', u'O', u'O', u'DATE', u'DATE', u'DATE', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'MISC', u'O', u'O', u'O']
[]
Ref Answer  Yes.

Have consonant clusters been lost?
Validity= True
Question Type = BOOLEAN
Answer Type = set(['BOOLEAN'])
Answer = Yes.
Difficulty = easy
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid185] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc488>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['DATE', 'TIME'])
Candidate sentence  `` What 's so Chinese about Vietnamese ? ''
[u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  The reunification of Vietnam occurred in 1975-76.

When was the reunification of Vietnam?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'TIME'])
Answer = The reunification of Vietnam occurred in 1975-76.
Difficulty = medium
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid186] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc440>, <src.tfidf.TF_IDF object at 0x10f66bb90>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66bb90>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  `` What 's so Chinese about Vietnamese ? ''
[u'O', u'O', u'O', u'O', u'MISC', u'O', u'MISC', u'O', u'O']
[]
Ref Answer  Northern Vietnamese has six tones.

How many tones do Northern varieties have?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Northern Vietnamese has six tones.
Difficulty = medium
Article_Title = Vietnamese_language
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set5/a10.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid187] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc4d0>, <src.tfidf.TF_IDF object at 0x111107390>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               TypeError: coercing to Unicode: need string or buffer, list found

test_compute.py:70: TypeError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x111107390>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  Java and Bali use xylophones -LRB- called gambang -RRB- in gamelan ensembles .
[u'MISC', u'O', u'LOCATION', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O', u'O']
[]
Ref Answer  In gamelan ensembles

How do the Java and Bali use xylophones?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = In gamelan ensembles
Difficulty = medium
Article_Title = Xylophone
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set2/a8.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 61, in test_factoid
    condition = ans[0] in qpobj.answer
TypeError: coercing to Unicode: need string or buffer, list found
________________________ test_factoid[param_factoid188] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc518>, <src.tfidf.TF_IDF object at 0x10f66b2d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b2d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  There are three extant species .
[u'O', u'O', u'NUMBER', u'O', u'O', u'O']
three extant species
['three extant species']
evaluated condition:  False
Genereated answer  three extant species
Ref Answer  three

How many species of zebra are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = three
Difficulty = medium
Article_Title = Zebra
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
________________________ test_factoid[param_factoid189] ________________________

param_factoid = (<src.question_processing.Question_parser instance at 0x114fcc560>, <src.tfidf.TF_IDF object at 0x10f66b2d0>)

    def test_factoid(param_factoid):
        qpobj = param_factoid[0]
        objTfidf = param_factoid[1]
        print objTfidf
        questionProcess = Question_parser(qpobj.question)
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerFactoid(qpobj.question, interestingText, questionProcess)
                #assert True == str2bool(qpobj.answer)
                #assertIsNotNone(ans)
                #assert ans != None
                #assert False == True
                if qpobj.answer_type != set(['UNKNOWN']):
                    condition = ans[0] in qpobj.answer
                    print "evaluated condition: ", ans[0] in qpobj.answer
                    print "Genereated answer ", ans[0]
                    assert condition == True
    
            except Exception, e:
                traceback.print_exc()
                print "Ref Answer " , qpobj.answer
                print qpobj
>               raise e
E               assert False == True

test_compute.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
<src.tfidf.TF_IDF object at 0x10f66b2d0>
No. of sentences=10
set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Candidate sentence  There are three extant species .
[u'O', u'O', u'NUMBER', u'O', u'O', u'O']
three extant species
['three extant species']
evaluated condition:  False
Genereated answer  three extant species
Ref Answer  Three

How many species of zebra are there?
Validity= True
Question Type = Factoid
Answer Type = set(['DATE', 'MONEY', 'PERCENT', 'NUMBER', 'TIME'])
Answer = Three
Difficulty = medium
Article_Title = Zebra
Dataset = ../Question_Answer_Dataset_v1.2/S10/data/set1/a9.txt

----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/arvindramachandran/Documents/NLP_Proj/NLP-project/tests/test_compute.py", line 64, in test_factoid
    assert condition == True
AssertionError: assert False == True
=============== 136 failed, 54 passed, 2 error in 53.02 seconds ================
