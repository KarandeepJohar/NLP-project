============================= test session starts ==============================
platform linux2 -- Python 2.7.6 -- pytest-2.5.1
collected 411 items

test_compute.py ...F.F...FFF.F.F..FFF..FFFFFFFFF.....FFF.FFF.FF..FF.F.FF.......FFFF.F........F.F..FFFFFF.......F...F..F.FFFFF..FFF........FF.F.F.........FF..FF..FFFFFFFFF..FF....FFFF..F.FFFF....FFFFFF.FFFF..............F..FFFFFF....FF.F.FFF..FFF.FF.FFFFF...FFFFFF.F.F.FF.FFF.....FF....FF..F.F.F...FFFF..........FFFFFFF.F..F........F.F.FFFF....F.F.F.........F.FFF....FFFFFFFFFFF.FFFF.FFF..........FFFFF.FF.....FFFFFFFF..FF..FFFF

=================================== FAILURES ===================================
______________________________ test_yesno[param3] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c7ee18>, <src.tfidf.TF_IDF object at 0x7f203556fb50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c7ee18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'An', u'additional', u'invention', u'pioneered', u'was']
[u'1800', u'result', u'a', u'professional', u'disagreement', u'galvanic', u'response', u'advocated', u'Galvani', u'he', u'voltaic', u'pile', u'an', u'early', u'electric', u'battery', u'which', u'produced', u'a', u'steady', u'electric', u'current']
[u'Prize', u'Luigi', u'Galvani', u'Eudiometer', u'History', u'battery', u'lunar', u'crater', u'History', u'internal', u'combustion', u'engine', u'Lemon', u'battery', u'``', u'Pile', u"''", u'Count', u'Giuseppe', u'Antonio', u'Anastasio', u':', u'A', u'Pioneer', u'Electrochemistry', u'Count', u'1745-1827']
[u'Alessandro_Volta', u'Count', u'Giuseppe', u'Antonio', u'Anastasio', u'February', u'18', u'1745', u'March', u'5', u'1827', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u'``', u':', u'Science', u'culture', u'age', u'enlightenment', u"''", u'Princeton', u'University', u'Press', u'2003']
[u'He', u'made', u'use', u'a', u'Leyden', u'jar', u'to', u'send', u'an', u'electric', u'current', u'Como', u'to', u'Milan', u'~', u'50', u'km', u'~', u'30', u'miles', u'which', u'turn', u'set', u'off']

Did Alessandro Volta invent the remotely operated pistol?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 7 documents, 355 characters, 59 tokens, 50.7 char/doc, 8.4 tok/doc RATES: 3.277 doc/sec, 27.6 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 8 documents, 412 characters, 68 tokens, 51.5 char/doc, 8.5 tok/doc RATES: 3.400 doc/sec, 28.9 tok/sec

______________________________ test_yesno[param5] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c7f3f8>, <src.tfidf.TF_IDF object at 0x7f203556fb50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c7f3f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'born', u'Como', u'Italy', u'the', u'there']
[u'The', u'primitive', u'cell', u'widely', u'used', u'to', u'demonstrate', u'the', u'laws', u'electricity', u'known', u'the', u'Lemon', u'battery']
[u'Prize', u'Luigi', u'Galvani', u'Eudiometer', u'History', u'the', u'battery', u'lunar', u'crater', u'History', u'the', u'internal', u'combustion', u'engine', u'Lemon', u'battery', u'the', u'``', u'Pile', u"''", u'Count', u'Giuseppe', u'Antonio', u'Anastasio', u':', u'A', u'Pioneer', u'Electrochemistry', u'Count', u'1745-1827']
[u'Alessandro_Volta', u'Count', u'Giuseppe', u'Antonio', u'Anastasio', u'February', u'18', u'1745', u'March', u'5', u'1827', u'an', u'Italian', u'Giuliano', u'Pancaldi', u'``', u':', u'Science', u'culture', u'the', u'age', u'enlightenment', u"''", u'Princeton', u'University', u'Press', u'2003']
[u'He', u'buried', u'Camnago']

Was Alessandro Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
______________________________ test_yesno[param9] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c7ff38>, <src.tfidf.TF_IDF object at 0x7f203556fb50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c7ff38>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'born', u'Como', u'Italy', u'the', u'there']
[u'The', u'primitive', u'cell', u'widely', u'used', u'to', u'demonstrate', u'the', u'laws', u'electricity', u'known', u'the', u'Lemon', u'battery']
[u'He', u'buried', u'Camnago']
[u'honor', u'his', u'work', u'made', u'a', u'count', u'Napoleon', u'1810']
[u'This', u'may', u'called', u"'s", u'Law', u'the', u'electrochemical', u'series']

Was Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param10] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b950>, <src.tfidf.TF_IDF object at 0x7f203556fb50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033d3b950>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'born', u'Como', u'Italy', u'the', u'there']
[u'The', u'primitive', u'cell', u'widely', u'used', u'to', u'demonstrate', u'the', u'laws', u'electricity', u'known', u'the', u'Lemon', u'battery']
[u'He', u'buried', u'Camnago']
[u'honor', u'his', u'work', u'made', u'a', u'count', u'Napoleon', u'1810']
[u'This', u'may', u'called', u"'s", u'Law', u'the', u'electrochemical', u'series']

Was Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param11] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b320>, <src.tfidf.TF_IDF object at 0x7f203556fb50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033d3b320>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'honor', u'his', u'work', u'Napoleon']
[u'carried', u'out', u'his', u'experimental', u'studies', u'his', u'first', u'inventions', u'Como']
[u'Prize', u'Luigi', u'Galvani', u'Eudiometer', u'History', u'the', u'battery', u'lunar', u'crater', u'History', u'the', u'internal', u'combustion', u'engine', u'Lemon', u'battery', u'the', u'``', u'Pile', u"''", u'Alessandro', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u':', u'Pioneer', u'Electrochemistry', u'Alessandro', u'Alessandro', u'1745-1827']
[u'This', u'invention', u'significant', u'forerunner', u'the', u'idea', u'the', u'telegraph', u'which', u'also', u'use', u'current', u'to', u'communicate']
[u'It', u'consists', u'two', u'electrodes', u':', u'one', u'zinc', u'the', u'other', u'copper']

Was Volta made a count in 1810?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param13] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b200>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033d3b200>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'1820', u'he', u'became', u'physics']
[u'Amedeo', u'born', u'to', u'noble', u'family', u'Piedmont', u'Italy']
[u'1911', u'meeting', u'commemorated', u'hundredth', u'anniversary', u'publication', u"'s", u'classic', u'1811', u'paper']
[u'He', u'active', u'revolutionary', u'movements', u'1821', u'king', u'Sardinia', u'who', u'became', u'ruler', u'Piedmont', u'his', u'capital']
[u'Well', u'this', u'had', u'recalled', u'to', u'1833', u'where', u'he', u'taught', u'another', u'twenty', u'years']

Was Avogadro a  professor at the University of Turin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param15] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b248>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033d3b248>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Avogadro', u'held', u'posts', u'dealing', u'statistics', u'meteorology', u'weights', u'measures', u'introduced', u'metric', u'system', u'Piedmont']
[u'Rudolf', u'Clausius', u'kinetic', u'theory', u'gases', u'gave', u'another', u'confirmation', u'Avogadro', u"'s", u'Law']
[u'1814', u'published', u'Mmoire', u'sur', u'les', u'masses', u'relatives', u'des', u'molcules', u'des', u'corps', u'simples', u'ou', u'densits', u'prsumes', u'de', u'leur', u'gaz', u'et', u'sur', u'la', u'constitution', u'quelques-uns', u'leur', u'composs', u'pour', u'servir', u'de', u'suite', u"l'Essai", u'sur', u'le', u'mme', u'sujet', u'publi', u'dans', u'le', u'Journal', u'de', u'Physique', u'juillet', u'1811', u'``', u'Note', u'Relative', u'Masses', u'Elementary', u'Molecules', u'Suggested', u'Densities', u'Their', u'Gases', u'Constituents', u'Some', u'Their', u'Compounds', u'Follow-up', u'to', u'Essay', u'Same', u'Subject', u'Published', u'Journal', u'Physics', u'July', u'1811', u"''", u'gas', u'densities']
[u'1821', u'published', u'another', u'paper', u'Nouvelles', u'considrations', u'sur', u'la', u'thorie', u'des', u'proportions', u'dtermines', u'dans', u'les', u'combinaisons', u'et', u'sur', u'la', u'dtermination', u'des', u'masses', u'des', u'molcules', u'des', u'corps', u'New', u'Considerations', u'Theory', u'Proportions', u'Determined', u'Combinations', u'Determination', u'Masses', u'Atoms', u'shortly', u'afterwards', u'Mmoire', u'sur', u'la', u'manire', u'de', u'ramener', u'les', u'composs', u'organiques', u'aux', u'lois', u'ordinaires', u'des', u'proportions', u'dtermines', u'Note', u'Manner', u'Finding', u'Organic', u'Composition', u'Ordinary', u'Laws', u'Determined', u'Proportions']
[u'Andr-Marie', u'Ampre', u'achieved', u'same', u'results', u'three', u'years', u'later', u'another', u'method', u'--', u'Determination', u'Proportions', u'which', u'Bodies', u'Combine', u'According', u'to', u'Number', u'Respective', u'Disposition', u'Molecules', u'Which', u'Their', u'Integral', u'Particles', u'Made', u'same', u'indifference', u'shown', u'to', u'theory', u'as', u'well']

Was he a member of the Royal Superior Council on Public Instruction?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param18] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b7e8>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool("Yes, Avagadro's number is used to compute the results of chemical reactions.") == True
E                +  where "Yes, Avagadro's number is used to compute the results of chemical reactions." = <src.question_processing.Question_parser instance at 0x7f2033d3b7e8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'honor', u'contributions', u'molecular', u'theory', u'molecules', u'one', u'mole', u'named', u'N', u'A', u'``', u'constant', u"''"]
[u'did', u'not', u'actually', u'word', u'``', u'atom', u"''", u'words', u'``', u'atom', u"''", u'``', u'molecule', u"''", u'almost', u'difference']
[u'It', u'allows', u'chemists', u'determine', u'exact', u'amounts', u'substances', u'produced', u'a', u'given']
[u'Johann', u'Josef', u'Loschmidt', u'first', u'calculated', u'value', u'often', u'referred', u'Loschmidt', u'German-speaking', u'countries', u'Loschmidt', u'constant', u'now', u'has', u'another', u'meaning']

Is Avogadro's number used to compute the results of chemical reactions?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Avagadro's number is used to compute the results of chemical reactions.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param19] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b5a8>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033d3b5a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'to', u'a', u'noble', u'family', u'Piedmont', u'Italy']
[u'a', u'Scientific', u'Biography']
[u'1820', u'he', u'became', u'professor', u'physics', u'the', u'University']
[u'Well', u'this', u'had', u'recalled', u'to', u'the', u'university', u'1833', u'where', u'he', u'taught', u'another', u'twenty', u'years']
[u'1911', u'a', u'meeting', u'commemorated', u'the', u'hundredth', u'anniversary', u'the', u'publication', u"'s", u'classic', u'1811', u'paper']

Was Amedeo Avogadro was born in Turin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param20] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033d3b680>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033d3b680>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'to', u'a', u'noble', u'family', u'Piedmont', u'Italy']
[u'a', u'Scientific', u'Biography']
[u'1820', u'he', u'became', u'professor', u'physics', u'the', u'University']
[u'Well', u'this', u'had', u'recalled', u'to', u'the', u'university', u'1833', u'where', u'he', u'taught', u'another', u'twenty', u'years']
[u'1911', u'a', u'meeting', u'commemorated', u'the', u'hundredth', u'anniversary', u'the', u'publication', u"'s", u'classic', u'1811', u'paper']

Was Amedeo Avogadro was born in Turin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param23] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f20340f41b8>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f20340f41b8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'often', u'referred', u'to', u'German-speaking', u'countries', u'constant', u'now', u'has', u'another', u'meaning']
[u'honor', u'contributions', u'to', u'molecular', u'theory', u'molecules', u'one', u'mole', u'was', u'named', u'N', u'A', u'``', u'constant', u"''"]
[u'Hence', u'relative', u'molecular', u'mass', u'a', u'gas', u'can', u'be', u'mass', u'sample', u'known', u'volume']
[u'is', u'used', u'to', u'compute', u'results', u'chemical', u'reactions']
[u'scientific', u'community', u'not', u'give', u'great', u'attention', u'to', u'his', u'theory', u'so', u'hypothesis', u'was', u'not', u'immediately', u'accepted']

Did Johann Josef Loschmidt first calculate the value of Avogadro's number?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param24] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f20340f42d8>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f20340f42d8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'often', u'referred', u'to', u'German-speaking', u'countries', u'constant', u'now', u'has', u'another', u'meaning']
[u'honor', u'contributions', u'to', u'molecular', u'theory', u'molecules', u'one', u'mole', u'was', u'named', u'N', u'A', u'``', u'constant', u"''"]
[u'Hence', u'relative', u'molecular', u'mass', u'a', u'gas', u'can', u'be', u'mass', u'sample', u'known', u'volume']
[u'is', u'used', u'to', u'compute', u'results', u'chemical', u'reactions']
[u'scientific', u'community', u'not', u'give', u'great', u'attention', u'to', u'his', u'theory', u'so', u'hypothesis', u'was', u'not', u'immediately', u'accepted']

Did Johann Josef Loschmidt first calculate the value of Avogadro's number?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param25] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80170>, <src.tfidf.TF_IDF object at 0x7f20392e4850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c80170>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'a', u'Scientific', u'Biography']
[u'born', u'Turin', u'to', u'a', u'noble', u'family', u'Piedmont', u'Italy']
[u'Amedeo_Avogadro', u'Lorenzo', u'Romano', u'Carlo', u'di', u'Quaregna', u'Quaregga', u'di', u'Cerreto', u'Count', u'Quaregna', u'Quaregga', u'Cerreto', u'9', u'August', u'1776', u'9', u'July', u'1856', u'an', u'savant']
[u'honor', u"'s", u'contributions', u'to', u'molecular', u'theory', u'the', u'number', u'molecules', u'one', u'mole', u'named', u"'s", u'number', u'N', u'A', u'``', u"'s", u'constant', u"''"]
[u'He', u'most', u'noted', u'his', u'contributions', u'to', u'molecular', u'theory', u'including', u'what', u'known', u"'s", u'law']

Is Amedeo Avogadro Italian?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param26] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80368>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80368>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'are', u'social', u'insects', u'family', u'Formicidae', u'related', u'wasps', u'bees', u'they']
[u'fossilised', u'Baltic', u'amber', u'family', u'Formicidae', u'which', u'also', u'includes', u'sawflies', u'bees', u'wasps']
[u'Hlldobler', u'Wilson', u'1990', u'pp.', u'23', u'24', u'Termites', u'sometimes', u'called', u'white', u'are', u'not', u'Isoptera']
[u'Worker', u'not', u'have', u'wings', u'reproductive', u'females', u'lose', u'their', u'wings', u'their', u'mating', u'flights', u'begin', u'their', u'colonies']
[u'This', u'allows', u'other', u'detect', u'what', u'task', u'group', u'e.g.', u'foraging', u'nest', u'maintenance', u'other', u'colony', u'members']

Do ants belong to the Hymenoptera order?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param27] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80758>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'are', u'social', u'insects', u'family', u'Formicidae', u'related', u'wasps', u'bees', u'they']
[u'fossilised', u'Baltic', u'amber', u'family', u'Formicidae', u'which', u'also', u'includes', u'sawflies', u'bees', u'wasps']
[u'Hlldobler', u'Wilson', u'1990', u'pp.', u'23', u'24', u'Termites', u'sometimes', u'called', u'white', u'are', u'not', u'Isoptera']
[u'Worker', u'not', u'have', u'wings', u'reproductive', u'females', u'lose', u'their', u'wings', u'their', u'mating', u'flights', u'begin', u'their', u'colonies']
[u'This', u'allows', u'other', u'detect', u'what', u'task', u'group', u'e.g.', u'foraging', u'nest', u'maintenance', u'other', u'colony', u'members']

Do ants belong to the Hymenoptera order?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param28] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80950>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80950>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Many', u'human', u'cultures', u'make', u'medication', u'rituals']
[u'South', u'Africa', u'to', u'help', u'harvest', u'rooibos', u'Aspalathus', u'linearis', u'which', u'small', u'seeds', u'to', u'make', u'a', u'herbal', u'tea']
[u'pheromones', u'more', u'just', u'making', u'trails']
[u'Sounds', u'may', u'to', u'communicate', u'colony', u'members', u'other', u'species']
[u'Weaver', u'a', u'biological', u'control', u'citrus', u'cultivation', u'southern', u'China']

Are ants used in cuisine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param29] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80c68>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80c68>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Many', u'human', u'cultures', u'make', u'medication', u'rituals']
[u'South', u'Africa', u'to', u'help', u'harvest', u'rooibos', u'Aspalathus', u'linearis', u'which', u'small', u'seeds', u'to', u'make', u'a', u'herbal', u'tea']
[u'pheromones', u'more', u'just', u'making', u'trails']
[u'Sounds', u'may', u'to', u'communicate', u'colony', u'members', u'other', u'species']
[u'Weaver', u'a', u'biological', u'control', u'citrus', u'cultivation', u'southern', u'China']

Are ants used in cuisine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param30] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80cb0>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80cb0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Borror', u'Triplehorn', u'Delong', u'1989', u'pp.', u'24', u'71', u'Diagram', u'worker', u'Pachycondyla', u'verenae', u'many']
[u'Two', u'antennae', u'``', u'feelers', u"''", u'are', u'attached', u'to', u'the', u';', u'these', u'detect', u'chemicals', u'air', u'currents', u'vibrations', u';', u'they', u'are', u'also', u'used', u'to', u'transmit', u'receive', u'signals', u'touch']
[u'Fire', u'Solenopsis', u'spp.', u'are', u'unique', u'having', u'poison', u'sac', u'piperidine', u'alkaloids']
[u'Energy', u'is', u'stored', u'thick', u'band', u'muscle', u'explosively', u'released', u'when', u'triggered', u'the', u'stimulation', u'hairs', u'the', u'inside', u'the', u'mandibles']
[u'When', u'disturbed', u'workers', u'rupture', u'the', u'membrane', u'the', u'gaster', u'causing', u'burst', u'secretions', u'acetophenones', u'other', u'chemicals', u'that', u'immobilise', u'small', u'insect', u'attackers']

Does an ant's head contain sensory organs?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param31] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c80e18>, <src.tfidf.TF_IDF object at 0x7f2036ead050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c80e18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Borror', u'Triplehorn', u'Delong', u'1989', u'pp.', u'24', u'71', u'Diagram', u'worker', u'Pachycondyla', u'verenae', u'many']
[u'Two', u'antennae', u'``', u'feelers', u"''", u'are', u'attached', u'to', u'the', u';', u'these', u'detect', u'chemicals', u'air', u'currents', u'vibrations', u';', u'they', u'are', u'also', u'used', u'to', u'transmit', u'receive', u'signals', u'touch']
[u'Fire', u'Solenopsis', u'spp.', u'are', u'unique', u'having', u'poison', u'sac', u'piperidine', u'alkaloids']
[u'Energy', u'is', u'stored', u'thick', u'band', u'muscle', u'explosively', u'released', u'when', u'triggered', u'the', u'stimulation', u'hairs', u'the', u'inside', u'the', u'mandibles']
[u'When', u'disturbed', u'workers', u'rupture', u'the', u'membrane', u'the', u'gaster', u'causing', u'burst', u'secretions', u'acetophenones', u'other', u'chemicals', u'that', u'immobilise', u'small', u'insect', u'attackers']

Does an ant's head contain sensory organs?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param37] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c853f8>, <src.tfidf.TF_IDF object at 0x7f203556f450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c853f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Brussels', u'Airport', u'45', u'km', u'the', u'connects', u'the', u'worldwide']
[u'rising', u'fashion', u'has', u'produced', u'designers', u'such', u'the', u'Six']
[u'the', u'richest', u'Europe', u'this', u'time']
[u'the', u'establishment', u'Belgian', u'independence', u'defended', u'the', u'citadel', u'enceinte', u'the']
[u'This', u'must', u'have', u'coincided', u'roughly', u'the', u'current', u'ringway', u'south', u'the', u'situating', u'the', u'former', u'curve', u'the', u'river']

Is Antwerp a city?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param38] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c850e0>, <src.tfidf.TF_IDF object at 0x7f203556f450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c850e0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'comprises', u'the', u'city', u'proper', u'several', u'towns']
[u'This', u'the', u'population', u'the', u'city', u'only', u'not', u'the', u'larger', u'current', u'the', u'same', u'name']
[u'-', u'|', u'Grote', u'Markt', u'|', u'Dutch', u':', u'city', u'Belgium', u'the', u'capital', u'the', u'province', u'Flanders', u'one', u'Belgium', u"'s", u'three', u'regions']
[u"'s", u'total', u'population', u'472,071', u'1', u'January', u'2008', u'Statistics', u'Belgium', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'excel-file', u'Population', u'all', u'Belgium', u'1', u'January', u'2008']
[u'rising', u'fashion', u'city', u'has', u'produced', u'designers', u'such', u'the', u'Six']

Is Antwerp a municipality?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param39] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85050>, <src.tfidf.TF_IDF object at 0x7f203556f450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c85050>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Statistics', u';', u'De', u'Belgische', u'Stadsgewesten', u'2001', u'pdf-file', u'Definitions', u'metropolitan', u'areas']
[u'-', u'|', u'Grote', u'Markt', u'|', u'Dutch', u':', u'a', u'city', u'municipality', u'the', u'capital', u'the', u'province', u'Flanders', u'one', u"'s", u'three', u'regions']
[u"'s", u'total', u'population', u'472,071', u'1', u'January', u'2008', u'Statistics', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'excel-file', u'Population', u'all', u'municipalities', u'1', u'January', u'2008']
[u'Princeton', u'Encyclopedia', u'Classical', u'Sites', u'1976', u':', u'``', u"''", u'Official', u'Website', u'Capsule', u'History', u'Tourism']
[u'This', u'impediment', u'remained', u'force', u'1863', u'the', u'provisions', u'relaxed', u'French', u'rule', u'1795', u'to', u'1814', u'also', u'the', u'time', u'formed', u'part', u'the', u'Kingdom', u'the', u'United', u'Netherlands', u'1815', u'to', u'1830']

Is Antwerp in Belgium?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param41] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85488>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c85488>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'the', u'fourth', u'century', u'AD', u'the', u'Arab', u'kingdoms', u'the', u'Lakhmids', u'southern', u'Iraq', u'the', u'Ghassanids', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerged', u'Arabia']
[u'``', u"''"]
[u'``', u"''"]
[u'the', u'the', u'Qur', u'`']
[u'Most', u'linguists', u'list', u'it', u'separate', u'rather', u'dialect']

Is Arabic a Central Semitic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param42] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c854d0>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c854d0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'the', u'Middle', u'Ages', u'especially', u'science', u'mathematics', u'philosophy']
[u'occupied', u'position', u'similar', u'to', u'Latin', u'the', u'Islamic', u'world', u'many', u'the', u'concepts', u'the', u'field', u'science', u'philosophy', u'commerce', u'etc.', u'often', u'coined', u'non-native', u'speakers', u'notably', u'Aramaic', u'Persian', u'translators']
[u'Different', u'Dialects', u'the', u'Arab', u'World', u'The', u'dialect', u'groups', u':', u'Egyptian', u'spoken', u'76', u'million', u'Egypt']
[u'calligraphy', u'has', u'not', u'fallen', u'use', u'calligraphy', u'has', u'the', u'Western', u'world', u'still', u'considered', u'Arabs', u'art', u'form', u';', u'calligraphers', u'held', u'great', u'esteem']
[u'They', u'conjugated', u'two', u'paradigms', u'termed', u'perfective', u'imperfective', u'past', u'non-past', u';', u'two', u'voices', u'active', u'passive', u';', u'five', u'moods', u'the', u'imperfective', u'indicative', u'imperative', u'subjunctive', u'jussive', u'energetic']

Was Arabic a major vehicle of culture in Europe?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 1427402 characters, 266778 tokens, 2854.8 char/doc, 533.6 tok/doc RATES: 15.718 doc/sec, 8386.6 tok/sec

_____________________________ test_yesno[param43] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85518>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c85518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Arabic_language', u'a', u'Central', u'thus', u'related', u'to', u'other', u'such', u'Hebrew', u'the', u'Neo-Aramaic']
[u'terms', u'speakers', u'the', u'largest', u'member', u'the', u'family']
[u'It', u'also', u'the', u'only', u'tongue', u'written', u'the', u'Latin', u'alphabet']
[u'all', u'other', u'the', u'Latin-written', u'Maltese', u'the', u'the', u"Ge'ez", u'script', u'written', u'right', u'to', u'left']
[u'``', u"''"]

Is Arabic classified alongside Semitic languages?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param45] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c855a8>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c855a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'terms', u'speakers']
[u'Arabic_language', u'a', u'Central', u'thus', u'related', u'to', u'classified', u'other', u'such', u'Hebrew', u'Neo-Aramaic']
[u'Modern', u'Standard', u'derives', u'Classical', u'only', u'surviving', u'Old', u'North', u'Arabian', u'dialect', u'group', u'attested', u'Pre-Islamic', u'inscriptions', u'dating', u'back', u'to', u'4th', u'century']
[u'It', u'also', u'only', u'tongue', u'written', u'Latin', u'alphabet']
[u'all', u'other', u'Latin-written', u'Maltese', u"Ge'ez", u'script', u'written', u'right', u'to', u'left']

Is Arabic the largest member of the Semitic language family?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param46] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c855f0>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c855f0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'terms', u'speakers']
[u'Arabic_language', u'a', u'Central', u'thus', u'related', u'to', u'classified', u'other', u'such', u'Hebrew', u'Neo-Aramaic']
[u'Modern', u'Standard', u'derives', u'Classical', u'only', u'surviving', u'Old', u'North', u'Arabian', u'dialect', u'group', u'attested', u'Pre-Islamic', u'inscriptions', u'dating', u'back', u'to', u'4th', u'century']
[u'It', u'also', u'only', u'tongue', u'written', u'Latin', u'alphabet']
[u'all', u'other', u'Latin-written', u'Maltese', u"Ge'ez", u'script', u'written', u'right', u'to', u'left']

Is Arabic the largest member of the Semitic language family?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param49] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c856c8>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c856c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Central', u'Asian', u'Uzbekistan', u'Tajikistan', u'Afghanistan', u'highly', u'endangered', u'some', u'parts', u'Mali', u'Western', u'Sahara', u'Hejazi', u'Hejaz', u'western', u'Saudi', u'Arabia', u'Judeo-Arabic', u'dialects', u'Maltese', u'the', u'Mediterranean', u'island', u'Malta', u'the', u'only', u'one', u'to', u'have', u'established', u'itself', u'a', u'fully', u'separate', u'language', u'independent', u'literary', u'norms']
[u'Najdi', u'Nejd', u'central', u'Saudi', u'Arabia', u'Shuwa', u'Chad', u'Cameroon', u'Niger', u'Nigeria', u'Sudan', u'Siculo', u'Sicily', u'South', u'Italy', u'14th', u'century', u'developed', u'Maltese', u'MED', u'Magazine', u'Sudanese', u'Sudan', u'Yemeni', u'Yemen', u'southern', u'Saudi', u'Arabia', u'Djibouti', u'Somalia', u'The', u'phonemes', u'reflect', u'the', u'pronunciation', u'Modern', u'Standard']
[u'has', u'many', u'different', u'geographically-distributed', u'varieties', u'some', u'which', u'mutually', u'unintelligible']
[u'Closely', u'related', u'varieties', u'also', u'Sudan']
[u'A', u'History', u'the', u'Language', u'Colloquial', u'a', u'collective', u'term', u'the', u'varieties', u'used', u'the', u'Arab', u'world', u'which', u'differ', u'radically', u'the', u'literary', u'language']

Is Hassaniya Arabic spoken in Mauritania?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param50] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85710>, <src.tfidf.TF_IDF object at 0x7f203841c790>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c85710>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Central', u'Asian', u'Uzbekistan', u'Tajikistan', u'Afghanistan', u'highly', u'endangered', u'some', u'parts', u'Mali', u'Western', u'Sahara', u'Hejazi', u'Hejaz', u'western', u'Saudi', u'Arabia', u'Judeo-Arabic', u'dialects', u'Maltese', u'the', u'Mediterranean', u'island', u'Malta', u'the', u'only', u'one', u'to', u'have', u'established', u'itself', u'a', u'fully', u'separate', u'language', u'independent', u'literary', u'norms']
[u'Najdi', u'Nejd', u'central', u'Saudi', u'Arabia', u'Shuwa', u'Chad', u'Cameroon', u'Niger', u'Nigeria', u'Sudan', u'Siculo', u'Sicily', u'South', u'Italy', u'14th', u'century', u'developed', u'Maltese', u'MED', u'Magazine', u'Sudanese', u'Sudan', u'Yemeni', u'Yemen', u'southern', u'Saudi', u'Arabia', u'Djibouti', u'Somalia', u'The', u'phonemes', u'reflect', u'the', u'pronunciation', u'Modern', u'Standard']
[u'has', u'many', u'different', u'geographically-distributed', u'varieties', u'some', u'which', u'mutually', u'unintelligible']
[u'Closely', u'related', u'varieties', u'also', u'Sudan']
[u'A', u'History', u'the', u'Language', u'Colloquial', u'a', u'collective', u'term', u'the', u'varieties', u'used', u'the', u'Arab', u'world', u'which', u'differ', u'radically', u'the', u'literary', u'language']

Is Hassaniya Arabic spoken in Mauritania?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param52] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c857a0>, <src.tfidf.TF_IDF object at 0x7f20352b9d50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c857a0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Philharmonic', u'Orchestra', u'one', u'preeminent', u'orchestras', u'world', u';', u'Rattle', u"'s", u'honeymoon']
[u';', u'one', u'16', u'states']
[u'Federal', u'Republic', u'seat', u'President', u'whose', u'official', u'residence', u'Schloss', u'Bellevue']
[u'3', u'October', u'1990', u'two', u'parts', u'reunified', u'Federal', u'Republic', u'became', u'German', u'according', u'to', u'unification', u'treaty']
[u'Following', u'German', u'reunification', u'1990', u'regained', u'its', u'status', u'all', u'hosting', u'147', u'foreign', u'embassies']

Is Berlin the capital city of Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 100 documents, 4482 characters, 851 tokens, 44.8 char/doc, 8.5 tok/doc RATES: 5.173 doc/sec, 44.0 tok/sec

_____________________________ test_yesno[param54] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85830>, <src.tfidf.TF_IDF object at 0x7f20352b9d50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c85830>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Philharmonic', u'Orchestra', u'one', u'preeminent', u'orchestras', u'world', u';', u'Rattle', u"'s", u'honeymoon']
[u'a', u'population', u'3.4', u'million', u'people', u"'s"]
[u'Hauptbahnhof', u'crossing', u'station', u'Europe']
[u';', u'capital', u'one', u'16', u'states']
[u'It', u'remaining', u'evidence', u"'s", u'historical', u'division']

Is Berlin the largest city in Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param55] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85878>, <src.tfidf.TF_IDF object at 0x7f20352b9d50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool('Schloss Charlottenburg is the largest existing palace in Berlin. ') == True
E                +  where 'Schloss Charlottenburg is the largest existing palace in Berlin. ' = <src.question_processing.Question_parser instance at 0x7f2033c85878>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'which', u'burnt', u'out', u'Second', u'World', u'War', u'largely', u'destroyed', u'has', u'rebuilt', u'surviving', u'historical']
[u'Philharmonic', u'Orchestra', u'one', u'preeminent', u'orchestras', u'world', u';', u'Rattle', u"'s", u'honeymoon']
[u'Deutsche', u'Oper', u'opened', u'1912']
[u'West', u'center', u'Bellevue', u'residence', u'German', u'President']

Is Schloss Charlottenburg the largest existing palace in Berlin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Schloss Charlottenburg is the largest existing palace in Berlin. 
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param63] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85ab8>, <src.tfidf.TF_IDF object at 0x7f2035cebd10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c85ab8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'How', u'so']
[u'the', u'first', u'order']
[u'Blaise_Pascal', u'Blaise', u'b.', u'1623-06-19', u'Clermont-Ferrand', u'France', u'd.', u'1662-08-19', u'Paris', u'physicist', u'religious', u'philosopher']
[u'Blaise', u':', u'Physicist', u'Thinker', u'God', u'1995', u'Adamson', u'Donald']
[u'literature', u'regarded', u'one', u'the', u'most', u'important', u'authors', u'the', u'Classical', u'Period', u'read', u'today', u'one', u'the', u'greatest', u'masters', u'prose']

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param64] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85b00>, <src.tfidf.TF_IDF object at 0x7f2035cebd10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c85b00>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'How', u'so']
[u'the', u'first', u'order']
[u'Blaise_Pascal', u'Blaise', u'b.', u'1623-06-19', u'Clermont-Ferrand', u'France', u'd.', u'1662-08-19', u'Paris', u'physicist', u'religious', u'philosopher']
[u'Blaise', u':', u'Physicist', u'Thinker', u'God', u'1995', u'Adamson', u'Donald']
[u'literature', u'regarded', u'one', u'the', u'most', u'important', u'authors', u'the', u'Classical', u'Period', u'read', u'today', u'one', u'the', u'greatest', u'masters', u'prose']

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param65] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85b48>, <src.tfidf.TF_IDF object at 0x7f2035cebd10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c85b48>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'death', u'came', u'just', u'two', u'months', u'39th', u'birthday']
[u'How', u'so']
[u'continued', u'to', u'influence', u'mathematics']
[u'was', u'deeply', u'affected', u'very', u'sad', u'not', u'her', u'choice', u'chronic', u';', u'too', u'needed', u'her']
[u'However', u'it', u'should', u'be', u'noted', u'Fermat', u'important', u'early', u'work', u'probability', u'theory', u'not', u'develop', u'the', u'field', u'very', u'far']

Did Pascal have poor health throughout his life?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param66] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85b90>, <src.tfidf.TF_IDF object at 0x7f2035cebd10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c85b90>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'death', u'came', u'just', u'two', u'months', u'39th', u'birthday']
[u'How', u'so']
[u'continued', u'to', u'influence', u'mathematics']
[u'was', u'deeply', u'affected', u'very', u'sad', u'not', u'her', u'choice', u'chronic', u';', u'too', u'needed', u'her']
[u'However', u'it', u'should', u'be', u'noted', u'Fermat', u'important', u'early', u'work', u'probability', u'theory', u'not', u'develop', u'the', u'field', u'very', u'far']

Did Pascal have poor health throughout his life?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param68] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85c20>, <src.tfidf.TF_IDF object at 0x7f2035cebd10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c85c20>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'How', u'so']
[u'honor', u'his', u'scientific', u'contributions', u'the', u'name', u'has', u'given', u'to', u'the', u'SI', u'unit', u'pressure', u'to', u"'s", u'law', u'important', u'principle', u'hydrostatics', u'mentioned', u"'s", u'triangle', u"'s", u'wager', u'still', u'bear', u'his', u'name']
[u'Therefore', u'had', u'to', u'invisible', u'``', u'something', u"''", u'to', u'move', u'the', u'light', u'the', u'glass', u'tube', u'no', u'vacuum', u'the', u'tube']
[u'``', u'Suddenly', u'war', u'the', u'household']
[u'Nevertheless', u'no', u'way', u'to', u'know', u'the', u'assumed', u'principles', u'to', u'true']

Is there a programming language called Pascal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param77] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85e18>, <src.tfidf.TF_IDF object at 0x7f2034d98290>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c85e18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'him']
[u'He', u'discovered', u'an', u'inverse', u'relationship', u'force', u'electric', u'square', u'its', u'distance', u'later', u'him', u"'s", u'law']
[u'Charles-Augustin_de_Coulomb', u'14', u'June', u'1736', u'23', u'August', u'1806', u'a', u'French', u'physicist']
[u'1784', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'la', u'force', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'metal', u'Histoire', u'lAcadmie', u'Royale', u'des', u'Sciences', u'229-269', u'1784', u'Theoretical', u'research', u'experimentation', u'torsion', u'elasticity', u'metal', u'wire', u'appeared']
[u'He', u'used', u'instrument', u'great', u'success', u'experimental', u'investigation', u'distribution', u'surfaces', u'laws', u'electrical', u'magnetic', u'force', u'mathematical', u'theory', u'which', u'he', u'may', u'also', u'regarded', u'founder']

Was the SI unit of charge named after Charles-Augustin de Coulomb?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param79] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c85f80>, <src.tfidf.TF_IDF object at 0x7f2034d98290>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c85f80>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'his', u'return', u'to', u'France', u'the', u'rank', u'Captain', u'he', u'the', u'Isle', u'Aix', u'Cherbourg']
[u'Charles-Augustin_de_Coulomb', u'14', u'June', u'1736', u'23', u'August', u'1806', u'a', u'French', u'physicist']
[u'1781', u'he', u'stationed', u'permanently', u'Paris']
[u'When', u'a', u'boy', u'the', u'family', u'moved', u'to', u'Paris', u'there', u'studied', u'the', u'prestigious', u'Collge', u'des', u'Quatre-Nations']
[u'1784', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'force', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'metal', u'Histoire', u'lAcadmie', u'Royale', u'des', u'Sciences', u'229-269', u'1784', u'Theoretical', u'research', u'experimentation', u'torsion', u'the', u'elasticity', u'metal', u'wire', u'appeared']

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param82] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86050>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86050>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'use', u'tones']
[u'distinguished', u'its', u'high', u'level', u'internal', u'diversity', u'analytic']
[u'The', u'total', u'number', u'syllables', u'some', u'therefore', u'only', u'a', u'thousand', u'including', u'variation', u'which', u'only', u'an', u'eighth', u'many', u'English', u'DeFrancis', u'1984', u'p.', u'42', u'counts', u'having', u'1,277', u'syllables', u'398', u'to', u'418', u'tones', u'disregarded', u';', u'he', u'cites', u'Jespersen', u'Otto', u'1928', u'Monosyllabism', u'English', u';', u'London', u'p.', u'15', u'a', u'count', u'8000', u'syllables', u'English']
[u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'it', u'to', u'learn']
[u'The', u'government', u'intends', u'speakers', u'speech', u'to', u'use', u'it', u'a', u'common', u'language', u'communication']

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param83] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86098>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86098>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'use', u'tones']
[u'distinguished', u'its', u'high', u'level', u'internal', u'diversity', u'analytic']
[u'The', u'total', u'number', u'syllables', u'some', u'therefore', u'only', u'a', u'thousand', u'including', u'variation', u'which', u'only', u'an', u'eighth', u'many', u'English', u'DeFrancis', u'1984', u'p.', u'42', u'counts', u'having', u'1,277', u'syllables', u'398', u'to', u'418', u'tones', u'disregarded', u';', u'he', u'cites', u'Jespersen', u'Otto', u'1928', u'Monosyllabism', u'English', u';', u'London', u'p.', u'15', u'a', u'count', u'8000', u'syllables', u'English']
[u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'it', u'to', u'learn']
[u'The', u'government', u'intends', u'speakers', u'speech', u'to', u'use', u'it', u'a', u'common', u'language', u'communication']

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param84] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c860e0>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c860e0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'likewise', u'a', u'significant', u'percentage', u'Japanese', u'Vietnamese']
[u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'it', u'to', u'learn']
[u'The', u'pronunciation', u'the', u'borrowed', u'characters', u'Japanese', u'Vietnamese', u'also', u'provide', u'valuable', u'insights']
[u'However', u'characters', u'should', u'not', u'confused', u'words', u';', u'most', u'words', u'made', u'up', u'two', u'different', u'characters', u'there', u'many', u'times', u'words', u'there', u'characters']
[u'A', u'c', u'word', u'can', u'consist', u'one', u'character-morpheme', u'usually', u'two', u'there', u'can', u'three']

Is fifty percent or more of Korean vocabulary of Chinese origin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param85] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86128>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86128>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'likewise', u'a', u'significant', u'percentage', u'Japanese', u'Vietnamese']
[u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'it', u'to', u'learn']
[u'The', u'pronunciation', u'the', u'borrowed', u'characters', u'Japanese', u'Vietnamese', u'also', u'provide', u'valuable', u'insights']
[u'However', u'characters', u'should', u'not', u'confused', u'words', u';', u'most', u'words', u'made', u'up', u'two', u'different', u'characters', u'there', u'many', u'times', u'words', u'there', u'characters']
[u'A', u'c', u'word', u'can', u'consist', u'one', u'character-morpheme', u'usually', u'two', u'there', u'can', u'three']

Is fifty percent or more of Korean vocabulary of Chinese origin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param86] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86170>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c86170>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Examples', u'such', u'words', u'are', u'tea', u'POJ', u':', u't', u'kumquat', u'Cantonese', u'kam', u'kuat']
[u'French', u'bli', u'ballet', u'xingbn', u'champagne', u'Italian', u'kfi', u'caff']
[u'Other', u'words', u'nomadic', u'peoples', u'to', u'north', u'such', u'hutong']
[u'This', u'is', u'employing', u'Chinese', u'characters', u'similar']
[u'evidence', u'Middle', u'Chinese', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u'rhyming', u'dictionaries', u'foreign', u'transliterations', u'rhyming', u'tables', u'constructed', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'phonetic', u'system', u'Chinese', u'phonetic', u'translations', u'foreign', u'words']

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param87] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c861b8>, <src.tfidf.TF_IDF object at 0x7f203743eb10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c861b8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Examples', u'such', u'words', u'are', u'tea', u'POJ', u':', u't', u'kumquat', u'Cantonese', u'kam', u'kuat']
[u'French', u'bli', u'ballet', u'xingbn', u'champagne', u'Italian', u'kfi', u'caff']
[u'Other', u'words', u'nomadic', u'peoples', u'to', u'north', u'such', u'hutong']
[u'This', u'is', u'employing', u'Chinese', u'characters', u'similar']
[u'evidence', u'Middle', u'Chinese', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u'rhyming', u'dictionaries', u'foreign', u'transliterations', u'rhyming', u'tables', u'constructed', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'phonetic', u'system', u'Chinese', u'phonetic', u'translations', u'foreign', u'words']

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param95] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c863f8>, <src.tfidf.TF_IDF object at 0x7f20344d9910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c863f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'Puma', u'concolor', u'puma', u'cat', u'catamount', u'panther', u'depending', u'the', u'region', u'mammal', u'the', u'family', u'Felidae', u'native', u'to', u'the', u'Americas']
[u'The', u'has', u'numerous', u'names', u'English', u'which', u'puma', u'popular']
[u'Search', u'continues', u'that', u'killed', u'Pinos', u'Altos', u'man', u'New', u'Mexico', u'Department', u'Game', u'Fish', u'press', u'release', u'June', u'23', u'2008', u';', u'Wounded', u'captured', u'killed', u'Pinos', u'Altos', u'New', u'Mexico', u'Department', u'Game', u'Fish', u'press', u'release', u'June', u'25', u'2008', u';', u'Second', u'captured', u'Pinos', u'Altos', u'New', u'Mexico', u'Department', u'Game', u'Fish', u'press', u'release', u'July', u'1', u'2008', u'many', u'predators', u'may', u'attack', u'cornered', u'fleeing', u'human', u'stimulates', u'their', u'instinct', u'to', u'chase', u'person', u'``', u'plays', u'dead', u"''"]
[u'Description', u'attack', u'Facts', u'Photos', u'NatureMapping', u'Program', u'No', u'Place', u'Predators']
[u'The', u'Quebec', u'wildlife', u'services', u'locally', u'MRNF', u'considers', u'to', u'present', u'the', u'province', u'threatened', u'species', u'multiple', u'DNA', u'tests', u'confirmed', u'hair', u'Lynx', u'mating', u'sites']

Is a cougar also known as a mountain lion?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param99] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86518>, <src.tfidf.TF_IDF object at 0x7f20344d9910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'IUCN', u'currently', u'lists']
[u'South', u'Rio', u'Grande', u'International', u'Nature', u'Natural', u'Resources', u'IUCN', u'lists', u'cat', u'every', u'Central', u'South', u'American', u'country', u'Costa', u'Rica', u'Panama']
[u'Most', u'not', u'reach', u'adulthood']
[u'early', u'years', u'ranching', u'were', u'par', u'wolves', u'destructiveness']
[u'term', u'black', u'panther', u'is', u'used', u'colloquially', u'to', u'refer', u'to', u'melanistic', u'individuals', u'other', u'particularly', u'jaguars', u'leopards']

Does the World Conservation Union consider the cougar a "least concern" species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param102] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c865f0>, <src.tfidf.TF_IDF object at 0x7f203a105a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c865f0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'most', u'the', u'Hi-Hats', u'Crash', u'Splash', u'China']
[u'This', u'combination', u'played', u'loudly', u'an', u'effective', u'way', u'to', u'accentuate', u'a', u'note', u'the', u'two', u'instruments', u'together', u'contribute', u'to', u'both', u'low', u'high', u'frequency', u'ranges', u'provide', u'a', u'satisfying', u'``', u'crash-bang-wallop', u"''"]
[u'However', u'hi-hat', u'tend', u'to', u'heavy', u'little', u'taper', u'more', u'similar', u'to', u'a', u'to', u'a', u'crash', u'found', u'a', u'drum', u'kit', u'perform', u'a', u'rather', u'a', u'crash', u'function']
[u'China', u'crash', u'hi-hat', u'Persian', u'Swish', u'pang', u'Sizzle', u'Splash', u'Trash', u'Hats', u'Hi-Hat', u'/', u'china', u'hybrid', u'setup', u'Clash', u'Finger', u'-', u'Zill', u'Suspended', u'alloys', u'making', u'Drum', u'Drum', u'kit', u'Percussion', u'instrument', u'Avedis', u'Zildjian', u'Company', u'Saluda', u'Cymbals', u'Italian', u'Bellotti', u'Cymbals', u'Agean', u'Cymbals', u'Bosphorus', u'Cymbals', u'Meinl', u'Paiste', u'Sabian', u'Stagg', u'UFIP', u'Yamaha', u'Wuhan', u'Istanbul', u'Istanbul', u'Agop', u'Turk', u'Masters', u':', u'See', u'also']
[u'The', u'second', u'main', u'orchestral', u'use', u'the', u'suspended']

Are ride cymbals very common?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param104] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86680>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86680>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Bass', u'made', u'wood', u'rope', u'cowskin', u'technically', u'classified', u'membranophone']
[u'realm', u'popular', u'music', u'jazz', u'``', u"''", u'usually', u'refers', u'to', u'kit', u'set', u'``', u'drummer', u"''", u'to', u'actual', u'band', u'person', u'who', u'plays', u'them']
[u'larger', u'diameter', u'shell', u'lower', u'pitch', u'will']
[u'second', u'biggest', u'factor', u'affecting', u'sound', u'produced', u'tension', u'which', u'drumhead', u'held', u'shell']
[u'type', u'shell', u'also', u'affects', u'sound']

Is the drum a member of the percussion group?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param105] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c866c8>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c866c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Bass', u'made', u'wood', u'rope', u'cowskin', u'technically', u'classified', u'membranophone']
[u'realm', u'popular', u'music', u'jazz', u'``', u"''", u'usually', u'refers', u'to', u'kit', u'set', u'``', u'drummer', u"''", u'to', u'actual', u'band', u'person', u'who', u'plays', u'them']
[u'larger', u'diameter', u'shell', u'lower', u'pitch', u'will']
[u'second', u'biggest', u'factor', u'affecting', u'sound', u'produced', u'tension', u'which', u'drumhead', u'held', u'shell']
[u'type', u'shell', u'also', u'affects', u'sound']

Is the drum a member of the percussion group?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param106] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86710>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86710>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'drumhead', u'has', u'unique', u'sound']
[u'two', u'can', u'also', u'have', u'a', u'set', u'wires', u'called', u'snares', u'held', u'the', u'bottom', u'top', u'both', u'hence', u'the', u'name', u'snare']
[u'The', u'shell', u'also', u'affects', u'the', u'sound', u'a']
[u'The', u'sound', u'a', u'depends', u'several', u'variables', u'including', u'shape', u'size', u'thickness', u'shell', u'materials', u'which', u'the', u'shell', u'was', u'made', u'counterhoop', u'material', u'drumhead', u'used', u'tension', u'applied', u'to', u'it', u'position', u'the', u'location', u'the', u'velocity', u'angle', u'which', u'it', u'is', u'struck']
[u'The', u'wood', u'is', u'important', u'as', u'well']

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param107] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86758>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'drumhead', u'has', u'unique', u'sound']
[u'two', u'can', u'also', u'have', u'a', u'set', u'wires', u'called', u'snares', u'held', u'the', u'bottom', u'top', u'both', u'hence', u'the', u'name', u'snare']
[u'The', u'shell', u'also', u'affects', u'the', u'sound', u'a']
[u'The', u'sound', u'a', u'depends', u'several', u'variables', u'including', u'shape', u'size', u'thickness', u'shell', u'materials', u'which', u'the', u'shell', u'was', u'made', u'counterhoop', u'material', u'drumhead', u'used', u'tension', u'applied', u'to', u'it', u'position', u'the', u'location', u'the', u'velocity', u'angle', u'which', u'it', u'is', u'struck']
[u'The', u'wood', u'is', u'important', u'as', u'well']

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 200 documents, 9473 characters, 1804 tokens, 47.4 char/doc, 9.0 tok/doc RATES: 5.918 doc/sec, 53.4 tok/sec

_____________________________ test_yesno[param108] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c867a0>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c867a0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'shell', u'also', u'affects', u'sound']
[u'wood', u'important', u'as', u'well']
[u'vibrations', u'resonate', u'shell', u'shell', u'can', u'used', u'to', u'increase', u'volume', u'to', u'manipulate', u'sound', u'produced']
[u'carried', u'John', u'Unger', u'Company', u'B', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u'December', u'20', u'1863', u'Several', u'factors', u'determine', u'sound', u'produces', u'including', u'shell', u'has', u'drumheads', u'it', u'has', u'tension', u'drumheads']
[u'sound', u'depends', u'several', u'variables', u'including', u'shape', u'size', u'thickness', u'its', u'shell', u'materials', u'which', u'shell', u'made', u'counterhoop', u'material', u'drumhead', u'used', u'tension', u'applied', u'to', u'it', u'position', u'location', u'velocity', u'angle', u'which', u'it', u'struck']

Is the Aburukuwa a type of drum?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param111] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86878>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Bass', u'made', u'wood', u'rope', u'cowskin', u'technically', u'classified', u'membranophone']
[u'realm', u'popular', u'music', u'jazz', u'``', u"''", u'usually', u'refers', u'to', u'kit', u'set', u'``', u'drummer', u"''", u'to', u'actual', u'band', u'person', u'who', u'plays', u'them']
[u'larger', u'diameter', u'shell', u'lower', u'pitch', u'will']
[u'second', u'biggest', u'factor', u'affecting', u'sound', u'produced', u'tension', u'which', u'drumhead', u'held', u'shell']
[u'type', u'shell', u'also', u'affects', u'sound']

Is the drum a member of the percussion group?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param112] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c868c0>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c868c0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Bass', u'made', u'wood', u'rope', u'cowskin', u'technically', u'classified', u'membranophone']
[u'realm', u'popular', u'music', u'jazz', u'``', u"''", u'usually', u'refers', u'to', u'kit', u'set', u'``', u'drummer', u"''", u'to', u'actual', u'band', u'person', u'who', u'plays', u'them']
[u'larger', u'diameter', u'shell', u'lower', u'pitch', u'will']
[u'second', u'biggest', u'factor', u'affecting', u'sound', u'produced', u'tension', u'which', u'drumhead', u'held', u'shell']
[u'type', u'shell', u'also', u'affects', u'sound']

Is the drum a member of the percussion group?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param113] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86908>, <src.tfidf.TF_IDF object at 0x7f203599f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86908>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'especially', u'hand', u'their', u'tactile', u'nature', u'easy', u'a', u'wide', u'variety', u'people']
[u'Different', u'sounds', u'have', u'different']
[u'many', u'traditional', u'cultures', u'have', u'a', u'symbolic', u'function', u'religious', u'ceremonies']
[u'Rock', u'drummers', u'prefer', u'the', u'thicker', u'coated', u'drumheads']
[u'several', u'arranged', u'together', u'to', u'create', u'a', u'kit', u'that', u'can', u'played', u'one', u'musician', u'all', u'four', u'limbs']

Are drums often used in music therapy?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param122] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86b90>, <src.tfidf.TF_IDF object at 0x7f203a04b650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool('Yes, most eels are predators.') == True
E                +  where 'Yes, most eels are predators.' = <src.question_processing.Question_parser instance at 0x7f2033c86b90>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'true', u'prefer', u'to', u'dwell', u'shallow', u'waters', u'hide', u'the', u'bottom', u'layer', u'the', u'ocean', u'sometimes', u'holes']
[u'The', u'electric', u'South', u'America', u'not', u'a', u'true', u'more', u'closely', u'related', u'to', u'the', u'Carp']
[u'The', u'term', u'``', u"''", u'also', u'used', u'some', u'other', u'similarly', u'shaped', u'fish', u'such', u'electric', u'spiny', u'these', u'not', u'members', u'the', u'Anguilliformes', u'order']
[u'also', u'popular', u'Korean', u'cuisine', u'seen', u'a', u'source', u'stamina', u'men']

Are most eels predators?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, most eels are predators.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param123] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86bd8>, <src.tfidf.TF_IDF object at 0x7f203a04b650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c86bd8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'cooking', u'destroys', u'the', u'protein']
[u'The', u'toxin', u'derived', u'serum', u'used', u'Charles', u'Richet', u'his', u'Nobel', u'winning', u'research', u'which', u'discovered', u'anaphylaxis', u'injecting', u'it', u'dogs', u'observing', u'the', u'effect']
[u'This', u'myth', u'likely', u'came', u'Greece', u'Anatolia', u'the', u'Hittite', u'version', u'the', u'dragon', u'called', u'Illuyanka', u'the', u'illuy', u'-', u'part', u'cognate', u'the', u'illa', u'word', u'the', u'-', u'anka', u'part', u'cognate', u'the', u'angu', u'word', u'``', u'snake', u"''"]
[u'Only', u'members', u'the', u'Anguillidae', u'family', u'regularly', u'inhabit', u'fresh', u'water', u';', u'they', u'too', u'return', u'the', u'sea', u'breed']
[u'The', u'name', u'Bellerophon', u'attested', u'a', u'variant', u'Eustathius', u'Thessalonica', u'according', u'this', u'theory', u'also', u'related', u'translating', u'``', u'the', u'slayer', u'the', u'serpent', u"''", u'ahihn', u'the', u'-', u'an', u'adjective', u'a', u'lost', u'-', u'``', u'snake', u"''", u'directly', u'comparable', u'Hittite', u'ellu-essar', u'-', u'``', u'snake', u'pit', u"''"]

Is eel blood toxic to humans?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param125] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86c68>, <src.tfidf.TF_IDF object at 0x7f20367ecc10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c86c68>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'one', u'two', u'Finland', u'other', u'Swedish', u'spoken', u'5.49', u'%', u'population', u'Statistikcentralen', u'-', u'Befolkning']
[u'It', u'one', u'Finland', u'minority', u'Sweden']
[u'you', u'English']
[u'Do', u'you', u'understand']
[u'Do', u'you', u'speak', u'English']

Is Finnish an official language of the European Union?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param127] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86cf8>, <src.tfidf.TF_IDF object at 0x7f20367ecc10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c86cf8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Map', u'distinct', u'Western', u'Eastern']
[u'has', u'only', u'fricatives', u'namely']
[u'you', u'English']
[u'Western', u'Southern-Western', u'***', u'Proper', u'Southern-Western', u'****', u'Northern', u'****', u'Southern', u'***', u'Southern-Western', u'middle', u'****', u'Pori', u'region', u'****', u'Ala-Satakunta', u'****', u'Turku', u'highlands', u'****', u'Somero', u'region', u'****', u'Western', u'Uusimaa', u'Tavastian', u'***', u'Yl-Satakunta', u'***', u'Heart', u'Tavastian', u'***', u'Southern', u'Tavastian', u'***', u'Southern-Eastern', u'Tavastian', u'****', u'Hollola', u'****', u'Porvoo', u'****', u'Iitti', u'Southern', u'Botnian', u'Middle', u'Northern', u'Botnian', u'***', u'Middle', u'Botnian', u'***', u'Northern', u'Botnian', u'Perpohjola', u'***', u'Tornio', u'``', u'Menkieli', u"''", u'Sweden', u'***', u'Kemi', u'***', u'Kemijrvi', u'***', u'Jllivaara', u'``', u'Menkieli', u"''", u'Sweden', u'***', u'Ruija', u'``', u'Kven', u'language', u"''", u'Northern', u'Norway', u'Eastern', u'Savonian', u'***', u'Northern', u'Savonian', u'***', u'Southern', u'Savonian', u'***', u'Middle', u'Savonlinna', u'region', u'***', u'Eastern', u'Savonian', u'North', u'Karelia', u'***', u'Kainuu', u'***', u'Central', u'Finland', u'***', u'Pijnne', u'Tavastia', u'***', u'Keuruu-Evijrvi', u'***', u'Savonian', u'Vrmland', u'Sweden', u'Southern-Eastern', u'***', u'Proper', u'Southern-Eastern', u'***', u'Middle', u'Lemi', u'region', u'***', u'Middle', u'Sortavala', u'region', u'now', u'Russia', u'***', u'Ingria', u'Russia', u'/', u'ref', u'>', u'There', u'main', u'varieties', u'used', u'country']
[u'Do', u'you', u'understand']

Are the dialects of Finnish divided into two groups?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param137] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c86fc8>, <src.tfidf.TF_IDF object at 0x7f2035ceb710>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c86fc8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'7th', u'century', u'BC', u'spread', u'to', u'other', u'parts', u'Europe']
[u'Playing', u'zampoa', u'a', u'Pre-Inca', u'instrument', u'type']
[u'ocarina', u'pipes', u'police', u'whistle', u'bosun', u"'s", u'whistle', u'closed-ended']
[u'invention', u'plastics', u'20th', u'century', u'gave', u'birth', u'to', u'tonette', u'a', u'fipple', u'music', u'education', u'it', u'soon', u'fell', u'replaced', u'plastic', u'recorders']
[u'first', u'literary', u'appearance', u'transverse', u'made', u'1285', u'early', u'instrument', u'only', u'Germany', u'France']

Was the pan flute used in Greece?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param138] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b050>, <src.tfidf.TF_IDF object at 0x7f2035ceb710>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b050>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'7th', u'century', u'BC', u'spread', u'to', u'other', u'parts', u'Europe']
[u'Playing', u'zampoa', u'a', u'Pre-Inca', u'instrument', u'type']
[u'ocarina', u'pipes', u'police', u'whistle', u'bosun', u"'s", u'whistle', u'closed-ended']
[u'invention', u'plastics', u'20th', u'century', u'gave', u'birth', u'to', u'tonette', u'a', u'fipple', u'music', u'education', u'it', u'soon', u'fell', u'replaced', u'plastic', u'recorders']
[u'first', u'literary', u'appearance', u'transverse', u'made', u'1285', u'early', u'instrument', u'only', u'Germany', u'France']

Was the pan flute used in Greece?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param141] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b128>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b128>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'recent', u'decades', u'Giant', u'Panda', u'also', u'an', u'country']
[u'Panda', u'Politics']
[u'issue', u'became', u'embroiled', u'cross-Strait', u'relationsboth', u'underlying', u'symbolism', u'technical', u'issues', u'such', u'transfer', u'would', u'be', u'considered', u'``', u'domestic', u"''", u'``', u'international', u"''", u'any', u'true', u'conservation', u'purpose', u'would', u'be', u'exchange']
[u'Not', u'1950s', u'were', u'pandas', u'again', u'recorded', u'to', u'been', u'exhibited', u'zoos']
[u'Pandas', u'been', u'kept', u'zoos', u'early', u'Western', u'Han', u'Dynasty', u'where', u'writer', u'Sima', u'Xiangru', u'notes', u'panda', u'was', u'most', u'treasured', u'animal', u'emperor', u'garden', u'exotic', u'animals', u"Xi'an"]

Has the dragon historically served as China's national emblem?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param142] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b170>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b170>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'recent', u'decades', u'Giant', u'Panda', u'also', u'an', u'country']
[u'Panda', u'Politics']
[u'issue', u'became', u'embroiled', u'cross-Strait', u'relationsboth', u'underlying', u'symbolism', u'technical', u'issues', u'such', u'transfer', u'would', u'be', u'considered', u'``', u'domestic', u"''", u'``', u'international', u"''", u'any', u'true', u'conservation', u'purpose', u'would', u'be', u'exchange']
[u'Not', u'1950s', u'were', u'pandas', u'again', u'recorded', u'to', u'been', u'exhibited', u'zoos']
[u'Pandas', u'been', u'kept', u'zoos', u'early', u'Western', u'Han', u'Dynasty', u'where', u'writer', u'Sima', u'Xiangru', u'notes', u'panda', u'was', u'most', u'treasured', u'animal', u'emperor', u'garden', u'exotic', u'animals', u"Xi'an"]

Has the dragon historically served as China's national emblem?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 600 documents, 1432132 characters, 267695 tokens, 2386.9 char/doc, 446.2 tok/doc RATES: 10.962 doc/sec, 4890.7 tok/sec

_____________________________ test_yesno[param145] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b248>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b248>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'the', u'is', u'often', u'assumed', u'to', u'be', u'docile', u'it', u'has', u'been', u'known', u'to', u'presumably', u'irritation', u'rather', u'predatory', u'behavior']
[u'A', u'cub']
[u'the', u'1990s', u'however', u'several', u'laws', u'including', u'gun', u'control', u'the', u'removal', u'resident', u'the', u'reserves', u'helped', u'the', u'chances', u'survival']
[u'However', u'the', u'IUCN', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'Endangered', u'to', u'Vulnerable']
[u'this', u'reason', u'not', u'hibernate', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u'will', u'instead', u'move', u'to', u'elevations', u'warmer', u'temperatures']

Do giant pandas attack humans?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param146] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b290>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b290>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'the', u'is', u'often', u'assumed', u'to', u'be', u'docile', u'it', u'has', u'been', u'known', u'to', u'presumably', u'irritation', u'rather', u'predatory', u'behavior']
[u'A', u'cub']
[u'the', u'1990s', u'however', u'several', u'laws', u'including', u'gun', u'control', u'the', u'removal', u'resident', u'the', u'reserves', u'helped', u'the', u'chances', u'survival']
[u'However', u'the', u'IUCN', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'Endangered', u'to', u'Vulnerable']
[u'this', u'reason', u'not', u'hibernate', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u'will', u'instead', u'move', u'to', u'elevations', u'warmer', u'temperatures']

Do giant pandas attack humans?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param147] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b2d8>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b2d8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'cub']
[u'Giant_Panda', u'Ailuropoda', u'melanoleuca', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'native', u'to', u'central-western', u'south', u'western', u'China']
[u'this', u'reason', u'do', u'not', u'hibernate', u'which', u'similar', u'to', u'other', u'subtropical', u'will', u'instead', u'move', u'to', u'elevations', u'warmer', u'temperatures']
[u'first', u'that', u'born', u'survived', u'captivity', u'China']
[u'genome', u'sequenced', u'2009', u'using', u'next-generation', u'sequencing', u'technology']

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b320>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b320>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'cub']
[u'Giant_Panda', u'Ailuropoda', u'melanoleuca', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'native', u'to', u'central-western', u'south', u'western', u'China']
[u'this', u'reason', u'do', u'not', u'hibernate', u'which', u'similar', u'to', u'other', u'subtropical', u'will', u'instead', u'move', u'to', u'elevations', u'warmer', u'temperatures']
[u'first', u'that', u'born', u'survived', u'captivity', u'China']
[u'genome', u'sequenced', u'2009', u'using', u'next-generation', u'sequencing', u'technology']

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param149] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b368>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b368>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'wild', u'primarily', u'spends', u'its', u'life', u'roaming', u'feeding', u'bamboo', u'forests', u'Qinling', u'Mountains', u'hilly', u'Sichuan', u'Province']
[u'cub']
[u'rest', u"'s", u'coat', u'white']
[u'Pandas', u'have', u'kept', u'zoos', u'as', u'early', u'Western', u'Han', u'Dynasty', u'China', u'where', u'writer', u'Sima', u'Xiangru', u'notes', u'most', u'treasured', u'emperor', u"'s", u'garden', u'exotic', u"Xi'an"]
[u'many', u'other', u'Ancient', u'China', u'rarely', u'thought', u'to', u'have', u'medical', u'uses']

Is the Giant Panda a terrestrial animal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param150] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b3b0>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b3b0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'wild', u'primarily', u'spends', u'its', u'life', u'roaming', u'feeding', u'bamboo', u'forests', u'Qinling', u'Mountains', u'hilly', u'Sichuan', u'Province']
[u'cub']
[u'rest', u"'s", u'coat', u'white']
[u'Pandas', u'have', u'kept', u'zoos', u'as', u'early', u'Western', u'Han', u'Dynasty', u'China', u'where', u'writer', u'Sima', u'Xiangru', u'notes', u'most', u'treasured', u'emperor', u"'s", u'garden', u'exotic', u"Xi'an"]
[u'many', u'other', u'Ancient', u'China', u'rarely', u'thought', u'to', u'have', u'medical', u'uses']

Is the Giant Panda a terrestrial animal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param151] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b3f8>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b3f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'conservation', u'reliant']
[u'still', u'it', u'thought', u'conservation', u'efforts', u'working']
[u'threatened', u'continued', u'habitat', u'loss', u'very', u'low', u'birthrate', u'wild', u'captivity']
[u'synchronous', u'flowering', u'death', u'regeneration', u'all', u'bamboo', u'must', u'have', u'least', u'two', u'different', u'available', u'its', u'range', u'to', u'avoid', u'starvation']
[u'Only', u'few', u'bamboo', u'widespread', u'high', u'altitudes', u'now', u'inhabit']

Is the Giant Panda an endangered species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param152] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b440>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b440>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'conservation', u'reliant']
[u'still', u'it', u'thought', u'conservation', u'efforts', u'working']
[u'threatened', u'continued', u'habitat', u'loss', u'very', u'low', u'birthrate', u'wild', u'captivity']
[u'synchronous', u'flowering', u'death', u'regeneration', u'all', u'bamboo', u'must', u'have', u'least', u'two', u'different', u'available', u'its', u'range', u'to', u'avoid', u'starvation']
[u'Only', u'few', u'bamboo', u'widespread', u'high', u'altitudes', u'now', u'inhabit']

Is the Giant Panda an endangered species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param153] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b488>, <src.tfidf.TF_IDF object at 0x7f2037826a10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b488>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'cub']
[u'eating', u'bamboo', u'National', u'Zoo', u'Washington', u'D.C.', u'its', u'taxonomic', u'classification', u'has', u'diet', u'that', u'primarily', u'herbivorous', u'which', u'consists', u'almost', u'exclusively', u'bamboo']
[u'However', u'still', u'has', u'digestive', u'system', u'does', u'not', u'have', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u'thus', u'derives', u'little', u'energy', u'little', u'protein', u'consumption', u'bamboo']
[u'first', u'that', u'born', u'survived', u'captivity', u'China']
[u'genome', u'sequenced', u'2009', u'using', u'next-generation', u'sequencing', u'technology']

Is the Giant Panda a carnivore?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param156] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b560>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b560>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u';', u':', u'usually', u'played', u'four', u'five', u'metal', u'strings']
[u'They', u'substantially', u'more', u'delicate', u'generate', u'much', u'quieter', u'sound']
[u'19th', u'century', u'now', u'known', u'salon', u'modern', u'instruments']
[u'fretboard', u'radius', u'more', u'noticeably', u'curved', u'fretboard']
[u';', u'Flat-top', u'steel-string', u':', u'Similar', u'to', u'however', u'varied', u'sizes', u'steel-stringed', u'body', u'size', u'usually', u'significantly', u'larger', u'it', u'has', u'narrower', u'reinforced', u'neck', u'stronger', u'structural', u'design']

Is the battente smaller than a classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param157] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b5a8>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c8b5a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u';', u':', u'usually', u'played', u'four', u'five', u'metal', u'strings']
[u'They', u'substantially', u'more', u'delicate', u'generate', u'much', u'quieter', u'sound']
[u'19th', u'century', u'now', u'known', u'salon', u'modern', u'instruments']
[u'fretboard', u'radius', u'more', u'noticeably', u'curved', u'fretboard']
[u';', u'Flat-top', u'steel-string', u':', u'Similar', u'to', u'however', u'varied', u'sizes', u'steel-stringed', u'body', u'size', u'usually', u'significantly', u'larger', u'it', u'has', u'narrower', u'reinforced', u'neck', u'stronger', u'structural', u'design']

Is the battente smaller than a classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param162] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b710>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b710>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'transposing']
[u'They', u'can', u'also', u'solo', u'classical']
[u';', u'Archtop', u':', u'These', u'steel', u'string', u'which', u'the', u'top', u'often', u'the', u'back', u'the', u'carved', u'curved', u'rather', u'flat', u'shape']
[u'Vigorous', u'performance', u'styles', u'such', u'flamenco', u'which', u'can', u'involve', u'the', u'use', u'the', u'percussion', u'call', u'scratchplate', u'to', u'fitted', u'to', u'nylon-string']
[u'acoustic', u'the', u'body', u'the', u'major', u'determinant', u'the', u'overall', u'sound', u'quality']

Is a guitar an instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param163] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b758>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'transposing']
[u'They', u'can', u'also', u'solo', u'classical']
[u';', u'Archtop', u':', u'These', u'steel', u'string', u'which', u'the', u'top', u'often', u'the', u'back', u'the', u'carved', u'curved', u'rather', u'flat', u'shape']
[u'Vigorous', u'performance', u'styles', u'such', u'flamenco', u'which', u'can', u'involve', u'the', u'use', u'the', u'percussion', u'call', u'scratchplate', u'to', u'fitted', u'to', u'nylon-string']
[u'acoustic', u'the', u'body', u'the', u'major', u'determinant', u'the', u'overall', u'sound', u'quality']

Is a guitar an instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param164] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b7a0>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b7a0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'player', u'c.', u'1672', u'Johannes', u'Vermeer', u'Guitars', u'acoustic', u'electric', u':', u'An', u'acoustic', u'one', u'not', u'dependent', u'an', u'external', u'device', u'to', u'heard', u'uses', u'a', u'soundboard', u'which', u'a', u'wooden', u'piece', u'mounted', u'the', u'front', u'the', u"'s", u'body']
[u'The', u'twelfth', u'fret', u'the', u'scale', u'length', u'exact', u'halves', u'the', u'24th', u'fret', u'position', u'the', u'scale', u'length', u'half', u'yet', u'again']
[u'That', u'distance', u'subtracted', u'the', u'scale', u'length', u'the', u'result', u'sections', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret']
[u'The', u'scale', u'length', u'this', u'value', u'yields', u'the', u'distance', u'the', u'nut', u'to', u'the', u'first', u'fret']
[u'The', u'ratio', u'the', u'spacing', u'consecutive', u'frets', u'the', u'twelfth', u'root']

Can guitars be divided into two broad categories?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param165] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b7e8>, <src.tfidf.TF_IDF object at 0x7f2036c26310>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b7e8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'player', u'c.', u'1672', u'Johannes', u'Vermeer', u'Guitars', u'acoustic', u'electric', u':', u'An', u'acoustic', u'one', u'not', u'dependent', u'an', u'external', u'device', u'to', u'heard', u'uses', u'a', u'soundboard', u'which', u'a', u'wooden', u'piece', u'mounted', u'the', u'front', u'the', u"'s", u'body']
[u'The', u'twelfth', u'fret', u'the', u'scale', u'length', u'exact', u'halves', u'the', u'24th', u'fret', u'position', u'the', u'scale', u'length', u'half', u'yet', u'again']
[u'That', u'distance', u'subtracted', u'the', u'scale', u'length', u'the', u'result', u'sections', u'the', u'constant', u'to', u'yield', u'the', u'distance', u'the', u'first', u'fret', u'to', u'the', u'second', u'fret']
[u'The', u'scale', u'length', u'this', u'value', u'yields', u'the', u'distance', u'the', u'nut', u'to', u'the', u'first', u'fret']
[u'The', u'ratio', u'the', u'spacing', u'consecutive', u'frets', u'the', u'twelfth', u'root']

Can guitars be divided into two broad categories?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param168] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b8c0>, <src.tfidf.TF_IDF object at 0x7f203556fed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b8c0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'Polytechnique', u'engineering']
[u'1908', u'year', u'his', u'death', u'was', u'elected', u'Permanent', u'Secretary', u'Acadmie', u'Sciences']
[u'Describing', u'his', u'method', u'to', u'French', u'Academy', u'Sciences', u'24', u'January', u'1896', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumire', u'photographic', u'plate', u'a', u'bromide', u'emulsion', u'two', u'sheets', u'very', u'thick', u'black', u'paper', u'such', u'plate', u'not', u'become', u'clouded', u'being', u'exposed', u'to', u'sun', u'a', u'day']
[u'He', u'died', u'age', u'55', u'Le', u'Croisic']
[u'1892', u'he', u'became', u'third', u'his', u'family', u'to', u'occupy', u'physics', u'chair', u'Musum', u'National', u"d'Histoire", u'Naturelle']

Did Becquerel study science at the cole des Ponts et Chausses?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param170] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b950>, <src.tfidf.TF_IDF object at 0x7f203556fed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b950>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'1894']
[u'third', u'family', u'to', u'occupy', u'physics', u'chair', u'Musum', u'National', u"d'Histoire", u'Naturelle']
[u'Describing', u'method', u'to', u'French', u'Academy', u'Sciences', u'24', u'January', u'1896', u'said', u':', u'One', u'wraps', u'a', u'Lumire', u'photographic', u'plate', u'a', u'bromide', u'emulsion', u'two', u'sheets', u'very', u'thick', u'black', u'paper', u'such', u'plate', u'not', u'clouded', u'being', u'exposed', u'to', u'sun', u'a', u'day']
[u'1903', u'shared', u'Nobel', u'Prize', u'Physics', u'Pierre', u'Marie', u'Curie', u'``', u'recognition', u'extraordinary', u'services', u'has', u'rendered', u'discovery', u'spontaneous', u'radioactivity', u"''"]
[u'died', u'age', u'55', u'Le', u'Croisic']

Did he become chief engineer in the Department of Bridges and Highways in 1892?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param171] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b998>, <src.tfidf.TF_IDF object at 0x7f203556fed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Henri_Becquerel', u'Antoine', u'Henri', u'15', u'December', u'1852', u'25', u'August', u'1908', u'Nobel', u'laureate', u'the', u'discoverer', u'radioactivity', u'which', u'he', u'won', u'the', u'1903', u'Nobel', u'Prize', u'Physics', u'Marie', u'Curie', u'Pierre', u'Curie', u'who', u'had', u'found', u'additional', u'radioactive', u'elements']
[u'Describing', u'his', u'method', u'to', u'the', u'Academy', u'Sciences', u'24', u'January', u'1896', u'he', u'said', u':', u'One', u'wraps', u'Lumire', u'photographic', u'plate', u'bromide', u'emulsion', u'two', u'sheets', u'very', u'thick', u'black', u'paper', u'such', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'exposed', u'to', u'the', u'sun', u'day']
[u'There', u'crater', u'called', u'the', u'Moon', u'also', u'crater', u'called', u'Mars']
[u'Image', u"'s", u'photographic', u'plate', u'which', u'has', u'fogged', u'exposure', u'to', u'radiation', u'uranium', u'salt']
[u'born', u'Paris', u'family', u'which', u'produced', u'four', u'generations', u'scientists', u'including', u"'s", u'own', u'son', u'Jean']

Was Becquerel a French physicist?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param172] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8b9e0>, <src.tfidf.TF_IDF object at 0x7f203556fed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8b9e0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Henri_Becquerel', u'Antoine', u'Henri', u'15', u'December', u'1852', u'25', u'August', u'1908', u'Nobel', u'laureate', u'the', u'discoverer', u'radioactivity', u'which', u'he', u'won', u'the', u'1903', u'Nobel', u'Prize', u'Physics', u'Marie', u'Curie', u'Pierre', u'Curie', u'who', u'had', u'found', u'additional', u'radioactive', u'elements']
[u'Describing', u'his', u'method', u'to', u'the', u'Academy', u'Sciences', u'24', u'January', u'1896', u'he', u'said', u':', u'One', u'wraps', u'Lumire', u'photographic', u'plate', u'bromide', u'emulsion', u'two', u'sheets', u'very', u'thick', u'black', u'paper', u'such', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'exposed', u'to', u'the', u'sun', u'day']
[u'There', u'crater', u'called', u'the', u'Moon', u'also', u'crater', u'called', u'Mars']
[u'Image', u"'s", u'photographic', u'plate', u'which', u'has', u'fogged', u'exposure', u'to', u'radiation', u'uranium', u'salt']
[u'born', u'Paris', u'family', u'which', u'produced', u'four', u'generations', u'scientists', u'including', u"'s", u'own', u'son', u'Jean']

Was Becquerel a French physicist?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param173] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8ba28>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c8ba28>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'an', u'Arian']
[]
[u'``', u'The', u'Hidden', u'Truth', u'Creation', u':', u"'s", u'Method', u'Fluxions', u"''", u'Journal', u'the', u'History', u'Science', u'34', u':', u'417438']
[u'16', u'2001', u'pp.', u'169208', u'JSTOR', u'Snobelen', u'Stephen', u'D.', u'``', u'Heretic', u':', u'The', u'Strategies', u'a', u'Nicodemite', u"''", u'Journal', u'the', u'History', u'Science', u'32', u':', u'381419']
[]

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'Yes']
_____________________________ test_yesno[param178] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bb90>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bb90>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Isaac_Newton', u'FRS', u'4', u'January', u'1643', u'31', u'March', u'1727', u'astronomer', u'natural', u'philosopher', u'alchemist', u'theologian', u'who', u'considered', u'many', u'scholars', u'members', u'the', u'general', u'public', u'to', u'one', u'the', u'most', u'influential', u'scientists', u'history']
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'Arian']
[u'1999', u'opinion', u'poll', u'100', u'todays', u'leading', u'voted', u'Einstein', u'the', u'``', u'greatest', u'ever', u';', u"''", u'the', u'runner-up', u'parallel', u'survey', u'rank-and-file', u'the', u'site', u'PhysicsWeb', u'gave', u'the', u'top', u'spot', u'to']
[u'Memoirs', u'the', u'Life', u'Writings', u'Discoveries', u'1855', u'David', u'Brewster', u'Volume', u'II']
[u'Leibniz', u"'s", u'notation', u'``', u'differential', u'Method', u"''", u'nowadays', u'recognized', u'as', u'much', u'more', u'convenient', u'notations', u'adopted', u'continental', u'European', u'1820', u'so', u'also', u'British']

Was Sir Isaac Newton an English physicist and mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param179] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bbd8>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bbd8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Isaac_Newton', u'FRS', u'4', u'January', u'1643', u'31', u'March', u'1727', u'astronomer', u'natural', u'philosopher', u'alchemist', u'theologian', u'who', u'considered', u'many', u'scholars', u'members', u'the', u'general', u'public', u'to', u'one', u'the', u'most', u'influential', u'scientists', u'history']
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'Arian']
[u'1999', u'opinion', u'poll', u'100', u'todays', u'leading', u'voted', u'Einstein', u'the', u'``', u'greatest', u'ever', u';', u"''", u'the', u'runner-up', u'parallel', u'survey', u'rank-and-file', u'the', u'site', u'PhysicsWeb', u'gave', u'the', u'top', u'spot', u'to']
[u'Memoirs', u'the', u'Life', u'Writings', u'Discoveries', u'1855', u'David', u'Brewster', u'Volume', u'II']
[u'Leibniz', u"'s", u'notation', u'``', u'differential', u'Method', u"''", u'nowadays', u'recognized', u'as', u'much', u'more', u'convenient', u'notations', u'adopted', u'continental', u'European', u'1820', u'so', u'also', u'British']

Was Sir Isaac Newton an English physicist and mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param180] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bc20>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bc20>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Newton', u'also', u'developed', u'a', u'theory', u'colour', u'based', u'observation', u'a', u'prism', u'decomposes', u'white', u'light', u'many', u'colours', u'that', u'form', u'visible', u'spectrum']
[u'late', u'1668', u'was', u'able', u'to', u'produce', u'this']
[u'White', u'1997', u'p170', u'Actually', u'design', u'known', u'functional', u'today', u'known', u'a', u'Newtonian', u'involved', u'solving', u'problem', u'a', u'suitable', u'mirror', u'material', u'shaping', u'technique']
[u'1671', u'Royal', u'Society', u'asked', u'a', u'demonstration']
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian']

Did he build the first practical reflecting telescope?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param181] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bc68>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bc68>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'Co.', u'1889', u'age', u'twelve', u'he', u'seventeen', u'School', u'where', u'his', u'signature', u'can', u'still', u'seen', u'a', u'library', u'window', u'sill']
[u'School', u'claims', u'tree', u'purchased', u'school', u'uprooted', u'transported', u'to', u'headmaster', u'garden', u'some', u'years', u'later']
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'an', u'Arian']
[u'Westfall', u'2007', u'p.', u'73', u'One', u'cases', u'attorney', u'William', u'Chaloner']
[]

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
_____________________________ test_yesno[param182] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bcb0>, <src.tfidf.TF_IDF object at 0x7f2035fdd150>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bcb0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'Co.', u'1889', u'age', u'twelve', u'he', u'seventeen', u'School', u'where', u'his', u'signature', u'can', u'still', u'seen', u'a', u'library', u'window', u'sill']
[u'School', u'claims', u'tree', u'purchased', u'school', u'uprooted', u'transported', u'to', u'headmaster', u'garden', u'some', u'years', u'later']
[u'JSTOR', u'Pfizenmaier', u'Thomas', u'C.', u'``', u'an', u'Arian']
[u'Westfall', u'2007', u'p.', u'73', u'One', u'cases', u'attorney', u'William', u'Chaloner']
[]

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
_____________________________ test_yesno[param183] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bcf8>, <src.tfidf.TF_IDF object at 0x7f203a030f10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bcf8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Jakarta', u"'s", u'Central', u'Business', u'District', u'Jenderal', u'Sudirman', u'Road', u'centered', u'46', u'currently', u'office']
[u'46', u'Central', u'Jakarta', u'currently', u'highest', u'Jakarta']
[u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'landmarks', u'include', u'Chinese', u'Langgam', u'Toko', u'Merah']
[u'Jayawikarta', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'English', u'merchants', u'rivals', u'Dutch', u'allowing', u'them', u'to', u'houses', u'directly', u'Dutch', u'1615']
[u'park', u'surrounded', u'several', u'Dutch', u'colonial']

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param185] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bd88>, <src.tfidf.TF_IDF object at 0x7f203a030f10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8bd88>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'has', u'also', u'many', u'centuries']
[u'also', u'international', u'food', u'especially', u'Indian', u'Japanese', u'Korean', u'food', u'the', u'cosmopolitan', u'population']
[u'``', u'Condemned', u':', u'Forced', u'Evictions', u"''", u'Human', u'Rights', u'Watch', u'Sep', u'2006']
[u'9', u'October', u'1740', u'5,000', u'massacred', u'the', u'following', u'year', u'inhabitants', u'moved', u'to', u'Glodok', u'the', u'city', u'walls']
[u'The', u'riots', u'targeted', u'Indonesians']

is there a chinese community in jakarta?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param186] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8bdd0>, <src.tfidf.TF_IDF object at 0x7f203a030f10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c8bdd0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'has', u'also', u'many', u'centuries']
[u'also', u'international', u'food', u'especially', u'Indian', u'Japanese', u'Korean', u'food', u'the', u'cosmopolitan', u'population']
[u'``', u'Condemned', u':', u'Forced', u'Evictions', u"''", u'Human', u'Rights', u'Watch', u'Sep', u'2006']
[u'9', u'October', u'1740', u'5,000', u'massacred', u'the', u'following', u'year', u'inhabitants', u'moved', u'to', u'Glodok', u'the', u'city', u'walls']
[u'The', u'riots', u'targeted', u'Indonesians']

is there a chinese community in jakarta?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param187] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8be18>, <src.tfidf.TF_IDF object at 0x7f203a030f10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c8be18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'metropolitan', u'area', u'Jabodetabek', u'second']
[u'also', u'DKI', u'capital', u'Indonesia']
[u'population', u'greater', u'estimated', u'23', u'million', u'making', u'it', u'second', u'urban', u'area']
[u'It', u'most', u'populous', u'Indonesia', u'Southeast', u'Asia', u'twelfth-largest']
[u'Financial', u'services', u'trade', u'manufacturing', u'sectors', u"'s", u'economy']

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param188] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c8be60>, <src.tfidf.TF_IDF object at 0x7f203a030f10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c8be60>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'metropolitan', u'area', u'Jabodetabek', u'second']
[u'also', u'DKI', u'capital', u'Indonesia']
[u'population', u'greater', u'estimated', u'23', u'million', u'making', u'it', u'second', u'urban', u'area']
[u'It', u'most', u'populous', u'Indonesia', u'Southeast', u'Asia', u'twelfth-largest']
[u'Financial', u'services', u'trade', u'manufacturing', u'sectors', u"'s", u'economy']

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param203] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c902d8>, <src.tfidf.TF_IDF object at 0x7f203743e590>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c902d8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'It', u'was', u'platform', u'generations', u'inventors', u'to']
[u'Capital', u'could', u'work', u'more', u'efficiently', u'manufacturing', u'productivity', u'greatly']
[u'his', u'partner', u'Matthew', u'Boulton', u'battled', u'rival', u'engineers', u'such', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'which', u'not', u'fall', u'foul', u'his', u'patents']
[u'To', u'our', u'ancestors', u'such', u'odd', u'eccentric', u'instant', u'was', u'significance', u'-', u'not', u'even', u'exist']
[u'It', u'was', u'clear', u'to', u'many', u'higher', u'pressures', u'produced', u'boilers', u'would', u'produce', u'having', u'even', u'higher', u'efficiency', u'would', u'lead', u'to', u'the', u'revolution', u'transportation', u'that', u'was', u'soon', u'embodied', u'the', u'locomotive', u'steamboat']

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param206] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c903b0>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c903b0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'South', u'North']
[u'see', u'both', u'South', u'North']
[u':', u'``', u'Did', u'you', u'go', u'to', u'store', u"''"]
[u'It', u'also', u'one', u'two', u'Yanbian', u'Autonomous', u'Prefecture', u'China']
[u'It', u'also', u'one', u'two', u'Yanbian', u'Autonomous', u'Prefecture', u'China']

Is Korean the official language of Korea?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param207] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c903f8>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c903f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'South', u'North']
[u'see', u'both', u'South', u'North']
[u':', u'``', u'Did', u'you', u'go', u'to', u'store', u"''"]
[u'It', u'also', u'one', u'two', u'Yanbian', u'Autonomous', u'Prefecture', u'China']
[u'It', u'also', u'one', u'two', u'Yanbian', u'Autonomous', u'Prefecture', u'China']

Is Korean the official language of Korea?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param208] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90440>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90440>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'which', u'thought', u'to', u'first', u'dynasty', u'known', u'to', u'western', u'countries']
[u'names', u'seven', u'levels', u'non-honorific', u'imperative', u'form', u'verb', u'hada', u'do', u'each', u'level', u'suffix', u'che', u'hanja', u':', u'which', u'means', u'style']
[u':', u'Did', u'you', u'go', u'to', u'store']
[u'Many', u'have', u'also', u'borrowed', u'Japanese', u'Western', u'languages', u'such', u'German', u'areubaiteu', u'part-time', u'job', u'allereugi', u'allergy', u'gibsu', u'plaster', u'cast', u'used', u'broken', u'bones']
[u'verbs', u'tongsa', u'also', u'known', u'English', u'action', u'verbs', u'dynamic', u'verbs', u'to', u'distinguish', u'them', u'hyeong-yongsa', u'adjectives', u'which', u'also', u'known', u'descriptive', u'verbs', u'stative', u'verbs']

Is the word "Korean" derived from Goryeo?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param209] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90488>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c90488>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'which', u'thought', u'to', u'first', u'dynasty', u'known', u'to', u'western', u'countries']
[u'names', u'seven', u'levels', u'non-honorific', u'imperative', u'form', u'verb', u'hada', u'do', u'each', u'level', u'suffix', u'che', u'hanja', u':', u'which', u'means', u'style']
[u':', u'Did', u'you', u'go', u'to', u'store']
[u'Many', u'have', u'also', u'borrowed', u'Japanese', u'Western', u'languages', u'such', u'German', u'areubaiteu', u'part-time', u'job', u'allereugi', u'allergy', u'gibsu', u'plaster', u'cast', u'used', u'broken', u'bones']
[u'verbs', u'tongsa', u'also', u'known', u'English', u'action', u'verbs', u'dynamic', u'verbs', u'to', u'distinguish', u'them', u'hyeong-yongsa', u'adjectives', u'which', u'also', u'known', u'descriptive', u'verbs', u'stative', u'verbs']

Is the word "Korean" derived from Goryeo?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param210] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c904d0>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c904d0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'fact', u'mutually', u'intelligible', u'perhaps', u'the', u'exception', u'the', u'Jeju', u'Island', u'see', u'Jeju']
[u':', u'``', u'Did', u'you', u'go', u'the', u'store', u"''"]
[u'Examples', u'include', u'kak', u'``', u"''"]
[u'Many', u'have', u'basic', u'vocabulary', u'that', u'etymologically', u'distinct', u'vocabulary', u'identical', u'meaning', u'Standard', u'such', u'South', u'Jeolla', u'/', u'kur', u'/', u'Standard', u'``', u'mouth', u"''", u'Gyeongsang', u'Standard', u'``', u'garlic', u'chives', u"''"]
[u'pronunciation', u'used', u'the', u'North', u'whenever', u'the', u'hanja', u"''", u"''", u'attached', u'a', u'Sino-Korean', u'word', u'ending']

Are all dialects of Korean similar to each other?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param211] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90518>, <src.tfidf.TF_IDF object at 0x7f2038e1dad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'fact', u'mutually', u'intelligible', u'perhaps', u'the', u'exception', u'the', u'Jeju', u'Island', u'see', u'Jeju']
[u':', u'``', u'Did', u'you', u'go', u'the', u'store', u"''"]
[u'Examples', u'include', u'kak', u'``', u"''"]
[u'Many', u'have', u'basic', u'vocabulary', u'that', u'etymologically', u'distinct', u'vocabulary', u'identical', u'meaning', u'Standard', u'such', u'South', u'Jeolla', u'/', u'kur', u'/', u'Standard', u'``', u'mouth', u"''", u'Gyeongsang', u'Standard', u'``', u'garlic', u'chives', u"''"]
[u'pronunciation', u'used', u'the', u'North', u'whenever', u'the', u'hanja', u"''", u"''", u'attached', u'a', u'Sino-Korean', u'word', u'ending']

Are all dialects of Korean similar to each other?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param216] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90680>, <src.tfidf.TF_IDF object at 0x7f20386ef810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90680>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'home', u'to', u'Parliament']
[u'seat', u'Parliament']
[u'capital', u'has', u'a', u'comprehensive', u'road', u'network', u'that', u'leads', u'to', u'rest', u'Peninsular']
[u'Bursa', u'Exchange', u'based', u'city', u'forms', u'one', u'its', u'core', u'economic', u'activities']
[u'TM', u'Tower', u'headquarters', u"'s", u'principal', u'telecommunication', u'service', u'provider', u'Telekom']

Is Kuala Lumpur the capitol of Malaysia? disfluent
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param217] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c906c8>, <src.tfidf.TF_IDF object at 0x7f20386ef810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c906c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Located', u'center', u'previously', u'rule', u'Government']
[u'1880', u'capital', u'moved', u'Klang', u'to', u'more', u'strategically', u'advantageous']
[u'It', u'an', u'enclave', u'central', u'west', u'coast', u'Peninsular', u'Malaysia']
[u'ceased', u'to', u'capital', u'1978', u'city', u'Shah', u'Alam', u'declared', u'new', u'capital']
[u'one', u'host', u'cities', u'Formula', u'One', u'World', u'Championship', u'open-wheel', u'auto', u'racing', u'A1', u'Grand', u'Prix', u'Motorcycle', u'Grand', u'Prix', u'races', u'held', u'Sepang', u'International', u'Circuit', u'neighbouring', u'next', u'to', u'International', u'Airport']

Is Kuala Lumpur in the Selangor state?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param219] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90758>, <src.tfidf.TF_IDF object at 0x7f20386ef810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Beginning', u'1990s', u'has', u'played', u'to', u'many', u'international', u'sporting', u'political', u'cultural', u'events', u'including', u'1998', u'Commonwealth', u'Games']
[u'Kuala', u'Lumpur', u'open-wheel', u'auto', u'racing', u'A1', u'Grand', u'Prix', u'Motorcycle', u'Grand', u'Prix', u'races', u'held', u'Sepang', u'International', u'Circuit', u'neighbouring', u'state', u'Selangor', u'next', u'to', u'Kuala', u'Lumpur', u'International', u'Airport']
[u'event', u'contributes', u'significantly', u'to', u'tourist', u'arrivals', u'tourism', u'income', u'to', u'Kuala', u'Lumpur']
[u'also', u'home', u'to', u'country', u"'s", u'main', u'pay-TV', u'service', u'Astro', u'satellite', u'television', u'service', u'which', u'broadcasts', u'local', u'global', u'television', u'channels', u'such', u'CNN', u'BBC', u'Star', u'HBO']
[u'scene', u'War', u'II', u'streets', u'Kuala', u'Lumpur']

Is it a host city for the Formula One World Championship?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param221] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c907e8>, <src.tfidf.TF_IDF object at 0x7f20386ef810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c907e8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Kuala', u'Lumpur', u'Malaysia']
[u'Kuala', u'Lumpur', u'University', u'Malaya']
[u'composed', u'a', u'lower', u'House', u'Representatives', u'Dewan', u'Rakyat', u'an', u'upper', u'House', u'Senate', u'Dewan', u'Negara']
[u'addition', u'Kuala', u'Lumpur', u'tallest', u'twin', u'buildings', u'world', u'Petronas', u'Twin', u'Towers']
[u'city', u'once', u'executive', u'judicial', u'branches', u'federal', u'government', u'they', u'have', u'moved', u'Putrajaya', u'starting', u'1999']

is it home to the parliament of malaysia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param222] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90830>, <src.tfidf.TF_IDF object at 0x7f203743e110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90830>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'They', u'a', u'hard', u'protective', u'exoskeleton']
[u'These', u'findings', u'have', u'replicated', u'other', u'species', u'similar', u'data', u'not', u'yet', u'available']
[u'It', u'the', u'related', u'poems', u'can', u'read', u'here', u':', u'``', u'Will', u'you', u'wont', u'you', u'will', u'you', u'wont', u'you', u'wont', u'you', u'join', u'the', u'dance', u"''"]
[u'several', u'groups', u'crustaceans', u'known', u'``', u"''", u'the', u'clawed', u'most', u'often', u'associated', u'the', u'name']
[u'skin', u'has', u'found', u'stomachs', u'this', u'eat', u'their', u'shed', u'skin', u'molting']

Are lobsters invertebrates?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param223] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90878>, <src.tfidf.TF_IDF object at 0x7f203743e110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'They', u'a', u'hard', u'protective', u'exoskeleton']
[u'These', u'findings', u'have', u'replicated', u'other', u'species', u'similar', u'data', u'not', u'yet', u'available']
[u'It', u'the', u'related', u'poems', u'can', u'read', u'here', u':', u'``', u'Will', u'you', u'wont', u'you', u'will', u'you', u'wont', u'you', u'wont', u'you', u'join', u'the', u'dance', u"''"]
[u'several', u'groups', u'crustaceans', u'known', u'``', u"''", u'the', u'clawed', u'most', u'often', u'associated', u'the', u'name']
[u'skin', u'has', u'found', u'stomachs', u'this', u'eat', u'their', u'shed', u'skin', u'molting']

Are lobsters invertebrates?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param226] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90950>, <src.tfidf.TF_IDF object at 0x7f203743e110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c90950>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'snails', u'spiders', u'due', u'to', u'the', u'presence', u'haemocyanin', u'which', u'contains', u'copper']
[u'contrast', u'mammals', u'many', u'other', u'animals', u'red', u'iron-rich', u'haemoglobin']
[u'The', u'European', u'wild', u'including', u'the', u'royal', u'Audresselles', u'is', u'more', u'expensive', u'rare', u'the', u'American']
[u'arthropods', u'not', u'developed', u'the', u'nervous', u'system', u'cephalopod', u'mollusks', u'they', u'the', u'advantages', u'good', u'eyesight']
[u'They', u'however', u'exhibit', u'three', u'remarkable', u'evolutionary', u'advances', u'that', u'led', u'to', u'their', u'great', u'success']

Do lobsters have blue blood?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param227] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90998>, <src.tfidf.TF_IDF object at 0x7f203743e110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'snails', u'spiders', u'due', u'to', u'the', u'presence', u'haemocyanin', u'which', u'contains', u'copper']
[u'contrast', u'mammals', u'many', u'other', u'animals', u'red', u'iron-rich', u'haemoglobin']
[u'The', u'European', u'wild', u'including', u'the', u'royal', u'Audresselles', u'is', u'more', u'expensive', u'rare', u'the', u'American']
[u'arthropods', u'not', u'developed', u'the', u'nervous', u'system', u'cephalopod', u'mollusks', u'they', u'the', u'advantages', u'good', u'eyesight']
[u'They', u'however', u'exhibit', u'three', u'remarkable', u'evolutionary', u'advances', u'that', u'led', u'to', u'their', u'great', u'success']

Do lobsters have blue blood?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param228] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c909e0>, <src.tfidf.TF_IDF object at 0x7f203743e110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c909e0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'ancient', u'Peru', u'sea', u'its', u'animals']
[u'art', u'often', u'depicted']
[u'are', u'sold', u'alive', u'claws', u'strapped', u'banded', u'to', u'prevent', u'them', u'injuring', u'each', u'other']
[u'It', u'related', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u'wont', u'you', u'will', u'you', u'wont', u'you', u'wont', u'you', u'join', u'dance', u"''"]
[u'North', u'America', u'American', u'not', u'achieve', u'popularity', u'mid-19th', u'century', u'when', u'New', u'Yorkers', u'Bostonians', u'developed', u'a', u'taste', u';', u'not', u'invention', u'a', u'special', u'vessel', u'smack', u'a', u'commercial', u'fishery', u'flourish']

Did the Moche people worship lobsters?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param230] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90a70>, <src.tfidf.TF_IDF object at 0x7f2038e1d650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90a70>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'sound-chest', u'also', u'known', u'soundbox', u'resonator']
[u'The', u'deepest', u'note', u'was', u'farthest', u'the', u'player', u"'s", u';', u'the', u'strings', u'not', u'differ', u'much', u'length', u'more', u'weight', u'may', u'been', u'gained', u'the', u'deeper', u'notes', u'thicker', u'strings', u'the', u'violin', u'similar', u'modern', u'instruments', u'they', u'were', u'tuned', u'slacker', u'tension']
[u'The', u'Antiquity', u'was', u'ordinarily', u'played', u'being', u'strummed', u'plectrum', u'guitar', u'zither', u'rather', u'being', u'plucked', u'harp']
[u'They', u'also', u'agree', u'the', u'overall', u'size', u'the', u'instrument', u'the', u'number', u'strings', u'it', u'anything', u'to', u'its', u'classification']
[u'Extending', u'this', u'sound-chest', u'are', u'two', u'raised', u'arms', u'which', u'are', u'sometimes', u'are', u'curved', u'outward', u'forward']

Does a classical lyre have a hollow body?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param231] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90ab8>, <src.tfidf.TF_IDF object at 0x7f2038e1d650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90ab8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'well', u'known', u'its', u'use', u'classical', u'antiquity', u'later']
[u'various', u'times', u'places', u'regarded', u'some', u'organologists', u'specialists', u'history', u'branch', u'zither', u'family', u'general', u'category', u'which', u'includes', u'many', u'different', u'such', u'lutes', u'guitars', u'kantele', u'psalteries', u'not', u'just', u'zithers']
[u'History', u'Instruments', u'New', u'York', u':', u'W.W.', u'Norton', u'1940']
[u'This', u'group', u'they', u'usually', u'refer', u'to', u'lute', u'class', u'that', u'name', u'include', u'it', u'guitar', u'violin', u'banjo', u'similar', u'fingerboards']
[u'Reproduction', u'royal', u'burial', u'Sutton', u'Hoo', u'late', u'6th/early', u'7th', u'century', u'AD', u'Other', u'known', u'have', u'fashioned', u'used', u'Europe', u'Greco-Roman', u'world', u'least', u'early', u'Middle', u'Ages', u'one', u'view', u'holds', u'many', u'modern', u'late-emerging', u'examples', u'class']

Is the lyre a stringed musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param233] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90b48>, <src.tfidf.TF_IDF object at 0x7f2034819f50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c90b48>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'One', u'these', u'is', u'it', u'came']
[u'1', u'There', u'are', u'many', u'hypotheses', u'to', u'where', u'the', u'language']
[u'The', u'oldest', u'written', u'documents', u'dated', u'the', u'end', u'the', u'7th', u'century', u'AD', u'were', u'found', u'Bangka', u'the', u'southeastern', u'coast', u'Palembang', u'southern']
[u'several', u'parts', u'Indonesia', u'Borneo', u'Islands', u'is', u'spoken', u'local', u'dialect', u'ethnic', u'Malays']
[u'Many', u'roots', u'come', u'virtually', u'unchanged', u'their', u'common', u'Austronesian', u'ancestor']

Could Malay have originated from Sumatra island?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param234] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90b90>, <src.tfidf.TF_IDF object at 0x7f2034819f50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90b90>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'new', u'words', u'formed', u'three', u'methods']
[u'Old', u'unintelligible', u'to', u'speaker', u'modern']
[u'the', u'national', u'Singapore']
[u'member', u'the', u'Austronesian', u'family', u'which', u'includes', u'Southeast', u'Asia', u'the', u'Pacific', u'Ocean', u'smaller', u'number', u'continental', u'Asia']
[u'the', u'Sultanate', u'Malacca', u'the', u'evolved', u'form', u'recognizable', u'to', u'speakers', u'modern']

Is Malay an agglutinative language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param235] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90bd8>, <src.tfidf.TF_IDF object at 0x7f2034819f50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c90bd8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'new', u'words', u'formed', u'three', u'methods']
[u'Old', u'unintelligible', u'to', u'speaker', u'modern']
[u'the', u'national', u'Singapore']
[u'member', u'the', u'Austronesian', u'family', u'which', u'includes', u'Southeast', u'Asia', u'the', u'Pacific', u'Ocean', u'smaller', u'number', u'continental', u'Asia']
[u'the', u'Sultanate', u'Malacca', u'the', u'evolved', u'form', u'recognizable', u'to', u'speakers', u'modern']

Is Malay an agglutinative language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param236] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90c20>, <src.tfidf.TF_IDF object at 0x7f2034819f50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90c20>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'a', u'member', u'which', u'includes', u'Southeast', u'Asia', u'Pacific', u'Ocean', u'a', u'smaller', u'number', u'continental', u'Asia']
[u'They', u'grouped', u'a', u'group', u'called', u'``', u'Local', u"''", u'part', u'a', u'larger', u'group', u'called', u'``', u'Malayan', u"''", u'Malayo-Polynesian', u'branch']
[u'Many', u'roots', u'have', u'come', u'virtually', u'unchanged', u'their', u'common', u'ancestor']
[u'each', u'mutually', u'unintelligible', u'their', u'similarities', u'rather', u'striking']
[u'Malagasy', u'a', u'geographic', u'outlier', u'spoken', u'Madagascar', u'Indian', u'Ocean', u'also', u'a', u'member', u'this', u'linguistic']

Is Malay in the Austronesian family of languages?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param237] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90c68>, <src.tfidf.TF_IDF object at 0x7f2034819f50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90c68>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'new', u'words', u'formed', u'three', u'methods']
[u'Old', u'unintelligible', u'to', u'speaker', u'modern']
[u'the', u'national', u'Singapore']
[u'member', u'the', u'Austronesian', u'family', u'which', u'includes', u'Southeast', u'Asia', u'the', u'Pacific', u'Ocean', u'smaller', u'number', u'continental', u'Asia']
[u'the', u'Sultanate', u'Malacca', u'the', u'evolved', u'form', u'recognizable', u'to', u'speakers', u'modern']

Is Malay an agglutinative language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param241] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90d88>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90d88>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'also', u'second', u'Australia']
[u'Liveable', u'Best', u'Connected']
[u'Thereafter', u'growth', u'exponential', u'1865', u'had', u'overtaken', u'Sydney', u'Australia', u"'s"]
[u'colder', u'other', u'mainland', u'Australian', u'winter']
[u'often', u'referred', u'to', u'Australia', u"'s", u'garden', u'once', u'known', u'garden']

Is Melbourne the capital and most populous city in the state of Victoria?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param242] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90dd0>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c90dd0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'also', u'second', u'Australia']
[u'Liveable', u'Best', u'Connected']
[u'Thereafter', u'growth', u'exponential', u'1865', u'had', u'overtaken', u'Sydney', u'Australia', u"'s"]
[u'colder', u'other', u'mainland', u'Australian', u'winter']
[u'often', u'referred', u'to', u'Australia', u"'s", u'garden', u'once', u'known', u'garden']

Is Melbourne the capital and most populous city in the state of Victoria?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param243] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90e18>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90e18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'much', u'automotive', u'industry', u'which', u'include', u'Ford', u'Toyota', u'manufacturing', u'facilities', u'the', u'engine', u'manufacturing', u'facility', u'Holden']
[u'Flinders', u'Street', u'Station', u'railway', u'station', u'the', u'world', u'passenger', u'station', u'1926']
[u'Most', u'Liveable', u'Best', u'Connected']
[u'The', u'Port', u'largest', u'container', u'general', u'cargo', u'port', u'also', u'its']
[u'Airport', u'provides', u'an', u'entry', u'point', u'national', u'international', u'visitors', u'second', u'airport']

Is Melbourne home to Australia's busiest seaport?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param244] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90e60>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c90e60>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'much', u'automotive', u'industry', u'which', u'include', u'Ford', u'Toyota', u'manufacturing', u'facilities', u'the', u'engine', u'manufacturing', u'facility', u'Holden']
[u'Flinders', u'Street', u'Station', u'railway', u'station', u'the', u'world', u'passenger', u'station', u'1926']
[u'Most', u'Liveable', u'Best', u'Connected']
[u'The', u'Port', u'largest', u'container', u'general', u'cargo', u'port', u'also', u'its']
[u'Airport', u'provides', u'an', u'entry', u'point', u'national', u'international', u'visitors', u'second', u'airport']

Is Melbourne home to Australia's busiest seaport?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param245] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90ea8>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c90ea8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'MCG', u'named', u'sporting', u'wonder', u'the', u'world', u'more', u'capita', u'any', u'city', u'the', u'world']
[u'recent', u'years', u'the', u'number', u"'s", u'universities', u'risen', u'rapidly', u'result', u'increasing', u'number', u'places', u'being', u'made', u'available', u'to', u'full', u'fee', u'paying']
[u'This', u'led', u'to', u'sharp', u'fall', u'applications', u'India']
[u'Most', u'Liveable', u'Best', u'Connected']
[u'How', u'Much', u'Public', u'Schools', u'Really', u'Cost']

Does Melbourne have a large international student community?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param246] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90ef0>, <src.tfidf.TF_IDF object at 0x7f2038afd990>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c90ef0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'MCG', u'named', u'sporting', u'wonder', u'the', u'world', u'more', u'capita', u'any', u'city', u'the', u'world']
[u'recent', u'years', u'the', u'number', u"'s", u'universities', u'risen', u'rapidly', u'result', u'increasing', u'number', u'places', u'being', u'made', u'available', u'to', u'full', u'fee', u'paying']
[u'This', u'led', u'to', u'sharp', u'fall', u'applications', u'India']
[u'Most', u'Liveable', u'Best', u'Connected']
[u'How', u'Much', u'Public', u'Schools', u'Really', u'Cost']

Does Melbourne have a large international student community?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param248] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c90f80>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c90f80>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'pictures', u'Isaac', u'Newton', u'James', u'Clerk', u'Maxwell']
[u'Regarding', u'the', u'hereafter', u'``', u'Speculations']
[u'Detail', u'engraving', u'Henry', u'Adlard', u'based', u'earlier', u'Maull', u'Polyblank', u'ca.', u'1857']
[u'which', u'used', u'future', u'connecting', u'light', u'magnetism']
[u'When', u'Davy', u'went', u'long', u'tour', u'to', u'the', u'continent', u'181315', u'valet', u'not', u'wish', u'to', u'go']

Did Albert Einstein keep a photograph of Faraday on his study wall?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 1436404 characters, 268537 tokens, 2052.0 char/doc, 383.6 tok/doc RATES: 10.032 doc/sec, 3848.5 tok/sec

_____________________________ test_yesno[param250] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95050>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c95050>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'18001879', u'12', u'June', u'1821', u'The', u'register', u'St.', u'Faith-in-the-Virgin', u'St.', u'Paul', u"'s", u'Cathedral', u'records', u'12', u'June', u'the', u'date', u'their', u'licence', u'was', u'issued']
[u'Regarding', u'the', u'hereafter', u'``', u'Speculations']
[u'The', u'witness', u'was', u"'s", u'father', u'Edward']
[u'He', u'confessed', u'his', u'faith', u'to', u'the', u'Sandemanian', u'congregation', u'the', u'month', u'he']
[u'The', u'trip', u'however', u'give', u'him', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'a', u'host', u'stimulating', u'ideas']

Did Faraday marry Sarah Barnard?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param252] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c950e0>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c950e0>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'electromagnetic', u'induction', u'diamagnetism']
[u'popularised', u'terminology', u'such', u'anode', u'cathode', u'electrode', u'ion', u'terms', u'largely', u'created', u'William', u'Whewell']
[u'Regarding', u'hereafter', u'``', u'Speculations']
[u'determined', u'composition', u'chlorine', u'clathrate', u'hydrate', u'which', u'had', u'been', u'Humphry', u'Davy', u'1810']
[u'used', u'``', u'static', u"''", u'batteries', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'phenomena', u'electrostatic', u'attraction', u'magnetism', u'etc.']

Did Faraday also discover the laws of electrolysis?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param253] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95128>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c95128>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'electromagnetic', u'induction', u'laws', u'electrolysis']
[u'Regarding', u'the', u'hereafter', u'``', u'Speculations']
[u'See', u'National', u'Portrait', u'Gallery', u'UK', u'1845', u'many', u'materials', u'exhibit', u'a', u'weak', u'repulsion', u'a', u'magnetic', u'field', u'a', u'phenomenon', u'he', u'named']
[u'The', u'trip', u'however', u'give', u'him', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'a', u'host', u'stimulating', u'ideas']
[u'This', u'idea', u'was', u'rejected', u'his', u'fellow', u'scientists', u'not', u'live', u'to', u'see', u'this', u'idea', u'eventually', u'accepted']

Did Faraday discover diamagnetism?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param255] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c951b8>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c951b8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Faraday', u'also', u'what', u'would', u'engineering']
[u'Regarding', u'hereafter', u'``', u'Speculations']
[u'Education', u'another', u'service', u'Faraday']
[u'This', u'termed', u'Faraday', u'effect']
[u'Some', u'historians', u'refer', u'to', u'best', u'experimentalist', u'history']

was he active in the area now called environmental science?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param256] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95200>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95200>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Regarding', u'the', u'hereafter', u'``', u'Speculations']
[u'See', u'page', u'127', u'Faraday', u"'s", u'Chemical', u'Manipulation', u'Being', u'Instructions', u'to', u'Students', u'Chemistry', u'1827', u'Faraday', u'worked', u'extensively', u'the', u'field', u'chemistry', u'chemical', u'substances', u'such', u'which', u'called', u'bicarburet', u'hydrogen', u'liquefying', u'gases', u'such', u'chlorine']
[u'a', u'chemist', u'Faraday', u'investigated', u'the', u'clathrate', u'hydrate', u'chlorine', u'invented', u'an', u'early', u'form', u'the', u'bunsen', u'burner', u'the', u'system', u'oxidation', u'numbers', u'popularized', u'terminology', u'such', u'anode', u'cathode', u'electrode', u'ion']
[u'electromagnetic', u'induction', u'diamagnetism', u'laws', u'electrolysis']
[u'The', u'trip', u'however', u'give', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'a', u'host', u'stimulating', u'ideas']

did he discover benzene?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param257] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95248>, <src.tfidf.TF_IDF object at 0x7f20397bbad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95248>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'a', u'respected', u'scientist', u'a', u'nation', u'spent', u'extensive', u'amounts', u'time', u'projects', u'such', u'the', u'construction', u'operation', u'light', u'houses', u'protecting', u'the', u'bottoms', u'ships', u'corrosion']
[u'Regarding', u'the', u'hereafter', u'``', u'Speculations']
[u'He', u'developed', u'an', u'science', u'especially', u'electricity']
[u'Biographers', u'noted', u'``', u'a', u'sense', u'the', u'unity', u'God', u'nature', u'pervaded', u"'s", u'life', u'work', u"''"]
[u'I', u'none']

did faraday have strong maritime interests?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param263] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c953f8>, <src.tfidf.TF_IDF object at 0x7f20395bda90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool('yes, The most popular sport in Montreal is ice hockey.') == True
E                +  where 'yes, The most popular sport in Montreal is ice hockey.' = <src.question_processing.Question_parser instance at 0x7f2033c953f8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'city', u"'s", u'professional', u'team', u'Canadiens', u'one', u'Original', u'Six', u'teams', u'National', u'League', u'NHL', u'boast', u'an', u'NHL-record', u'24', u'Stanley', u'Cup', u'championships']
[u'also', u'hosted', u'first', u'ever', u'World', u'Outgames', u'summer', u'2006', u'attracting', u'16,000', u'participants', u'engaged', u'35', u'activities']
[u'Other', u'festivals', u'include', u'International', u'Jazz', u'Festival', u'World', u'Film', u'Festival', u'Francofolies', u'Nuits', u"d'Afrique", u'Fireworks', u'Festival']
[u'New', u'York', u'Yankees', u'Major', u'League', u'Baseball', u'only', u'other', u'team', u'North', u'American', u'to', u'have', u'more', u'championship', u'titles', u'27', u'World', u'Series', u'titles', u'Canadiens', u'have', u'not', u'won', u'Stanley', u'Cup', u'1993']

Is the most popular sport in Montreal ice hockey?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes, The most popular sport in Montreal is ice hockey.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param264] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95440>, <src.tfidf.TF_IDF object at 0x7f20395bda90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool('Yes, the most popular sport in Montreal is ice hockey.') == True
E                +  where 'Yes, the most popular sport in Montreal is ice hockey.' = <src.question_processing.Question_parser instance at 0x7f2033c95440>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'city', u"'s", u'professional', u'team', u'Canadiens', u'one', u'Original', u'Six', u'teams', u'National', u'League', u'NHL', u'boast', u'an', u'NHL-record', u'24', u'Stanley', u'Cup', u'championships']
[u'also', u'hosted', u'first', u'ever', u'World', u'Outgames', u'summer', u'2006', u'attracting', u'16,000', u'participants', u'engaged', u'35', u'activities']
[u'Other', u'festivals', u'include', u'International', u'Jazz', u'Festival', u'World', u'Film', u'Festival', u'Francofolies', u'Nuits', u"d'Afrique", u'Fireworks', u'Festival']
[u'New', u'York', u'Yankees', u'Major', u'League', u'Baseball', u'only', u'other', u'team', u'North', u'American', u'to', u'have', u'more', u'championship', u'titles', u'27', u'World', u'Series', u'titles', u'Canadiens', u'have', u'not', u'won', u'Stanley', u'Cup', u'1993']

Is the most popular sport in Montreal ice hockey?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the most popular sport in Montreal is ice hockey.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param269] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95638>, <src.tfidf.TF_IDF object at 0x7f2036c26ed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95638>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Cinema.jpgKwani']
[u'largest', u'city']
[u'History', u'-', u'also', u'Province', u'District']
[u'Founded', u'1899', u'a', u'simple', u'rail', u'depot', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u'town', u'quickly', u'grew', u'to', u'become', u'British', u'East', u'Africa', u'1907', u'eventually', u'a', u'free', u'Kenyan', u'republic', u'1963']
[u'national', u'park', u'unique', u'only', u'game-reserve', u'this', u'nature', u'to', u'border', u'a', u'city', u'city', u'this', u'size']

Is Nairobi the capital of Kenya?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param270] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c956c8>, <src.tfidf.TF_IDF object at 0x7f2036c26ed0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c956c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Cinema.jpgKwani']
[u'The', u'oldest', u'18-hole', u'golf', u'course', u'the', u'city', u'the', u'Royal', u'Golf', u'Club', u'1906', u'the', u'British', u'just', u'seven', u'years', u'the', u'city']
[u'a', u'simple', u'rail', u'depot', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'British', u'East', u'Africa', u'1907', u'eventually', u'the', u'capital', u'a', u'free', u'Kenyan', u'republic', u'1963']
[u'its', u'foundation', u'has', u'grown', u'to', u'become', u'the', u'largest', u'city', u'East', u'Africa', u'the', u'youngest', u'city', u'the', u'region']
[u'a', u'railway', u'town', u'the', u'Kenya', u'Railways', u'KR', u'main', u'headquarters', u'still', u'situated', u'there', u'the', u'city', u'centre']

Was Nairobi founded in 1899?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param273] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95878>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'really', u'invent', u'the', u'loudspeaker', u"''"]
[u'Why', u'the', u'Name', u'``', u"''"]
[u'Prodigal', u'Genius', u':', u'The', u'Life', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'heart', u'failure', u'room', u'3327', u'the', u'New', u'Yorker', u'Hotel', u'7', u'January', u'1943']
[u'ISBN', u'Valentinuzzi', u'M.E.', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'forgotten']
[u'Seifer', u'``', u'Wizard', u"''", u'pp', u'378380', u'Earlier', u'was', u'rumored', u'to', u'have', u'been', u'nominated', u'the', u'Nobel', u'Prize', u'1912']

Did Nikola Tesla die alone?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param275] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95998>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u"'s", u'lab', u'spring', u'1894', u'middle', u'age', u'became', u'very']
[u'Krumme', u'Katherine', u':', u'Thunder', u'Lightning']
[u'Why', u'the', u'Name', u'``', u"''"]
[u'good', u'Robert', u'Underwood', u'Johnson']
[u'16', u'His', u'wish', u'to', u'have', u'a', u'sculpture', u'made', u'his', u'Croatian', u'sculptor', u'Ivan', u'Metrovi', u'who', u'that', u'time', u'United', u'States', u'he', u'died', u'getting', u'a', u'chance', u'to', u'see', u'it']

Was Nikola Tesla close friends with Mark Twain?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param277] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95ab8>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95ab8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'would', u'visualise', u'invention', u'his', u'brain', u'extreme', u'precision', u'including', u'all', u'dimensions', u'moving', u'to', u'the', u'construction', u'stage', u';', u'sometimes', u'known']
[u'really', u'invent', u'the', u'loudspeaker', u"''"]
[u'Why', u'the', u'Name', u'``', u"''"]
[u'his', u'boat', u'``', u'teleautomaton', u"''"]
[u'ISBN', u'Valentinuzzi', u'M.E.', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'forgotten']

Did Nikola Tesla use a technique called picture thinking?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param281] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95cf8>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95cf8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'his', u'later', u'years', u'became']
[u'Why', u'the', u'Name', u'``', u"''"]
[u'Did', u'really', u'invent', u'the', u'loudspeaker', u"''"]
[u'ISBN', u'Valentinuzzi', u'M.E.', u':', u'why', u'he', u'so', u'much', u'resisted', u'forgotten']
[u'W.C.', u'Wysock', u'J.F.', u'Corum', u'J.M.', u'Hardesty', u'K.L.', u'Corum', u'Who', u'The', u'Real', u'Dr.']

Was Nikola Tesla a vegetarian?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param282] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95d88>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95d88>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Nikola', u'museum', u'Belgrade', u'Serbia', u'established', u'USA']
[u'1976', u'bronze', u'statue', u'placed']
[]
[u'Statue', u'Nikola', u'State', u'Park', u'Goat', u'Island']
[u'Another', u'featuring', u'him', u'standing', u'portion', u'alternator', u'established', u'Queen', u'Victoria', u'Park', u'Ontario', u'Canada']

Is there a monument to Tesla at Niagara Falls, New York?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
_____________________________ test_yesno[param283] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95e18>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95e18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'subject', u'the', u'Austrian', u'Empire', u'birth', u'later', u'became']
[u'Why', u'the', u'Name', u'``', u"''"]
[u'Did', u'really', u'invent', u'the', u'loudspeaker', u"''"]
[u'Chemical', u'Society', u'1993']
[u'ISBN', u'Valentinuzzi', u'M.E.', u'Nikola', u':', u'why', u'he', u'so', u'much', u'resisted', u'forgotten']

Was Tesla an American citizen?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param284] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c95ea8>, <src.tfidf.TF_IDF object at 0x7f20341d0390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c95ea8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u"'s", u'75th', u'birthday', u'1931', u'put', u'him', u'its']
[u'23', u'July', u'1934']
[u'Astronomski']
[u'Why', u'Name', u'``', u"''"]
[u'caption', u'noted', u'his', u'contribution', u'to', u'electrical', u'power', u'generation']

Was Tesla on the cover of Time magazine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param295] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99518>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c99518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'widely', u'solo', u'performance', u'ensemble', u'chamber', u'accompaniment']
[u'The', u'a', u'crucial', u'instrument', u'classical', u'jazz', u'film', u'television', u'most', u'other', u'complex', u'musical', u'genres']
[u'It', u'had', u'a', u'lever', u'the', u'keyboard', u'to', u'alter', u'the', u'to', u'any', u'key']
[u'A', u'relatively', u'recent', u'development', u'the', u'prepared', u'which', u'contemporary', u'art']
[u'The', u'entire', u'action', u'the', u'thus', u'shifted', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'written', u'one', u'key', u'it', u'sounds', u'a', u'different', u'key']

Are pianos used in Western music?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param296] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c995a8>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c995a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'widely', u'solo', u'performance', u'ensemble', u'chamber', u'accompaniment']
[u'The', u'a', u'crucial', u'instrument', u'classical', u'jazz', u'film', u'television', u'most', u'other', u'complex', u'musical', u'genres']
[u'It', u'had', u'a', u'lever', u'the', u'keyboard', u'to', u'alter', u'the', u'to', u'any', u'key']
[u'A', u'relatively', u'recent', u'development', u'the', u'prepared', u'which', u'contemporary', u'art']
[u'The', u'entire', u'action', u'the', u'thus', u'shifted', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'written', u'one', u'key', u'it', u'sounds', u'a', u'different', u'key']

Are pianos used in Western music?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param297] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99638>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c99638>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'A', u'rough', u'generalization', u'distinguishes', u'the', u'concert', u'grand', u'about', u'long', u'the', u'parlor', u'grand', u'boudoir', u'grand', u'about', u'to', u'the', u'smaller', u'baby', u'grand']
[u'unusually', u'tall', u'frames', u'long', u'strings', u'sometimes', u'grand']
[u'Hence', u'have', u'gained', u'a', u'place', u'the', u'popular', u'consciousness', u'sometimes', u'referred', u'to', u'nicknames', u'including', u':', u'the', u'ivories', u'the', u'joanna', u'the', u'eighty-eight', u'the', u'black', u's', u'white', u's', u'the', u'little', u'joe', u's']
[u'also', u'more', u'compact', u'the', u'frame', u'strings']
[u'one', u'time', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'Ivorine', u'Ivorite', u'imitated', u'other', u'makers', u'mimics', u'the', u'look', u'feel', u'ivory']

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param298] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c996c8>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c996c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'A', u'rough', u'generalization', u'distinguishes', u'the', u'concert', u'grand', u'about', u'long', u'the', u'parlor', u'grand', u'boudoir', u'grand', u'about', u'to', u'the', u'smaller', u'baby', u'grand']
[u'unusually', u'tall', u'frames', u'long', u'strings', u'sometimes', u'grand']
[u'Hence', u'have', u'gained', u'a', u'place', u'the', u'popular', u'consciousness', u'sometimes', u'referred', u'to', u'nicknames', u'including', u':', u'the', u'ivories', u'the', u'joanna', u'the', u'eighty-eight', u'the', u'black', u's', u'white', u's', u'the', u'little', u'joe', u's']
[u'also', u'more', u'compact', u'the', u'frame', u'strings']
[u'one', u'time', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'Ivorine', u'Ivorite', u'imitated', u'other', u'makers', u'mimics', u'the', u'look', u'feel', u'ivory']

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param299] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99758>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c99758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'invention', u'is', u'credited', u'to', u'Padua', u'Italy', u'who', u'was', u'employed', u'Prince', u'Ferdinand', u'Medici', u'Keeper', u'Instruments']
[u'Silbermann', u"'s", u'were', u'virtually', u'direct', u'copies', u"'s", u'one', u'important', u'addition', u':', u'Silbermann', u'forerunner', u'damper', u'pedal', u'which', u'lifts', u'all', u'dampers', u'strings', u'once']
[u'Earliest', u'French', u'grand', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'action', u'derived', u'work', u'Cristofiori', u'ca.', u'1700', u'ornately', u'decorated', u'soundboard']
[u'use', u'aluminum', u'plates', u'however', u'not', u'become', u'widely', u'accepted', u'was', u'discontinued']
[u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'tone', u'many', u'digital', u'not', u'sound', u'same', u'best', u'acoustic']

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param300] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c997e8>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c997e8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'invention', u'is', u'credited', u'to', u'Padua', u'Italy', u'who', u'was', u'employed', u'Prince', u'Ferdinand', u'Medici', u'Keeper', u'Instruments']
[u'Silbermann', u"'s", u'were', u'virtually', u'direct', u'copies', u"'s", u'one', u'important', u'addition', u':', u'Silbermann', u'forerunner', u'damper', u'pedal', u'which', u'lifts', u'all', u'dampers', u'strings', u'once']
[u'Earliest', u'French', u'grand', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'action', u'derived', u'work', u'Cristofiori', u'ca.', u'1700', u'ornately', u'decorated', u'soundboard']
[u'use', u'aluminum', u'plates', u'however', u'not', u'become', u'widely', u'accepted', u'was', u'discontinued']
[u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'tone', u'many', u'digital', u'not', u'sound', u'same', u'best', u'acoustic']

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param301] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99878>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c99878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'soft', u'placed', u'leftmost', u'row']
[u'left', u'to', u'right', u':', u'sostenuto', u'damper']
[u'Most', u'have', u'three', u':', u'soft', u'sostenuto', u'sustain', u'left', u'to', u'right', u'respectively']
[u'middle', u'sostenuto']
[]

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
_____________________________ test_yesno[param303] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99998>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c99998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'the']
[u'The', u'frame', u'usually', u'made', u'cast', u'iron']
[]
[u'The', u'inclusion', u'extremely', u'large', u'piece', u'potentially', u'aesthetic', u'handicap', u'which', u'makers', u'overcome', u'polishing', u'painting', u'decorating', u'the']
[u'often', u'include', u'the', u'manufacturer', u'ornamental', u'medallion', u'can', u'strikingly', u'attractive']

Is it advantageous for a grand piano's metal plate to be quite massive?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
_____________________________ test_yesno[param306] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c99b48>, <src.tfidf.TF_IDF object at 0x7f2037a6bf50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert str2bool('The mechanism in upright pianos is perpendicular to the keys.') == True
E                +  where 'The mechanism in upright pianos is perpendicular to the keys.' = <src.question_processing.Question_parser instance at 0x7f2033c99b48>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[]
[u'prepared', u'standard', u'grand', u'which', u'has', u'had', u'objects', u'placed', u'it', u'performance', u'order', u'alter', u'sound', u'which', u'has', u'had', u'changed', u'some', u'way']
[u'extra', u'same', u'other', u'appearance']
[u'entire', u'action', u'thus', u'shifted', u'allow', u'pianist', u'play', u'music', u'written', u'one', u'it', u'sounds', u'different']
[u'1821', u'Sbastien', u'rard', u'invented', u'double', u'escapement', u'action', u'which', u'permitted', u'note', u'repeated', u'even', u'had', u'not', u'yet', u'risen', u'maximum', u'vertical', u'position']

Is the mechanism in an upright piano perpendicular to its keys?
Validity= False
Question Type = NA
Answer Type = NA
Answer = The mechanism in upright pianos is perpendicular to the keys.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param315] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c098>, <src.tfidf.TF_IDF object at 0x7f20352b9390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c098>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Arriving', u'Iberian', u'Peninsula', u'216', u'BC', u'Romans', u'brought', u'them', u'which', u'all', u'Romance', u'descend']
[u'Ouviu', u'a', u'ltima', u'notcia']
[u'earliest', u'surviving', u'records', u'a', u'distinctively', u'are', u'administrative', u'documents', u'9th', u'century', u'still', u'interspersed', u'many', u'phrases']
[u'is', u'not', u'Tem', u'ouvido', u'a', u'ltima', u'notcia']
[u'other', u'hand', u'correct', u'translation', u'question', u'``', u'you', u'heard', u'latest', u'news', u"''"]

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param317] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c1b8>, <src.tfidf.TF_IDF object at 0x7f20352b9390>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c1b8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Partial', u'preview', u'available', u'Google', u'Books', u'See', u'also', u'List', u'English', u'origin', u'Loan', u'Indonesian', u'Japanese', u'origin', u'Borrowed', u'Malay', u'Sinhala', u'origin', u'Loan', u'Sri', u'Lankan', u'Tamil']
[u'9th', u'13th', u'centuries', u'acquired', u'800', u'influence', u'Moorish', u'Iberia']
[u'Ouviu', u'a', u'ltima', u'notcia']
[u'Mozambique', u'itself', u'is', u'name', u'sultan', u'Mua', u'Alebique', u'Musa', u'Alibiki']
[u'is', u'not', u'Tem', u'ouvido', u'a', u'ltima', u'notcia']

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param319] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c2d8>, <src.tfidf.TF_IDF object at 0x7f203a105b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c2d8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'his', u'patron']
[u'...']
[u'...']
[u'Will', u'Petersburg', u'share', u'same', u'fate', u'Moscow']
[u"'s", u'other', u'Petrograd', u'19141924', u'Leningrad', u'19241991']

Is the city named after the apostle Saint Peter?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param320] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c368>, <src.tfidf.TF_IDF object at 0x7f203a105b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c9c368>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'He', u'his', u'patron']
[u'...']
[u'...']
[u'Will', u'Petersburg', u'share', u'same', u'fate', u'Moscow']
[u"'s", u'other', u'Petrograd', u'19141924', u'Leningrad', u'19241991']

Is the city named after the apostle Saint Peter?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param321] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c3f8>, <src.tfidf.TF_IDF object at 0x7f203a105b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c3f8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'18th', u'century', u'some', u'places', u'more', u'making', u'mergers', u'several', u'islands', u'changing', u'hydrology']
[u'...']
[u'...']
[u'Will', u'Saint', u'Petersburg', u'share', u'same', u'fate', u'Moscow']
[u'Stalin', u':', u'Triumph', u'Tragedy', u'1996', u'ISBN', u'0761507183', u'Russian', u'publication', u':']

Has the terrain in the city been artificially raised?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param322] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c488>, <src.tfidf.TF_IDF object at 0x7f203a105b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c9c488>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'18th', u'century', u'some', u'places', u'more', u'making', u'mergers', u'several', u'islands', u'changing', u'hydrology']
[u'...']
[u'...']
[u'Will', u'Saint', u'Petersburg', u'share', u'same', u'fate', u'Moscow']
[u'Stalin', u':', u'Triumph', u'Tragedy', u'1996', u'ISBN', u'0761507183', u'Russian', u'publication', u':']

Has the terrain in the city been artificially raised?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param327] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c758>, <src.tfidf.TF_IDF object at 0x7f2038fc10d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Francisco', u'characterized', u'a']
[u'cost', u'Francisco', u'exceptionally', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'city', u'have', u'left']
[u'Its', u'current', u'structure', u'featuring', u'a', u'roof', u'an', u'example', u'sustainable', u'architecture', u'opened', u'2008']
[u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u'requiring', u'retrofits', u'older', u'buildings', u'higher', u'engineering', u'new', u'construction']
[u'rainy', u'period', u'November', u'to', u'April', u'cool', u'temperatures', u'lows']

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param329] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c878>, <src.tfidf.TF_IDF object at 0x7f2038fc10d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u'the', u'highest', u'any', u'the', u'50', u'largest', u'U.S.', u'cities', u'15.4', u'%']
[u'The', u'current', u'African', u'Americans', u'is', u'similar', u'to', u'that', u'the', u'state', u'California', u';', u'conversely', u'the', u'city', u"'s", u'Hispanic', u'residents', u'is', u'less', u'half', u'that', u'the', u'state']
[u'also', u'the', u'highest', u'same-sex', u'households', u'any', u'American', u'county', u'the', u'Bay', u'Area', u'higher', u'concentration', u'any', u'other', u'metropolitan', u'area']
[u'the', u'death', u'resignation', u'mayor', u'the', u'President', u'the', u'Board', u'Supervisors', u'assumes', u'office', u'Dianne', u'Feinstein', u'the', u'assassination', u'George', u'Moscone', u'1978']
[u'is', u'characterized', u'standard', u'living']

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 600 documents, 27206 characters, 5305 tokens, 45.3 char/doc, 8.8 tok/doc RATES: 9.153 doc/sec, 80.9 tok/sec

_____________________________ test_yesno[param331] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9c998>, <src.tfidf.TF_IDF object at 0x7f2038fc10d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9c998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'gay', u'the', u'city', u'hosts', u'Francisco', u'Pride', u'annual', u'parade', u'festival']
[u'Francisco', u'attracts', u'the', u'third-highest', u'number', u'foreign', u'any', u'city', u'the', u'U.S.', u'claims', u'Pier', u'39', u'Fisherman', u"'s", u'Wharf', u'the', u'third-most', u'attraction', u'the', u'nation']
[u'Today', u'Francisco', u'international', u'renowned', u'its', u'chilly', u'summer', u'fog', u'steep', u'rolling', u'hills', u'eclectic', u'mix', u'Victorian', u'modern', u'architecture', u'its', u'famous', u'landmarks', u'including', u'the', u'Golden', u'Gate', u'Bridge', u'the', u'cable', u'cars', u'Chinatown']
[u'The', u'port', u'handled', u'cargo', u'to', u'trans-Pacific', u'Atlantic', u'the', u'West', u'Coast', u'center', u'the', u'lumber', u'trade']
[u'The', u'Tenderloin', u'frequently', u'described', u'the', u'worst', u'neighborhood', u'the', u'city', u'guides']

Is San Franscico a popular tourist destination?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param341] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9cf38>, <src.tfidf.TF_IDF object at 0x7f2037e18410>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9cf38>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Education', u'all', u'whose']
[u'that', u'serves', u'second', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'the', u'East', u'African', u'coast']
[u'See', u'more', u'detailed', u'discussion', u'the', u'grammar', u'nouns']
[u'This', u'class', u'also', u'contains', u'such', u'the', u'name', u'the', u'Kiswahili', u'diminutives', u'which', u'had', u'separate', u'class', u'earlier', u'stages']
[u'common', u'all', u'grammar', u'arranges', u'nouns', u'number', u'classes']

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param343] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f098>, <src.tfidf.TF_IDF object at 0x7f2037e18410>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f098>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'neighboring', u'nation', u'Swahili', u'1992although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implementedand', u'declared', u'it', u'official', u'language', u'2005', u'preparation', u'the', u'East', u'African', u'Federation']
[u'Education', u'all', u'whose', u'language']
[u'the', u'Baganda', u'generally', u"n't", u'speak', u'Swahili', u'it', u'is', u'common', u'use', u'the', u'25', u'million', u'people', u'elsewhere', u'the', u'country', u'is', u'currently', u'being', u'implemented', u'nationwide', u'preparation', u'the', u'East', u'African', u'Community']
[u'When', u'the', u'noun', u'itself', u'not', u'clear', u'which', u'class', u'it', u'belongs', u'to', u'its', u'concords']
[u'Most', u'educated', u'Kenyans', u'are', u'able', u'to', u'communicate', u'fluently', u'Swahili', u'it', u'is', u'compulsory', u'grade', u'one']

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param344] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f128>, <src.tfidf.TF_IDF object at 0x7f2034d98fd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c9f128>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Wazzup']
[u'the', u'other', u'North', u'Germanic', u'languages', u'the', u'common', u'language', u'the', u'Germanic', u'peoples', u'living', u'Scandinavia', u'the', u'Viking', u'Era']
[u'This', u'section', u'based', u'primarily', u'the', u'9th', u'century', u'began', u'to', u'diverge', u'West', u'Norway', u'Iceland', u'East', u'Sweden', u'Denmark']
[u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'Scandinavia', u'which', u'resulted', u'the', u'appearance', u'two', u'similar', u'dialects', u'West', u'Norway', u'Iceland', u'East', u'Denmark', u'Sweden']
[u'Moreover', u'the', u'y', u'diphthong', u'changed', u'long', u'close', u'the', u'word', u'``', u'island', u"''"]

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param345] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f1b8>, <src.tfidf.TF_IDF object at 0x7f2034d98fd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f1b8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Wazzup']
[u'the', u'other', u'North', u'Germanic', u'languages', u'the', u'common', u'language', u'the', u'Germanic', u'peoples', u'living', u'Scandinavia', u'the', u'Viking', u'Era']
[u'This', u'section', u'based', u'primarily', u'the', u'9th', u'century', u'began', u'to', u'diverge', u'West', u'Norway', u'Iceland', u'East', u'Sweden', u'Denmark']
[u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'Scandinavia', u'which', u'resulted', u'the', u'appearance', u'two', u'similar', u'dialects', u'West', u'Norway', u'Iceland', u'East', u'Denmark', u'Sweden']
[u'Moreover', u'the', u'y', u'diphthong', u'changed', u'long', u'close', u'the', u'word', u'``', u'island', u"''"]

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param350] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f488>, <src.tfidf.TF_IDF object at 0x7f2034819690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f488>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'lies', u'the', u'two', u'relatively', u'narrow', u'the', u'Keelung', u'Xindian', u'Rivers', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'the', u'city', u"'s", u'western', u'border']
[u'Te-sheng', u'Wei', u"'s", u'Cape', u'No.', u'7', u'drama/comedy', u'Yun', u'Fu', u"'s", u'Take', u'Me', u'music', u'video', u'Jack', u'Yu', u"'s", u'Lollipop', u'Love', u'music', u'video', u'Edward', u'Yang', u"'s", u'drama', u'Edward', u'Yang', u"'s", u'Mahjong', u'drama', u'Edward', u'Yang', u"'s", u'Brighter', u'Summer', u'Day', u'drama', u'Lee', u'Kang-sheng', u"'s", u'Help', u'Me', u'Eros', u'drama', u'Tsai', u'Ming-liang', u"'s", u'Vive', u"L'Amour", u'drama', u'Tsai', u'Ming-liang', u"'s", u'What', u'Time', u'It', u'There']
[u'City', u'located', u'the', u'Basin', u'northern', u'Taiwan']
[u'The', u'mayor', u'City', u'had', u'appointed', u'position', u"'s", u'conversion', u'to', u'centrally-administered', u'municipality', u'1967', u'the', u'first', u'public', u'election', u'held', u'1994']
[u'It', u'public', u'university', u'campuses', u'both', u'Hsinchu']

Is Taipei in a valley?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param351] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f518>, <src.tfidf.TF_IDF object at 0x7f2034819690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'early', u'became', u'an', u'important', u'center', u'overseas', u'trade', u'19th']
[u'region', u'known', u'basin', u'home', u'to', u'Ketagalan', u'tribes', u'eighteenth']
[u'Zoo', u'1914', u'covers', u'an', u'area', u'165', u'hectares', u'animal', u'sanctuary']
[u'KMT', u'retreated', u'to', u'Taiwan', u'jurisdiction', u'Republic', u'China', u'limited', u'to', u'Taiwan', u'a', u'few', u'offshore', u'islands', u'Communist', u'Party', u'People', u"'s", u'Republic', u'China', u'Mainland', u'China']
[u'late', u'19th', u'area', u'where', u'major', u'Han', u'Chinese', u'settlements', u'northern', u'Taiwan', u'one', u'designated', u'overseas', u'trade', u'port', u'Tamsui', u'located', u'gained', u'economic', u'importance', u'due', u'to', u'booming', u'overseas', u'trade', u'especially', u'tea', u'exportation']

Was Taipei founded in the 18th century?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param352] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f5a8>, <src.tfidf.TF_IDF object at 0x7f2034819690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f5a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'early', u'became', u'an', u'important', u'center', u'overseas', u'trade', u'19th']
[u'region', u'known', u'basin', u'home', u'to', u'Ketagalan', u'tribes', u'eighteenth']
[u'Zoo', u'1914', u'covers', u'an', u'area', u'165', u'hectares', u'animal', u'sanctuary']
[u'KMT', u'retreated', u'to', u'Taiwan', u'jurisdiction', u'Republic', u'China', u'limited', u'to', u'Taiwan', u'a', u'few', u'offshore', u'islands', u'Communist', u'Party', u'People', u"'s", u'Republic', u'China', u'Mainland', u'China']
[u'late', u'19th', u'area', u'where', u'major', u'Han', u'Chinese', u'settlements', u'northern', u'Taiwan', u'one', u'designated', u'overseas', u'trade', u'port', u'Tamsui', u'located', u'gained', u'economic', u'importance', u'due', u'to', u'booming', u'overseas', u'trade', u'especially', u'tea', u'exportation']

Was Taipei founded in the 18th century?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param353] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f638>, <src.tfidf.TF_IDF object at 0x7f2034819690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f638>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'an', u'art', u'gallery', u'built', u'a', u'permanent', u'collection', u'centered', u'ancient', u'Chinese', u'artifacts']
[u'a', u'leading', u'art', u'gallery', u'cultural', u'landmark']
[u'Taiwan', u'oldest', u'Taiwan']
[u'now', u'boasts', u'a', u'truly', u'international', u'collection', u'housing', u'one', u'world', u"'s", u'largest', u'assemblies', u'artifacts', u'ancient', u'China']
[u'1999', u'it', u'has', u'renamed', u'to', u'``', u'Taiwan', u"''"]

Is the National Palace Museum in Taipei?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param354] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f6c8>, <src.tfidf.TF_IDF object at 0x7f2034819690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f6c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'an', u'art', u'gallery', u'built', u'a', u'permanent', u'collection', u'centered', u'ancient', u'Chinese', u'artifacts']
[u'a', u'leading', u'art', u'gallery', u'cultural', u'landmark']
[u'Taiwan', u'oldest', u'Taiwan']
[u'now', u'boasts', u'a', u'truly', u'international', u'collection', u'housing', u'one', u'world', u"'s", u'largest', u'assemblies', u'artifacts', u'ancient', u'China']
[u'1999', u'it', u'has', u'renamed', u'to', u'``', u'Taiwan', u"''"]

Is the National Palace Museum in Taipei?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param355] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f758>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'a']
[u'Improvements', u'to', u'design', u'metal', u'making', u'late', u'Middle', u'Ages', u'Renaissance', u'led', u'to', u'an', u'increased', u'usefulness', u'a']
[u'all', u'sound', u'produced', u'blowing', u'air', u'closed', u'lips', u'producing', u'a', u'``', u'buzzing', u"''", u'sound', u'mouthpiece', u'starting', u'a', u'standing', u'wave', u'vibration', u'air', u'column']
[u'valve', u'bypass', u'depressed', u'constructed', u'tubing', u'bent', u'twice', u'an', u'oblong', u'shape']
[u'He', u'noted', u'able', u'to', u'play', u'accurately', u'a', u'remarkably', u'high']

Is the trumpet the musical instrument with the highest register in the brass family?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 800 documents, 1441089 characters, 269454 tokens, 1801.4 char/doc, 336.8 tok/doc RATES: 9.640 doc/sec, 3247.0 tok/sec

_____________________________ test_yesno[param356] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f7e8>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f7e8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'a']
[u'Improvements', u'to', u'design', u'metal', u'making', u'late', u'Middle', u'Ages', u'Renaissance', u'led', u'to', u'an', u'increased', u'usefulness', u'a']
[u'all', u'sound', u'produced', u'blowing', u'air', u'closed', u'lips', u'producing', u'a', u'``', u'buzzing', u"''", u'sound', u'mouthpiece', u'starting', u'a', u'standing', u'wave', u'vibration', u'air', u'column']
[u'valve', u'bypass', u'depressed', u'constructed', u'tubing', u'bent', u'twice', u'an', u'oblong', u'shape']
[u'He', u'noted', u'able', u'to', u'play', u'accurately', u'a', u'remarkably', u'high']

Is the trumpet the musical instrument with the highest register in the brass family?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param357] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f878>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f878>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'They', u'constructed', u'brass', u'tubing', u'bent', u'twice', u'oblong', u'shape', u'producing', u'``', u'buzzing', u"''", u'sound', u'which', u'starts', u'standing', u'wave', u'vibration', u'the', u'column', u'the']
[u'all', u'brass', u'instruments', u'sound', u'produced', u'producing', u'``', u'buzzing', u"''", u'sound', u'the', u'mouthpiece', u'starting', u'standing', u'wave', u'vibration', u'the', u'column', u'the']
[u'The', u'bass', u'usually', u'trombone', u'player', u'the', u'same', u'pitch']
[u'each', u'overtone', u'series', u'the', u'different', u'pitches', u'attained', u'changing', u'the', u'embouchure', u'position', u'``', u'firmness', u"''"]
[u'The', u'player', u'can', u'select', u'the', u'pitch', u'range', u'overtones', u'harmonics', u'changing', u'the', u'aperture', u'tension', u'known', u'the', u'embouchure']

Is a trumpet played by blowing air through closed lips?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param358] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f908>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f908>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'They', u'constructed', u'brass', u'tubing', u'bent', u'twice', u'oblong', u'shape', u'producing', u'``', u'buzzing', u"''", u'sound', u'which', u'starts', u'standing', u'wave', u'vibration', u'the', u'column', u'the']
[u'all', u'brass', u'instruments', u'sound', u'produced', u'producing', u'``', u'buzzing', u"''", u'sound', u'the', u'mouthpiece', u'starting', u'standing', u'wave', u'vibration', u'the', u'column', u'the']
[u'The', u'bass', u'usually', u'trombone', u'player', u'the', u'same', u'pitch']
[u'each', u'overtone', u'series', u'the', u'different', u'pitches', u'attained', u'changing', u'the', u'embouchure', u'position', u'``', u'firmness', u"''"]
[u'The', u'player', u'can', u'select', u'the', u'pitch', u'range', u'overtones', u'harmonics', u'changing', u'the', u'aperture', u'tension', u'known', u'the', u'embouchure']

Is a trumpet played by blowing air through closed lips?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param359] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9f998>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9f998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'There', u'several', u';', u'a', u'transposing', u'instrument', u'pitched']
[u'C', u'D', u'E', u'E', u'F', u'G', u'A', u'also', u'available']
[u'use', u'C', u'American', u'orchestral', u'playing', u'where', u'it', u'used']
[u'these', u'built', u'to', u'play', u'A', u'separate', u'leadpipes', u'each', u'key']
[u'tubing', u'piccolo', u'one-half', u'length', u'that', u'a', u'standard']

Is the most common type of trumpet the B trumpet?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param360] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fa28>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fa28>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'There', u'several', u';', u'a', u'transposing', u'instrument', u'pitched']
[u'C', u'D', u'E', u'E', u'F', u'G', u'A', u'also', u'available']
[u'use', u'C', u'American', u'orchestral', u'playing', u'where', u'it', u'used']
[u'these', u'built', u'to', u'play', u'A', u'separate', u'leadpipes', u'each', u'key']
[u'tubing', u'piccolo', u'one-half', u'length', u'that', u'a', u'standard']

Is the most common type of trumpet the B trumpet?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param362] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fb48>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fb48>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'often', u'the', u'most', u'members', u'a', u'troop', u'they', u'relied', u'to', u'relay', u'instructions', u'to', u'other', u'sections', u'the', u'army']
[u'Reproduction', u'Baroque', u'Michael', u'Laird', u'medieval', u'times', u'playing', u'a', u'craft', u'its', u'instruction', u'occurring', u'only', u'highly', u'selective', u'guilds']
[u'A', u'musician', u'who', u'plays', u'the', u'called', u'a', u'trumpeter']
[u'The', u'bass', u'usually', u'played', u'a', u'trombone', u'the', u'same', u'pitch']
[u'Maurice', u'Andr', u'Hkan', u'Hardenberger', u'Wynton', u'Marsalis', u'some', u'well-known', u'piccolo']

Were trumpet players heavily guarded?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param363] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fbd8>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fbd8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'often', u'the', u'most', u'members', u'a', u'troop', u'they', u'relied', u'to', u'relay', u'instructions', u'to', u'other', u'sections', u'the', u'army']
[u'Reproduction', u'Baroque', u'Michael', u'Laird', u'medieval', u'times', u'playing', u'a', u'craft', u'its', u'instruction', u'occurring', u'only', u'highly', u'selective', u'guilds']
[u'A', u'musician', u'who', u'plays', u'the', u'called', u'a', u'trumpeter']
[u'The', u'bass', u'usually', u'played', u'a', u'trombone', u'the', u'same', u'pitch']
[u'Maurice', u'Andr', u'Hkan', u'Hardenberger', u'Wynton', u'Marsalis', u'some', u'well-known', u'piccolo']

Were trumpet players heavily guarded?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param364] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fc68>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fc68>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'a']
[u'The', u'tubing', u'the', u'piccolo', u'one-half', u'the', u'length', u'that', u'a', u'standard']
[u'The', u'modern', u'slide', u'a', u'that', u'has', u'a', u'slide', u'instead', u'valves']
[u'Unfortunately', u'many', u'models', u'suffer', u'poor', u'design', u'as', u'well', u'cheap', u'sloppy', u'manufacturing', u'the', u'intonation', u'tone', u'color', u'dynamic', u'range', u'such', u'instruments', u'severely', u'hindered']
[u'There', u'several', u'types', u';', u'the', u'most', u'common', u'a', u'transposing', u'instrument', u'pitched']

Are pocket trumpets compact B trumpets?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param365] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fcf8>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fcf8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'The', u'a']
[u'The', u'tubing', u'the', u'piccolo', u'one-half', u'the', u'length', u'that', u'a', u'standard']
[u'The', u'modern', u'slide', u'a', u'that', u'has', u'a', u'slide', u'instead', u'valves']
[u'Unfortunately', u'many', u'models', u'suffer', u'poor', u'design', u'as', u'well', u'cheap', u'sloppy', u'manufacturing', u'the', u'intonation', u'tone', u'color', u'dynamic', u'range', u'such', u'instruments', u'severely', u'hindered']
[u'There', u'several', u'types', u';', u'the', u'most', u'common', u'a', u'transposing', u'instrument', u'pitched']

Are pocket trumpets compact B trumpets?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param367] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fe18>, <src.tfidf.TF_IDF object at 0x7f20392e4c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('I')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033c9fe18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------

What was Maynard Ferguson noted for being able to play accurately?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = hard

INVALID
_____________________________ test_yesno[param368] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9fea8>, <src.tfidf.TF_IDF object at 0x7f2034d98650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033c9fea8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'1928', u'one', u'Atatrk', u"'s", u'Reforms', u'early', u'years', u'Republic', u'Turkey', u'phonetic']
[u'Cover', u'French', u"L'Illustration", u'magazine', u'Turkish', u'written', u'using', u'modified', u'version', u'introduced', u'1928', u'Atatrk', u'to', u'Arabic-based', u'Turkish']
[u'it', u'tree', u"''"]
[u'marked', u'only', u'three', u'different', u'vowelslong', u'included', u'several', u'redundant', u'consonants', u'such', u'which', u'distinguished', u'Arabic', u'not', u'Turkish']
[u'aa', u'm', u"''"]

Was the Ottoman script replaced with a variant of the Latin alphabet?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param369] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033c9ff38>, <src.tfidf.TF_IDF object at 0x7f2034d98650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033c9ff38>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'1928', u'one', u'Atatrk', u"'s", u'Reforms', u'early', u'years', u'Republic', u'Turkey', u'phonetic']
[u'Cover', u'French', u"L'Illustration", u'magazine', u'Turkish', u'written', u'using', u'modified', u'version', u'introduced', u'1928', u'Atatrk', u'to', u'Arabic-based', u'Turkish']
[u'it', u'tree', u"''"]
[u'marked', u'only', u'three', u'different', u'vowelslong', u'included', u'several', u'redundant', u'consonants', u'such', u'which', u'distinguished', u'Arabic', u'not', u'Turkish']
[u'aa', u'm', u"''"]

Was the Ottoman script replaced with a variant of the Latin alphabet?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param380] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca25a8>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca25a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'other', u'southeast', u'Asian', u'languages']
[u'``', u'What', u"'s", u'so', u'Chinese', u"''"]
[u'not', u'use', u'morphological', u'marking', u'case', u'gender', u'tense', u'result', u'no', u'finite/nonfinite', u'distinction']
[u'It', u'should', u'be', u'noted', u'the', u'movements', u'people', u'North', u'South', u'beginning', u'the', u'mid-20th', u'century', u'continuing', u'to', u'this', u'day', u'resulted', u'significant', u'Southern', u'residents', u'speaking', u'the', u'Northern', u'accent/dialect', u'to', u'lesser', u'extent', u'Northern', u'residents', u'speaking', u'the', u'Southern', u'accent/dialect']
[u'third', u'that', u'people', u'made', u'the', u'move', u'the', u'reverse', u'direction']

Does Vietnamese have a comparatively large number of vowels?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param381] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2638>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2638>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'It', u'ngi', u'Vit', u'ngi', u'Kinh', u'who', u'constitute', u'86', u'%', u'Vietnam', u"'s", u'population', u'three', u'million', u'overseas']
[u'``', u'What', u'so', u'Chinese', u"''"]
[u'ancestor', u'language', u'originally', u'based', u'area', u'Red', u'River', u'what', u'now', u'northern', u'Vietnam', u'subsequent', u'expansion', u'language', u'what', u'now', u'central', u'southern', u'Vietnam', u'conquest', u'ancient', u'nation', u'Champa', u'Khmer', u'Mekong', u'Delta', u'vicinity', u'present-day', u'Ho', u'Chi', u'Minh', u'City', u'Saigon', u'characteristic', u'tonal', u'variations', u'have', u'emerged']
[u'spoken', u'millennia', u'written', u'did', u'not', u'become', u'official', u'administrative', u'language', u'Vietnam', u'20th', u'century']
[]

Is Vietnamese the mother tongue of the Vietnamese people?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
_____________________________ test_yesno[param382] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca26c8>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca26c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'It', u'ngi', u'Vit', u'ngi', u'Kinh', u'who', u'constitute', u'86', u'%', u'Vietnam', u"'s", u'population', u'three', u'million', u'overseas']
[u'``', u'What', u'so', u'Chinese', u"''"]
[u'ancestor', u'language', u'originally', u'based', u'area', u'Red', u'River', u'what', u'now', u'northern', u'Vietnam', u'subsequent', u'expansion', u'language', u'what', u'now', u'central', u'southern', u'Vietnam', u'conquest', u'ancient', u'nation', u'Champa', u'Khmer', u'Mekong', u'Delta', u'vicinity', u'present-day', u'Ho', u'Chi', u'Minh', u'City', u'Saigon', u'characteristic', u'tonal', u'variations', u'have', u'emerged']
[u'spoken', u'millennia', u'written', u'did', u'not', u'become', u'official', u'administrative', u'language', u'Vietnam', u'20th', u'century']
[]

Is Vietnamese the mother tongue of the Vietnamese people?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
_____________________________ test_yesno[param383] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2758>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2758>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'spoken', u'people', u'millennia', u'written', u'did', u'not', u'become', u'20th', u'century']
[u'``', u'What', u'so', u'Chinese', u"''"]
[u'It', u'instruction', u'schools', u'universities', u'business']
[u'formerly', u'known', u'French', u'colonization', u'Annamese', u'see', u'Annam', u'national']
[u'It', u'also', u'used', u'purposes', u'brief', u'Ho', u'Tay', u'Son', u'Dynasties']

Is Vietnamese the official administrative language of Vietnam?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param384] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca27e8>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca27e8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'spoken', u'people', u'millennia', u'written', u'did', u'not', u'become', u'20th', u'century']
[u'``', u'What', u'so', u'Chinese', u"''"]
[u'It', u'instruction', u'schools', u'universities', u'business']
[u'formerly', u'known', u'French', u'colonization', u'Annamese', u'see', u'Annam', u'national']
[u'It', u'also', u'used', u'purposes', u'brief', u'Ho', u'Tay', u'Son', u'Dynasties']

Is Vietnamese the official administrative language of Vietnam?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param386] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2908>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca2908>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Following', u'reunification', u'Vietnam', u'1975-76', u'Northern', u'North-Central', u'speakers', u'densely', u'populated', u'poorer', u'provinces', u'Nghe', u'An', u'Ha', u'Tinh', u'Quang', u'Binh', u'have', u'continued', u'to', u'move', u'South', u'to', u'look', u'better', u'economic', u'opportunities']
[u'``', u'What', u'so', u'Chinese', u'Vietnamese', u"''"]
[u'Following', u'Geneva', u'Accords', u'1954', u'that', u'called', u'``', u'temporary', u"''", u'division', u'country', u'almost', u'a', u'million', u'Northern', u'speakers', u'mainly', u'Hanoi', u'surrounding', u'areas', u'moved', u'South', u'mainly', u'to', u'Saigon', u'now', u'Ho', u'Chi', u'Minh', u'City', u'surrounding', u'areas']
[u'ancestor', u'Vietnamese', u'language', u'originally', u'based', u'area', u'what', u'now', u'northern', u'Vietnam', u'subsequent', u'expansion', u'Vietnamese', u'language', u'people', u'what', u'now', u'central', u'southern', u'Vietnam', u'conquest', u'ancient', u'nation', u'Champa', u'Khmer', u'people', u'Mekong', u'vicinity', u'present-day', u'Ho', u'Chi', u'Minh', u'City', u'Saigon', u'characteristic', u'tonal', u'variations', u'have', u'emerged']
[u'audio', u'help', u'Vietnamese', u'has', u'divided', u'three', u'dialect', u'regions', u':', u'North', u'Central', u'South']

Is the Red River Delta traditionally poor?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param387] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2998>, <src.tfidf.TF_IDF object at 0x7f2037e18c90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca2998>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'``', u'What', u'so', u'Chinese', u'Vietnamese', u"''"]
[u'It', u'not', u'independence', u'Vietnamese', u'used', u'officially']
[u'When', u'invaded', u'the', u'late', u'19th', u'century', u'French', u'gradually', u'replaced', u'Chinese', u'the', u'official', u'language', u'education', u'government']
[u'Graphemic', u'borrowing', u'Chinese', u':', u'The', u'case', u'ch', u'nm', u"'s", u'demotic', u'script']
[u'Vietnamese', u'adopted', u'many', u'French', u'terms', u'such', u'm', u'dame', u'madame', u'ga', u'train', u'station', u'gare', u's', u'mi', u'shirt', u'chemise', u'bp', u'b', u'doll', u'poupe']

Is Vietnam independent from France?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = hard

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 32266 characters, 6250 tokens, 46.1 char/doc, 8.9 tok/doc RATES: 10.144 doc/sec, 90.6 tok/sec

_____________________________ test_yesno[param393] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2cf8>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2cf8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Why', u'is', u'the', u'so', u'hard', u'to', u'play']
[u'The', u'is', u'bowed', u'instrument', u'usually', u'tuned', u'perfect', u'fifths']
[u'most', u'there', u'are', u'some', u'instruments', u'five', u'six', u'even', u'seven']
[u'addition', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'tailpiece', u'fine', u'tuners', u'all', u'instead', u'only', u'using', u'one', u'the', u'E', u'many', u'classical', u'players']
[u'The', u'oldest', u'documented', u'to', u'the', u'modern', u'is', u'supposed', u'to', u'been', u'constructed', u'1555', u'Andrea', u'Amati', u'the', u'date', u'is', u'doubtuful']

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param394] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2d88>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2d88>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Why', u'is', u'the', u'so', u'hard', u'to', u'play']
[u'The', u'is', u'bowed', u'instrument', u'usually', u'tuned', u'perfect', u'fifths']
[u'most', u'there', u'are', u'some', u'instruments', u'five', u'six', u'even', u'seven']
[u'addition', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'tailpiece', u'fine', u'tuners', u'all', u'instead', u'only', u'using', u'one', u'the', u'E', u'many', u'classical', u'players']
[u'The', u'oldest', u'documented', u'to', u'the', u'modern', u'is', u'supposed', u'to', u'been', u'constructed', u'1555', u'Andrea', u'Amati', u'the', u'date', u'is', u'doubtuful']

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param395] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2e18>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2e18>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'standard', u'way', u'holding', u'side', u'jaw', u'resting', u'chinrest', u'often', u'assisted', u'a', u'rest']
[u'Why', u'so', u'hard', u'to', u'play']
[u'placement', u'hand', u'fingerboard', u'characterized', u'``', u'positions', u"''"]
[u'sound', u'post', u'``', u'soul', u'post', u"''", u'fits', u'precisely', u'instrument', u'back', u'top', u'treble', u'foot', u'bridge', u'which', u'it', u'helps']
[u'hand', u'regulates', u'sounding', u'length', u'string', u'stopping', u'it', u'fingerboard', u'fingertips', u'producing', u'different', u'pitches']

Is the violin supported by the left shoulder?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param396] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2ea8>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca2ea8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'standard', u'way', u'holding', u'side', u'jaw', u'resting', u'chinrest', u'often', u'assisted', u'a', u'rest']
[u'Why', u'so', u'hard', u'to', u'play']
[u'placement', u'hand', u'fingerboard', u'characterized', u'``', u'positions', u"''"]
[u'sound', u'post', u'``', u'soul', u'post', u"''", u'fits', u'precisely', u'instrument', u'back', u'top', u'treble', u'foot', u'bridge', u'which', u'it', u'helps']
[u'hand', u'regulates', u'sounding', u'length', u'string', u'stopping', u'it', u'fingerboard', u'fingertips', u'producing', u'different', u'pitches']

Is the violin supported by the left shoulder?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param397] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2f38>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca2f38>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'distinctive', u'feature', u'body', u'its', u'``', u"''", u'arching', u'its', u'top', u'back']
[u'Why', u'so', u'hard', u'to', u'play']
[u'comprises', u'two', u'upper', u'bouts', u'two', u'lower', u'bouts', u'two', u'concave', u'C-bouts', u'``', u'waist', u"''", u'providing', u'clearance', u'bow']
[u'arched', u'thickness', u'wood', u'its', u'physical', u'qualities', u'govern', u'sound']
[u'electric', u'has', u'even', u'used', u'bands', u'Crxshadows', u'context', u'keyboard', u'based', u'music']

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param398] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca2fc8>, <src.tfidf.TF_IDF object at 0x7f20362fc5d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca2fc8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'distinctive', u'feature', u'body', u'its', u'``', u"''", u'arching', u'its', u'top', u'back']
[u'Why', u'so', u'hard', u'to', u'play']
[u'comprises', u'two', u'upper', u'bouts', u'two', u'lower', u'bouts', u'two', u'concave', u'C-bouts', u'``', u'waist', u"''", u'providing', u'clearance', u'bow']
[u'arched', u'thickness', u'wood', u'its', u'physical', u'qualities', u'govern', u'sound']
[u'electric', u'has', u'even', u'used', u'bands', u'Crxshadows', u'context', u'keyboard', u'based', u'music']

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param399] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca5098>, <src.tfidf.TF_IDF object at 0x7f203743e910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033ca5098>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Each', u'bar', u'tuned', u'to', u'specific', u'pitch', u'scale']
[u'Greek', u'words', u'-', u'xylon', u'``', u'wood', u"''", u'-', u'phone', u'``', u'voice', u"''", u'meaning', u'``', u'wooden', u'sound', u"''", u'percussion', u'family', u'which', u'probably', u'originated', u'Indonesia']
[u'1511', u'First', u'European', u'mention', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'Praetorius', u'his', u'catalogue', u'a.k.a.', u'Strohfideln', u'Hulzen', u"G'lachter", u'Gigelyra', u'straw', u'fiddle', u'1866', u'April', u'7', u'word', u'coined', u'recorded', u'Athenaeum', u':', u'``', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'little', u'drumsticks', u'machine', u'wooden', u'keys', u'called', u'`', u"''"]
[u'Gusikow', u"'s", u'`', u'wood', u'straw', u"'", u'Lewald', u"'s", u'`', u'Europa', u"'", u'ancient', u'that', u'originated', u'independently', u'Africa', u'Asia']
[u'Certainly', u'1830s', u'solo', u'novelty']

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param400] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca5128>, <src.tfidf.TF_IDF object at 0x7f203743e910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca5128>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'Each', u'bar', u'tuned', u'to', u'specific', u'pitch', u'scale']
[u'Greek', u'words', u'-', u'xylon', u'``', u'wood', u"''", u'-', u'phone', u'``', u'voice', u"''", u'meaning', u'``', u'wooden', u'sound', u"''", u'percussion', u'family', u'which', u'probably', u'originated', u'Indonesia']
[u'1511', u'First', u'European', u'mention', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'Praetorius', u'his', u'catalogue', u'a.k.a.', u'Strohfideln', u'Hulzen', u"G'lachter", u'Gigelyra', u'straw', u'fiddle', u'1866', u'April', u'7', u'word', u'coined', u'recorded', u'Athenaeum', u':', u'``', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'little', u'drumsticks', u'machine', u'wooden', u'keys', u'called', u'`', u"''"]
[u'Gusikow', u"'s", u'`', u'wood', u'straw', u"'", u'Lewald', u"'s", u'`', u'Europa', u"'", u'ancient', u'that', u'originated', u'independently', u'Africa', u'Asia']
[u'Certainly', u'1830s', u'solo', u'novelty']

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param403] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca52d8>, <src.tfidf.TF_IDF object at 0x7f203743e910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033ca52d8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'earliest', u'historical', u'reference', u'16th', u'Century', u'Germany', u'organist', u'Arnold', u'Schlick', u"'s", u'Spiegel', u'der', u'Orgelmacher', u'und', u'Organisten']
[u'which', u'had', u'known', u'Middle', u'Ages', u'19th', u'Century', u'associated', u'largely', u'folk', u'music', u'Eastern', u'notably', u'Poland', u'Eastern', u'Germany']
[u'displaced', u'jazz', u'vibraphone']
[u'sometimes', u'called', u'strohfiedel', u'straw', u'fiddle']
[u'ISBN', u'0-674-59000-7', u'p', u'98', u'1956', u'consists', u'wooden', u'bars', u'various', u'lengths', u'struck', u'plastic', u'wooden', u'rubber', u'mallets']

Was it likely that the xylophone reached Europe during the Crusades?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param404] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca5368>, <src.tfidf.TF_IDF object at 0x7f203743e910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f2033ca5368>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'earliest', u'historical', u'reference', u'16th', u'Century', u'Germany', u'organist', u'Arnold', u'Schlick', u"'s", u'Spiegel', u'der', u'Orgelmacher', u'und', u'Organisten']
[u'which', u'had', u'known', u'Middle', u'Ages', u'19th', u'Century', u'associated', u'largely', u'folk', u'music', u'Eastern', u'notably', u'Poland', u'Eastern', u'Germany']
[u'displaced', u'jazz', u'vibraphone']
[u'sometimes', u'called', u'strohfiedel', u'straw', u'fiddle']
[u'ISBN', u'0-674-59000-7', u'p', u'98', u'1956', u'consists', u'wooden', u'bars', u'various', u'lengths', u'struck', u'plastic', u'wooden', u'rubber', u'mallets']

Was it likely that the xylophone reached Europe during the Crusades?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param407] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca5518>, <src.tfidf.TF_IDF object at 0x7f2038afd7d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033ca5518>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'horses', u'only', u'when', u'neighbors', u'are', u'to', u'warn', u'them', u'predators']
[u'She', u'nurses', u'the', u'foal', u'to', u'a', u'year']
[u'the', u'other', u'species', u'Grevy', u"'s", u'not', u'have', u'permanent', u'social', u'bonds']
[u'species', u'may', u'have', u'overlapping', u'ranges', u'they', u'not', u'interbreed']
[u'When', u'cornered', u'the', u'will', u'rear', u'kick', u'bite', u'its', u'attacker']

Do zebras sleep standing up?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param408] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca55a8>, <src.tfidf.TF_IDF object at 0x7f2038afd7d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca55a8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'horses', u'only', u'when', u'neighbors', u'are', u'to', u'warn', u'them', u'predators']
[u'She', u'nurses', u'the', u'foal', u'to', u'a', u'year']
[u'the', u'other', u'species', u'Grevy', u"'s", u'not', u'have', u'permanent', u'social', u'bonds']
[u'species', u'may', u'have', u'overlapping', u'ranges', u'they', u'not', u'interbreed']
[u'When', u'cornered', u'the', u'will', u'rear', u'kick', u'bite', u'its', u'attacker']

Do zebras sleep standing up?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param409] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca5638>, <src.tfidf.TF_IDF object at 0x7f2038afd7d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f2033ca5638>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'captivity', u'Plains', u'Zebras']
[u'live', u'groups', u'known', u'`', u'harems', u"'", u'consisting', u'one', u'stallion', u'up', u'to', u'six', u'mares', u'their', u'foals']
[u'The', u'Cape', u'hunted', u'to', u'extinction', u'less', u'100', u'individuals', u'the', u'1930s']
[u'The', u'``', u"''", u'named', u'the', u"'s", u'black', u'white', u'stripes']
[u'They', u'can', u'found', u'a', u'variety', u'habitats', u'such', u'grasslands', u'savannas', u'woodlands', u'thorny', u'scrublands', u'coastal', u'hills']

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
_____________________________ test_yesno[param410] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f2033ca56c8>, <src.tfidf.TF_IDF object at 0x7f2038afd7d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f2033ca56c8>.answer

test_compute.py:38: AssertionError
------------------------------- Captured stdout --------------------------------
[u'captivity', u'Plains', u'Zebras']
[u'live', u'groups', u'known', u'`', u'harems', u"'", u'consisting', u'one', u'stallion', u'up', u'to', u'six', u'mares', u'their', u'foals']
[u'The', u'Cape', u'hunted', u'to', u'extinction', u'less', u'100', u'individuals', u'the', u'1930s']
[u'The', u'``', u"''", u'named', u'the', u"'s", u'black', u'white', u'stripes']
[u'They', u'can', u'found', u'a', u'variety', u'habitats', u'such', u'grasslands', u'savannas', u'woodlands', u'thorny', u'scrublands', u'coastal', u'hills']

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
=================== 202 failed, 209 passed in 86.79 seconds ====================
