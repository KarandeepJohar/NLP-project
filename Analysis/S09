============================= test session starts ==============================
platform linux2 -- Python 2.7.6 -- pytest-2.5.1
collected 195 items

test_compute.py .............................FF.....................FF..FF.......F...FF..FF......FF..........FF...............F.......................F.......FF....FF......FF......FF...........F..FFFFFFF.......E

==================================== ERRORS ====================================
________________________ ERROR at setup of test_factoid ________________________
file /home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py, line 45
  def test_factoid(param_factoid):
        fixture 'param_factoid' not found
        available fixtures: pytestconfig, recwarn, monkeypatch, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py:45
=================================== FAILURES ===================================
_____________________________ test_yesno[param29] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9c248>, (<src.tfidf.TF_IDF object at 0x7f56b98a6e10>, set(['cello'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c248>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.26618221402168274, {u'tokens': [u'A', u'cello', u'strung', u'with', u'gut', u'strings', u'.'], u'lemmas': [u'a', u'cello', u'string', u'with', u'gut', u'string', u'.'], u'pos': [u'DT', u'NN', u'VBN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[13237, 13238], [13239, 13244], [13245, 13251], [13252, 13256], [13257, 13260], [13261, 13268], [13268, 13269]]}) 
answer: set([u'violin', u'bow', u'instrument'])
candidate Sentence: (0.24165225028991699, {u'tokens': [u'On', u'a', u'violin', u',', u'spiccato', u'bowing', u'comes', u'off', u'the', u'string', u',', u'but', u'on', u'a', u'cello', u',', u'the', u'wood', u'of', u'the', u'bow', u'may', u'rise', u'briskly', u'up', u'without', u'the', u'hair', u'actually', u'leaving', u'the', u'string', u'.'], u'lemmas': [u'on', u'a', u'violin', u',', u'spiccato', u'bowing', u'come', u'off', u'the', u'string', u',', u'but', u'on', u'a', u'cello', u',', u'the', u'wood', u'of', u'the', u'bow', u'may', u'rise', u'briskly', u'up', u'without', u'the', u'hair', u'actually', u'leave', u'the', u'string', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NN', u'NN', u'VBZ', u'RP', u'DT', u'NN', u',', u'CC', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'MD', u'VB', u'RB', u'RB', u'IN', u'DT', u'NN', u'RB', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[23528, 23530], [23531, 23532], [23533, 23539], [23539, 23540], [23541, 23549], [23550, 23556], [23557, 23562], [23563, 23566], [23567, 23570], [23571, 23577], [23577, 23578], [23579, 23582], [23583, 23585], [23586, 23587], [23588, 23593], [23593, 23594], [23595, 23598], [23599, 23603], [23604, 23606], [23607, 23610], [23611, 23614], [23615, 23618], [23619, 23623], [23624, 23631], [23632, 23634], [23635, 23642], [23643, 23646], [23647, 23651], [23652, 23660], [23661, 23668], [23669, 23672], [23673, 23679], [23679, 23680]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.20194701850414276, {u'tokens': [u'The', u'three', u'most', u'important', u'ones', u'are', u':', u'bow', u'speed', u',', u'weight', u'applied', u'to', u'the', u'string', u',', u'and', u'point', u'of', u'contact', u'of', u'the', u'bow', u'hair', u'with', u'the', u'string', u'.'], u'lemmas': [u'the', u'three', u'most', u'important', u'one', u'be', u':', u'bow', u'speed', u',', u'weight', u'apply', u'to', u'the', u'string', u',', u'and', u'point', u'of', u'contact', u'of', u'the', u'bow', u'hair', u'with', u'the', u'string', u'.'], u'pos': [u'DT', u'CD', u'RBS', u'JJ', u'NNS', u'VBP', u':', u'VB', u'NN', u',', u'NN', u'VBD', u'TO', u'DT', u'NN', u',', u'CC', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[21055, 21058], [21059, 21064], [21065, 21069], [21070, 21079], [21080, 21084], [21085, 21088], [21088, 21089], [21090, 21093], [21094, 21099], [21099, 21100], [21101, 21107], [21108, 21115], [21116, 21118], [21119, 21122], [21123, 21129], [21129, 21130], [21131, 21134], [21135, 21140], [21141, 21143], [21144, 21151], [21152, 21154], [21155, 21158], [21159, 21162], [21163, 21167], [21168, 21172], [21173, 21176], [21177, 21183], [21183, 21184]]}) 
answer: set([u'instrument', u'violin'])
candidate Sentence: (0.19993232190608978, {u'tokens': [u'The', u'cello', u'is', u'used', u'as', u'a', u'solo', u'instrument', u',', u'in', u'chamber', u'music', u',', u'and', u'as', u'a', u'member', u'of', u'the', u'string', u'section', u'of', u'an', u'orchestra', u'.'], u'lemmas': [u'the', u'cello', u'be', u'use', u'as', u'a', u'solo', u'instrument', u',', u'in', u'chamber', u'music', u',', u'and', u'as', u'a', u'member', u'of', u'the', u'string', u'section', u'of', u'a', u'orchestra', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'NN', u',', u'IN', u'NN', u'NN', u',', u'CC', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[205, 208], [209, 214], [215, 217], [218, 222], [223, 225], [226, 227], [228, 232], [233, 243], [243, 244], [245, 247], [248, 255], [256, 261], [261, 262], [263, 266], [267, 269], [270, 271], [272, 278], [279, 281], [282, 285], [286, 292], [293, 300], [301, 303], [304, 306], [307, 316], [316, 317]]}) 
answer: set([u'violin', u'bow'])
candidate Sentence: (0.19804796576499939, {u'tokens': [u'In', u'cello', u'playing', u',', u'the', u'bow', u'is', u'much', u'like', u'the', u'breath', u'of', u'a', u'wind', u'instrument', u'player', u'.'], u'lemmas': [u'in', u'cello', u'playing', u',', u'the', u'bow', u'be', u'much', u'like', u'the', u'breath', u'of', u'a', u'wind', u'instrument', u'player', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[18964, 18966], [18967, 18972], [18973, 18980], [18980, 18981], [18982, 18985], [18986, 18989], [18990, 18992], [18993, 18997], [18998, 19002], [19003, 19006], [19007, 19013], [19014, 19016], [19017, 19018], [19019, 19023], [19024, 19034], [19035, 19041], [19041, 19042]]}) 
answer: set([u'violin', u'string'])
candidate Sentence: (0.19415812194347382, {u'tokens': [u'A', u'cello', u'bow', u'is', u'roughly', u'10', u'grams', u'heavier', u'than', u'a', u'viola', u'bow', u',', u'which', u'in', u'turn', u'is', u'roughly', u'10', u'grams', u'heavier', u'than', u'a', u'violin', u'bow', u'.'], u'lemmas': [u'a', u'cello', u'bow', u'be', u'roughly', u'10', u'gram', u'heavier', u'than', u'a', u'viola', u'bow', u',', u'which', u'in', u'turn', u'be', u'roughly', u'10', u'gram', u'heavier', u'than', u'a', u'violin', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'CD', u'NNS', u'JJR', u'IN', u'DT', u'NN', u'NN', u',', u'WDT', u'IN', u'NN', u'VBZ', u'RB', u'CD', u'NNS', u'JJR', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[10159, 10160], [10161, 10166], [10167, 10170], [10171, 10173], [10174, 10181], [10182, 10184], [10185, 10190], [10191, 10198], [10199, 10203], [10204, 10205], [10206, 10211], [10212, 10215], [10215, 10216], [10217, 10222], [10223, 10225], [10226, 10230], [10231, 10233], [10234, 10241], [10242, 10244], [10245, 10250], [10251, 10258], [10259, 10263], [10264, 10265], [10266, 10272], [10273, 10276], [10276, 10277]]}) 
answer: set([u'instrument', u'string'])
candidate Sentence: (0.18742477893829346, {u'tokens': [u'The', u'cello', u'developed', u'from', u'the', u'bass', u'violin', u',', u'first', u'referred', u'to', u'by', u'Jambe', u'de', u'Fer', u'in', u'1556', u',', u'which', u'was', u'originally', u'a', u'three-string', u'instrument', u'.'], u'lemmas': [u'the', u'cello', u'develop', u'from', u'the', u'bass', u'violin', u',', u'first', u'refer', u'to', u'by', u'Jambe', u'de', u'Fer', u'in', u'1556', u',', u'which', u'be', u'originally', u'a', u'three-string', u'instrument', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'IN', u'DT', u'NN', u'NN', u',', u'JJ', u'VBN', u'TO', u'IN', u'NNP', u'IN', u'NNP', u'IN', u'CD', u',', u'WDT', u'VBD', u'RB', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[10749, 10752], [10753, 10758], [10759, 10768], [10769, 10773], [10774, 10777], [10778, 10782], [10783, 10789], [10789, 10790], [10791, 10796], [10797, 10805], [10806, 10808], [10809, 10811], [10812, 10817], [10818, 10820], [10821, 10824], [10825, 10827], [10828, 10832], [10832, 10833], [10834, 10839], [10840, 10843], [10844, 10854], [10855, 10856], [10857, 10869], [10870, 10880], [10880, 10881]]}) 
answer: set([u'string', u'bow'])
candidate Sentence: (0.18252983689308167, {u'tokens': [u'Cellos', u'are', u'made', u'by', u'luthiers', u',', u'specialists', u'in', u'building', u'and', u'repairing', u'stringed', u'instruments', u',', u'ranging', u'from', u'guitars', u'to', u'violins', u'.'], u'lemmas': [u'cello', u'be', u'make', u'by', u'luthier', u',', u'specialist', u'in', u'building', u'and', u'repair', u'stringed', u'instrument', u',', u'range', u'from', u'guitar', u'to', u'violin', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'NNS', u',', u'NNS', u'IN', u'NN', u'CC', u'VBG', u'JJ', u'NNS', u',', u'VBG', u'IN', u'NNS', u'TO', u'NNS', u'.'], u'char_offsets': [[36300, 36306], [36307, 36310], [36311, 36315], [36316, 36318], [36319, 36327], [36327, 36328], [36329, 36340], [36341, 36343], [36344, 36352], [36353, 36356], [36357, 36366], [36367, 36375], [36376, 36387], [36387, 36388], [36389, 36396], [36397, 36401], [36402, 36409], [36410, 36412], [36413, 36420], [36420, 36421]]}) 
answer: set([u'string', u'bow'])
candidate Sentence: (0.18189047276973724, {u'tokens': [u'The', u'scroll', u'is', u'a', u'traditional', u'part', u'of', u'the', u'cello', u'and', u'all', u'other', u'members', u'of', u'the', u'violin', u'family', u'.'], u'lemmas': [u'the', u'scroll', u'be', u'a', u'traditional', u'part', u'of', u'the', u'cello', u'and', u'all', u'other', u'member', u'of', u'the', u'violin', u'family', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6168, 6171], [6172, 6178], [6179, 6181], [6182, 6183], [6184, 6195], [6196, 6200], [6201, 6203], [6204, 6207], [6208, 6213], [6214, 6217], [6218, 6221], [6222, 6227], [6228, 6235], [6236, 6238], [6239, 6242], [6243, 6249], [6250, 6256], [6256, 6257]]}) 
answer: set([u'instrument', u'string', u'bow'])
candidate Sentence: (0.18175353109836578, {u'tokens': [u'Cello', u'players', u'simply', u'``', u'dip', u"''", u'the', u'bow', u'into', u'the', u'string', u',', u'and', u'touch', u'it', u'very', u'fast', u',', u'and', u'then', u'lift', u'the', u'bow', u'off', u'the', u'string', u'.'], u'lemmas': [u'Cello', u'player', u'simply', u'``', u'dip', u"''", u'the', u'bow', u'into', u'the', u'string', u',', u'and', u'touch', u'it', u'very', u'fast', u',', u'and', u'then', u'lift', u'the', u'bow', u'off', u'the', u'string', u'.'], u'pos': [u'NNP', u'NNS', u'RB', u'``', u'NN', u"''", u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'VB', u'PRP', u'RB', u'RB', u',', u'CC', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[23751, 23756], [23757, 23764], [23765, 23771], [23772, 23773], [23773, 23776], [23776, 23777], [23778, 23781], [23782, 23785], [23786, 23790], [23791, 23794], [23795, 23801], [23801, 23802], [23803, 23806], [23807, 23812], [23813, 23815], [23816, 23820], [23821, 23825], [23825, 23826], [23827, 23830], [23831, 23835], [23836, 23840], [23841, 23844], [23845, 23848], [23849, 23852], [23853, 23856], [23857, 23863], [23863, 23864]]}) 
answer: set([u'violin', u'instrument'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is the violin cello a bowed string instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c248>.answer
_____________________________ test_yesno[param30] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9c290>, (<src.tfidf.TF_IDF object at 0x7f56b98a6e10>, set(['cello'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c290>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.26618221402168274, {u'tokens': [u'A', u'cello', u'strung', u'with', u'gut', u'strings', u'.'], u'lemmas': [u'a', u'cello', u'string', u'with', u'gut', u'string', u'.'], u'pos': [u'DT', u'NN', u'VBN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[13237, 13238], [13239, 13244], [13245, 13251], [13252, 13256], [13257, 13260], [13261, 13268], [13268, 13269]]}) 
answer: set([u'violin', u'bow', u'instrument'])
candidate Sentence: (0.24165225028991699, {u'tokens': [u'On', u'a', u'violin', u',', u'spiccato', u'bowing', u'comes', u'off', u'the', u'string', u',', u'but', u'on', u'a', u'cello', u',', u'the', u'wood', u'of', u'the', u'bow', u'may', u'rise', u'briskly', u'up', u'without', u'the', u'hair', u'actually', u'leaving', u'the', u'string', u'.'], u'lemmas': [u'on', u'a', u'violin', u',', u'spiccato', u'bowing', u'come', u'off', u'the', u'string', u',', u'but', u'on', u'a', u'cello', u',', u'the', u'wood', u'of', u'the', u'bow', u'may', u'rise', u'briskly', u'up', u'without', u'the', u'hair', u'actually', u'leave', u'the', u'string', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NN', u'NN', u'VBZ', u'RP', u'DT', u'NN', u',', u'CC', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'MD', u'VB', u'RB', u'RB', u'IN', u'DT', u'NN', u'RB', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[23528, 23530], [23531, 23532], [23533, 23539], [23539, 23540], [23541, 23549], [23550, 23556], [23557, 23562], [23563, 23566], [23567, 23570], [23571, 23577], [23577, 23578], [23579, 23582], [23583, 23585], [23586, 23587], [23588, 23593], [23593, 23594], [23595, 23598], [23599, 23603], [23604, 23606], [23607, 23610], [23611, 23614], [23615, 23618], [23619, 23623], [23624, 23631], [23632, 23634], [23635, 23642], [23643, 23646], [23647, 23651], [23652, 23660], [23661, 23668], [23669, 23672], [23673, 23679], [23679, 23680]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.20194701850414276, {u'tokens': [u'The', u'three', u'most', u'important', u'ones', u'are', u':', u'bow', u'speed', u',', u'weight', u'applied', u'to', u'the', u'string', u',', u'and', u'point', u'of', u'contact', u'of', u'the', u'bow', u'hair', u'with', u'the', u'string', u'.'], u'lemmas': [u'the', u'three', u'most', u'important', u'one', u'be', u':', u'bow', u'speed', u',', u'weight', u'apply', u'to', u'the', u'string', u',', u'and', u'point', u'of', u'contact', u'of', u'the', u'bow', u'hair', u'with', u'the', u'string', u'.'], u'pos': [u'DT', u'CD', u'RBS', u'JJ', u'NNS', u'VBP', u':', u'VB', u'NN', u',', u'NN', u'VBD', u'TO', u'DT', u'NN', u',', u'CC', u'NN', u'IN', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[21055, 21058], [21059, 21064], [21065, 21069], [21070, 21079], [21080, 21084], [21085, 21088], [21088, 21089], [21090, 21093], [21094, 21099], [21099, 21100], [21101, 21107], [21108, 21115], [21116, 21118], [21119, 21122], [21123, 21129], [21129, 21130], [21131, 21134], [21135, 21140], [21141, 21143], [21144, 21151], [21152, 21154], [21155, 21158], [21159, 21162], [21163, 21167], [21168, 21172], [21173, 21176], [21177, 21183], [21183, 21184]]}) 
answer: set([u'instrument', u'violin'])
candidate Sentence: (0.19993232190608978, {u'tokens': [u'The', u'cello', u'is', u'used', u'as', u'a', u'solo', u'instrument', u',', u'in', u'chamber', u'music', u',', u'and', u'as', u'a', u'member', u'of', u'the', u'string', u'section', u'of', u'an', u'orchestra', u'.'], u'lemmas': [u'the', u'cello', u'be', u'use', u'as', u'a', u'solo', u'instrument', u',', u'in', u'chamber', u'music', u',', u'and', u'as', u'a', u'member', u'of', u'the', u'string', u'section', u'of', u'a', u'orchestra', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'NN', u',', u'IN', u'NN', u'NN', u',', u'CC', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[205, 208], [209, 214], [215, 217], [218, 222], [223, 225], [226, 227], [228, 232], [233, 243], [243, 244], [245, 247], [248, 255], [256, 261], [261, 262], [263, 266], [267, 269], [270, 271], [272, 278], [279, 281], [282, 285], [286, 292], [293, 300], [301, 303], [304, 306], [307, 316], [316, 317]]}) 
answer: set([u'violin', u'bow'])
candidate Sentence: (0.19804796576499939, {u'tokens': [u'In', u'cello', u'playing', u',', u'the', u'bow', u'is', u'much', u'like', u'the', u'breath', u'of', u'a', u'wind', u'instrument', u'player', u'.'], u'lemmas': [u'in', u'cello', u'playing', u',', u'the', u'bow', u'be', u'much', u'like', u'the', u'breath', u'of', u'a', u'wind', u'instrument', u'player', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'NN', u'.'], u'char_offsets': [[18964, 18966], [18967, 18972], [18973, 18980], [18980, 18981], [18982, 18985], [18986, 18989], [18990, 18992], [18993, 18997], [18998, 19002], [19003, 19006], [19007, 19013], [19014, 19016], [19017, 19018], [19019, 19023], [19024, 19034], [19035, 19041], [19041, 19042]]}) 
answer: set([u'violin', u'string'])
candidate Sentence: (0.19415812194347382, {u'tokens': [u'A', u'cello', u'bow', u'is', u'roughly', u'10', u'grams', u'heavier', u'than', u'a', u'viola', u'bow', u',', u'which', u'in', u'turn', u'is', u'roughly', u'10', u'grams', u'heavier', u'than', u'a', u'violin', u'bow', u'.'], u'lemmas': [u'a', u'cello', u'bow', u'be', u'roughly', u'10', u'gram', u'heavier', u'than', u'a', u'viola', u'bow', u',', u'which', u'in', u'turn', u'be', u'roughly', u'10', u'gram', u'heavier', u'than', u'a', u'violin', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'RB', u'CD', u'NNS', u'JJR', u'IN', u'DT', u'NN', u'NN', u',', u'WDT', u'IN', u'NN', u'VBZ', u'RB', u'CD', u'NNS', u'JJR', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[10159, 10160], [10161, 10166], [10167, 10170], [10171, 10173], [10174, 10181], [10182, 10184], [10185, 10190], [10191, 10198], [10199, 10203], [10204, 10205], [10206, 10211], [10212, 10215], [10215, 10216], [10217, 10222], [10223, 10225], [10226, 10230], [10231, 10233], [10234, 10241], [10242, 10244], [10245, 10250], [10251, 10258], [10259, 10263], [10264, 10265], [10266, 10272], [10273, 10276], [10276, 10277]]}) 
answer: set([u'instrument', u'string'])
candidate Sentence: (0.18742477893829346, {u'tokens': [u'The', u'cello', u'developed', u'from', u'the', u'bass', u'violin', u',', u'first', u'referred', u'to', u'by', u'Jambe', u'de', u'Fer', u'in', u'1556', u',', u'which', u'was', u'originally', u'a', u'three-string', u'instrument', u'.'], u'lemmas': [u'the', u'cello', u'develop', u'from', u'the', u'bass', u'violin', u',', u'first', u'refer', u'to', u'by', u'Jambe', u'de', u'Fer', u'in', u'1556', u',', u'which', u'be', u'originally', u'a', u'three-string', u'instrument', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'IN', u'DT', u'NN', u'NN', u',', u'JJ', u'VBN', u'TO', u'IN', u'NNP', u'IN', u'NNP', u'IN', u'CD', u',', u'WDT', u'VBD', u'RB', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[10749, 10752], [10753, 10758], [10759, 10768], [10769, 10773], [10774, 10777], [10778, 10782], [10783, 10789], [10789, 10790], [10791, 10796], [10797, 10805], [10806, 10808], [10809, 10811], [10812, 10817], [10818, 10820], [10821, 10824], [10825, 10827], [10828, 10832], [10832, 10833], [10834, 10839], [10840, 10843], [10844, 10854], [10855, 10856], [10857, 10869], [10870, 10880], [10880, 10881]]}) 
answer: set([u'string', u'bow'])
candidate Sentence: (0.18252983689308167, {u'tokens': [u'Cellos', u'are', u'made', u'by', u'luthiers', u',', u'specialists', u'in', u'building', u'and', u'repairing', u'stringed', u'instruments', u',', u'ranging', u'from', u'guitars', u'to', u'violins', u'.'], u'lemmas': [u'cello', u'be', u'make', u'by', u'luthier', u',', u'specialist', u'in', u'building', u'and', u'repair', u'stringed', u'instrument', u',', u'range', u'from', u'guitar', u'to', u'violin', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'NNS', u',', u'NNS', u'IN', u'NN', u'CC', u'VBG', u'JJ', u'NNS', u',', u'VBG', u'IN', u'NNS', u'TO', u'NNS', u'.'], u'char_offsets': [[36300, 36306], [36307, 36310], [36311, 36315], [36316, 36318], [36319, 36327], [36327, 36328], [36329, 36340], [36341, 36343], [36344, 36352], [36353, 36356], [36357, 36366], [36367, 36375], [36376, 36387], [36387, 36388], [36389, 36396], [36397, 36401], [36402, 36409], [36410, 36412], [36413, 36420], [36420, 36421]]}) 
answer: set([u'string', u'bow'])
candidate Sentence: (0.18189047276973724, {u'tokens': [u'The', u'scroll', u'is', u'a', u'traditional', u'part', u'of', u'the', u'cello', u'and', u'all', u'other', u'members', u'of', u'the', u'violin', u'family', u'.'], u'lemmas': [u'the', u'scroll', u'be', u'a', u'traditional', u'part', u'of', u'the', u'cello', u'and', u'all', u'other', u'member', u'of', u'the', u'violin', u'family', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6168, 6171], [6172, 6178], [6179, 6181], [6182, 6183], [6184, 6195], [6196, 6200], [6201, 6203], [6204, 6207], [6208, 6213], [6214, 6217], [6218, 6221], [6222, 6227], [6228, 6235], [6236, 6238], [6239, 6242], [6243, 6249], [6250, 6256], [6256, 6257]]}) 
answer: set([u'instrument', u'string', u'bow'])
candidate Sentence: (0.18175353109836578, {u'tokens': [u'Cello', u'players', u'simply', u'``', u'dip', u"''", u'the', u'bow', u'into', u'the', u'string', u',', u'and', u'touch', u'it', u'very', u'fast', u',', u'and', u'then', u'lift', u'the', u'bow', u'off', u'the', u'string', u'.'], u'lemmas': [u'Cello', u'player', u'simply', u'``', u'dip', u"''", u'the', u'bow', u'into', u'the', u'string', u',', u'and', u'touch', u'it', u'very', u'fast', u',', u'and', u'then', u'lift', u'the', u'bow', u'off', u'the', u'string', u'.'], u'pos': [u'NNP', u'NNS', u'RB', u'``', u'NN', u"''", u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'VB', u'PRP', u'RB', u'RB', u',', u'CC', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[23751, 23756], [23757, 23764], [23765, 23771], [23772, 23773], [23773, 23776], [23776, 23777], [23778, 23781], [23782, 23785], [23786, 23790], [23791, 23794], [23795, 23801], [23801, 23802], [23803, 23806], [23807, 23812], [23813, 23815], [23816, 23820], [23821, 23825], [23825, 23826], [23827, 23830], [23831, 23835], [23836, 23840], [23841, 23844], [23845, 23848], [23849, 23852], [23853, 23856], [23857, 23863], [23863, 23864]]}) 
answer: set([u'violin', u'instrument'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is the violin cello a bowed string instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c290>.answer
_____________________________ test_yesno[param52] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9c8c0>, (<src.tfidf.TF_IDF object at 0x7f56bb35fd50>, set(['cymbal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c8c0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.25992423295974731, {u'tokens': [u'Cymbals', u'have', u'been', u'utilized', u'historically', u'to', u'suggest', u'frenzy', u',', u'fury', u'or', u'bacchanalian', u'revels', u',', u'as', u'seen', u'in', u'the', u'Venus', u'music', u'in', u'Wagner', u"'s", u'Tannhuser', u',', u'Grieg', u"'s", u'Peer', u'Gynt', u'suite', u',', u'and', u'Osmin', u"'s", u'aria', u'``', u'O', u'wie', u'will', u'ich', u'triumphieren', u"''", u'from', u'Mozart', u"'s", u'Die', u'Entfhrung', u'aus', u'dem', u'Serail', u'.'], u'lemmas': [u'cymbal', u'have', u'be', u'utilize', u'historically', u'to', u'suggest', u'frenzy', u',', u'fury', u'or', u'bacchanalian', u'revel', u',', u'as', u'see', u'in', u'the', u'Venus', u'music', u'in', u'Wagner', u"'s", u'Tannhuser', u',', u'Grieg', u"'s", u'Peer', u'Gynt', u'suite', u',', u'and', u'Osmin', u"'s", u'aria', u'``', u'o', u'wie', u'will', u'ich', u'triumphieren', u"''", u'from', u'Mozart', u"'s", u'die', u'Entfhrung', u'aus', u'dem', u'serail', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'VBN', u'RB', u'TO', u'VB', u'NN', u',', u'NN', u'CC', u'JJ', u'NNS', u',', u'IN', u'VBN', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'POS', u'NNP', u',', u'NNP', u'POS', u'NNP', u'NNP', u'NN', u',', u'CC', u'NNP', u'POS', u'NN', u'``', u'NN', u'NN', u'MD', u'VB', u'NN', u"''", u'IN', u'NNP', u'POS', u'VBP', u'NNP', u'NN', u'DT', u'NN', u'.'], u'char_offsets': [[2115, 2122], [2123, 2127], [2128, 2132], [2133, 2141], [2142, 2154], [2155, 2157], [2158, 2165], [2166, 2172], [2172, 2173], [2174, 2178], [2179, 2181], [2182, 2194], [2195, 2201], [2201, 2202], [2203, 2205], [2206, 2210], [2211, 2213], [2214, 2217], [2218, 2223], [2224, 2229], [2230, 2232], [2233, 2239], [2239, 2241], [2242, 2251], [2251, 2252], [2253, 2258], [2258, 2260], [2261, 2265], [2266, 2270], [2271, 2276], [2276, 2277], [2278, 2281], [2282, 2287], [2287, 2289], [2290, 2294], [2295, 2296], [2296, 2297], [2298, 2301], [2302, 2306], [2307, 2310], [2311, 2323], [2323, 2324], [2325, 2329], [2330, 2336], [2336, 2338], [2339, 2342], [2343, 2352], [2353, 2356], [2357, 2360], [2361, 2367], [2367, 2368]]}) 
answer: set([u'use', u'bacchanal'])
candidate Sentence: (0.15538874268531799, {u'tokens': [u'Orchestral', u'crash', u'cymbals', u'are', u'traditionally', u'used', u'in', u'pairs', u',', u'each', u'one', u'having', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'are', u'held', u'.'], u'lemmas': [u'orchestral', u'crash', u'cymbal', u'be', u'traditionally', u'use', u'in', u'pair', u',', u'each', u'one', u'have', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'be', u'hold', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u',', u'DT', u'CD', u'VBG', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'WDT', u'PRP', u'VBP', u'VBN', u'.'], u'char_offsets': [[2453, 2463], [2464, 2469], [2470, 2477], [2478, 2481], [2482, 2495], [2496, 2500], [2501, 2503], [2504, 2509], [2509, 2510], [2511, 2515], [2516, 2519], [2520, 2526], [2527, 2528], [2529, 2534], [2535, 2538], [2539, 2541], [2542, 2545], [2546, 2550], [2551, 2553], [2554, 2557], [2558, 2564], [2565, 2567], [2568, 2573], [2574, 2578], [2579, 2582], [2583, 2587], [2587, 2588]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.14115402102470398, {u'tokens': [u'However', u',', u'the', u'modern', u'convention', u'is', u'for', u'the', u'instruments', u'to', u'have', u'independent', u'parts', u'.'], u'lemmas': [u'however', u',', u'the', u'modern', u'convention', u'be', u'for', u'the', u'instrument', u'to', u'have', u'independent', u'part', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'DT', u'NNS', u'TO', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[4415, 4422], [4422, 4423], [4424, 4427], [4428, 4434], [4435, 4445], [4446, 4448], [4449, 4452], [4453, 4456], [4457, 4468], [4469, 4471], [4472, 4476], [4477, 4488], [4489, 4494], [4494, 4495]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.1070699468255043, {u'tokens': [u'Clash', u'cymbals', u'have', u'traditionally', u'been', u'accompanied', u'by', u'the', u'bass', u'drum', u'playing', u'an', u'identical', u'part', u'.'], u'lemmas': [u'clash', u'cymbal', u'have', u'traditionally', u'be', u'accompany', u'by', u'the', u'bass', u'drum', u'play', u'a', u'identical', u'part', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'VBN', u'IN', u'DT', u'NN', u'VB', u'VBG', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[3895, 3900], [3901, 3908], [3909, 3913], [3914, 3927], [3928, 3932], [3933, 3944], [3945, 3947], [3948, 3951], [3952, 3956], [3957, 3961], [3962, 3969], [3970, 3972], [3973, 3982], [3983, 3987], [3987, 3988]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.096795104444026947, {u'tokens': [u'The', u'second', u'main', u'orchestral', u'use', u'of', u'cymbals', u'is', u'the', u'suspended', u'cymbal', u'.'], u'lemmas': [u'the', u'second', u'main', u'orchestral', u'use', u'of', u'cymbal', u'be', u'the', u'suspend', u'cymbal', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[4887, 4890], [4891, 4897], [4898, 4902], [4903, 4913], [4914, 4917], [4918, 4920], [4921, 4928], [4929, 4931], [4932, 4935], [4936, 4945], [4946, 4952], [4952, 4953]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.067447774112224579, {u'tokens': [u'Cymbals', u'are', u'used', u'in', u'modern', u'orchestras', u'and', u'many', u'military', u',', u'marching', u',', u'concert', u'and', u'other', u'bands', u'.'], u'lemmas': [u'cymbal', u'be', u'use', u'in', u'modern', u'orchestra', u'and', u'many', u'military', u',', u'march', u',', u'concert', u'and', u'other', u'band', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u',', u'VBG', u',', u'NN', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[367, 374], [375, 378], [379, 383], [384, 386], [387, 393], [394, 404], [405, 408], [409, 413], [414, 422], [422, 423], [424, 432], [432, 433], [434, 441], [442, 445], [446, 451], [452, 457], [457, 458]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.064596794545650482, {u'tokens': [u'Such', u'a', u'pair', u'is', u'known', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbals', u',', u'although', u'this', u'term', u'is', u'rarely', u'used', u',', u'see', u'clash', u'cymbals', u'.'], u'lemmas': [u'such', u'a', u'pair', u'be', u'know', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbal', u',', u'although', u'this', u'term', u'be', u'rarely', u'use', u',', u'see', u'clash', u'cymbal', u'.'], u'pos': [u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u',', u'VB', u'NN', u'NNS', u'.'], u'char_offsets': [[2589, 2593], [2594, 2595], [2596, 2600], [2601, 2603], [2604, 2609], [2610, 2621], [2622, 2624], [2625, 2626], [2627, 2631], [2632, 2634], [2635, 2640], [2641, 2648], [2648, 2649], [2650, 2658], [2659, 2663], [2664, 2668], [2669, 2671], [2672, 2678], [2679, 2683], [2683, 2684], [2685, 2688], [2689, 2694], [2695, 2702], [2702, 2703]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.06307230144739151, {u'tokens': [u'Most', u'modern', u'cymbals', u'are', u'of', u'indefinite', u'pitch', u'-LRB-', u'tuned', u'sets', u'have', u'been', u'manufactured', u'but', u'are', u'rare', u'-RRB-', u',', u'whereas', u'small', u'cup-shaped', u'cymbals', u'based', u'on', u'ancient', u'designs', u'sound', u'a', u'definite', u'note', u'-LRB-', u"''", u'see', u':', u'crotales', u'-RRB-', u'.'], u'lemmas': [u'most', u'modern', u'cymbal', u'be', u'of', u'indefinite', u'pitch', u'-lrb-', u'tune', u'set', u'have', u'be', u'manufacture', u'but', u'be', u'rare', u'-rrb-', u',', u'whereas', u'small', u'cup-shaped', u'cymbal', u'base', u'on', u'ancient', u'design', u'sound', u'a', u'definite', u'note', u'-lrb-', u"''", u'see', u':', u'crotale', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'IN', u'JJ', u'NN', u'-LRB-', u'VBN', u'NNS', u'VBP', u'VBN', u'VBN', u'CC', u'VBP', u'JJ', u'-RRB-', u',', u'IN', u'JJ', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'-LRB-', u"''", u'VB', u':', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[174, 178], [179, 185], [186, 193], [194, 197], [198, 200], [201, 211], [212, 217], [218, 219], [219, 224], [225, 229], [230, 234], [235, 239], [240, 252], [253, 256], [257, 260], [261, 265], [265, 266], [266, 267], [268, 275], [276, 281], [282, 292], [293, 300], [301, 306], [307, 309], [310, 317], [318, 325], [326, 331], [332, 333], [334, 342], [343, 347], [348, 349], [349, 351], [351, 354], [354, 355], [356, 364], [364, 365], [365, 366]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.055634360760450363, {u'tokens': [u'On', u'another', u'note', u',', u'in', u'highschool', u'marching', u'bands', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspended', u'cymbal', u'for', u'a', u'song', u'.'], u'lemmas': [u'on', u'another', u'note', u',', u'in', u'highschool', u'march', u'band', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspend', u'cymbal', u'for', u'a', u'song', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'VBG', u'NNS', u',', u'DT', u'``', u'NN', u"''", u'MD', u'VB', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[6482, 6484], [6485, 6492], [6493, 6497], [6497, 6498], [6499, 6501], [6502, 6512], [6513, 6521], [6522, 6527], [6527, 6528], [6529, 6530], [6531, 6532], [6532, 6535], [6535, 6536], [6537, 6540], [6541, 6544], [6545, 6546], [6547, 6556], [6557, 6563], [6564, 6567], [6568, 6569], [6570, 6574], [6574, 6575]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.047113906592130661, {u'tokens': [u'Other', u'effects', u'that', u'can', u'be', u'used', u'include', u'drawing', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squealing', u'car', u'brakes', u'.'], u'lemmas': [u'other', u'effect', u'that', u'can', u'be', u'use', u'include', u'draw', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squeal', u'car', u'brake', u'.'], u'pos': [u'JJ', u'NNS', u'WDT', u'MD', u'VB', u'VBN', u'VBP', u'VBG', u'DT', u'NN', u'CC', u'NN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'RB', u'IN', u'VBG', u'NN', u'NNS', u'.'], u'char_offsets': [[6340, 6345], [6346, 6353], [6354, 6358], [6359, 6362], [6363, 6365], [6366, 6370], [6371, 6378], [6379, 6386], [6387, 6388], [6389, 6394], [6395, 6397], [6398, 6402], [6403, 6406], [6407, 6413], [6414, 6417], [6418, 6422], [6423, 6425], [6426, 6429], [6430, 6436], [6437, 6440], [6441, 6442], [6443, 6448], [6449, 6452], [6453, 6459], [6460, 6469], [6470, 6473], [6474, 6480], [6480, 6481]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Have cymbals been used historically to suggest bacchanal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c8c0>.answer
_____________________________ test_yesno[param53] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9c908>, (<src.tfidf.TF_IDF object at 0x7f56bb35fd50>, set(['cymbal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c908>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.25992423295974731, {u'tokens': [u'Cymbals', u'have', u'been', u'utilized', u'historically', u'to', u'suggest', u'frenzy', u',', u'fury', u'or', u'bacchanalian', u'revels', u',', u'as', u'seen', u'in', u'the', u'Venus', u'music', u'in', u'Wagner', u"'s", u'Tannhuser', u',', u'Grieg', u"'s", u'Peer', u'Gynt', u'suite', u',', u'and', u'Osmin', u"'s", u'aria', u'``', u'O', u'wie', u'will', u'ich', u'triumphieren', u"''", u'from', u'Mozart', u"'s", u'Die', u'Entfhrung', u'aus', u'dem', u'Serail', u'.'], u'lemmas': [u'cymbal', u'have', u'be', u'utilize', u'historically', u'to', u'suggest', u'frenzy', u',', u'fury', u'or', u'bacchanalian', u'revel', u',', u'as', u'see', u'in', u'the', u'Venus', u'music', u'in', u'Wagner', u"'s", u'Tannhuser', u',', u'Grieg', u"'s", u'Peer', u'Gynt', u'suite', u',', u'and', u'Osmin', u"'s", u'aria', u'``', u'o', u'wie', u'will', u'ich', u'triumphieren', u"''", u'from', u'Mozart', u"'s", u'die', u'Entfhrung', u'aus', u'dem', u'serail', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'VBN', u'RB', u'TO', u'VB', u'NN', u',', u'NN', u'CC', u'JJ', u'NNS', u',', u'IN', u'VBN', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'POS', u'NNP', u',', u'NNP', u'POS', u'NNP', u'NNP', u'NN', u',', u'CC', u'NNP', u'POS', u'NN', u'``', u'NN', u'NN', u'MD', u'VB', u'NN', u"''", u'IN', u'NNP', u'POS', u'VBP', u'NNP', u'NN', u'DT', u'NN', u'.'], u'char_offsets': [[2115, 2122], [2123, 2127], [2128, 2132], [2133, 2141], [2142, 2154], [2155, 2157], [2158, 2165], [2166, 2172], [2172, 2173], [2174, 2178], [2179, 2181], [2182, 2194], [2195, 2201], [2201, 2202], [2203, 2205], [2206, 2210], [2211, 2213], [2214, 2217], [2218, 2223], [2224, 2229], [2230, 2232], [2233, 2239], [2239, 2241], [2242, 2251], [2251, 2252], [2253, 2258], [2258, 2260], [2261, 2265], [2266, 2270], [2271, 2276], [2276, 2277], [2278, 2281], [2282, 2287], [2287, 2289], [2290, 2294], [2295, 2296], [2296, 2297], [2298, 2301], [2302, 2306], [2307, 2310], [2311, 2323], [2323, 2324], [2325, 2329], [2330, 2336], [2336, 2338], [2339, 2342], [2343, 2352], [2353, 2356], [2357, 2360], [2361, 2367], [2367, 2368]]}) 
answer: set([u'use', u'bacchanal'])
candidate Sentence: (0.15538874268531799, {u'tokens': [u'Orchestral', u'crash', u'cymbals', u'are', u'traditionally', u'used', u'in', u'pairs', u',', u'each', u'one', u'having', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'are', u'held', u'.'], u'lemmas': [u'orchestral', u'crash', u'cymbal', u'be', u'traditionally', u'use', u'in', u'pair', u',', u'each', u'one', u'have', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'be', u'hold', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u',', u'DT', u'CD', u'VBG', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'WDT', u'PRP', u'VBP', u'VBN', u'.'], u'char_offsets': [[2453, 2463], [2464, 2469], [2470, 2477], [2478, 2481], [2482, 2495], [2496, 2500], [2501, 2503], [2504, 2509], [2509, 2510], [2511, 2515], [2516, 2519], [2520, 2526], [2527, 2528], [2529, 2534], [2535, 2538], [2539, 2541], [2542, 2545], [2546, 2550], [2551, 2553], [2554, 2557], [2558, 2564], [2565, 2567], [2568, 2573], [2574, 2578], [2579, 2582], [2583, 2587], [2587, 2588]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.14115402102470398, {u'tokens': [u'However', u',', u'the', u'modern', u'convention', u'is', u'for', u'the', u'instruments', u'to', u'have', u'independent', u'parts', u'.'], u'lemmas': [u'however', u',', u'the', u'modern', u'convention', u'be', u'for', u'the', u'instrument', u'to', u'have', u'independent', u'part', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'DT', u'NNS', u'TO', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[4415, 4422], [4422, 4423], [4424, 4427], [4428, 4434], [4435, 4445], [4446, 4448], [4449, 4452], [4453, 4456], [4457, 4468], [4469, 4471], [4472, 4476], [4477, 4488], [4489, 4494], [4494, 4495]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.1070699468255043, {u'tokens': [u'Clash', u'cymbals', u'have', u'traditionally', u'been', u'accompanied', u'by', u'the', u'bass', u'drum', u'playing', u'an', u'identical', u'part', u'.'], u'lemmas': [u'clash', u'cymbal', u'have', u'traditionally', u'be', u'accompany', u'by', u'the', u'bass', u'drum', u'play', u'a', u'identical', u'part', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'VBN', u'IN', u'DT', u'NN', u'VB', u'VBG', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[3895, 3900], [3901, 3908], [3909, 3913], [3914, 3927], [3928, 3932], [3933, 3944], [3945, 3947], [3948, 3951], [3952, 3956], [3957, 3961], [3962, 3969], [3970, 3972], [3973, 3982], [3983, 3987], [3987, 3988]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.096795104444026947, {u'tokens': [u'The', u'second', u'main', u'orchestral', u'use', u'of', u'cymbals', u'is', u'the', u'suspended', u'cymbal', u'.'], u'lemmas': [u'the', u'second', u'main', u'orchestral', u'use', u'of', u'cymbal', u'be', u'the', u'suspend', u'cymbal', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[4887, 4890], [4891, 4897], [4898, 4902], [4903, 4913], [4914, 4917], [4918, 4920], [4921, 4928], [4929, 4931], [4932, 4935], [4936, 4945], [4946, 4952], [4952, 4953]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.067447774112224579, {u'tokens': [u'Cymbals', u'are', u'used', u'in', u'modern', u'orchestras', u'and', u'many', u'military', u',', u'marching', u',', u'concert', u'and', u'other', u'bands', u'.'], u'lemmas': [u'cymbal', u'be', u'use', u'in', u'modern', u'orchestra', u'and', u'many', u'military', u',', u'march', u',', u'concert', u'and', u'other', u'band', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u',', u'VBG', u',', u'NN', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[367, 374], [375, 378], [379, 383], [384, 386], [387, 393], [394, 404], [405, 408], [409, 413], [414, 422], [422, 423], [424, 432], [432, 433], [434, 441], [442, 445], [446, 451], [452, 457], [457, 458]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.064596794545650482, {u'tokens': [u'Such', u'a', u'pair', u'is', u'known', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbals', u',', u'although', u'this', u'term', u'is', u'rarely', u'used', u',', u'see', u'clash', u'cymbals', u'.'], u'lemmas': [u'such', u'a', u'pair', u'be', u'know', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbal', u',', u'although', u'this', u'term', u'be', u'rarely', u'use', u',', u'see', u'clash', u'cymbal', u'.'], u'pos': [u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u',', u'VB', u'NN', u'NNS', u'.'], u'char_offsets': [[2589, 2593], [2594, 2595], [2596, 2600], [2601, 2603], [2604, 2609], [2610, 2621], [2622, 2624], [2625, 2626], [2627, 2631], [2632, 2634], [2635, 2640], [2641, 2648], [2648, 2649], [2650, 2658], [2659, 2663], [2664, 2668], [2669, 2671], [2672, 2678], [2679, 2683], [2683, 2684], [2685, 2688], [2689, 2694], [2695, 2702], [2702, 2703]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.06307230144739151, {u'tokens': [u'Most', u'modern', u'cymbals', u'are', u'of', u'indefinite', u'pitch', u'-LRB-', u'tuned', u'sets', u'have', u'been', u'manufactured', u'but', u'are', u'rare', u'-RRB-', u',', u'whereas', u'small', u'cup-shaped', u'cymbals', u'based', u'on', u'ancient', u'designs', u'sound', u'a', u'definite', u'note', u'-LRB-', u"''", u'see', u':', u'crotales', u'-RRB-', u'.'], u'lemmas': [u'most', u'modern', u'cymbal', u'be', u'of', u'indefinite', u'pitch', u'-lrb-', u'tune', u'set', u'have', u'be', u'manufacture', u'but', u'be', u'rare', u'-rrb-', u',', u'whereas', u'small', u'cup-shaped', u'cymbal', u'base', u'on', u'ancient', u'design', u'sound', u'a', u'definite', u'note', u'-lrb-', u"''", u'see', u':', u'crotale', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'IN', u'JJ', u'NN', u'-LRB-', u'VBN', u'NNS', u'VBP', u'VBN', u'VBN', u'CC', u'VBP', u'JJ', u'-RRB-', u',', u'IN', u'JJ', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'-LRB-', u"''", u'VB', u':', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[174, 178], [179, 185], [186, 193], [194, 197], [198, 200], [201, 211], [212, 217], [218, 219], [219, 224], [225, 229], [230, 234], [235, 239], [240, 252], [253, 256], [257, 260], [261, 265], [265, 266], [266, 267], [268, 275], [276, 281], [282, 292], [293, 300], [301, 306], [307, 309], [310, 317], [318, 325], [326, 331], [332, 333], [334, 342], [343, 347], [348, 349], [349, 351], [351, 354], [354, 355], [356, 364], [364, 365], [365, 366]]}) 
answer: set([u'suggest', u'use', u'bacchanal', u'historically'])
candidate Sentence: (0.055634360760450363, {u'tokens': [u'On', u'another', u'note', u',', u'in', u'highschool', u'marching', u'bands', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspended', u'cymbal', u'for', u'a', u'song', u'.'], u'lemmas': [u'on', u'another', u'note', u',', u'in', u'highschool', u'march', u'band', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspend', u'cymbal', u'for', u'a', u'song', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'VBG', u'NNS', u',', u'DT', u'``', u'NN', u"''", u'MD', u'VB', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[6482, 6484], [6485, 6492], [6493, 6497], [6497, 6498], [6499, 6501], [6502, 6512], [6513, 6521], [6522, 6527], [6527, 6528], [6529, 6530], [6531, 6532], [6532, 6535], [6535, 6536], [6537, 6540], [6541, 6544], [6545, 6546], [6547, 6556], [6557, 6563], [6564, 6567], [6568, 6569], [6570, 6574], [6574, 6575]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
candidate Sentence: (0.047113906592130661, {u'tokens': [u'Other', u'effects', u'that', u'can', u'be', u'used', u'include', u'drawing', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squealing', u'car', u'brakes', u'.'], u'lemmas': [u'other', u'effect', u'that', u'can', u'be', u'use', u'include', u'draw', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squeal', u'car', u'brake', u'.'], u'pos': [u'JJ', u'NNS', u'WDT', u'MD', u'VB', u'VBN', u'VBP', u'VBG', u'DT', u'NN', u'CC', u'NN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'RB', u'IN', u'VBG', u'NN', u'NNS', u'.'], u'char_offsets': [[6340, 6345], [6346, 6353], [6354, 6358], [6359, 6362], [6363, 6365], [6366, 6370], [6371, 6378], [6379, 6386], [6387, 6388], [6389, 6394], [6395, 6397], [6398, 6402], [6403, 6406], [6407, 6413], [6414, 6417], [6418, 6422], [6423, 6425], [6426, 6429], [6430, 6436], [6437, 6440], [6441, 6442], [6443, 6448], [6449, 6452], [6453, 6459], [6460, 6469], [6470, 6473], [6474, 6480], [6480, 6481]]}) 
answer: set([u'suggest', u'bacchanal', u'historically'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Have cymbals been used historically to suggest bacchanal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c908>.answer
_____________________________ test_yesno[param56] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9c9e0>, (<src.tfidf.TF_IDF object at 0x7f56bb35fd50>, set(['cymbal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c9e0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39049458503723145, {u'tokens': [u'Cymbals', u'are', u'used', u'in', u'modern', u'orchestras', u'and', u'many', u'military', u',', u'marching', u',', u'concert', u'and', u'other', u'bands', u'.'], u'lemmas': [u'cymbal', u'be', u'use', u'in', u'modern', u'orchestra', u'and', u'many', u'military', u',', u'march', u',', u'concert', u'and', u'other', u'band', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u',', u'VBG', u',', u'NN', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[367, 374], [375, 378], [379, 383], [384, 386], [387, 393], [394, 404], [405, 408], [409, 413], [414, 422], [422, 423], [424, 432], [432, 433], [434, 441], [442, 445], [446, 451], [452, 457], [457, 458]]}) 
answer: set([u'moden'])
candidate Sentence: (0.23416739702224731, {u'tokens': [u'Although', u'cymbals', u'are', u'not', u'often', u'required', u'they', u'form', u'part', u'of', u'every', u'orchestra', u';', u'their', u'chief', u'use', u'is', u'for', u'marking', u'the', u'rhythm', u',', u'producing', u'effects', u',', u'or', u'adding', u'military', u'color', u'.'], u'lemmas': [u'although', u'cymbal', u'be', u'not', u'often', u'require', u'they', u'form', u'part', u'of', u'every', u'orchestra', u';', u'they', u'chief', u'use', u'be', u'for', u'mark', u'the', u'rhythm', u',', u'produce', u'effect', u',', u'or', u'add', u'military', u'color', u'.'], u'pos': [u'IN', u'NNS', u'VBP', u'RB', u'RB', u'VBN', u'PRP', u'VBP', u'NN', u'IN', u'DT', u'NN', u':', u'PRP$', u'JJ', u'NN', u'VBZ', u'IN', u'VBG', u'DT', u'NN', u',', u'VBG', u'NNS', u',', u'CC', u'VBG', u'JJ', u'NN', u'.'], u'char_offsets': [[1835, 1843], [1844, 1851], [1852, 1855], [1856, 1859], [1860, 1865], [1866, 1874], [1875, 1879], [1880, 1884], [1885, 1889], [1890, 1892], [1893, 1898], [1899, 1908], [1908, 1909], [1910, 1915], [1916, 1921], [1922, 1925], [1926, 1928], [1929, 1932], [1933, 1940], [1941, 1944], [1945, 1951], [1951, 1952], [1953, 1962], [1963, 1970], [1970, 1971], [1972, 1974], [1975, 1981], [1982, 1990], [1991, 1996], [1996, 1997]]}) 
answer: set([u'moden'])
candidate Sentence: (0.18623010814189911, {u'tokens': [u'Orchestral', u'crash', u'cymbals', u'are', u'traditionally', u'used', u'in', u'pairs', u',', u'each', u'one', u'having', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'are', u'held', u'.'], u'lemmas': [u'orchestral', u'crash', u'cymbal', u'be', u'traditionally', u'use', u'in', u'pair', u',', u'each', u'one', u'have', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'be', u'hold', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u',', u'DT', u'CD', u'VBG', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'WDT', u'PRP', u'VBP', u'VBN', u'.'], u'char_offsets': [[2453, 2463], [2464, 2469], [2470, 2477], [2478, 2481], [2482, 2495], [2496, 2500], [2501, 2503], [2504, 2509], [2509, 2510], [2511, 2515], [2516, 2519], [2520, 2526], [2527, 2528], [2529, 2534], [2535, 2538], [2539, 2541], [2542, 2545], [2546, 2550], [2551, 2553], [2554, 2557], [2558, 2564], [2565, 2567], [2568, 2573], [2574, 2578], [2579, 2582], [2583, 2587], [2587, 2588]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.18443451821804047, {u'tokens': [u'Their', u'unique', u'timbre', u'allows', u'them', u'to', u'project', u'even', u'against', u'a', u'full', u'orchestra', u'and', u'through', u'the', u'heaviest', u'of', u'orhestrations', u'.'], u'lemmas': [u'they', u'unique', u'timbre', u'allow', u'they', u'to', u'project', u'even', u'against', u'a', u'full', u'orchestra', u'and', u'through', u'the', u'heaviest', u'of', u'orhestration', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u'VBZ', u'PRP', u'TO', u'VB', u'RB', u'IN', u'DT', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJS', u'IN', u'NNS', u'.'], u'char_offsets': [[1999, 2004], [2005, 2011], [2012, 2018], [2019, 2025], [2026, 2030], [2031, 2033], [2034, 2041], [2042, 2046], [2047, 2054], [2055, 2056], [2057, 2061], [2062, 2071], [2072, 2075], [2076, 2083], [2084, 2087], [2088, 2096], [2097, 2099], [2100, 2113], [2113, 2114]]}) 
answer: set([u'moden', u'use'])
candidate Sentence: (0.1696142852306366, {u'tokens': [u'The', u'second', u'main', u'orchestral', u'use', u'of', u'cymbals', u'is', u'the', u'suspended', u'cymbal', u'.'], u'lemmas': [u'the', u'second', u'main', u'orchestral', u'use', u'of', u'cymbal', u'be', u'the', u'suspend', u'cymbal', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[4887, 4890], [4891, 4897], [4898, 4902], [4903, 4913], [4914, 4917], [4918, 4920], [4921, 4928], [4929, 4931], [4932, 4935], [4936, 4945], [4946, 4952], [4952, 4953]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.12830027937889099, {u'tokens': [u'On', u'another', u'note', u',', u'in', u'highschool', u'marching', u'bands', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspended', u'cymbal', u'for', u'a', u'song', u'.'], u'lemmas': [u'on', u'another', u'note', u',', u'in', u'highschool', u'march', u'band', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspend', u'cymbal', u'for', u'a', u'song', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'VBG', u'NNS', u',', u'DT', u'``', u'NN', u"''", u'MD', u'VB', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[6482, 6484], [6485, 6492], [6493, 6497], [6497, 6498], [6499, 6501], [6502, 6512], [6513, 6521], [6522, 6527], [6527, 6528], [6529, 6530], [6531, 6532], [6532, 6535], [6535, 6536], [6537, 6540], [6541, 6544], [6545, 6546], [6547, 6556], [6557, 6563], [6564, 6567], [6568, 6569], [6570, 6574], [6574, 6575]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.11319312453269958, {u'tokens': [u'Such', u'a', u'pair', u'is', u'known', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbals', u',', u'although', u'this', u'term', u'is', u'rarely', u'used', u',', u'see', u'clash', u'cymbals', u'.'], u'lemmas': [u'such', u'a', u'pair', u'be', u'know', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbal', u',', u'although', u'this', u'term', u'be', u'rarely', u'use', u',', u'see', u'clash', u'cymbal', u'.'], u'pos': [u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u',', u'VB', u'NN', u'NNS', u'.'], u'char_offsets': [[2589, 2593], [2594, 2595], [2596, 2600], [2601, 2603], [2604, 2609], [2610, 2621], [2622, 2624], [2625, 2626], [2627, 2631], [2632, 2634], [2635, 2640], [2641, 2648], [2648, 2649], [2650, 2658], [2659, 2663], [2664, 2668], [2669, 2671], [2672, 2678], [2679, 2683], [2683, 2684], [2685, 2688], [2689, 2694], [2695, 2702], [2702, 2703]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.10555703938007355, {u'tokens': [u'The', u'bell', u'is', u'in', u'green', u'and', u'the', u'straps', u'are', u'in', u'red', u'.'], u'lemmas': [u'the', u'bell', u'be', u'in', u'green', u'and', u'the', u'strap', u'be', u'in', u'red', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'JJ', u'CC', u'DT', u'NNS', u'VBP', u'IN', u'JJ', u'.'], u'char_offsets': [[2405, 2408], [2409, 2413], [2414, 2416], [2417, 2419], [2420, 2425], [2426, 2429], [2430, 2433], [2434, 2440], [2441, 2444], [2445, 2447], [2448, 2451], [2451, 2452]]}) 
answer: set([u'moden', u'use', u'orchestra'])
candidate Sentence: (0.082557812333106995, {u'tokens': [u'Other', u'effects', u'that', u'can', u'be', u'used', u'include', u'drawing', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squealing', u'car', u'brakes', u'.'], u'lemmas': [u'other', u'effect', u'that', u'can', u'be', u'use', u'include', u'draw', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squeal', u'car', u'brake', u'.'], u'pos': [u'JJ', u'NNS', u'WDT', u'MD', u'VB', u'VBN', u'VBP', u'VBG', u'DT', u'NN', u'CC', u'NN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'RB', u'IN', u'VBG', u'NN', u'NNS', u'.'], u'char_offsets': [[6340, 6345], [6346, 6353], [6354, 6358], [6359, 6362], [6363, 6365], [6366, 6370], [6371, 6378], [6379, 6386], [6387, 6388], [6389, 6394], [6395, 6397], [6398, 6402], [6403, 6406], [6407, 6413], [6414, 6417], [6418, 6422], [6423, 6425], [6426, 6429], [6430, 6436], [6437, 6440], [6441, 6442], [6443, 6448], [6449, 6452], [6453, 6459], [6460, 6469], [6470, 6473], [6474, 6480], [6480, 6481]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.074954621493816376, {u'tokens': [u'A', u'pair', u'of', u'clash', u'cymbals', u'in', u'profile', u'.'], u'lemmas': [u'a', u'pair', u'of', u'clash', u'cymbal', u'in', u'profile', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[2369, 2370], [2371, 2375], [2376, 2378], [2379, 2384], [2385, 2392], [2393, 2395], [2396, 2403], [2403, 2404]]}) 
answer: set([u'moden', u'use', u'orchestra'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are cymbals used in moden orchestras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9c9e0>.answer
_____________________________ test_yesno[param57] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9ca28>, (<src.tfidf.TF_IDF object at 0x7f56bb35fd50>, set(['cymbal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9ca28>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39049458503723145, {u'tokens': [u'Cymbals', u'are', u'used', u'in', u'modern', u'orchestras', u'and', u'many', u'military', u',', u'marching', u',', u'concert', u'and', u'other', u'bands', u'.'], u'lemmas': [u'cymbal', u'be', u'use', u'in', u'modern', u'orchestra', u'and', u'many', u'military', u',', u'march', u',', u'concert', u'and', u'other', u'band', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u',', u'VBG', u',', u'NN', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[367, 374], [375, 378], [379, 383], [384, 386], [387, 393], [394, 404], [405, 408], [409, 413], [414, 422], [422, 423], [424, 432], [432, 433], [434, 441], [442, 445], [446, 451], [452, 457], [457, 458]]}) 
answer: set([u'moden'])
candidate Sentence: (0.23416739702224731, {u'tokens': [u'Although', u'cymbals', u'are', u'not', u'often', u'required', u'they', u'form', u'part', u'of', u'every', u'orchestra', u';', u'their', u'chief', u'use', u'is', u'for', u'marking', u'the', u'rhythm', u',', u'producing', u'effects', u',', u'or', u'adding', u'military', u'color', u'.'], u'lemmas': [u'although', u'cymbal', u'be', u'not', u'often', u'require', u'they', u'form', u'part', u'of', u'every', u'orchestra', u';', u'they', u'chief', u'use', u'be', u'for', u'mark', u'the', u'rhythm', u',', u'produce', u'effect', u',', u'or', u'add', u'military', u'color', u'.'], u'pos': [u'IN', u'NNS', u'VBP', u'RB', u'RB', u'VBN', u'PRP', u'VBP', u'NN', u'IN', u'DT', u'NN', u':', u'PRP$', u'JJ', u'NN', u'VBZ', u'IN', u'VBG', u'DT', u'NN', u',', u'VBG', u'NNS', u',', u'CC', u'VBG', u'JJ', u'NN', u'.'], u'char_offsets': [[1835, 1843], [1844, 1851], [1852, 1855], [1856, 1859], [1860, 1865], [1866, 1874], [1875, 1879], [1880, 1884], [1885, 1889], [1890, 1892], [1893, 1898], [1899, 1908], [1908, 1909], [1910, 1915], [1916, 1921], [1922, 1925], [1926, 1928], [1929, 1932], [1933, 1940], [1941, 1944], [1945, 1951], [1951, 1952], [1953, 1962], [1963, 1970], [1970, 1971], [1972, 1974], [1975, 1981], [1982, 1990], [1991, 1996], [1996, 1997]]}) 
answer: set([u'moden'])
candidate Sentence: (0.18623010814189911, {u'tokens': [u'Orchestral', u'crash', u'cymbals', u'are', u'traditionally', u'used', u'in', u'pairs', u',', u'each', u'one', u'having', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'are', u'held', u'.'], u'lemmas': [u'orchestral', u'crash', u'cymbal', u'be', u'traditionally', u'use', u'in', u'pair', u',', u'each', u'one', u'have', u'a', u'strap', u'set', u'in', u'the', u'bell', u'of', u'the', u'cymbal', u'by', u'which', u'they', u'be', u'hold', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u',', u'DT', u'CD', u'VBG', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'WDT', u'PRP', u'VBP', u'VBN', u'.'], u'char_offsets': [[2453, 2463], [2464, 2469], [2470, 2477], [2478, 2481], [2482, 2495], [2496, 2500], [2501, 2503], [2504, 2509], [2509, 2510], [2511, 2515], [2516, 2519], [2520, 2526], [2527, 2528], [2529, 2534], [2535, 2538], [2539, 2541], [2542, 2545], [2546, 2550], [2551, 2553], [2554, 2557], [2558, 2564], [2565, 2567], [2568, 2573], [2574, 2578], [2579, 2582], [2583, 2587], [2587, 2588]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.18443451821804047, {u'tokens': [u'Their', u'unique', u'timbre', u'allows', u'them', u'to', u'project', u'even', u'against', u'a', u'full', u'orchestra', u'and', u'through', u'the', u'heaviest', u'of', u'orhestrations', u'.'], u'lemmas': [u'they', u'unique', u'timbre', u'allow', u'they', u'to', u'project', u'even', u'against', u'a', u'full', u'orchestra', u'and', u'through', u'the', u'heaviest', u'of', u'orhestration', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u'VBZ', u'PRP', u'TO', u'VB', u'RB', u'IN', u'DT', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJS', u'IN', u'NNS', u'.'], u'char_offsets': [[1999, 2004], [2005, 2011], [2012, 2018], [2019, 2025], [2026, 2030], [2031, 2033], [2034, 2041], [2042, 2046], [2047, 2054], [2055, 2056], [2057, 2061], [2062, 2071], [2072, 2075], [2076, 2083], [2084, 2087], [2088, 2096], [2097, 2099], [2100, 2113], [2113, 2114]]}) 
answer: set([u'moden', u'use'])
candidate Sentence: (0.1696142852306366, {u'tokens': [u'The', u'second', u'main', u'orchestral', u'use', u'of', u'cymbals', u'is', u'the', u'suspended', u'cymbal', u'.'], u'lemmas': [u'the', u'second', u'main', u'orchestral', u'use', u'of', u'cymbal', u'be', u'the', u'suspend', u'cymbal', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[4887, 4890], [4891, 4897], [4898, 4902], [4903, 4913], [4914, 4917], [4918, 4920], [4921, 4928], [4929, 4931], [4932, 4935], [4936, 4945], [4946, 4952], [4952, 4953]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.12830027937889099, {u'tokens': [u'On', u'another', u'note', u',', u'in', u'highschool', u'marching', u'bands', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspended', u'cymbal', u'for', u'a', u'song', u'.'], u'lemmas': [u'on', u'another', u'note', u',', u'in', u'highschool', u'march', u'band', u',', u'a', u'``', u'pit', u"''", u'may', u'use', u'a', u'suspend', u'cymbal', u'for', u'a', u'song', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'IN', u'JJ', u'VBG', u'NNS', u',', u'DT', u'``', u'NN', u"''", u'MD', u'VB', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[6482, 6484], [6485, 6492], [6493, 6497], [6497, 6498], [6499, 6501], [6502, 6512], [6513, 6521], [6522, 6527], [6527, 6528], [6529, 6530], [6531, 6532], [6532, 6535], [6535, 6536], [6537, 6540], [6541, 6544], [6545, 6546], [6547, 6556], [6557, 6563], [6564, 6567], [6568, 6569], [6570, 6574], [6574, 6575]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.11319312453269958, {u'tokens': [u'Such', u'a', u'pair', u'is', u'known', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbals', u',', u'although', u'this', u'term', u'is', u'rarely', u'used', u',', u'see', u'clash', u'cymbals', u'.'], u'lemmas': [u'such', u'a', u'pair', u'be', u'know', u'technically', u'as', u'a', u'pair', u'of', u'clash', u'cymbal', u',', u'although', u'this', u'term', u'be', u'rarely', u'use', u',', u'see', u'clash', u'cymbal', u'.'], u'pos': [u'PDT', u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u',', u'VB', u'NN', u'NNS', u'.'], u'char_offsets': [[2589, 2593], [2594, 2595], [2596, 2600], [2601, 2603], [2604, 2609], [2610, 2621], [2622, 2624], [2625, 2626], [2627, 2631], [2632, 2634], [2635, 2640], [2641, 2648], [2648, 2649], [2650, 2658], [2659, 2663], [2664, 2668], [2669, 2671], [2672, 2678], [2679, 2683], [2683, 2684], [2685, 2688], [2689, 2694], [2695, 2702], [2702, 2703]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.10555703938007355, {u'tokens': [u'The', u'bell', u'is', u'in', u'green', u'and', u'the', u'straps', u'are', u'in', u'red', u'.'], u'lemmas': [u'the', u'bell', u'be', u'in', u'green', u'and', u'the', u'strap', u'be', u'in', u'red', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'JJ', u'CC', u'DT', u'NNS', u'VBP', u'IN', u'JJ', u'.'], u'char_offsets': [[2405, 2408], [2409, 2413], [2414, 2416], [2417, 2419], [2420, 2425], [2426, 2429], [2430, 2433], [2434, 2440], [2441, 2444], [2445, 2447], [2448, 2451], [2451, 2452]]}) 
answer: set([u'moden', u'use', u'orchestra'])
candidate Sentence: (0.082557812333106995, {u'tokens': [u'Other', u'effects', u'that', u'can', u'be', u'used', u'include', u'drawing', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squealing', u'car', u'brakes', u'.'], u'lemmas': [u'other', u'effect', u'that', u'can', u'be', u'use', u'include', u'draw', u'a', u'cello', u'or', u'bass', u'bow', u'across', u'the', u'edge', u'of', u'the', u'cymbal', u'for', u'a', u'sound', u'not', u'unlike', u'squeal', u'car', u'brake', u'.'], u'pos': [u'JJ', u'NNS', u'WDT', u'MD', u'VB', u'VBN', u'VBP', u'VBG', u'DT', u'NN', u'CC', u'NN', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'RB', u'IN', u'VBG', u'NN', u'NNS', u'.'], u'char_offsets': [[6340, 6345], [6346, 6353], [6354, 6358], [6359, 6362], [6363, 6365], [6366, 6370], [6371, 6378], [6379, 6386], [6387, 6388], [6389, 6394], [6395, 6397], [6398, 6402], [6403, 6406], [6407, 6413], [6414, 6417], [6418, 6422], [6423, 6425], [6426, 6429], [6430, 6436], [6437, 6440], [6441, 6442], [6443, 6448], [6449, 6452], [6453, 6459], [6460, 6469], [6470, 6473], [6474, 6480], [6480, 6481]]}) 
answer: set([u'moden', u'orchestra'])
candidate Sentence: (0.074954621493816376, {u'tokens': [u'A', u'pair', u'of', u'clash', u'cymbals', u'in', u'profile', u'.'], u'lemmas': [u'a', u'pair', u'of', u'clash', u'cymbal', u'in', u'profile', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[2369, 2370], [2371, 2375], [2376, 2378], [2379, 2384], [2385, 2392], [2393, 2395], [2396, 2403], [2403, 2404]]}) 
answer: set([u'moden', u'use', u'orchestra'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are cymbals used in moden orchestras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9ca28>.answer
_____________________________ test_yesno[param65] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9cc68>, (<src.tfidf.TF_IDF object at 0x7f56bb35f450>, set(['dhaka'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cc68>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.72484368085861206, {u'tokens': [u'Dhaka', u'is', u'located', u'in', u'central', u'Bangladesh', u'at', u',', u'on', u'the', u'eastern', u'banks', u'of', u'the', u'Buriganga', u'River', u'.'], u'lemmas': [u'Dhaka', u'be', u'located', u'in', u'central', u'Bangladesh', u'at', u',', u'on', u'the', u'eastern', u'bank', u'of', u'the', u'Buriganga', u'River', u'.'], u'pos': [u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNP', u'IN', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[8214, 8219], [8220, 8222], [8223, 8230], [8231, 8233], [8234, 8241], [8242, 8252], [8253, 8255], [8257, 8258], [8259, 8261], [8262, 8265], [8266, 8273], [8274, 8279], [8280, 8282], [8283, 8286], [8287, 8296], [8297, 8302], [8302, 8303]]}) 
answer: set([u'locate'])
candidate Sentence: (0.49329334497451782, {u'tokens': [u'Located', u'on', u'the', u'banks', u'of', u'the', u'Buriganga', u'River', u',', u'Dhaka', u',', u'along', u'with', u'its', u'metropolitan', u'area', u',', u'has', u'a', u'population', u'of', u'over', u'12', u'million', u',', u'making', u'it', u'the', u'largest', u'city', u'in', u'Bangladesh', u'.'], u'lemmas': [u'locate', u'on', u'the', u'bank', u'of', u'the', u'Buriganga', u'River', u',', u'Dhaka', u',', u'along', u'with', u'its', u'metropolitan', u'area', u',', u'have', u'a', u'population', u'of', u'over', u'12', u'million', u',', u'make', u'it', u'the', u'largest', u'city', u'in', u'Bangladesh', u'.'], u'pos': [u'VBN', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'NNP', u',', u'IN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[183, 190], [191, 193], [194, 197], [198, 203], [204, 206], [207, 210], [211, 220], [221, 226], [226, 227], [228, 233], [233, 234], [235, 240], [241, 245], [246, 249], [250, 262], [263, 267], [267, 268], [269, 272], [273, 274], [275, 285], [286, 288], [289, 293], [294, 296], [297, 304], [304, 305], [306, 312], [313, 315], [316, 319], [320, 327], [328, 332], [333, 335], [336, 346], [346, 347]]}) 
answer: set([u'eastern'])
candidate Sentence: (0.26275300979614258, {u'tokens': [u'Marika', u'McAdam', u',', u'Bangladesh', u',', u'page', u'66', u',', u'Lonely', u'Planet', u',', u'2004', u',', u'ISBN', u'1740592808', u'The', u'Sadarghat', u'Port', u'on', u'the', u'banks', u'of', u'the', u'Buriganga', u'River', u'serves', u'the', u'transportation', u'of', u'goods', u'and', u'passengers', u'upriver', u'and', u'to', u'other', u'ports', u'in', u'Bangladesh', u'.'], u'lemmas': [u'Marika', u'McAdam', u',', u'Bangladesh', u',', u'page', u'66', u',', u'Lonely', u'planet', u',', u'2004', u',', u'ISBN', u'1740592808', u'the', u'Sadarghat', u'Port', u'on', u'the', u'bank', u'of', u'the', u'Buriganga', u'River', u'serve', u'the', u'transportation', u'of', u'goods', u'and', u'passenger', u'upriver', u'and', u'to', u'other', u'port', u'in', u'Bangladesh', u'.'], u'pos': [u'NNP', u'NNP', u',', u'NNP', u',', u'NN', u'CD', u',', u'NNP', u'NN', u',', u'CD', u',', u'NNP', u'CD', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNS', u'CC', u'NNS', u'NN', u'CC', u'TO', u'JJ', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24988, 24994], [24995, 25001], [25001, 25002], [25003, 25013], [25013, 25014], [25015, 25019], [25020, 25022], [25022, 25023], [25024, 25030], [25031, 25037], [25037, 25038], [25039, 25043], [25043, 25044], [25045, 25049], [25050, 25060], [25062, 25065], [25066, 25075], [25076, 25080], [25081, 25083], [25084, 25087], [25088, 25093], [25094, 25096], [25097, 25100], [25101, 25110], [25111, 25116], [25117, 25123], [25124, 25127], [25128, 25142], [25143, 25145], [25146, 25151], [25152, 25155], [25156, 25166], [25167, 25174], [25175, 25178], [25179, 25181], [25182, 25187], [25188, 25193], [25194, 25196], [25197, 25207], [25207, 25208]]}) 
answer: set([u'locate', u'eastern'])
candidate Sentence: (0.24794721603393555, {u'tokens': [u'and', u'industries', u'located', u'in', u'the', u'Dhaka', u'metropolitan', u'area', u'.'], u'lemmas': [u'and', u'industry', u'locate', u'in', u'the', u'Dhaka', u'metropolitan', u'area', u'.'], u'pos': [u'CC', u'NNS', u'VBN', u'IN', u'DT', u'NNP', u'JJ', u'NN', u'.'], u'char_offsets': [[13531, 13534], [13535, 13545], [13546, 13553], [13554, 13556], [13557, 13560], [13561, 13566], [13567, 13579], [13580, 13584], [13584, 13585]]}) 
answer: set([u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.10916968435049057, {u'tokens': [u'Large', u'local', u'conglomerates', u'such', u'as', u'Navana', u'Group', u'ACI', u',', u'Rahimafrooz', u'also', u'have', u'their', u'corporate', u'offices', u'located', u'in', u'Dhaka', u'.'], u'lemmas': [u'large', u'local', u'conglomerate', u'such', u'as', u'Navana', u'Group', u'ACI', u',', u'Rahimafrooz', u'also', u'have', u'they', u'corporate', u'office', u'locate', u'in', u'Dhaka', u'.'], u'pos': [u'JJ', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'RB', u'VBP', u'PRP$', u'JJ', u'NNS', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[15133, 15138], [15139, 15144], [15145, 15158], [15159, 15163], [15164, 15166], [15167, 15173], [15174, 15179], [15180, 15183], [15183, 15184], [15185, 15196], [15197, 15201], [15202, 15206], [15207, 15212], [15213, 15222], [15223, 15230], [15231, 15238], [15239, 15241], [15242, 15247], [15247, 15248]]}) 
answer: set([u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.090307265520095825, {u'tokens': [u'Accessed', u'on', u'2008-09-29', u'.'], u'lemmas': [u'access', u'on', u'2008-09-29', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[450, 458], [459, 461], [462, 472], [472, 473]]}) 
answer: set([u'locate', u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.054506745189428329, {u'tokens': [u'Large', u'crowds', u'of', u'people', u'gather', u'on', u'the', u'streets', u'of', u'Shahbag', u',', u'Ramna', u'Park', u'and', u'the', u'campus', u'of', u'the', u'University', u'of', u'Dhaka', u'for', u'celebrations', u'.'], u'lemmas': [u'large', u'crowd', u'of', u'people', u'gather', u'on', u'the', u'street', u'of', u'Shahbag', u',', u'Ramna', u'Park', u'and', u'the', u'campus', u'of', u'the', u'University', u'of', u'Dhaka', u'for', u'celebration', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'IN', u'DT', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNP', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'IN', u'NNS', u'.'], u'char_offsets': [[19039, 19044], [19045, 19051], [19052, 19054], [19055, 19061], [19062, 19068], [19069, 19071], [19072, 19075], [19076, 19083], [19084, 19086], [19087, 19094], [19094, 19095], [19096, 19101], [19102, 19106], [19107, 19110], [19111, 19114], [19115, 19121], [19122, 19124], [19125, 19128], [19129, 19139], [19140, 19142], [19143, 19148], [19149, 19152], [19153, 19165], [19165, 19166]]}) 
answer: set([u'locate', u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.04921264573931694, {u'tokens': [u'The', u'Dhaka', u'City', u'Corporation', u'building', u'The', u'Dhaka', u'municipality', u'was', u'founded', u'on', u'August', u'1', u',', u'1864', u'and', u'upgraded', u'to', u'``', u'corporation', u"''", u'status', u'in', u'1978', u'.'], u'lemmas': [u'the', u'Dhaka', u'City', u'Corporation', u'build', u'the', u'Dhaka', u'municipality', u'be', u'found', u'on', u'August', u'1', u',', u'1864', u'and', u'upgrade', u'to', u'``', u'corporation', u"''", u'status', u'in', u'1978', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBG', u'DT', u'NNP', u'NN', u'VBD', u'VBN', u'IN', u'NNP', u'CD', u',', u'CD', u'CC', u'VBN', u'TO', u'``', u'NN', u"''", u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[10118, 10121], [10122, 10127], [10128, 10132], [10133, 10144], [10145, 10153], [10154, 10157], [10158, 10163], [10164, 10176], [10177, 10180], [10181, 10188], [10189, 10191], [10192, 10198], [10199, 10200], [10200, 10201], [10202, 10206], [10207, 10210], [10211, 10219], [10220, 10222], [10223, 10224], [10224, 10235], [10235, 10236], [10237, 10243], [10244, 10246], [10247, 10251], [10251, 10252]]}) 
answer: set([u'locate', u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.048066839575767517, {u'tokens': [u'The', u'city', u'lies', u'on', u'the', u'lower', u'reaches', u'of', u'the', u'Ganges', u'Delta', u'and', u'covers', u'a', u'total', u'area', u'of', u'.'], u'lemmas': [u'the', u'city', u'lie', u'on', u'the', u'lower', u'reach', u'of', u'the', u'Ganges', u'Delta', u'and', u'cover', u'a', u'total', u'area', u'of', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'DT', u'JJR', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'.'], u'char_offsets': [[8304, 8307], [8308, 8312], [8313, 8317], [8318, 8320], [8321, 8324], [8325, 8330], [8331, 8338], [8339, 8341], [8342, 8345], [8346, 8352], [8353, 8358], [8359, 8362], [8363, 8369], [8370, 8371], [8372, 8377], [8378, 8382], [8383, 8385], [8387, 8388]]}) 
answer: set([u'locate', u'buriganga', u'river', u'bank', u'eastern'])
candidate Sentence: (0.040900133550167084, {u'tokens': [u'Bangladesh', u'Bureau', u'of', u'Statistics', u';', u'Area', u',', u'Population', u'and', u'Literacy', u'Rate', u'by', u'Paurashava', u'2001', u'-LRB-', u'pdf-file', u'-RRB-', u'Accessed', u'on', u'2008-09-29', u'.'], u'lemmas': [u'Bangladesh', u'Bureau', u'of', u'Statistics', u';', u'Area', u',', u'Population', u'and', u'literacy', u'rate', u'by', u'Paurashava', u'2001', u'-lrb-', u'pdf-file', u'-rrb-', u'access', u'on', u'2008-09-29', u'.'], u'pos': [u'NNP', u'NNP', u'IN', u'NNPS', u':', u'NNP', u',', u'NNP', u'CC', u'NN', u'NN', u'IN', u'NNP', u'CD', u'-LRB-', u'NN', u'-RRB-', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[8391, 8401], [8402, 8408], [8409, 8411], [8412, 8422], [8422, 8423], [8424, 8428], [8428, 8429], [8430, 8440], [8441, 8444], [8445, 8453], [8454, 8458], [8459, 8461], [8462, 8472], [8474, 8478], [8479, 8480], [8480, 8488], [8488, 8489], [8490, 8498], [8499, 8501], [8502, 8512], [8512, 8513]]}) 
answer: set([u'locate', u'buriganga', u'river', u'bank', u'eastern'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is Dhaka located on the eastern banks of the Buriganga River?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cc68>.answer
_____________________________ test_yesno[param69] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9cd88>, (<src.tfidf.TF_IDF object at 0x7f56ba2c3710>, set(['flute'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f56b8f9cd88>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.86330372095108032, {u'tokens': [u'Flutes', u'may', u'be', u'open', u'at', u'one', u'or', u'both', u'ends', u'.'], u'lemmas': [u'flute', u'may', u'be', u'open', u'at', u'one', u'or', u'both', u'end', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'JJ', u'IN', u'CD', u'CC', u'DT', u'NNS', u'.'], u'char_offsets': [[9359, 9365], [9366, 9369], [9370, 9372], [9373, 9377], [9378, 9380], [9381, 9384], [9385, 9387], [9388, 9392], [9393, 9397], [9397, 9398]]}) 
answer: set([u'possible'])
candidate Sentence: (0.21970398724079132, {u'tokens': [u'It', u'is', u'fashioned', u'of', u'lacquered', u'bamboo', u'with', u'closed', u'ends', u'and', u'has', u'five', u'stops', u'that', u'are', u'at', u'the', u'flute', u"'s", u'side', u'instead', u'of', u'the', u'top', u'.'], u'lemmas': [u'it', u'be', u'fashion', u'of', u'lacquered', u'bamboo', u'with', u'closed', u'end', u'and', u'have', u'five', u'stop', u'that', u'be', u'at', u'the', u'flute', u"'s", u'side', u'instead', u'of', u'the', u'top', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'VBZ', u'CD', u'NNS', u'WDT', u'VBP', u'IN', u'DT', u'NN', u'POS', u'NN', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2155, 2157], [2158, 2160], [2161, 2170], [2171, 2173], [2174, 2183], [2184, 2190], [2191, 2195], [2196, 2202], [2203, 2207], [2208, 2211], [2212, 2215], [2216, 2220], [2221, 2226], [2227, 2231], [2232, 2235], [2236, 2238], [2239, 2242], [2243, 2248], [2248, 2250], [2251, 2255], [2256, 2263], [2264, 2266], [2267, 2270], [2271, 2274], [2274, 2275]]}) 
answer: set([u'open', u'possible', u'one'])
candidate Sentence: (0.18347688019275665, {u'tokens': [u'However', u',', u'it', u'also', u'makes', u'an', u'end', u'blown', u'flute', u'or', u'transverse', u'flute', u'considerably', u'more', u'difficult', u'for', u'a', u'beginner', u'to', u'produce', u'a', u'full', u'sound', u'than', u'a', u'ducted', u'flute', u',', u'such', u'as', u'the', u'recorder', u'.'], u'lemmas': [u'however', u',', u'it', u'also', u'make', u'a', u'end', u'blow', u'flute', u'or', u'transverse', u'flute', u'considerably', u'more', u'difficult', u'for', u'a', u'beginner', u'to', u'produce', u'a', u'full', u'sound', u'than', u'a', u'ducted', u'flute', u',', u'such', u'as', u'the', u'recorder', u'.'], u'pos': [u'RB', u',', u'PRP', u'RB', u'VBZ', u'DT', u'NN', u'VBN', u'NN', u'CC', u'JJ', u'NN', u'RB', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5733, 5740], [5740, 5741], [5742, 5744], [5745, 5749], [5750, 5755], [5756, 5758], [5759, 5762], [5763, 5768], [5769, 5774], [5775, 5777], [5778, 5788], [5789, 5794], [5795, 5807], [5808, 5812], [5813, 5822], [5823, 5826], [5827, 5828], [5829, 5837], [5838, 5840], [5841, 5848], [5849, 5850], [5851, 5855], [5856, 5861], [5862, 5866], [5867, 5868], [5869, 5875], [5876, 5881], [5881, 5882], [5883, 5887], [5888, 5890], [5891, 5894], [5895, 5903], [5903, 5904]]}) 
answer: set([u'open', u'possible', u'one'])
candidate Sentence: (0.16498315334320068, {u'tokens': [u'It', u'is', u'made', u'of', u'wood', u'or', u'cane', u',', u'usually', u'with', u'seven', u'finger', u'holes', u'and', u'one', u'thumb', u'hole', u',', u'producing', u'a', u'diatonic', u'scale', u'.'], u'lemmas': [u'it', u'be', u'make', u'of', u'wood', u'or', u'cane', u',', u'usually', u'with', u'seven', u'finger', u'hole', u'and', u'one', u'thumb', u'hole', u',', u'produce', u'a', u'diatonic', u'scale', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NN', u'CC', u'NN', u',', u'RB', u'IN', u'CD', u'NN', u'NNS', u'CC', u'CD', u'NN', u'NN', u',', u'VBG', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14809, 14811], [14812, 14814], [14815, 14819], [14820, 14822], [14823, 14827], [14828, 14830], [14831, 14835], [14835, 14836], [14837, 14844], [14845, 14849], [14850, 14855], [14856, 14862], [14863, 14868], [14869, 14872], [14873, 14876], [14877, 14882], [14883, 14887], [14887, 14888], [14890, 14899], [14900, 14901], [14902, 14910], [14911, 14916], [14916, 14917]]}) 
answer: set([u'end', u'open', u'possible'])
candidate Sentence: (0.14122343063354492, {u'tokens': [u'By', u'varying', u'the', u'air', u'pressure', u',', u'a', u'flute', u'player', u'can', u'also', u'change', u'the', u'pitch', u'of', u'a', u'note', u'by', u'causing', u'the', u'air', u'in', u'the', u'flute', u'to', u'resonate', u'at', u'a', u'harmonic', u'other', u'than', u'the', u'fundamental', u'frequency', u'without', u'opening', u'or', u'closing', u'any', u'holes', u'.'], u'lemmas': [u'by', u'vary', u'the', u'air', u'pressure', u',', u'a', u'flute', u'player', u'can', u'also', u'change', u'the', u'pitch', u'of', u'a', u'note', u'by', u'cause', u'the', u'air', u'in', u'the', u'flute', u'to', u'resonate', u'at', u'a', u'harmonic', u'other', u'than', u'the', u'fundamental', u'frequency', u'without', u'open', u'or', u'close', u'any', u'hole', u'.'], u'pos': [u'IN', u'VBG', u'DT', u'NN', u'NN', u',', u'DT', u'NN', u'NN', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'IN', u'DT', u'JJ', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'CC', u'VBG', u'DT', u'NNS', u'.'], u'char_offsets': [[4453, 4455], [4456, 4463], [4464, 4467], [4468, 4471], [4472, 4480], [4480, 4481], [4482, 4483], [4484, 4489], [4490, 4496], [4497, 4500], [4501, 4505], [4506, 4512], [4513, 4516], [4517, 4522], [4523, 4525], [4526, 4527], [4528, 4532], [4533, 4535], [4536, 4543], [4544, 4547], [4548, 4551], [4552, 4554], [4555, 4558], [4559, 4564], [4565, 4567], [4568, 4576], [4577, 4579], [4580, 4581], [4582, 4590], [4591, 4596], [4597, 4601], [4602, 4605], [4606, 4617], [4618, 4627], [4628, 4635], [4636, 4643], [4644, 4646], [4647, 4654], [4655, 4658], [4659, 4664], [4664, 4665]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.1311652660369873, {u'tokens': [u'The', u'note', u'produced', u'depends', u'on', u'which', u'finger-holes', u'are', u'opened', u'or', u'closed', u'and', u'on', u'how', u'the', u'flute', u'is', u'blown', u'.'], u'lemmas': [u'the', u'note', u'produce', u'depend', u'on', u'which', u'finger-hole', u'be', u'open', u'or', u'close', u'and', u'on', u'how', u'the', u'flute', u'be', u'blow', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'VBZ', u'IN', u'WDT', u'NNS', u'VBP', u'VBN', u'CC', u'VBN', u'CC', u'IN', u'WRB', u'DT', u'NN', u'VBZ', u'VBN', u'.'], u'char_offsets': [[10490, 10493], [10494, 10498], [10499, 10507], [10508, 10515], [10516, 10518], [10519, 10524], [10525, 10537], [10538, 10541], [10542, 10548], [10549, 10551], [10552, 10558], [10559, 10562], [10563, 10565], [10566, 10569], [10570, 10573], [10574, 10579], [10580, 10582], [10583, 10588], [10588, 10589]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.12200811505317688, {u'tokens': [u'Various', u'combinations', u'can', u'be', u'opened', u'or', u'closed', u'by', u'means', u'of', u'keys', u',', u'to', u'produce', u'the', u'different', u'notes', u'in', u'its', u'playing', u'range', u'.'], u'lemmas': [u'various', u'combination', u'can', u'be', u'open', u'or', u'close', u'by', u'means', u'of', u'key', u',', u'to', u'produce', u'the', u'different', u'note', u'in', u'its', u'playing', u'range', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'IN', u'NNS', u',', u'TO', u'VB', u'DT', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'NN', u'.'], u'char_offsets': [[10309, 10316], [10317, 10329], [10330, 10333], [10334, 10336], [10337, 10343], [10344, 10346], [10347, 10353], [10354, 10356], [10357, 10362], [10363, 10365], [10366, 10370], [10370, 10371], [10372, 10374], [10375, 10382], [10383, 10386], [10387, 10396], [10397, 10402], [10403, 10405], [10406, 10409], [10410, 10417], [10418, 10423], [10423, 10424]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.11881769448518753, {u'tokens': [u'An', u'organ', u'pipe', u'may', u'be', u'either', u'open', u'or', u'closed', u',', u'depending', u'on', u'the', u'sound', u'desired', u'.'], u'lemmas': [u'a', u'organ', u'pipe', u'may', u'be', u'either', u'open', u'or', u'closed', u',', u'depend', u'on', u'the', u'sound', u'desire', u'.'], u'pos': [u'DT', u'NN', u'NN', u'MD', u'VB', u'RB', u'JJ', u'CC', u'JJ', u',', u'VBG', u'IN', u'DT', u'JJ', u'VBN', u'.'], u'char_offsets': [[9623, 9625], [9626, 9631], [9632, 9636], [9637, 9640], [9641, 9643], [9644, 9650], [9651, 9655], [9656, 9658], [9659, 9665], [9665, 9666], [9667, 9676], [9677, 9679], [9680, 9683], [9684, 9689], [9690, 9697], [9697, 9698]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.11079588532447815, {u'tokens': [u'The', u'quality', u'of', u'the', u'flute', u"'s", u'sound', u'depends', u'somewhat', u'on', u'the', u'specific', u'bamboo', u'used', u'to', u'make', u'it', u',', u'and', u'it', u'is', u'generally', u'agreed', u'that', u'the', u'best', u'bamboo', u'grows', u'in', u'the', u'Nagarcoil', u'area', u'in', u'South', u'India', u'.'], u'lemmas': [u'the', u'quality', u'of', u'the', u'flute', u"'s", u'sound', u'depend', u'somewhat', u'on', u'the', u'specific', u'bamboo', u'use', u'to', u'make', u'it', u',', u'and', u'it', u'be', u'generally', u'agree', u'that', u'the', u'best', u'bamboo', u'grow', u'in', u'the', u'Nagarcoil', u'area', u'in', u'South', u'India', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'TO', u'VB', u'PRP', u',', u'CC', u'PRP', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJS', u'NN', u'VBZ', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[14344, 14347], [14348, 14355], [14356, 14358], [14359, 14362], [14363, 14368], [14368, 14370], [14371, 14376], [14377, 14384], [14385, 14393], [14394, 14396], [14397, 14400], [14401, 14409], [14410, 14416], [14417, 14421], [14422, 14424], [14425, 14429], [14430, 14432], [14432, 14433], [14434, 14437], [14438, 14440], [14441, 14443], [14444, 14453], [14454, 14460], [14461, 14465], [14466, 14469], [14470, 14474], [14475, 14481], [14482, 14487], [14488, 14490], [14491, 14494], [14495, 14504], [14505, 14509], [14510, 14512], [14513, 14518], [14519, 14524], [14524, 14525]]}) 
answer: set([u'end', u'open', u'possible', u'one'])
candidate Sentence: (0.10496935248374939, {u'tokens': [u'The', u'player', u'of', u'a', u'side-blown', u'flute', u'uses', u'a', u'hole', u'on', u'the', u'side', u'of', u'the', u'tube', u'to', u'produce', u'a', u'tone', u',', u'instead', u'of', u'blowing', u'on', u'an', u'end', u'of', u'the', u'tube', u'.'], u'lemmas': [u'the', u'player', u'of', u'a', u'side-blown', u'flute', u'use', u'a', u'hole', u'on', u'the', u'side', u'of', u'the', u'tube', u'to', u'produce', u'a', u'tone', u',', u'instead', u'of', u'blow', u'on', u'a', u'end', u'of', u'the', u'tube', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u',', u'RB', u'IN', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[9032, 9035], [9036, 9042], [9043, 9045], [9046, 9047], [9048, 9058], [9059, 9064], [9065, 9069], [9070, 9071], [9072, 9076], [9077, 9079], [9080, 9083], [9084, 9088], [9089, 9091], [9092, 9095], [9096, 9100], [9101, 9103], [9104, 9111], [9112, 9113], [9114, 9118], [9118, 9119], [9120, 9127], [9128, 9130], [9131, 9138], [9139, 9141], [9142, 9144], [9145, 9148], [9149, 9151], [9152, 9155], [9156, 9160], [9160, 9161]]}) 
answer: set([u'open', u'possible', u'one'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is it possible to open flutes at one or both ends?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7f56b8f9cd88>.answer
_____________________________ test_yesno[param70] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9cdd0>, (<src.tfidf.TF_IDF object at 0x7f56ba2c3710>, set(['flute'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cdd0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.86330372095108032, {u'tokens': [u'Flutes', u'may', u'be', u'open', u'at', u'one', u'or', u'both', u'ends', u'.'], u'lemmas': [u'flute', u'may', u'be', u'open', u'at', u'one', u'or', u'both', u'end', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'JJ', u'IN', u'CD', u'CC', u'DT', u'NNS', u'.'], u'char_offsets': [[9359, 9365], [9366, 9369], [9370, 9372], [9373, 9377], [9378, 9380], [9381, 9384], [9385, 9387], [9388, 9392], [9393, 9397], [9397, 9398]]}) 
answer: set([u'possible'])
candidate Sentence: (0.21970398724079132, {u'tokens': [u'It', u'is', u'fashioned', u'of', u'lacquered', u'bamboo', u'with', u'closed', u'ends', u'and', u'has', u'five', u'stops', u'that', u'are', u'at', u'the', u'flute', u"'s", u'side', u'instead', u'of', u'the', u'top', u'.'], u'lemmas': [u'it', u'be', u'fashion', u'of', u'lacquered', u'bamboo', u'with', u'closed', u'end', u'and', u'have', u'five', u'stop', u'that', u'be', u'at', u'the', u'flute', u"'s", u'side', u'instead', u'of', u'the', u'top', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'VBZ', u'CD', u'NNS', u'WDT', u'VBP', u'IN', u'DT', u'NN', u'POS', u'NN', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[2155, 2157], [2158, 2160], [2161, 2170], [2171, 2173], [2174, 2183], [2184, 2190], [2191, 2195], [2196, 2202], [2203, 2207], [2208, 2211], [2212, 2215], [2216, 2220], [2221, 2226], [2227, 2231], [2232, 2235], [2236, 2238], [2239, 2242], [2243, 2248], [2248, 2250], [2251, 2255], [2256, 2263], [2264, 2266], [2267, 2270], [2271, 2274], [2274, 2275]]}) 
answer: set([u'open', u'possible', u'one'])
candidate Sentence: (0.18347688019275665, {u'tokens': [u'However', u',', u'it', u'also', u'makes', u'an', u'end', u'blown', u'flute', u'or', u'transverse', u'flute', u'considerably', u'more', u'difficult', u'for', u'a', u'beginner', u'to', u'produce', u'a', u'full', u'sound', u'than', u'a', u'ducted', u'flute', u',', u'such', u'as', u'the', u'recorder', u'.'], u'lemmas': [u'however', u',', u'it', u'also', u'make', u'a', u'end', u'blow', u'flute', u'or', u'transverse', u'flute', u'considerably', u'more', u'difficult', u'for', u'a', u'beginner', u'to', u'produce', u'a', u'full', u'sound', u'than', u'a', u'ducted', u'flute', u',', u'such', u'as', u'the', u'recorder', u'.'], u'pos': [u'RB', u',', u'PRP', u'RB', u'VBZ', u'DT', u'NN', u'VBN', u'NN', u'CC', u'JJ', u'NN', u'RB', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5733, 5740], [5740, 5741], [5742, 5744], [5745, 5749], [5750, 5755], [5756, 5758], [5759, 5762], [5763, 5768], [5769, 5774], [5775, 5777], [5778, 5788], [5789, 5794], [5795, 5807], [5808, 5812], [5813, 5822], [5823, 5826], [5827, 5828], [5829, 5837], [5838, 5840], [5841, 5848], [5849, 5850], [5851, 5855], [5856, 5861], [5862, 5866], [5867, 5868], [5869, 5875], [5876, 5881], [5881, 5882], [5883, 5887], [5888, 5890], [5891, 5894], [5895, 5903], [5903, 5904]]}) 
answer: set([u'open', u'possible', u'one'])
candidate Sentence: (0.16498315334320068, {u'tokens': [u'It', u'is', u'made', u'of', u'wood', u'or', u'cane', u',', u'usually', u'with', u'seven', u'finger', u'holes', u'and', u'one', u'thumb', u'hole', u',', u'producing', u'a', u'diatonic', u'scale', u'.'], u'lemmas': [u'it', u'be', u'make', u'of', u'wood', u'or', u'cane', u',', u'usually', u'with', u'seven', u'finger', u'hole', u'and', u'one', u'thumb', u'hole', u',', u'produce', u'a', u'diatonic', u'scale', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NN', u'CC', u'NN', u',', u'RB', u'IN', u'CD', u'NN', u'NNS', u'CC', u'CD', u'NN', u'NN', u',', u'VBG', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14809, 14811], [14812, 14814], [14815, 14819], [14820, 14822], [14823, 14827], [14828, 14830], [14831, 14835], [14835, 14836], [14837, 14844], [14845, 14849], [14850, 14855], [14856, 14862], [14863, 14868], [14869, 14872], [14873, 14876], [14877, 14882], [14883, 14887], [14887, 14888], [14890, 14899], [14900, 14901], [14902, 14910], [14911, 14916], [14916, 14917]]}) 
answer: set([u'end', u'open', u'possible'])
candidate Sentence: (0.14122343063354492, {u'tokens': [u'By', u'varying', u'the', u'air', u'pressure', u',', u'a', u'flute', u'player', u'can', u'also', u'change', u'the', u'pitch', u'of', u'a', u'note', u'by', u'causing', u'the', u'air', u'in', u'the', u'flute', u'to', u'resonate', u'at', u'a', u'harmonic', u'other', u'than', u'the', u'fundamental', u'frequency', u'without', u'opening', u'or', u'closing', u'any', u'holes', u'.'], u'lemmas': [u'by', u'vary', u'the', u'air', u'pressure', u',', u'a', u'flute', u'player', u'can', u'also', u'change', u'the', u'pitch', u'of', u'a', u'note', u'by', u'cause', u'the', u'air', u'in', u'the', u'flute', u'to', u'resonate', u'at', u'a', u'harmonic', u'other', u'than', u'the', u'fundamental', u'frequency', u'without', u'open', u'or', u'close', u'any', u'hole', u'.'], u'pos': [u'IN', u'VBG', u'DT', u'NN', u'NN', u',', u'DT', u'NN', u'NN', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'VBG', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'IN', u'DT', u'JJ', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'VBG', u'CC', u'VBG', u'DT', u'NNS', u'.'], u'char_offsets': [[4453, 4455], [4456, 4463], [4464, 4467], [4468, 4471], [4472, 4480], [4480, 4481], [4482, 4483], [4484, 4489], [4490, 4496], [4497, 4500], [4501, 4505], [4506, 4512], [4513, 4516], [4517, 4522], [4523, 4525], [4526, 4527], [4528, 4532], [4533, 4535], [4536, 4543], [4544, 4547], [4548, 4551], [4552, 4554], [4555, 4558], [4559, 4564], [4565, 4567], [4568, 4576], [4577, 4579], [4580, 4581], [4582, 4590], [4591, 4596], [4597, 4601], [4602, 4605], [4606, 4617], [4618, 4627], [4628, 4635], [4636, 4643], [4644, 4646], [4647, 4654], [4655, 4658], [4659, 4664], [4664, 4665]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.1311652660369873, {u'tokens': [u'The', u'note', u'produced', u'depends', u'on', u'which', u'finger-holes', u'are', u'opened', u'or', u'closed', u'and', u'on', u'how', u'the', u'flute', u'is', u'blown', u'.'], u'lemmas': [u'the', u'note', u'produce', u'depend', u'on', u'which', u'finger-hole', u'be', u'open', u'or', u'close', u'and', u'on', u'how', u'the', u'flute', u'be', u'blow', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'VBZ', u'IN', u'WDT', u'NNS', u'VBP', u'VBN', u'CC', u'VBN', u'CC', u'IN', u'WRB', u'DT', u'NN', u'VBZ', u'VBN', u'.'], u'char_offsets': [[10490, 10493], [10494, 10498], [10499, 10507], [10508, 10515], [10516, 10518], [10519, 10524], [10525, 10537], [10538, 10541], [10542, 10548], [10549, 10551], [10552, 10558], [10559, 10562], [10563, 10565], [10566, 10569], [10570, 10573], [10574, 10579], [10580, 10582], [10583, 10588], [10588, 10589]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.12200811505317688, {u'tokens': [u'Various', u'combinations', u'can', u'be', u'opened', u'or', u'closed', u'by', u'means', u'of', u'keys', u',', u'to', u'produce', u'the', u'different', u'notes', u'in', u'its', u'playing', u'range', u'.'], u'lemmas': [u'various', u'combination', u'can', u'be', u'open', u'or', u'close', u'by', u'means', u'of', u'key', u',', u'to', u'produce', u'the', u'different', u'note', u'in', u'its', u'playing', u'range', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'IN', u'NNS', u',', u'TO', u'VB', u'DT', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'NN', u'.'], u'char_offsets': [[10309, 10316], [10317, 10329], [10330, 10333], [10334, 10336], [10337, 10343], [10344, 10346], [10347, 10353], [10354, 10356], [10357, 10362], [10363, 10365], [10366, 10370], [10370, 10371], [10372, 10374], [10375, 10382], [10383, 10386], [10387, 10396], [10397, 10402], [10403, 10405], [10406, 10409], [10410, 10417], [10418, 10423], [10423, 10424]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.11881769448518753, {u'tokens': [u'An', u'organ', u'pipe', u'may', u'be', u'either', u'open', u'or', u'closed', u',', u'depending', u'on', u'the', u'sound', u'desired', u'.'], u'lemmas': [u'a', u'organ', u'pipe', u'may', u'be', u'either', u'open', u'or', u'closed', u',', u'depend', u'on', u'the', u'sound', u'desire', u'.'], u'pos': [u'DT', u'NN', u'NN', u'MD', u'VB', u'RB', u'JJ', u'CC', u'JJ', u',', u'VBG', u'IN', u'DT', u'JJ', u'VBN', u'.'], u'char_offsets': [[9623, 9625], [9626, 9631], [9632, 9636], [9637, 9640], [9641, 9643], [9644, 9650], [9651, 9655], [9656, 9658], [9659, 9665], [9665, 9666], [9667, 9676], [9677, 9679], [9680, 9683], [9684, 9689], [9690, 9697], [9697, 9698]]}) 
answer: set([u'end', u'possible', u'one'])
candidate Sentence: (0.11079588532447815, {u'tokens': [u'The', u'quality', u'of', u'the', u'flute', u"'s", u'sound', u'depends', u'somewhat', u'on', u'the', u'specific', u'bamboo', u'used', u'to', u'make', u'it', u',', u'and', u'it', u'is', u'generally', u'agreed', u'that', u'the', u'best', u'bamboo', u'grows', u'in', u'the', u'Nagarcoil', u'area', u'in', u'South', u'India', u'.'], u'lemmas': [u'the', u'quality', u'of', u'the', u'flute', u"'s", u'sound', u'depend', u'somewhat', u'on', u'the', u'specific', u'bamboo', u'use', u'to', u'make', u'it', u',', u'and', u'it', u'be', u'generally', u'agree', u'that', u'the', u'best', u'bamboo', u'grow', u'in', u'the', u'Nagarcoil', u'area', u'in', u'South', u'India', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'TO', u'VB', u'PRP', u',', u'CC', u'PRP', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJS', u'NN', u'VBZ', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[14344, 14347], [14348, 14355], [14356, 14358], [14359, 14362], [14363, 14368], [14368, 14370], [14371, 14376], [14377, 14384], [14385, 14393], [14394, 14396], [14397, 14400], [14401, 14409], [14410, 14416], [14417, 14421], [14422, 14424], [14425, 14429], [14430, 14432], [14432, 14433], [14434, 14437], [14438, 14440], [14441, 14443], [14444, 14453], [14454, 14460], [14461, 14465], [14466, 14469], [14470, 14474], [14475, 14481], [14482, 14487], [14488, 14490], [14491, 14494], [14495, 14504], [14505, 14509], [14510, 14512], [14513, 14518], [14519, 14524], [14524, 14525]]}) 
answer: set([u'end', u'open', u'possible', u'one'])
candidate Sentence: (0.10496935248374939, {u'tokens': [u'The', u'player', u'of', u'a', u'side-blown', u'flute', u'uses', u'a', u'hole', u'on', u'the', u'side', u'of', u'the', u'tube', u'to', u'produce', u'a', u'tone', u',', u'instead', u'of', u'blowing', u'on', u'an', u'end', u'of', u'the', u'tube', u'.'], u'lemmas': [u'the', u'player', u'of', u'a', u'side-blown', u'flute', u'use', u'a', u'hole', u'on', u'the', u'side', u'of', u'the', u'tube', u'to', u'produce', u'a', u'tone', u',', u'instead', u'of', u'blow', u'on', u'a', u'end', u'of', u'the', u'tube', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u',', u'RB', u'IN', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[9032, 9035], [9036, 9042], [9043, 9045], [9046, 9047], [9048, 9058], [9059, 9064], [9065, 9069], [9070, 9071], [9072, 9076], [9077, 9079], [9080, 9083], [9084, 9088], [9089, 9091], [9092, 9095], [9096, 9100], [9101, 9103], [9104, 9111], [9112, 9113], [9114, 9118], [9118, 9119], [9120, 9127], [9128, 9130], [9131, 9138], [9139, 9141], [9142, 9144], [9145, 9148], [9149, 9151], [9152, 9155], [9156, 9160], [9160, 9161]]}) 
answer: set([u'open', u'possible', u'one'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is it possible to open flutes at one or both ends?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cdd0>.answer
_____________________________ test_yesno[param73] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9cea8>, (<src.tfidf.TF_IDF object at 0x7f56bc8b8d50>, set(['fox'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.29734170436859131, {u'tokens': [u'Foxes', u'are', u'normally', u'extremely', u'wary', u'of', u'humans', u'and', u'are', u'not', u'kept', u'as', u'pets', u'-LRB-', u'with', u'the', u'exception', u'of', u'the', u'fennec', u'-RRB-', u';', u'however', u',', u'the', u'silver', u'fox', u'was', u'successfully', u'domesticated', u'in', u'Russia', u'after', u'a', u'45', u'year', u'selective', u'breeding', u'program', u'.'], u'lemmas': [u'fox', u'be', u'normally', u'extremely', u'wary', u'of', u'human', u'and', u'be', u'not', u'keep', u'as', u'pet', u'-lrb-', u'with', u'the', u'exception', u'of', u'the', u'fennec', u'-rrb-', u';', u'however', u',', u'the', u'silver', u'fox', u'be', u'successfully', u'domesticate', u'in', u'Russia', u'after', u'a', u'45', u'year', u'selective', u'breed', u'program', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'RB', u'JJ', u'IN', u'NNS', u'CC', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'-LRB-', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'-RRB-', u':', u'RB', u',', u'DT', u'NN', u'NN', u'VBD', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'DT', u'CD', u'NN', u'JJ', u'VBG', u'NN', u'.'], u'char_offsets': [[2454, 2459], [2460, 2463], [2464, 2472], [2473, 2482], [2483, 2487], [2488, 2490], [2491, 2497], [2498, 2501], [2502, 2505], [2506, 2509], [2510, 2514], [2515, 2517], [2518, 2522], [2523, 2524], [2524, 2528], [2529, 2532], [2533, 2542], [2543, 2545], [2546, 2549], [2550, 2556], [2556, 2557], [2557, 2558], [2559, 2566], [2566, 2567], [2568, 2571], [2572, 2578], [2579, 2582], [2583, 2586], [2587, 2599], [2600, 2612], [2613, 2615], [2616, 2622], [2623, 2628], [2629, 2630], [2631, 2633], [2634, 2638], [2639, 2648], [2649, 2657], [2658, 2665], [2665, 2666]]}) 
answer: set([])
candidate Sentence: (0.18005383014678955, {u'tokens': [u'Fox', u'attacks', u'on', u'humans', u'are', u'not', u'common', u'but', u'have', u'been', u'reported', u'.'], u'lemmas': [u'Fox', u'attack', u'on', u'human', u'be', u'not', u'common', u'but', u'have', u'be', u'report', u'.'], u'pos': [u'NNP', u'NNS', u'IN', u'NNS', u'VBP', u'RB', u'JJ', u'CC', u'VBP', u'VBN', u'VBN', u'.'], u'char_offsets': [[5639, 5642], [5643, 5650], [5651, 5653], [5654, 5660], [5661, 5664], [5665, 5668], [5669, 5675], [5676, 5679], [5680, 5684], [5685, 5689], [5690, 5698], [5698, 5699]]}) 
answer: set([u'wary'])
candidate Sentence: (0.14953593909740448, {u'tokens': [u'The', u'first', u'example', u'of', u'the', u'introduction', u'of', u'the', u'fox', u'into', u'a', u'new', u'habitat', u'by', u'humans', u'seems', u'to', u'be', u'Neolithic', u'Cyprus', u'.'], u'lemmas': [u'the', u'first', u'example', u'of', u'the', u'introduction', u'of', u'the', u'fox', u'into', u'a', u'new', u'habitat', u'by', u'human', u'seem', u'to', u'be', u'neolithic', u'Cyprus', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'TO', u'VB', u'JJ', u'NNP', u'.'], u'char_offsets': [[5423, 5426], [5427, 5432], [5433, 5440], [5441, 5443], [5444, 5447], [5448, 5460], [5461, 5463], [5464, 5467], [5468, 5471], [5472, 5476], [5477, 5478], [5479, 5482], [5483, 5490], [5491, 5493], [5494, 5500], [5501, 5506], [5507, 5509], [5510, 5512], [5513, 5522], [5523, 5529], [5529, 5530]]}) 
answer: set([u'wary'])
candidate Sentence: (0.10498324781656265, {u'tokens': [u'Foxes', u'are', u'readily', u'found', u'in', u'cities', u'and', u'cultivated', u'areas', u'and', u'-LRB-', u'depending', u'upon', u'species', u'-RRB-', u'seem', u'to', u'adapt', u'reasonably', u'well', u'to', u'human', u'presence', u'.'], u'lemmas': [u'fox', u'be', u'readily', u'find', u'in', u'city', u'and', u'cultivate', u'area', u'and', u'-lrb-', u'depend', u'upon', u'species', u'-rrb-', u'seem', u'to', u'adapt', u'reasonably', u'well', u'to', u'human', u'presence', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'CC', u'VBN', u'NNS', u'CC', u'-LRB-', u'VBG', u'IN', u'NNS', u'-RRB-', u'VBP', u'TO', u'VB', u'RB', u'RB', u'TO', u'JJ', u'NN', u'.'], u'char_offsets': [[4206, 4211], [4212, 4215], [4216, 4223], [4224, 4229], [4230, 4232], [4233, 4239], [4240, 4243], [4244, 4254], [4255, 4260], [4261, 4264], [4265, 4266], [4266, 4275], [4276, 4280], [4281, 4288], [4288, 4289], [4290, 4294], [4295, 4297], [4298, 4303], [4304, 4314], [4315, 4319], [4320, 4322], [4323, 4328], [4329, 4337], [4337, 4338]]}) 
answer: set([u'wary'])
candidate Sentence: (0.030966438353061676, {u'tokens': [u'Most', u'species', u'of', u'foxes', u'generally', u'consume', u'around', u'1', u'kg', u'of', u'food', u'every', u'day', u'.'], u'lemmas': [u'most', u'species', u'of', u'fox', u'generally', u'consume', u'around', u'1', u'kg', u'of', u'food', u'every', u'day', u'.'], u'pos': [u'JJS', u'NNS', u'IN', u'NNS', u'RB', u'VBP', u'IN', u'CD', u'NN', u'IN', u'NN', u'DT', u'NN', u'.'], u'char_offsets': [[3988, 3992], [3993, 4000], [4001, 4003], [4004, 4009], [4010, 4019], [4020, 4027], [4028, 4034], [4035, 4036], [4037, 4039], [4040, 4042], [4043, 4047], [4048, 4053], [4054, 4057], [4057, 4058]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.027817778289318085, {u'tokens': [u'The', u'diet', u'of', u'foxes', u'is', u'largely', u'made', u'up', u'of', u'invertebrates', u',', u'however', u'it', u'also', u'includes', u'rodents', u',', u'rabbits', u'and', u'other', u'small', u'mammals', u',', u'reptiles', u',', u'-LRB-', u'such', u'as', u'snakes', u'-RRB-', u',', u'amphibians', u',', u'grasses', u',', u'berries', u',', u'fruit', u',', u'fish', u',', u'birds', u',', u'eggs', u',', u'and', u'all', u'other', u'kinds', u'of', u'small', u'animals', u'.'], u'lemmas': [u'the', u'diet', u'of', u'fox', u'be', u'largely', u'make', u'up', u'of', u'invertebrate', u',', u'however', u'it', u'also', u'include', u'rodent', u',', u'rabbit', u'and', u'other', u'small', u'mammal', u',', u'reptile', u',', u'-lrb-', u'such', u'as', u'snake', u'-rrb-', u',', u'amphibian', u',', u'grass', u',', u'berry', u',', u'fruit', u',', u'fish', u',', u'bird', u',', u'egg', u',', u'and', u'all', u'other', u'kind', u'of', u'small', u'animal', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNS', u'VBZ', u'RB', u'VBN', u'IN', u'IN', u'NNS', u',', u'RB', u'PRP', u'RB', u'VBZ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNS', u',', u'-LRB-', u'JJ', u'IN', u'NNS', u'-RRB-', u',', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'NN', u',', u'NN', u',', u'NNS', u',', u'NNS', u',', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3643, 3646], [3647, 3651], [3652, 3654], [3655, 3660], [3661, 3663], [3664, 3671], [3672, 3676], [3677, 3679], [3680, 3682], [3683, 3696], [3696, 3697], [3698, 3705], [3706, 3708], [3709, 3713], [3714, 3722], [3723, 3730], [3730, 3731], [3732, 3739], [3740, 3743], [3744, 3749], [3750, 3755], [3756, 3763], [3763, 3764], [3765, 3773], [3773, 3774], [3775, 3776], [3776, 3780], [3781, 3783], [3784, 3790], [3790, 3791], [3791, 3792], [3793, 3803], [3803, 3804], [3805, 3812], [3812, 3813], [3814, 3821], [3821, 3822], [3823, 3828], [3828, 3829], [3830, 3834], [3834, 3835], [3837, 3842], [3842, 3843], [3844, 3848], [3848, 3849], [3850, 3853], [3854, 3857], [3858, 3863], [3864, 3869], [3870, 3872], [3873, 3878], [3879, 3886], [3886, 3887]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.025297043845057487, {u'tokens': [u'A', u'fox', u'is', u'an', u'animal', u'belonging', u'to', u'any', u'one', u'of', u'about', u'27', u'species', u'-LRB-', u'of', u'which', u'only', u'12', u'actually', u'belong', u'to', u'the', u'Vulpes', u'genus', u',', u'or', u'`', u'true', u'foxes', u"'", u'-RRB-', u'of', u'small', u'to', u'medium-sized', u'canids', u',', u'characterized', u'by', u'possessing', u'a', u'long', u',', u'narrow', u'snout', u',', u'and', u'a', u'bushy', u'tail', u',', u'or', u'brush', u'.'], u'lemmas': [u'a', u'fox', u'be', u'a', u'animal', u'belong', u'to', u'any', u'one', u'of', u'about', u'27', u'species', u'-lrb-', u'of', u'which', u'only', u'12', u'actually', u'belong', u'to', u'the', u'Vulpes', u'genus', u',', u'or', u'`', u'true', u'fox', u"'", u'-rrb-', u'of', u'small', u'to', u'medium-sized', u'canid', u',', u'characterize', u'by', u'possess', u'a', u'long', u',', u'narrow', u'snout', u',', u'and', u'a', u'bushy', u'tail', u',', u'or', u'brush', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'VBG', u'TO', u'DT', u'CD', u'IN', u'IN', u'CD', u'NNS', u'-LRB-', u'IN', u'WDT', u'RB', u'CD', u'RB', u'VBP', u'TO', u'DT', u'NNP', u'NN', u',', u'CC', u'``', u'JJ', u'NNS', u'POS', u'-RRB-', u'IN', u'JJ', u'TO', u'JJ', u'NNS', u',', u'VBN', u'IN', u'VBG', u'DT', u'RB', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[0, 1], [2, 5], [6, 8], [9, 11], [12, 18], [19, 28], [29, 31], [32, 35], [36, 39], [40, 42], [43, 48], [49, 51], [52, 59], [60, 61], [61, 63], [64, 69], [70, 74], [75, 77], [78, 86], [87, 93], [94, 96], [97, 100], [101, 107], [108, 113], [113, 114], [115, 117], [118, 119], [119, 123], [124, 129], [129, 130], [130, 131], [132, 134], [135, 140], [141, 143], [144, 156], [157, 163], [163, 164], [165, 178], [179, 181], [182, 192], [193, 194], [195, 199], [199, 200], [201, 207], [208, 213], [213, 214], [215, 218], [219, 220], [221, 226], [227, 231], [231, 232], [233, 235], [236, 241], [241, 242]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.024057697504758835, {u'tokens': [u'The', u'bushy', u'tail', u'is', u'also', u'the', u'source', u'of', u'the', u'word', u'for', u'fox', u'in', u'Welsh', u':', u'llwynog', u',', u'from', u'llwyn', u',', u'``', u'bush', u',', u'grove', u"''", u'Transactions', u'of', u'the', u'Philological', u'Society', u',', u'retrieved', u'August', u'31st', u'2008', u'.'], u'lemmas': [u'the', u'bushy', u'tail', u'be', u'also', u'the', u'source', u'of', u'the', u'word', u'for', u'fox', u'in', u'Welsh', u':', u'llwynog', u',', u'from', u'llwyn', u',', u'``', u'bush', u',', u'grove', u"''", u'transaction', u'of', u'the', u'Philological', u'Society', u',', u'retrieve', u'August', u'31st', u'2008', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u':', u'NN', u',', u'IN', u'NN', u',', u'``', u'NN', u',', u'NN', u"''", u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBD', u'NNP', u'CD', u'CD', u'.'], u'char_offsets': [[850, 853], [854, 859], [860, 864], [865, 867], [868, 872], [873, 876], [877, 883], [884, 886], [887, 890], [891, 895], [896, 899], [900, 903], [904, 906], [907, 912], [912, 913], [914, 921], [921, 922], [923, 927], [928, 933], [933, 934], [935, 936], [936, 940], [940, 941], [942, 947], [947, 948], [951, 963], [964, 966], [967, 970], [971, 983], [984, 991], [991, 992], [993, 1002], [1003, 1009], [1010, 1014], [1015, 1019], [1020, 1021]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.020997542887926102, {u'tokens': [u'By', u'far', u'the', u'most', u'common', u'and', u'widespread', u'species', u'of', u'fox', u'is', u'the', u'red', u'fox', u'-LRB-', u'Vulpes', u'vulpes', u'-RRB-', u',', u'although', u'various', u'species', u'are', u'found', u'on', u'almost', u'every', u'continent', u'.'], u'lemmas': [u'by', u'far', u'the', u'most', u'common', u'and', u'widespread', u'species', u'of', u'fox', u'be', u'the', u'red', u'fox', u'-lrb-', u'Vulpes', u'vulpe', u'-rrb-', u',', u'although', u'various', u'species', u'be', u'find', u'on', u'almost', u'every', u'continent', u'.'], u'pos': [u'IN', u'RB', u'DT', u'RBS', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NNS', u'-RRB-', u',', u'IN', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'RB', u'DT', u'NN', u'.'], u'char_offsets': [[243, 245], [246, 249], [250, 253], [254, 258], [259, 265], [266, 269], [270, 280], [281, 288], [289, 291], [292, 295], [296, 298], [299, 302], [303, 306], [307, 310], [311, 312], [312, 318], [319, 325], [325, 326], [326, 327], [328, 336], [337, 344], [345, 352], [353, 356], [357, 362], [363, 365], [366, 372], [373, 378], [379, 388], [388, 389]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.019254203885793686, {u'tokens': [u'The', u'presence', u'of', u'fox-like', u'carnivores', u'all', u'over', u'the', u'globe', u'has', u'led', u'to', u'their', u'appearance', u'in', u'the', u'popular', u'culture', u'and', u'folklore', u'of', u'many', u'nations', u',', u'tribes', u',', u'and', u'other', u'cultural', u'groups', u'-LRB-', u'see', u'Foxes', u'in', u'culture', u'-RRB-', u'.'], u'lemmas': [u'the', u'presence', u'of', u'fox-like', u'carnivore', u'all', u'over', u'the', u'globe', u'have', u'lead', u'to', u'they', u'appearance', u'in', u'the', u'popular', u'culture', u'and', u'folklore', u'of', u'many', u'nation', u',', u'tribe', u',', u'and', u'other', u'cultural', u'group', u'-lrb-', u'see', u'fox', u'in', u'culture', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NNS', u'DT', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'PRP$', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'NN', u'IN', u'JJ', u'NNS', u',', u'NNS', u',', u'CC', u'JJ', u'JJ', u'NNS', u'-LRB-', u'VB', u'NNS', u'IN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[390, 393], [394, 402], [403, 405], [406, 414], [415, 425], [426, 429], [430, 434], [435, 438], [439, 444], [445, 448], [449, 452], [453, 455], [456, 461], [462, 472], [473, 475], [476, 479], [480, 487], [488, 495], [496, 499], [500, 508], [509, 511], [512, 516], [517, 524], [524, 525], [526, 532], [532, 533], [534, 537], [538, 543], [544, 552], [553, 559], [560, 561], [561, 564], [565, 570], [571, 573], [574, 581], [581, 582], [582, 583]]}) 
answer: set([u'human', u'wary'])
['No Sure', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are foxes wary of humans?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cea8>.answer
_____________________________ test_yesno[param74] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9cef0>, (<src.tfidf.TF_IDF object at 0x7f56bc8b8d50>, set(['fox'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cef0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.29734170436859131, {u'tokens': [u'Foxes', u'are', u'normally', u'extremely', u'wary', u'of', u'humans', u'and', u'are', u'not', u'kept', u'as', u'pets', u'-LRB-', u'with', u'the', u'exception', u'of', u'the', u'fennec', u'-RRB-', u';', u'however', u',', u'the', u'silver', u'fox', u'was', u'successfully', u'domesticated', u'in', u'Russia', u'after', u'a', u'45', u'year', u'selective', u'breeding', u'program', u'.'], u'lemmas': [u'fox', u'be', u'normally', u'extremely', u'wary', u'of', u'human', u'and', u'be', u'not', u'keep', u'as', u'pet', u'-lrb-', u'with', u'the', u'exception', u'of', u'the', u'fennec', u'-rrb-', u';', u'however', u',', u'the', u'silver', u'fox', u'be', u'successfully', u'domesticate', u'in', u'Russia', u'after', u'a', u'45', u'year', u'selective', u'breed', u'program', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'RB', u'JJ', u'IN', u'NNS', u'CC', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'-LRB-', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'-RRB-', u':', u'RB', u',', u'DT', u'NN', u'NN', u'VBD', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'DT', u'CD', u'NN', u'JJ', u'VBG', u'NN', u'.'], u'char_offsets': [[2454, 2459], [2460, 2463], [2464, 2472], [2473, 2482], [2483, 2487], [2488, 2490], [2491, 2497], [2498, 2501], [2502, 2505], [2506, 2509], [2510, 2514], [2515, 2517], [2518, 2522], [2523, 2524], [2524, 2528], [2529, 2532], [2533, 2542], [2543, 2545], [2546, 2549], [2550, 2556], [2556, 2557], [2557, 2558], [2559, 2566], [2566, 2567], [2568, 2571], [2572, 2578], [2579, 2582], [2583, 2586], [2587, 2599], [2600, 2612], [2613, 2615], [2616, 2622], [2623, 2628], [2629, 2630], [2631, 2633], [2634, 2638], [2639, 2648], [2649, 2657], [2658, 2665], [2665, 2666]]}) 
answer: set([])
candidate Sentence: (0.18005383014678955, {u'tokens': [u'Fox', u'attacks', u'on', u'humans', u'are', u'not', u'common', u'but', u'have', u'been', u'reported', u'.'], u'lemmas': [u'Fox', u'attack', u'on', u'human', u'be', u'not', u'common', u'but', u'have', u'be', u'report', u'.'], u'pos': [u'NNP', u'NNS', u'IN', u'NNS', u'VBP', u'RB', u'JJ', u'CC', u'VBP', u'VBN', u'VBN', u'.'], u'char_offsets': [[5639, 5642], [5643, 5650], [5651, 5653], [5654, 5660], [5661, 5664], [5665, 5668], [5669, 5675], [5676, 5679], [5680, 5684], [5685, 5689], [5690, 5698], [5698, 5699]]}) 
answer: set([u'wary'])
candidate Sentence: (0.14953593909740448, {u'tokens': [u'The', u'first', u'example', u'of', u'the', u'introduction', u'of', u'the', u'fox', u'into', u'a', u'new', u'habitat', u'by', u'humans', u'seems', u'to', u'be', u'Neolithic', u'Cyprus', u'.'], u'lemmas': [u'the', u'first', u'example', u'of', u'the', u'introduction', u'of', u'the', u'fox', u'into', u'a', u'new', u'habitat', u'by', u'human', u'seem', u'to', u'be', u'neolithic', u'Cyprus', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'TO', u'VB', u'JJ', u'NNP', u'.'], u'char_offsets': [[5423, 5426], [5427, 5432], [5433, 5440], [5441, 5443], [5444, 5447], [5448, 5460], [5461, 5463], [5464, 5467], [5468, 5471], [5472, 5476], [5477, 5478], [5479, 5482], [5483, 5490], [5491, 5493], [5494, 5500], [5501, 5506], [5507, 5509], [5510, 5512], [5513, 5522], [5523, 5529], [5529, 5530]]}) 
answer: set([u'wary'])
candidate Sentence: (0.10498324781656265, {u'tokens': [u'Foxes', u'are', u'readily', u'found', u'in', u'cities', u'and', u'cultivated', u'areas', u'and', u'-LRB-', u'depending', u'upon', u'species', u'-RRB-', u'seem', u'to', u'adapt', u'reasonably', u'well', u'to', u'human', u'presence', u'.'], u'lemmas': [u'fox', u'be', u'readily', u'find', u'in', u'city', u'and', u'cultivate', u'area', u'and', u'-lrb-', u'depend', u'upon', u'species', u'-rrb-', u'seem', u'to', u'adapt', u'reasonably', u'well', u'to', u'human', u'presence', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'CC', u'VBN', u'NNS', u'CC', u'-LRB-', u'VBG', u'IN', u'NNS', u'-RRB-', u'VBP', u'TO', u'VB', u'RB', u'RB', u'TO', u'JJ', u'NN', u'.'], u'char_offsets': [[4206, 4211], [4212, 4215], [4216, 4223], [4224, 4229], [4230, 4232], [4233, 4239], [4240, 4243], [4244, 4254], [4255, 4260], [4261, 4264], [4265, 4266], [4266, 4275], [4276, 4280], [4281, 4288], [4288, 4289], [4290, 4294], [4295, 4297], [4298, 4303], [4304, 4314], [4315, 4319], [4320, 4322], [4323, 4328], [4329, 4337], [4337, 4338]]}) 
answer: set([u'wary'])
candidate Sentence: (0.030966438353061676, {u'tokens': [u'Most', u'species', u'of', u'foxes', u'generally', u'consume', u'around', u'1', u'kg', u'of', u'food', u'every', u'day', u'.'], u'lemmas': [u'most', u'species', u'of', u'fox', u'generally', u'consume', u'around', u'1', u'kg', u'of', u'food', u'every', u'day', u'.'], u'pos': [u'JJS', u'NNS', u'IN', u'NNS', u'RB', u'VBP', u'IN', u'CD', u'NN', u'IN', u'NN', u'DT', u'NN', u'.'], u'char_offsets': [[3988, 3992], [3993, 4000], [4001, 4003], [4004, 4009], [4010, 4019], [4020, 4027], [4028, 4034], [4035, 4036], [4037, 4039], [4040, 4042], [4043, 4047], [4048, 4053], [4054, 4057], [4057, 4058]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.027817778289318085, {u'tokens': [u'The', u'diet', u'of', u'foxes', u'is', u'largely', u'made', u'up', u'of', u'invertebrates', u',', u'however', u'it', u'also', u'includes', u'rodents', u',', u'rabbits', u'and', u'other', u'small', u'mammals', u',', u'reptiles', u',', u'-LRB-', u'such', u'as', u'snakes', u'-RRB-', u',', u'amphibians', u',', u'grasses', u',', u'berries', u',', u'fruit', u',', u'fish', u',', u'birds', u',', u'eggs', u',', u'and', u'all', u'other', u'kinds', u'of', u'small', u'animals', u'.'], u'lemmas': [u'the', u'diet', u'of', u'fox', u'be', u'largely', u'make', u'up', u'of', u'invertebrate', u',', u'however', u'it', u'also', u'include', u'rodent', u',', u'rabbit', u'and', u'other', u'small', u'mammal', u',', u'reptile', u',', u'-lrb-', u'such', u'as', u'snake', u'-rrb-', u',', u'amphibian', u',', u'grass', u',', u'berry', u',', u'fruit', u',', u'fish', u',', u'bird', u',', u'egg', u',', u'and', u'all', u'other', u'kind', u'of', u'small', u'animal', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNS', u'VBZ', u'RB', u'VBN', u'IN', u'IN', u'NNS', u',', u'RB', u'PRP', u'RB', u'VBZ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNS', u',', u'-LRB-', u'JJ', u'IN', u'NNS', u'-RRB-', u',', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'NN', u',', u'NN', u',', u'NNS', u',', u'NNS', u',', u'CC', u'DT', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[3643, 3646], [3647, 3651], [3652, 3654], [3655, 3660], [3661, 3663], [3664, 3671], [3672, 3676], [3677, 3679], [3680, 3682], [3683, 3696], [3696, 3697], [3698, 3705], [3706, 3708], [3709, 3713], [3714, 3722], [3723, 3730], [3730, 3731], [3732, 3739], [3740, 3743], [3744, 3749], [3750, 3755], [3756, 3763], [3763, 3764], [3765, 3773], [3773, 3774], [3775, 3776], [3776, 3780], [3781, 3783], [3784, 3790], [3790, 3791], [3791, 3792], [3793, 3803], [3803, 3804], [3805, 3812], [3812, 3813], [3814, 3821], [3821, 3822], [3823, 3828], [3828, 3829], [3830, 3834], [3834, 3835], [3837, 3842], [3842, 3843], [3844, 3848], [3848, 3849], [3850, 3853], [3854, 3857], [3858, 3863], [3864, 3869], [3870, 3872], [3873, 3878], [3879, 3886], [3886, 3887]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.025297043845057487, {u'tokens': [u'A', u'fox', u'is', u'an', u'animal', u'belonging', u'to', u'any', u'one', u'of', u'about', u'27', u'species', u'-LRB-', u'of', u'which', u'only', u'12', u'actually', u'belong', u'to', u'the', u'Vulpes', u'genus', u',', u'or', u'`', u'true', u'foxes', u"'", u'-RRB-', u'of', u'small', u'to', u'medium-sized', u'canids', u',', u'characterized', u'by', u'possessing', u'a', u'long', u',', u'narrow', u'snout', u',', u'and', u'a', u'bushy', u'tail', u',', u'or', u'brush', u'.'], u'lemmas': [u'a', u'fox', u'be', u'a', u'animal', u'belong', u'to', u'any', u'one', u'of', u'about', u'27', u'species', u'-lrb-', u'of', u'which', u'only', u'12', u'actually', u'belong', u'to', u'the', u'Vulpes', u'genus', u',', u'or', u'`', u'true', u'fox', u"'", u'-rrb-', u'of', u'small', u'to', u'medium-sized', u'canid', u',', u'characterize', u'by', u'possess', u'a', u'long', u',', u'narrow', u'snout', u',', u'and', u'a', u'bushy', u'tail', u',', u'or', u'brush', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'VBG', u'TO', u'DT', u'CD', u'IN', u'IN', u'CD', u'NNS', u'-LRB-', u'IN', u'WDT', u'RB', u'CD', u'RB', u'VBP', u'TO', u'DT', u'NNP', u'NN', u',', u'CC', u'``', u'JJ', u'NNS', u'POS', u'-RRB-', u'IN', u'JJ', u'TO', u'JJ', u'NNS', u',', u'VBN', u'IN', u'VBG', u'DT', u'RB', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'JJ', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[0, 1], [2, 5], [6, 8], [9, 11], [12, 18], [19, 28], [29, 31], [32, 35], [36, 39], [40, 42], [43, 48], [49, 51], [52, 59], [60, 61], [61, 63], [64, 69], [70, 74], [75, 77], [78, 86], [87, 93], [94, 96], [97, 100], [101, 107], [108, 113], [113, 114], [115, 117], [118, 119], [119, 123], [124, 129], [129, 130], [130, 131], [132, 134], [135, 140], [141, 143], [144, 156], [157, 163], [163, 164], [165, 178], [179, 181], [182, 192], [193, 194], [195, 199], [199, 200], [201, 207], [208, 213], [213, 214], [215, 218], [219, 220], [221, 226], [227, 231], [231, 232], [233, 235], [236, 241], [241, 242]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.024057697504758835, {u'tokens': [u'The', u'bushy', u'tail', u'is', u'also', u'the', u'source', u'of', u'the', u'word', u'for', u'fox', u'in', u'Welsh', u':', u'llwynog', u',', u'from', u'llwyn', u',', u'``', u'bush', u',', u'grove', u"''", u'Transactions', u'of', u'the', u'Philological', u'Society', u',', u'retrieved', u'August', u'31st', u'2008', u'.'], u'lemmas': [u'the', u'bushy', u'tail', u'be', u'also', u'the', u'source', u'of', u'the', u'word', u'for', u'fox', u'in', u'Welsh', u':', u'llwynog', u',', u'from', u'llwyn', u',', u'``', u'bush', u',', u'grove', u"''", u'transaction', u'of', u'the', u'Philological', u'Society', u',', u'retrieve', u'August', u'31st', u'2008', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u':', u'NN', u',', u'IN', u'NN', u',', u'``', u'NN', u',', u'NN', u"''", u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'VBD', u'NNP', u'CD', u'CD', u'.'], u'char_offsets': [[850, 853], [854, 859], [860, 864], [865, 867], [868, 872], [873, 876], [877, 883], [884, 886], [887, 890], [891, 895], [896, 899], [900, 903], [904, 906], [907, 912], [912, 913], [914, 921], [921, 922], [923, 927], [928, 933], [933, 934], [935, 936], [936, 940], [940, 941], [942, 947], [947, 948], [951, 963], [964, 966], [967, 970], [971, 983], [984, 991], [991, 992], [993, 1002], [1003, 1009], [1010, 1014], [1015, 1019], [1020, 1021]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.020997542887926102, {u'tokens': [u'By', u'far', u'the', u'most', u'common', u'and', u'widespread', u'species', u'of', u'fox', u'is', u'the', u'red', u'fox', u'-LRB-', u'Vulpes', u'vulpes', u'-RRB-', u',', u'although', u'various', u'species', u'are', u'found', u'on', u'almost', u'every', u'continent', u'.'], u'lemmas': [u'by', u'far', u'the', u'most', u'common', u'and', u'widespread', u'species', u'of', u'fox', u'be', u'the', u'red', u'fox', u'-lrb-', u'Vulpes', u'vulpe', u'-rrb-', u',', u'although', u'various', u'species', u'be', u'find', u'on', u'almost', u'every', u'continent', u'.'], u'pos': [u'IN', u'RB', u'DT', u'RBS', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'-LRB-', u'NNP', u'NNS', u'-RRB-', u',', u'IN', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'RB', u'DT', u'NN', u'.'], u'char_offsets': [[243, 245], [246, 249], [250, 253], [254, 258], [259, 265], [266, 269], [270, 280], [281, 288], [289, 291], [292, 295], [296, 298], [299, 302], [303, 306], [307, 310], [311, 312], [312, 318], [319, 325], [325, 326], [326, 327], [328, 336], [337, 344], [345, 352], [353, 356], [357, 362], [363, 365], [366, 372], [373, 378], [379, 388], [388, 389]]}) 
answer: set([u'human', u'wary'])
candidate Sentence: (0.019254203885793686, {u'tokens': [u'The', u'presence', u'of', u'fox-like', u'carnivores', u'all', u'over', u'the', u'globe', u'has', u'led', u'to', u'their', u'appearance', u'in', u'the', u'popular', u'culture', u'and', u'folklore', u'of', u'many', u'nations', u',', u'tribes', u',', u'and', u'other', u'cultural', u'groups', u'-LRB-', u'see', u'Foxes', u'in', u'culture', u'-RRB-', u'.'], u'lemmas': [u'the', u'presence', u'of', u'fox-like', u'carnivore', u'all', u'over', u'the', u'globe', u'have', u'lead', u'to', u'they', u'appearance', u'in', u'the', u'popular', u'culture', u'and', u'folklore', u'of', u'many', u'nation', u',', u'tribe', u',', u'and', u'other', u'cultural', u'group', u'-lrb-', u'see', u'fox', u'in', u'culture', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NNS', u'DT', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'PRP$', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'NN', u'IN', u'JJ', u'NNS', u',', u'NNS', u',', u'CC', u'JJ', u'JJ', u'NNS', u'-LRB-', u'VB', u'NNS', u'IN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[390, 393], [394, 402], [403, 405], [406, 414], [415, 425], [426, 429], [430, 434], [435, 438], [439, 444], [445, 448], [449, 452], [453, 455], [456, 461], [462, 472], [473, 475], [476, 479], [480, 487], [488, 495], [496, 499], [500, 508], [509, 511], [512, 516], [517, 524], [524, 525], [526, 532], [532, 533], [534, 537], [538, 543], [544, 552], [553, 559], [560, 561], [561, 564], [565, 570], [571, 573], [574, 581], [581, 582], [582, 583]]}) 
answer: set([u'human', u'wary'])
['No Sure', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are foxes wary of humans?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9cef0>.answer
_____________________________ test_yesno[param81] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9d128>, (<src.tfidf.TF_IDF object at 0x7f56baf23cd0>, set(['giraffe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d128>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33776563405990601, {u'tokens': [u'The', u'mother', u'gives', u'birth', u'standing', u'up', u'and', u'the', u'embryonic', u'sack', u'usually', u'bursts', u'when', u'the', u'baby', u'falls', u'to', u'the', u'ground', u'.'], u'lemmas': [u'the', u'mother', u'give', u'birth', u'standing', u'up', u'and', u'the', u'embryonic', u'sack', u'usually', u'burst', u'when', u'the', u'baby', u'fall', u'to', u'the', u'ground', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NN', u'NN', u'RB', u'CC', u'DT', u'JJ', u'NN', u'RB', u'NNS', u'WRB', u'DT', u'NN', u'VBZ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[9759, 9762], [9763, 9769], [9770, 9775], [9776, 9781], [9782, 9790], [9791, 9793], [9794, 9797], [9798, 9801], [9802, 9811], [9812, 9816], [9817, 9824], [9825, 9831], [9832, 9836], [9837, 9840], [9841, 9845], [9846, 9851], [9852, 9854], [9855, 9858], [9859, 9865], [9865, 9866]]}) 
answer: set([u'stand'])
candidate Sentence: (0.21404953300952911, {u'tokens': [u'Females', u'are', u'generally', u'slightly', u'shorter', u',', u'and', u'weigh', u'less', u'than', u'the', u'males', u'do', u'.'], u'lemmas': [u'female', u'be', u'generally', u'slightly', u'shorter', u',', u'and', u'weigh', u'less', u'than', u'the', u'male', u'do', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'RB', u'JJR', u',', u'CC', u'VB', u'JJR', u'IN', u'DT', u'NNS', u'VBP', u'.'], u'char_offsets': [[431, 438], [439, 442], [443, 452], [453, 461], [462, 469], [469, 470], [471, 474], [475, 480], [481, 485], [486, 490], [491, 494], [495, 500], [501, 503], [503, 504]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.16787537932395935, {u'tokens': [u'Males', u'sometimes', u'develop', u'calcium', u'deposits', u'which', u'form', u'bumps', u'on', u'their', u'skull', u'as', u'they', u'age', u',', u'which', u'can', u'give', u'the', u'appearance', u'of', u'up', u'to', u'three', u'additional', u'horns', u'.'], u'lemmas': [u'male', u'sometimes', u'develop', u'calcium', u'deposit', u'which', u'form', u'bump', u'on', u'they', u'skull', u'as', u'they', u'age', u',', u'which', u'can', u'give', u'the', u'appearance', u'of', u'up', u'to', u'three', u'additional', u'horn', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'NN', u'NNS', u'WDT', u'VBP', u'NNS', u'IN', u'PRP$', u'NN', u'IN', u'PRP', u'NN', u',', u'WDT', u'MD', u'VB', u'DT', u'NN', u'IN', u'RB', u'TO', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[6759, 6764], [6765, 6774], [6775, 6782], [6783, 6790], [6791, 6799], [6800, 6805], [6806, 6810], [6811, 6816], [6817, 6819], [6820, 6825], [6826, 6831], [6832, 6834], [6835, 6839], [6840, 6843], [6843, 6844], [6845, 6850], [6851, 6854], [6855, 6859], [6860, 6863], [6864, 6874], [6875, 6877], [6878, 6880], [6881, 6883], [6884, 6889], [6890, 6900], [6901, 6906], [6906, 6907]]}) 
answer: set([u'stand', u'birth'])
candidate Sentence: (0.12437704205513, {u'tokens': [u'Due', u'to', u'a', u'subconscious', u'response', u'to', u'suckle', u'milk', u'from', u'their', u'mother', u',', u'something', u'which', u'many', u'human-reared', u'giraffes', u'and', u'other', u'captive', u'animals', u'do', u'not', u'experience', u',', u'giraffes', u'resort', u'instead', u'to', u'excessive', u'tongue', u'use', u'on', u'inanimate', u'objects', u'.'], u'lemmas': [u'due', u'to', u'a', u'subconscious', u'response', u'to', u'suckle', u'milk', u'from', u'they', u'mother', u',', u'something', u'which', u'many', u'human-reared', u'giraffe', u'and', u'other', u'captive', u'animal', u'do', u'not', u'experience', u',', u'giraffe', u'resort', u'instead', u'to', u'excessive', u'tongue', u'use', u'on', u'inanimate', u'object', u'.'], u'pos': [u'JJ', u'TO', u'DT', u'NN', u'NN', u'TO', u'VB', u'NN', u'IN', u'PRP$', u'NN', u',', u'NN', u'WDT', u'JJ', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u',', u'NNS', u'VBP', u'RB', u'TO', u'JJ', u'NN', u'NN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[12504, 12507], [12508, 12510], [12511, 12512], [12513, 12525], [12526, 12534], [12535, 12537], [12538, 12544], [12545, 12549], [12550, 12554], [12555, 12560], [12561, 12567], [12567, 12568], [12569, 12578], [12579, 12584], [12585, 12589], [12590, 12602], [12603, 12611], [12612, 12615], [12616, 12621], [12622, 12629], [12630, 12637], [12638, 12640], [12641, 12644], [12645, 12655], [12655, 12656], [12657, 12665], [12666, 12672], [12673, 12680], [12681, 12683], [12684, 12693], [12694, 12700], [12701, 12704], [12705, 12707], [12708, 12717], [12718, 12725], [12725, 12726]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.10049965232610703, {u'tokens': [u'The', u'proportion', u'of', u'same', u'sex', u'activities', u'varied', u'between', u'30', u'and', u'75', u'%', u',', u'and', u'at', u'any', u'given', u'time', u'one', u'in', u'twenty', u'males', u'were', u'engaged', u'in', u'non-combative', u'necking', u'behaviour', u'with', u'another', u'male', u'.'], u'lemmas': [u'the', u'proportion', u'of', u'same', u'sex', u'activity', u'vary', u'between', u'30', u'and', u'75', u'%', u',', u'and', u'at', u'any', u'give', u'time', u'one', u'in', u'twenty', u'male', u'be', u'engage', u'in', u'non-combative', u'necking', u'behaviour', u'with', u'another', u'male', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NN', u'NNS', u'VBD', u'IN', u'CD', u'CC', u'CD', u'NN', u',', u'CC', u'IN', u'DT', u'VBN', u'NN', u'CD', u'IN', u'CD', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[11738, 11741], [11742, 11752], [11753, 11755], [11756, 11760], [11761, 11764], [11765, 11775], [11776, 11782], [11783, 11790], [11791, 11793], [11794, 11797], [11798, 11800], [11800, 11801], [11801, 11802], [11803, 11806], [11807, 11809], [11810, 11813], [11814, 11819], [11820, 11824], [11825, 11828], [11829, 11831], [11832, 11838], [11839, 11844], [11845, 11849], [11850, 11857], [11858, 11860], [11861, 11874], [11875, 11882], [11883, 11892], [11893, 11897], [11898, 11905], [11906, 11910], [11910, 11911]]}) 
answer: set([u'stand', u'birth'])
candidate Sentence: (0.090754248201847076, {u'tokens': [u'*', u'Longrack', u'of', u'the', u'Transformers', u'universe', u'*', u'Girafarig', u'from', u'the', u'Pokmon', u'franchise', u'*', u'Video', u'-', u'Giraffe', u'birth', u'at', u'the', u'San', u'Francisco', u'Zoo', u'*', u'Giraffes', u':', u'Wildlife', u'summary', u'from', u'the', u'African', u'Wildlife', u'Foundation', u'*', u'ARKive', u'-', u'images', u'and', u'movies', u'of', u'the', u'giraffe', u'-LRB-', u'Giraffa', u'camelopardalis', u'-RRB-', u'.'], u'lemmas': [u'*', u'longrack', u'of', u'the', u'Transformers', u'universe', u'*', u'Girafarig', u'from', u'the', u'Pokmon', u'franchise', u'*', u'Video', u'-', u'Giraffe', u'birth', u'at', u'the', u'San', u'Francisco', u'zoo', u'*', u'Giraffes', u':', u'Wildlife', u'summary', u'from', u'the', u'african', u'Wildlife', u'Foundation', u'*', u'arkive', u'-', u'image', u'and', u'movie', u'of', u'the', u'giraffe', u'-lrb-', u'giraffa', u'camelopardali', u'-rrb-', u'.'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNPS', u'NN', u'SYM', u'NNP', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u':', u'NNP', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'SYM', u'NNPS', u':', u'NNP', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'SYM', u'NN', u':', u'NNS', u'CC', u'NNS', u'IN', u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[17635, 17636], [17637, 17645], [17646, 17648], [17649, 17652], [17653, 17665], [17666, 17674], [17675, 17676], [17677, 17686], [17687, 17691], [17692, 17695], [17696, 17702], [17703, 17712], [17713, 17714], [17715, 17720], [17721, 17722], [17723, 17730], [17731, 17736], [17737, 17739], [17740, 17743], [17744, 17747], [17748, 17757], [17758, 17761], [17762, 17763], [17764, 17772], [17772, 17773], [17774, 17782], [17783, 17790], [17791, 17795], [17796, 17799], [17800, 17807], [17808, 17816], [17817, 17827], [17828, 17829], [17829, 17835], [17836, 17837], [17839, 17845], [17846, 17849], [17850, 17856], [17857, 17859], [17860, 17863], [17864, 17871], [17872, 17873], [17873, 17880], [17881, 17895], [17895, 17896], [17896, 17897]]}) 
answer: set([u'stand', u'give'])
candidate Sentence: (0.081845648586750031, {u'tokens': [u'In', u'one', u'study', u',', u'up', u'to', u'94', u'%', u'of', u'observed', u'mounting', u'incidents', u'took', u'place', u'between', u'two', u'males', u'.'], u'lemmas': [u'in', u'one', u'study', u',', u'up', u'to', u'94', u'%', u'of', u'observe', u'mount', u'incident', u'take', u'place', u'between', u'two', u'male', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'RB', u'TO', u'CD', u'NN', u'IN', u'VBN', u'VBG', u'NNS', u'VBD', u'NN', u'IN', u'CD', u'NNS', u'.'], u'char_offsets': [[11653, 11655], [11656, 11659], [11660, 11665], [11665, 11666], [11667, 11669], [11670, 11672], [11673, 11675], [11675, 11676], [11677, 11679], [11680, 11688], [11689, 11697], [11698, 11707], [11708, 11712], [11713, 11718], [11719, 11726], [11727, 11730], [11731, 11736], [11736, 11737]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.081828847527503967, {u'tokens': [u'The', u'pace', u'of', u'the', u'giraffe', u'is', u'an', u'amble', u',', u'though', u'when', u'pursued', u'it', u'can', u'run', u'extremely', u'fast', u',', u'up', u'to', u'55', u'km/h', u'.'], u'lemmas': [u'the', u'pace', u'of', u'the', u'giraffe', u'be', u'a', u'amble', u',', u'though', u'when', u'pursue', u'it', u'can', u'run', u'extremely', u'fast', u',', u'up', u'to', u'55', u'km/h', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'VB', u',', u'IN', u'WRB', u'VBN', u'PRP', u'MD', u'VB', u'RB', u'RB', u',', u'IN', u'TO', u'CD', u'NN', u'.'], u'char_offsets': [[7429, 7432], [7433, 7437], [7438, 7440], [7441, 7444], [7445, 7452], [7453, 7455], [7456, 7458], [7459, 7464], [7464, 7465], [7466, 7472], [7473, 7477], [7478, 7485], [7486, 7488], [7489, 7492], [7493, 7496], [7497, 7506], [7507, 7511], [7511, 7512], [7513, 7515], [7516, 7518], [7519, 7521], [7522, 7526], [7526, 7527]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.073821954429149628, {u'tokens': [u'Another', u'function', u'of', u'necking', u'is', u'sexual', u',', u'in', u'which', u'two', u'males', u'caress', u'and', u'court', u'each', u'other', u',', u'leading', u'up', u'to', u'mounting', u'and', u'climax', u'.'], u'lemmas': [u'another', u'function', u'of', u'necking', u'be', u'sexual', u',', u'in', u'which', u'two', u'male', u'caress', u'and', u'court', u'each', u'other', u',', u'lead', u'up', u'to', u'mount', u'and', u'climax', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u',', u'IN', u'WDT', u'CD', u'NNS', u'VBP', u'CC', u'VBP', u'DT', u'JJ', u',', u'VBG', u'RP', u'TO', u'VBG', u'CC', u'NN', u'.'], u'char_offsets': [[11357, 11364], [11365, 11373], [11374, 11376], [11377, 11384], [11385, 11387], [11388, 11394], [11394, 11395], [11396, 11398], [11399, 11404], [11405, 11408], [11409, 11414], [11415, 11421], [11422, 11425], [11426, 11431], [11432, 11436], [11437, 11442], [11442, 11443], [11444, 11451], [11452, 11454], [11455, 11457], [11458, 11466], [11467, 11470], [11471, 11477], [11477, 11478]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.063735254108905792, {u'tokens': [u'Males', u'can', u'be', u'4.8', u'to', u'5.5', u'metres', u'-LRB-', u'16', u'to', u'18', u'feet', u'-RRB-', u'tall', u'and', u'weigh', u'up', u'to', u'1,700', u'kilograms', u'-LRB-', u'3,800', u'pounds', u'-RRB-', u'.'], u'lemmas': [u'male', u'can', u'be', u'4.8', u'to', u'5.5', u'metre', u'-lrb-', u'16', u'to', u'18', u'foot', u'-rrb-', u'tall', u'and', u'weigh', u'up', u'to', u'1,700', u'kilogram', u'-lrb-', u'3,800', u'pound', u'-rrb-', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'CD', u'TO', u'CD', u'NNS', u'-LRB-', u'CD', u'TO', u'CD', u'NNS', u'-RRB-', u'JJ', u'CC', u'VB', u'RP', u'TO', u'CD', u'NNS', u'-LRB-', u'CD', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[151, 156], [157, 160], [161, 163], [164, 167], [168, 170], [171, 174], [175, 181], [182, 183], [183, 185], [186, 188], [189, 191], [192, 196], [196, 197], [198, 202], [203, 206], [207, 212], [213, 215], [216, 218], [219, 224], [225, 234], [235, 236], [236, 241], [242, 248], [248, 249], [249, 250]]}) 
answer: set([u'stand', u'birth', u'give'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do giraffes give birth standing up?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d128>.answer
_____________________________ test_yesno[param82] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9d170>, (<src.tfidf.TF_IDF object at 0x7f56baf23cd0>, set(['giraffe'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d170>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33776563405990601, {u'tokens': [u'The', u'mother', u'gives', u'birth', u'standing', u'up', u'and', u'the', u'embryonic', u'sack', u'usually', u'bursts', u'when', u'the', u'baby', u'falls', u'to', u'the', u'ground', u'.'], u'lemmas': [u'the', u'mother', u'give', u'birth', u'standing', u'up', u'and', u'the', u'embryonic', u'sack', u'usually', u'burst', u'when', u'the', u'baby', u'fall', u'to', u'the', u'ground', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NN', u'NN', u'RB', u'CC', u'DT', u'JJ', u'NN', u'RB', u'NNS', u'WRB', u'DT', u'NN', u'VBZ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[9759, 9762], [9763, 9769], [9770, 9775], [9776, 9781], [9782, 9790], [9791, 9793], [9794, 9797], [9798, 9801], [9802, 9811], [9812, 9816], [9817, 9824], [9825, 9831], [9832, 9836], [9837, 9840], [9841, 9845], [9846, 9851], [9852, 9854], [9855, 9858], [9859, 9865], [9865, 9866]]}) 
answer: set([u'stand'])
candidate Sentence: (0.21404953300952911, {u'tokens': [u'Females', u'are', u'generally', u'slightly', u'shorter', u',', u'and', u'weigh', u'less', u'than', u'the', u'males', u'do', u'.'], u'lemmas': [u'female', u'be', u'generally', u'slightly', u'shorter', u',', u'and', u'weigh', u'less', u'than', u'the', u'male', u'do', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'RB', u'JJR', u',', u'CC', u'VB', u'JJR', u'IN', u'DT', u'NNS', u'VBP', u'.'], u'char_offsets': [[431, 438], [439, 442], [443, 452], [453, 461], [462, 469], [469, 470], [471, 474], [475, 480], [481, 485], [486, 490], [491, 494], [495, 500], [501, 503], [503, 504]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.16787537932395935, {u'tokens': [u'Males', u'sometimes', u'develop', u'calcium', u'deposits', u'which', u'form', u'bumps', u'on', u'their', u'skull', u'as', u'they', u'age', u',', u'which', u'can', u'give', u'the', u'appearance', u'of', u'up', u'to', u'three', u'additional', u'horns', u'.'], u'lemmas': [u'male', u'sometimes', u'develop', u'calcium', u'deposit', u'which', u'form', u'bump', u'on', u'they', u'skull', u'as', u'they', u'age', u',', u'which', u'can', u'give', u'the', u'appearance', u'of', u'up', u'to', u'three', u'additional', u'horn', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'NN', u'NNS', u'WDT', u'VBP', u'NNS', u'IN', u'PRP$', u'NN', u'IN', u'PRP', u'NN', u',', u'WDT', u'MD', u'VB', u'DT', u'NN', u'IN', u'RB', u'TO', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[6759, 6764], [6765, 6774], [6775, 6782], [6783, 6790], [6791, 6799], [6800, 6805], [6806, 6810], [6811, 6816], [6817, 6819], [6820, 6825], [6826, 6831], [6832, 6834], [6835, 6839], [6840, 6843], [6843, 6844], [6845, 6850], [6851, 6854], [6855, 6859], [6860, 6863], [6864, 6874], [6875, 6877], [6878, 6880], [6881, 6883], [6884, 6889], [6890, 6900], [6901, 6906], [6906, 6907]]}) 
answer: set([u'stand', u'birth'])
candidate Sentence: (0.12437704205513, {u'tokens': [u'Due', u'to', u'a', u'subconscious', u'response', u'to', u'suckle', u'milk', u'from', u'their', u'mother', u',', u'something', u'which', u'many', u'human-reared', u'giraffes', u'and', u'other', u'captive', u'animals', u'do', u'not', u'experience', u',', u'giraffes', u'resort', u'instead', u'to', u'excessive', u'tongue', u'use', u'on', u'inanimate', u'objects', u'.'], u'lemmas': [u'due', u'to', u'a', u'subconscious', u'response', u'to', u'suckle', u'milk', u'from', u'they', u'mother', u',', u'something', u'which', u'many', u'human-reared', u'giraffe', u'and', u'other', u'captive', u'animal', u'do', u'not', u'experience', u',', u'giraffe', u'resort', u'instead', u'to', u'excessive', u'tongue', u'use', u'on', u'inanimate', u'object', u'.'], u'pos': [u'JJ', u'TO', u'DT', u'NN', u'NN', u'TO', u'VB', u'NN', u'IN', u'PRP$', u'NN', u',', u'NN', u'WDT', u'JJ', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u',', u'NNS', u'VBP', u'RB', u'TO', u'JJ', u'NN', u'NN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[12504, 12507], [12508, 12510], [12511, 12512], [12513, 12525], [12526, 12534], [12535, 12537], [12538, 12544], [12545, 12549], [12550, 12554], [12555, 12560], [12561, 12567], [12567, 12568], [12569, 12578], [12579, 12584], [12585, 12589], [12590, 12602], [12603, 12611], [12612, 12615], [12616, 12621], [12622, 12629], [12630, 12637], [12638, 12640], [12641, 12644], [12645, 12655], [12655, 12656], [12657, 12665], [12666, 12672], [12673, 12680], [12681, 12683], [12684, 12693], [12694, 12700], [12701, 12704], [12705, 12707], [12708, 12717], [12718, 12725], [12725, 12726]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.10049965232610703, {u'tokens': [u'The', u'proportion', u'of', u'same', u'sex', u'activities', u'varied', u'between', u'30', u'and', u'75', u'%', u',', u'and', u'at', u'any', u'given', u'time', u'one', u'in', u'twenty', u'males', u'were', u'engaged', u'in', u'non-combative', u'necking', u'behaviour', u'with', u'another', u'male', u'.'], u'lemmas': [u'the', u'proportion', u'of', u'same', u'sex', u'activity', u'vary', u'between', u'30', u'and', u'75', u'%', u',', u'and', u'at', u'any', u'give', u'time', u'one', u'in', u'twenty', u'male', u'be', u'engage', u'in', u'non-combative', u'necking', u'behaviour', u'with', u'another', u'male', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NN', u'NNS', u'VBD', u'IN', u'CD', u'CC', u'CD', u'NN', u',', u'CC', u'IN', u'DT', u'VBN', u'NN', u'CD', u'IN', u'CD', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[11738, 11741], [11742, 11752], [11753, 11755], [11756, 11760], [11761, 11764], [11765, 11775], [11776, 11782], [11783, 11790], [11791, 11793], [11794, 11797], [11798, 11800], [11800, 11801], [11801, 11802], [11803, 11806], [11807, 11809], [11810, 11813], [11814, 11819], [11820, 11824], [11825, 11828], [11829, 11831], [11832, 11838], [11839, 11844], [11845, 11849], [11850, 11857], [11858, 11860], [11861, 11874], [11875, 11882], [11883, 11892], [11893, 11897], [11898, 11905], [11906, 11910], [11910, 11911]]}) 
answer: set([u'stand', u'birth'])
candidate Sentence: (0.090754248201847076, {u'tokens': [u'*', u'Longrack', u'of', u'the', u'Transformers', u'universe', u'*', u'Girafarig', u'from', u'the', u'Pokmon', u'franchise', u'*', u'Video', u'-', u'Giraffe', u'birth', u'at', u'the', u'San', u'Francisco', u'Zoo', u'*', u'Giraffes', u':', u'Wildlife', u'summary', u'from', u'the', u'African', u'Wildlife', u'Foundation', u'*', u'ARKive', u'-', u'images', u'and', u'movies', u'of', u'the', u'giraffe', u'-LRB-', u'Giraffa', u'camelopardalis', u'-RRB-', u'.'], u'lemmas': [u'*', u'longrack', u'of', u'the', u'Transformers', u'universe', u'*', u'Girafarig', u'from', u'the', u'Pokmon', u'franchise', u'*', u'Video', u'-', u'Giraffe', u'birth', u'at', u'the', u'San', u'Francisco', u'zoo', u'*', u'Giraffes', u':', u'Wildlife', u'summary', u'from', u'the', u'african', u'Wildlife', u'Foundation', u'*', u'arkive', u'-', u'image', u'and', u'movie', u'of', u'the', u'giraffe', u'-lrb-', u'giraffa', u'camelopardali', u'-rrb-', u'.'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNPS', u'NN', u'SYM', u'NNP', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u':', u'NNP', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'SYM', u'NNPS', u':', u'NNP', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'SYM', u'NN', u':', u'NNS', u'CC', u'NNS', u'IN', u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[17635, 17636], [17637, 17645], [17646, 17648], [17649, 17652], [17653, 17665], [17666, 17674], [17675, 17676], [17677, 17686], [17687, 17691], [17692, 17695], [17696, 17702], [17703, 17712], [17713, 17714], [17715, 17720], [17721, 17722], [17723, 17730], [17731, 17736], [17737, 17739], [17740, 17743], [17744, 17747], [17748, 17757], [17758, 17761], [17762, 17763], [17764, 17772], [17772, 17773], [17774, 17782], [17783, 17790], [17791, 17795], [17796, 17799], [17800, 17807], [17808, 17816], [17817, 17827], [17828, 17829], [17829, 17835], [17836, 17837], [17839, 17845], [17846, 17849], [17850, 17856], [17857, 17859], [17860, 17863], [17864, 17871], [17872, 17873], [17873, 17880], [17881, 17895], [17895, 17896], [17896, 17897]]}) 
answer: set([u'stand', u'give'])
candidate Sentence: (0.081845648586750031, {u'tokens': [u'In', u'one', u'study', u',', u'up', u'to', u'94', u'%', u'of', u'observed', u'mounting', u'incidents', u'took', u'place', u'between', u'two', u'males', u'.'], u'lemmas': [u'in', u'one', u'study', u',', u'up', u'to', u'94', u'%', u'of', u'observe', u'mount', u'incident', u'take', u'place', u'between', u'two', u'male', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'RB', u'TO', u'CD', u'NN', u'IN', u'VBN', u'VBG', u'NNS', u'VBD', u'NN', u'IN', u'CD', u'NNS', u'.'], u'char_offsets': [[11653, 11655], [11656, 11659], [11660, 11665], [11665, 11666], [11667, 11669], [11670, 11672], [11673, 11675], [11675, 11676], [11677, 11679], [11680, 11688], [11689, 11697], [11698, 11707], [11708, 11712], [11713, 11718], [11719, 11726], [11727, 11730], [11731, 11736], [11736, 11737]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.081828847527503967, {u'tokens': [u'The', u'pace', u'of', u'the', u'giraffe', u'is', u'an', u'amble', u',', u'though', u'when', u'pursued', u'it', u'can', u'run', u'extremely', u'fast', u',', u'up', u'to', u'55', u'km/h', u'.'], u'lemmas': [u'the', u'pace', u'of', u'the', u'giraffe', u'be', u'a', u'amble', u',', u'though', u'when', u'pursue', u'it', u'can', u'run', u'extremely', u'fast', u',', u'up', u'to', u'55', u'km/h', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'VB', u',', u'IN', u'WRB', u'VBN', u'PRP', u'MD', u'VB', u'RB', u'RB', u',', u'IN', u'TO', u'CD', u'NN', u'.'], u'char_offsets': [[7429, 7432], [7433, 7437], [7438, 7440], [7441, 7444], [7445, 7452], [7453, 7455], [7456, 7458], [7459, 7464], [7464, 7465], [7466, 7472], [7473, 7477], [7478, 7485], [7486, 7488], [7489, 7492], [7493, 7496], [7497, 7506], [7507, 7511], [7511, 7512], [7513, 7515], [7516, 7518], [7519, 7521], [7522, 7526], [7526, 7527]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.073821954429149628, {u'tokens': [u'Another', u'function', u'of', u'necking', u'is', u'sexual', u',', u'in', u'which', u'two', u'males', u'caress', u'and', u'court', u'each', u'other', u',', u'leading', u'up', u'to', u'mounting', u'and', u'climax', u'.'], u'lemmas': [u'another', u'function', u'of', u'necking', u'be', u'sexual', u',', u'in', u'which', u'two', u'male', u'caress', u'and', u'court', u'each', u'other', u',', u'lead', u'up', u'to', u'mount', u'and', u'climax', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u',', u'IN', u'WDT', u'CD', u'NNS', u'VBP', u'CC', u'VBP', u'DT', u'JJ', u',', u'VBG', u'RP', u'TO', u'VBG', u'CC', u'NN', u'.'], u'char_offsets': [[11357, 11364], [11365, 11373], [11374, 11376], [11377, 11384], [11385, 11387], [11388, 11394], [11394, 11395], [11396, 11398], [11399, 11404], [11405, 11408], [11409, 11414], [11415, 11421], [11422, 11425], [11426, 11431], [11432, 11436], [11437, 11442], [11442, 11443], [11444, 11451], [11452, 11454], [11455, 11457], [11458, 11466], [11467, 11470], [11471, 11477], [11477, 11478]]}) 
answer: set([u'stand', u'birth', u'give'])
candidate Sentence: (0.063735254108905792, {u'tokens': [u'Males', u'can', u'be', u'4.8', u'to', u'5.5', u'metres', u'-LRB-', u'16', u'to', u'18', u'feet', u'-RRB-', u'tall', u'and', u'weigh', u'up', u'to', u'1,700', u'kilograms', u'-LRB-', u'3,800', u'pounds', u'-RRB-', u'.'], u'lemmas': [u'male', u'can', u'be', u'4.8', u'to', u'5.5', u'metre', u'-lrb-', u'16', u'to', u'18', u'foot', u'-rrb-', u'tall', u'and', u'weigh', u'up', u'to', u'1,700', u'kilogram', u'-lrb-', u'3,800', u'pound', u'-rrb-', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'CD', u'TO', u'CD', u'NNS', u'-LRB-', u'CD', u'TO', u'CD', u'NNS', u'-RRB-', u'JJ', u'CC', u'VB', u'RP', u'TO', u'CD', u'NNS', u'-LRB-', u'CD', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[151, 156], [157, 160], [161, 163], [164, 167], [168, 170], [171, 174], [175, 181], [182, 183], [183, 185], [186, 188], [189, 191], [192, 196], [196, 197], [198, 202], [203, 206], [207, 212], [213, 215], [216, 218], [219, 224], [225, 234], [235, 236], [236, 241], [242, 248], [248, 249], [249, 250]]}) 
answer: set([u'stand', u'birth', u'give'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do giraffes give birth standing up?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d170>.answer
_____________________________ test_yesno[param93] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9d488>, (<src.tfidf.TF_IDF object at 0x7f56ba898d10>, set(['isaac', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool("Newton may have rejected the church's doctrine of the Trinity.") == True
E                +  where "Newton may have rejected the church's doctrine of the Trinity." = <src.question_processing.Question_parser instance at 0x7f56b8f9d488>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.75109744071960449, {u'tokens': [u'Newton', u'may', u'have', u'rejected', u'the', u'church', u"'s", u'doctrine', u'of', u'the', u'Trinity', u'.'], u'lemmas': [u'Newton', u'may', u'have', u'reject', u'the', u'church', u"'s", u'doctrine', u'of', u'the', u'Trinity', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'VBN', u'DT', u'NN', u'POS', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[17106, 17112], [17113, 17116], [17117, 17121], [17122, 17130], [17131, 17134], [17135, 17141], [17141, 17143], [17144, 17152], [17153, 17155], [17156, 17159], [17160, 17167], [17167, 17168]]}) 
answer: set([])
candidate Sentence: (0.12651337683200836, {u'tokens': [u'However', u',', u'the', u'terms', u'of', u'the', u'Lucasian', u'professorship', u'required', u'that', u'the', u'holder', u'not', u'be', u'active', u'in', u'the', u'church', u'-LRB-', u'presumably', u'so', u'as', u'to', u'have', u'more', u'time', u'for', u'science', u'-RRB-', u'.'], u'lemmas': [u'however', u',', u'the', u'term', u'of', u'the', u'lucasian', u'professorship', u'require', u'that', u'the', u'holder', u'not', u'be', u'active', u'in', u'the', u'church', u'-lrb-', u'presumably', u'so', u'as', u'to', u'have', u'more', u'time', u'for', u'science', u'-rrb-', u'.'], u'pos': [u'RB', u',', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'RB', u'VB', u'JJ', u'IN', u'DT', u'NN', u'-LRB-', u'RB', u'RB', u'IN', u'TO', u'VB', u'JJR', u'NN', u'IN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[7865, 7872], [7872, 7873], [7874, 7877], [7878, 7883], [7884, 7886], [7887, 7890], [7891, 7899], [7900, 7913], [7914, 7922], [7923, 7927], [7928, 7931], [7932, 7938], [7939, 7942], [7943, 7945], [7946, 7952], [7953, 7955], [7956, 7959], [7960, 7966], [7967, 7968], [7968, 7978], [7979, 7981], [7982, 7984], [7985, 7987], [7988, 7992], [7993, 7997], [7998, 8002], [8003, 8006], [8007, 8014], [8014, 8015], [8015, 8016]]}) 
answer: set([u'doctrine', u'trinity', u'reject'])
candidate Sentence: (0.12418209761381149, {u'tokens': [u'He', u'believed', u'in', u'a', u'rationally', u'immanent', u'world', u',', u'but', u'he', u'rejected', u'the', u'hylozoism', u'implicit', u'in', u'Leibniz', u'and', u'Baruch', u'Spinoza', u'.'], u'lemmas': [u'he', u'believe', u'in', u'a', u'rationally', u'immanent', u'world', u',', u'but', u'he', u'reject', u'the', u'hylozoism', u'implicit', u'in', u'leibniz', u'and', u'Baruch', u'Spinoza', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'RB', u'JJ', u'NN', u',', u'CC', u'PRP', u'VBD', u'DT', u'NN', u'JJ', u'IN', u'NN', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[17578, 17580], [17581, 17589], [17590, 17592], [17593, 17594], [17595, 17605], [17606, 17614], [17615, 17620], [17620, 17621], [17622, 17625], [17626, 17628], [17629, 17637], [17638, 17641], [17642, 17651], [17652, 17660], [17661, 17663], [17664, 17671], [17672, 17675], [17676, 17682], [17683, 17690], [17690, 17691]]}) 
answer: set([u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.11315339803695679, {u'tokens': [u'In', u'June', u'1661', u',', u'he', u'was', u'admitted', u'to', u'Trinity', u'College', u',', u'Cambridge', u'.'], u'lemmas': [u'in', u'June', u'1661', u',', u'he', u'be', u'admit', u'to', u'Trinity', u'College', u',', u'Cambridge', u'.'], u'pos': [u'IN', u'NNP', u'CD', u',', u'PRP', u'VBD', u'VBN', u'TO', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[4394, 4396], [4397, 4401], [4402, 4406], [4406, 4407], [4408, 4410], [4411, 4414], [4415, 4423], [4424, 4426], [4427, 4434], [4435, 4442], [4442, 4443], [4444, 4453], [4453, 4454]]}) 
answer: set([u'reject', u'doctrine', u'church'])
candidate Sentence: (0.11208727955818176, {u'tokens': [u'A', u'manuscript', u'he', u'sent', u'to', u'John', u'Locke', u'in', u'which', u'he', u'disputed', u'the', u'existence', u'of', u'the', u'Trinity', u'was', u'never', u'published', u'.'], u'lemmas': [u'a', u'manuscript', u'he', u'send', u'to', u'John', u'Locke', u'in', u'which', u'he', u'dispute', u'the', u'existence', u'of', u'the', u'Trinity', u'be', u'never', u'publish', u'.'], u'pos': [u'DT', u'NN', u'PRP', u'VBD', u'TO', u'NNP', u'NNP', u'IN', u'WDT', u'PRP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'VBD', u'RB', u'VBN', u'.'], u'char_offsets': [[13377, 13378], [13379, 13389], [13390, 13392], [13393, 13397], [13398, 13400], [13401, 13405], [13406, 13411], [13412, 13414], [13415, 13420], [13421, 13423], [13424, 13432], [13433, 13436], [13437, 13446], [13447, 13449], [13450, 13453], [13454, 13461], [13462, 13465], [13466, 13471], [13472, 13481], [13481, 13482]]}) 
answer: set([u'church', u'doctrine', u'reject'])
candidate Sentence: (0.098374851047992706, {u'tokens': [u'In', u'his', u'own', u'lifetime', u',', u'Newton', u'wrote', u'more', u'on', u'religion', u'than', u'he', u'did', u'on', u'natural', u'science', u'.'], u'lemmas': [u'in', u'he', u'own', u'lifetime', u',', u'Newton', u'write', u'more', u'on', u'religion', u'than', u'he', u'do', u'on', u'natural', u'science', u'.'], u'pos': [u'IN', u'PRP$', u'JJ', u'NN', u',', u'NNP', u'VBD', u'RBR', u'IN', u'NN', u'IN', u'PRP', u'VBD', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17495, 17497], [17498, 17501], [17502, 17505], [17506, 17514], [17514, 17515], [17516, 17522], [17523, 17528], [17529, 17533], [17534, 17536], [17537, 17545], [17546, 17550], [17551, 17553], [17554, 17557], [17558, 17560], [17561, 17568], [17569, 17576], [17576, 17577]]}) 
answer: set([u'reject', u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.098139390349388123, {u'tokens': [u'This', u'he', u'did', u'at', u'the', u'age', u'of', u'eighteen', u',', u'achieving', u'an', u'admirable', u'final', u'report', u'.'], u'lemmas': [u'this', u'he', u'do', u'at', u'the', u'age', u'of', u'eighteen', u',', u'achieve', u'a', u'admirable', u'final', u'report', u'.'], u'pos': [u'DT', u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u',', u'VBG', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[4321, 4325], [4326, 4328], [4329, 4332], [4333, 4335], [4336, 4339], [4340, 4343], [4344, 4346], [4347, 4355], [4355, 4356], [4357, 4366], [4367, 4369], [4370, 4379], [4380, 4385], [4386, 4392], [4392, 4393]]}) 
answer: set([u'reject', u'doctrine', u'trinity', u'church'])
candidate Sentence: (0.087450131773948669, {u'tokens': [u'God', u'governs', u'all', u'things', u'and', u'knows', u'all', u'that', u'is', u'or', u'can', u'be', u'done', u'.', u"''"], u'lemmas': [u'God', u'govern', u'all', u'thing', u'and', u'know', u'all', u'that', u'be', u'or', u'can', u'be', u'do', u'.', u"''"], u'pos': [u'NNP', u'VBZ', u'DT', u'NNS', u'CC', u'VBZ', u'DT', u'DT', u'VBZ', u'CC', u'MD', u'VB', u'VBN', u'.', u"''"], u'char_offsets': [[16469, 16472], [16473, 16480], [16481, 16484], [16485, 16491], [16492, 16495], [16496, 16501], [16502, 16505], [16506, 16510], [16511, 16513], [16514, 16516], [16517, 16520], [16521, 16523], [16524, 16528], [16528, 16529], [16529, 16530]]}) 
answer: set([u'reject', u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.084553375840187073, {u'tokens': [u'He', u'considered', u'light', u'to', u'be', u'made', u'up', u'of', u'extremely', u'subtle', u'corpuscles', u',', u'that', u'ordinary', u'matter', u'was', u'made', u'of', u'grosser', u'corpuscles', u'and', u'speculated', u'that', u'through', u'a', u'kind', u'of', u'alchemical', u'transmutation', u'``', u'Are', u'not', u'gross', u'Bodies', u'and', u'Light', u'convertible', u'into', u'one', u'another', u',', u'...', u'and', u'may', u'not', u'Bodies', u'receive', u'much', u'of', u'their', u'Activity', u'from', u'the', u'Particles', u'of', u'Light', u'which', u'enter', u'their', u'Composition', u'?', u"''"], u'lemmas': [u'he', u'consider', u'light', u'to', u'be', u'make', u'up', u'of', u'extremely', u'subtle', u'corpuscle', u',', u'that', u'ordinary', u'matter', u'be', u'make', u'of', u'grosser', u'corpuscle', u'and', u'speculate', u'that', u'through', u'a', u'kind', u'of', u'alchemical', u'transmutation', u'``', u'be', u'not', u'gross', u'body', u'and', u'light', u'convertible', u'into', u'one', u'another', u',', u'...', u'and', u'may', u'not', u'body', u'receive', u'much', u'of', u'they', u'activity', u'from', u'the', u'Particles', u'of', u'Light', u'which', u'enter', u'they', u'composition', u'?', u"''"], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'VB', u'VBN', u'RP', u'IN', u'RB', u'JJ', u'NNS', u',', u'IN', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'NN', u'NNS', u'CC', u'VBD', u'IN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'``', u'VBP', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u'IN', u'CD', u'DT', u',', u':', u'CC', u'MD', u'RB', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNPS', u'IN', u'NNP', u'WDT', u'VBP', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[11309, 11311], [11312, 11322], [11323, 11328], [11329, 11331], [11332, 11334], [11335, 11339], [11340, 11342], [11343, 11345], [11346, 11355], [11356, 11362], [11363, 11373], [11373, 11374], [11375, 11379], [11380, 11388], [11389, 11395], [11396, 11399], [11400, 11404], [11405, 11407], [11408, 11415], [11416, 11426], [11427, 11430], [11431, 11441], [11442, 11446], [11447, 11454], [11455, 11456], [11457, 11461], [11462, 11464], [11465, 11475], [11476, 11489], [11490, 11491], [11491, 11494], [11495, 11498], [11499, 11504], [11505, 11511], [11512, 11515], [11516, 11521], [11522, 11533], [11534, 11538], [11539, 11542], [11543, 11550], [11550, 11551], [11552, 11555], [11555, 11558], [11559, 11562], [11563, 11566], [11567, 11573], [11574, 11581], [11582, 11586], [11587, 11589], [11590, 11595], [11596, 11604], [11605, 11609], [11610, 11613], [11614, 11623], [11624, 11626], [11627, 11632], [11633, 11638], [11639, 11644], [11645, 11650], [11651, 11662], [11662, 11663], [11663, 11664]]}) 
answer: set([u'reject', u'doctrine', u'trinity', u'church'])
candidate Sentence: (0.083558604121208191, {u'tokens': [u'A', u'descendant', u'of', u'the', u'original', u'tree', u'can', u'be', u'seen', u'growing', u'outside', u'the', u'main', u'gate', u'of', u'Trinity', u'College', u',', u'Cambridge', u',', u'below', u'the', u'room', u'Newton', u'lived', u'in', u'when', u'he', u'studied', u'there', u'.'], u'lemmas': [u'a', u'descendant', u'of', u'the', u'original', u'tree', u'can', u'be', u'see', u'grow', u'outside', u'the', u'main', u'gate', u'of', u'Trinity', u'College', u',', u'Cambridge', u',', u'below', u'the', u'room', u'Newton', u'live', u'in', u'when', u'he', u'study', u'there', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'MD', u'VB', u'VBN', u'VBG', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'IN', u'DT', u'NN', u'NNP', u'VBD', u'IN', u'WRB', u'PRP', u'VBD', u'RB', u'.'], u'char_offsets': [[27874, 27875], [27876, 27886], [27887, 27889], [27890, 27893], [27894, 27902], [27903, 27907], [27908, 27911], [27912, 27914], [27915, 27919], [27920, 27927], [27928, 27935], [27936, 27939], [27940, 27944], [27945, 27949], [27950, 27952], [27953, 27960], [27961, 27968], [27968, 27969], [27970, 27979], [27979, 27980], [27981, 27986], [27987, 27990], [27991, 27995], [27996, 28002], [28003, 28008], [28009, 28011], [28012, 28016], [28017, 28019], [28020, 28027], [28028, 28033], [28033, 28034]]}) 
answer: set([u'reject', u'doctrine', u'church'])
['Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Did Newton reject the church's doctrine of the Trinity?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Newton may have rejected the church's doctrine of the Trinity.
Difficulty = easy

Yes
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool("Newton may have rejected the church's doctrine of the Trinity.") == True
 +  where "Newton may have rejected the church's doctrine of the Trinity." = <src.question_processing.Question_parser instance at 0x7f56b8f9d488>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param94] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9d4d0>, (<src.tfidf.TF_IDF object at 0x7f56ba898d10>, set(['isaac', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Maybe') == True
E                +  where 'Maybe' = <src.question_processing.Question_parser instance at 0x7f56b8f9d4d0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.75109744071960449, {u'tokens': [u'Newton', u'may', u'have', u'rejected', u'the', u'church', u"'s", u'doctrine', u'of', u'the', u'Trinity', u'.'], u'lemmas': [u'Newton', u'may', u'have', u'reject', u'the', u'church', u"'s", u'doctrine', u'of', u'the', u'Trinity', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'VBN', u'DT', u'NN', u'POS', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[17106, 17112], [17113, 17116], [17117, 17121], [17122, 17130], [17131, 17134], [17135, 17141], [17141, 17143], [17144, 17152], [17153, 17155], [17156, 17159], [17160, 17167], [17167, 17168]]}) 
answer: set([])
candidate Sentence: (0.12651337683200836, {u'tokens': [u'However', u',', u'the', u'terms', u'of', u'the', u'Lucasian', u'professorship', u'required', u'that', u'the', u'holder', u'not', u'be', u'active', u'in', u'the', u'church', u'-LRB-', u'presumably', u'so', u'as', u'to', u'have', u'more', u'time', u'for', u'science', u'-RRB-', u'.'], u'lemmas': [u'however', u',', u'the', u'term', u'of', u'the', u'lucasian', u'professorship', u'require', u'that', u'the', u'holder', u'not', u'be', u'active', u'in', u'the', u'church', u'-lrb-', u'presumably', u'so', u'as', u'to', u'have', u'more', u'time', u'for', u'science', u'-rrb-', u'.'], u'pos': [u'RB', u',', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'RB', u'VB', u'JJ', u'IN', u'DT', u'NN', u'-LRB-', u'RB', u'RB', u'IN', u'TO', u'VB', u'JJR', u'NN', u'IN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[7865, 7872], [7872, 7873], [7874, 7877], [7878, 7883], [7884, 7886], [7887, 7890], [7891, 7899], [7900, 7913], [7914, 7922], [7923, 7927], [7928, 7931], [7932, 7938], [7939, 7942], [7943, 7945], [7946, 7952], [7953, 7955], [7956, 7959], [7960, 7966], [7967, 7968], [7968, 7978], [7979, 7981], [7982, 7984], [7985, 7987], [7988, 7992], [7993, 7997], [7998, 8002], [8003, 8006], [8007, 8014], [8014, 8015], [8015, 8016]]}) 
answer: set([u'doctrine', u'trinity', u'reject'])
candidate Sentence: (0.12418209761381149, {u'tokens': [u'He', u'believed', u'in', u'a', u'rationally', u'immanent', u'world', u',', u'but', u'he', u'rejected', u'the', u'hylozoism', u'implicit', u'in', u'Leibniz', u'and', u'Baruch', u'Spinoza', u'.'], u'lemmas': [u'he', u'believe', u'in', u'a', u'rationally', u'immanent', u'world', u',', u'but', u'he', u'reject', u'the', u'hylozoism', u'implicit', u'in', u'leibniz', u'and', u'Baruch', u'Spinoza', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'RB', u'JJ', u'NN', u',', u'CC', u'PRP', u'VBD', u'DT', u'NN', u'JJ', u'IN', u'NN', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[17578, 17580], [17581, 17589], [17590, 17592], [17593, 17594], [17595, 17605], [17606, 17614], [17615, 17620], [17620, 17621], [17622, 17625], [17626, 17628], [17629, 17637], [17638, 17641], [17642, 17651], [17652, 17660], [17661, 17663], [17664, 17671], [17672, 17675], [17676, 17682], [17683, 17690], [17690, 17691]]}) 
answer: set([u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.11315339803695679, {u'tokens': [u'In', u'June', u'1661', u',', u'he', u'was', u'admitted', u'to', u'Trinity', u'College', u',', u'Cambridge', u'.'], u'lemmas': [u'in', u'June', u'1661', u',', u'he', u'be', u'admit', u'to', u'Trinity', u'College', u',', u'Cambridge', u'.'], u'pos': [u'IN', u'NNP', u'CD', u',', u'PRP', u'VBD', u'VBN', u'TO', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[4394, 4396], [4397, 4401], [4402, 4406], [4406, 4407], [4408, 4410], [4411, 4414], [4415, 4423], [4424, 4426], [4427, 4434], [4435, 4442], [4442, 4443], [4444, 4453], [4453, 4454]]}) 
answer: set([u'reject', u'doctrine', u'church'])
candidate Sentence: (0.11208727955818176, {u'tokens': [u'A', u'manuscript', u'he', u'sent', u'to', u'John', u'Locke', u'in', u'which', u'he', u'disputed', u'the', u'existence', u'of', u'the', u'Trinity', u'was', u'never', u'published', u'.'], u'lemmas': [u'a', u'manuscript', u'he', u'send', u'to', u'John', u'Locke', u'in', u'which', u'he', u'dispute', u'the', u'existence', u'of', u'the', u'Trinity', u'be', u'never', u'publish', u'.'], u'pos': [u'DT', u'NN', u'PRP', u'VBD', u'TO', u'NNP', u'NNP', u'IN', u'WDT', u'PRP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NNP', u'VBD', u'RB', u'VBN', u'.'], u'char_offsets': [[13377, 13378], [13379, 13389], [13390, 13392], [13393, 13397], [13398, 13400], [13401, 13405], [13406, 13411], [13412, 13414], [13415, 13420], [13421, 13423], [13424, 13432], [13433, 13436], [13437, 13446], [13447, 13449], [13450, 13453], [13454, 13461], [13462, 13465], [13466, 13471], [13472, 13481], [13481, 13482]]}) 
answer: set([u'church', u'doctrine', u'reject'])
candidate Sentence: (0.098374851047992706, {u'tokens': [u'In', u'his', u'own', u'lifetime', u',', u'Newton', u'wrote', u'more', u'on', u'religion', u'than', u'he', u'did', u'on', u'natural', u'science', u'.'], u'lemmas': [u'in', u'he', u'own', u'lifetime', u',', u'Newton', u'write', u'more', u'on', u'religion', u'than', u'he', u'do', u'on', u'natural', u'science', u'.'], u'pos': [u'IN', u'PRP$', u'JJ', u'NN', u',', u'NNP', u'VBD', u'RBR', u'IN', u'NN', u'IN', u'PRP', u'VBD', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17495, 17497], [17498, 17501], [17502, 17505], [17506, 17514], [17514, 17515], [17516, 17522], [17523, 17528], [17529, 17533], [17534, 17536], [17537, 17545], [17546, 17550], [17551, 17553], [17554, 17557], [17558, 17560], [17561, 17568], [17569, 17576], [17576, 17577]]}) 
answer: set([u'reject', u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.098139390349388123, {u'tokens': [u'This', u'he', u'did', u'at', u'the', u'age', u'of', u'eighteen', u',', u'achieving', u'an', u'admirable', u'final', u'report', u'.'], u'lemmas': [u'this', u'he', u'do', u'at', u'the', u'age', u'of', u'eighteen', u',', u'achieve', u'a', u'admirable', u'final', u'report', u'.'], u'pos': [u'DT', u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u',', u'VBG', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[4321, 4325], [4326, 4328], [4329, 4332], [4333, 4335], [4336, 4339], [4340, 4343], [4344, 4346], [4347, 4355], [4355, 4356], [4357, 4366], [4367, 4369], [4370, 4379], [4380, 4385], [4386, 4392], [4392, 4393]]}) 
answer: set([u'reject', u'doctrine', u'trinity', u'church'])
candidate Sentence: (0.087450131773948669, {u'tokens': [u'God', u'governs', u'all', u'things', u'and', u'knows', u'all', u'that', u'is', u'or', u'can', u'be', u'done', u'.', u"''"], u'lemmas': [u'God', u'govern', u'all', u'thing', u'and', u'know', u'all', u'that', u'be', u'or', u'can', u'be', u'do', u'.', u"''"], u'pos': [u'NNP', u'VBZ', u'DT', u'NNS', u'CC', u'VBZ', u'DT', u'DT', u'VBZ', u'CC', u'MD', u'VB', u'VBN', u'.', u"''"], u'char_offsets': [[16469, 16472], [16473, 16480], [16481, 16484], [16485, 16491], [16492, 16495], [16496, 16501], [16502, 16505], [16506, 16510], [16511, 16513], [16514, 16516], [16517, 16520], [16521, 16523], [16524, 16528], [16528, 16529], [16529, 16530]]}) 
answer: set([u'reject', u'trinity', u'doctrine', u'church'])
candidate Sentence: (0.084553375840187073, {u'tokens': [u'He', u'considered', u'light', u'to', u'be', u'made', u'up', u'of', u'extremely', u'subtle', u'corpuscles', u',', u'that', u'ordinary', u'matter', u'was', u'made', u'of', u'grosser', u'corpuscles', u'and', u'speculated', u'that', u'through', u'a', u'kind', u'of', u'alchemical', u'transmutation', u'``', u'Are', u'not', u'gross', u'Bodies', u'and', u'Light', u'convertible', u'into', u'one', u'another', u',', u'...', u'and', u'may', u'not', u'Bodies', u'receive', u'much', u'of', u'their', u'Activity', u'from', u'the', u'Particles', u'of', u'Light', u'which', u'enter', u'their', u'Composition', u'?', u"''"], u'lemmas': [u'he', u'consider', u'light', u'to', u'be', u'make', u'up', u'of', u'extremely', u'subtle', u'corpuscle', u',', u'that', u'ordinary', u'matter', u'be', u'make', u'of', u'grosser', u'corpuscle', u'and', u'speculate', u'that', u'through', u'a', u'kind', u'of', u'alchemical', u'transmutation', u'``', u'be', u'not', u'gross', u'body', u'and', u'light', u'convertible', u'into', u'one', u'another', u',', u'...', u'and', u'may', u'not', u'body', u'receive', u'much', u'of', u'they', u'activity', u'from', u'the', u'Particles', u'of', u'Light', u'which', u'enter', u'they', u'composition', u'?', u"''"], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'VB', u'VBN', u'RP', u'IN', u'RB', u'JJ', u'NNS', u',', u'IN', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'NN', u'NNS', u'CC', u'VBD', u'IN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u'``', u'VBP', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'JJ', u'IN', u'CD', u'DT', u',', u':', u'CC', u'MD', u'RB', u'NNS', u'VBP', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NNPS', u'IN', u'NNP', u'WDT', u'VBP', u'PRP$', u'NN', u'.', u"''"], u'char_offsets': [[11309, 11311], [11312, 11322], [11323, 11328], [11329, 11331], [11332, 11334], [11335, 11339], [11340, 11342], [11343, 11345], [11346, 11355], [11356, 11362], [11363, 11373], [11373, 11374], [11375, 11379], [11380, 11388], [11389, 11395], [11396, 11399], [11400, 11404], [11405, 11407], [11408, 11415], [11416, 11426], [11427, 11430], [11431, 11441], [11442, 11446], [11447, 11454], [11455, 11456], [11457, 11461], [11462, 11464], [11465, 11475], [11476, 11489], [11490, 11491], [11491, 11494], [11495, 11498], [11499, 11504], [11505, 11511], [11512, 11515], [11516, 11521], [11522, 11533], [11534, 11538], [11539, 11542], [11543, 11550], [11550, 11551], [11552, 11555], [11555, 11558], [11559, 11562], [11563, 11566], [11567, 11573], [11574, 11581], [11582, 11586], [11587, 11589], [11590, 11595], [11596, 11604], [11605, 11609], [11610, 11613], [11614, 11623], [11624, 11626], [11627, 11632], [11633, 11638], [11639, 11644], [11645, 11650], [11651, 11662], [11662, 11663], [11663, 11664]]}) 
answer: set([u'reject', u'doctrine', u'trinity', u'church'])
candidate Sentence: (0.083558604121208191, {u'tokens': [u'A', u'descendant', u'of', u'the', u'original', u'tree', u'can', u'be', u'seen', u'growing', u'outside', u'the', u'main', u'gate', u'of', u'Trinity', u'College', u',', u'Cambridge', u',', u'below', u'the', u'room', u'Newton', u'lived', u'in', u'when', u'he', u'studied', u'there', u'.'], u'lemmas': [u'a', u'descendant', u'of', u'the', u'original', u'tree', u'can', u'be', u'see', u'grow', u'outside', u'the', u'main', u'gate', u'of', u'Trinity', u'College', u',', u'Cambridge', u',', u'below', u'the', u'room', u'Newton', u'live', u'in', u'when', u'he', u'study', u'there', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'MD', u'VB', u'VBN', u'VBG', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'IN', u'DT', u'NN', u'NNP', u'VBD', u'IN', u'WRB', u'PRP', u'VBD', u'RB', u'.'], u'char_offsets': [[27874, 27875], [27876, 27886], [27887, 27889], [27890, 27893], [27894, 27902], [27903, 27907], [27908, 27911], [27912, 27914], [27915, 27919], [27920, 27927], [27928, 27935], [27936, 27939], [27940, 27944], [27945, 27949], [27950, 27952], [27953, 27960], [27961, 27968], [27968, 27969], [27970, 27979], [27979, 27980], [27981, 27986], [27987, 27990], [27991, 27995], [27996, 28002], [28003, 28008], [28009, 28011], [28012, 28016], [28017, 28019], [28020, 28027], [28028, 28033], [28033, 28034]]}) 
answer: set([u'reject', u'doctrine', u'church'])
['Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Did Newton reject the church's doctrine of the Trinity?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Maybe
Difficulty = easy

Yes
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('Maybe') == True
 +  where 'Maybe' = <src.question_processing.Question_parser instance at 0x7f56b8f9d4d0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param110] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8f9d950>, (<src.tfidf.TF_IDF object at 0x7f56bb66d110>, set(['lyre'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d950>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.653694748878479, {u'tokens': [u'The', u'strings', u'were', u'of', u'gut', u'.'], u'lemmas': [u'the', u'string', u'be', u'of', u'gut', u'.'], u'pos': [u'DT', u'NNS', u'VBD', u'IN', u'NN', u'.'], u'char_offsets': [[3567, 3570], [3571, 3578], [3579, 3583], [3584, 3586], [3587, 3590], [3590, 3591]]}) 
answer: set([u'make', u'classical'])
candidate Sentence: (0.30417972803115845, {u'tokens': [u'After', u'the', u'bow', u'made', u'its', u'way', u'into', u'Europe', u'from', u'the', u'Middle-East', u',', u'around', u'two', u'centuries', u'later', u',', u'it', u'was', u'applied', u'to', u'several', u'species', u'of', u'those', u'lyres', u'that', u'were', u'small', u'enough', u'to', u'make', u'bowing', u'practical', u'.'], u'lemmas': [u'after', u'the', u'bow', u'make', u'its', u'way', u'into', u'Europe', u'from', u'the', u'Middle-East', u',', u'around', u'two', u'century', u'later', u',', u'it', u'be', u'apply', u'to', u'several', u'species', u'of', u'those', u'lyre', u'that', u'be', u'small', u'enough', u'to', u'make', u'bow', u'practical', u'.'], u'pos': [u'IN', u'DT', u'NN', u'VBD', u'PRP$', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NNP', u',', u'IN', u'CD', u'NNS', u'RB', u',', u'PRP', u'VBD', u'VBN', u'TO', u'JJ', u'NNS', u'IN', u'DT', u'NNS', u'WDT', u'VBD', u'JJ', u'JJ', u'TO', u'VB', u'VBG', u'JJ', u'.'], u'char_offsets': [[8923, 8928], [8929, 8932], [8933, 8936], [8937, 8941], [8942, 8945], [8946, 8949], [8950, 8954], [8955, 8961], [8962, 8966], [8967, 8970], [8971, 8982], [8982, 8983], [8984, 8990], [8991, 8994], [8995, 9004], [9005, 9010], [9010, 9011], [9012, 9014], [9015, 9018], [9019, 9026], [9027, 9029], [9030, 9037], [9038, 9045], [9046, 9048], [9049, 9054], [9055, 9060], [9061, 9065], [9066, 9070], [9071, 9076], [9077, 9083], [9084, 9086], [9087, 9091], [9092, 9098], [9099, 9108], [9108, 9109]]}) 
answer: set([u'string', u'classical', u'gut'])
candidate Sentence: (0.15475174784660339, {u'tokens': [u'A', u'classical', u'lyre', u'has', u'a', u'hollow', u'body', u'or', u'sound-chest', u'-LRB-', u'also', u'known', u'as', u'soundbox', u'or', u'resonator', u'-RRB-', u'.'], u'lemmas': [u'a', u'classical', u'lyre', u'have', u'a', u'hollow', u'body', u'or', u'sound-chest', u'-lrb-', u'also', u'know', u'as', u'soundbox', u'or', u'resonator', u'-rrb-', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'-LRB-', u'RB', u'VBN', u'IN', u'NN', u'CC', u'NN', u'-RRB-', u'.'], u'char_offsets': [[2910, 2911], [2912, 2921], [2922, 2926], [2927, 2930], [2931, 2932], [2933, 2939], [2940, 2944], [2945, 2947], [2948, 2959], [2960, 2961], [2961, 2965], [2966, 2971], [2972, 2974], [2975, 2983], [2984, 2986], [2987, 2996], [2996, 2997], [2997, 2998]]}) 
answer: set([u'make', u'string', u'gut'])
candidate Sentence: (0.14686359465122223, {u'tokens': [u'The', u'lyre', u'is', u'a', u'stringed', u'musical', u'instrument', u'well', u'known', u'for', u'its', u'use', u'in', u'classical', u'antiquity', u'and', u'later', u'.'], u'lemmas': [u'the', u'lyre', u'be', u'a', u'stringed', u'musical', u'instrument', u'well', u'know', u'for', u'its', u'use', u'in', u'classical', u'antiquity', u'and', u'later', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'RB', u'VBN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u'CC', u'RB', u'.'], u'char_offsets': [[0, 3], [5, 9], [10, 12], [13, 14], [15, 23], [24, 31], [32, 42], [43, 47], [48, 53], [54, 57], [58, 61], [62, 65], [66, 68], [69, 78], [79, 88], [89, 92], [93, 98], [98, 99]]}) 
answer: set([u'make', u'string', u'gut'])
candidate Sentence: (0.14659455418586731, {u'tokens': [u'The', u'lyre', u'of', u'Classical', u'Antiquity', u'was', u'ordinarily', u'played', u'by', u'being', u'strummed', u'with', u'a', u'plectrum', u',', u'like', u'a', u'guitar', u'or', u'a', u'zither', u',', u'rather', u'than', u'being', u'plucked', u',', u'like', u'a', u'harp', u'.'], u'lemmas': [u'the', u'lyre', u'of', u'classical', u'antiquity', u'be', u'ordinarily', u'play', u'by', u'be', u'strum', u'with', u'a', u'plectrum', u',', u'like', u'a', u'guitar', u'or', u'a', u'zither', u',', u'rather', u'than', u'be', u'pluck', u',', u'like', u'a', u'harp', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NN', u'VBD', u'RB', u'VBN', u'IN', u'VBG', u'VBN', u'IN', u'DT', u'NN', u',', u'IN', u'DT', u'NN', u'CC', u'DT', u'NN', u',', u'RB', u'IN', u'VBG', u'VBN', u',', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[172, 175], [176, 180], [181, 183], [184, 193], [194, 203], [204, 207], [208, 218], [219, 225], [226, 228], [229, 234], [235, 243], [244, 248], [249, 250], [251, 259], [259, 260], [261, 265], [266, 267], [268, 274], [275, 277], [278, 279], [280, 286], [286, 287], [288, 294], [295, 299], [300, 305], [306, 313], [313, 314], [315, 319], [320, 321], [322, 326], [326, 327]]}) 
answer: set([u'make', u'string', u'gut'])
candidate Sentence: (0.11568073928356171, {u'tokens': [u'The', u'number', u'of', u'strings', u'on', u'the', u'classical', u'lyre', u'varied', u'at', u'different', u'epochs', u',', u'and', u'possibly', u'in', u'different', u'localities', u'four', u',', u'seven', u'and', u'ten', u'having', u'been', u'favorite', u'numbers', u'.'], u'lemmas': [u'the', u'number', u'of', u'string', u'on', u'the', u'classical', u'lyre', u'vary', u'at', u'different', u'epoch', u',', u'and', u'possibly', u'in', u'different', u'locality', u'four', u',', u'seven', u'and', u'ten', u'have', u'be', u'favorite', u'number', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'JJ', u'NNS', u',', u'CC', u'RB', u'IN', u'JJ', u'NNS', u'CD', u',', u'CD', u'CC', u'CD', u'VBG', u'VBN', u'JJ', u'NNS', u'.'], u'char_offsets': [[5280, 5283], [5284, 5290], [5291, 5293], [5294, 5301], [5302, 5304], [5305, 5308], [5309, 5318], [5319, 5323], [5324, 5330], [5331, 5333], [5334, 5343], [5344, 5350], [5350, 5351], [5352, 5355], [5356, 5364], [5365, 5367], [5368, 5377], [5378, 5388], [5390, 5394], [5394, 5395], [5396, 5401], [5402, 5405], [5406, 5409], [5410, 5416], [5417, 5421], [5422, 5430], [5431, 5438], [5438, 5439]]}) 
answer: set([u'make', u'gut'])
candidate Sentence: (0.07273419201374054, {u'tokens': [u'Different', u'tones', u'could', u'be', u'obtained', u'from', u'a', u'single', u'bowed', u'string', u'by', u'pressing', u'the', u'fingernails', u'of', u'the', u'player', u"'s", u'left', u'hand', u'against', u'various', u'points', u'along', u'the', u'string', u'to', u'fret', u'the', u'string', u'.'], u'lemmas': [u'different', u'tone', u'could', u'be', u'obtain', u'from', u'a', u'single', u'bow', u'string', u'by', u'press', u'the', u'fingernail', u'of', u'the', u'player', u"'s", u'left', u'hand', u'against', u'various', u'point', u'along', u'the', u'string', u'to', u'fret', u'the', u'string', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'VBD', u'NN', u'IN', u'VBG', u'DT', u'NNS', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'.'], u'char_offsets': [[9399, 9408], [9409, 9414], [9415, 9420], [9421, 9423], [9424, 9432], [9433, 9437], [9438, 9439], [9440, 9446], [9447, 9452], [9453, 9459], [9460, 9462], [9463, 9471], [9472, 9475], [9476, 9487], [9488, 9490], [9491, 9494], [9495, 9501], [9501, 9503], [9504, 9508], [9509, 9513], [9514, 9521], [9522, 9529], [9530, 9536], [9537, 9542], [9543, 9546], [9547, 9553], [9554, 9556], [9557, 9561], [9562, 9565], [9566, 9572], [9572, 9573]]}) 
answer: set([u'make', u'classical', u'gut'])
candidate Sentence: (0.064884781837463379, {u'tokens': [u'Examples', u'of', u'that', u'difference', u'include', u'a', u'piano', u'-LRB-', u'a', u'keyed', u'zither', u'-RRB-', u'and', u'a', u'violin', u'-LRB-', u'referred', u'to', u'by', u'some', u'as', u'a', u'species', u'of', u'fingerboard', u'lyre', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'that', u'difference', u'include', u'a', u'piano', u'-lrb-', u'a', u'key', u'zither', u'-rrb-', u'and', u'a', u'violin', u'-lrb-', u'refer', u'to', u'by', u'some', u'as', u'a', u'species', u'of', u'fingerboard', u'lyre', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'DT', u'NN', u'VBP', u'DT', u'NN', u'-LRB-', u'DT', u'VBN', u'NN', u'-RRB-', u'CC', u'DT', u'NN', u'-LRB-', u'VBN', u'TO', u'IN', u'DT', u'IN', u'DT', u'NNS', u'IN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[1069, 1077], [1078, 1080], [1081, 1085], [1086, 1096], [1097, 1104], [1105, 1106], [1107, 1112], [1113, 1114], [1114, 1115], [1116, 1121], [1122, 1128], [1128, 1129], [1130, 1133], [1134, 1135], [1136, 1142], [1143, 1144], [1144, 1152], [1153, 1155], [1156, 1158], [1159, 1163], [1164, 1166], [1167, 1168], [1169, 1176], [1177, 1179], [1180, 1191], [1192, 1196], [1196, 1197], [1197, 1198]]}) 
answer: set([u'make', u'string', u'classical', u'gut'])
candidate Sentence: (0.056547369807958603, {u'tokens': [u'There', u'were', u'two', u'ways', u'of', u'tuning', u':', u'one', u'was', u'to', u'fasten', u'the', u'strings', u'to', u'pegs', u'which', u'might', u'be', u'turned', u';', u'the', u'other', u'was', u'to', u'change', u'the', u'place', u'of', u'the', u'string', u'upon', u'the', u'crossbar', u';', u'probably', u'both', u'expedients', u'were', u'used', u'simultaneously', u'.'], u'lemmas': [u'there', u'be', u'two', u'way', u'of', u'tuning', u':', u'one', u'be', u'to', u'fasten', u'the', u'string', u'to', u'peg', u'which', u'might', u'be', u'turn', u';', u'the', u'other', u'be', u'to', u'change', u'the', u'place', u'of', u'the', u'string', u'upon', u'the', u'crossbar', u';', u'probably', u'both', u'expedient', u'be', u'use', u'simultaneously', u'.'], u'pos': [u'EX', u'VBD', u'CD', u'NNS', u'IN', u'NN', u':', u'CD', u'VBD', u'TO', u'VB', u'DT', u'NNS', u'TO', u'VBZ', u'WDT', u'MD', u'VB', u'VBN', u':', u'DT', u'JJ', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u':', u'RB', u'DT', u'NNS', u'VBD', u'VBN', u'RB', u'.'], u'char_offsets': [[3677, 3682], [3683, 3687], [3688, 3691], [3692, 3696], [3697, 3699], [3700, 3706], [3706, 3707], [3708, 3711], [3712, 3715], [3716, 3718], [3719, 3725], [3726, 3729], [3730, 3737], [3738, 3740], [3741, 3745], [3746, 3751], [3752, 3757], [3758, 3760], [3761, 3767], [3767, 3768], [3769, 3772], [3773, 3778], [3779, 3782], [3783, 3785], [3786, 3792], [3793, 3796], [3797, 3802], [3803, 3805], [3806, 3809], [3810, 3816], [3817, 3821], [3822, 3825], [3826, 3834], [3834, 3835], [3836, 3844], [3845, 3849], [3850, 3860], [3861, 3865], [3866, 3870], [3871, 3885], [3885, 3886]]}) 
answer: set([u'make', u'classical', u'gut'])
candidate Sentence: (0.056273788213729858, {u'tokens': [u'Regarding', u'the', u'number', u'of', u'strings', u',', u'the', u'standard', u'88-key', u'piano', u'has', u'many', u'more', u'strings', u'than', u'even', u'the', u'largest', u'harp', u'.'], u'lemmas': [u'regard', u'the', u'number', u'of', u'string', u',', u'the', u'standard', u'88-key', u'piano', u'have', u'many', u'more', u'string', u'than', u'even', u'the', u'largest', u'harp', u'.'], u'pos': [u'VBG', u'DT', u'NN', u'IN', u'NNS', u',', u'DT', u'JJ', u'JJ', u'NN', u'VBZ', u'JJ', u'JJR', u'NNS', u'IN', u'RB', u'DT', u'JJS', u'NN', u'.'], u'char_offsets': [[2756, 2765], [2766, 2769], [2770, 2776], [2777, 2779], [2780, 2787], [2787, 2788], [2789, 2792], [2793, 2801], [2802, 2808], [2809, 2814], [2815, 2818], [2819, 2823], [2824, 2828], [2829, 2836], [2837, 2841], [2842, 2846], [2847, 2850], [2851, 2858], [2859, 2863], [2863, 2864]]}) 
answer: set([u'make', u'classical', u'gut'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are the strings of a classical lyre made of gut?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8f9d950>.answer
_____________________________ test_yesno[param134] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2050>, (<src.tfidf.TF_IDF object at 0x7f56ba516cd0>, set(['ottawa'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2050>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45693668723106384, {u'tokens': [u'Ottawa', u'sits', u'at', u'the', u'confluence', u'of', u'three', u'major', u'rivers', u':', u'the', u'Ottawa', u'River', u',', u'the', u'Gatineau', u'River', u'and', u'the', u'Rideau', u'River', u'.'], u'lemmas': [u'Ottawa', u'sit', u'at', u'the', u'confluence', u'of', u'three', u'major', u'river', u':', u'the', u'Ottawa', u'River', u',', u'the', u'Gatineau', u'River', u'and', u'the', u'Rideau', u'River', u'.'], u'pos': [u'NNP', u'VBZ', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u':', u'DT', u'NNP', u'NNP', u',', u'DT', u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[20123, 20129], [20130, 20134], [20135, 20137], [20138, 20141], [20142, 20152], [20153, 20155], [20156, 20161], [20162, 20167], [20168, 20174], [20174, 20175], [20176, 20179], [20180, 20186], [20187, 20192], [20192, 20193], [20194, 20197], [20198, 20206], [20207, 20212], [20213, 20216], [20217, 20220], [20221, 20227], [20228, 20233], [20233, 20234]]}) 
answer: set([u'ottowa'])
candidate Sentence: (0.14579793810844421, {u'tokens': [u'Although', u'it', u'does', u'not', u'constitute', u'a', u'separate', u'administrative', u'district', u',', u'Ottawa', u'is', u'part', u'of', u'the', u'federally', u'designated', u'National', u'Capital', u'Region', u',', u'which', u'includes', u'the', u'neighbouring', u'Quebec', u'municipality', u'of', u'Gatineau', u'.'], u'lemmas': [u'although', u'it', u'do', u'not', u'constitute', u'a', u'separate', u'administrative', u'district', u',', u'Ottawa', u'be', u'part', u'of', u'the', u'federally', u'designate', u'National', u'Capital', u'Region', u',', u'which', u'include', u'the', u'neighbouring', u'Quebec', u'municipality', u'of', u'Gatineau', u'.'], u'pos': [u'IN', u'PRP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'JJ', u'NN', u',', u'NNP', u'VBZ', u'NN', u'IN', u'DT', u'RB', u'VBN', u'NNP', u'NNP', u'NNP', u',', u'WDT', u'VBZ', u'DT', u'JJ', u'NNP', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[531, 539], [540, 542], [543, 547], [548, 551], [552, 562], [563, 564], [565, 573], [574, 588], [589, 597], [597, 598], [599, 605], [606, 608], [609, 613], [614, 616], [617, 620], [621, 630], [631, 641], [642, 650], [651, 658], [659, 665], [665, 666], [667, 672], [673, 681], [682, 685], [686, 698], [699, 705], [706, 718], [719, 721], [722, 730], [730, 731]]}) 
answer: set([u'river', u'ottowa', u'sit'])
candidate Sentence: (0.14342230558395386, {u'tokens': [u'While', u'such', u'stories', u'have', u'no', u'historical', u'basis', u',', u'they', u'do', u'illustrate', u'how', u'arbitrary', u'the', u'choice', u'of', u'Ottawa', u'seemed', u'to', u'Canadians', u'at', u'the', u'time', u'.'], u'lemmas': [u'while', u'such', u'story', u'have', u'no', u'historical', u'basis', u',', u'they', u'do', u'illustrate', u'how', u'arbitrary', u'the', u'choice', u'of', u'Ottawa', u'seem', u'to', u'Canadians', u'at', u'the', u'time', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u',', u'PRP', u'VBP', u'VB', u'WRB', u'JJ', u'DT', u'NN', u'IN', u'NNP', u'VBD', u'TO', u'NNPS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[4608, 4613], [4614, 4618], [4619, 4626], [4627, 4631], [4632, 4634], [4635, 4645], [4646, 4651], [4651, 4652], [4653, 4657], [4658, 4660], [4661, 4671], [4672, 4675], [4676, 4685], [4686, 4689], [4690, 4696], [4697, 4699], [4700, 4706], [4707, 4713], [4714, 4716], [4717, 4726], [4727, 4729], [4730, 4733], [4734, 4738], [4738, 4739]]}) 
answer: set([u'river', u'ottowa', u'sit'])
candidate Sentence: (0.11776891350746155, {u'tokens': [u'Map', u'of', u'Ottawa', u'showing', u'urban', u'area', u',', u'highways', u',', u'waterways', u',', u'and', u'historic', u'townships', u'Ottawa', u'is', u'situated', u'on', u'the', u'south', u'bank', u'of', u'the', u'Ottawa', u'River', u',', u'and', u'contains', u'the', u'mouths', u'of', u'the', u'Rideau', u'River', u'and', u'Rideau', u'Canal', u'.'], u'lemmas': [u'map', u'of', u'Ottawa', u'show', u'urban', u'area', u',', u'highway', u',', u'waterway', u',', u'and', u'historic', u'township', u'Ottawa', u'be', u'situate', u'on', u'the', u'south', u'bank', u'of', u'the', u'Ottawa', u'River', u',', u'and', u'contain', u'the', u'mouth', u'of', u'the', u'Rideau', u'River', u'and', u'Rideau', u'Canal', u'.'], u'pos': [u'NN', u'IN', u'NNP', u'VBG', u'JJ', u'NN', u',', u'NNS', u',', u'NNS', u',', u'CC', u'JJ', u'NNS', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[8524, 8527], [8528, 8530], [8531, 8537], [8538, 8545], [8546, 8551], [8552, 8556], [8556, 8557], [8558, 8566], [8566, 8567], [8568, 8577], [8577, 8578], [8579, 8582], [8583, 8591], [8592, 8601], [8602, 8608], [8609, 8611], [8612, 8620], [8621, 8623], [8624, 8627], [8628, 8633], [8634, 8638], [8639, 8641], [8642, 8645], [8646, 8652], [8653, 8658], [8658, 8659], [8660, 8663], [8664, 8672], [8673, 8676], [8677, 8683], [8684, 8686], [8687, 8690], [8691, 8697], [8698, 8703], [8704, 8707], [8708, 8714], [8715, 8720], [8720, 8721]]}) 
answer: set([u'ottowa', u'sit'])
candidate Sentence: (0.11570791155099869, {u'tokens': [u'The', u'city', u'also', u'supports', u'many', u'casual', u'sporting', u'activities', u',', u'such', u'as', u'skating', u'on', u'the', u'Rideau', u'Canal', u'or', u'curling', u'in', u'winter', u',', u'cycling', u'and', u'jogging', u'along', u'the', u'Ottawa', u'River', u',', u'Rideau', u'Canal', u',', u'and', u'Rideau', u'River', u'in', u'summer', u',', u'playing', u'Ultimate', u'all', u'year', u'round', u'-LRB-', u'especially', u'through', u'the', u'O.C.U.A.', u'-RRB-', u',', u'skiing', u'and', u'hiking', u'in', u'the', u'Greenbelt', u'and', u'the', u'nearby', u'Gatineau', u'Park', u',', u'and', u'sailing', u'on', u'Lac', u'Deschenes', u',', u'part', u'of', u'the', u'Ottawa', u'River', u'or', u'golfing', u'on', u'many', u'of', u'the', u'golf', u'courses', u'in', u'the', u'Ottawa', u'area', u'.'], u'lemmas': [u'the', u'city', u'also', u'support', u'many', u'casual', u'sport', u'activity', u',', u'such', u'as', u'skating', u'on', u'the', u'Rideau', u'Canal', u'or', u'curl', u'in', u'winter', u',', u'cycling', u'and', u'jogging', u'along', u'the', u'Ottawa', u'River', u',', u'Rideau', u'Canal', u',', u'and', u'Rideau', u'River', u'in', u'summer', u',', u'play', u'Ultimate', u'all', u'year', u'round', u'-lrb-', u'especially', u'through', u'the', u'O.C.U.A.', u'-rrb-', u',', u'skiing', u'and', u'hike', u'in', u'the', u'Greenbelt', u'and', u'the', u'nearby', u'Gatineau', u'Park', u',', u'and', u'sailing', u'on', u'Lac', u'Deschenes', u',', u'part', u'of', u'the', u'Ottawa', u'River', u'or', u'golfing', u'on', u'many', u'of', u'the', u'golf', u'course', u'in', u'the', u'Ottawa', u'area', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'JJ', u'JJ', u'VBG', u'NNS', u',', u'JJ', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'VBG', u'IN', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'CC', u'NNP', u'NNP', u'IN', u'NN', u',', u'VBG', u'NNP', u'DT', u'NN', u'NN', u'-LRB-', u'RB', u'IN', u'DT', u'NNP', u'-RRB-', u',', u'NN', u'CC', u'VBG', u'IN', u'DT', u'NNP', u'CC', u'DT', u'JJ', u'NNP', u'NNP', u',', u'CC', u'NN', u'IN', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NN', u'IN', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[24168, 24171], [24172, 24176], [24177, 24181], [24182, 24190], [24191, 24195], [24196, 24202], [24203, 24211], [24212, 24222], [24222, 24223], [24224, 24228], [24229, 24231], [24232, 24239], [24240, 24242], [24243, 24246], [24247, 24253], [24254, 24259], [24260, 24262], [24263, 24270], [24271, 24273], [24274, 24280], [24280, 24281], [24282, 24289], [24290, 24293], [24294, 24301], [24302, 24307], [24308, 24311], [24312, 24318], [24319, 24324], [24324, 24325], [24326, 24332], [24333, 24338], [24338, 24339], [24340, 24343], [24344, 24350], [24351, 24356], [24357, 24359], [24360, 24366], [24366, 24367], [24368, 24375], [24376, 24384], [24385, 24388], [24389, 24393], [24394, 24399], [24400, 24401], [24401, 24411], [24412, 24419], [24420, 24423], [24425, 24433], [24433, 24434], [24434, 24435], [24436, 24442], [24443, 24446], [24447, 24453], [24454, 24456], [24457, 24460], [24461, 24470], [24471, 24474], [24475, 24478], [24479, 24485], [24486, 24494], [24495, 24499], [24499, 24500], [24501, 24504], [24505, 24512], [24513, 24515], [24516, 24519], [24520, 24529], [24529, 24530], [24531, 24535], [24536, 24538], [24539, 24542], [24543, 24549], [24550, 24555], [24556, 24558], [24559, 24566], [24567, 24569], [24570, 24574], [24575, 24577], [24578, 24581], [24582, 24586], [24587, 24594], [24595, 24597], [24598, 24601], [24602, 24608], [24609, 24613], [24613, 24614]]}) 
answer: set([u'ottowa', u'sit'])
candidate Sentence: (0.10266868025064468, {u'tokens': [u'Ottawa', u'lies', u'on', u'the', u'banks', u'of', u'the', u'Ottawa', u'River', u',', u'a', u'major', u'waterway', u'that', u'forms', u'the', u'boundary', u'between', u'Ontario', u'and', u'Quebec', u'.'], u'lemmas': [u'Ottawa', u'lie', u'on', u'the', u'bank', u'of', u'the', u'Ottawa', u'River', u',', u'a', u'major', u'waterway', u'that', u'form', u'the', u'boundary', u'between', u'Ontario', u'and', u'Quebec', u'.'], u'pos': [u'NNP', u'VBZ', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'WDT', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[311, 317], [318, 322], [323, 325], [326, 329], [330, 335], [336, 338], [339, 342], [343, 349], [350, 355], [355, 356], [357, 358], [359, 364], [365, 373], [374, 378], [379, 384], [385, 388], [389, 397], [398, 405], [406, 413], [414, 417], [418, 424], [424, 425]]}) 
answer: set([u'ottowa', u'sit'])
candidate Sentence: (0.099995598196983337, {u'tokens': [u'8,000', u'-RRB-', u'on', u'the', u'other', u'side', u'of', u'the', u'Rideau', u'River', u',', u'Morgan', u"'s", u'Grant', u'-LRB-', u'pop', u'.'], u'lemmas': [u'8,000', u'-rrb-', u'on', u'the', u'other', u'side', u'of', u'the', u'Rideau', u'River', u',', u'Morgan', u"'s", u'Grant', u'-lrb-', u'pop', u'.'], u'pos': [u'CD', u'-RRB-', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'NNP', u',', u'NNP', u'POS', u'NNP', u'-LRB-', u'NN', u'.'], u'char_offsets': [[10226, 10231], [10231, 10232], [10233, 10235], [10236, 10239], [10240, 10245], [10246, 10250], [10251, 10253], [10254, 10257], [10258, 10264], [10265, 10270], [10270, 10271], [10272, 10278], [10278, 10280], [10281, 10286], [10287, 10288], [10288, 10291], [10291, 10292]]}) 
answer: set([u'ottowa', u'sit'])
candidate Sentence: (0.090015292167663574, {u'tokens': [u'There', u'is', u'a', u'large', u'network', u'of', u'paved', u'multi-use', u'pathways', u'that', u'wind', u'their', u'way', u'through', u'much', u'of', u'the', u'city', u',', u'including', u'along', u'the', u'Ottawa', u'River', u',', u'Rideau', u'River', u',', u'and', u'Rideau', u'Canal', u'.'], u'lemmas': [u'there', u'be', u'a', u'large', u'network', u'of', u'pave', u'multi-use', u'pathway', u'that', u'wind', u'they', u'way', u'through', u'much', u'of', u'the', u'city', u',', u'include', u'along', u'the', u'Ottawa', u'River', u',', u'Rideau', u'River', u',', u'and', u'Rideau', u'Canal', u'.'], u'pos': [u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'VBN', u'JJ', u'NNS', u'WDT', u'VBP', u'PRP$', u'NN', u'IN', u'JJ', u'IN', u'DT', u'NN', u',', u'VBG', u'IN', u'DT', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'CC', u'NNP', u'NNP', u'.'], u'char_offsets': [[19743, 19748], [19749, 19751], [19752, 19753], [19754, 19759], [19760, 19767], [19768, 19770], [19771, 19776], [19777, 19786], [19787, 19795], [19796, 19800], [19801, 19805], [19806, 19811], [19812, 19815], [19816, 19823], [19824, 19828], [19829, 19831], [19832, 19835], [19836, 19840], [19840, 19841], [19842, 19851], [19852, 19857], [19858, 19861], [19862, 19868], [19869, 19874], [19874, 19875], [19876, 19882], [19883, 19888], [19888, 19889], [19890, 19893], [19894, 19900], [19901, 19906], [19906, 19907]]}) 
answer: set([u'ottowa', u'sit'])
candidate Sentence: (0.089278124272823334, {u'tokens': [u'There', u'are', u'old', u'folk', u'tales', u'about', u'how', u'she', u'made', u'the', u'choice', u':', u'that', u'she', u'did', u'so', u'by', u'sticking', u'her', u'hatpin', u'on', u'a', u'map', u'roughly', u'halfway', u'between', u'Toronto', u'and', u'Montreal', u',', u'or', u'that', u'she', u'liked', u'watercolours', u'she', u'had', u'seen', u'of', u'the', u'area', u'.'], u'lemmas': [u'there', u'be', u'old', u'folk', u'tale', u'about', u'how', u'she', u'make', u'the', u'choice', u':', u'that', u'she', u'do', u'so', u'by', u'stick', u'she', u'hatpin', u'on', u'a', u'map', u'roughly', u'halfway', u'between', u'Toronto', u'and', u'Montreal', u',', u'or', u'that', u'she', u'like', u'watercolour', u'she', u'have', u'see', u'of', u'the', u'area', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'NN', u'NNS', u'IN', u'WRB', u'PRP', u'VBD', u'DT', u'NN', u':', u'IN', u'PRP', u'VBD', u'RB', u'IN', u'VBG', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'RB', u'RB', u'IN', u'NNP', u'CC', u'NNP', u',', u'CC', u'IN', u'PRP', u'VBD', u'NNS', u'PRP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[4401, 4406], [4407, 4410], [4411, 4414], [4415, 4419], [4420, 4425], [4426, 4431], [4432, 4435], [4436, 4439], [4440, 4444], [4445, 4448], [4449, 4455], [4455, 4456], [4457, 4461], [4462, 4465], [4466, 4469], [4470, 4472], [4473, 4475], [4476, 4484], [4485, 4488], [4489, 4495], [4496, 4498], [4499, 4500], [4501, 4504], [4505, 4512], [4513, 4520], [4521, 4528], [4529, 4536], [4537, 4540], [4541, 4549], [4549, 4550], [4551, 4553], [4554, 4558], [4559, 4562], [4563, 4568], [4569, 4581], [4582, 4585], [4586, 4589], [4590, 4594], [4595, 4597], [4598, 4601], [4602, 4606], [4606, 4607]]}) 
answer: set([u'river', u'ottowa', u'sit'])
candidate Sentence: (0.087019875645637512, {u'tokens': [u'The', u'Ottawa', u'and', u'Gatineau', u'rivers', u'were', u'historically', u'important', u'in', u'the', u'logging', u'and', u'lumber', u'industries', u',', u'and', u'the', u'Rideau', u'as', u'part', u'of', u'the', u'Rideau', u'Canal', u'system', u'connecting', u'the', u'Great', u'Lakes', u'and', u'Saint', u'Lawrence', u'River', u'with', u'the', u'Ottawa', u'River', u'.'], u'lemmas': [u'the', u'Ottawa', u'and', u'Gatineau', u'river', u'be', u'historically', u'important', u'in', u'the', u'log', u'and', u'lumber', u'industry', u',', u'and', u'the', u'Rideau', u'as', u'part', u'of', u'the', u'Rideau', u'Canal', u'system', u'connect', u'the', u'great', u'lake', u'and', u'Saint', u'Lawrence', u'River', u'with', u'the', u'Ottawa', u'River', u'.'], u'pos': [u'DT', u'NNP', u'CC', u'NNP', u'NNS', u'VBD', u'RB', u'JJ', u'IN', u'DT', u'VBG', u'CC', u'NN', u'NNS', u',', u'CC', u'DT', u'NNP', u'IN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'VBG', u'DT', u'JJ', u'NNS', u'CC', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[20235, 20238], [20239, 20245], [20246, 20249], [20250, 20258], [20259, 20265], [20266, 20270], [20271, 20283], [20284, 20293], [20294, 20296], [20297, 20300], [20301, 20308], [20309, 20312], [20313, 20319], [20320, 20330], [20330, 20331], [20332, 20335], [20336, 20339], [20340, 20346], [20347, 20349], [20350, 20354], [20355, 20357], [20358, 20361], [20362, 20368], [20369, 20374], [20375, 20381], [20382, 20392], [20393, 20396], [20397, 20402], [20403, 20408], [20409, 20412], [20413, 20418], [20419, 20427], [20428, 20433], [20434, 20438], [20439, 20442], [20443, 20449], [20450, 20455], [20455, 20456]]}) 
answer: set([u'ottowa', u'sit'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Does Ottawa sit on the Ottowa River?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2050>.answer
_____________________________ test_yesno[param142] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2290>, (<src.tfidf.TF_IDF object at 0x7f56bc8e79d0>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2290>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.31338724493980408, {u'tokens': [u'The', u'giant', u'otter', u'-LRB-', u'Pteronura', u'brasiliensis', u'-RRB-', u'inhabits', u'South', u'America', u',', u'especially', u'the', u'Amazon', u'river', u'basin', u',', u'but', u'is', u'becoming', u'increasingly', u'rare', u'due', u'to', u'poaching', u',', u'habitat', u'loss', u',', u'and', u'the', u'use', u'of', u'mercury', u'and', u'other', u'toxins', u'in', u'illegal', u'alluvial', u'gold', u'mining', u'.'], u'lemmas': [u'the', u'giant', u'otter', u'-lrb-', u'pteronura', u'brasiliensis', u'-rrb-', u'inhabit', u'South', u'America', u',', u'especially', u'the', u'Amazon', u'river', u'basin', u',', u'but', u'be', u'become', u'increasingly', u'rare', u'due', u'to', u'poach', u',', u'habitat', u'loss', u',', u'and', u'the', u'use', u'of', u'mercury', u'and', u'other', u'toxin', u'in', u'illegal', u'alluvial', u'gold', u'mining', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'NNP', u'NNP', u',', u'RB', u'DT', u'NNP', u'NN', u'NN', u',', u'CC', u'VBZ', u'VBG', u'RB', u'JJ', u'JJ', u'TO', u'VBG', u',', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[5269, 5272], [5273, 5278], [5279, 5284], [5285, 5286], [5286, 5295], [5296, 5308], [5308, 5309], [5310, 5318], [5319, 5324], [5325, 5332], [5332, 5333], [5334, 5344], [5345, 5348], [5349, 5355], [5356, 5361], [5362, 5367], [5367, 5368], [5369, 5372], [5373, 5375], [5376, 5384], [5385, 5397], [5398, 5402], [5403, 5406], [5407, 5409], [5410, 5418], [5418, 5419], [5420, 5427], [5428, 5432], [5432, 5433], [5434, 5437], [5438, 5441], [5442, 5445], [5446, 5448], [5449, 5456], [5457, 5460], [5461, 5466], [5467, 5473], [5474, 5476], [5477, 5484], [5485, 5493], [5494, 5498], [5499, 5505], [5505, 5506]]}) 
answer: set([u'live'])
candidate Sentence: (0.27010050415992737, {u'tokens': [u'The', u'sea', u'otter', u'does', u'live', u'in', u'the', u'sea', u'for', u'most', u'of', u'its', u'life', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'do', u'live', u'in', u'the', u'sea', u'for', u'most', u'of', u'its', u'life', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'VB', u'IN', u'DT', u'NN', u'IN', u'JJS', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[2185, 2188], [2189, 2192], [2193, 2198], [2199, 2203], [2204, 2208], [2209, 2211], [2212, 2215], [2216, 2219], [2220, 2223], [2224, 2228], [2229, 2231], [2232, 2235], [2236, 2240], [2240, 2241]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.17335149645805359, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[3331, 3332], [3333, 3336], [3337, 3342], [3343, 3345], [3346, 3351], [3352, 3355], [3355, 3356], [3357, 3367], [3368, 3371], [3372, 3378], [3379, 3380], [3380, 3387], [3388, 3394], [3394, 3395], [3396, 3400], [3401, 3406], [3407, 3410], [3411, 3418], [3419, 3424], [3425, 3427], [3428, 3433], [3434, 3441], [3441, 3442]]}) 
answer: set([u'giant', u'south'])
candidate Sentence: (0.14358919858932495, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[1187, 1193], [1194, 1196], [1197, 1200], [1201, 1207], [1208, 1210], [1211, 1216], [1217, 1228], [1229, 1232], [1233, 1238], [1239, 1242], [1243, 1251], [1252, 1254], [1255, 1258], [1259, 1263], [1264, 1270], [1271, 1276], [1277, 1281], [1282, 1286], [1286, 1287], [1288, 1292], [1293, 1297], [1298, 1302], [1303, 1307], [1308, 1312], [1313, 1322], [1323, 1328], [1328, 1329]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.0889163538813591, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'-LRB-', u'such', u'as', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'-lrb-', u'such', u'as', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'-LRB-', u'JJ', u'IN', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[4183, 4189], [4190, 4194], [4195, 4201], [4202, 4209], [4210, 4211], [4211, 4215], [4216, 4218], [4219, 4224], [4225, 4227], [4228, 4234], [4234, 4235], [4235, 4236], [4237, 4240], [4241, 4247], [4248, 4250], [4251, 4254], [4255, 4259], [4260, 4261], [4262, 4267], [4268, 4270], [4271, 4281], [4282, 4289], [4289, 4290]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
candidate Sentence: (0.063551932573318481, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[2374, 2383], [2384, 2391], [2392, 2396], [2397, 2399], [2400, 2405], [2406, 2412], [2413, 2422], [2422, 2423], [2424, 2428], [2429, 2433], [2434, 2439], [2440, 2447], [2448, 2456], [2456, 2457], [2458, 2463], [2464, 2470], [2471, 2475], [2476, 2478], [2479, 2485], [2488, 2490], [2491, 2492], [2493, 2496], [2497, 2504], [2505, 2510], [2511, 2517], [2518, 2521], [2522, 2524], [2525, 2531], [2532, 2537], [2537, 2538]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.052556820213794708, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[2027, 2031], [2032, 2039], [2040, 2044], [2045, 2051], [2052, 2057], [2057, 2058], [2059, 2067], [2068, 2070], [2071, 2077], [2078, 2080], [2081, 2085], [2086, 2088], [2089, 2095], [2095, 2096], [2097, 2106], [2107, 2115], [2116, 2120], [2121, 2123], [2124, 2129], [2130, 2134], [2135, 2137], [2138, 2142], [2143, 2145], [2146, 2151], [2152, 2157], [2158, 2161], [2162, 2170], [2171, 2182], [2182, 2183]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.040712404996156693, {u'tokens': [u'Cladogram', u',', u'after', u'Koepfli', u'et', u'al', u'2008', u'and', u'Bininda-Emonds', u'et', u'al', u'1999', u'*', u'Northern', u'river', u'otter', u'-LRB-', u'Lontra', u'canadensis', u'-RRB-', u'*', u'Southern', u'river', u'otter', u'-LRB-', u'Lontra', u'provocax', u'-RRB-', u'*', u'Neotropical', u'river', u'otter', u'-LRB-', u'Lontra', u'longicaudis', u'-RRB-', u'*', u'African', u'clawless', u'otter', u'-LRB-', u'Aonyx', u'capensis', u'-RRB-', u'*', u'Congo', u'clawless', u'otter', u'-LRB-', u'Aonyx', u'congicus', u'-RRB-', u'*', u'Oriental', u'small-clawed', u'otter', u'-LRB-', u'Aonyx', u'cinerea', u'-RRB-', u'The', u'northern', u'river', u'otter', u'-LRB-', u'Lontra', u'canadensis', u'-RRB-', u'became', u'one', u'of', u'the', u'major', u'animals', u'hunted', u'and', u'trapped', u'for', u'fur', u'in', u'North', u'America', u'after', u'European', u'contact', u'.'], u'lemmas': [u'Cladogram', u',', u'after', u'Koepfli', u'et', u'al', u'2008', u'and', u'Bininda-Emonds', u'et', u'al', u'1999', u'*', u'Northern', u'river', u'otter', u'-lrb-', u'lontra', u'canadensis', u'-rrb-', u'*', u'Southern', u'river', u'otter', u'-lrb-', u'lontra', u'provocax', u'-rrb-', u'*', u'neotropical', u'river', u'otter', u'-lrb-', u'lontra', u'longicaudi', u'-rrb-', u'*', u'African', u'clawless', u'otter', u'-lrb-', u'aonyx', u'capensis', u'-rrb-', u'*', u'Congo', u'clawless', u'otter', u'-lrb-', u'aonyx', u'congicus', u'-rrb-', u'*', u'oriental', u'small-clawed', u'otter', u'-lrb-', u'aonyx', u'cinerea', u'-rrb-', u'the', u'northern', u'river', u'otter', u'-lrb-', u'lontra', u'canadensis', u'-rrb-', u'become', u'one', u'of', u'the', u'major', u'animal', u'hunt', u'and', u'trap', u'for', u'fur', u'in', u'North', u'America', u'after', u'european', u'contact', u'.'], u'pos': [u'NNP', u',', u'IN', u'NNP', u'FW', u'FW', u'CD', u'CC', u'NNP', u'FW', u'FW', u'CD', u'SYM', u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'JJ', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'JJ', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'DT', u'JJ', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBD', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[2539, 2548], [2548, 2549], [2550, 2555], [2556, 2563], [2564, 2566], [2567, 2569], [2570, 2574], [2578, 2581], [2582, 2596], [2597, 2599], [2600, 2602], [2603, 2607], [2608, 2609], [2609, 2617], [2618, 2623], [2624, 2629], [2630, 2631], [2631, 2637], [2638, 2648], [2648, 2649], [2651, 2652], [2652, 2660], [2661, 2666], [2667, 2672], [2673, 2674], [2674, 2680], [2681, 2689], [2689, 2690], [2692, 2693], [2693, 2704], [2705, 2710], [2711, 2716], [2717, 2718], [2718, 2724], [2725, 2736], [2736, 2737], [2739, 2740], [2740, 2747], [2748, 2756], [2757, 2762], [2763, 2764], [2764, 2769], [2770, 2778], [2778, 2779], [2780, 2781], [2781, 2786], [2787, 2795], [2796, 2801], [2802, 2803], [2803, 2808], [2809, 2817], [2817, 2818], [2819, 2820], [2820, 2828], [2829, 2841], [2842, 2847], [2848, 2849], [2849, 2854], [2855, 2862], [2862, 2863], [2864, 2867], [2868, 2876], [2877, 2882], [2883, 2888], [2889, 2890], [2890, 2896], [2897, 2907], [2907, 2908], [2909, 2915], [2916, 2919], [2920, 2922], [2923, 2926], [2927, 2932], [2933, 2940], [2941, 2947], [2948, 2951], [2952, 2959], [2960, 2963], [2964, 2967], [2968, 2970], [2971, 2976], [2977, 2984], [2985, 2990], [2991, 2999], [3000, 3007], [3007, 3008]]}) 
answer: set([u'giant', u'live', u'south'])
candidate Sentence: (0.035358920693397522, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1925, 1931], [1932, 1935], [1936, 1940], [1941, 1947], [1947, 1948], [1949, 1956], [1957, 1961], [1962, 1964], [1965, 1968], [1969, 1974], [1975, 1977], [1978, 1987], [1988, 1991], [1992, 1996], [1997, 1999], [2000, 2006], [2006, 2007], [2008, 2013], [2014, 2016], [2017, 2020], [2021, 2024], [2024, 2025]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
candidate Sentence: (0.033078502863645554, {u'tokens': [u'The', u'UK', u'Biodiversity', u'Action', u'Plan', u'envisages', u'the', u're-establishment', u'of', u'otters', u'by', u'2010', u'in', u'all', u'the', u'UK', u'rivers', u'and', u'coastal', u'areas', u'that', u'they', u'inhabited', u'in', u'1960', u'.'], u'lemmas': [u'the', u'UK', u'Biodiversity', u'Action', u'Plan', u'envisage', u'the', u're-establishment', u'of', u'otter', u'by', u'2010', u'in', u'all', u'the', u'UK', u'river', u'and', u'coastal', u'area', u'that', u'they', u'inhabit', u'in', u'1960', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNS', u'IN', u'CD', u'IN', u'PDT', u'DT', u'NNP', u'NNS', u'CC', u'JJ', u'NNS', u'IN', u'PRP', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[5019, 5022], [5023, 5025], [5026, 5038], [5039, 5045], [5046, 5050], [5051, 5060], [5061, 5064], [5065, 5081], [5082, 5084], [5085, 5091], [5092, 5094], [5095, 5099], [5100, 5102], [5103, 5106], [5107, 5110], [5111, 5113], [5114, 5120], [5121, 5124], [5125, 5132], [5133, 5138], [5139, 5143], [5144, 5148], [5149, 5158], [5159, 5161], [5162, 5166], [5166, 5167]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Does the giant otter live in South America?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2290>.answer
_____________________________ test_yesno[param143] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa22d8>, (<src.tfidf.TF_IDF object at 0x7f56bc8e79d0>, set(['otter'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa22d8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.31338724493980408, {u'tokens': [u'The', u'giant', u'otter', u'-LRB-', u'Pteronura', u'brasiliensis', u'-RRB-', u'inhabits', u'South', u'America', u',', u'especially', u'the', u'Amazon', u'river', u'basin', u',', u'but', u'is', u'becoming', u'increasingly', u'rare', u'due', u'to', u'poaching', u',', u'habitat', u'loss', u',', u'and', u'the', u'use', u'of', u'mercury', u'and', u'other', u'toxins', u'in', u'illegal', u'alluvial', u'gold', u'mining', u'.'], u'lemmas': [u'the', u'giant', u'otter', u'-lrb-', u'pteronura', u'brasiliensis', u'-rrb-', u'inhabit', u'South', u'America', u',', u'especially', u'the', u'Amazon', u'river', u'basin', u',', u'but', u'be', u'become', u'increasingly', u'rare', u'due', u'to', u'poach', u',', u'habitat', u'loss', u',', u'and', u'the', u'use', u'of', u'mercury', u'and', u'other', u'toxin', u'in', u'illegal', u'alluvial', u'gold', u'mining', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBZ', u'NNP', u'NNP', u',', u'RB', u'DT', u'NNP', u'NN', u'NN', u',', u'CC', u'VBZ', u'VBG', u'RB', u'JJ', u'JJ', u'TO', u'VBG', u',', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[5269, 5272], [5273, 5278], [5279, 5284], [5285, 5286], [5286, 5295], [5296, 5308], [5308, 5309], [5310, 5318], [5319, 5324], [5325, 5332], [5332, 5333], [5334, 5344], [5345, 5348], [5349, 5355], [5356, 5361], [5362, 5367], [5367, 5368], [5369, 5372], [5373, 5375], [5376, 5384], [5385, 5397], [5398, 5402], [5403, 5406], [5407, 5409], [5410, 5418], [5418, 5419], [5420, 5427], [5428, 5432], [5432, 5433], [5434, 5437], [5438, 5441], [5442, 5445], [5446, 5448], [5449, 5456], [5457, 5460], [5461, 5466], [5467, 5473], [5474, 5476], [5477, 5484], [5485, 5493], [5494, 5498], [5499, 5505], [5505, 5506]]}) 
answer: set([u'live'])
candidate Sentence: (0.27010050415992737, {u'tokens': [u'The', u'sea', u'otter', u'does', u'live', u'in', u'the', u'sea', u'for', u'most', u'of', u'its', u'life', u'.'], u'lemmas': [u'the', u'sea', u'otter', u'do', u'live', u'in', u'the', u'sea', u'for', u'most', u'of', u'its', u'life', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'VB', u'IN', u'DT', u'NN', u'IN', u'JJS', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[2185, 2188], [2189, 2192], [2193, 2198], [2199, 2203], [2204, 2208], [2209, 2211], [2212, 2215], [2216, 2219], [2220, 2223], [2224, 2228], [2229, 2231], [2232, 2235], [2236, 2240], [2240, 2241]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.17335149645805359, {u'tokens': [u'A', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otters', u'-LRB-', u'Enhydra', u'lutris', u'-RRB-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'lemmas': [u'a', u'sea', u'otter', u'in', u'Morro', u'Bay', u',', u'California', u'Sea', u'otter', u'-lrb-', u'enhydra', u'lutri', u'-rrb-', u'live', u'along', u'the', u'Pacific', u'coast', u'of', u'North', u'America', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNS', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBP', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[3331, 3332], [3333, 3336], [3337, 3342], [3343, 3345], [3346, 3351], [3352, 3355], [3355, 3356], [3357, 3367], [3368, 3371], [3372, 3378], [3379, 3380], [3380, 3387], [3388, 3394], [3394, 3395], [3396, 3400], [3401, 3406], [3407, 3410], [3411, 3418], [3419, 3424], [3425, 3427], [3428, 3433], [3434, 3441], [3441, 3442]]}) 
answer: set([u'giant', u'south'])
candidate Sentence: (0.14358919858932495, {u'tokens': [u'Otters', u'do', u'not', u'depend', u'on', u'their', u'specialized', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'waters', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rates', u'.'], u'lemmas': [u'otter', u'do', u'not', u'depend', u'on', u'they', u'specialize', u'fur', u'alone', u'for', u'survival', u'in', u'the', u'cold', u'water', u'where', u'many', u'live', u':', u'they', u'also', u'have', u'very', u'high', u'metabolic', u'rate', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VB', u'IN', u'PRP$', u'VBN', u'NN', u'RB', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WRB', u'JJ', u'VBP', u':', u'PRP', u'RB', u'VBP', u'RB', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[1187, 1193], [1194, 1196], [1197, 1200], [1201, 1207], [1208, 1210], [1211, 1216], [1217, 1228], [1229, 1232], [1233, 1238], [1239, 1242], [1243, 1251], [1252, 1254], [1255, 1258], [1259, 1263], [1264, 1270], [1271, 1276], [1277, 1281], [1282, 1286], [1286, 1287], [1288, 1292], [1293, 1297], [1298, 1302], [1303, 1307], [1308, 1312], [1313, 1322], [1323, 1328], [1328, 1329]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.0889163538813591, {u'tokens': [u'Unlike', u'most', u'marine', u'mammals', u'-LRB-', u'such', u'as', u'seals', u'or', u'whales', u'-RRB-', u',', u'sea', u'otters', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulating', u'blubber', u'.'], u'lemmas': [u'unlike', u'most', u'marine', u'mammal', u'-lrb-', u'such', u'as', u'seal', u'or', u'whale', u'-rrb-', u',', u'sea', u'otter', u'do', u'not', u'have', u'a', u'layer', u'of', u'insulate', u'blubber', u'.'], u'pos': [u'IN', u'JJS', u'JJ', u'NNS', u'-LRB-', u'JJ', u'IN', u'NNS', u'CC', u'NNS', u'-RRB-', u',', u'NN', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'NN', u'IN', u'VBG', u'NN', u'.'], u'char_offsets': [[4183, 4189], [4190, 4194], [4195, 4201], [4202, 4209], [4210, 4211], [4211, 4215], [4216, 4218], [4219, 4224], [4225, 4227], [4228, 4234], [4234, 4235], [4235, 4236], [4237, 4240], [4241, 4247], [4248, 4250], [4251, 4254], [4255, 4259], [4260, 4261], [4262, 4267], [4268, 4270], [4271, 4281], [4282, 4289], [4289, 4290]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
candidate Sentence: (0.063551932573318481, {u'tokens': [u'Different', u'species', u'vary', u'in', u'their', u'social', u'structure', u',', u'with', u'some', u'being', u'largely', u'solitary', u',', u'while', u'others', u'live', u'in', u'groups', u'in', u'a', u'few', u'species', u'these', u'groups', u'may', u'be', u'fairly', u'large', u'.'], u'lemmas': [u'different', u'species', u'vary', u'in', u'they', u'social', u'structure', u',', u'with', u'some', u'be', u'largely', u'solitary', u',', u'while', u'other', u'live', u'in', u'group', u'in', u'a', u'few', u'species', u'these', u'group', u'may', u'be', u'fairly', u'large', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'IN', u'PRP$', u'JJ', u'NN', u',', u'IN', u'DT', u'VBG', u'RB', u'JJ', u',', u'IN', u'NNS', u'VBP', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'DT', u'NNS', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[2374, 2383], [2384, 2391], [2392, 2396], [2397, 2399], [2400, 2405], [2406, 2412], [2413, 2422], [2422, 2423], [2424, 2428], [2429, 2433], [2434, 2439], [2440, 2447], [2448, 2456], [2456, 2457], [2458, 2463], [2464, 2470], [2471, 2475], [2476, 2478], [2479, 2485], [2488, 2490], [2491, 2492], [2493, 2496], [2497, 2504], [2505, 2510], [2511, 2517], [2518, 2521], [2522, 2524], [2525, 2531], [2532, 2537], [2537, 2538]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.052556820213794708, {u'tokens': [u'Most', u'species', u'live', u'beside', u'water', u',', u'entering', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spending', u'much', u'of', u'their', u'time', u'on', u'land', u'to', u'avoid', u'their', u'fur', u'becoming', u'waterlogged', u'.'], u'lemmas': [u'most', u'species', u'live', u'beside', u'water', u',', u'enter', u'it', u'mainly', u'to', u'hunt', u'or', u'travel', u',', u'otherwise', u'spend', u'much', u'of', u'they', u'time', u'on', u'land', u'to', u'avoid', u'they', u'fur', u'become', u'waterlogged', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'IN', u'NN', u',', u'VBG', u'PRP', u'RB', u'TO', u'NN', u'CC', u'NN', u',', u'RB', u'VBG', u'RB', u'IN', u'PRP$', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u'VBG', u'JJ', u'.'], u'char_offsets': [[2027, 2031], [2032, 2039], [2040, 2044], [2045, 2051], [2052, 2057], [2057, 2058], [2059, 2067], [2068, 2070], [2071, 2077], [2078, 2080], [2081, 2085], [2086, 2088], [2089, 2095], [2095, 2096], [2097, 2106], [2107, 2115], [2116, 2120], [2121, 2123], [2124, 2129], [2130, 2134], [2135, 2137], [2138, 2142], [2143, 2145], [2146, 2151], [2152, 2157], [2158, 2161], [2162, 2170], [2171, 2182], [2182, 2183]]}) 
answer: set([u'giant', u'america', u'south'])
candidate Sentence: (0.040712404996156693, {u'tokens': [u'Cladogram', u',', u'after', u'Koepfli', u'et', u'al', u'2008', u'and', u'Bininda-Emonds', u'et', u'al', u'1999', u'*', u'Northern', u'river', u'otter', u'-LRB-', u'Lontra', u'canadensis', u'-RRB-', u'*', u'Southern', u'river', u'otter', u'-LRB-', u'Lontra', u'provocax', u'-RRB-', u'*', u'Neotropical', u'river', u'otter', u'-LRB-', u'Lontra', u'longicaudis', u'-RRB-', u'*', u'African', u'clawless', u'otter', u'-LRB-', u'Aonyx', u'capensis', u'-RRB-', u'*', u'Congo', u'clawless', u'otter', u'-LRB-', u'Aonyx', u'congicus', u'-RRB-', u'*', u'Oriental', u'small-clawed', u'otter', u'-LRB-', u'Aonyx', u'cinerea', u'-RRB-', u'The', u'northern', u'river', u'otter', u'-LRB-', u'Lontra', u'canadensis', u'-RRB-', u'became', u'one', u'of', u'the', u'major', u'animals', u'hunted', u'and', u'trapped', u'for', u'fur', u'in', u'North', u'America', u'after', u'European', u'contact', u'.'], u'lemmas': [u'Cladogram', u',', u'after', u'Koepfli', u'et', u'al', u'2008', u'and', u'Bininda-Emonds', u'et', u'al', u'1999', u'*', u'Northern', u'river', u'otter', u'-lrb-', u'lontra', u'canadensis', u'-rrb-', u'*', u'Southern', u'river', u'otter', u'-lrb-', u'lontra', u'provocax', u'-rrb-', u'*', u'neotropical', u'river', u'otter', u'-lrb-', u'lontra', u'longicaudi', u'-rrb-', u'*', u'African', u'clawless', u'otter', u'-lrb-', u'aonyx', u'capensis', u'-rrb-', u'*', u'Congo', u'clawless', u'otter', u'-lrb-', u'aonyx', u'congicus', u'-rrb-', u'*', u'oriental', u'small-clawed', u'otter', u'-lrb-', u'aonyx', u'cinerea', u'-rrb-', u'the', u'northern', u'river', u'otter', u'-lrb-', u'lontra', u'canadensis', u'-rrb-', u'become', u'one', u'of', u'the', u'major', u'animal', u'hunt', u'and', u'trap', u'for', u'fur', u'in', u'North', u'America', u'after', u'european', u'contact', u'.'], u'pos': [u'NNP', u',', u'IN', u'NNP', u'FW', u'FW', u'CD', u'CC', u'NNP', u'FW', u'FW', u'CD', u'SYM', u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'JJ', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'JJ', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'DT', u'JJ', u'NN', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'VBD', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[2539, 2548], [2548, 2549], [2550, 2555], [2556, 2563], [2564, 2566], [2567, 2569], [2570, 2574], [2578, 2581], [2582, 2596], [2597, 2599], [2600, 2602], [2603, 2607], [2608, 2609], [2609, 2617], [2618, 2623], [2624, 2629], [2630, 2631], [2631, 2637], [2638, 2648], [2648, 2649], [2651, 2652], [2652, 2660], [2661, 2666], [2667, 2672], [2673, 2674], [2674, 2680], [2681, 2689], [2689, 2690], [2692, 2693], [2693, 2704], [2705, 2710], [2711, 2716], [2717, 2718], [2718, 2724], [2725, 2736], [2736, 2737], [2739, 2740], [2740, 2747], [2748, 2756], [2757, 2762], [2763, 2764], [2764, 2769], [2770, 2778], [2778, 2779], [2780, 2781], [2781, 2786], [2787, 2795], [2796, 2801], [2802, 2803], [2803, 2808], [2809, 2817], [2817, 2818], [2819, 2820], [2820, 2828], [2829, 2841], [2842, 2847], [2848, 2849], [2849, 2854], [2855, 2862], [2862, 2863], [2864, 2867], [2868, 2876], [2877, 2882], [2883, 2888], [2889, 2890], [2890, 2896], [2897, 2907], [2907, 2908], [2909, 2915], [2916, 2919], [2920, 2922], [2923, 2926], [2927, 2932], [2933, 2940], [2941, 2947], [2948, 2951], [2952, 2959], [2960, 2963], [2964, 2967], [2968, 2970], [2971, 2976], [2977, 2984], [2985, 2990], [2991, 2999], [3000, 3007], [3007, 3008]]}) 
answer: set([u'giant', u'live', u'south'])
candidate Sentence: (0.035358920693397522, {u'tokens': [u'Otters', u'are', u'very', u'active', u',', u'chasing', u'prey', u'in', u'the', u'water', u'or', u'searching', u'the', u'beds', u'of', u'rivers', u',', u'lakes', u'or', u'the', u'sea', u'.'], u'lemmas': [u'otter', u'be', u'very', u'active', u',', u'chase', u'prey', u'in', u'the', u'water', u'or', u'search', u'the', u'bed', u'of', u'river', u',', u'lake', u'or', u'the', u'sea', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'JJ', u',', u'VBG', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBG', u'DT', u'NNS', u'IN', u'NNS', u',', u'NNS', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1925, 1931], [1932, 1935], [1936, 1940], [1941, 1947], [1947, 1948], [1949, 1956], [1957, 1961], [1962, 1964], [1965, 1968], [1969, 1974], [1975, 1977], [1978, 1987], [1988, 1991], [1992, 1996], [1997, 1999], [2000, 2006], [2006, 2007], [2008, 2013], [2014, 2016], [2017, 2020], [2021, 2024], [2024, 2025]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
candidate Sentence: (0.033078502863645554, {u'tokens': [u'The', u'UK', u'Biodiversity', u'Action', u'Plan', u'envisages', u'the', u're-establishment', u'of', u'otters', u'by', u'2010', u'in', u'all', u'the', u'UK', u'rivers', u'and', u'coastal', u'areas', u'that', u'they', u'inhabited', u'in', u'1960', u'.'], u'lemmas': [u'the', u'UK', u'Biodiversity', u'Action', u'Plan', u'envisage', u'the', u're-establishment', u'of', u'otter', u'by', u'2010', u'in', u'all', u'the', u'UK', u'river', u'and', u'coastal', u'area', u'that', u'they', u'inhabit', u'in', u'1960', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNS', u'IN', u'CD', u'IN', u'PDT', u'DT', u'NNP', u'NNS', u'CC', u'JJ', u'NNS', u'IN', u'PRP', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[5019, 5022], [5023, 5025], [5026, 5038], [5039, 5045], [5046, 5050], [5051, 5060], [5061, 5064], [5065, 5081], [5082, 5084], [5085, 5091], [5092, 5094], [5095, 5099], [5100, 5102], [5103, 5106], [5107, 5110], [5111, 5113], [5114, 5120], [5121, 5124], [5125, 5132], [5133, 5138], [5139, 5143], [5144, 5148], [5149, 5158], [5159, 5161], [5162, 5166], [5166, 5167]]}) 
answer: set([u'giant', u'america', u'live', u'south'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Does the giant otter live in South America?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa22d8>.answer
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2440>, (<src.tfidf.TF_IDF object at 0x7f56bba11ed0>, set(['santiago'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2440>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.36759155988693237, {u'tokens': [u'It', u'is', u'the', u'name', u'of', u':', u'**', u'Santiago', u'del', u'Estero', u',', u'capital', u'of', u'the', u'province', u'*', u'Santiago', u',', u'Rio', u'Grande', u'do', u'Sul', u'**', u'Santiago', u'de', u'Cuba', u',', u'capital', u'of', u'the', u'province', u'**', u'Santiago', u'de', u'los', u'Caballeros', u',', u'capital', u'of', u'the', u'province', u'*', u'Guayaquil', u',', u'officially', u'called', u'Santiago', u'de', u'Guayaquil', u'*', u'Jamaica', u',', u'formerly', u'known', u'as', u'Santiago', u'*', u'Spanish', u'Town', u',', u'Jamaica', u',', u'formerly', u'known', u'as', u'Santiago', u'de', u'la', u'Vega', u'*', u'Quertaro', u',', u'Quertaro', u',', u'formerly', u'called', u'Santiago', u'de', u'Quertaro', u'*', u'Santiago', u'Tianguistenco', u',', u'a', u'city', u'in', u'the', u'State', u'of', u'Mxico', u'*', u'Len', u',', u'Nicaragua', u',', u'originally', u'called', u'Santiago', u'de', u'los', u'Caballeros', u'de', u'Len', u'*', u'Santiago', u',', u'Paraguay', u',', u'town', u'and', u'district', u'in', u'Misiones', u'Department', u'*', u'Santiago', u'de', u'Surco', u',', u'a', u'district', u'of', u'Lima', u'*', u'Santiago', u'de', u'Chuco', u',', u'a', u'province', u'of', u'the', u'La', u'Libertad', u'region', u'*', u'Santiago', u'Island', u'-LRB-', u'Philippines', u'-RRB-', u',', u'Pangasinan', u'province', u'*', u'Santiago', u'-LRB-', u'Alccer', u'do', u'Sal', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alccer', u'do', u'Sal', u'*', u'Santiago', u'-LRB-', u'Arganil', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arganil', u'*', u'Santiago', u'-LRB-', u'Armamar', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Armamar', u'*', u'Santiago', u'-LRB-', u'Lisbon', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Lisbon', u'*', u'Santiago', u'-LRB-', u'Seia', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Seia', u'*', u'Santiago', u'-LRB-', u'Sesimbra', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sesimbra', u'*', u'Santiago', u'-LRB-', u'Tavira', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tavira', u'*', u'Santiago', u'-LRB-', u'Torres', u'Novas', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Novas', u'*', u'Santiago', u'da', u'Guarda', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ansio', u'*', u'Santiago', u'da', u'Ribeira', u'de', u'Alhariz', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valpaos', u'*', u'Santiago', u'de', u'Besteiros', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tondela', u'*', u'Santiago', u'de', u'Bougado', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Trofa', u'*', u'Santiago', u'de', u'Candoso', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Guimares', u'*', u'Santiago', u'do', u'Cacm', u',', u'a', u'parish', u'and', u'a', u'municipality', u'in', u'the', u'Setbal', u'*', u'Santiago', u'de', u'Carreiras', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Vila', u'Verde', u'*', u'Santiago', u'de', u'Cassurres', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Mangualde', u'*', u'Santiago', u'de', u'Figueir', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Amarante', u'*', u'Santiago', u'de', u'Litm', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Pombal', u'*', u'Santiago', u'de', u'Montalegre', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sardoal', u'*', u'Santiago', u'de', u'Pies', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Cinfes', u'*', u'Santiago', u'de', u'Riba-Ul', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Oliveira', u'de', u'Azemis', u'*', u'Santiago', u'de', u'Subarrifana', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Penafiel', u'*', u'Santiago', u'de', u'Vila', u'Ch', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ponte', u'da', u'Barca', u'*', u'Santiago', u'do', u'Escoural', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Montemor-o-Novo', u'*', u'Santiago', u'dos', u'Velhos', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arruda', u'dos', u'Vinhos', u'*', u'So', u'Pedro', u'e', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Vedras', u'*', u'Santiago', u'Maior', u'-LRB-', u'Alandroal', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alandroal', u'*', u'Santiago', u'Maior', u'-LRB-', u'Beja', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Beja', u'*', u'Santiago', u'Maior', u'-LRB-', u'Castelo', u'de', u'Vide', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Castelo', u'de', u'Vide', u'*', u'Vale', u'de', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Odemira', u'*', u'Santiago', u'-LRB-', u'Valds', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valds', u'*', u'Santiago', u'-LRB-', u'Sariego', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sariego', u'*', u'Santiago', u'de', u'la', u'Ribera', u',', u'a', u'cluster', u'of', u'San', u'Javier', u'in', u'Murcia', u'*', u'Santiago', u'-LRB-', u'comarca', u'-RRB-', u',', u'a', u'comarca', u'in', u'the', u'province', u'of', u'A', u'Corua', u'*', u'Santiago', u'del', u'Teide', u',', u'Canary', u'Islands', u'*', u'Santiago', u'High', u'School', u',', u'Garden', u'Grove', u',', u'California', u'*', u'Santiago', u',', u'Pennsylvania', u',', u'in', u'Allegheny', u'County', u'*', u'Santiago', u'Peak', u',', u'a', u'mountain', u'in', u'Orange', u'County', u',', u'California', u'*', u'Montevideo', u',', u'originally', u'called', u'San', u'Felipe', u'y', u'Santiago', u'de', u'Montevideo', u'*', u'Caracas', u',', u'originally', u'called', u'Santiago', u'de', u'Len', u'de', u'Caracas', u'*', u'Santiago', u'River', u',', u'a', u'tributary', u'of', u'the', u'Amazon', u'River', u'Santiago', u'is', u'the', u'name', u'of', u':', u'*', u'Benito', u'Santiago', u',', u'a', u'professional', u'baseball', u'catcher', u'*', u'Hugo', u'Santiago', u',', u'film', u'director', u'*', u'Joey', u'Santiago', u',', u'guitarist', u'of', u'the', u'Pixies', u'and', u'The', u'Martinis', u'*', u'Liliana', u'Santiago', u',', u'American', u'Economist', u'*', u'Rafael', u'Santiago', u'Maria', u',', u'a', u'Brazilian', u'footballer', u'known', u'simply', u'as', u'Santiago', u'*', u'Santiago', u'Caballero', u',', u'DJ', u'and', u'Producer', u'*', u'Santiago', u'Cabrera', u',', u'an', u'actor', u'*', u'James', u',', u'son', u'of', u'Zebedee', u',', u'also', u'called', u'Saint', u'James', u'the', u'Greater', u'*', u'Dominic', u'Santiago', u',', u'a', u'fictional', u'character', u'from', u'Gears', u'of', u'War', u'*', u'Santiago', u'Arnavisca', u',', u'a', u'fictional', u'character', u'from', u'*', u'Santiago', u',', u'the', u'name', u'of', u'a', u'character', u'in', u'Chronicle', u'of', u'a', u'Death', u'Foretold', u'by', u'Gabriel', u'Garca', u'Mrquez', u'*', u'Santiago', u',', u'the', u'titular', u'character', u'of', u'Ernest', u'Hemingway', u"'s", u'The', u'Old', u'Man', u'and', u'the', u'Sea', u'*', u'Luis', u'Santiago', u',', u'a', u'fictional', u'character', u'in', u'the', u'television', u'series', u'Babylon', u'5', u'*', u'Santiago', u'-LRB-', u'The', u'Vampire', u'Chronicles', u'-RRB-', u',', u'character', u'in', u'Anne', u'Rice', u"'s", u'novel', u'Interview', u'with', u'the', u'Vampire', u'*', u'Santiago', u',', u'the', u'main', u'character', u'of', u'Paulo', u'Coelho', u"'s", u'The', u'Alchemist', u'-LRB-', u'novel', u'-RRB-', u'*', u'Santiago', u',', u'a', u'character', u'on', u'the', u'television', u'show', u'Friday', u'Night', u'Lights', u'*', u'Battle', u'of', u'Santiago', u'de', u'Cuba', u'*', u'Santiago', u'-LRB-', u'band', u'-RRB-', u',', u'an', u'indie/punk', u'band', u'from', u'Santa', u'Rosa', u',', u'California', u',', u'USA', u'*', u'Santiago', u',', u'a', u'1996', u'album', u'by', u'The', u'Chieftains', u'*', u'``', u'Santiago', u"''", u',', u'the', u'title', u'of', u'one', u'of', u'Loreena', u'McKennitt', u"'s", u'songs', u'from', u'her', u'album', u'The', u'Mask', u'and', u'Mirror', u'Santiago', u'may', u'also', u'refer', u'to', u':', u'*', u'Order', u'of', u'Santiago', u',', u'a', u'Spanish', u'Knightly', u'order', u'*', u'Santiago', u'-LRB-', u'name', u'-RRB-', u',', u'about', u'the', u'common', u'Spanish', u'given', u'name', u'*', u',', u'by', u'Mike', u'Resnick', u'*', u'``', u'Santiago', u"''", u',', u'a', u'shortened', u'form', u'of', u'the', u'Reconquista', u'battle', u'cry', u'``', u'Santiago', u'y', u'cierra', u'Espaa', u"''"], u'lemmas': [u'it', u'be', u'the', u'name', u'of', u':', u'**', u'Santiago', u'del', u'Estero', u',', u'capital', u'of', u'the', u'province', u'*', u'Santiago', u',', u'Rio', u'Grande', u'do', u'Sul', u'**', u'Santiago', u'de', u'Cuba', u',', u'capital', u'of', u'the', u'province', u'**', u'Santiago', u'de', u'los', u'Caballeros', u',', u'capital', u'of', u'the', u'province', u'*', u'Guayaquil', u',', u'officially', u'call', u'Santiago', u'de', u'Guayaquil', u'*', u'Jamaica', u',', u'formerly', u'know', u'as', u'Santiago', u'*', u'Spanish', u'Town', u',', u'Jamaica', u',', u'formerly', u'know', u'as', u'Santiago', u'de', u'la', u'Vega', u'*', u'Quertaro', u',', u'Quertaro', u',', u'formerly', u'call', u'Santiago', u'de', u'Quertaro', u'*', u'Santiago', u'Tianguistenco', u',', u'a', u'city', u'in', u'the', u'state', u'of', u'Mxico', u'*', u'Len', u',', u'Nicaragua', u',', u'originally', u'call', u'Santiago', u'de', u'los', u'caballeros', u'de', u'Len', u'*', u'Santiago', u',', u'Paraguay', u',', u'town', u'and', u'district', u'in', u'Misiones', u'Department', u'*', u'Santiago', u'de', u'Surco', u',', u'a', u'district', u'of', u'Lima', u'*', u'Santiago', u'de', u'Chuco', u',', u'a', u'province', u'of', u'the', u'La', u'Libertad', u'region', u'*', u'Santiago', u'Island', u'-lrb-', u'Philippines', u'-rrb-', u',', u'Pangasinan', u'province', u'*', u'Santiago', u'-lrb-', u'Alccer', u'do', u'sal', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alccer', u'do', u'sal', u'*', u'Santiago', u'-lrb-', u'Arganil', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'arganil', u'*', u'Santiago', u'-lrb-', u'Armamar', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Armamar', u'*', u'Santiago', u'-lrb-', u'Lisbon', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Lisbon', u'*', u'Santiago', u'-lrb-', u'Seia', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Seia', u'*', u'Santiago', u'-lrb-', u'Sesimbra', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sesimbra', u'*', u'Santiago', u'-lrb-', u'Tavira', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tavira', u'*', u'Santiago', u'-lrb-', u'Torres', u'Novas', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Novas', u'*', u'Santiago', u'da', u'Guarda', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ansio', u'*', u'Santiago', u'da', u'Ribeira', u'de', u'Alhariz', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valpaos', u'*', u'Santiago', u'de', u'Besteiros', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tondela', u'*', u'Santiago', u'de', u'Bougado', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'trofa', u'*', u'Santiago', u'de', u'Candoso', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Guimares', u'*', u'Santiago', u'do', u'Cacm', u',', u'a', u'parish', u'and', u'a', u'municipality', u'in', u'the', u'Setbal', u'*', u'Santiago', u'de', u'Carreiras', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Vila', u'Verde', u'*', u'Santiago', u'de', u'Cassurres', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Mangualde', u'*', u'Santiago', u'de', u'Figueir', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Amarante', u'*', u'Santiago', u'de', u'Litm', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Pombal', u'*', u'Santiago', u'de', u'Montalegre', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'sardoal', u'*', u'Santiago', u'de', u'Pies', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Cinfes', u'*', u'Santiago', u'de', u'Riba-Ul', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Oliveira', u'de', u'Azemis', u'*', u'Santiago', u'de', u'Subarrifana', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Penafiel', u'*', u'Santiago', u'de', u'Vila', u'Ch', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ponte', u'da', u'Barca', u'*', u'Santiago', u'do', u'escoural', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Montemor-o-Novo', u'*', u'Santiago', u'do', u'Velhos', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arruda', u'dos', u'Vinhos', u'*', u'so', u'Pedro', u'e', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Vedras', u'*', u'Santiago', u'Maior', u'-lrb-', u'Alandroal', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'alandroal', u'*', u'Santiago', u'Maior', u'-lrb-', u'Beja', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Beja', u'*', u'Santiago', u'Maior', u'-lrb-', u'Castelo', u'de', u'Vide', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Castelo', u'de', u'Vide', u'*', u'Vale', u'de', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Odemira', u'*', u'Santiago', u'-lrb-', u'Valds', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valds', u'*', u'Santiago', u'-lrb-', u'Sariego', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sariego', u'*', u'Santiago', u'de', u'la', u'Ribera', u',', u'a', u'cluster', u'of', u'San', u'Javier', u'in', u'Murcia', u'*', u'Santiago', u'-lrb-', u'comarca', u'-rrb-', u',', u'a', u'comarca', u'in', u'the', u'province', u'of', u'a', u'corua', u'*', u'Santiago', u'del', u'Teide', u',', u'Canary', u'Islands', u'*', u'Santiago', u'High', u'School', u',', u'Garden', u'Grove', u',', u'California', u'*', u'Santiago', u',', u'Pennsylvania', u',', u'in', u'Allegheny', u'County', u'*', u'Santiago', u'Peak', u',', u'a', u'mountain', u'in', u'Orange', u'County', u',', u'California', u'*', u'Montevideo', u',', u'originally', u'call', u'San', u'Felipe', u'y', u'Santiago', u'de', u'Montevideo', u'*', u'Caracas', u',', u'originally', u'call', u'Santiago', u'de', u'Len', u'de', u'Caracas', u'*', u'Santiago', u'River', u',', u'a', u'tributary', u'of', u'the', u'Amazon', u'River', u'Santiago', u'be', u'the', u'name', u'of', u':', u'*', u'Benito', u'Santiago', u',', u'a', u'professional', u'baseball', u'catcher', u'*', u'Hugo', u'Santiago', u',', u'film', u'director', u'*', u'Joey', u'Santiago', u',', u'guitarist', u'of', u'the', u'Pixies', u'and', u'the', u'Martinis', u'*', u'Liliana', u'Santiago', u',', u'American', u'Economist', u'*', u'Rafael', u'Santiago', u'Maria', u',', u'a', u'brazilian', u'footballer', u'know', u'simply', u'as', u'Santiago', u'*', u'Santiago', u'Caballero', u',', u'DJ', u'and', u'Producer', u'*', u'Santiago', u'Cabrera', u',', u'a', u'actor', u'*', u'James', u',', u'son', u'of', u'Zebedee', u',', u'also', u'call', u'Saint', u'James', u'the', u'Greater', u'*', u'Dominic', u'Santiago', u',', u'a', u'fictional', u'character', u'from', u'Gears', u'of', u'War', u'*', u'Santiago', u'Arnavisca', u',', u'a', u'fictional', u'character', u'from', u'*', u'Santiago', u',', u'the', u'name', u'of', u'a', u'character', u'in', u'Chronicle', u'of', u'a', u'death', u'foretold', u'by', u'Gabriel', u'Garca', u'Mrquez', u'*', u'Santiago', u',', u'the', u'titular', u'character', u'of', u'Ernest', u'Hemingway', u"'s", u'The', u'Old', u'Man', u'and', u'the', u'Sea', u'*', u'Luis', u'Santiago', u',', u'a', u'fictional', u'character', u'in', u'the', u'television', u'series', u'Babylon', u'5', u'*', u'Santiago', u'-lrb-', u'the', u'Vampire', u'chronicle', u'-rrb-', u',', u'character', u'in', u'Anne', u'Rice', u"'s", u'novel', u'interview', u'with', u'the', u'Vampire', u'*', u'Santiago', u',', u'the', u'main', u'character', u'of', u'Paulo', u'Coelho', u"'s", u'the', u'alchemist', u'-lrb-', u'novel', u'-rrb-', u'*', u'Santiago', u',', u'a', u'character', u'on', u'the', u'television', u'show', u'Friday', u'Night', u'Lights', u'*', u'battle', u'of', u'Santiago', u'de', u'Cuba', u'*', u'Santiago', u'-lrb-', u'band', u'-rrb-', u',', u'a', u'indie/punk', u'band', u'from', u'Santa', u'Rosa', u',', u'California', u',', u'USA', u'*', u'Santiago', u',', u'a', u'1996', u'album', u'by', u'the', u'chieftain', u'*', u'``', u'Santiago', u"''", u',', u'the', u'title', u'of', u'one', u'of', u'Loreena', u'McKennitt', u"'s", u'song', u'from', u'she', u'album', u'the', u'mask', u'and', u'Mirror', u'Santiago', u'may', u'also', u'refer', u'to', u':', u'*', u'order', u'of', u'Santiago', u',', u'a', u'spanish', u'Knightly', u'order', u'*', u'Santiago', u'-lrb-', u'name', u'-rrb-', u',', u'about', u'the', u'common', u'spanish', u'give', u'name', u'*', u',', u'by', u'Mike', u'Resnick', u'*', u'``', u'Santiago', u"''", u',', u'a', u'shorten', u'form', u'of', u'the', u'Reconquista', u'battle', u'cry', u'``', u'Santiago', u'y', u'cierra', u'Espaa', u"''"], u'pos': [u'PRP', u'VBZ', u'DT', u'NN', u'IN', u':', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'VBP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'IN', u'NNP', u'FW', u'FW', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'NNP', u'FW', u'FW', u'FW', u'FW', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NN', u'CC', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'NNP', u'NN', u'SYM', u'NNP', u'-LRB-', u'NNP', u'VBP', u'NNS', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'VBP', u'JJ', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'FW', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'VBP', u'NNP', u',', u'DT', u'NN', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'NNP', u'VBP', u'JJ', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'VBZ', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'CC', u'NNP', u'LS', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'IN', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'FW', u'FW', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNPS', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u':', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'NNP', u',', u'NN', u'NN', u'SYM', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NNPS', u'CC', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'VBN', u'RB', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u'CC', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'SYM', u'NNP', u',', u'NN', u'IN', u'NNP', u',', u'RB', u'VBN', u'NNP', u'NNP', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'SYM', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNP', u'CD', u'SYM', u'NNP', u'-LRB-', u'DT', u'NNP', u'NNS', u'-RRB-', u',', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'SYM', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'DT', u'NN', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNP', u'NNP', u'NNP', u'SYM', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'DT', u'CD', u'NN', u'IN', u'DT', u'NNS', u'SYM', u'``', u'NNP', u"''", u',', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'POS', u'NNS', u'IN', u'PRP$', u'NN', u'DT', u'NN', u'CC', u'NNP', u'NNP', u'MD', u'RB', u'VB', u'TO', u':', u'SYM', u'NN', u'IN', u'NNP', u',', u'DT', u'JJ', u'NNP', u'NN', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'IN', u'DT', u'JJ', u'JJ', u'VBN', u'NN', u'NN', u',', u'IN', u'NNP', u'NNP', u'SYM', u'``', u'NNP', u"''", u',', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NNP', u'NN', u'NN', u'``', u'NNP', u'NN', u'NN', u'NNP', u"''"], u'char_offsets': [[69, 71], [72, 74], [75, 78], [79, 83], [84, 86], [86, 87], [88, 90], [90, 98], [99, 102], [103, 109], [109, 110], [111, 118], [119, 121], [122, 125], [126, 134], [135, 136], [136, 144], [144, 145], [146, 149], [150, 156], [157, 159], [160, 163], [164, 166], [166, 174], [175, 177], [178, 182], [182, 183], [184, 191], [192, 194], [195, 198], [199, 207], [208, 210], [210, 218], [219, 221], [222, 225], [226, 236], [236, 237], [238, 245], [246, 248], [249, 252], [253, 261], [262, 263], [263, 272], [272, 273], [275, 285], [286, 292], [293, 301], [302, 304], [305, 314], [315, 316], [317, 324], [324, 325], [326, 334], [335, 340], [341, 343], [344, 352], [353, 354], [355, 362], [363, 367], [367, 368], [369, 376], [376, 377], [378, 386], [387, 392], [393, 395], [396, 404], [405, 407], [408, 410], [411, 415], [416, 417], [417, 425], [425, 426], [427, 435], [435, 436], [437, 445], [446, 452], [453, 461], [462, 464], [465, 473], [474, 475], [475, 483], [484, 497], [497, 498], [499, 500], [501, 505], [506, 508], [509, 512], [513, 518], [519, 521], [522, 527], [528, 529], [529, 532], [532, 533], [534, 543], [543, 544], [545, 555], [556, 562], [563, 571], [572, 574], [575, 578], [579, 589], [590, 592], [593, 596], [597, 598], [598, 606], [606, 607], [608, 616], [616, 617], [618, 622], [623, 626], [627, 635], [636, 638], [639, 647], [648, 658], [659, 660], [660, 668], [669, 671], [672, 677], [677, 678], [679, 680], [681, 689], [690, 692], [693, 697], [698, 699], [699, 707], [708, 710], [711, 716], [716, 717], [718, 719], [720, 728], [729, 731], [732, 735], [736, 738], [739, 747], [748, 754], [755, 756], [756, 764], [765, 771], [772, 773], [773, 784], [784, 785], [785, 786], [787, 797], [798, 806], [807, 808], [808, 816], [817, 818], [818, 824], [825, 827], [828, 831], [831, 832], [832, 833], [834, 835], [836, 842], [843, 845], [846, 849], [850, 862], [863, 865], [866, 872], [873, 875], [876, 879], [880, 881], [881, 889], [890, 891], [891, 898], [898, 899], [899, 900], [901, 902], [903, 909], [910, 912], [913, 916], [917, 929], [930, 932], [933, 940], [941, 942], [942, 950], [951, 952], [952, 959], [959, 960], [960, 961], [962, 963], [964, 970], [971, 973], [974, 977], [978, 990], [991, 993], [994, 1001], [1002, 1003], [1003, 1011], [1012, 1013], [1013, 1019], [1019, 1020], [1020, 1021], [1022, 1023], [1024, 1030], [1031, 1033], [1034, 1037], [1038, 1050], [1051, 1053], [1054, 1060], [1061, 1062], [1062, 1070], [1071, 1072], [1072, 1076], [1076, 1077], [1077, 1078], [1079, 1080], [1081, 1087], [1088, 1090], [1091, 1094], [1095, 1107], [1108, 1110], [1111, 1115], [1117, 1118], [1118, 1126], [1127, 1128], [1128, 1136], [1136, 1137], [1137, 1138], [1139, 1140], [1141, 1147], [1148, 1150], [1151, 1154], [1155, 1167], [1168, 1170], [1171, 1179], [1180, 1181], [1181, 1189], [1190, 1191], [1191, 1197], [1197, 1198], [1198, 1199], [1200, 1201], [1202, 1208], [1209, 1211], [1212, 1215], [1216, 1228], [1229, 1231], [1232, 1238], [1239, 1240], [1240, 1248], [1249, 1250], [1250, 1256], [1257, 1262], [1262, 1263], [1263, 1264], [1265, 1266], [1267, 1273], [1274, 1276], [1277, 1280], [1281, 1293], [1294, 1296], [1297, 1303], [1304, 1309], [1310, 1311], [1311, 1319], [1320, 1322], [1323, 1329], [1329, 1330], [1331, 1332], [1333, 1339], [1340, 1342], [1343, 1346], [1347, 1359], [1360, 1362], [1363, 1368], [1369, 1370], [1370, 1378], [1379, 1381], [1382, 1389], [1390, 1392], [1393, 1400], [1400, 1401], [1402, 1403], [1404, 1410], [1411, 1413], [1414, 1417], [1418, 1430], [1431, 1433], [1434, 1441], [1442, 1443], [1443, 1451], [1452, 1454], [1455, 1464], [1464, 1465], [1466, 1467], [1468, 1474], [1475, 1477], [1478, 1481], [1482, 1494], [1495, 1497], [1498, 1505], [1507, 1508], [1508, 1516], [1517, 1519], [1520, 1527], [1527, 1528], [1529, 1530], [1531, 1537], [1538, 1540], [1541, 1544], [1545, 1557], [1558, 1560], [1561, 1566], [1567, 1568], [1568, 1576], [1577, 1579], [1580, 1587], [1587, 1588], [1589, 1590], [1591, 1597], [1598, 1600], [1601, 1604], [1605, 1617], [1618, 1620], [1621, 1629], [1631, 1632], [1632, 1640], [1641, 1643], [1644, 1648], [1648, 1649], [1650, 1651], [1652, 1658], [1659, 1662], [1663, 1664], [1665, 1677], [1678, 1680], [1681, 1684], [1685, 1691], [1692, 1693], [1693, 1701], [1702, 1704], [1705, 1714], [1714, 1715], [1716, 1717], [1718, 1724], [1725, 1727], [1728, 1731], [1732, 1744], [1745, 1747], [1748, 1752], [1753, 1758], [1759, 1760], [1760, 1768], [1769, 1771], [1772, 1781], [1781, 1782], [1783, 1784], [1785, 1791], [1792, 1794], [1795, 1798], [1799, 1811], [1812, 1814], [1815, 1824], [1825, 1826], [1826, 1834], [1835, 1837], [1838, 1845], [1845, 1846], [1847, 1848], [1849, 1855], [1856, 1858], [1859, 1862], [1863, 1875], [1876, 1878], [1879, 1887], [1888, 1889], [1889, 1897], [1898, 1900], [1901, 1905], [1905, 1906], [1907, 1908], [1909, 1915], [1916, 1918], [1919, 1922], [1923, 1935], [1936, 1938], [1939, 1945], [1946, 1947], [1947, 1955], [1956, 1958], [1959, 1969], [1969, 1970], [1971, 1972], [1973, 1979], [1980, 1982], [1983, 1986], [1987, 1999], [2000, 2002], [2003, 2010], [2012, 2013], [2013, 2021], [2022, 2024], [2025, 2029], [2029, 2030], [2031, 2032], [2033, 2039], [2040, 2042], [2043, 2046], [2047, 2059], [2060, 2062], [2063, 2069], [2070, 2071], [2071, 2079], [2080, 2082], [2083, 2090], [2090, 2091], [2092, 2093], [2094, 2100], [2101, 2103], [2104, 2107], [2108, 2120], [2121, 2123], [2124, 2132], [2133, 2135], [2136, 2142], [2143, 2144], [2144, 2152], [2153, 2155], [2156, 2167], [2167, 2168], [2169, 2170], [2171, 2177], [2178, 2180], [2181, 2184], [2185, 2197], [2198, 2200], [2201, 2209], [2210, 2211], [2211, 2219], [2220, 2222], [2223, 2227], [2228, 2230], [2230, 2231], [2232, 2233], [2234, 2240], [2241, 2243], [2244, 2247], [2248, 2260], [2261, 2263], [2264, 2269], [2270, 2272], [2273, 2278], [2279, 2280], [2280, 2288], [2289, 2291], [2292, 2300], [2300, 2301], [2302, 2303], [2304, 2310], [2311, 2313], [2314, 2317], [2318, 2330], [2331, 2333], [2334, 2349], [2351, 2352], [2352, 2360], [2361, 2364], [2365, 2371], [2371, 2372], [2373, 2374], [2375, 2381], [2382, 2384], [2385, 2388], [2389, 2401], [2402, 2404], [2405, 2411], [2412, 2415], [2416, 2422], [2423, 2424], [2424, 2426], [2427, 2432], [2433, 2434], [2435, 2443], [2443, 2444], [2445, 2446], [2447, 2453], [2454, 2456], [2457, 2460], [2461, 2473], [2474, 2476], [2477, 2483], [2484, 2490], [2491, 2492], [2492, 2500], [2501, 2506], [2507, 2508], [2508, 2517], [2517, 2518], [2518, 2519], [2520, 2521], [2522, 2528], [2529, 2531], [2532, 2535], [2536, 2548], [2549, 2551], [2552, 2561], [2562, 2563], [2563, 2571], [2572, 2577], [2578, 2579], [2579, 2583], [2583, 2584], [2584, 2585], [2586, 2587], [2588, 2594], [2595, 2597], [2598, 2601], [2602, 2614], [2615, 2617], [2618, 2622], [2623, 2624], [2624, 2632], [2633, 2638], [2639, 2640], [2640, 2647], [2648, 2650], [2651, 2655], [2655, 2656], [2656, 2657], [2658, 2659], [2660, 2666], [2667, 2669], [2670, 2673], [2674, 2686], [2687, 2689], [2690, 2697], [2698, 2700], [2701, 2705], [2706, 2707], [2707, 2711], [2712, 2714], [2715, 2723], [2723, 2724], [2725, 2726], [2727, 2733], [2734, 2736], [2737, 2740], [2741, 2753], [2754, 2756], [2757, 2764], [2765, 2766], [2766, 2774], [2775, 2776], [2776, 2781], [2781, 2782], [2782, 2783], [2784, 2785], [2786, 2792], [2793, 2795], [2796, 2799], [2800, 2812], [2813, 2815], [2816, 2821], [2822, 2823], [2823, 2831], [2832, 2833], [2833, 2840], [2840, 2841], [2841, 2842], [2843, 2844], [2845, 2851], [2852, 2854], [2855, 2858], [2859, 2871], [2872, 2874], [2875, 2882], [2883, 2884], [2884, 2892], [2893, 2895], [2896, 2898], [2899, 2905], [2905, 2906], [2907, 2908], [2909, 2916], [2917, 2919], [2920, 2923], [2924, 2930], [2931, 2933], [2934, 2940], [2941, 2942], [2942, 2950], [2951, 2952], [2952, 2959], [2959, 2960], [2960, 2961], [2962, 2963], [2964, 2971], [2972, 2974], [2975, 2978], [2979, 2987], [2988, 2990], [2991, 2992], [2993, 2998], [2999, 3000], [3000, 3008], [3009, 3012], [3013, 3018], [3018, 3019], [3020, 3026], [3027, 3034], [3035, 3036], [3037, 3045], [3046, 3050], [3051, 3057], [3057, 3058], [3059, 3065], [3066, 3071], [3071, 3072], [3073, 3083], [3084, 3085], [3086, 3094], [3094, 3095], [3096, 3108], [3108, 3109], [3110, 3112], [3113, 3122], [3123, 3129], [3130, 3131], [3132, 3140], [3141, 3145], [3145, 3146], [3147, 3148], [3149, 3157], [3158, 3160], [3161, 3167], [3168, 3174], [3174, 3175], [3176, 3186], [3187, 3188], [3188, 3198], [3198, 3199], [3200, 3210], [3211, 3217], [3218, 3221], [3222, 3228], [3229, 3230], [3231, 3239], [3240, 3242], [3243, 3253], [3254, 3255], [3255, 3262], [3262, 3263], [3264, 3274], [3275, 3281], [3282, 3290], [3291, 3293], [3294, 3297], [3298, 3300], [3301, 3308], [3309, 3310], [3311, 3319], [3320, 3325], [3325, 3326], [3327, 3328], [3329, 3338], [3339, 3341], [3342, 3345], [3346, 3352], [3353, 3358], [3359, 3367], [3368, 3370], [3371, 3374], [3375, 3379], [3380, 3382], [3382, 3383], [3384, 3385], [3386, 3392], [3393, 3401], [3401, 3402], [3403, 3404], [3405, 3417], [3418, 3426], [3427, 3434], [3435, 3436], [3437, 3441], [3442, 3450], [3450, 3451], [3452, 3456], [3457, 3465], [3466, 3467], [3468, 3472], [3473, 3481], [3481, 3482], [3483, 3492], [3493, 3495], [3496, 3499], [3500, 3506], [3507, 3510], [3511, 3514], [3515, 3523], [3524, 3525], [3526, 3533], [3534, 3542], [3542, 3543], [3544, 3552], [3553, 3562], [3563, 3564], [3565, 3571], [3572, 3580], [3581, 3586], [3586, 3587], [3588, 3589], [3590, 3599], [3600, 3610], [3611, 3616], [3617, 3623], [3624, 3626], [3627, 3635], [3636, 3637], [3638, 3646], [3647, 3656], [3656, 3657], [3658, 3660], [3661, 3664], [3665, 3673], [3674, 3675], [3676, 3684], [3685, 3692], [3692, 3693], [3694, 3696], [3697, 3702], [3703, 3704], [3705, 3710], [3710, 3711], [3712, 3715], [3716, 3718], [3719, 3726], [3726, 3727], [3728, 3732], [3733, 3739], [3740, 3745], [3746, 3751], [3752, 3755], [3756, 3763], [3764, 3765], [3766, 3773], [3774, 3782], [3782, 3783], [3784, 3785], [3786, 3795], [3796, 3805], [3806, 3810], [3811, 3816], [3817, 3819], [3820, 3823], [3824, 3825], [3826, 3834], [3835, 3844], [3844, 3845], [3846, 3847], [3848, 3857], [3858, 3867], [3868, 3872], [3874, 3875], [3876, 3884], [3884, 3885], [3886, 3889], [3890, 3894], [3895, 3897], [3898, 3899], [3900, 3909], [3910, 3912], [3913, 3922], [3923, 3925], [3926, 3927], [3928, 3933], [3934, 3942], [3943, 3945], [3946, 3953], [3954, 3959], [3960, 3966], [3967, 3968], [3969, 3977], [3977, 3978], [3979, 3982], [3983, 3990], [3991, 4000], [4001, 4003], [4004, 4010], [4011, 4020], [4020, 4022], [4023, 4026], [4027, 4030], [4031, 4034], [4035, 4038], [4039, 4042], [4043, 4046], [4047, 4048], [4049, 4053], [4054, 4062], [4062, 4063], [4064, 4065], [4066, 4075], [4076, 4085], [4086, 4088], [4089, 4092], [4093, 4103], [4104, 4110], [4111, 4118], [4119, 4120], [4121, 4122], [4123, 4131], [4132, 4133], [4133, 4136], [4137, 4144], [4145, 4155], [4155, 4156], [4156, 4157], [4158, 4167], [4168, 4170], [4171, 4175], [4176, 4180], [4180, 4182], [4183, 4188], [4189, 4198], [4199, 4203], [4204, 4207], [4208, 4215], [4216, 4217], [4218, 4226], [4226, 4227], [4228, 4231], [4232, 4236], [4237, 4246], [4247, 4249], [4250, 4255], [4256, 4262], [4262, 4264], [4265, 4268], [4269, 4278], [4279, 4280], [4280, 4285], [4285, 4286], [4287, 4288], [4289, 4297], [4297, 4298], [4299, 4300], [4301, 4310], [4311, 4313], [4314, 4317], [4318, 4328], [4329, 4333], [4334, 4340], [4341, 4346], [4347, 4353], [4354, 4355], [4356, 4362], [4363, 4365], [4366, 4374], [4375, 4377], [4378, 4382], [4383, 4384], [4385, 4393], [4394, 4395], [4395, 4399], [4399, 4400], [4400, 4401], [4402, 4404], [4405, 4415], [4416, 4420], [4421, 4425], [4426, 4431], [4432, 4436], [4436, 4437], [4438, 4448], [4448, 4449], [4450, 4453], [4454, 4455], [4456, 4464], [4464, 4465], [4466, 4467], [4468, 4472], [4473, 4478], [4479, 4481], [4482, 4485], [4486, 4496], [4497, 4498], [4499, 4500], [4500, 4508], [4508, 4509], [4509, 4510], [4511, 4514], [4515, 4520], [4521, 4523], [4524, 4527], [4528, 4530], [4531, 4538], [4539, 4548], [4548, 4550], [4551, 4556], [4557, 4561], [4562, 4565], [4566, 4571], [4572, 4575], [4576, 4580], [4581, 4584], [4585, 4591], [4592, 4600], [4601, 4604], [4605, 4609], [4610, 4615], [4616, 4618], [4618, 4619], [4620, 4621], [4622, 4627], [4628, 4630], [4631, 4639], [4639, 4640], [4641, 4642], [4643, 4650], [4651, 4659], [4660, 4665], [4666, 4667], [4668, 4676], [4677, 4678], [4678, 4682], [4682, 4683], [4683, 4684], [4685, 4690], [4691, 4694], [4695, 4701], [4702, 4709], [4710, 4715], [4716, 4720], [4721, 4722], [4723, 4724], [4725, 4727], [4728, 4732], [4733, 4740], [4741, 4742], [4743, 4744], [4744, 4752], [4752, 4753], [4753, 4754], [4755, 4756], [4757, 4766], [4767, 4771], [4772, 4774], [4775, 4778], [4779, 4790], [4791, 4797], [4798, 4801], [4802, 4803], [4803, 4811], [4812, 4813], [4814, 4820], [4821, 4826], [4826, 4827]]}) 
answer: set([u'states', u'united'])
['No']

Are there any cities named Santiago in the United States?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2440>.answer
_____________________________ test_yesno[param149] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2488>, (<src.tfidf.TF_IDF object at 0x7f56bba11ed0>, set(['santiago'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2488>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.36759155988693237, {u'tokens': [u'It', u'is', u'the', u'name', u'of', u':', u'**', u'Santiago', u'del', u'Estero', u',', u'capital', u'of', u'the', u'province', u'*', u'Santiago', u',', u'Rio', u'Grande', u'do', u'Sul', u'**', u'Santiago', u'de', u'Cuba', u',', u'capital', u'of', u'the', u'province', u'**', u'Santiago', u'de', u'los', u'Caballeros', u',', u'capital', u'of', u'the', u'province', u'*', u'Guayaquil', u',', u'officially', u'called', u'Santiago', u'de', u'Guayaquil', u'*', u'Jamaica', u',', u'formerly', u'known', u'as', u'Santiago', u'*', u'Spanish', u'Town', u',', u'Jamaica', u',', u'formerly', u'known', u'as', u'Santiago', u'de', u'la', u'Vega', u'*', u'Quertaro', u',', u'Quertaro', u',', u'formerly', u'called', u'Santiago', u'de', u'Quertaro', u'*', u'Santiago', u'Tianguistenco', u',', u'a', u'city', u'in', u'the', u'State', u'of', u'Mxico', u'*', u'Len', u',', u'Nicaragua', u',', u'originally', u'called', u'Santiago', u'de', u'los', u'Caballeros', u'de', u'Len', u'*', u'Santiago', u',', u'Paraguay', u',', u'town', u'and', u'district', u'in', u'Misiones', u'Department', u'*', u'Santiago', u'de', u'Surco', u',', u'a', u'district', u'of', u'Lima', u'*', u'Santiago', u'de', u'Chuco', u',', u'a', u'province', u'of', u'the', u'La', u'Libertad', u'region', u'*', u'Santiago', u'Island', u'-LRB-', u'Philippines', u'-RRB-', u',', u'Pangasinan', u'province', u'*', u'Santiago', u'-LRB-', u'Alccer', u'do', u'Sal', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alccer', u'do', u'Sal', u'*', u'Santiago', u'-LRB-', u'Arganil', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arganil', u'*', u'Santiago', u'-LRB-', u'Armamar', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Armamar', u'*', u'Santiago', u'-LRB-', u'Lisbon', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Lisbon', u'*', u'Santiago', u'-LRB-', u'Seia', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Seia', u'*', u'Santiago', u'-LRB-', u'Sesimbra', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sesimbra', u'*', u'Santiago', u'-LRB-', u'Tavira', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tavira', u'*', u'Santiago', u'-LRB-', u'Torres', u'Novas', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Novas', u'*', u'Santiago', u'da', u'Guarda', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ansio', u'*', u'Santiago', u'da', u'Ribeira', u'de', u'Alhariz', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valpaos', u'*', u'Santiago', u'de', u'Besteiros', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tondela', u'*', u'Santiago', u'de', u'Bougado', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Trofa', u'*', u'Santiago', u'de', u'Candoso', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Guimares', u'*', u'Santiago', u'do', u'Cacm', u',', u'a', u'parish', u'and', u'a', u'municipality', u'in', u'the', u'Setbal', u'*', u'Santiago', u'de', u'Carreiras', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Vila', u'Verde', u'*', u'Santiago', u'de', u'Cassurres', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Mangualde', u'*', u'Santiago', u'de', u'Figueir', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Amarante', u'*', u'Santiago', u'de', u'Litm', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Pombal', u'*', u'Santiago', u'de', u'Montalegre', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sardoal', u'*', u'Santiago', u'de', u'Pies', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Cinfes', u'*', u'Santiago', u'de', u'Riba-Ul', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Oliveira', u'de', u'Azemis', u'*', u'Santiago', u'de', u'Subarrifana', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Penafiel', u'*', u'Santiago', u'de', u'Vila', u'Ch', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ponte', u'da', u'Barca', u'*', u'Santiago', u'do', u'Escoural', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Montemor-o-Novo', u'*', u'Santiago', u'dos', u'Velhos', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arruda', u'dos', u'Vinhos', u'*', u'So', u'Pedro', u'e', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Vedras', u'*', u'Santiago', u'Maior', u'-LRB-', u'Alandroal', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alandroal', u'*', u'Santiago', u'Maior', u'-LRB-', u'Beja', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Beja', u'*', u'Santiago', u'Maior', u'-LRB-', u'Castelo', u'de', u'Vide', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Castelo', u'de', u'Vide', u'*', u'Vale', u'de', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Odemira', u'*', u'Santiago', u'-LRB-', u'Valds', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valds', u'*', u'Santiago', u'-LRB-', u'Sariego', u'-RRB-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sariego', u'*', u'Santiago', u'de', u'la', u'Ribera', u',', u'a', u'cluster', u'of', u'San', u'Javier', u'in', u'Murcia', u'*', u'Santiago', u'-LRB-', u'comarca', u'-RRB-', u',', u'a', u'comarca', u'in', u'the', u'province', u'of', u'A', u'Corua', u'*', u'Santiago', u'del', u'Teide', u',', u'Canary', u'Islands', u'*', u'Santiago', u'High', u'School', u',', u'Garden', u'Grove', u',', u'California', u'*', u'Santiago', u',', u'Pennsylvania', u',', u'in', u'Allegheny', u'County', u'*', u'Santiago', u'Peak', u',', u'a', u'mountain', u'in', u'Orange', u'County', u',', u'California', u'*', u'Montevideo', u',', u'originally', u'called', u'San', u'Felipe', u'y', u'Santiago', u'de', u'Montevideo', u'*', u'Caracas', u',', u'originally', u'called', u'Santiago', u'de', u'Len', u'de', u'Caracas', u'*', u'Santiago', u'River', u',', u'a', u'tributary', u'of', u'the', u'Amazon', u'River', u'Santiago', u'is', u'the', u'name', u'of', u':', u'*', u'Benito', u'Santiago', u',', u'a', u'professional', u'baseball', u'catcher', u'*', u'Hugo', u'Santiago', u',', u'film', u'director', u'*', u'Joey', u'Santiago', u',', u'guitarist', u'of', u'the', u'Pixies', u'and', u'The', u'Martinis', u'*', u'Liliana', u'Santiago', u',', u'American', u'Economist', u'*', u'Rafael', u'Santiago', u'Maria', u',', u'a', u'Brazilian', u'footballer', u'known', u'simply', u'as', u'Santiago', u'*', u'Santiago', u'Caballero', u',', u'DJ', u'and', u'Producer', u'*', u'Santiago', u'Cabrera', u',', u'an', u'actor', u'*', u'James', u',', u'son', u'of', u'Zebedee', u',', u'also', u'called', u'Saint', u'James', u'the', u'Greater', u'*', u'Dominic', u'Santiago', u',', u'a', u'fictional', u'character', u'from', u'Gears', u'of', u'War', u'*', u'Santiago', u'Arnavisca', u',', u'a', u'fictional', u'character', u'from', u'*', u'Santiago', u',', u'the', u'name', u'of', u'a', u'character', u'in', u'Chronicle', u'of', u'a', u'Death', u'Foretold', u'by', u'Gabriel', u'Garca', u'Mrquez', u'*', u'Santiago', u',', u'the', u'titular', u'character', u'of', u'Ernest', u'Hemingway', u"'s", u'The', u'Old', u'Man', u'and', u'the', u'Sea', u'*', u'Luis', u'Santiago', u',', u'a', u'fictional', u'character', u'in', u'the', u'television', u'series', u'Babylon', u'5', u'*', u'Santiago', u'-LRB-', u'The', u'Vampire', u'Chronicles', u'-RRB-', u',', u'character', u'in', u'Anne', u'Rice', u"'s", u'novel', u'Interview', u'with', u'the', u'Vampire', u'*', u'Santiago', u',', u'the', u'main', u'character', u'of', u'Paulo', u'Coelho', u"'s", u'The', u'Alchemist', u'-LRB-', u'novel', u'-RRB-', u'*', u'Santiago', u',', u'a', u'character', u'on', u'the', u'television', u'show', u'Friday', u'Night', u'Lights', u'*', u'Battle', u'of', u'Santiago', u'de', u'Cuba', u'*', u'Santiago', u'-LRB-', u'band', u'-RRB-', u',', u'an', u'indie/punk', u'band', u'from', u'Santa', u'Rosa', u',', u'California', u',', u'USA', u'*', u'Santiago', u',', u'a', u'1996', u'album', u'by', u'The', u'Chieftains', u'*', u'``', u'Santiago', u"''", u',', u'the', u'title', u'of', u'one', u'of', u'Loreena', u'McKennitt', u"'s", u'songs', u'from', u'her', u'album', u'The', u'Mask', u'and', u'Mirror', u'Santiago', u'may', u'also', u'refer', u'to', u':', u'*', u'Order', u'of', u'Santiago', u',', u'a', u'Spanish', u'Knightly', u'order', u'*', u'Santiago', u'-LRB-', u'name', u'-RRB-', u',', u'about', u'the', u'common', u'Spanish', u'given', u'name', u'*', u',', u'by', u'Mike', u'Resnick', u'*', u'``', u'Santiago', u"''", u',', u'a', u'shortened', u'form', u'of', u'the', u'Reconquista', u'battle', u'cry', u'``', u'Santiago', u'y', u'cierra', u'Espaa', u"''"], u'lemmas': [u'it', u'be', u'the', u'name', u'of', u':', u'**', u'Santiago', u'del', u'Estero', u',', u'capital', u'of', u'the', u'province', u'*', u'Santiago', u',', u'Rio', u'Grande', u'do', u'Sul', u'**', u'Santiago', u'de', u'Cuba', u',', u'capital', u'of', u'the', u'province', u'**', u'Santiago', u'de', u'los', u'Caballeros', u',', u'capital', u'of', u'the', u'province', u'*', u'Guayaquil', u',', u'officially', u'call', u'Santiago', u'de', u'Guayaquil', u'*', u'Jamaica', u',', u'formerly', u'know', u'as', u'Santiago', u'*', u'Spanish', u'Town', u',', u'Jamaica', u',', u'formerly', u'know', u'as', u'Santiago', u'de', u'la', u'Vega', u'*', u'Quertaro', u',', u'Quertaro', u',', u'formerly', u'call', u'Santiago', u'de', u'Quertaro', u'*', u'Santiago', u'Tianguistenco', u',', u'a', u'city', u'in', u'the', u'state', u'of', u'Mxico', u'*', u'Len', u',', u'Nicaragua', u',', u'originally', u'call', u'Santiago', u'de', u'los', u'caballeros', u'de', u'Len', u'*', u'Santiago', u',', u'Paraguay', u',', u'town', u'and', u'district', u'in', u'Misiones', u'Department', u'*', u'Santiago', u'de', u'Surco', u',', u'a', u'district', u'of', u'Lima', u'*', u'Santiago', u'de', u'Chuco', u',', u'a', u'province', u'of', u'the', u'La', u'Libertad', u'region', u'*', u'Santiago', u'Island', u'-lrb-', u'Philippines', u'-rrb-', u',', u'Pangasinan', u'province', u'*', u'Santiago', u'-lrb-', u'Alccer', u'do', u'sal', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Alccer', u'do', u'sal', u'*', u'Santiago', u'-lrb-', u'Arganil', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'arganil', u'*', u'Santiago', u'-lrb-', u'Armamar', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Armamar', u'*', u'Santiago', u'-lrb-', u'Lisbon', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Lisbon', u'*', u'Santiago', u'-lrb-', u'Seia', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Seia', u'*', u'Santiago', u'-lrb-', u'Sesimbra', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sesimbra', u'*', u'Santiago', u'-lrb-', u'Tavira', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tavira', u'*', u'Santiago', u'-lrb-', u'Torres', u'Novas', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Novas', u'*', u'Santiago', u'da', u'Guarda', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ansio', u'*', u'Santiago', u'da', u'Ribeira', u'de', u'Alhariz', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valpaos', u'*', u'Santiago', u'de', u'Besteiros', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Tondela', u'*', u'Santiago', u'de', u'Bougado', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'trofa', u'*', u'Santiago', u'de', u'Candoso', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Guimares', u'*', u'Santiago', u'do', u'Cacm', u',', u'a', u'parish', u'and', u'a', u'municipality', u'in', u'the', u'Setbal', u'*', u'Santiago', u'de', u'Carreiras', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Vila', u'Verde', u'*', u'Santiago', u'de', u'Cassurres', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Mangualde', u'*', u'Santiago', u'de', u'Figueir', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Amarante', u'*', u'Santiago', u'de', u'Litm', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Pombal', u'*', u'Santiago', u'de', u'Montalegre', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'sardoal', u'*', u'Santiago', u'de', u'Pies', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Cinfes', u'*', u'Santiago', u'de', u'Riba-Ul', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Oliveira', u'de', u'Azemis', u'*', u'Santiago', u'de', u'Subarrifana', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Penafiel', u'*', u'Santiago', u'de', u'Vila', u'Ch', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Ponte', u'da', u'Barca', u'*', u'Santiago', u'do', u'escoural', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Montemor-o-Novo', u'*', u'Santiago', u'do', u'Velhos', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Arruda', u'dos', u'Vinhos', u'*', u'so', u'Pedro', u'e', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Torres', u'Vedras', u'*', u'Santiago', u'Maior', u'-lrb-', u'Alandroal', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'alandroal', u'*', u'Santiago', u'Maior', u'-lrb-', u'Beja', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Beja', u'*', u'Santiago', u'Maior', u'-lrb-', u'Castelo', u'de', u'Vide', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Castelo', u'de', u'Vide', u'*', u'Vale', u'de', u'Santiago', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Odemira', u'*', u'Santiago', u'-lrb-', u'Valds', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Valds', u'*', u'Santiago', u'-lrb-', u'Sariego', u'-rrb-', u',', u'a', u'parish', u'in', u'the', u'municipality', u'of', u'Sariego', u'*', u'Santiago', u'de', u'la', u'Ribera', u',', u'a', u'cluster', u'of', u'San', u'Javier', u'in', u'Murcia', u'*', u'Santiago', u'-lrb-', u'comarca', u'-rrb-', u',', u'a', u'comarca', u'in', u'the', u'province', u'of', u'a', u'corua', u'*', u'Santiago', u'del', u'Teide', u',', u'Canary', u'Islands', u'*', u'Santiago', u'High', u'School', u',', u'Garden', u'Grove', u',', u'California', u'*', u'Santiago', u',', u'Pennsylvania', u',', u'in', u'Allegheny', u'County', u'*', u'Santiago', u'Peak', u',', u'a', u'mountain', u'in', u'Orange', u'County', u',', u'California', u'*', u'Montevideo', u',', u'originally', u'call', u'San', u'Felipe', u'y', u'Santiago', u'de', u'Montevideo', u'*', u'Caracas', u',', u'originally', u'call', u'Santiago', u'de', u'Len', u'de', u'Caracas', u'*', u'Santiago', u'River', u',', u'a', u'tributary', u'of', u'the', u'Amazon', u'River', u'Santiago', u'be', u'the', u'name', u'of', u':', u'*', u'Benito', u'Santiago', u',', u'a', u'professional', u'baseball', u'catcher', u'*', u'Hugo', u'Santiago', u',', u'film', u'director', u'*', u'Joey', u'Santiago', u',', u'guitarist', u'of', u'the', u'Pixies', u'and', u'the', u'Martinis', u'*', u'Liliana', u'Santiago', u',', u'American', u'Economist', u'*', u'Rafael', u'Santiago', u'Maria', u',', u'a', u'brazilian', u'footballer', u'know', u'simply', u'as', u'Santiago', u'*', u'Santiago', u'Caballero', u',', u'DJ', u'and', u'Producer', u'*', u'Santiago', u'Cabrera', u',', u'a', u'actor', u'*', u'James', u',', u'son', u'of', u'Zebedee', u',', u'also', u'call', u'Saint', u'James', u'the', u'Greater', u'*', u'Dominic', u'Santiago', u',', u'a', u'fictional', u'character', u'from', u'Gears', u'of', u'War', u'*', u'Santiago', u'Arnavisca', u',', u'a', u'fictional', u'character', u'from', u'*', u'Santiago', u',', u'the', u'name', u'of', u'a', u'character', u'in', u'Chronicle', u'of', u'a', u'death', u'foretold', u'by', u'Gabriel', u'Garca', u'Mrquez', u'*', u'Santiago', u',', u'the', u'titular', u'character', u'of', u'Ernest', u'Hemingway', u"'s", u'The', u'Old', u'Man', u'and', u'the', u'Sea', u'*', u'Luis', u'Santiago', u',', u'a', u'fictional', u'character', u'in', u'the', u'television', u'series', u'Babylon', u'5', u'*', u'Santiago', u'-lrb-', u'the', u'Vampire', u'chronicle', u'-rrb-', u',', u'character', u'in', u'Anne', u'Rice', u"'s", u'novel', u'interview', u'with', u'the', u'Vampire', u'*', u'Santiago', u',', u'the', u'main', u'character', u'of', u'Paulo', u'Coelho', u"'s", u'the', u'alchemist', u'-lrb-', u'novel', u'-rrb-', u'*', u'Santiago', u',', u'a', u'character', u'on', u'the', u'television', u'show', u'Friday', u'Night', u'Lights', u'*', u'battle', u'of', u'Santiago', u'de', u'Cuba', u'*', u'Santiago', u'-lrb-', u'band', u'-rrb-', u',', u'a', u'indie/punk', u'band', u'from', u'Santa', u'Rosa', u',', u'California', u',', u'USA', u'*', u'Santiago', u',', u'a', u'1996', u'album', u'by', u'the', u'chieftain', u'*', u'``', u'Santiago', u"''", u',', u'the', u'title', u'of', u'one', u'of', u'Loreena', u'McKennitt', u"'s", u'song', u'from', u'she', u'album', u'the', u'mask', u'and', u'Mirror', u'Santiago', u'may', u'also', u'refer', u'to', u':', u'*', u'order', u'of', u'Santiago', u',', u'a', u'spanish', u'Knightly', u'order', u'*', u'Santiago', u'-lrb-', u'name', u'-rrb-', u',', u'about', u'the', u'common', u'spanish', u'give', u'name', u'*', u',', u'by', u'Mike', u'Resnick', u'*', u'``', u'Santiago', u"''", u',', u'a', u'shorten', u'form', u'of', u'the', u'Reconquista', u'battle', u'cry', u'``', u'Santiago', u'y', u'cierra', u'Espaa', u"''"], u'pos': [u'PRP', u'VBZ', u'DT', u'NN', u'IN', u':', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'VBP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'IN', u'NNP', u'FW', u'FW', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'RB', u'VBN', u'NNP', u'FW', u'FW', u'FW', u'FW', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NN', u'CC', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'NNP', u'NN', u'SYM', u'NNP', u'-LRB-', u'NNP', u'VBP', u'NNS', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'VBP', u'JJ', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'FW', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'VBP', u'NNP', u',', u'DT', u'NN', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'NNP', u'VBP', u'JJ', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'VBZ', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'CC', u'NNP', u'LS', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'NNP', u'IN', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'IN', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'SYM', u'NNP', u'FW', u'FW', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNPS', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'IN', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u',', u'RB', u'VBN', u'NNP', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u':', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'NNP', u',', u'NN', u'NN', u'SYM', u'NNP', u'NNP', u',', u'NN', u'IN', u'DT', u'NNPS', u'CC', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'VBN', u'RB', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'NNP', u'CC', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'NN', u'SYM', u'NNP', u',', u'NN', u'IN', u'NNP', u',', u'RB', u'VBN', u'NNP', u'NNP', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'SYM', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'SYM', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'SYM', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNP', u'CD', u'SYM', u'NNP', u'-LRB-', u'DT', u'NNP', u'NNS', u'-RRB-', u',', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'SYM', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'POS', u'DT', u'NN', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'NNP', u'NNP', u'NNP', u'SYM', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'NNP', u'SYM', u'NNP', u',', u'DT', u'CD', u'NN', u'IN', u'DT', u'NNS', u'SYM', u'``', u'NNP', u"''", u',', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'POS', u'NNS', u'IN', u'PRP$', u'NN', u'DT', u'NN', u'CC', u'NNP', u'NNP', u'MD', u'RB', u'VB', u'TO', u':', u'SYM', u'NN', u'IN', u'NNP', u',', u'DT', u'JJ', u'NNP', u'NN', u'SYM', u'NNP', u'-LRB-', u'NN', u'-RRB-', u',', u'IN', u'DT', u'JJ', u'JJ', u'VBN', u'NN', u'NN', u',', u'IN', u'NNP', u'NNP', u'SYM', u'``', u'NNP', u"''", u',', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NNP', u'NN', u'NN', u'``', u'NNP', u'NN', u'NN', u'NNP', u"''"], u'char_offsets': [[69, 71], [72, 74], [75, 78], [79, 83], [84, 86], [86, 87], [88, 90], [90, 98], [99, 102], [103, 109], [109, 110], [111, 118], [119, 121], [122, 125], [126, 134], [135, 136], [136, 144], [144, 145], [146, 149], [150, 156], [157, 159], [160, 163], [164, 166], [166, 174], [175, 177], [178, 182], [182, 183], [184, 191], [192, 194], [195, 198], [199, 207], [208, 210], [210, 218], [219, 221], [222, 225], [226, 236], [236, 237], [238, 245], [246, 248], [249, 252], [253, 261], [262, 263], [263, 272], [272, 273], [275, 285], [286, 292], [293, 301], [302, 304], [305, 314], [315, 316], [317, 324], [324, 325], [326, 334], [335, 340], [341, 343], [344, 352], [353, 354], [355, 362], [363, 367], [367, 368], [369, 376], [376, 377], [378, 386], [387, 392], [393, 395], [396, 404], [405, 407], [408, 410], [411, 415], [416, 417], [417, 425], [425, 426], [427, 435], [435, 436], [437, 445], [446, 452], [453, 461], [462, 464], [465, 473], [474, 475], [475, 483], [484, 497], [497, 498], [499, 500], [501, 505], [506, 508], [509, 512], [513, 518], [519, 521], [522, 527], [528, 529], [529, 532], [532, 533], [534, 543], [543, 544], [545, 555], [556, 562], [563, 571], [572, 574], [575, 578], [579, 589], [590, 592], [593, 596], [597, 598], [598, 606], [606, 607], [608, 616], [616, 617], [618, 622], [623, 626], [627, 635], [636, 638], [639, 647], [648, 658], [659, 660], [660, 668], [669, 671], [672, 677], [677, 678], [679, 680], [681, 689], [690, 692], [693, 697], [698, 699], [699, 707], [708, 710], [711, 716], [716, 717], [718, 719], [720, 728], [729, 731], [732, 735], [736, 738], [739, 747], [748, 754], [755, 756], [756, 764], [765, 771], [772, 773], [773, 784], [784, 785], [785, 786], [787, 797], [798, 806], [807, 808], [808, 816], [817, 818], [818, 824], [825, 827], [828, 831], [831, 832], [832, 833], [834, 835], [836, 842], [843, 845], [846, 849], [850, 862], [863, 865], [866, 872], [873, 875], [876, 879], [880, 881], [881, 889], [890, 891], [891, 898], [898, 899], [899, 900], [901, 902], [903, 909], [910, 912], [913, 916], [917, 929], [930, 932], [933, 940], [941, 942], [942, 950], [951, 952], [952, 959], [959, 960], [960, 961], [962, 963], [964, 970], [971, 973], [974, 977], [978, 990], [991, 993], [994, 1001], [1002, 1003], [1003, 1011], [1012, 1013], [1013, 1019], [1019, 1020], [1020, 1021], [1022, 1023], [1024, 1030], [1031, 1033], [1034, 1037], [1038, 1050], [1051, 1053], [1054, 1060], [1061, 1062], [1062, 1070], [1071, 1072], [1072, 1076], [1076, 1077], [1077, 1078], [1079, 1080], [1081, 1087], [1088, 1090], [1091, 1094], [1095, 1107], [1108, 1110], [1111, 1115], [1117, 1118], [1118, 1126], [1127, 1128], [1128, 1136], [1136, 1137], [1137, 1138], [1139, 1140], [1141, 1147], [1148, 1150], [1151, 1154], [1155, 1167], [1168, 1170], [1171, 1179], [1180, 1181], [1181, 1189], [1190, 1191], [1191, 1197], [1197, 1198], [1198, 1199], [1200, 1201], [1202, 1208], [1209, 1211], [1212, 1215], [1216, 1228], [1229, 1231], [1232, 1238], [1239, 1240], [1240, 1248], [1249, 1250], [1250, 1256], [1257, 1262], [1262, 1263], [1263, 1264], [1265, 1266], [1267, 1273], [1274, 1276], [1277, 1280], [1281, 1293], [1294, 1296], [1297, 1303], [1304, 1309], [1310, 1311], [1311, 1319], [1320, 1322], [1323, 1329], [1329, 1330], [1331, 1332], [1333, 1339], [1340, 1342], [1343, 1346], [1347, 1359], [1360, 1362], [1363, 1368], [1369, 1370], [1370, 1378], [1379, 1381], [1382, 1389], [1390, 1392], [1393, 1400], [1400, 1401], [1402, 1403], [1404, 1410], [1411, 1413], [1414, 1417], [1418, 1430], [1431, 1433], [1434, 1441], [1442, 1443], [1443, 1451], [1452, 1454], [1455, 1464], [1464, 1465], [1466, 1467], [1468, 1474], [1475, 1477], [1478, 1481], [1482, 1494], [1495, 1497], [1498, 1505], [1507, 1508], [1508, 1516], [1517, 1519], [1520, 1527], [1527, 1528], [1529, 1530], [1531, 1537], [1538, 1540], [1541, 1544], [1545, 1557], [1558, 1560], [1561, 1566], [1567, 1568], [1568, 1576], [1577, 1579], [1580, 1587], [1587, 1588], [1589, 1590], [1591, 1597], [1598, 1600], [1601, 1604], [1605, 1617], [1618, 1620], [1621, 1629], [1631, 1632], [1632, 1640], [1641, 1643], [1644, 1648], [1648, 1649], [1650, 1651], [1652, 1658], [1659, 1662], [1663, 1664], [1665, 1677], [1678, 1680], [1681, 1684], [1685, 1691], [1692, 1693], [1693, 1701], [1702, 1704], [1705, 1714], [1714, 1715], [1716, 1717], [1718, 1724], [1725, 1727], [1728, 1731], [1732, 1744], [1745, 1747], [1748, 1752], [1753, 1758], [1759, 1760], [1760, 1768], [1769, 1771], [1772, 1781], [1781, 1782], [1783, 1784], [1785, 1791], [1792, 1794], [1795, 1798], [1799, 1811], [1812, 1814], [1815, 1824], [1825, 1826], [1826, 1834], [1835, 1837], [1838, 1845], [1845, 1846], [1847, 1848], [1849, 1855], [1856, 1858], [1859, 1862], [1863, 1875], [1876, 1878], [1879, 1887], [1888, 1889], [1889, 1897], [1898, 1900], [1901, 1905], [1905, 1906], [1907, 1908], [1909, 1915], [1916, 1918], [1919, 1922], [1923, 1935], [1936, 1938], [1939, 1945], [1946, 1947], [1947, 1955], [1956, 1958], [1959, 1969], [1969, 1970], [1971, 1972], [1973, 1979], [1980, 1982], [1983, 1986], [1987, 1999], [2000, 2002], [2003, 2010], [2012, 2013], [2013, 2021], [2022, 2024], [2025, 2029], [2029, 2030], [2031, 2032], [2033, 2039], [2040, 2042], [2043, 2046], [2047, 2059], [2060, 2062], [2063, 2069], [2070, 2071], [2071, 2079], [2080, 2082], [2083, 2090], [2090, 2091], [2092, 2093], [2094, 2100], [2101, 2103], [2104, 2107], [2108, 2120], [2121, 2123], [2124, 2132], [2133, 2135], [2136, 2142], [2143, 2144], [2144, 2152], [2153, 2155], [2156, 2167], [2167, 2168], [2169, 2170], [2171, 2177], [2178, 2180], [2181, 2184], [2185, 2197], [2198, 2200], [2201, 2209], [2210, 2211], [2211, 2219], [2220, 2222], [2223, 2227], [2228, 2230], [2230, 2231], [2232, 2233], [2234, 2240], [2241, 2243], [2244, 2247], [2248, 2260], [2261, 2263], [2264, 2269], [2270, 2272], [2273, 2278], [2279, 2280], [2280, 2288], [2289, 2291], [2292, 2300], [2300, 2301], [2302, 2303], [2304, 2310], [2311, 2313], [2314, 2317], [2318, 2330], [2331, 2333], [2334, 2349], [2351, 2352], [2352, 2360], [2361, 2364], [2365, 2371], [2371, 2372], [2373, 2374], [2375, 2381], [2382, 2384], [2385, 2388], [2389, 2401], [2402, 2404], [2405, 2411], [2412, 2415], [2416, 2422], [2423, 2424], [2424, 2426], [2427, 2432], [2433, 2434], [2435, 2443], [2443, 2444], [2445, 2446], [2447, 2453], [2454, 2456], [2457, 2460], [2461, 2473], [2474, 2476], [2477, 2483], [2484, 2490], [2491, 2492], [2492, 2500], [2501, 2506], [2507, 2508], [2508, 2517], [2517, 2518], [2518, 2519], [2520, 2521], [2522, 2528], [2529, 2531], [2532, 2535], [2536, 2548], [2549, 2551], [2552, 2561], [2562, 2563], [2563, 2571], [2572, 2577], [2578, 2579], [2579, 2583], [2583, 2584], [2584, 2585], [2586, 2587], [2588, 2594], [2595, 2597], [2598, 2601], [2602, 2614], [2615, 2617], [2618, 2622], [2623, 2624], [2624, 2632], [2633, 2638], [2639, 2640], [2640, 2647], [2648, 2650], [2651, 2655], [2655, 2656], [2656, 2657], [2658, 2659], [2660, 2666], [2667, 2669], [2670, 2673], [2674, 2686], [2687, 2689], [2690, 2697], [2698, 2700], [2701, 2705], [2706, 2707], [2707, 2711], [2712, 2714], [2715, 2723], [2723, 2724], [2725, 2726], [2727, 2733], [2734, 2736], [2737, 2740], [2741, 2753], [2754, 2756], [2757, 2764], [2765, 2766], [2766, 2774], [2775, 2776], [2776, 2781], [2781, 2782], [2782, 2783], [2784, 2785], [2786, 2792], [2793, 2795], [2796, 2799], [2800, 2812], [2813, 2815], [2816, 2821], [2822, 2823], [2823, 2831], [2832, 2833], [2833, 2840], [2840, 2841], [2841, 2842], [2843, 2844], [2845, 2851], [2852, 2854], [2855, 2858], [2859, 2871], [2872, 2874], [2875, 2882], [2883, 2884], [2884, 2892], [2893, 2895], [2896, 2898], [2899, 2905], [2905, 2906], [2907, 2908], [2909, 2916], [2917, 2919], [2920, 2923], [2924, 2930], [2931, 2933], [2934, 2940], [2941, 2942], [2942, 2950], [2951, 2952], [2952, 2959], [2959, 2960], [2960, 2961], [2962, 2963], [2964, 2971], [2972, 2974], [2975, 2978], [2979, 2987], [2988, 2990], [2991, 2992], [2993, 2998], [2999, 3000], [3000, 3008], [3009, 3012], [3013, 3018], [3018, 3019], [3020, 3026], [3027, 3034], [3035, 3036], [3037, 3045], [3046, 3050], [3051, 3057], [3057, 3058], [3059, 3065], [3066, 3071], [3071, 3072], [3073, 3083], [3084, 3085], [3086, 3094], [3094, 3095], [3096, 3108], [3108, 3109], [3110, 3112], [3113, 3122], [3123, 3129], [3130, 3131], [3132, 3140], [3141, 3145], [3145, 3146], [3147, 3148], [3149, 3157], [3158, 3160], [3161, 3167], [3168, 3174], [3174, 3175], [3176, 3186], [3187, 3188], [3188, 3198], [3198, 3199], [3200, 3210], [3211, 3217], [3218, 3221], [3222, 3228], [3229, 3230], [3231, 3239], [3240, 3242], [3243, 3253], [3254, 3255], [3255, 3262], [3262, 3263], [3264, 3274], [3275, 3281], [3282, 3290], [3291, 3293], [3294, 3297], [3298, 3300], [3301, 3308], [3309, 3310], [3311, 3319], [3320, 3325], [3325, 3326], [3327, 3328], [3329, 3338], [3339, 3341], [3342, 3345], [3346, 3352], [3353, 3358], [3359, 3367], [3368, 3370], [3371, 3374], [3375, 3379], [3380, 3382], [3382, 3383], [3384, 3385], [3386, 3392], [3393, 3401], [3401, 3402], [3403, 3404], [3405, 3417], [3418, 3426], [3427, 3434], [3435, 3436], [3437, 3441], [3442, 3450], [3450, 3451], [3452, 3456], [3457, 3465], [3466, 3467], [3468, 3472], [3473, 3481], [3481, 3482], [3483, 3492], [3493, 3495], [3496, 3499], [3500, 3506], [3507, 3510], [3511, 3514], [3515, 3523], [3524, 3525], [3526, 3533], [3534, 3542], [3542, 3543], [3544, 3552], [3553, 3562], [3563, 3564], [3565, 3571], [3572, 3580], [3581, 3586], [3586, 3587], [3588, 3589], [3590, 3599], [3600, 3610], [3611, 3616], [3617, 3623], [3624, 3626], [3627, 3635], [3636, 3637], [3638, 3646], [3647, 3656], [3656, 3657], [3658, 3660], [3661, 3664], [3665, 3673], [3674, 3675], [3676, 3684], [3685, 3692], [3692, 3693], [3694, 3696], [3697, 3702], [3703, 3704], [3705, 3710], [3710, 3711], [3712, 3715], [3716, 3718], [3719, 3726], [3726, 3727], [3728, 3732], [3733, 3739], [3740, 3745], [3746, 3751], [3752, 3755], [3756, 3763], [3764, 3765], [3766, 3773], [3774, 3782], [3782, 3783], [3784, 3785], [3786, 3795], [3796, 3805], [3806, 3810], [3811, 3816], [3817, 3819], [3820, 3823], [3824, 3825], [3826, 3834], [3835, 3844], [3844, 3845], [3846, 3847], [3848, 3857], [3858, 3867], [3868, 3872], [3874, 3875], [3876, 3884], [3884, 3885], [3886, 3889], [3890, 3894], [3895, 3897], [3898, 3899], [3900, 3909], [3910, 3912], [3913, 3922], [3923, 3925], [3926, 3927], [3928, 3933], [3934, 3942], [3943, 3945], [3946, 3953], [3954, 3959], [3960, 3966], [3967, 3968], [3969, 3977], [3977, 3978], [3979, 3982], [3983, 3990], [3991, 4000], [4001, 4003], [4004, 4010], [4011, 4020], [4020, 4022], [4023, 4026], [4027, 4030], [4031, 4034], [4035, 4038], [4039, 4042], [4043, 4046], [4047, 4048], [4049, 4053], [4054, 4062], [4062, 4063], [4064, 4065], [4066, 4075], [4076, 4085], [4086, 4088], [4089, 4092], [4093, 4103], [4104, 4110], [4111, 4118], [4119, 4120], [4121, 4122], [4123, 4131], [4132, 4133], [4133, 4136], [4137, 4144], [4145, 4155], [4155, 4156], [4156, 4157], [4158, 4167], [4168, 4170], [4171, 4175], [4176, 4180], [4180, 4182], [4183, 4188], [4189, 4198], [4199, 4203], [4204, 4207], [4208, 4215], [4216, 4217], [4218, 4226], [4226, 4227], [4228, 4231], [4232, 4236], [4237, 4246], [4247, 4249], [4250, 4255], [4256, 4262], [4262, 4264], [4265, 4268], [4269, 4278], [4279, 4280], [4280, 4285], [4285, 4286], [4287, 4288], [4289, 4297], [4297, 4298], [4299, 4300], [4301, 4310], [4311, 4313], [4314, 4317], [4318, 4328], [4329, 4333], [4334, 4340], [4341, 4346], [4347, 4353], [4354, 4355], [4356, 4362], [4363, 4365], [4366, 4374], [4375, 4377], [4378, 4382], [4383, 4384], [4385, 4393], [4394, 4395], [4395, 4399], [4399, 4400], [4400, 4401], [4402, 4404], [4405, 4415], [4416, 4420], [4421, 4425], [4426, 4431], [4432, 4436], [4436, 4437], [4438, 4448], [4448, 4449], [4450, 4453], [4454, 4455], [4456, 4464], [4464, 4465], [4466, 4467], [4468, 4472], [4473, 4478], [4479, 4481], [4482, 4485], [4486, 4496], [4497, 4498], [4499, 4500], [4500, 4508], [4508, 4509], [4509, 4510], [4511, 4514], [4515, 4520], [4521, 4523], [4524, 4527], [4528, 4530], [4531, 4538], [4539, 4548], [4548, 4550], [4551, 4556], [4557, 4561], [4562, 4565], [4566, 4571], [4572, 4575], [4576, 4580], [4581, 4584], [4585, 4591], [4592, 4600], [4601, 4604], [4605, 4609], [4610, 4615], [4616, 4618], [4618, 4619], [4620, 4621], [4622, 4627], [4628, 4630], [4631, 4639], [4639, 4640], [4641, 4642], [4643, 4650], [4651, 4659], [4660, 4665], [4666, 4667], [4668, 4676], [4677, 4678], [4678, 4682], [4682, 4683], [4683, 4684], [4685, 4690], [4691, 4694], [4695, 4701], [4702, 4709], [4710, 4715], [4716, 4720], [4721, 4722], [4723, 4724], [4725, 4727], [4728, 4732], [4733, 4740], [4741, 4742], [4743, 4744], [4744, 4752], [4752, 4753], [4753, 4754], [4755, 4756], [4757, 4766], [4767, 4771], [4772, 4774], [4775, 4778], [4779, 4790], [4791, 4797], [4798, 4801], [4802, 4803], [4803, 4811], [4812, 4813], [4814, 4820], [4821, 4826], [4826, 4827]]}) 
answer: set([u'states', u'united'])
['No']

Are there any cities named Santiago in the United States?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2488>.answer
_____________________________ test_yesno[param156] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2680>, (<src.tfidf.TF_IDF object at 0x7f56bc2d18d0>, set(['swan'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2680>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.37069764733314514, {u'tokens': [u'Swans', u'are', u'birds', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'includes', u'geese', u'and', u'ducks', u'.'], u'lemmas': [u'swan', u'be', u'bird', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'include', u'goose', u'and', u'duck', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[0, 5], [6, 9], [10, 15], [16, 18], [19, 22], [23, 29], [30, 38], [38, 39], [40, 45], [46, 50], [51, 59], [60, 65], [66, 69], [70, 75], [75, 76]]}) 
answer: set([u'belong'])
candidate Sentence: (0.18708878755569458, {u'tokens': [u'Cygnets', u'do', u'this', u'from', u'a', u'young', u'age', u'.'], u'lemmas': [u'cygnet', u'do', u'this', u'from', u'a', u'young', u'age', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[1797, 1804], [1805, 1807], [1808, 1812], [1813, 1817], [1818, 1819], [1820, 1825], [1826, 1829], [1829, 1830]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.11457893997430801, {u'tokens': [u'The', u'fossil', u'record', u'of', u'the', u'genus', u'Cygnus', u'is', u'quite', u'impressive', u',', u'although', u'allocation', u'to', u'the', u'subgenera', u'is', u'often', u'tentative', u';', u'as', u'indicated', u'above', u',', u'at', u'least', u'the', u'early', u'forms', u'probably', u'belong', u'to', u'the', u'C.', u'olor', u'-', u'Southern', u'Hemisphere', u'lineage', u',', u'whereas', u'the', u'Pleistocene', u'taxa', u'from', u'North', u'America', u'would', u'be', u'placed', u'in', u'Olor', u'.'], u'lemmas': [u'the', u'fossil', u'record', u'of', u'the', u'genus', u'Cygnus', u'be', u'quite', u'impressive', u',', u'although', u'allocation', u'to', u'the', u'subgenera', u'be', u'often', u'tentative', u';', u'as', u'indicate', u'above', u',', u'at', u'least', u'the', u'early', u'form', u'probably', u'belong', u'to', u'the', u'C.', u'olor', u'-', u'Southern', u'Hemisphere', u'lineage', u',', u'whereas', u'the', u'pleistocene', u'taxa', u'from', u'North', u'America', u'would', u'be', u'place', u'in', u'Olor', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'IN', u'NN', u'TO', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u':', u'IN', u'VBN', u'IN', u',', u'IN', u'JJS', u'DT', u'JJ', u'NNS', u'RB', u'VBP', u'TO', u'DT', u'NNP', u'SYM', u':', u'NNP', u'NNP', u'NN', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[4411, 4414], [4415, 4421], [4422, 4428], [4429, 4431], [4432, 4435], [4436, 4441], [4442, 4448], [4449, 4451], [4452, 4457], [4458, 4468], [4468, 4469], [4470, 4478], [4479, 4489], [4490, 4492], [4493, 4496], [4497, 4506], [4507, 4509], [4510, 4515], [4516, 4525], [4525, 4526], [4527, 4529], [4530, 4539], [4540, 4545], [4545, 4546], [4547, 4549], [4550, 4555], [4556, 4559], [4560, 4565], [4566, 4571], [4572, 4580], [4581, 4587], [4588, 4590], [4591, 4594], [4595, 4597], [4598, 4602], [4603, 4604], [4605, 4613], [4614, 4624], [4625, 4632], [4632, 4633], [4634, 4641], [4642, 4645], [4646, 4657], [4658, 4662], [4663, 4667], [4668, 4673], [4674, 4681], [4682, 4687], [4688, 4690], [4691, 4697], [4698, 4700], [4701, 4705], [4705, 4706]]}) 
answer: set([u'family', u'anatidae'])
candidate Sentence: (0.10148604214191437, {u'tokens': [u'The', u'variant', u'here', u'given', u'is', u'the', u'coat-of-arms', u'of', u'writer', u'Henryk', u'Sienkiewicz', u"'s", u'family', u'.'], u'lemmas': [u'the', u'variant', u'here', u'give', u'be', u'the', u'coat-of-arm', u'of', u'writer', u'Henryk', u'Sienkiewicz', u"'s", u'family', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'NNP', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[6669, 6672], [6673, 6680], [6681, 6685], [6686, 6691], [6692, 6694], [6695, 6698], [6699, 6711], [6712, 6714], [6715, 6721], [6722, 6728], [6729, 6740], [6740, 6742], [6743, 6749], [6749, 6750]]}) 
answer: set([u'belong', u'anatidae'])
candidate Sentence: (0.097344860434532166, {u'tokens': [u'Swans', u'usually', u'mate', u'for', u'life', u',', u'though', u'`', u'divorce', u"'", u'does', u'sometimes', u'occur', u',', u'particularly', u'following', u'nesting', u'failure', u'.'], u'lemmas': [u'swan', u'usually', u'mate', u'for', u'life', u',', u'though', u'`', u'divorce', u"'", u'do', u'sometimes', u'occur', u',', u'particularly', u'follow', u'nesting', u'failure', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'IN', u'NN', u',', u'IN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VB', u',', u'RB', u'VBG', u'JJ', u'NN', u'.'], u'char_offsets': [[251, 256], [257, 264], [265, 269], [270, 273], [274, 278], [278, 279], [280, 286], [287, 288], [288, 295], [295, 296], [297, 301], [302, 311], [312, 317], [317, 318], [319, 331], [332, 341], [342, 349], [350, 357], [357, 358]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.077151507139205933, {u'tokens': [u'``', u'abd', u"''", u'-LRB-', u'Polish', u'for', u'``', u'Swan', u"''", u'-RRB-', u'is', u'a', u'Polish', u'coat', u'of', u'arms', u'which', u'was', u'used', u'by', u'many', u'szlachta', u'-LRB-', u'noble', u'-RRB-', u'families', u'under', u'the', u'Polish-Lithuanian', u'Commonwealth', u'.'], u'lemmas': [u'``', u'abd', u"''", u'-lrb-', u'Polish', u'for', u'``', u'swan', u"''", u'-rrb-', u'be', u'a', u'polish', u'coat', u'of', u'arm', u'which', u'be', u'use', u'by', u'many', u'szlachta', u'-lrb-', u'noble', u'-rrb-', u'family', u'under', u'the', u'polish-lithuanian', u'Commonwealth', u'.'], u'pos': [u'``', u'NN', u"''", u'-LRB-', u'NNP', u'IN', u'``', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'WDT', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'.'], u'char_offsets': [[6527, 6528], [6528, 6531], [6531, 6532], [6533, 6534], [6534, 6540], [6541, 6544], [6545, 6546], [6546, 6550], [6550, 6551], [6551, 6552], [6553, 6555], [6556, 6557], [6558, 6564], [6565, 6569], [6570, 6572], [6573, 6577], [6578, 6583], [6584, 6587], [6588, 6592], [6593, 6595], [6596, 6600], [6601, 6609], [6610, 6611], [6611, 6616], [6616, 6617], [6618, 6626], [6627, 6632], [6633, 6636], [6637, 6654], [6655, 6667], [6667, 6668]]}) 
answer: set([u'belong', u'anatidae'])
candidate Sentence: (0.069491252303123474, {u'tokens': [u'Mute', u'Swan', u'-LRB-', u'Cygnus', u'olor', u'-RRB-', u'with', u'nine', u'cygnets', u'*', u'Cygnus', u'csakvarensis', u'-LRB-', u'Late', u'Miocene', u'of', u'Hungary', u'-RRB-', u'-', u'formerly', u'Cygnanser', u'*', u'Cygnus', u'mariae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Wickieup', u',', u'USA', u'-RRB-', u'*', u'Cygnus', u'verae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-RRB-', u'*', u'Cygnus', u'liskunae', u'-LRB-', u'Middle', u'Pliocene', u'of', u'W', u'Mongolia', u'-RRB-', u'*', u'Cygnus', u'hibbardi', u'-LRB-', u'?'], u'lemmas': [u'mute', u'swan', u'-lrb-', u'Cygnus', u'olor', u'-rrb-', u'with', u'nine', u'cygnet', u'*', u'Cygnus', u'csakvarensis', u'-lrb-', u'late', u'miocene', u'of', u'Hungary', u'-rrb-', u'-', u'formerly', u'cygnanser', u'*', u'Cygnus', u'mariae', u'-lrb-', u'early', u'pliocene', u'of', u'Wickieup', u',', u'USA', u'-rrb-', u'*', u'Cygnus', u'verae', u'-lrb-', u'early', u'pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-rrb-', u'*', u'Cygnus', u'liskuna', u'-lrb-', u'middle', u'pliocene', u'of', u'W', u'Mongolia', u'-rrb-', u'*', u'Cygnus', u'hibbardus', u'-lrb-', u'?'], u'pos': [u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'IN', u'CD', u'NNS', u'SYM', u'NNP', u'NN', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u'-RRB-', u':', u'RB', u'NN', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'.'], u'char_offsets': [[4953, 4957], [4958, 4962], [4963, 4964], [4964, 4970], [4971, 4975], [4975, 4976], [4977, 4981], [4982, 4986], [4987, 4994], [4995, 4996], [4996, 5002], [5003, 5015], [5016, 5017], [5017, 5021], [5022, 5029], [5030, 5032], [5033, 5040], [5040, 5041], [5042, 5043], [5044, 5052], [5053, 5062], [5064, 5065], [5065, 5071], [5072, 5078], [5079, 5080], [5080, 5085], [5086, 5094], [5095, 5097], [5098, 5106], [5106, 5107], [5108, 5111], [5111, 5112], [5114, 5115], [5115, 5121], [5122, 5127], [5128, 5129], [5129, 5134], [5135, 5143], [5144, 5146], [5147, 5152], [5152, 5153], [5154, 5162], [5162, 5163], [5164, 5165], [5165, 5171], [5172, 5180], [5181, 5182], [5182, 5188], [5189, 5197], [5198, 5200], [5201, 5202], [5203, 5211], [5211, 5212], [5213, 5214], [5214, 5220], [5221, 5229], [5230, 5231], [5231, 5232]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.026414258405566216, {u'tokens': [u'Very', u'similar', u'to', u'the', u'Whooper', u'Swan', u'-LRB-', u'and', u'sometimes', u'treated', u'as', u'a', u'subspecies', u'of', u'it', u'-RRB-', u',', u'it', u'was', u'hunted', u'almost', u'to', u'extinction', u'but', u'has', u'since', u'recovered', u'.'], u'lemmas': [u'very', u'similar', u'to', u'the', u'Whooper', u'swan', u'-lrb-', u'and', u'sometimes', u'treat', u'as', u'a', u'subspecy', u'of', u'it', u'-rrb-', u',', u'it', u'be', u'hunt', u'almost', u'to', u'extinction', u'but', u'have', u'since', u'recover', u'.'], u'pos': [u'RB', u'JJ', u'TO', u'DT', u'NNP', u'NN', u'-LRB-', u'CC', u'RB', u'VBN', u'IN', u'DT', u'NNS', u'IN', u'PRP', u'-RRB-', u',', u'PRP', u'VBD', u'VBN', u'RB', u'TO', u'NN', u'CC', u'VBZ', u'IN', u'VBN', u'.'], u'char_offsets': [[3870, 3874], [3875, 3882], [3883, 3885], [3886, 3889], [3890, 3897], [3898, 3902], [3903, 3904], [3904, 3907], [3908, 3917], [3918, 3925], [3926, 3928], [3929, 3930], [3931, 3941], [3942, 3944], [3945, 3947], [3947, 3948], [3948, 3949], [3950, 3952], [3953, 3956], [3957, 3963], [3964, 3970], [3971, 3973], [3974, 3984], [3985, 3988], [3989, 3992], [3993, 3998], [3999, 4008], [4008, 4009]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.025260183960199356, {u'tokens': [u'The', u'word', u'``', u'swan', u"''", u'is', u'derived', u'from', u'Old', u'English', u'swan', u',', u'akin', u'to', u'the', u'German', u'Schwan', u'and', u'Dutch', u'zwaan', u',', u'in', u'turn', u'derived', u'from', u'Indo-European', u'root', u'*', u'swen', u'-LRB-', u'to', u'sound', u',', u'to', u'sing', u'-RRB-', u',', u'whence', u'Latin', u'derives', u'sonus', u'-LRB-', u'sound', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'``', u'swan', u"''", u'be', u'derive', u'from', u'old', u'english', u'swan', u',', u'akin', u'to', u'the', u'german', u'schwan', u'and', u'dutch', u'zwaan', u',', u'in', u'turn', u'derive', u'from', u'indo-european', u'root', u'*', u'swen', u'-lrb-', u'to', u'sound', u',', u'to', u'sing', u'-rrb-', u',', u'whence', u'Latin', u'derive', u'sonus', u'-lrb-', u'sound', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u',', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u',', u'IN', u'NN', u'VBN', u'IN', u'JJ', u'NN', u'SYM', u'NN', u'-LRB-', u'TO', u'VB', u',', u'TO', u'VB', u'-RRB-', u',', u'NN', u'NNP', u'VBZ', u'NN', u'-LRB-', u'NN', u'-RRB-', u'.'], u'char_offsets': [[421, 424], [425, 429], [430, 431], [431, 435], [435, 436], [437, 439], [440, 447], [448, 452], [453, 456], [457, 464], [465, 469], [469, 470], [471, 475], [476, 478], [479, 482], [483, 489], [490, 496], [497, 500], [501, 506], [507, 512], [512, 513], [514, 516], [517, 521], [522, 529], [530, 534], [535, 548], [549, 553], [554, 555], [555, 559], [560, 561], [561, 563], [564, 569], [569, 570], [571, 573], [574, 578], [578, 579], [579, 580], [581, 587], [588, 593], [594, 601], [602, 607], [608, 609], [609, 614], [614, 615], [615, 616]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.024875383824110031, {u'tokens': [u'Many', u'of', u'the', u'cultural', u'aspects', u'refer', u'to', u'the', u'Mute', u'Swan', u'of', u'Europe', u'.'], u'lemmas': [u'many', u'of', u'the', u'cultural', u'aspect', u'refer', u'to', u'the', u'mute', u'swan', u'of', u'Europe', u'.'], u'pos': [u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'VBP', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[6751, 6755], [6756, 6758], [6759, 6762], [6763, 6771], [6772, 6779], [6780, 6785], [6786, 6788], [6789, 6792], [6793, 6797], [6798, 6802], [6803, 6805], [6806, 6812], [6812, 6813]]}) 
answer: set([u'belong', u'family', u'anatidae'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do swans belong to the family Anatidae?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2680>.answer
_____________________________ test_yesno[param157] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa26c8>, (<src.tfidf.TF_IDF object at 0x7f56bc2d18d0>, set(['swan'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa26c8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.37069764733314514, {u'tokens': [u'Swans', u'are', u'birds', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'includes', u'geese', u'and', u'ducks', u'.'], u'lemmas': [u'swan', u'be', u'bird', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'include', u'goose', u'and', u'duck', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[0, 5], [6, 9], [10, 15], [16, 18], [19, 22], [23, 29], [30, 38], [38, 39], [40, 45], [46, 50], [51, 59], [60, 65], [66, 69], [70, 75], [75, 76]]}) 
answer: set([u'belong'])
candidate Sentence: (0.18708878755569458, {u'tokens': [u'Cygnets', u'do', u'this', u'from', u'a', u'young', u'age', u'.'], u'lemmas': [u'cygnet', u'do', u'this', u'from', u'a', u'young', u'age', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[1797, 1804], [1805, 1807], [1808, 1812], [1813, 1817], [1818, 1819], [1820, 1825], [1826, 1829], [1829, 1830]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.11457893997430801, {u'tokens': [u'The', u'fossil', u'record', u'of', u'the', u'genus', u'Cygnus', u'is', u'quite', u'impressive', u',', u'although', u'allocation', u'to', u'the', u'subgenera', u'is', u'often', u'tentative', u';', u'as', u'indicated', u'above', u',', u'at', u'least', u'the', u'early', u'forms', u'probably', u'belong', u'to', u'the', u'C.', u'olor', u'-', u'Southern', u'Hemisphere', u'lineage', u',', u'whereas', u'the', u'Pleistocene', u'taxa', u'from', u'North', u'America', u'would', u'be', u'placed', u'in', u'Olor', u'.'], u'lemmas': [u'the', u'fossil', u'record', u'of', u'the', u'genus', u'Cygnus', u'be', u'quite', u'impressive', u',', u'although', u'allocation', u'to', u'the', u'subgenera', u'be', u'often', u'tentative', u';', u'as', u'indicate', u'above', u',', u'at', u'least', u'the', u'early', u'form', u'probably', u'belong', u'to', u'the', u'C.', u'olor', u'-', u'Southern', u'Hemisphere', u'lineage', u',', u'whereas', u'the', u'pleistocene', u'taxa', u'from', u'North', u'America', u'would', u'be', u'place', u'in', u'Olor', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'IN', u'NN', u'TO', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u':', u'IN', u'VBN', u'IN', u',', u'IN', u'JJS', u'DT', u'JJ', u'NNS', u'RB', u'VBP', u'TO', u'DT', u'NNP', u'SYM', u':', u'NNP', u'NNP', u'NN', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[4411, 4414], [4415, 4421], [4422, 4428], [4429, 4431], [4432, 4435], [4436, 4441], [4442, 4448], [4449, 4451], [4452, 4457], [4458, 4468], [4468, 4469], [4470, 4478], [4479, 4489], [4490, 4492], [4493, 4496], [4497, 4506], [4507, 4509], [4510, 4515], [4516, 4525], [4525, 4526], [4527, 4529], [4530, 4539], [4540, 4545], [4545, 4546], [4547, 4549], [4550, 4555], [4556, 4559], [4560, 4565], [4566, 4571], [4572, 4580], [4581, 4587], [4588, 4590], [4591, 4594], [4595, 4597], [4598, 4602], [4603, 4604], [4605, 4613], [4614, 4624], [4625, 4632], [4632, 4633], [4634, 4641], [4642, 4645], [4646, 4657], [4658, 4662], [4663, 4667], [4668, 4673], [4674, 4681], [4682, 4687], [4688, 4690], [4691, 4697], [4698, 4700], [4701, 4705], [4705, 4706]]}) 
answer: set([u'family', u'anatidae'])
candidate Sentence: (0.10148604214191437, {u'tokens': [u'The', u'variant', u'here', u'given', u'is', u'the', u'coat-of-arms', u'of', u'writer', u'Henryk', u'Sienkiewicz', u"'s", u'family', u'.'], u'lemmas': [u'the', u'variant', u'here', u'give', u'be', u'the', u'coat-of-arm', u'of', u'writer', u'Henryk', u'Sienkiewicz', u"'s", u'family', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'NNP', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[6669, 6672], [6673, 6680], [6681, 6685], [6686, 6691], [6692, 6694], [6695, 6698], [6699, 6711], [6712, 6714], [6715, 6721], [6722, 6728], [6729, 6740], [6740, 6742], [6743, 6749], [6749, 6750]]}) 
answer: set([u'belong', u'anatidae'])
candidate Sentence: (0.097344860434532166, {u'tokens': [u'Swans', u'usually', u'mate', u'for', u'life', u',', u'though', u'`', u'divorce', u"'", u'does', u'sometimes', u'occur', u',', u'particularly', u'following', u'nesting', u'failure', u'.'], u'lemmas': [u'swan', u'usually', u'mate', u'for', u'life', u',', u'though', u'`', u'divorce', u"'", u'do', u'sometimes', u'occur', u',', u'particularly', u'follow', u'nesting', u'failure', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'IN', u'NN', u',', u'IN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VB', u',', u'RB', u'VBG', u'JJ', u'NN', u'.'], u'char_offsets': [[251, 256], [257, 264], [265, 269], [270, 273], [274, 278], [278, 279], [280, 286], [287, 288], [288, 295], [295, 296], [297, 301], [302, 311], [312, 317], [317, 318], [319, 331], [332, 341], [342, 349], [350, 357], [357, 358]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.077151507139205933, {u'tokens': [u'``', u'abd', u"''", u'-LRB-', u'Polish', u'for', u'``', u'Swan', u"''", u'-RRB-', u'is', u'a', u'Polish', u'coat', u'of', u'arms', u'which', u'was', u'used', u'by', u'many', u'szlachta', u'-LRB-', u'noble', u'-RRB-', u'families', u'under', u'the', u'Polish-Lithuanian', u'Commonwealth', u'.'], u'lemmas': [u'``', u'abd', u"''", u'-lrb-', u'Polish', u'for', u'``', u'swan', u"''", u'-rrb-', u'be', u'a', u'polish', u'coat', u'of', u'arm', u'which', u'be', u'use', u'by', u'many', u'szlachta', u'-lrb-', u'noble', u'-rrb-', u'family', u'under', u'the', u'polish-lithuanian', u'Commonwealth', u'.'], u'pos': [u'``', u'NN', u"''", u'-LRB-', u'NNP', u'IN', u'``', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'WDT', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'.'], u'char_offsets': [[6527, 6528], [6528, 6531], [6531, 6532], [6533, 6534], [6534, 6540], [6541, 6544], [6545, 6546], [6546, 6550], [6550, 6551], [6551, 6552], [6553, 6555], [6556, 6557], [6558, 6564], [6565, 6569], [6570, 6572], [6573, 6577], [6578, 6583], [6584, 6587], [6588, 6592], [6593, 6595], [6596, 6600], [6601, 6609], [6610, 6611], [6611, 6616], [6616, 6617], [6618, 6626], [6627, 6632], [6633, 6636], [6637, 6654], [6655, 6667], [6667, 6668]]}) 
answer: set([u'belong', u'anatidae'])
candidate Sentence: (0.069491252303123474, {u'tokens': [u'Mute', u'Swan', u'-LRB-', u'Cygnus', u'olor', u'-RRB-', u'with', u'nine', u'cygnets', u'*', u'Cygnus', u'csakvarensis', u'-LRB-', u'Late', u'Miocene', u'of', u'Hungary', u'-RRB-', u'-', u'formerly', u'Cygnanser', u'*', u'Cygnus', u'mariae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Wickieup', u',', u'USA', u'-RRB-', u'*', u'Cygnus', u'verae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-RRB-', u'*', u'Cygnus', u'liskunae', u'-LRB-', u'Middle', u'Pliocene', u'of', u'W', u'Mongolia', u'-RRB-', u'*', u'Cygnus', u'hibbardi', u'-LRB-', u'?'], u'lemmas': [u'mute', u'swan', u'-lrb-', u'Cygnus', u'olor', u'-rrb-', u'with', u'nine', u'cygnet', u'*', u'Cygnus', u'csakvarensis', u'-lrb-', u'late', u'miocene', u'of', u'Hungary', u'-rrb-', u'-', u'formerly', u'cygnanser', u'*', u'Cygnus', u'mariae', u'-lrb-', u'early', u'pliocene', u'of', u'Wickieup', u',', u'USA', u'-rrb-', u'*', u'Cygnus', u'verae', u'-lrb-', u'early', u'pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-rrb-', u'*', u'Cygnus', u'liskuna', u'-lrb-', u'middle', u'pliocene', u'of', u'W', u'Mongolia', u'-rrb-', u'*', u'Cygnus', u'hibbardus', u'-lrb-', u'?'], u'pos': [u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'IN', u'CD', u'NNS', u'SYM', u'NNP', u'NN', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u'-RRB-', u':', u'RB', u'NN', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'.'], u'char_offsets': [[4953, 4957], [4958, 4962], [4963, 4964], [4964, 4970], [4971, 4975], [4975, 4976], [4977, 4981], [4982, 4986], [4987, 4994], [4995, 4996], [4996, 5002], [5003, 5015], [5016, 5017], [5017, 5021], [5022, 5029], [5030, 5032], [5033, 5040], [5040, 5041], [5042, 5043], [5044, 5052], [5053, 5062], [5064, 5065], [5065, 5071], [5072, 5078], [5079, 5080], [5080, 5085], [5086, 5094], [5095, 5097], [5098, 5106], [5106, 5107], [5108, 5111], [5111, 5112], [5114, 5115], [5115, 5121], [5122, 5127], [5128, 5129], [5129, 5134], [5135, 5143], [5144, 5146], [5147, 5152], [5152, 5153], [5154, 5162], [5162, 5163], [5164, 5165], [5165, 5171], [5172, 5180], [5181, 5182], [5182, 5188], [5189, 5197], [5198, 5200], [5201, 5202], [5203, 5211], [5211, 5212], [5213, 5214], [5214, 5220], [5221, 5229], [5230, 5231], [5231, 5232]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.026414258405566216, {u'tokens': [u'Very', u'similar', u'to', u'the', u'Whooper', u'Swan', u'-LRB-', u'and', u'sometimes', u'treated', u'as', u'a', u'subspecies', u'of', u'it', u'-RRB-', u',', u'it', u'was', u'hunted', u'almost', u'to', u'extinction', u'but', u'has', u'since', u'recovered', u'.'], u'lemmas': [u'very', u'similar', u'to', u'the', u'Whooper', u'swan', u'-lrb-', u'and', u'sometimes', u'treat', u'as', u'a', u'subspecy', u'of', u'it', u'-rrb-', u',', u'it', u'be', u'hunt', u'almost', u'to', u'extinction', u'but', u'have', u'since', u'recover', u'.'], u'pos': [u'RB', u'JJ', u'TO', u'DT', u'NNP', u'NN', u'-LRB-', u'CC', u'RB', u'VBN', u'IN', u'DT', u'NNS', u'IN', u'PRP', u'-RRB-', u',', u'PRP', u'VBD', u'VBN', u'RB', u'TO', u'NN', u'CC', u'VBZ', u'IN', u'VBN', u'.'], u'char_offsets': [[3870, 3874], [3875, 3882], [3883, 3885], [3886, 3889], [3890, 3897], [3898, 3902], [3903, 3904], [3904, 3907], [3908, 3917], [3918, 3925], [3926, 3928], [3929, 3930], [3931, 3941], [3942, 3944], [3945, 3947], [3947, 3948], [3948, 3949], [3950, 3952], [3953, 3956], [3957, 3963], [3964, 3970], [3971, 3973], [3974, 3984], [3985, 3988], [3989, 3992], [3993, 3998], [3999, 4008], [4008, 4009]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.025260183960199356, {u'tokens': [u'The', u'word', u'``', u'swan', u"''", u'is', u'derived', u'from', u'Old', u'English', u'swan', u',', u'akin', u'to', u'the', u'German', u'Schwan', u'and', u'Dutch', u'zwaan', u',', u'in', u'turn', u'derived', u'from', u'Indo-European', u'root', u'*', u'swen', u'-LRB-', u'to', u'sound', u',', u'to', u'sing', u'-RRB-', u',', u'whence', u'Latin', u'derives', u'sonus', u'-LRB-', u'sound', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'``', u'swan', u"''", u'be', u'derive', u'from', u'old', u'english', u'swan', u',', u'akin', u'to', u'the', u'german', u'schwan', u'and', u'dutch', u'zwaan', u',', u'in', u'turn', u'derive', u'from', u'indo-european', u'root', u'*', u'swen', u'-lrb-', u'to', u'sound', u',', u'to', u'sing', u'-rrb-', u',', u'whence', u'Latin', u'derive', u'sonus', u'-lrb-', u'sound', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u',', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u',', u'IN', u'NN', u'VBN', u'IN', u'JJ', u'NN', u'SYM', u'NN', u'-LRB-', u'TO', u'VB', u',', u'TO', u'VB', u'-RRB-', u',', u'NN', u'NNP', u'VBZ', u'NN', u'-LRB-', u'NN', u'-RRB-', u'.'], u'char_offsets': [[421, 424], [425, 429], [430, 431], [431, 435], [435, 436], [437, 439], [440, 447], [448, 452], [453, 456], [457, 464], [465, 469], [469, 470], [471, 475], [476, 478], [479, 482], [483, 489], [490, 496], [497, 500], [501, 506], [507, 512], [512, 513], [514, 516], [517, 521], [522, 529], [530, 534], [535, 548], [549, 553], [554, 555], [555, 559], [560, 561], [561, 563], [564, 569], [569, 570], [571, 573], [574, 578], [578, 579], [579, 580], [581, 587], [588, 593], [594, 601], [602, 607], [608, 609], [609, 614], [614, 615], [615, 616]]}) 
answer: set([u'belong', u'family', u'anatidae'])
candidate Sentence: (0.024875383824110031, {u'tokens': [u'Many', u'of', u'the', u'cultural', u'aspects', u'refer', u'to', u'the', u'Mute', u'Swan', u'of', u'Europe', u'.'], u'lemmas': [u'many', u'of', u'the', u'cultural', u'aspect', u'refer', u'to', u'the', u'mute', u'swan', u'of', u'Europe', u'.'], u'pos': [u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'VBP', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[6751, 6755], [6756, 6758], [6759, 6762], [6763, 6771], [6772, 6779], [6780, 6785], [6786, 6788], [6789, 6792], [6793, 6797], [6798, 6802], [6803, 6805], [6806, 6812], [6812, 6813]]}) 
answer: set([u'belong', u'family', u'anatidae'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do swans belong to the family Anatidae?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa26c8>.answer
_____________________________ test_yesno[param164] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa28c0>, (<src.tfidf.TF_IDF object at 0x7f56bc2d18d0>, set(['swan'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('It is the largest bird of North America.') == True
E                +  where 'It is the largest bird of North America.' = <src.question_processing.Question_parser instance at 0x7f56b8fa28c0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39336329698562622, {u'tokens': [u'The', u'Trumpeter', u'Swan', u'-LRB-', u'Cygnus', u'buccinator', u'-RRB-', u'is', u'the', u'largest', u'bird', u'of', u'North', u'America', u'The', u'swan', u'is', u'found', u'in', u'the', u'cosmogony', u'of', u'many', u'ancient', u'peoples', u'.'], u'lemmas': [u'the', u'Trumpeter', u'swan', u'-lrb-', u'Cygnus', u'buccinator', u'-rrb-', u'be', u'the', u'largest', u'bird', u'of', u'North', u'America', u'the', u'swan', u'be', u'find', u'in', u'the', u'cosmogony', u'of', u'many', u'ancient', u'people', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'NNP', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[6215, 6218], [6219, 6228], [6229, 6233], [6234, 6235], [6235, 6241], [6242, 6252], [6252, 6253], [6254, 6256], [6257, 6260], [6261, 6268], [6269, 6273], [6274, 6276], [6277, 6282], [6283, 6290], [6291, 6294], [6295, 6299], [6300, 6302], [6303, 6308], [6309, 6311], [6312, 6315], [6316, 6325], [6326, 6328], [6329, 6333], [6334, 6341], [6342, 6349], [6349, 6350]]}) 
answer: set([])
candidate Sentence: (0.29726332426071167, {u'tokens': [u'**', u'Trumpeter', u'Swan', u',', u'Cygnus', u'buccinator', u'is', u'the', u'largest', u'North', u'American', u'bird', u'.'], u'lemmas': [u'**', u'trumpeter', u'swan', u',', u'Cygnus', u'buccinator', u'be', u'the', u'largest', u'north', u'american', u'bird', u'.'], u'pos': [u'SYM', u'NN', u'NN', u',', u'NNP', u'NN', u'VBZ', u'DT', u'JJS', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3798, 3800], [3800, 3809], [3810, 3814], [3814, 3815], [3816, 3822], [3823, 3833], [3834, 3836], [3837, 3840], [3841, 3848], [3849, 3854], [3855, 3863], [3864, 3868], [3868, 3869]]}) 
answer: set([])
candidate Sentence: (0.14418311417102814, {u'tokens': [u'It', u'has', u'been', u'documented', u'-LRB-', u'The', u'Trumpeter', u'Swan', u'Society', u'-RRB-', u'as', u'migrating', u'from', u'Russia', u'onto', u'the', u'American', u'continent', u',', u'as', u'have', u'both', u'Tundra', u'species', u'and', u'the', u'Whooper', u'.'], u'lemmas': [u'it', u'have', u'be', u'document', u'-lrb-', u'the', u'Trumpeter', u'swan', u'Society', u'-rrb-', u'as', u'migrate', u'from', u'Russia', u'onto', u'the', u'american', u'continent', u',', u'as', u'have', u'both', u'Tundra', u'species', u'and', u'the', u'Whooper', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'VBN', u'-LRB-', u'DT', u'NNP', u'NN', u'NNP', u'-RRB-', u'IN', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'VBP', u'DT', u'NNP', u'NNS', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[2807, 2809], [2810, 2813], [2814, 2818], [2819, 2829], [2830, 2831], [2831, 2834], [2835, 2844], [2845, 2849], [2850, 2857], [2857, 2858], [2859, 2861], [2862, 2871], [2872, 2876], [2877, 2883], [2884, 2888], [2889, 2892], [2893, 2901], [2902, 2911], [2911, 2912], [2913, 2915], [2916, 2920], [2921, 2925], [2926, 2932], [2933, 2940], [2941, 2944], [2945, 2948], [2949, 2956], [2956, 2957]]}) 
answer: set([u'bird', u'largest'])
candidate Sentence: (0.093227803707122803, {u'tokens': [u'Swans', u'are', u'birds', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'includes', u'geese', u'and', u'ducks', u'.'], u'lemmas': [u'swan', u'be', u'bird', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'include', u'goose', u'and', u'duck', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[0, 5], [6, 9], [10, 15], [16, 18], [19, 22], [23, 29], [30, 38], [38, 39], [40, 45], [46, 50], [51, 59], [60, 65], [66, 69], [70, 75], [75, 76]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.08760342001914978, {u'tokens': [u'Mute', u'Swan', u'-LRB-', u'Cygnus', u'olor', u'-RRB-', u'with', u'nine', u'cygnets', u'*', u'Cygnus', u'csakvarensis', u'-LRB-', u'Late', u'Miocene', u'of', u'Hungary', u'-RRB-', u'-', u'formerly', u'Cygnanser', u'*', u'Cygnus', u'mariae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Wickieup', u',', u'USA', u'-RRB-', u'*', u'Cygnus', u'verae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-RRB-', u'*', u'Cygnus', u'liskunae', u'-LRB-', u'Middle', u'Pliocene', u'of', u'W', u'Mongolia', u'-RRB-', u'*', u'Cygnus', u'hibbardi', u'-LRB-', u'?'], u'lemmas': [u'mute', u'swan', u'-lrb-', u'Cygnus', u'olor', u'-rrb-', u'with', u'nine', u'cygnet', u'*', u'Cygnus', u'csakvarensis', u'-lrb-', u'late', u'miocene', u'of', u'Hungary', u'-rrb-', u'-', u'formerly', u'cygnanser', u'*', u'Cygnus', u'mariae', u'-lrb-', u'early', u'pliocene', u'of', u'Wickieup', u',', u'USA', u'-rrb-', u'*', u'Cygnus', u'verae', u'-lrb-', u'early', u'pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-rrb-', u'*', u'Cygnus', u'liskuna', u'-lrb-', u'middle', u'pliocene', u'of', u'W', u'Mongolia', u'-rrb-', u'*', u'Cygnus', u'hibbardus', u'-lrb-', u'?'], u'pos': [u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'IN', u'CD', u'NNS', u'SYM', u'NNP', u'NN', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u'-RRB-', u':', u'RB', u'NN', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'.'], u'char_offsets': [[4953, 4957], [4958, 4962], [4963, 4964], [4964, 4970], [4971, 4975], [4975, 4976], [4977, 4981], [4982, 4986], [4987, 4994], [4995, 4996], [4996, 5002], [5003, 5015], [5016, 5017], [5017, 5021], [5022, 5029], [5030, 5032], [5033, 5040], [5040, 5041], [5042, 5043], [5044, 5052], [5053, 5062], [5064, 5065], [5065, 5071], [5072, 5078], [5079, 5080], [5080, 5085], [5086, 5094], [5095, 5097], [5098, 5106], [5106, 5107], [5108, 5111], [5111, 5112], [5114, 5115], [5115, 5121], [5122, 5127], [5128, 5129], [5129, 5134], [5135, 5143], [5144, 5146], [5147, 5152], [5152, 5153], [5154, 5162], [5162, 5163], [5164, 5165], [5165, 5171], [5172, 5180], [5181, 5182], [5182, 5188], [5189, 5197], [5198, 5200], [5201, 5202], [5203, 5211], [5211, 5212], [5213, 5214], [5214, 5220], [5221, 5229], [5230, 5231], [5231, 5232]]}) 
answer: set([u'largest', u'bird', u'trumpeter'])
candidate Sentence: (0.072409950196743011, {u'tokens': [u'Today', u',', u'five', u'flying', u'swans', u'are', u'the', u'symbol', u'of', u'the', u'Nordic', u'Countries', u'and', u'the', u'whooper', u'swan', u'-LRB-', u'Cygnus', u'cygnus', u'-RRB-', u'is', u'the', u'national', u'bird', u'of', u'Finland', u'.'], u'lemmas': [u'today', u',', u'five', u'fly', u'swan', u'be', u'the', u'symbol', u'of', u'the', u'nordic', u'country', u'and', u'the', u'whooper', u'swan', u'-lrb-', u'Cygnus', u'cygnus', u'-rrb-', u'be', u'the', u'national', u'bird', u'of', u'Finland', u'.'], u'pos': [u'NN', u',', u'CD', u'VBG', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'CC', u'DT', u'NN', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[9002, 9007], [9007, 9008], [9009, 9013], [9014, 9020], [9021, 9026], [9027, 9030], [9031, 9034], [9035, 9041], [9042, 9044], [9045, 9048], [9049, 9055], [9056, 9065], [9066, 9069], [9070, 9073], [9074, 9081], [9082, 9086], [9087, 9088], [9088, 9094], [9095, 9101], [9101, 9102], [9103, 9105], [9106, 9109], [9110, 9118], [9119, 9123], [9124, 9126], [9127, 9134], [9134, 9135]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.072299577295780182, {u'tokens': [u'Recent', u'fossil', u'records', u',', u'according', u'to', u'the', u'British', u'Ornithological', u'Union', u',', u'show', u'Cygnus', u'olor', u'is', u'among', u'the', u'oldest', u'bird', u'species', u'still', u'extant', u'and', u'it', u'has', u'been', u'upgraded', u'to', u'``', u'native', u"''", u'species', u'in', u'several', u'European', u'countries', u',', u'since', u'this', u'bird', u'has', u'been', u'found', u'in', u'fossil', u'and', u'bog', u'specimens', u'dating', u'back', u'thousands', u'of', u'years', u'.'], u'lemmas': [u'recent', u'fossil', u'record', u',', u'accord', u'to', u'the', u'british', u'Ornithological', u'Union', u',', u'show', u'Cygnus', u'olor', u'be', u'among', u'the', u'oldest', u'bird', u'species', u'still', u'extant', u'and', u'it', u'have', u'be', u'upgrade', u'to', u'``', u'native', u"''", u'species', u'in', u'several', u'european', u'country', u',', u'since', u'this', u'bird', u'have', u'be', u'find', u'in', u'fossil', u'and', u'bog', u'specimen', u'date', u'back', u'thousand', u'of', u'year', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u',', u'VBG', u'TO', u'DT', u'JJ', u'NNP', u'NNP', u',', u'VBP', u'NNP', u'NN', u'VBZ', u'IN', u'DT', u'JJS', u'NN', u'NNS', u'RB', u'JJ', u'CC', u'PRP', u'VBZ', u'VBN', u'VBN', u'TO', u'``', u'JJ', u"''", u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'CC', u'NN', u'NNS', u'VBG', u'RB', u'NNS', u'IN', u'NNS', u'.'], u'char_offsets': [[2958, 2964], [2965, 2971], [2972, 2979], [2979, 2980], [2981, 2990], [2991, 2993], [2994, 2997], [2998, 3005], [3006, 3020], [3021, 3026], [3026, 3027], [3028, 3032], [3033, 3039], [3040, 3044], [3045, 3047], [3048, 3053], [3054, 3057], [3058, 3064], [3065, 3069], [3070, 3077], [3078, 3083], [3084, 3090], [3091, 3094], [3095, 3097], [3098, 3101], [3102, 3106], [3107, 3115], [3116, 3118], [3119, 3120], [3120, 3126], [3126, 3127], [3128, 3135], [3136, 3138], [3139, 3146], [3147, 3155], [3156, 3165], [3165, 3166], [3167, 3172], [3173, 3177], [3178, 3182], [3183, 3186], [3187, 3191], [3192, 3197], [3198, 3200], [3201, 3207], [3208, 3211], [3212, 3215], [3216, 3225], [3226, 3232], [3233, 3237], [3238, 3247], [3248, 3250], [3251, 3256], [3256, 3257]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.063692681491374969, {u'tokens': [u'However', u',', u'ornithological', u'checklists', u'clearly', u'classify', u'several', u'species', u'of', u'swans', u'as', u'vagrant', u'birds', u'in', u'India', u'.'], u'lemmas': [u'however', u',', u'ornithological', u'checklist', u'clearly', u'classify', u'several', u'species', u'of', u'swan', u'as', u'vagrant', u'bird', u'in', u'India', u'.'], u'pos': [u'RB', u',', u'JJ', u'NNS', u'RB', u'VB', u'JJ', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[10713, 10720], [10720, 10721], [10722, 10736], [10737, 10747], [10748, 10755], [10756, 10764], [10765, 10772], [10773, 10780], [10781, 10783], [10784, 10789], [10790, 10792], [10793, 10800], [10801, 10806], [10807, 10809], [10810, 10815], [10815, 10816]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.057678982615470886, {u'tokens': [u'Other', u'references', u'in', u'classical', u'literature', u'include', u'the', u'belief', u'that', u'upon', u'death', u'the', u'otherwise', u'silent', u'Mute', u'Swan', u'would', u'sing', u'beautifully', u'-', u'hence', u'the', u'phrase', u'swan', u'song', u';', u'as', u'well', u'as', u'Juvenal', u"'s", u'sarcastic', u'reference', u'to', u'a', u'good', u'woman', u'being', u'a', u'``', u'rare', u'bird', u',', u'as', u'rare', u'on', u'earth', u'as', u'a', u'black', u'swan', u"''", u',', u'from', u'which', u'we', u'get', u'the', u'Latin', u'phrase', u'rara', u'avis', u',', u'rare', u'bird', u'.'], u'lemmas': [u'other', u'reference', u'in', u'classical', u'literature', u'include', u'the', u'belief', u'that', u'upon', u'death', u'the', u'otherwise', u'silent', u'Mute', u'swan', u'would', u'sing', u'beautifully', u'-', u'hence', u'the', u'phrase', u'swan', u'song', u';', u'as', u'well', u'as', u'Juvenal', u"'s", u'sarcastic', u'reference', u'to', u'a', u'good', u'woman', u'be', u'a', u'``', u'rare', u'bird', u',', u'as', u'rare', u'on', u'earth', u'as', u'a', u'black', u'swan', u"''", u',', u'from', u'which', u'we', u'get', u'the', u'latin', u'phrase', u'rara', u'avi', u',', u'rare', u'bird', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'JJ', u'NN', u'VBP', u'DT', u'NN', u'WDT', u'IN', u'NN', u'DT', u'RB', u'JJ', u'NNP', u'NN', u'MD', u'VB', u'RB', u':', u'RB', u'DT', u'NN', u'NN', u'NN', u':', u'RB', u'RB', u'IN', u'NNP', u'POS', u'JJ', u'NN', u'TO', u'DT', u'JJ', u'NN', u'VBG', u'DT', u'``', u'JJ', u'NN', u',', u'IN', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u"''", u',', u'IN', u'WDT', u'PRP', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'NNS', u',', u'JJ', u'NN', u'.'], u'char_offsets': [[7768, 7773], [7774, 7784], [7785, 7787], [7788, 7797], [7798, 7808], [7809, 7816], [7817, 7820], [7821, 7827], [7828, 7832], [7833, 7837], [7838, 7843], [7844, 7847], [7848, 7857], [7858, 7864], [7865, 7869], [7870, 7874], [7875, 7880], [7881, 7885], [7886, 7897], [7898, 7899], [7900, 7905], [7906, 7909], [7910, 7916], [7917, 7921], [7922, 7926], [7926, 7927], [7928, 7930], [7931, 7935], [7936, 7938], [7939, 7946], [7946, 7948], [7949, 7958], [7959, 7968], [7969, 7971], [7972, 7973], [7974, 7978], [7979, 7984], [7985, 7990], [7991, 7992], [7993, 7994], [7994, 7998], [7999, 8003], [8003, 8004], [8005, 8007], [8008, 8012], [8013, 8015], [8016, 8021], [8022, 8024], [8025, 8026], [8027, 8032], [8033, 8037], [8037, 8038], [8038, 8039], [8040, 8044], [8045, 8050], [8051, 8053], [8054, 8057], [8058, 8061], [8062, 8067], [8068, 8074], [8075, 8079], [8080, 8084], [8084, 8085], [8086, 8090], [8091, 8095], [8095, 8096]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.046304017305374146, {u'tokens': [u'-LRB-', u'Pleistocene', u'of', u'Australia', u'-RRB-', u'The', u'supposed', u'fossil', u'swans', u'``', u'Cygnus', u"''", u'bilinicus', u'and', u'``', u'Cygnus', u"''", u'herrenthalsi', u'were', u',', u'respectively', u',', u'a', u'stork', u'and', u'some', u'large', u'bird', u'of', u'unknown', u'affinity', u'-LRB-', u'due', u'to', u'the', u'bad', u'state', u'of', u'preservation', u'of', u'the', u'referred', u'material', u'-RRB-', u'.'], u'lemmas': [u'-lrb-', u'pleistocene', u'of', u'Australia', u'-rrb-', u'the', u'suppose', u'fossil', u'swan', u'``', u'Cygnus', u"''", u'bilinicus', u'and', u'``', u'Cygnus', u"''", u'herrenthalsus', u'be', u',', u'respectively', u',', u'a', u'stork', u'and', u'some', u'large', u'bird', u'of', u'unknown', u'affinity', u'-lrb-', u'due', u'to', u'the', u'bad', u'state', u'of', u'preservation', u'of', u'the', u'refer', u'material', u'-rrb-', u'.'], u'pos': [u'-LRB-', u'NN', u'IN', u'NNP', u'-RRB-', u'DT', u'VBN', u'NN', u'NNS', u'``', u'NNP', u"''", u'NN', u'CC', u'``', u'NNP', u"''", u'NNS', u'VBD', u',', u'RB', u',', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'-LRB-', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'DT', u'VBN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[5708, 5709], [5709, 5720], [5721, 5723], [5724, 5733], [5733, 5734], [5735, 5738], [5739, 5747], [5748, 5754], [5755, 5760], [5761, 5762], [5762, 5768], [5768, 5769], [5770, 5779], [5780, 5783], [5784, 5785], [5785, 5791], [5791, 5792], [5793, 5805], [5807, 5811], [5811, 5812], [5813, 5825], [5825, 5826], [5827, 5828], [5829, 5834], [5835, 5838], [5839, 5843], [5844, 5849], [5850, 5854], [5855, 5857], [5858, 5865], [5866, 5874], [5875, 5876], [5876, 5879], [5880, 5882], [5883, 5886], [5887, 5890], [5891, 5896], [5897, 5899], [5900, 5912], [5913, 5915], [5916, 5919], [5920, 5928], [5929, 5937], [5937, 5938], [5938, 5939]]}) 
answer: set([u'largest', u'trumpeter'])
['Yes', 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is the Trumpeter Swan the largest bird?
Validity= False
Question Type = NA
Answer Type = NA
Answer = It is the largest bird of North America.
Difficulty = easy

Yes
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('It is the largest bird of North America.') == True
 +  where 'It is the largest bird of North America.' = <src.question_processing.Question_parser instance at 0x7f56b8fa28c0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param165] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2908>, (<src.tfidf.TF_IDF object at 0x7f56bc2d18d0>, set(['swan'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('The Trumpeter Swan is the largest bird of North America') == True
E                +  where 'The Trumpeter Swan is the largest bird of North America' = <src.question_processing.Question_parser instance at 0x7f56b8fa2908>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39336329698562622, {u'tokens': [u'The', u'Trumpeter', u'Swan', u'-LRB-', u'Cygnus', u'buccinator', u'-RRB-', u'is', u'the', u'largest', u'bird', u'of', u'North', u'America', u'The', u'swan', u'is', u'found', u'in', u'the', u'cosmogony', u'of', u'many', u'ancient', u'peoples', u'.'], u'lemmas': [u'the', u'Trumpeter', u'swan', u'-lrb-', u'Cygnus', u'buccinator', u'-rrb-', u'be', u'the', u'largest', u'bird', u'of', u'North', u'America', u'the', u'swan', u'be', u'find', u'in', u'the', u'cosmogony', u'of', u'many', u'ancient', u'people', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'NNP', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[6215, 6218], [6219, 6228], [6229, 6233], [6234, 6235], [6235, 6241], [6242, 6252], [6252, 6253], [6254, 6256], [6257, 6260], [6261, 6268], [6269, 6273], [6274, 6276], [6277, 6282], [6283, 6290], [6291, 6294], [6295, 6299], [6300, 6302], [6303, 6308], [6309, 6311], [6312, 6315], [6316, 6325], [6326, 6328], [6329, 6333], [6334, 6341], [6342, 6349], [6349, 6350]]}) 
answer: set([])
candidate Sentence: (0.29726332426071167, {u'tokens': [u'**', u'Trumpeter', u'Swan', u',', u'Cygnus', u'buccinator', u'is', u'the', u'largest', u'North', u'American', u'bird', u'.'], u'lemmas': [u'**', u'trumpeter', u'swan', u',', u'Cygnus', u'buccinator', u'be', u'the', u'largest', u'north', u'american', u'bird', u'.'], u'pos': [u'SYM', u'NN', u'NN', u',', u'NNP', u'NN', u'VBZ', u'DT', u'JJS', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3798, 3800], [3800, 3809], [3810, 3814], [3814, 3815], [3816, 3822], [3823, 3833], [3834, 3836], [3837, 3840], [3841, 3848], [3849, 3854], [3855, 3863], [3864, 3868], [3868, 3869]]}) 
answer: set([])
candidate Sentence: (0.14418311417102814, {u'tokens': [u'It', u'has', u'been', u'documented', u'-LRB-', u'The', u'Trumpeter', u'Swan', u'Society', u'-RRB-', u'as', u'migrating', u'from', u'Russia', u'onto', u'the', u'American', u'continent', u',', u'as', u'have', u'both', u'Tundra', u'species', u'and', u'the', u'Whooper', u'.'], u'lemmas': [u'it', u'have', u'be', u'document', u'-lrb-', u'the', u'Trumpeter', u'swan', u'Society', u'-rrb-', u'as', u'migrate', u'from', u'Russia', u'onto', u'the', u'american', u'continent', u',', u'as', u'have', u'both', u'Tundra', u'species', u'and', u'the', u'Whooper', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'VBN', u'-LRB-', u'DT', u'NNP', u'NN', u'NNP', u'-RRB-', u'IN', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'VBP', u'DT', u'NNP', u'NNS', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[2807, 2809], [2810, 2813], [2814, 2818], [2819, 2829], [2830, 2831], [2831, 2834], [2835, 2844], [2845, 2849], [2850, 2857], [2857, 2858], [2859, 2861], [2862, 2871], [2872, 2876], [2877, 2883], [2884, 2888], [2889, 2892], [2893, 2901], [2902, 2911], [2911, 2912], [2913, 2915], [2916, 2920], [2921, 2925], [2926, 2932], [2933, 2940], [2941, 2944], [2945, 2948], [2949, 2956], [2956, 2957]]}) 
answer: set([u'bird', u'largest'])
candidate Sentence: (0.093227803707122803, {u'tokens': [u'Swans', u'are', u'birds', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'includes', u'geese', u'and', u'ducks', u'.'], u'lemmas': [u'swan', u'be', u'bird', u'of', u'the', u'family', u'Anatidae', u',', u'which', u'also', u'include', u'goose', u'and', u'duck', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNP', u',', u'WDT', u'RB', u'VBZ', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[0, 5], [6, 9], [10, 15], [16, 18], [19, 22], [23, 29], [30, 38], [38, 39], [40, 45], [46, 50], [51, 59], [60, 65], [66, 69], [70, 75], [75, 76]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.08760342001914978, {u'tokens': [u'Mute', u'Swan', u'-LRB-', u'Cygnus', u'olor', u'-RRB-', u'with', u'nine', u'cygnets', u'*', u'Cygnus', u'csakvarensis', u'-LRB-', u'Late', u'Miocene', u'of', u'Hungary', u'-RRB-', u'-', u'formerly', u'Cygnanser', u'*', u'Cygnus', u'mariae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Wickieup', u',', u'USA', u'-RRB-', u'*', u'Cygnus', u'verae', u'-LRB-', u'Early', u'Pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-RRB-', u'*', u'Cygnus', u'liskunae', u'-LRB-', u'Middle', u'Pliocene', u'of', u'W', u'Mongolia', u'-RRB-', u'*', u'Cygnus', u'hibbardi', u'-LRB-', u'?'], u'lemmas': [u'mute', u'swan', u'-lrb-', u'Cygnus', u'olor', u'-rrb-', u'with', u'nine', u'cygnet', u'*', u'Cygnus', u'csakvarensis', u'-lrb-', u'late', u'miocene', u'of', u'Hungary', u'-rrb-', u'-', u'formerly', u'cygnanser', u'*', u'Cygnus', u'mariae', u'-lrb-', u'early', u'pliocene', u'of', u'Wickieup', u',', u'USA', u'-rrb-', u'*', u'Cygnus', u'verae', u'-lrb-', u'early', u'pliocene', u'of', u'Sofia', u',', u'Bulgaria', u'-rrb-', u'*', u'Cygnus', u'liskuna', u'-lrb-', u'middle', u'pliocene', u'of', u'W', u'Mongolia', u'-rrb-', u'*', u'Cygnus', u'hibbardus', u'-lrb-', u'?'], u'pos': [u'JJ', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'IN', u'CD', u'NNS', u'SYM', u'NNP', u'NN', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u'-RRB-', u':', u'RB', u'NN', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'FW', u'-LRB-', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'-RRB-', u'SYM', u'NNP', u'NN', u'-LRB-', u'.'], u'char_offsets': [[4953, 4957], [4958, 4962], [4963, 4964], [4964, 4970], [4971, 4975], [4975, 4976], [4977, 4981], [4982, 4986], [4987, 4994], [4995, 4996], [4996, 5002], [5003, 5015], [5016, 5017], [5017, 5021], [5022, 5029], [5030, 5032], [5033, 5040], [5040, 5041], [5042, 5043], [5044, 5052], [5053, 5062], [5064, 5065], [5065, 5071], [5072, 5078], [5079, 5080], [5080, 5085], [5086, 5094], [5095, 5097], [5098, 5106], [5106, 5107], [5108, 5111], [5111, 5112], [5114, 5115], [5115, 5121], [5122, 5127], [5128, 5129], [5129, 5134], [5135, 5143], [5144, 5146], [5147, 5152], [5152, 5153], [5154, 5162], [5162, 5163], [5164, 5165], [5165, 5171], [5172, 5180], [5181, 5182], [5182, 5188], [5189, 5197], [5198, 5200], [5201, 5202], [5203, 5211], [5211, 5212], [5213, 5214], [5214, 5220], [5221, 5229], [5230, 5231], [5231, 5232]]}) 
answer: set([u'largest', u'bird', u'trumpeter'])
candidate Sentence: (0.072409950196743011, {u'tokens': [u'Today', u',', u'five', u'flying', u'swans', u'are', u'the', u'symbol', u'of', u'the', u'Nordic', u'Countries', u'and', u'the', u'whooper', u'swan', u'-LRB-', u'Cygnus', u'cygnus', u'-RRB-', u'is', u'the', u'national', u'bird', u'of', u'Finland', u'.'], u'lemmas': [u'today', u',', u'five', u'fly', u'swan', u'be', u'the', u'symbol', u'of', u'the', u'nordic', u'country', u'and', u'the', u'whooper', u'swan', u'-lrb-', u'Cygnus', u'cygnus', u'-rrb-', u'be', u'the', u'national', u'bird', u'of', u'Finland', u'.'], u'pos': [u'NN', u',', u'CD', u'VBG', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'CC', u'DT', u'NN', u'NN', u'-LRB-', u'NNP', u'NN', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[9002, 9007], [9007, 9008], [9009, 9013], [9014, 9020], [9021, 9026], [9027, 9030], [9031, 9034], [9035, 9041], [9042, 9044], [9045, 9048], [9049, 9055], [9056, 9065], [9066, 9069], [9070, 9073], [9074, 9081], [9082, 9086], [9087, 9088], [9088, 9094], [9095, 9101], [9101, 9102], [9103, 9105], [9106, 9109], [9110, 9118], [9119, 9123], [9124, 9126], [9127, 9134], [9134, 9135]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.072299577295780182, {u'tokens': [u'Recent', u'fossil', u'records', u',', u'according', u'to', u'the', u'British', u'Ornithological', u'Union', u',', u'show', u'Cygnus', u'olor', u'is', u'among', u'the', u'oldest', u'bird', u'species', u'still', u'extant', u'and', u'it', u'has', u'been', u'upgraded', u'to', u'``', u'native', u"''", u'species', u'in', u'several', u'European', u'countries', u',', u'since', u'this', u'bird', u'has', u'been', u'found', u'in', u'fossil', u'and', u'bog', u'specimens', u'dating', u'back', u'thousands', u'of', u'years', u'.'], u'lemmas': [u'recent', u'fossil', u'record', u',', u'accord', u'to', u'the', u'british', u'Ornithological', u'Union', u',', u'show', u'Cygnus', u'olor', u'be', u'among', u'the', u'oldest', u'bird', u'species', u'still', u'extant', u'and', u'it', u'have', u'be', u'upgrade', u'to', u'``', u'native', u"''", u'species', u'in', u'several', u'european', u'country', u',', u'since', u'this', u'bird', u'have', u'be', u'find', u'in', u'fossil', u'and', u'bog', u'specimen', u'date', u'back', u'thousand', u'of', u'year', u'.'], u'pos': [u'JJ', u'NN', u'NNS', u',', u'VBG', u'TO', u'DT', u'JJ', u'NNP', u'NNP', u',', u'VBP', u'NNP', u'NN', u'VBZ', u'IN', u'DT', u'JJS', u'NN', u'NNS', u'RB', u'JJ', u'CC', u'PRP', u'VBZ', u'VBN', u'VBN', u'TO', u'``', u'JJ', u"''", u'NNS', u'IN', u'JJ', u'JJ', u'NNS', u',', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'CC', u'NN', u'NNS', u'VBG', u'RB', u'NNS', u'IN', u'NNS', u'.'], u'char_offsets': [[2958, 2964], [2965, 2971], [2972, 2979], [2979, 2980], [2981, 2990], [2991, 2993], [2994, 2997], [2998, 3005], [3006, 3020], [3021, 3026], [3026, 3027], [3028, 3032], [3033, 3039], [3040, 3044], [3045, 3047], [3048, 3053], [3054, 3057], [3058, 3064], [3065, 3069], [3070, 3077], [3078, 3083], [3084, 3090], [3091, 3094], [3095, 3097], [3098, 3101], [3102, 3106], [3107, 3115], [3116, 3118], [3119, 3120], [3120, 3126], [3126, 3127], [3128, 3135], [3136, 3138], [3139, 3146], [3147, 3155], [3156, 3165], [3165, 3166], [3167, 3172], [3173, 3177], [3178, 3182], [3183, 3186], [3187, 3191], [3192, 3197], [3198, 3200], [3201, 3207], [3208, 3211], [3212, 3215], [3216, 3225], [3226, 3232], [3233, 3237], [3238, 3247], [3248, 3250], [3251, 3256], [3256, 3257]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.063692681491374969, {u'tokens': [u'However', u',', u'ornithological', u'checklists', u'clearly', u'classify', u'several', u'species', u'of', u'swans', u'as', u'vagrant', u'birds', u'in', u'India', u'.'], u'lemmas': [u'however', u',', u'ornithological', u'checklist', u'clearly', u'classify', u'several', u'species', u'of', u'swan', u'as', u'vagrant', u'bird', u'in', u'India', u'.'], u'pos': [u'RB', u',', u'JJ', u'NNS', u'RB', u'VB', u'JJ', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[10713, 10720], [10720, 10721], [10722, 10736], [10737, 10747], [10748, 10755], [10756, 10764], [10765, 10772], [10773, 10780], [10781, 10783], [10784, 10789], [10790, 10792], [10793, 10800], [10801, 10806], [10807, 10809], [10810, 10815], [10815, 10816]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.057678982615470886, {u'tokens': [u'Other', u'references', u'in', u'classical', u'literature', u'include', u'the', u'belief', u'that', u'upon', u'death', u'the', u'otherwise', u'silent', u'Mute', u'Swan', u'would', u'sing', u'beautifully', u'-', u'hence', u'the', u'phrase', u'swan', u'song', u';', u'as', u'well', u'as', u'Juvenal', u"'s", u'sarcastic', u'reference', u'to', u'a', u'good', u'woman', u'being', u'a', u'``', u'rare', u'bird', u',', u'as', u'rare', u'on', u'earth', u'as', u'a', u'black', u'swan', u"''", u',', u'from', u'which', u'we', u'get', u'the', u'Latin', u'phrase', u'rara', u'avis', u',', u'rare', u'bird', u'.'], u'lemmas': [u'other', u'reference', u'in', u'classical', u'literature', u'include', u'the', u'belief', u'that', u'upon', u'death', u'the', u'otherwise', u'silent', u'Mute', u'swan', u'would', u'sing', u'beautifully', u'-', u'hence', u'the', u'phrase', u'swan', u'song', u';', u'as', u'well', u'as', u'Juvenal', u"'s", u'sarcastic', u'reference', u'to', u'a', u'good', u'woman', u'be', u'a', u'``', u'rare', u'bird', u',', u'as', u'rare', u'on', u'earth', u'as', u'a', u'black', u'swan', u"''", u',', u'from', u'which', u'we', u'get', u'the', u'latin', u'phrase', u'rara', u'avi', u',', u'rare', u'bird', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'JJ', u'NN', u'VBP', u'DT', u'NN', u'WDT', u'IN', u'NN', u'DT', u'RB', u'JJ', u'NNP', u'NN', u'MD', u'VB', u'RB', u':', u'RB', u'DT', u'NN', u'NN', u'NN', u':', u'RB', u'RB', u'IN', u'NNP', u'POS', u'JJ', u'NN', u'TO', u'DT', u'JJ', u'NN', u'VBG', u'DT', u'``', u'JJ', u'NN', u',', u'IN', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NN', u"''", u',', u'IN', u'WDT', u'PRP', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'NNS', u',', u'JJ', u'NN', u'.'], u'char_offsets': [[7768, 7773], [7774, 7784], [7785, 7787], [7788, 7797], [7798, 7808], [7809, 7816], [7817, 7820], [7821, 7827], [7828, 7832], [7833, 7837], [7838, 7843], [7844, 7847], [7848, 7857], [7858, 7864], [7865, 7869], [7870, 7874], [7875, 7880], [7881, 7885], [7886, 7897], [7898, 7899], [7900, 7905], [7906, 7909], [7910, 7916], [7917, 7921], [7922, 7926], [7926, 7927], [7928, 7930], [7931, 7935], [7936, 7938], [7939, 7946], [7946, 7948], [7949, 7958], [7959, 7968], [7969, 7971], [7972, 7973], [7974, 7978], [7979, 7984], [7985, 7990], [7991, 7992], [7993, 7994], [7994, 7998], [7999, 8003], [8003, 8004], [8005, 8007], [8008, 8012], [8013, 8015], [8016, 8021], [8022, 8024], [8025, 8026], [8027, 8032], [8033, 8037], [8037, 8038], [8038, 8039], [8040, 8044], [8045, 8050], [8051, 8053], [8054, 8057], [8058, 8061], [8062, 8067], [8068, 8074], [8075, 8079], [8080, 8084], [8084, 8085], [8086, 8090], [8091, 8095], [8095, 8096]]}) 
answer: set([u'largest', u'trumpeter'])
candidate Sentence: (0.046304017305374146, {u'tokens': [u'-LRB-', u'Pleistocene', u'of', u'Australia', u'-RRB-', u'The', u'supposed', u'fossil', u'swans', u'``', u'Cygnus', u"''", u'bilinicus', u'and', u'``', u'Cygnus', u"''", u'herrenthalsi', u'were', u',', u'respectively', u',', u'a', u'stork', u'and', u'some', u'large', u'bird', u'of', u'unknown', u'affinity', u'-LRB-', u'due', u'to', u'the', u'bad', u'state', u'of', u'preservation', u'of', u'the', u'referred', u'material', u'-RRB-', u'.'], u'lemmas': [u'-lrb-', u'pleistocene', u'of', u'Australia', u'-rrb-', u'the', u'suppose', u'fossil', u'swan', u'``', u'Cygnus', u"''", u'bilinicus', u'and', u'``', u'Cygnus', u"''", u'herrenthalsus', u'be', u',', u'respectively', u',', u'a', u'stork', u'and', u'some', u'large', u'bird', u'of', u'unknown', u'affinity', u'-lrb-', u'due', u'to', u'the', u'bad', u'state', u'of', u'preservation', u'of', u'the', u'refer', u'material', u'-rrb-', u'.'], u'pos': [u'-LRB-', u'NN', u'IN', u'NNP', u'-RRB-', u'DT', u'VBN', u'NN', u'NNS', u'``', u'NNP', u"''", u'NN', u'CC', u'``', u'NNP', u"''", u'NNS', u'VBD', u',', u'RB', u',', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'-LRB-', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'DT', u'VBN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[5708, 5709], [5709, 5720], [5721, 5723], [5724, 5733], [5733, 5734], [5735, 5738], [5739, 5747], [5748, 5754], [5755, 5760], [5761, 5762], [5762, 5768], [5768, 5769], [5770, 5779], [5780, 5783], [5784, 5785], [5785, 5791], [5791, 5792], [5793, 5805], [5807, 5811], [5811, 5812], [5813, 5825], [5825, 5826], [5827, 5828], [5829, 5834], [5835, 5838], [5839, 5843], [5844, 5849], [5850, 5854], [5855, 5857], [5858, 5865], [5866, 5874], [5875, 5876], [5876, 5879], [5880, 5882], [5883, 5886], [5887, 5890], [5891, 5896], [5897, 5899], [5900, 5912], [5913, 5915], [5916, 5919], [5920, 5928], [5929, 5937], [5937, 5938], [5938, 5939]]}) 
answer: set([u'largest', u'trumpeter'])
['Yes', 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Is the Trumpeter Swan the largest bird?
Validity= False
Question Type = NA
Answer Type = NA
Answer = The Trumpeter Swan is the largest bird of North America
Difficulty = easy

Yes
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert str2bool('The Trumpeter Swan is the largest bird of North America') == True
 +  where 'The Trumpeter Swan is the largest bird of North America' = <src.question_processing.Question_parser instance at 0x7f56b8fa2908>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param177] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2c68>, (<src.tfidf.TF_IDF object at 0x7f56bc0f7910>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes, eventually')
E                +    where 'yes, eventually' = <src.question_processing.Question_parser instance at 0x7f56b8fa2c68>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.35296657681465149, {u'tokens': [u'Anatomy', u'and', u'Diseases', u'of', u'the', u'Shells', u'of', u'Turtles', u'and', u'Tortoises', u'This', u'method', u'is', u'not', u'very', u'accurate', u',', u'partly', u'because', u'growth', u'rate', u'is', u'not', u'constant', u',', u'but', u'also', u'because', u'some', u'of', u'the', u'scutes', u'eventually', u'fall', u'away', u'from', u'the', u'shell', u'.'], u'lemmas': [u'Anatomy', u'and', u'disease', u'of', u'the', u'shell', u'of', u'Turtles', u'and', u'Tortoises', u'this', u'method', u'be', u'not', u'very', u'accurate', u',', u'partly', u'because', u'growth', u'rate', u'be', u'not', u'constant', u',', u'but', u'also', u'because', u'some', u'of', u'the', u'scute', u'eventually', u'fall', u'away', u'from', u'the', u'shell', u'.'], u'pos': [u'NNP', u'CC', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'NNP', u'CC', u'NNP', u'DT', u'NN', u'VBZ', u'RB', u'RB', u'JJ', u',', u'RB', u'IN', u'NN', u'NN', u'VBZ', u'RB', u'JJ', u',', u'CC', u'RB', u'IN', u'DT', u'IN', u'DT', u'NNS', u'RB', u'VB', u'RB', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[8576, 8583], [8584, 8587], [8588, 8596], [8597, 8599], [8600, 8603], [8604, 8610], [8611, 8613], [8614, 8621], [8622, 8625], [8626, 8635], [8638, 8642], [8643, 8649], [8650, 8652], [8653, 8656], [8657, 8661], [8662, 8670], [8670, 8671], [8672, 8678], [8679, 8686], [8687, 8693], [8694, 8698], [8699, 8701], [8702, 8705], [8706, 8714], [8714, 8715], [8716, 8719], [8720, 8724], [8725, 8732], [8733, 8737], [8738, 8740], [8741, 8744], [8745, 8751], [8752, 8762], [8763, 8767], [8768, 8772], [8773, 8777], [8778, 8781], [8782, 8787], [8787, 8788]]}) 
answer: set([])
candidate Sentence: (0.28140300512313843, {u'tokens': [u'Some', u'turtles', u'do', u'not', u'have', u'horny', u'scutes', u'.'], u'lemmas': [u'some', u'turtle', u'do', u'not', u'have', u'horny', u'scute', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[5483, 5487], [5488, 5495], [5496, 5498], [5499, 5502], [5503, 5507], [5508, 5513], [5514, 5520], [5520, 5521]]}) 
answer: set([u'away', u'shell', u'fall'])
candidate Sentence: (0.16298036277294159, {u'tokens': [u'Baby', u'turtle', u'hiding', u'in', u'its', u'shell', u'The', u'color', u'of', u'a', u'turtle', u"'s", u'shell', u'may', u'vary', u'.'], u'lemmas': [u'Baby', u'turtle', u'hiding', u'in', u'its', u'shell', u'the', u'color', u'of', u'a', u'turtle', u"'s", u'shell', u'may', u'vary', u'.'], u'pos': [u'NNP', u'NN', u'NN', u'IN', u'PRP$', u'NN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'MD', u'VB', u'.'], u'char_offsets': [[6810, 6814], [6815, 6821], [6822, 6828], [6829, 6831], [6832, 6835], [6836, 6841], [6842, 6845], [6846, 6851], [6852, 6854], [6855, 6856], [6857, 6863], [6863, 6865], [6866, 6871], [6872, 6875], [6876, 6880], [6880, 6881]]}) 
answer: set([u'away', u'scute', u'fall'])
candidate Sentence: (0.12714861333370209, {u'tokens': [u'Turtles', u'and', u'terrapins', u'do', u'not', u'molt', u'their', u'skins', u'all', u'in', u'one', u'go', u',', u'as', u'snakes', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'pieces', u'.'], u'lemmas': [u'turtle', u'and', u'terrapin', u'do', u'not', u'molt', u'they', u'skin', u'all', u'in', u'one', u'go', u',', u'as', u'snake', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'piece', u'.'], u'pos': [u'NNS', u'CC', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NNS', u'DT', u'IN', u'CD', u'NN', u',', u'IN', u'NNS', u'VBP', u',', u'CC', u'RB', u',', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[7877, 7884], [7885, 7888], [7889, 7898], [7899, 7901], [7902, 7905], [7906, 7910], [7911, 7916], [7917, 7922], [7923, 7926], [7927, 7929], [7930, 7933], [7934, 7936], [7936, 7937], [7938, 7940], [7941, 7947], [7948, 7950], [7950, 7951], [7952, 7955], [7956, 7968], [7968, 7969], [7970, 7972], [7973, 7978], [7979, 7985], [7985, 7986]]}) 
answer: set([u'scute', u'away', u'shell', u'fall'])
candidate Sentence: (0.12123978137969971, {u'tokens': [u'These', u'scutes', u'overlap', u'the', u'seams', u'between', u'the', u'shell', u'bones', u'and', u'add', u'strength', u'to', u'the', u'shell', u'.'], u'lemmas': [u'these', u'scute', u'overlap', u'the', u'seam', u'between', u'the', u'shell', u'bone', u'and', u'add', u'strength', u'to', u'the', u'shell', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'DT', u'NNS', u'IN', u'DT', u'NN', u'NNS', u'CC', u'VB', u'NN', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[5397, 5402], [5403, 5409], [5410, 5417], [5418, 5421], [5422, 5427], [5428, 5435], [5436, 5439], [5440, 5445], [5446, 5451], [5452, 5455], [5456, 5459], [5460, 5468], [5469, 5471], [5472, 5475], [5476, 5481], [5481, 5482]]}) 
answer: set([u'away', u'fall'])
candidate Sentence: (0.11280316859483719, {u'tokens': [u'The', u'inner', u'layer', u'of', u'a', u'turtle', u"'s", u'shell', u'is', u'made', u'up', u'of', u'about', u'60', u'bones', u'that', u'includes', u'portions', u'of', u'the', u'backbone', u'and', u'the', u'ribs', u',', u'meaning', u'the', u'turtle', u'can', u'not', u'crawl', u'out', u'of', u'its', u'shell', u'.'], u'lemmas': [u'the', u'inner', u'layer', u'of', u'a', u'turtle', u"'s", u'shell', u'be', u'make', u'up', u'of', u'about', u'60', u'bone', u'that', u'include', u'portion', u'of', u'the', u'backbone', u'and', u'the', u'rib', u',', u'mean', u'the', u'turtle', u'can', u'not', u'crawl', u'out', u'of', u'its', u'shell', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'VBZ', u'VBN', u'RP', u'IN', u'RB', u'CD', u'NNS', u'WDT', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'CC', u'DT', u'NNS', u',', u'VBG', u'DT', u'NN', u'MD', u'RB', u'VB', u'IN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[4991, 4994], [4995, 5000], [5001, 5006], [5007, 5009], [5010, 5011], [5012, 5018], [5018, 5020], [5021, 5026], [5027, 5029], [5030, 5034], [5035, 5037], [5038, 5040], [5041, 5046], [5047, 5049], [5050, 5055], [5056, 5060], [5061, 5069], [5070, 5078], [5079, 5081], [5082, 5085], [5086, 5094], [5095, 5098], [5099, 5102], [5103, 5107], [5107, 5108], [5109, 5116], [5117, 5120], [5121, 5127], [5128, 5131], [5131, 5134], [5135, 5140], [5141, 5144], [5145, 5147], [5148, 5151], [5152, 5157], [5157, 5158]]}) 
answer: set([u'away', u'scute', u'fall'])
candidate Sentence: (0.10213162750005722, {u'tokens': [u'The', u'shell', u'of', u'a', u'leatherback', u'turtle', u'is', u'extremely', u'light', u'because', u'they', u'lack', u'scutes', u'and', u'contain', u'many', u'fontanelles', u'.'], u'lemmas': [u'the', u'shell', u'of', u'a', u'leatherback', u'turtle', u'be', u'extremely', u'light', u'because', u'they', u'lack', u'scute', u'and', u'contain', u'many', u'fontanelle', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'PRP', u'VBP', u'NNS', u'CC', u'VBP', u'JJ', u'NNS', u'.'], u'char_offsets': [[7511, 7514], [7515, 7520], [7521, 7523], [7524, 7525], [7526, 7537], [7538, 7544], [7545, 7547], [7548, 7557], [7558, 7563], [7564, 7571], [7572, 7576], [7577, 7581], [7582, 7588], [7589, 7592], [7593, 7600], [7601, 7605], [7606, 7617], [7617, 7618]]}) 
answer: set([u'away', u'fall'])
candidate Sentence: (0.098727792501449585, {u'tokens': [u'The', u'carapace', u'and', u'plastron', u'are', u'joined', u'together', u'on', u'the', u'turtle', u"'s", u'sides', u'by', u'bony', u'structures', u'called', u'bridges', u'.'], u'lemmas': [u'the', u'carapace', u'and', u'plastron', u'be', u'join', u'together', u'on', u'the', u'turtle', u"'s", u'side', u'by', u'bony', u'structure', u'call', u'bridge', u'.'], u'pos': [u'DT', u'NN', u'CC', u'NN', u'VBP', u'VBN', u'RB', u'IN', u'DT', u'NN', u'POS', u'NNS', u'IN', u'JJ', u'NNS', u'VBN', u'NNS', u'.'], u'char_offsets': [[4888, 4891], [4892, 4900], [4901, 4904], [4905, 4913], [4914, 4917], [4918, 4924], [4925, 4933], [4934, 4936], [4937, 4940], [4941, 4947], [4947, 4949], [4950, 4955], [4956, 4958], [4959, 4963], [4964, 4974], [4975, 4981], [4982, 4989], [4989, 4990]]}) 
answer: set([u'scute', u'away', u'shell', u'fall'])
candidate Sentence: (0.095366001129150391, {u'tokens': [u'As', u'mentioned', u'above', u',', u'the', u'outer', u'layer', u'of', u'the', u'shell', u'is', u'part', u'of', u'the', u'skin', u',', u'each', u'scute', u'-LRB-', u'or', u'plate', u'-RRB-', u'on', u'the', u'shell', u'corresponding', u'to', u'a', u'single', u'modified', u'scale', u'.'], u'lemmas': [u'as', u'mention', u'above', u',', u'the', u'outer', u'layer', u'of', u'the', u'shell', u'be', u'part', u'of', u'the', u'skin', u',', u'each', u'scute', u'-lrb-', u'or', u'plate', u'-rrb-', u'on', u'the', u'shell', u'correspond', u'to', u'a', u'single', u'modify', u'scale', u'.'], u'pos': [u'IN', u'VBN', u'IN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'NN', u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'-LRB-', u'CC', u'NN', u'-RRB-', u'IN', u'DT', u'NN', u'VBG', u'TO', u'DT', u'JJ', u'VBN', u'NN', u'.'], u'char_offsets': [[7619, 7621], [7622, 7631], [7632, 7637], [7637, 7638], [7639, 7642], [7643, 7648], [7649, 7654], [7655, 7657], [7658, 7661], [7662, 7667], [7668, 7670], [7671, 7675], [7676, 7678], [7679, 7682], [7683, 7687], [7687, 7688], [7689, 7693], [7694, 7699], [7700, 7701], [7701, 7703], [7704, 7709], [7709, 7710], [7711, 7713], [7714, 7717], [7718, 7723], [7724, 7737], [7738, 7740], [7741, 7742], [7743, 7749], [7750, 7758], [7759, 7764], [7764, 7765]]}) 
answer: set([u'away', u'fall'])
candidate Sentence: (0.093191169202327728, {u'tokens': [u'By', u'counting', u'the', u'rings', u'formed', u'by', u'the', u'stack', u'of', u'smaller', u',', u'older', u'scutes', u'on', u'top', u'of', u'the', u'larger', u',', u'newer', u'ones', u',', u'it', u'is', u'possible', u'to', u'estimate', u'the', u'age', u'of', u'a', u'turtle', u',', u'if', u'you', u'know', u'how', u'many', u'scutes', u'are', u'produced', u'in', u'a', u'year', u'.'], u'lemmas': [u'by', u'count', u'the', u'ring', u'form', u'by', u'the', u'stack', u'of', u'smaller', u',', u'older', u'scute', u'on', u'top', u'of', u'the', u'larger', u',', u'newer', u'one', u',', u'it', u'be', u'possible', u'to', u'estimate', u'the', u'age', u'of', u'a', u'turtle', u',', u'if', u'you', u'know', u'how', u'many', u'scute', u'be', u'produce', u'in', u'a', u'year', u'.'], u'pos': [u'IN', u'VBG', u'DT', u'NNS', u'VBN', u'IN', u'DT', u'VBP', u'IN', u'JJR', u',', u'JJR', u'NNS', u'IN', u'NN', u'IN', u'DT', u'JJR', u',', u'JJR', u'NNS', u',', u'PRP', u'VBZ', u'JJ', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'PRP', u'VBP', u'WRB', u'JJ', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[8374, 8376], [8377, 8385], [8386, 8389], [8390, 8395], [8396, 8402], [8403, 8405], [8406, 8409], [8410, 8415], [8416, 8418], [8419, 8426], [8426, 8427], [8428, 8433], [8434, 8440], [8441, 8443], [8444, 8447], [8448, 8450], [8451, 8454], [8455, 8461], [8461, 8462], [8463, 8468], [8469, 8473], [8473, 8474], [8475, 8477], [8478, 8480], [8481, 8489], [8490, 8492], [8493, 8501], [8502, 8505], [8506, 8509], [8510, 8512], [8513, 8514], [8515, 8521], [8521, 8522], [8523, 8525], [8526, 8529], [8530, 8534], [8535, 8538], [8539, 8543], [8544, 8550], [8551, 8554], [8555, 8563], [8564, 8566], [8567, 8568], [8569, 8573], [8573, 8574]]}) 
answer: set([u'away', u'shell', u'fall'])
['No Sure', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do scutes fall away from the turtle's shell?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes, eventually
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes, eventually')
 +    where 'yes, eventually' = <src.question_processing.Question_parser instance at 0x7f56b8fa2c68>.answer
_____________________________ test_yesno[param180] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2d40>, (<src.tfidf.TF_IDF object at 0x7f56bac70410>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2d40>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.34592050313949585, {u'tokens': [u'Turtles', u'are', u'reptiles', u'of', u'the', u'order', u'Testudines', u'-LRB-', u'the', u'crown', u'group', u'of', u'the', u'superorder', u'Chelonia', u'-RRB-', u',', u'most', u'of', u'whose', u'body', u'is', u'shielded', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'developed', u'from', u'their', u'ribs', u'.'], u'lemmas': [u'turtle', u'be', u'reptile', u'of', u'the', u'order', u'testudine', u'-lrb-', u'the', u'crown', u'group', u'of', u'the', u'superorder', u'chelonium', u'-rrb-', u',', u'most', u'of', u'whose', u'body', u'be', u'shield', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'develop', u'from', u'they', u'rib', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'JJS', u'IN', u'WP$', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'VBN', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[0, 7], [8, 11], [12, 20], [21, 23], [24, 27], [28, 33], [34, 44], [45, 46], [46, 49], [50, 55], [56, 61], [62, 64], [65, 68], [69, 79], [80, 88], [88, 89], [89, 90], [91, 95], [96, 98], [99, 104], [105, 109], [110, 112], [113, 121], [122, 124], [125, 126], [127, 134], [135, 139], [140, 142], [143, 156], [157, 162], [163, 172], [173, 177], [178, 183], [184, 188], [188, 189]]}) 
answer: set([u'testudines', u'chelonia'])
candidate Sentence: (0.13100434839725494, {u'tokens': [u'``', u'Turtle', u"''", u'may', u'either', u'refer', u'to', u'the', u'Testudines', u'as', u'a', u'whole', u',', u'or', u'to', u'particular', u'Testudines', u'which', u'make', u'up', u'a', u'form', u'taxon', u'that', u'is', u'not', u'monophyletic', u'see', u'also', u'sea', u'turtle', u',', u'terrapin', u',', u'tortoise', u',', u'and', u'the', u'discussion', u'below', u'.'], u'lemmas': [u'``', u'Turtle', u"''", u'may', u'either', u'refer', u'to', u'the', u'Testudines', u'as', u'a', u'whole', u',', u'or', u'to', u'particular', u'testudine', u'which', u'make', u'up', u'a', u'form', u'taxon', u'that', u'be', u'not', u'monophyletic', u'see', u'also', u'sea', u'turtle', u',', u'terrapin', u',', u'tortoise', u',', u'and', u'the', u'discussion', u'below', u'.'], u'pos': [u'``', u'NNP', u"''", u'MD', u'CC', u'VB', u'TO', u'DT', u'NNPS', u'IN', u'DT', u'JJ', u',', u'CC', u'TO', u'JJ', u'NNS', u'WDT', u'VBP', u'RP', u'DT', u'NN', u'NN', u'WDT', u'VBZ', u'RB', u'JJ', u'VBP', u'RB', u'NN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'.'], u'char_offsets': [[190, 191], [191, 197], [197, 198], [199, 202], [203, 209], [210, 215], [216, 218], [219, 222], [223, 233], [234, 236], [237, 238], [239, 244], [244, 245], [246, 248], [249, 251], [252, 262], [263, 273], [274, 279], [280, 284], [285, 287], [288, 289], [290, 294], [295, 300], [301, 305], [306, 308], [309, 312], [313, 325], [328, 331], [332, 336], [337, 340], [341, 347], [347, 348], [349, 357], [357, 358], [359, 367], [367, 368], [369, 372], [373, 376], [377, 387], [388, 393], [393, 394]]}) 
answer: set([u'group', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.11279606819152832, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[12898, 12901], [12902, 12912], [12913, 12915], [12916, 12919], [12920, 12926], [12927, 12929], [12930, 12933], [12934, 12937], [12938, 12944], [12945, 12948], [12949, 12957], [12958, 12961], [12962, 12965], [12966, 12972], [12973, 12980], [12980, 12981], [12982, 12985], [12986, 12997], [12998, 13007], [13007, 13008], [13009, 13012], [13013, 13017], [13018, 13020], [13021, 13024], [13025, 13035], [13036, 13043], [13043, 13044]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.097813837230205536, {u'tokens': [u'The', u'earliest', u'known', u'turtles', u'date', u'from', u'215', u'million', u'years', u'ago', u',', u'ARCHELON', u'-', u'Enchanted', u'Learning', u'Software', u'making', u'turtles', u'one', u'of', u'the', u'oldest', u'reptile', u'groups', u'and', u'a', u'more', u'ancient', u'group', u'than', u'lizards', u'and', u'snakes', u'.'], u'lemmas': [u'the', u'earliest', u'known', u'turtle', u'date', u'from', u'215', u'million', u'year', u'ago', u',', u'archelon', u'-', u'Enchanted', u'Learning', u'Software', u'make', u'turtle', u'one', u'of', u'the', u'oldest', u'reptile', u'group', u'and', u'a', u'more', u'ancient', u'group', u'than', u'lizard', u'and', u'snake', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NNS', u'NN', u'IN', u'CD', u'CD', u'NNS', u'RB', u',', u'NN', u':', u'NNP', u'NNP', u'NNP', u'VBG', u'NNS', u'CD', u'IN', u'DT', u'JJS', u'NN', u'NNS', u'CC', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[467, 470], [471, 479], [480, 485], [486, 493], [494, 498], [499, 503], [504, 507], [508, 515], [516, 521], [522, 525], [525, 526], [528, 536], [536, 537], [538, 547], [548, 556], [557, 565], [568, 574], [575, 582], [583, 586], [587, 589], [590, 593], [594, 600], [601, 608], [609, 615], [616, 619], [620, 621], [622, 626], [627, 634], [635, 640], [641, 645], [646, 653], [654, 657], [658, 664], [664, 665]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.094049908220767975, {u'tokens': [u'This', u'smaller', u'group', u'consists', u'primarily', u'of', u'various', u'freshwater', u'turtles', u'.'], u'lemmas': [u'this', u'smaller', u'group', u'consist', u'primarily', u'of', u'various', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'JJR', u'NN', u'VBZ', u'RB', u'IN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[13176, 13180], [13181, 13188], [13189, 13194], [13195, 13203], [13204, 13213], [13214, 13216], [13217, 13224], [13225, 13235], [13236, 13243], [13243, 13244]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.089274831116199493, {u'tokens': [u'All', u'but', u'Ageless', u',', u'Turtles', u'Face', u'Their', u'Biggest', u'Threat', u':', u'Humans', u'``', u'Chelonia', u"''", u'-LRB-', u'Testudines', u'-RRB-', u'from', u'Ernst', u'Haeckel', u"'s", u'Kunstformen', u'der', u'Natur', u',', u'1904', u'Turtles', u'are', u'divided', u'into', u'three', u'suborders', u',', u'one', u'of', u'which', u',', u'the', u'Paracryptodira', u',', u'is', u'extinct', u'.'], u'lemmas': [u'all', u'but', u'Ageless', u',', u'Turtles', u'Face', u'they', u'biggest', u'threat', u':', u'human', u'``', u'Chelonia', u"''", u'-lrb-', u'testudine', u'-rrb-', u'from', u'Ernst', u'Haeckel', u"'s", u'Kunstformen', u'der', u'Natur', u',', u'1904', u'turtle', u'be', u'divide', u'into', u'three', u'suborder', u',', u'one', u'of', u'which', u',', u'the', u'Paracryptodira', u',', u'be', u'extinct', u'.'], u'pos': [u'DT', u'CC', u'NNP', u',', u'NNP', u'NNP', u'PRP$', u'JJS', u'NN', u':', u'NNS', u'``', u'NNP', u"''", u'-LRB-', u'NNS', u'-RRB-', u'IN', u'NNP', u'NNP', u'POS', u'NNP', u'FW', u'NNP', u',', u'CD', u'NNS', u'VBP', u'VBN', u'IN', u'CD', u'NNS', u',', u'CD', u'IN', u'WDT', u',', u'DT', u'NNP', u',', u'VBZ', u'JJ', u'.'], u'char_offsets': [[12614, 12617], [12618, 12621], [12622, 12629], [12629, 12630], [12631, 12638], [12639, 12643], [12644, 12649], [12650, 12657], [12658, 12664], [12664, 12665], [12666, 12672], [12673, 12674], [12674, 12682], [12682, 12683], [12684, 12685], [12685, 12695], [12695, 12696], [12697, 12701], [12702, 12707], [12708, 12715], [12715, 12717], [12718, 12729], [12730, 12733], [12734, 12739], [12739, 12740], [12741, 12745], [12746, 12753], [12754, 12757], [12758, 12765], [12766, 12770], [12771, 12776], [12777, 12786], [12786, 12787], [12788, 12791], [12792, 12794], [12795, 12800], [12800, 12801], [12802, 12805], [12806, 12820], [12820, 12821], [12822, 12824], [12825, 12832], [12832, 12833]]}) 
answer: set([u'testudines', u'crown', u'group', u'superorder'])
candidate Sentence: (0.083157822489738464, {u'tokens': [u'The', u'shell', u'length', u'of', u'many', u'species', u'in', u'this', u'group', u'is', u'less', u'than', u'13', u'cm', u'-LRB-', u'5', u'in', u'-RRB-', u'in', u'length', u'.'], u'lemmas': [u'the', u'shell', u'length', u'of', u'many', u'species', u'in', u'this', u'group', u'be', u'less', u'than', u'13', u'cm', u'-lrb-', u'5', u'in', u'-rrb-', u'in', u'length', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'VBZ', u'JJR', u'IN', u'CD', u'NN', u'-LRB-', u'CD', u'IN', u'-RRB-', u'IN', u'NN', u'.'], u'char_offsets': [[2585, 2588], [2589, 2594], [2595, 2601], [2602, 2604], [2605, 2609], [2610, 2617], [2618, 2620], [2621, 2625], [2626, 2631], [2632, 2634], [2635, 2639], [2640, 2644], [2645, 2647], [2648, 2650], [2651, 2652], [2652, 2653], [2654, 2656], [2656, 2657], [2658, 2660], [2661, 2667], [2667, 2668]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.075701795518398285, {u'tokens': [u'*', u'UC', u'Berkeley', u'Museum', u'of', u'Paleontology', u'*', u'Chelonian', u'studbook', u'Collection', u'and', u'display', u'of', u'the', u'weights/sizes', u'of', u'captive', u'turtles', u'*', u'John', u'M.', u'Legler', u'&', u'Arthur', u'Georges', u',', u'Biogeography', u'and', u'Phylogeny', u'of', u'the', u'Chelonia', u'-LRB-', u'taxonomy', u',', u'maps', u'-RRB-', u'*', u'The', u'word', u'`', u'turtle', u"'", u'in', u'many', u'different', u'languages'], u'lemmas': [u'*', u'uc', u'Berkeley', u'Museum', u'of', u'Paleontology', u'*', u'chelonian', u'studbook', u'collection', u'and', u'display', u'of', u'the', u'weights/sizes', u'of', u'captive', u'turtle', u'*', u'John', u'M.', u'Legler', u'&', u'Arthur', u'Georges', u',', u'Biogeography', u'and', u'Phylogeny', u'of', u'the', u'Chelonia', u'-lrb-', u'taxonomy', u',', u'map', u'-rrb-', u'*', u'the', u'word', u'`', u'turtle', u"'", u'in', u'many', u'different', u'language'], u'pos': [u'SYM', u'NN', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'JJ', u'NN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'NNS', u'SYM', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u',', u'NNP', u'CC', u'NNP', u'IN', u'DT', u'NNP', u'-LRB-', u'NN', u',', u'NNS', u'-RRB-', u'SYM', u'DT', u'NN', u'``', u'NN', u"''", u'IN', u'JJ', u'JJ', u'NNS'], u'char_offsets': [[19796, 19797], [19799, 19801], [19802, 19810], [19811, 19817], [19818, 19820], [19821, 19833], [19834, 19835], [19837, 19846], [19847, 19855], [19856, 19866], [19867, 19870], [19871, 19878], [19879, 19881], [19882, 19885], [19886, 19899], [19900, 19902], [19903, 19910], [19911, 19918], [19919, 19920], [19921, 19925], [19926, 19928], [19929, 19935], [19936, 19937], [19938, 19944], [19945, 19952], [19952, 19953], [19955, 19967], [19968, 19971], [19972, 19981], [19982, 19984], [19985, 19988], [19989, 19997], [19998, 19999], [19999, 20007], [20007, 20008], [20009, 20013], [20013, 20014], [20015, 20016], [20018, 20021], [20022, 20026], [20027, 20028], [20028, 20034], [20034, 20035], [20036, 20038], [20039, 20043], [20044, 20053], [20054, 20063]]}) 
answer: set([u'testudines', u'group', u'crown', u'superorder'])
candidate Sentence: (0.070278972387313843, {u'tokens': [u'It', u'was', u'believed', u'that', u'they', u'are', u'the', u'only', u'surviving', u'branch', u'of', u'the', u'ancient', u'clade', u'Anapsida', u',', u'which', u'includes', u'groups', u'such', u'as', u'procolophonids', u',', u'millerettids', u',', u'protorothyrids', u',', u'and', u'pareiasaurs', u'.'], u'lemmas': [u'it', u'be', u'believe', u'that', u'they', u'be', u'the', u'only', u'survive', u'branch', u'of', u'the', u'ancient', u'clade', u'Anapsida', u',', u'which', u'include', u'group', u'such', u'as', u'procolophonid', u',', u'millerettid', u',', u'protorothyrid', u',', u'and', u'pareiasaur', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'PRP', u'VBP', u'DT', u'JJ', u'VBG', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NNP', u',', u'WDT', u'VBZ', u'NNS', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'.'], u'char_offsets': [[14461, 14463], [14464, 14467], [14468, 14476], [14477, 14481], [14482, 14486], [14487, 14490], [14491, 14494], [14495, 14499], [14500, 14509], [14510, 14516], [14517, 14519], [14520, 14523], [14524, 14531], [14532, 14537], [14538, 14546], [14546, 14547], [14548, 14553], [14554, 14562], [14563, 14569], [14570, 14574], [14575, 14577], [14578, 14592], [14592, 14593], [14594, 14606], [14606, 14607], [14608, 14622], [14622, 14623], [14624, 14627], [14628, 14639], [14639, 14640]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.045224573463201523, {u'tokens': [u'Turtles', u'are', u'broken', u'down', u'into', u'two', u'groups', u',', u'according', u'to', u'how', u'they', u'evolved', u'a', u'solution', u'to', u'the', u'problem', u'of', u'withdrawing', u'their', u'neck', u'into', u'their', u'shell', u'-LRB-', u'something', u'the', u'ancestral', u'Proganochelys', u'could', u'not', u'do', u'-RRB-', u':', u'the', u'Cryptodira', u',', u'which', u'can', u'draw', u'their', u'neck', u'in', u'while', u'contracting', u'it', u'under', u'their', u'spine', u';', u'and', u'the', u'Pleurodira', u',', u'which', u'contract', u'their', u'neck', u'to', u'the', u'side', u'.'], u'lemmas': [u'turtle', u'be', u'break', u'down', u'into', u'two', u'group', u',', u'accord', u'to', u'how', u'they', u'evolve', u'a', u'solution', u'to', u'the', u'problem', u'of', u'withdraw', u'they', u'neck', u'into', u'they', u'shell', u'-lrb-', u'something', u'the', u'ancestral', u'Proganochelys', u'could', u'not', u'do', u'-rrb-', u':', u'the', u'Cryptodira', u',', u'which', u'can', u'draw', u'they', u'neck', u'in', u'while', u'contract', u'it', u'under', u'they', u'spine', u';', u'and', u'the', u'Pleurodira', u',', u'which', u'contract', u'they', u'neck', u'to', u'the', u'side', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'RP', u'IN', u'CD', u'NNS', u',', u'VBG', u'TO', u'WRB', u'PRP', u'VBD', u'DT', u'NN', u'TO', u'DT', u'NN', u'IN', u'VBG', u'PRP$', u'NN', u'IN', u'PRP$', u'NN', u'-LRB-', u'NN', u'DT', u'JJ', u'NNP', u'MD', u'RB', u'VB', u'-RRB-', u':', u'DT', u'NNP', u',', u'WDT', u'MD', u'VB', u'PRP$', u'NN', u'IN', u'IN', u'VBG', u'PRP', u'IN', u'PRP$', u'NN', u':', u'CC', u'DT', u'NNP', u',', u'WDT', u'VBP', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[2669, 2676], [2677, 2680], [2681, 2687], [2688, 2692], [2693, 2697], [2698, 2701], [2702, 2708], [2708, 2709], [2710, 2719], [2720, 2722], [2723, 2726], [2727, 2731], [2732, 2739], [2740, 2741], [2742, 2750], [2751, 2753], [2754, 2757], [2758, 2765], [2766, 2768], [2769, 2780], [2781, 2786], [2787, 2791], [2792, 2796], [2797, 2802], [2803, 2808], [2809, 2810], [2810, 2819], [2820, 2823], [2824, 2833], [2834, 2847], [2848, 2853], [2854, 2857], [2858, 2860], [2860, 2861], [2861, 2862], [2863, 2866], [2867, 2877], [2877, 2878], [2879, 2884], [2885, 2888], [2889, 2893], [2894, 2899], [2900, 2904], [2905, 2907], [2908, 2913], [2914, 2925], [2926, 2928], [2929, 2934], [2935, 2940], [2941, 2946], [2946, 2947], [2948, 2951], [2952, 2955], [2956, 2966], [2966, 2967], [2968, 2973], [2974, 2982], [2983, 2988], [2989, 2993], [2994, 2996], [2997, 3000], [3001, 3005], [3005, 3006]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are Testudines the crown group of the superorder Chelonia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2d40>.answer
_____________________________ test_yesno[param181] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2d88>, (<src.tfidf.TF_IDF object at 0x7f56bac70410>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2d88>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.34592050313949585, {u'tokens': [u'Turtles', u'are', u'reptiles', u'of', u'the', u'order', u'Testudines', u'-LRB-', u'the', u'crown', u'group', u'of', u'the', u'superorder', u'Chelonia', u'-RRB-', u',', u'most', u'of', u'whose', u'body', u'is', u'shielded', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'developed', u'from', u'their', u'ribs', u'.'], u'lemmas': [u'turtle', u'be', u'reptile', u'of', u'the', u'order', u'testudine', u'-lrb-', u'the', u'crown', u'group', u'of', u'the', u'superorder', u'chelonium', u'-rrb-', u',', u'most', u'of', u'whose', u'body', u'be', u'shield', u'by', u'a', u'special', u'bony', u'or', u'cartilaginous', u'shell', u'develop', u'from', u'they', u'rib', u'.'], u'pos': [u'NNS', u'VBP', u'NNS', u'IN', u'DT', u'NN', u'NNS', u'-LRB-', u'DT', u'NN', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'JJS', u'IN', u'WP$', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'VBN', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[0, 7], [8, 11], [12, 20], [21, 23], [24, 27], [28, 33], [34, 44], [45, 46], [46, 49], [50, 55], [56, 61], [62, 64], [65, 68], [69, 79], [80, 88], [88, 89], [89, 90], [91, 95], [96, 98], [99, 104], [105, 109], [110, 112], [113, 121], [122, 124], [125, 126], [127, 134], [135, 139], [140, 142], [143, 156], [157, 162], [163, 172], [173, 177], [178, 183], [184, 188], [188, 189]]}) 
answer: set([u'testudines', u'chelonia'])
candidate Sentence: (0.13100434839725494, {u'tokens': [u'``', u'Turtle', u"''", u'may', u'either', u'refer', u'to', u'the', u'Testudines', u'as', u'a', u'whole', u',', u'or', u'to', u'particular', u'Testudines', u'which', u'make', u'up', u'a', u'form', u'taxon', u'that', u'is', u'not', u'monophyletic', u'see', u'also', u'sea', u'turtle', u',', u'terrapin', u',', u'tortoise', u',', u'and', u'the', u'discussion', u'below', u'.'], u'lemmas': [u'``', u'Turtle', u"''", u'may', u'either', u'refer', u'to', u'the', u'Testudines', u'as', u'a', u'whole', u',', u'or', u'to', u'particular', u'testudine', u'which', u'make', u'up', u'a', u'form', u'taxon', u'that', u'be', u'not', u'monophyletic', u'see', u'also', u'sea', u'turtle', u',', u'terrapin', u',', u'tortoise', u',', u'and', u'the', u'discussion', u'below', u'.'], u'pos': [u'``', u'NNP', u"''", u'MD', u'CC', u'VB', u'TO', u'DT', u'NNPS', u'IN', u'DT', u'JJ', u',', u'CC', u'TO', u'JJ', u'NNS', u'WDT', u'VBP', u'RP', u'DT', u'NN', u'NN', u'WDT', u'VBZ', u'RB', u'JJ', u'VBP', u'RB', u'NN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'.'], u'char_offsets': [[190, 191], [191, 197], [197, 198], [199, 202], [203, 209], [210, 215], [216, 218], [219, 222], [223, 233], [234, 236], [237, 238], [239, 244], [244, 245], [246, 248], [249, 251], [252, 262], [263, 273], [274, 279], [280, 284], [285, 287], [288, 289], [290, 294], [295, 300], [301, 305], [306, 308], [309, 312], [313, 325], [328, 331], [332, 336], [337, 340], [341, 347], [347, 348], [349, 357], [357, 358], [359, 367], [367, 368], [369, 372], [373, 376], [377, 387], [388, 393], [393, 394]]}) 
answer: set([u'group', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.11279606819152832, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[12898, 12901], [12902, 12912], [12913, 12915], [12916, 12919], [12920, 12926], [12927, 12929], [12930, 12933], [12934, 12937], [12938, 12944], [12945, 12948], [12949, 12957], [12958, 12961], [12962, 12965], [12966, 12972], [12973, 12980], [12980, 12981], [12982, 12985], [12986, 12997], [12998, 13007], [13007, 13008], [13009, 13012], [13013, 13017], [13018, 13020], [13021, 13024], [13025, 13035], [13036, 13043], [13043, 13044]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.097813837230205536, {u'tokens': [u'The', u'earliest', u'known', u'turtles', u'date', u'from', u'215', u'million', u'years', u'ago', u',', u'ARCHELON', u'-', u'Enchanted', u'Learning', u'Software', u'making', u'turtles', u'one', u'of', u'the', u'oldest', u'reptile', u'groups', u'and', u'a', u'more', u'ancient', u'group', u'than', u'lizards', u'and', u'snakes', u'.'], u'lemmas': [u'the', u'earliest', u'known', u'turtle', u'date', u'from', u'215', u'million', u'year', u'ago', u',', u'archelon', u'-', u'Enchanted', u'Learning', u'Software', u'make', u'turtle', u'one', u'of', u'the', u'oldest', u'reptile', u'group', u'and', u'a', u'more', u'ancient', u'group', u'than', u'lizard', u'and', u'snake', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NNS', u'NN', u'IN', u'CD', u'CD', u'NNS', u'RB', u',', u'NN', u':', u'NNP', u'NNP', u'NNP', u'VBG', u'NNS', u'CD', u'IN', u'DT', u'JJS', u'NN', u'NNS', u'CC', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[467, 470], [471, 479], [480, 485], [486, 493], [494, 498], [499, 503], [504, 507], [508, 515], [516, 521], [522, 525], [525, 526], [528, 536], [536, 537], [538, 547], [548, 556], [557, 565], [568, 574], [575, 582], [583, 586], [587, 589], [590, 593], [594, 600], [601, 608], [609, 615], [616, 619], [620, 621], [622, 626], [627, 634], [635, 640], [641, 645], [646, 653], [654, 657], [658, 664], [664, 665]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.094049908220767975, {u'tokens': [u'This', u'smaller', u'group', u'consists', u'primarily', u'of', u'various', u'freshwater', u'turtles', u'.'], u'lemmas': [u'this', u'smaller', u'group', u'consist', u'primarily', u'of', u'various', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'JJR', u'NN', u'VBZ', u'RB', u'IN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[13176, 13180], [13181, 13188], [13189, 13194], [13195, 13203], [13204, 13213], [13214, 13216], [13217, 13224], [13225, 13235], [13236, 13243], [13243, 13244]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.089274831116199493, {u'tokens': [u'All', u'but', u'Ageless', u',', u'Turtles', u'Face', u'Their', u'Biggest', u'Threat', u':', u'Humans', u'``', u'Chelonia', u"''", u'-LRB-', u'Testudines', u'-RRB-', u'from', u'Ernst', u'Haeckel', u"'s", u'Kunstformen', u'der', u'Natur', u',', u'1904', u'Turtles', u'are', u'divided', u'into', u'three', u'suborders', u',', u'one', u'of', u'which', u',', u'the', u'Paracryptodira', u',', u'is', u'extinct', u'.'], u'lemmas': [u'all', u'but', u'Ageless', u',', u'Turtles', u'Face', u'they', u'biggest', u'threat', u':', u'human', u'``', u'Chelonia', u"''", u'-lrb-', u'testudine', u'-rrb-', u'from', u'Ernst', u'Haeckel', u"'s", u'Kunstformen', u'der', u'Natur', u',', u'1904', u'turtle', u'be', u'divide', u'into', u'three', u'suborder', u',', u'one', u'of', u'which', u',', u'the', u'Paracryptodira', u',', u'be', u'extinct', u'.'], u'pos': [u'DT', u'CC', u'NNP', u',', u'NNP', u'NNP', u'PRP$', u'JJS', u'NN', u':', u'NNS', u'``', u'NNP', u"''", u'-LRB-', u'NNS', u'-RRB-', u'IN', u'NNP', u'NNP', u'POS', u'NNP', u'FW', u'NNP', u',', u'CD', u'NNS', u'VBP', u'VBN', u'IN', u'CD', u'NNS', u',', u'CD', u'IN', u'WDT', u',', u'DT', u'NNP', u',', u'VBZ', u'JJ', u'.'], u'char_offsets': [[12614, 12617], [12618, 12621], [12622, 12629], [12629, 12630], [12631, 12638], [12639, 12643], [12644, 12649], [12650, 12657], [12658, 12664], [12664, 12665], [12666, 12672], [12673, 12674], [12674, 12682], [12682, 12683], [12684, 12685], [12685, 12695], [12695, 12696], [12697, 12701], [12702, 12707], [12708, 12715], [12715, 12717], [12718, 12729], [12730, 12733], [12734, 12739], [12739, 12740], [12741, 12745], [12746, 12753], [12754, 12757], [12758, 12765], [12766, 12770], [12771, 12776], [12777, 12786], [12786, 12787], [12788, 12791], [12792, 12794], [12795, 12800], [12800, 12801], [12802, 12805], [12806, 12820], [12820, 12821], [12822, 12824], [12825, 12832], [12832, 12833]]}) 
answer: set([u'testudines', u'crown', u'group', u'superorder'])
candidate Sentence: (0.083157822489738464, {u'tokens': [u'The', u'shell', u'length', u'of', u'many', u'species', u'in', u'this', u'group', u'is', u'less', u'than', u'13', u'cm', u'-LRB-', u'5', u'in', u'-RRB-', u'in', u'length', u'.'], u'lemmas': [u'the', u'shell', u'length', u'of', u'many', u'species', u'in', u'this', u'group', u'be', u'less', u'than', u'13', u'cm', u'-lrb-', u'5', u'in', u'-rrb-', u'in', u'length', u'.'], u'pos': [u'DT', u'NN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'VBZ', u'JJR', u'IN', u'CD', u'NN', u'-LRB-', u'CD', u'IN', u'-RRB-', u'IN', u'NN', u'.'], u'char_offsets': [[2585, 2588], [2589, 2594], [2595, 2601], [2602, 2604], [2605, 2609], [2610, 2617], [2618, 2620], [2621, 2625], [2626, 2631], [2632, 2634], [2635, 2639], [2640, 2644], [2645, 2647], [2648, 2650], [2651, 2652], [2652, 2653], [2654, 2656], [2656, 2657], [2658, 2660], [2661, 2667], [2667, 2668]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.075701795518398285, {u'tokens': [u'*', u'UC', u'Berkeley', u'Museum', u'of', u'Paleontology', u'*', u'Chelonian', u'studbook', u'Collection', u'and', u'display', u'of', u'the', u'weights/sizes', u'of', u'captive', u'turtles', u'*', u'John', u'M.', u'Legler', u'&', u'Arthur', u'Georges', u',', u'Biogeography', u'and', u'Phylogeny', u'of', u'the', u'Chelonia', u'-LRB-', u'taxonomy', u',', u'maps', u'-RRB-', u'*', u'The', u'word', u'`', u'turtle', u"'", u'in', u'many', u'different', u'languages'], u'lemmas': [u'*', u'uc', u'Berkeley', u'Museum', u'of', u'Paleontology', u'*', u'chelonian', u'studbook', u'collection', u'and', u'display', u'of', u'the', u'weights/sizes', u'of', u'captive', u'turtle', u'*', u'John', u'M.', u'Legler', u'&', u'Arthur', u'Georges', u',', u'Biogeography', u'and', u'Phylogeny', u'of', u'the', u'Chelonia', u'-lrb-', u'taxonomy', u',', u'map', u'-rrb-', u'*', u'the', u'word', u'`', u'turtle', u"'", u'in', u'many', u'different', u'language'], u'pos': [u'SYM', u'NN', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'JJ', u'NN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'NNS', u'SYM', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u',', u'NNP', u'CC', u'NNP', u'IN', u'DT', u'NNP', u'-LRB-', u'NN', u',', u'NNS', u'-RRB-', u'SYM', u'DT', u'NN', u'``', u'NN', u"''", u'IN', u'JJ', u'JJ', u'NNS'], u'char_offsets': [[19796, 19797], [19799, 19801], [19802, 19810], [19811, 19817], [19818, 19820], [19821, 19833], [19834, 19835], [19837, 19846], [19847, 19855], [19856, 19866], [19867, 19870], [19871, 19878], [19879, 19881], [19882, 19885], [19886, 19899], [19900, 19902], [19903, 19910], [19911, 19918], [19919, 19920], [19921, 19925], [19926, 19928], [19929, 19935], [19936, 19937], [19938, 19944], [19945, 19952], [19952, 19953], [19955, 19967], [19968, 19971], [19972, 19981], [19982, 19984], [19985, 19988], [19989, 19997], [19998, 19999], [19999, 20007], [20007, 20008], [20009, 20013], [20013, 20014], [20015, 20016], [20018, 20021], [20022, 20026], [20027, 20028], [20028, 20034], [20034, 20035], [20036, 20038], [20039, 20043], [20044, 20053], [20054, 20063]]}) 
answer: set([u'testudines', u'group', u'crown', u'superorder'])
candidate Sentence: (0.070278972387313843, {u'tokens': [u'It', u'was', u'believed', u'that', u'they', u'are', u'the', u'only', u'surviving', u'branch', u'of', u'the', u'ancient', u'clade', u'Anapsida', u',', u'which', u'includes', u'groups', u'such', u'as', u'procolophonids', u',', u'millerettids', u',', u'protorothyrids', u',', u'and', u'pareiasaurs', u'.'], u'lemmas': [u'it', u'be', u'believe', u'that', u'they', u'be', u'the', u'only', u'survive', u'branch', u'of', u'the', u'ancient', u'clade', u'Anapsida', u',', u'which', u'include', u'group', u'such', u'as', u'procolophonid', u',', u'millerettid', u',', u'protorothyrid', u',', u'and', u'pareiasaur', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'PRP', u'VBP', u'DT', u'JJ', u'VBG', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NNP', u',', u'WDT', u'VBZ', u'NNS', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'.'], u'char_offsets': [[14461, 14463], [14464, 14467], [14468, 14476], [14477, 14481], [14482, 14486], [14487, 14490], [14491, 14494], [14495, 14499], [14500, 14509], [14510, 14516], [14517, 14519], [14520, 14523], [14524, 14531], [14532, 14537], [14538, 14546], [14546, 14547], [14548, 14553], [14554, 14562], [14563, 14569], [14570, 14574], [14575, 14577], [14578, 14592], [14592, 14593], [14594, 14606], [14606, 14607], [14608, 14622], [14622, 14623], [14624, 14627], [14628, 14639], [14639, 14640]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
candidate Sentence: (0.045224573463201523, {u'tokens': [u'Turtles', u'are', u'broken', u'down', u'into', u'two', u'groups', u',', u'according', u'to', u'how', u'they', u'evolved', u'a', u'solution', u'to', u'the', u'problem', u'of', u'withdrawing', u'their', u'neck', u'into', u'their', u'shell', u'-LRB-', u'something', u'the', u'ancestral', u'Proganochelys', u'could', u'not', u'do', u'-RRB-', u':', u'the', u'Cryptodira', u',', u'which', u'can', u'draw', u'their', u'neck', u'in', u'while', u'contracting', u'it', u'under', u'their', u'spine', u';', u'and', u'the', u'Pleurodira', u',', u'which', u'contract', u'their', u'neck', u'to', u'the', u'side', u'.'], u'lemmas': [u'turtle', u'be', u'break', u'down', u'into', u'two', u'group', u',', u'accord', u'to', u'how', u'they', u'evolve', u'a', u'solution', u'to', u'the', u'problem', u'of', u'withdraw', u'they', u'neck', u'into', u'they', u'shell', u'-lrb-', u'something', u'the', u'ancestral', u'Proganochelys', u'could', u'not', u'do', u'-rrb-', u':', u'the', u'Cryptodira', u',', u'which', u'can', u'draw', u'they', u'neck', u'in', u'while', u'contract', u'it', u'under', u'they', u'spine', u';', u'and', u'the', u'Pleurodira', u',', u'which', u'contract', u'they', u'neck', u'to', u'the', u'side', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'RP', u'IN', u'CD', u'NNS', u',', u'VBG', u'TO', u'WRB', u'PRP', u'VBD', u'DT', u'NN', u'TO', u'DT', u'NN', u'IN', u'VBG', u'PRP$', u'NN', u'IN', u'PRP$', u'NN', u'-LRB-', u'NN', u'DT', u'JJ', u'NNP', u'MD', u'RB', u'VB', u'-RRB-', u':', u'DT', u'NNP', u',', u'WDT', u'MD', u'VB', u'PRP$', u'NN', u'IN', u'IN', u'VBG', u'PRP', u'IN', u'PRP$', u'NN', u':', u'CC', u'DT', u'NNP', u',', u'WDT', u'VBP', u'PRP$', u'NN', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[2669, 2676], [2677, 2680], [2681, 2687], [2688, 2692], [2693, 2697], [2698, 2701], [2702, 2708], [2708, 2709], [2710, 2719], [2720, 2722], [2723, 2726], [2727, 2731], [2732, 2739], [2740, 2741], [2742, 2750], [2751, 2753], [2754, 2757], [2758, 2765], [2766, 2768], [2769, 2780], [2781, 2786], [2787, 2791], [2792, 2796], [2797, 2802], [2803, 2808], [2809, 2810], [2810, 2819], [2820, 2823], [2824, 2833], [2834, 2847], [2848, 2853], [2854, 2857], [2858, 2860], [2860, 2861], [2861, 2862], [2863, 2866], [2867, 2877], [2877, 2878], [2879, 2884], [2885, 2888], [2889, 2893], [2894, 2899], [2900, 2904], [2905, 2907], [2908, 2913], [2914, 2925], [2926, 2928], [2929, 2934], [2935, 2940], [2941, 2946], [2946, 2947], [2948, 2951], [2952, 2955], [2956, 2966], [2966, 2967], [2968, 2973], [2974, 2982], [2983, 2988], [2989, 2993], [2994, 2996], [2997, 3000], [3001, 3005], [3005, 3006]]}) 
answer: set([u'testudines', u'crown', u'superorder', u'chelonia'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are Testudines the crown group of the superorder Chelonia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2d88>.answer
_____________________________ test_yesno[param182] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2dd0>, (<src.tfidf.TF_IDF object at 0x7f56bac70410>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2dd0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.3584199845790863, {u'tokens': [u'Like', u'other', u'amniotes', u'-LRB-', u'reptiles', u',', u'dinosaurs', u',', u'birds', u',', u'and', u'mammals', u'-RRB-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'eggs', u'underwater', u',', u'although', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'lemmas': [u'like', u'other', u'amniote', u'-lrb-', u'reptile', u',', u'dinosaur', u',', u'bird', u',', u'and', u'mammal', u'-rrb-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'egg', u'underwater', u',', u'although', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'-LRB-', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'-RRB-', u',', u'PRP', u'VBP', u'NN', u'CC', u'VBP', u'RB', u'VB', u'NNS', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBP', u'IN', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[883, 887], [888, 893], [894, 902], [903, 904], [904, 912], [912, 913], [914, 923], [923, 924], [925, 930], [930, 931], [932, 935], [936, 943], [943, 944], [944, 945], [946, 950], [951, 958], [959, 962], [963, 966], [967, 969], [970, 973], [974, 977], [978, 982], [983, 993], [993, 994], [995, 1003], [1004, 1008], [1009, 1016], [1017, 1021], [1022, 1024], [1025, 1027], [1028, 1034], [1035, 1040], [1040, 1041]]}) 
answer: set([])
candidate Sentence: (0.32741430401802063, {u'tokens': [u'Instead', u',', u'turtles', u'breathe', u'in', u'two', u'ways', u'.'], u'lemmas': [u'instead', u',', u'turtle', u'breathe', u'in', u'two', u'way', u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'IN', u'CD', u'NNS', u'.'], u'char_offsets': [[5800, 5807], [5807, 5808], [5809, 5816], [5817, 5824], [5825, 5827], [5828, 5831], [5832, 5836], [5836, 5837]]}) 
answer: set([u'air'])
candidate Sentence: (0.26641228795051575, {u'tokens': [u'Although', u'many', u'turtles', u'spend', u'large', u'amounts', u'of', u'their', u'lives', u'underwater', u',', u'all', u'turtles', u'and', u'tortoises', u'breathe', u'air', u',', u'and', u'must', u'surface', u'at', u'regular', u'intervals', u'to', u'refill', u'their', u'lungs', u'.'], u'lemmas': [u'although', u'many', u'turtle', u'spend', u'large', u'amount', u'of', u'they', u'life', u'underwater', u',', u'all', u'turtle', u'and', u'tortoise', u'breathe', u'air', u',', u'and', u'must', u'surface', u'at', u'regular', u'interval', u'to', u'refill', u'they', u'lung', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u'IN', u'PRP$', u'NNS', u'JJ', u',', u'DT', u'NNS', u'CC', u'NNS', u'VBP', u'NN', u',', u'CC', u'MD', u'VB', u'IN', u'JJ', u'NNS', u'TO', u'VB', u'PRP$', u'NNS', u'.'], u'char_offsets': [[10600, 10608], [10609, 10613], [10614, 10621], [10622, 10627], [10628, 10633], [10634, 10641], [10642, 10644], [10645, 10650], [10651, 10656], [10657, 10667], [10667, 10668], [10669, 10672], [10673, 10680], [10681, 10684], [10685, 10694], [10695, 10702], [10703, 10706], [10706, 10707], [10708, 10711], [10712, 10716], [10717, 10724], [10725, 10727], [10728, 10735], [10736, 10745], [10746, 10748], [10749, 10755], [10756, 10761], [10762, 10767], [10767, 10768]]}) 
answer: set([])
candidate Sentence: (0.22588974237442017, {u'tokens': [u'The', u'rigid', u'shell', u'means', u'that', u'turtles', u'can', u'not', u'breathe', u'as', u'other', u'reptiles', u'do', u',', u'by', u'changing', u'the', u'volume', u'of', u'their', u'chest', u'cavity', u'via', u'expansion', u'and', u'contraction', u'of', u'the', u'ribs', u'.'], u'lemmas': [u'the', u'rigid', u'shell', u'mean', u'that', u'turtle', u'can', u'not', u'breathe', u'as', u'other', u'reptile', u'do', u',', u'by', u'change', u'the', u'volume', u'of', u'they', u'chest', u'cavity', u'via', u'expansion', u'and', u'contraction', u'of', u'the', u'rib', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'NNS', u'MD', u'RB', u'VB', u'IN', u'JJ', u'NNS', u'VBP', u',', u'IN', u'VBG', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'IN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[5639, 5642], [5643, 5648], [5649, 5654], [5655, 5660], [5661, 5665], [5666, 5673], [5674, 5677], [5677, 5680], [5681, 5688], [5689, 5691], [5692, 5697], [5698, 5706], [5707, 5709], [5709, 5710], [5711, 5713], [5714, 5722], [5723, 5726], [5727, 5733], [5734, 5736], [5737, 5742], [5743, 5748], [5749, 5755], [5756, 5759], [5760, 5769], [5770, 5773], [5774, 5785], [5786, 5788], [5789, 5792], [5793, 5797], [5797, 5798]]}) 
answer: set([u'air'])
candidate Sentence: (0.22463080286979675, {u'tokens': [u'Some', u'turtles', u'do', u'not', u'have', u'horny', u'scutes', u'.'], u'lemmas': [u'some', u'turtle', u'do', u'not', u'have', u'horny', u'scute', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[5483, 5487], [5488, 5495], [5496, 5498], [5499, 5502], [5503, 5507], [5508, 5513], [5514, 5520], [5520, 5521]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.19932174682617188, {u'tokens': [u'Turtles', u'and', u'terrapins', u'do', u'not', u'molt', u'their', u'skins', u'all', u'in', u'one', u'go', u',', u'as', u'snakes', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'pieces', u'.'], u'lemmas': [u'turtle', u'and', u'terrapin', u'do', u'not', u'molt', u'they', u'skin', u'all', u'in', u'one', u'go', u',', u'as', u'snake', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'piece', u'.'], u'pos': [u'NNS', u'CC', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NNS', u'DT', u'IN', u'CD', u'NN', u',', u'IN', u'NNS', u'VBP', u',', u'CC', u'RB', u',', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[7877, 7884], [7885, 7888], [7889, 7898], [7899, 7901], [7902, 7905], [7906, 7910], [7911, 7916], [7917, 7922], [7923, 7926], [7927, 7929], [7930, 7933], [7934, 7936], [7936, 7937], [7938, 7940], [7941, 7947], [7948, 7950], [7950, 7951], [7952, 7955], [7956, 7968], [7968, 7969], [7970, 7972], [7973, 7978], [7979, 7985], [7985, 7986]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.11999524384737015, {u'tokens': [u'First', u',', u'they', u'employ', u'buccal', u'pumping', u',', u'pulling', u'air', u'into', u'their', u'mouth', u'then', u'pushing', u'it', u'into', u'the', u'lungs', u'via', u'oscillations', u'of', u'the', u'floor', u'of', u'the', u'throat', u'.'], u'lemmas': [u'first', u',', u'they', u'employ', u'buccal', u'pump', u',', u'pull', u'air', u'into', u'they', u'mouth', u'then', u'push', u'it', u'into', u'the', u'lung', u'via', u'oscillation', u'of', u'the', u'floor', u'of', u'the', u'throat', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'JJ', u'VBG', u',', u'VBG', u'NN', u'IN', u'PRP$', u'NN', u'RB', u'VBG', u'PRP', u'IN', u'DT', u'NNS', u'IN', u'NNS', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5839, 5844], [5844, 5845], [5846, 5850], [5851, 5857], [5858, 5864], [5865, 5872], [5872, 5873], [5874, 5881], [5882, 5885], [5886, 5890], [5891, 5896], [5897, 5902], [5903, 5907], [5908, 5915], [5916, 5918], [5919, 5923], [5924, 5927], [5928, 5933], [5934, 5937], [5938, 5950], [5951, 5953], [5954, 5957], [5958, 5963], [5964, 5966], [5967, 5970], [5971, 5977], [5977, 5978]]}) 
answer: set([u'breathe'])
candidate Sentence: (0.098454743623733521, {u'tokens': [u'Secondly', u',', u'by', u'contracting', u'the', u'abdominal', u'muscles', u'that', u'cover', u'the', u'posterior', u'opening', u'of', u'the', u'shell', u',', u'the', u'internal', u'volume', u'of', u'the', u'shell', u'increases', u',', u'drawing', u'air', u'into', u'the', u'lungs', u',', u'allowing', u'these', u'muscles', u'to', u'function', u'in', u'much', u'the', u'same', u'way', u'as', u'the', u'mammalian', u'diaphragm', u'.'], u'lemmas': [u'secondly', u',', u'by', u'contract', u'the', u'abdominal', u'muscle', u'that', u'cover', u'the', u'posterior', u'opening', u'of', u'the', u'shell', u',', u'the', u'internal', u'volume', u'of', u'the', u'shell', u'increase', u',', u'draw', u'air', u'into', u'the', u'lung', u',', u'allow', u'these', u'muscle', u'to', u'function', u'in', u'much', u'the', u'same', u'way', u'as', u'the', u'mammalian', u'diaphragm', u'.'], u'pos': [u'RB', u',', u'IN', u'VBG', u'DT', u'JJ', u'NNS', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u',', u'VBG', u'NN', u'IN', u'DT', u'NNS', u',', u'VBG', u'DT', u'NNS', u'TO', u'VB', u'IN', u'JJ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[5980, 5988], [5988, 5989], [5990, 5992], [5993, 6004], [6005, 6008], [6009, 6018], [6019, 6026], [6027, 6031], [6032, 6037], [6038, 6041], [6042, 6051], [6052, 6059], [6060, 6062], [6063, 6066], [6067, 6072], [6072, 6073], [6074, 6077], [6078, 6086], [6087, 6093], [6094, 6096], [6097, 6100], [6101, 6106], [6107, 6116], [6116, 6117], [6118, 6125], [6126, 6129], [6130, 6134], [6135, 6138], [6139, 6144], [6144, 6145], [6146, 6154], [6155, 6160], [6161, 6168], [6169, 6171], [6172, 6180], [6181, 6183], [6184, 6188], [6189, 6192], [6193, 6197], [6198, 6201], [6202, 6204], [6205, 6208], [6209, 6218], [6219, 6228], [6228, 6229]]}) 
answer: set([u'breathe'])
candidate Sentence: (0.089000426232814789, {u'tokens': [u'Researchers', u'have', u'recently', u'discovered', u'a', u'turtles', u'organs', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animals', u'.'], u'lemmas': [u'researcher', u'have', u'recently', u'discover', u'a', u'turtle', u'organ', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animal', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'DT', u'NNS', u'NNS', u'VBP', u'RB', u'RB', u'VB', u'RP', u'CC', u'VB', u'RBR', u'JJ', u'IN', u'NN', u',', u'IN', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[12228, 12239], [12240, 12244], [12245, 12253], [12254, 12264], [12265, 12266], [12267, 12274], [12275, 12281], [12282, 12284], [12285, 12288], [12289, 12298], [12299, 12304], [12305, 12309], [12310, 12312], [12313, 12319], [12320, 12324], [12325, 12334], [12335, 12339], [12340, 12344], [12344, 12345], [12346, 12352], [12353, 12357], [12358, 12363], [12364, 12371], [12371, 12372]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.064094394445419312, {u'tokens': [u'Reanalysis', u'of', u'prior', u'phylogenies', u'suggests', u'that', u'they', u'classified', u'turtles', u'as', u'anapsids', u'both', u'because', u'they', u'assumed', u'this', u'classification', u'-LRB-', u'most', u'of', u'them', u'studying', u'what', u'sort', u'of', u'anapsid', u'turtles', u'are', u'-RRB-', u'and', u'because', u'they', u'did', u'not', u'sample', u'fossil', u'and', u'extant', u'taxa', u'broadly', u'enough', u'for', u'constructing', u'the', u'cladogram', u'.'], u'lemmas': [u'reanalysis', u'of', u'prior', u'phylogeny', u'suggest', u'that', u'they', u'classify', u'turtle', u'as', u'anapsid', u'both', u'because', u'they', u'assume', u'this', u'classification', u'-lrb-', u'most', u'of', u'they', u'study', u'what', u'sort', u'of', u'anapsid', u'turtle', u'be', u'-rrb-', u'and', u'because', u'they', u'do', u'not', u'sample', u'fossil', u'and', u'extant', u'taxa', u'broadly', u'enough', u'for', u'construct', u'the', u'cladogram', u'.'], u'pos': [u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'NNS', u'CC', u'IN', u'PRP', u'VBD', u'DT', u'NN', u'-LRB-', u'JJS', u'IN', u'PRP', u'VBG', u'WP', u'NN', u'IN', u'JJ', u'NNS', u'VBP', u'-RRB-', u'CC', u'IN', u'PRP', u'VBD', u'RB', u'NN', u'NN', u'CC', u'JJ', u'NN', u'RB', u'RB', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[15702, 15712], [15713, 15715], [15716, 15721], [15722, 15733], [15734, 15742], [15743, 15747], [15748, 15752], [15753, 15763], [15764, 15771], [15772, 15774], [15775, 15783], [15784, 15788], [15789, 15796], [15797, 15801], [15802, 15809], [15810, 15814], [15815, 15829], [15830, 15831], [15831, 15835], [15836, 15838], [15839, 15843], [15844, 15852], [15853, 15857], [15858, 15862], [15863, 15865], [15866, 15873], [15874, 15881], [15882, 15885], [15885, 15886], [15887, 15890], [15891, 15898], [15899, 15903], [15904, 15907], [15908, 15911], [15912, 15918], [15919, 15925], [15926, 15929], [15930, 15936], [15937, 15941], [15942, 15949], [15950, 15956], [15957, 15960], [15961, 15973], [15974, 15977], [15978, 15987], [15987, 15988]]}) 
answer: set([u'breathe', u'air'])
['No Sure', 'No', 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do turtles breathe air?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2dd0>.answer
_____________________________ test_yesno[param183] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2e18>, (<src.tfidf.TF_IDF object at 0x7f56bac70410>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2e18>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.3584199845790863, {u'tokens': [u'Like', u'other', u'amniotes', u'-LRB-', u'reptiles', u',', u'dinosaurs', u',', u'birds', u',', u'and', u'mammals', u'-RRB-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'eggs', u'underwater', u',', u'although', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'lemmas': [u'like', u'other', u'amniote', u'-lrb-', u'reptile', u',', u'dinosaur', u',', u'bird', u',', u'and', u'mammal', u'-rrb-', u',', u'they', u'breathe', u'air', u'and', u'do', u'not', u'lay', u'egg', u'underwater', u',', u'although', u'many', u'species', u'live', u'in', u'or', u'around', u'water', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'-LRB-', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'-RRB-', u',', u'PRP', u'VBP', u'NN', u'CC', u'VBP', u'RB', u'VB', u'NNS', u'JJ', u',', u'IN', u'JJ', u'NNS', u'VBP', u'IN', u'CC', u'IN', u'NN', u'.'], u'char_offsets': [[883, 887], [888, 893], [894, 902], [903, 904], [904, 912], [912, 913], [914, 923], [923, 924], [925, 930], [930, 931], [932, 935], [936, 943], [943, 944], [944, 945], [946, 950], [951, 958], [959, 962], [963, 966], [967, 969], [970, 973], [974, 977], [978, 982], [983, 993], [993, 994], [995, 1003], [1004, 1008], [1009, 1016], [1017, 1021], [1022, 1024], [1025, 1027], [1028, 1034], [1035, 1040], [1040, 1041]]}) 
answer: set([])
candidate Sentence: (0.32741430401802063, {u'tokens': [u'Instead', u',', u'turtles', u'breathe', u'in', u'two', u'ways', u'.'], u'lemmas': [u'instead', u',', u'turtle', u'breathe', u'in', u'two', u'way', u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'IN', u'CD', u'NNS', u'.'], u'char_offsets': [[5800, 5807], [5807, 5808], [5809, 5816], [5817, 5824], [5825, 5827], [5828, 5831], [5832, 5836], [5836, 5837]]}) 
answer: set([u'air'])
candidate Sentence: (0.26641228795051575, {u'tokens': [u'Although', u'many', u'turtles', u'spend', u'large', u'amounts', u'of', u'their', u'lives', u'underwater', u',', u'all', u'turtles', u'and', u'tortoises', u'breathe', u'air', u',', u'and', u'must', u'surface', u'at', u'regular', u'intervals', u'to', u'refill', u'their', u'lungs', u'.'], u'lemmas': [u'although', u'many', u'turtle', u'spend', u'large', u'amount', u'of', u'they', u'life', u'underwater', u',', u'all', u'turtle', u'and', u'tortoise', u'breathe', u'air', u',', u'and', u'must', u'surface', u'at', u'regular', u'interval', u'to', u'refill', u'they', u'lung', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'VBP', u'JJ', u'NNS', u'IN', u'PRP$', u'NNS', u'JJ', u',', u'DT', u'NNS', u'CC', u'NNS', u'VBP', u'NN', u',', u'CC', u'MD', u'VB', u'IN', u'JJ', u'NNS', u'TO', u'VB', u'PRP$', u'NNS', u'.'], u'char_offsets': [[10600, 10608], [10609, 10613], [10614, 10621], [10622, 10627], [10628, 10633], [10634, 10641], [10642, 10644], [10645, 10650], [10651, 10656], [10657, 10667], [10667, 10668], [10669, 10672], [10673, 10680], [10681, 10684], [10685, 10694], [10695, 10702], [10703, 10706], [10706, 10707], [10708, 10711], [10712, 10716], [10717, 10724], [10725, 10727], [10728, 10735], [10736, 10745], [10746, 10748], [10749, 10755], [10756, 10761], [10762, 10767], [10767, 10768]]}) 
answer: set([])
candidate Sentence: (0.22588974237442017, {u'tokens': [u'The', u'rigid', u'shell', u'means', u'that', u'turtles', u'can', u'not', u'breathe', u'as', u'other', u'reptiles', u'do', u',', u'by', u'changing', u'the', u'volume', u'of', u'their', u'chest', u'cavity', u'via', u'expansion', u'and', u'contraction', u'of', u'the', u'ribs', u'.'], u'lemmas': [u'the', u'rigid', u'shell', u'mean', u'that', u'turtle', u'can', u'not', u'breathe', u'as', u'other', u'reptile', u'do', u',', u'by', u'change', u'the', u'volume', u'of', u'they', u'chest', u'cavity', u'via', u'expansion', u'and', u'contraction', u'of', u'the', u'rib', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'IN', u'NNS', u'MD', u'RB', u'VB', u'IN', u'JJ', u'NNS', u'VBP', u',', u'IN', u'VBG', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'IN', u'NN', u'CC', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[5639, 5642], [5643, 5648], [5649, 5654], [5655, 5660], [5661, 5665], [5666, 5673], [5674, 5677], [5677, 5680], [5681, 5688], [5689, 5691], [5692, 5697], [5698, 5706], [5707, 5709], [5709, 5710], [5711, 5713], [5714, 5722], [5723, 5726], [5727, 5733], [5734, 5736], [5737, 5742], [5743, 5748], [5749, 5755], [5756, 5759], [5760, 5769], [5770, 5773], [5774, 5785], [5786, 5788], [5789, 5792], [5793, 5797], [5797, 5798]]}) 
answer: set([u'air'])
candidate Sentence: (0.22463080286979675, {u'tokens': [u'Some', u'turtles', u'do', u'not', u'have', u'horny', u'scutes', u'.'], u'lemmas': [u'some', u'turtle', u'do', u'not', u'have', u'horny', u'scute', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[5483, 5487], [5488, 5495], [5496, 5498], [5499, 5502], [5503, 5507], [5508, 5513], [5514, 5520], [5520, 5521]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.19932174682617188, {u'tokens': [u'Turtles', u'and', u'terrapins', u'do', u'not', u'molt', u'their', u'skins', u'all', u'in', u'one', u'go', u',', u'as', u'snakes', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'pieces', u'.'], u'lemmas': [u'turtle', u'and', u'terrapin', u'do', u'not', u'molt', u'they', u'skin', u'all', u'in', u'one', u'go', u',', u'as', u'snake', u'do', u',', u'but', u'continuously', u',', u'in', u'small', u'piece', u'.'], u'pos': [u'NNS', u'CC', u'NNS', u'VBP', u'RB', u'VB', u'PRP$', u'NNS', u'DT', u'IN', u'CD', u'NN', u',', u'IN', u'NNS', u'VBP', u',', u'CC', u'RB', u',', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[7877, 7884], [7885, 7888], [7889, 7898], [7899, 7901], [7902, 7905], [7906, 7910], [7911, 7916], [7917, 7922], [7923, 7926], [7927, 7929], [7930, 7933], [7934, 7936], [7936, 7937], [7938, 7940], [7941, 7947], [7948, 7950], [7950, 7951], [7952, 7955], [7956, 7968], [7968, 7969], [7970, 7972], [7973, 7978], [7979, 7985], [7985, 7986]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.11999524384737015, {u'tokens': [u'First', u',', u'they', u'employ', u'buccal', u'pumping', u',', u'pulling', u'air', u'into', u'their', u'mouth', u'then', u'pushing', u'it', u'into', u'the', u'lungs', u'via', u'oscillations', u'of', u'the', u'floor', u'of', u'the', u'throat', u'.'], u'lemmas': [u'first', u',', u'they', u'employ', u'buccal', u'pump', u',', u'pull', u'air', u'into', u'they', u'mouth', u'then', u'push', u'it', u'into', u'the', u'lung', u'via', u'oscillation', u'of', u'the', u'floor', u'of', u'the', u'throat', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'JJ', u'VBG', u',', u'VBG', u'NN', u'IN', u'PRP$', u'NN', u'RB', u'VBG', u'PRP', u'IN', u'DT', u'NNS', u'IN', u'NNS', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5839, 5844], [5844, 5845], [5846, 5850], [5851, 5857], [5858, 5864], [5865, 5872], [5872, 5873], [5874, 5881], [5882, 5885], [5886, 5890], [5891, 5896], [5897, 5902], [5903, 5907], [5908, 5915], [5916, 5918], [5919, 5923], [5924, 5927], [5928, 5933], [5934, 5937], [5938, 5950], [5951, 5953], [5954, 5957], [5958, 5963], [5964, 5966], [5967, 5970], [5971, 5977], [5977, 5978]]}) 
answer: set([u'breathe'])
candidate Sentence: (0.098454743623733521, {u'tokens': [u'Secondly', u',', u'by', u'contracting', u'the', u'abdominal', u'muscles', u'that', u'cover', u'the', u'posterior', u'opening', u'of', u'the', u'shell', u',', u'the', u'internal', u'volume', u'of', u'the', u'shell', u'increases', u',', u'drawing', u'air', u'into', u'the', u'lungs', u',', u'allowing', u'these', u'muscles', u'to', u'function', u'in', u'much', u'the', u'same', u'way', u'as', u'the', u'mammalian', u'diaphragm', u'.'], u'lemmas': [u'secondly', u',', u'by', u'contract', u'the', u'abdominal', u'muscle', u'that', u'cover', u'the', u'posterior', u'opening', u'of', u'the', u'shell', u',', u'the', u'internal', u'volume', u'of', u'the', u'shell', u'increase', u',', u'draw', u'air', u'into', u'the', u'lung', u',', u'allow', u'these', u'muscle', u'to', u'function', u'in', u'much', u'the', u'same', u'way', u'as', u'the', u'mammalian', u'diaphragm', u'.'], u'pos': [u'RB', u',', u'IN', u'VBG', u'DT', u'JJ', u'NNS', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u',', u'VBG', u'NN', u'IN', u'DT', u'NNS', u',', u'VBG', u'DT', u'NNS', u'TO', u'VB', u'IN', u'JJ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[5980, 5988], [5988, 5989], [5990, 5992], [5993, 6004], [6005, 6008], [6009, 6018], [6019, 6026], [6027, 6031], [6032, 6037], [6038, 6041], [6042, 6051], [6052, 6059], [6060, 6062], [6063, 6066], [6067, 6072], [6072, 6073], [6074, 6077], [6078, 6086], [6087, 6093], [6094, 6096], [6097, 6100], [6101, 6106], [6107, 6116], [6116, 6117], [6118, 6125], [6126, 6129], [6130, 6134], [6135, 6138], [6139, 6144], [6144, 6145], [6146, 6154], [6155, 6160], [6161, 6168], [6169, 6171], [6172, 6180], [6181, 6183], [6184, 6188], [6189, 6192], [6193, 6197], [6198, 6201], [6202, 6204], [6205, 6208], [6209, 6218], [6219, 6228], [6228, 6229]]}) 
answer: set([u'breathe'])
candidate Sentence: (0.089000426232814789, {u'tokens': [u'Researchers', u'have', u'recently', u'discovered', u'a', u'turtles', u'organs', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animals', u'.'], u'lemmas': [u'researcher', u'have', u'recently', u'discover', u'a', u'turtle', u'organ', u'do', u'not', u'gradually', u'break', u'down', u'or', u'become', u'less', u'efficient', u'over', u'time', u',', u'unlike', u'most', u'other', u'animal', u'.'], u'pos': [u'NNS', u'VBP', u'RB', u'VBN', u'DT', u'NNS', u'NNS', u'VBP', u'RB', u'RB', u'VB', u'RP', u'CC', u'VB', u'RBR', u'JJ', u'IN', u'NN', u',', u'IN', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[12228, 12239], [12240, 12244], [12245, 12253], [12254, 12264], [12265, 12266], [12267, 12274], [12275, 12281], [12282, 12284], [12285, 12288], [12289, 12298], [12299, 12304], [12305, 12309], [12310, 12312], [12313, 12319], [12320, 12324], [12325, 12334], [12335, 12339], [12340, 12344], [12344, 12345], [12346, 12352], [12353, 12357], [12358, 12363], [12364, 12371], [12371, 12372]]}) 
answer: set([u'breathe', u'air'])
candidate Sentence: (0.064094394445419312, {u'tokens': [u'Reanalysis', u'of', u'prior', u'phylogenies', u'suggests', u'that', u'they', u'classified', u'turtles', u'as', u'anapsids', u'both', u'because', u'they', u'assumed', u'this', u'classification', u'-LRB-', u'most', u'of', u'them', u'studying', u'what', u'sort', u'of', u'anapsid', u'turtles', u'are', u'-RRB-', u'and', u'because', u'they', u'did', u'not', u'sample', u'fossil', u'and', u'extant', u'taxa', u'broadly', u'enough', u'for', u'constructing', u'the', u'cladogram', u'.'], u'lemmas': [u'reanalysis', u'of', u'prior', u'phylogeny', u'suggest', u'that', u'they', u'classify', u'turtle', u'as', u'anapsid', u'both', u'because', u'they', u'assume', u'this', u'classification', u'-lrb-', u'most', u'of', u'they', u'study', u'what', u'sort', u'of', u'anapsid', u'turtle', u'be', u'-rrb-', u'and', u'because', u'they', u'do', u'not', u'sample', u'fossil', u'and', u'extant', u'taxa', u'broadly', u'enough', u'for', u'construct', u'the', u'cladogram', u'.'], u'pos': [u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'NNS', u'CC', u'IN', u'PRP', u'VBD', u'DT', u'NN', u'-LRB-', u'JJS', u'IN', u'PRP', u'VBG', u'WP', u'NN', u'IN', u'JJ', u'NNS', u'VBP', u'-RRB-', u'CC', u'IN', u'PRP', u'VBD', u'RB', u'NN', u'NN', u'CC', u'JJ', u'NN', u'RB', u'RB', u'IN', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[15702, 15712], [15713, 15715], [15716, 15721], [15722, 15733], [15734, 15742], [15743, 15747], [15748, 15752], [15753, 15763], [15764, 15771], [15772, 15774], [15775, 15783], [15784, 15788], [15789, 15796], [15797, 15801], [15802, 15809], [15810, 15814], [15815, 15829], [15830, 15831], [15831, 15835], [15836, 15838], [15839, 15843], [15844, 15852], [15853, 15857], [15858, 15862], [15863, 15865], [15866, 15873], [15874, 15881], [15882, 15885], [15885, 15886], [15887, 15890], [15891, 15898], [15899, 15903], [15904, 15907], [15908, 15911], [15912, 15918], [15919, 15925], [15926, 15929], [15930, 15936], [15937, 15941], [15942, 15949], [15950, 15956], [15957, 15960], [15961, 15973], [15974, 15977], [15978, 15987], [15987, 15988]]}) 
answer: set([u'breathe', u'air'])
['No Sure', 'No', 'Yes', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Do turtles breathe air?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2e18>.answer
_____________________________ test_yesno[param184] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2e60>, (<src.tfidf.TF_IDF object at 0x7f56bac70410>, set(['turtle'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2e60>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.44308426976203918, {u'tokens': [u'Harvesting', u'wild', u'turtles', u'is', u'legal', u'in', u'Florida', u',', u'and', u'a', u'single', u'seafood', u'company', u'in', u'Fort', u'Lauderdale', u'was', u'reported', u'-LRB-', u'2008', u'-RRB-', u'as', u'buying', u'about', u'5,000', u'pounds', u'of', u'softshell', u'turtles', u'a', u'week', u'.'], u'lemmas': [u'harvest', u'wild', u'turtle', u'be', u'legal', u'in', u'Florida', u',', u'and', u'a', u'single', u'seafood', u'company', u'in', u'Fort', u'Lauderdale', u'be', u'report', u'-lrb-', u'2008', u'-rrb-', u'as', u'buy', u'about', u'5,000', u'pound', u'of', u'softshell', u'turtle', u'a', u'week', u'.'], u'pos': [u'VBG', u'JJ', u'NNS', u'VBZ', u'JJ', u'IN', u'NNP', u',', u'CC', u'DT', u'JJ', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'-LRB-', u'CD', u'-RRB-', u'IN', u'VBG', u'RB', u'CD', u'NNS', u'IN', u'JJ', u'NNS', u'DT', u'NN', u'.'], u'char_offsets': [[18694, 18704], [18705, 18709], [18710, 18717], [18718, 18720], [18721, 18726], [18727, 18729], [18730, 18737], [18737, 18738], [18739, 18742], [18743, 18744], [18745, 18751], [18752, 18759], [18760, 18767], [18768, 18770], [18771, 18775], [18776, 18786], [18787, 18790], [18791, 18799], [18800, 18801], [18801, 18805], [18805, 18806], [18807, 18809], [18810, 18816], [18817, 18822], [18823, 18828], [18829, 18835], [18836, 18838], [18839, 18848], [18849, 18856], [18857, 18858], [18859, 18863], [18863, 18864]]}) 
answer: set([u'anywhere'])
candidate Sentence: (0.16606156527996063, {u'tokens': [u'As', u'of', u'July', u'1', u',', u'2007', u'it', u'is', u'illegal', u'in', u'Florida', u'to', u'sell', u'any', u'wild', u'type', u'RES', u'.'], u'lemmas': [u'as', u'of', u'July', u'1', u',', u'2007', u'it', u'be', u'illegal', u'in', u'Florida', u'to', u'sell', u'any', u'wild', u'type', u're', u'.'], u'pos': [u'IN', u'IN', u'NNP', u'CD', u',', u'CD', u'PRP', u'VBZ', u'JJ', u'IN', u'NNP', u'TO', u'VB', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[17940, 17942], [17943, 17945], [17946, 17950], [17951, 17952], [17952, 17953], [17954, 17958], [17959, 17961], [17962, 17964], [17965, 17972], [17973, 17975], [17976, 17983], [17984, 17986], [17987, 17991], [17992, 17995], [17996, 18000], [18001, 18005], [18006, 18009], [18009, 18010]]}) 
answer: set([u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.020911367610096931, {u'tokens': [u'The', u'largest', u'turtles', u'are', u'aquatic', u'.'], u'lemmas': [u'the', u'largest', u'turtle', u'be', u'aquatic', u'.'], u'pos': [u'DT', u'JJS', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[1042, 1045], [1046, 1053], [1054, 1061], [1062, 1065], [1066, 1073], [1073, 1074]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.014855340123176575, {u'tokens': [u'Aquatic', u'respiration', u'in', u'Australian', u'freshwater', u'turtles', u'is', u'currently', u'being', u'studied', u'.'], u'lemmas': [u'aquatic', u'respiration', u'in', u'australian', u'freshwater', u'turtle', u'be', u'currently', u'be', u'study', u'.'], u'pos': [u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNS', u'VBZ', u'RB', u'VBG', u'VBN', u'.'], u'char_offsets': [[10822, 10829], [10830, 10841], [10842, 10844], [10845, 10855], [10856, 10866], [10867, 10874], [10875, 10877], [10878, 10887], [10888, 10893], [10894, 10901], [10901, 10902]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.014151467941701412, {u'tokens': [u'The', u'upper', u'shell', u'of', u'the', u'turtle', u'is', u'called', u'the', u'carapace', u'.'], u'lemmas': [u'the', u'upper', u'shell', u'of', u'the', u'turtle', u'be', u'call', u'the', u'carapace', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'DT', u'NN', u'.'], u'char_offsets': [[4771, 4774], [4775, 4780], [4781, 4786], [4787, 4789], [4790, 4793], [4794, 4800], [4801, 4803], [4804, 4810], [4811, 4814], [4815, 4823], [4823, 4824]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.011956893838942051, {u'tokens': [u'Different', u'animals', u'are', u'called', u'turtles', u',', u'tortoises', u',', u'or', u'terrapins', u'in', u'different', u'varieties', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtles', u',', u'are', u'commonly', u'kept', u'as', u'pets', u'.'], u'lemmas': [u'different', u'animal', u'be', u'call', u'turtle', u',', u'tortoise', u',', u'or', u'terrapin', u'in', u'different', u'variety', u'of', u'English', u'Turtles', u',', u'particularly', u'small', u'terrestrial', u'and', u'freshwater', u'turtle', u',', u'be', u'commonly', u'keep', u'as', u'pet', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'NNS', u',', u'CC', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'NNPS', u',', u'RB', u'JJ', u'NN', u'CC', u'NN', u'NNS', u',', u'VBP', u'RB', u'VBN', u'IN', u'NNS', u'.'], u'char_offsets': [[16646, 16655], [16656, 16663], [16664, 16667], [16668, 16674], [16675, 16682], [16682, 16683], [16684, 16693], [16693, 16694], [16695, 16697], [16698, 16707], [16708, 16710], [16711, 16720], [16721, 16730], [16731, 16733], [16734, 16741], [16742, 16749], [16749, 16750], [16751, 16763], [16764, 16769], [16770, 16781], [16782, 16785], [16786, 16796], [16797, 16804], [16804, 16805], [16806, 16809], [16810, 16818], [16819, 16823], [16824, 16826], [16827, 16831], [16831, 16832]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.011956294998526573, {u'tokens': [u'Two', u'other', u'species', u'of', u'small', u'turtles', u'are', u'the', u'American', u'mud', u'turtles', u'and', u'musk', u'turtles', u'that', u'live', u'in', u'an', u'area', u'that', u'ranges', u'from', u'Canada', u'to', u'South', u'America', u'.'], u'lemmas': [u'two', u'other', u'species', u'of', u'small', u'turtle', u'be', u'the', u'american', u'mud', u'turtle', u'and', u'musk', u'turtle', u'that', u'live', u'in', u'a', u'area', u'that', u'range', u'from', u'Canada', u'to', u'South', u'America', u'.'], u'pos': [u'CD', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NNS', u'CC', u'NN', u'NNS', u'WDT', u'VBP', u'IN', u'DT', u'NN', u'WDT', u'VBZ', u'IN', u'NNP', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[2441, 2444], [2445, 2450], [2451, 2458], [2459, 2461], [2462, 2467], [2468, 2475], [2476, 2479], [2480, 2483], [2484, 2492], [2493, 2496], [2497, 2504], [2505, 2508], [2509, 2513], [2514, 2521], [2522, 2526], [2527, 2531], [2532, 2534], [2535, 2537], [2538, 2542], [2543, 2547], [2548, 2554], [2555, 2559], [2560, 2566], [2567, 2569], [2570, 2575], [2576, 2583], [2583, 2584]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.011182426474988461, {u'tokens': [u'The', u'Cryptodira', u'is', u'the', u'larger', u'of', u'the', u'two', u'groups', u'and', u'includes', u'all', u'the', u'marine', u'turtles', u',', u'the', u'terrestrial', u'tortoises', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtles', u'.'], u'lemmas': [u'the', u'Cryptodira', u'be', u'the', u'larger', u'of', u'the', u'two', u'group', u'and', u'include', u'all', u'the', u'marine', u'turtle', u',', u'the', u'terrestrial', u'tortoise', u',', u'and', u'many', u'of', u'the', u'freshwater', u'turtle', u'.'], u'pos': [u'DT', u'NNP', u'VBZ', u'DT', u'JJR', u'IN', u'DT', u'CD', u'NNS', u'CC', u'VBZ', u'PDT', u'DT', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NNS', u',', u'CC', u'JJ', u'IN', u'DT', u'NN', u'NNS', u'.'], u'char_offsets': [[12898, 12901], [12902, 12912], [12913, 12915], [12916, 12919], [12920, 12926], [12927, 12929], [12930, 12933], [12934, 12937], [12938, 12944], [12945, 12948], [12949, 12957], [12958, 12961], [12962, 12965], [12966, 12972], [12973, 12980], [12980, 12981], [12982, 12985], [12986, 12997], [12998, 13007], [13007, 13008], [13009, 13012], [13013, 13017], [13018, 13020], [13021, 13024], [13025, 13035], [13036, 13043], [13043, 13044]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.010823055170476437, {u'tokens': [u'Some', u'aquatic', u'turtles', u',', u'such', u'as', u'snapping', u'turtles', u'and', u'soft-shelled', u'turtles', u',', u'have', u'eyes', u'closer', u'to', u'the', u'top', u'of', u'the', u'head', u'.'], u'lemmas': [u'some', u'aquatic', u'turtle', u',', u'such', u'as', u'snap', u'turtle', u'and', u'soft-shelled', u'turtle', u',', u'have', u'eye', u'closer', u'to', u'the', u'top', u'of', u'the', u'head', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u',', u'JJ', u'IN', u'VBG', u'NNS', u'CC', u'JJ', u'NNS', u',', u'VBP', u'NNS', u'JJR', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[3484, 3488], [3489, 3496], [3497, 3504], [3504, 3505], [3506, 3510], [3511, 3513], [3514, 3522], [3523, 3530], [3531, 3534], [3535, 3547], [3548, 3555], [3555, 3556], [3557, 3561], [3562, 3566], [3567, 3573], [3574, 3576], [3577, 3580], [3581, 3584], [3585, 3587], [3588, 3591], [3592, 3596], [3596, 3597]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
candidate Sentence: (0.010562842711806297, {u'tokens': [u'Freshwater', u'turtles', u'are', u'generally', u'smaller', u',', u'but', u'with', u'the', u'largest', u'species', u',', u'the', u'Asian', u'softshell', u'turtle', u'Pelochelys', u'cantorii', u',', u'a', u'few', u'individuals', u'have', u'been', u'reported', u'up', u'to', u'200', u'cm', u'or', u'80', u'in', u'-LRB-', u'Das', u',', u'1991', u'-RRB-', u'.'], u'lemmas': [u'freshwater', u'turtle', u'be', u'generally', u'smaller', u',', u'but', u'with', u'the', u'largest', u'species', u',', u'the', u'asian', u'softshell', u'turtle', u'Pelochelys', u'cantorius', u',', u'a', u'few', u'individual', u'have', u'be', u'report', u'up', u'to', u'200', u'cm', u'or', u'80', u'in', u'-lrb-', u'Das', u',', u'1991', u'-rrb-', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'JJR', u',', u'CC', u'IN', u'DT', u'JJS', u'NNS', u',', u'DT', u'JJ', u'JJ', u'NN', u'NNP', u'NN', u',', u'DT', u'JJ', u'NNS', u'VBP', u'VBN', u'VBN', u'RP', u'TO', u'CD', u'NN', u'CC', u'CD', u'IN', u'-LRB-', u'NNP', u',', u'CD', u'-RRB-', u'.'], u'char_offsets': [[1252, 1262], [1263, 1270], [1271, 1274], [1275, 1284], [1285, 1292], [1292, 1293], [1294, 1297], [1298, 1302], [1303, 1306], [1307, 1314], [1315, 1322], [1322, 1323], [1324, 1327], [1328, 1333], [1334, 1343], [1344, 1350], [1351, 1361], [1362, 1370], [1370, 1371], [1372, 1373], [1374, 1377], [1378, 1389], [1390, 1394], [1395, 1399], [1400, 1408], [1409, 1411], [1412, 1414], [1415, 1418], [1419, 1421], [1422, 1424], [1425, 1427], [1428, 1430], [1431, 1432], [1432, 1435], [1435, 1436], [1437, 1441], [1441, 1442], [1442, 1443]]}) 
answer: set([u'wild', u'anywhere', u'harvest', u'legal'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are harvesting wild turtles legal anywhere?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2e60>.answer
_____________________________ test_yesno[param185] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2ea8>, (<src.tfidf.TF_IDF object at 0x7f56b9f71650>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2ea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.27869442105293274, {u'tokens': [u'Someone', u'who', u'plays', u'the', u'violin', u'is', u'called', u'a', u'violinist', u'or', u'a', u'fiddler', u'.'], u'lemmas': [u'someone', u'who', u'play', u'the', u'violin', u'be', u'call', u'a', u'violinist', u'or', u'a', u'fiddler', u'.'], u'pos': [u'NN', u'WP', u'VBZ', u'DT', u'NN', u'VBZ', u'VBN', u'DT', u'NN', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1194, 1201], [1202, 1205], [1206, 1211], [1212, 1215], [1216, 1222], [1223, 1225], [1226, 1232], [1233, 1234], [1235, 1244], [1245, 1247], [1248, 1249], [1250, 1257], [1257, 1258]]}) 
answer: set([u'thing'])
candidate Sentence: (0.27664980292320251, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44817, 44818], [44820, 44823], [44824, 44826], [44827, 44830], [44831, 44837], [44838, 44840], [44841, 44845], [44846, 44848], [44849, 44853], [44853, 44854]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.19130450487136841, {u'tokens': [u'The', u'same', u'note', u'will', u'sound', u'substantially', u'different', u',', u'depending', u'on', u'what', u'string', u'is', u'used', u'to', u'play', u'it', u'.'], u'lemmas': [u'the', u'same', u'note', u'will', u'sound', u'substantially', u'different', u',', u'depend', u'on', u'what', u'string', u'be', u'use', u'to', u'play', u'it', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'MD', u'VB', u'RB', u'JJ', u',', u'VBG', u'IN', u'WP', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[20601, 20604], [20605, 20609], [20610, 20614], [20615, 20619], [20620, 20625], [20626, 20639], [20640, 20649], [20649, 20650], [20651, 20660], [20661, 20663], [20664, 20668], [20669, 20675], [20676, 20678], [20679, 20683], [20684, 20686], [20687, 20691], [20692, 20694], [20694, 20695]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.16836616396903992, {u'tokens': [u'However', u',', u'some', u'folk', u'fiddlers', u'alter', u'their', u'instruments', u'for', u'various', u'reasons', u'.'], u'lemmas': [u'however', u',', u'some', u'folk', u'fiddler', u'alter', u'they', u'instrument', u'for', u'various', u'reason', u'.'], u'pos': [u'RB', u',', u'DT', u'NN', u'NNS', u'VBP', u'PRP$', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[39521, 39528], [39528, 39529], [39530, 39534], [39535, 39539], [39540, 39548], [39549, 39554], [39555, 39560], [39561, 39572], [39573, 39576], [39577, 39584], [39585, 39592], [39592, 39593]]}) 
answer: set([u'violinist', u'thing'])
candidate Sentence: (0.11426176875829697, {u'tokens': [u'Strings', u'have', u'a', u'limited', u'lifetime', u';', u'apart', u'from', u'obvious', u'things', u',', u'such', u'as', u'the', u'winding', u'of', u'a', u'string', u'coming', u'undone', u'from', u'wear', u',', u'a', u'player', u'will', u'generally', u'change', u'a', u'string', u'when', u'it', u'no', u'longer', u'plays', u'``', u'true', u',', u"''", u'with', u'a', u'negative', u'effect', u'on', u'intonation', u',', u'or', u'when', u'it', u'loses', u'the', u'desired', u'tone', u'.'], u'lemmas': [u'Strings', u'have', u'a', u'limited', u'lifetime', u';', u'apart', u'from', u'obvious', u'thing', u',', u'such', u'as', u'the', u'wind', u'of', u'a', u'string', u'come', u'undo', u'from', u'wear', u',', u'a', u'player', u'will', u'generally', u'change', u'a', u'string', u'when', u'it', u'no', u'longer', u'play', u'``', u'true', u',', u"''", u'with', u'a', u'negative', u'effect', u'on', u'intonation', u',', u'or', u'when', u'it', u'lose', u'the', u'desire', u'tone', u'.'], u'pos': [u'NNP', u'VBP', u'DT', u'JJ', u'NN', u':', u'RB', u'IN', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'VBG', u'IN', u'DT', u'NN', u'VBG', u'VBN', u'IN', u'NN', u',', u'DT', u'NN', u'MD', u'RB', u'VB', u'DT', u'NN', u'WRB', u'PRP', u'RB', u'RBR', u'VBZ', u'``', u'JJ', u',', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'WRB', u'PRP', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[9652, 9659], [9660, 9664], [9665, 9666], [9667, 9674], [9675, 9683], [9683, 9684], [9685, 9690], [9691, 9695], [9696, 9703], [9704, 9710], [9710, 9711], [9712, 9716], [9717, 9719], [9720, 9723], [9724, 9731], [9732, 9734], [9735, 9736], [9737, 9743], [9744, 9750], [9751, 9757], [9758, 9762], [9763, 9767], [9767, 9768], [9769, 9770], [9771, 9777], [9778, 9782], [9783, 9792], [9793, 9799], [9800, 9801], [9802, 9808], [9809, 9813], [9814, 9816], [9817, 9819], [9820, 9826], [9827, 9832], [9833, 9834], [9834, 9838], [9838, 9839], [9839, 9840], [9841, 9845], [9846, 9847], [9848, 9856], [9857, 9863], [9864, 9866], [9867, 9877], [9877, 9878], [9879, 9881], [9882, 9886], [9887, 9889], [9890, 9895], [9896, 9899], [9900, 9907], [9908, 9912], [9912, 9913]]}) 
answer: set([u'violinist', u'fiddler'])
candidate Sentence: (0.1033819317817688, {u'tokens': [u'The', u'stick', u'is', u'traditionally', u'made', u'of', u'brazilwood', u',', u'although', u'a', u'stick', u'made', u'from', u'this', u'type', u'of', u'wood', u'which', u'is', u'of', u'a', u'more', u'select', u'quality', u'-LRB-', u'and', u'higher', u'price', u'-RRB-', u'is', u'referred', u'to', u'as', u'pernambuco', u'-LRB-', u'both', u'types', u'are', u'taken', u'from', u'the', u'same', u'tree', u'species', u'-RRB-', u'.'], u'lemmas': [u'the', u'stick', u'be', u'traditionally', u'make', u'of', u'brazilwood', u',', u'although', u'a', u'stick', u'make', u'from', u'this', u'type', u'of', u'wood', u'which', u'be', u'of', u'a', u'more', u'select', u'quality', u'-lrb-', u'and', u'higher', u'price', u'-rrb-', u'be', u'refer', u'to', u'as', u'pernambuco', u'-lrb-', u'both', u'type', u'be', u'take', u'from', u'the', u'same', u'tree', u'species', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NN', u',', u'IN', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'-LRB-', u'CC', u'JJR', u'NN', u'-RRB-', u'VBZ', u'VBN', u'TO', u'IN', u'NN', u'-LRB-', u'DT', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[16540, 16543], [16544, 16549], [16550, 16552], [16553, 16566], [16567, 16571], [16572, 16574], [16575, 16585], [16585, 16586], [16587, 16595], [16596, 16597], [16598, 16603], [16604, 16608], [16609, 16613], [16614, 16618], [16619, 16623], [16624, 16626], [16627, 16631], [16632, 16637], [16638, 16640], [16641, 16643], [16644, 16645], [16646, 16650], [16651, 16657], [16658, 16665], [16666, 16667], [16667, 16670], [16671, 16677], [16678, 16683], [16683, 16684], [16685, 16687], [16688, 16696], [16697, 16699], [16700, 16702], [16703, 16713], [16714, 16715], [16715, 16719], [16720, 16725], [16726, 16729], [16730, 16735], [16736, 16740], [16741, 16744], [16745, 16749], [16750, 16754], [16755, 16762], [16762, 16763], [16763, 16764]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.081131823360919952, {u'tokens': [u'The', u'majority', u'of', u'the', u'first', u'electric', u'violinists', u'were', u'musicians', u'playing', u'jazz', u'and', u'popular', u'music', u'.'], u'lemmas': [u'the', u'majority', u'of', u'the', u'first', u'electric', u'violinist', u'be', u'musician', u'play', u'jazz', u'and', u'popular', u'music', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNS', u'VBD', u'NNS', u'VBG', u'NN', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[40859, 40862], [40863, 40871], [40872, 40874], [40875, 40878], [40879, 40884], [40885, 40893], [40894, 40904], [40905, 40909], [40910, 40919], [40920, 40927], [40928, 40932], [40933, 40936], [40937, 40944], [40945, 40950], [40950, 40951]]}) 
answer: set([u'thing', u'fiddler'])
candidate Sentence: (0.079981617629528046, {u'tokens': [u'Bowed', u'instruments', u'may', u'have', u'originated', u'in', u'the', u'equestrian', u'cultures', u'of', u'Central', u'Asia', u',', u'an', u'example', u'being', u'the', u'Mongolian', u'instrument', u'Morin', u'huur', u':', u':', u'Turkic', u'and', u'Mongolian', u'horsemen', u'from', u'Inner', u'Asia', u'were', u'probably', u'the', u'worlds', u'earliest', u'fiddlers', u'.'], u'lemmas': [u'bow', u'instrument', u'may', u'have', u'originate', u'in', u'the', u'equestrian', u'culture', u'of', u'Central', u'Asia', u',', u'a', u'example', u'be', u'the', u'mongolian', u'instrument', u'Morin', u'huur', u':', u':', u'turkic', u'and', u'mongolian', u'horseman', u'from', u'Inner', u'Asia', u'be', u'probably', u'the', u'world', u'earliest', u'fiddler', u'.'], u'pos': [u'VBN', u'NNS', u'MD', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBG', u'DT', u'JJ', u'NN', u'NNP', u'NN', u':', u':', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'VBD', u'RB', u'DT', u'NNS', u'JJS', u'NNS', u'.'], u'char_offsets': [[1767, 1772], [1773, 1784], [1785, 1788], [1789, 1793], [1794, 1804], [1805, 1807], [1808, 1811], [1812, 1822], [1823, 1831], [1832, 1834], [1835, 1842], [1843, 1847], [1847, 1848], [1849, 1851], [1852, 1859], [1860, 1865], [1866, 1869], [1870, 1879], [1880, 1890], [1891, 1896], [1897, 1901], [1901, 1902], [1903, 1904], [1904, 1910], [1911, 1914], [1915, 1924], [1925, 1933], [1934, 1938], [1939, 1944], [1945, 1949], [1950, 1954], [1955, 1963], [1964, 1967], [1968, 1974], [1975, 1983], [1984, 1992], [1992, 1993]]}) 
answer: set([u'violinist', u'thing'])
candidate Sentence: (0.066991671919822693, {u'tokens': [u'In', u'the', u'case', u'of', u'the', u'fifth', u',', u'the', u'stretch', u'is', u'greater', u'than', u'is', u'comfortable', u'for', u'many', u'violinists', u'.'], u'lemmas': [u'in', u'the', u'case', u'of', u'the', u'fifth', u',', u'the', u'stretch', u'be', u'greater', u'than', u'be', u'comfortable', u'for', u'many', u'violinist', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u',', u'DT', u'NN', u'VBZ', u'JJR', u'IN', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[28570, 28572], [28573, 28576], [28577, 28581], [28582, 28584], [28585, 28588], [28589, 28594], [28594, 28595], [28596, 28599], [28600, 28607], [28608, 28610], [28611, 28618], [28619, 28623], [28624, 28626], [28627, 28638], [28639, 28642], [28643, 28647], [28648, 28658], [28658, 28659]]}) 
answer: set([u'thing', u'fiddler'])
candidate Sentence: (0.058628369122743607, {u'tokens': [u'*', u'Bowed', u'Radio', u'Weekly', u'podcast', u'featuring', u'creative', u'violinists', u'.'], u'lemmas': [u'*', u'bow', u'Radio', u'Weekly', u'podcast', u'feature', u'creative', u'violinist', u'.'], u'pos': [u'SYM', u'VBN', u'NNP', u'NNP', u'NN', u'VBG', u'JJ', u'NNS', u'.'], u'char_offsets': [[44544, 44545], [44547, 44552], [44553, 44558], [44559, 44565], [44566, 44573], [44574, 44583], [44584, 44592], [44593, 44603], [44603, 44604]]}) 
answer: set([u'thing', u'fiddler'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are violinists and fiddlers the same thing?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2ea8>.answer
_____________________________ test_yesno[param186] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7f56b8fa2ef0>, (<src.tfidf.TF_IDF object at 0x7f56b9f71650>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans)
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2ef0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.27869442105293274, {u'tokens': [u'Someone', u'who', u'plays', u'the', u'violin', u'is', u'called', u'a', u'violinist', u'or', u'a', u'fiddler', u'.'], u'lemmas': [u'someone', u'who', u'play', u'the', u'violin', u'be', u'call', u'a', u'violinist', u'or', u'a', u'fiddler', u'.'], u'pos': [u'NN', u'WP', u'VBZ', u'DT', u'NN', u'VBZ', u'VBN', u'DT', u'NN', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[1194, 1201], [1202, 1205], [1206, 1211], [1212, 1215], [1216, 1222], [1223, 1225], [1226, 1232], [1233, 1234], [1235, 1244], [1245, 1247], [1248, 1249], [1250, 1257], [1257, 1258]]}) 
answer: set([u'thing'])
candidate Sentence: (0.27664980292320251, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[44817, 44818], [44820, 44823], [44824, 44826], [44827, 44830], [44831, 44837], [44838, 44840], [44841, 44845], [44846, 44848], [44849, 44853], [44853, 44854]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.19130450487136841, {u'tokens': [u'The', u'same', u'note', u'will', u'sound', u'substantially', u'different', u',', u'depending', u'on', u'what', u'string', u'is', u'used', u'to', u'play', u'it', u'.'], u'lemmas': [u'the', u'same', u'note', u'will', u'sound', u'substantially', u'different', u',', u'depend', u'on', u'what', u'string', u'be', u'use', u'to', u'play', u'it', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'MD', u'VB', u'RB', u'JJ', u',', u'VBG', u'IN', u'WP', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[20601, 20604], [20605, 20609], [20610, 20614], [20615, 20619], [20620, 20625], [20626, 20639], [20640, 20649], [20649, 20650], [20651, 20660], [20661, 20663], [20664, 20668], [20669, 20675], [20676, 20678], [20679, 20683], [20684, 20686], [20687, 20691], [20692, 20694], [20694, 20695]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.16836616396903992, {u'tokens': [u'However', u',', u'some', u'folk', u'fiddlers', u'alter', u'their', u'instruments', u'for', u'various', u'reasons', u'.'], u'lemmas': [u'however', u',', u'some', u'folk', u'fiddler', u'alter', u'they', u'instrument', u'for', u'various', u'reason', u'.'], u'pos': [u'RB', u',', u'DT', u'NN', u'NNS', u'VBP', u'PRP$', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[39521, 39528], [39528, 39529], [39530, 39534], [39535, 39539], [39540, 39548], [39549, 39554], [39555, 39560], [39561, 39572], [39573, 39576], [39577, 39584], [39585, 39592], [39592, 39593]]}) 
answer: set([u'violinist', u'thing'])
candidate Sentence: (0.11426176875829697, {u'tokens': [u'Strings', u'have', u'a', u'limited', u'lifetime', u';', u'apart', u'from', u'obvious', u'things', u',', u'such', u'as', u'the', u'winding', u'of', u'a', u'string', u'coming', u'undone', u'from', u'wear', u',', u'a', u'player', u'will', u'generally', u'change', u'a', u'string', u'when', u'it', u'no', u'longer', u'plays', u'``', u'true', u',', u"''", u'with', u'a', u'negative', u'effect', u'on', u'intonation', u',', u'or', u'when', u'it', u'loses', u'the', u'desired', u'tone', u'.'], u'lemmas': [u'Strings', u'have', u'a', u'limited', u'lifetime', u';', u'apart', u'from', u'obvious', u'thing', u',', u'such', u'as', u'the', u'wind', u'of', u'a', u'string', u'come', u'undo', u'from', u'wear', u',', u'a', u'player', u'will', u'generally', u'change', u'a', u'string', u'when', u'it', u'no', u'longer', u'play', u'``', u'true', u',', u"''", u'with', u'a', u'negative', u'effect', u'on', u'intonation', u',', u'or', u'when', u'it', u'lose', u'the', u'desire', u'tone', u'.'], u'pos': [u'NNP', u'VBP', u'DT', u'JJ', u'NN', u':', u'RB', u'IN', u'JJ', u'NNS', u',', u'JJ', u'IN', u'DT', u'VBG', u'IN', u'DT', u'NN', u'VBG', u'VBN', u'IN', u'NN', u',', u'DT', u'NN', u'MD', u'RB', u'VB', u'DT', u'NN', u'WRB', u'PRP', u'RB', u'RBR', u'VBZ', u'``', u'JJ', u',', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'CC', u'WRB', u'PRP', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[9652, 9659], [9660, 9664], [9665, 9666], [9667, 9674], [9675, 9683], [9683, 9684], [9685, 9690], [9691, 9695], [9696, 9703], [9704, 9710], [9710, 9711], [9712, 9716], [9717, 9719], [9720, 9723], [9724, 9731], [9732, 9734], [9735, 9736], [9737, 9743], [9744, 9750], [9751, 9757], [9758, 9762], [9763, 9767], [9767, 9768], [9769, 9770], [9771, 9777], [9778, 9782], [9783, 9792], [9793, 9799], [9800, 9801], [9802, 9808], [9809, 9813], [9814, 9816], [9817, 9819], [9820, 9826], [9827, 9832], [9833, 9834], [9834, 9838], [9838, 9839], [9839, 9840], [9841, 9845], [9846, 9847], [9848, 9856], [9857, 9863], [9864, 9866], [9867, 9877], [9877, 9878], [9879, 9881], [9882, 9886], [9887, 9889], [9890, 9895], [9896, 9899], [9900, 9907], [9908, 9912], [9912, 9913]]}) 
answer: set([u'violinist', u'fiddler'])
candidate Sentence: (0.1033819317817688, {u'tokens': [u'The', u'stick', u'is', u'traditionally', u'made', u'of', u'brazilwood', u',', u'although', u'a', u'stick', u'made', u'from', u'this', u'type', u'of', u'wood', u'which', u'is', u'of', u'a', u'more', u'select', u'quality', u'-LRB-', u'and', u'higher', u'price', u'-RRB-', u'is', u'referred', u'to', u'as', u'pernambuco', u'-LRB-', u'both', u'types', u'are', u'taken', u'from', u'the', u'same', u'tree', u'species', u'-RRB-', u'.'], u'lemmas': [u'the', u'stick', u'be', u'traditionally', u'make', u'of', u'brazilwood', u',', u'although', u'a', u'stick', u'make', u'from', u'this', u'type', u'of', u'wood', u'which', u'be', u'of', u'a', u'more', u'select', u'quality', u'-lrb-', u'and', u'higher', u'price', u'-rrb-', u'be', u'refer', u'to', u'as', u'pernambuco', u'-lrb-', u'both', u'type', u'be', u'take', u'from', u'the', u'same', u'tree', u'species', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NN', u',', u'IN', u'DT', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'-LRB-', u'CC', u'JJR', u'NN', u'-RRB-', u'VBZ', u'VBN', u'TO', u'IN', u'NN', u'-LRB-', u'DT', u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[16540, 16543], [16544, 16549], [16550, 16552], [16553, 16566], [16567, 16571], [16572, 16574], [16575, 16585], [16585, 16586], [16587, 16595], [16596, 16597], [16598, 16603], [16604, 16608], [16609, 16613], [16614, 16618], [16619, 16623], [16624, 16626], [16627, 16631], [16632, 16637], [16638, 16640], [16641, 16643], [16644, 16645], [16646, 16650], [16651, 16657], [16658, 16665], [16666, 16667], [16667, 16670], [16671, 16677], [16678, 16683], [16683, 16684], [16685, 16687], [16688, 16696], [16697, 16699], [16700, 16702], [16703, 16713], [16714, 16715], [16715, 16719], [16720, 16725], [16726, 16729], [16730, 16735], [16736, 16740], [16741, 16744], [16745, 16749], [16750, 16754], [16755, 16762], [16762, 16763], [16763, 16764]]}) 
answer: set([u'violinist', u'thing', u'fiddler'])
candidate Sentence: (0.081131823360919952, {u'tokens': [u'The', u'majority', u'of', u'the', u'first', u'electric', u'violinists', u'were', u'musicians', u'playing', u'jazz', u'and', u'popular', u'music', u'.'], u'lemmas': [u'the', u'majority', u'of', u'the', u'first', u'electric', u'violinist', u'be', u'musician', u'play', u'jazz', u'and', u'popular', u'music', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNS', u'VBD', u'NNS', u'VBG', u'NN', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[40859, 40862], [40863, 40871], [40872, 40874], [40875, 40878], [40879, 40884], [40885, 40893], [40894, 40904], [40905, 40909], [40910, 40919], [40920, 40927], [40928, 40932], [40933, 40936], [40937, 40944], [40945, 40950], [40950, 40951]]}) 
answer: set([u'thing', u'fiddler'])
candidate Sentence: (0.079981617629528046, {u'tokens': [u'Bowed', u'instruments', u'may', u'have', u'originated', u'in', u'the', u'equestrian', u'cultures', u'of', u'Central', u'Asia', u',', u'an', u'example', u'being', u'the', u'Mongolian', u'instrument', u'Morin', u'huur', u':', u':', u'Turkic', u'and', u'Mongolian', u'horsemen', u'from', u'Inner', u'Asia', u'were', u'probably', u'the', u'worlds', u'earliest', u'fiddlers', u'.'], u'lemmas': [u'bow', u'instrument', u'may', u'have', u'originate', u'in', u'the', u'equestrian', u'culture', u'of', u'Central', u'Asia', u',', u'a', u'example', u'be', u'the', u'mongolian', u'instrument', u'Morin', u'huur', u':', u':', u'turkic', u'and', u'mongolian', u'horseman', u'from', u'Inner', u'Asia', u'be', u'probably', u'the', u'world', u'earliest', u'fiddler', u'.'], u'pos': [u'VBN', u'NNS', u'MD', u'VB', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBG', u'DT', u'JJ', u'NN', u'NNP', u'NN', u':', u':', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'VBD', u'RB', u'DT', u'NNS', u'JJS', u'NNS', u'.'], u'char_offsets': [[1767, 1772], [1773, 1784], [1785, 1788], [1789, 1793], [1794, 1804], [1805, 1807], [1808, 1811], [1812, 1822], [1823, 1831], [1832, 1834], [1835, 1842], [1843, 1847], [1847, 1848], [1849, 1851], [1852, 1859], [1860, 1865], [1866, 1869], [1870, 1879], [1880, 1890], [1891, 1896], [1897, 1901], [1901, 1902], [1903, 1904], [1904, 1910], [1911, 1914], [1915, 1924], [1925, 1933], [1934, 1938], [1939, 1944], [1945, 1949], [1950, 1954], [1955, 1963], [1964, 1967], [1968, 1974], [1975, 1983], [1984, 1992], [1992, 1993]]}) 
answer: set([u'violinist', u'thing'])
candidate Sentence: (0.066991671919822693, {u'tokens': [u'In', u'the', u'case', u'of', u'the', u'fifth', u',', u'the', u'stretch', u'is', u'greater', u'than', u'is', u'comfortable', u'for', u'many', u'violinists', u'.'], u'lemmas': [u'in', u'the', u'case', u'of', u'the', u'fifth', u',', u'the', u'stretch', u'be', u'greater', u'than', u'be', u'comfortable', u'for', u'many', u'violinist', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u',', u'DT', u'NN', u'VBZ', u'JJR', u'IN', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[28570, 28572], [28573, 28576], [28577, 28581], [28582, 28584], [28585, 28588], [28589, 28594], [28594, 28595], [28596, 28599], [28600, 28607], [28608, 28610], [28611, 28618], [28619, 28623], [28624, 28626], [28627, 28638], [28639, 28642], [28643, 28647], [28648, 28658], [28658, 28659]]}) 
answer: set([u'thing', u'fiddler'])
candidate Sentence: (0.058628369122743607, {u'tokens': [u'*', u'Bowed', u'Radio', u'Weekly', u'podcast', u'featuring', u'creative', u'violinists', u'.'], u'lemmas': [u'*', u'bow', u'Radio', u'Weekly', u'podcast', u'feature', u'creative', u'violinist', u'.'], u'pos': [u'SYM', u'VBN', u'NNP', u'NNP', u'NN', u'VBG', u'JJ', u'NNS', u'.'], u'char_offsets': [[44544, 44545], [44547, 44552], [44553, 44558], [44559, 44565], [44566, 44573], [44574, 44583], [44584, 44592], [44593, 44603], [44603, 44604]]}) 
answer: set([u'thing', u'fiddler'])
['No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No', 'No']

Are violinists and fiddlers the same thing?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

No
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans)
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7f56b8fa2ef0>.answer
=============== 33 failed, 161 passed, 1 error in 26.06 seconds ================
