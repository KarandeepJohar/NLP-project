============================= test session starts ==============================
platform darwin -- Python 2.7.8, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
rootdir: /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests, inifile: 
collected 341 items

test_compute.py ...FF...............FF..........F...F.........F.FFF.....FF..F.F....FFFF..FF......F....F.....FFF.....FF........FF............FF..FF....FF..FF......F.F..FFF.....FFFF..FF.......FF..........F....F..FF......F...............FF.FF......FF..FF..F...........FFFFFFF.F...FFFF....FFFF.......FFFFFFFFFF..................FF..........F.FF..FFFF........FFE

==================================== ERRORS ====================================
________________________ ERROR at setup of test_factoid ________________________
file /Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py, line 45
  def test_factoid(param_factoid):
        fixture 'param_factoid' not found
        available fixtures: tmpdir_factory, pytestconfig, cache, recwarn, monkeypatch, record_xml_property, capfd, capsys, tmpdir
        use 'py.test --fixtures [testpath]' for help on them.

/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py:45
=================================== FAILURES ===================================
______________________________ test_yesno[param3] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116e83128>, (<src.tfidf.TF_IDF object at 0x11485c990>, set(['alessandro', 'alessandro_volta', 'volta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116e83128>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.4722672700881958, {u'tokens': [u'*', u'-LRB-', u'An', u'additional', u'invention', u'pioneered', u'by', u'Volta', u',', u'was', u'the', u'remotely', u'operated', u'pistol', u'.'], u'lemmas': [u'*', u'-lrb-', u'a', u'additional', u'invention', u'pioneer', u'by', u'Volta', u',', u'be', u'the', u'remotely', u'operate', u'pistol', u'.'], u'pos': [u'SYM', u'-LRB-', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'VBD', u'DT', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[3333, 3334], [3336, 3337], [3338, 3340], [3341, 3351], [3352, 3361], [3362, 3371], [3372, 3374], [3375, 3380], [3380, 3381], [3382, 3385], [3386, 3389], [3390, 3398], [3399, 3407], [3408, 3414], [3414, 3415]]}) 
answer: set([u'invent'])
candidate Sentence: (0.12963169813156128, {u'tokens': [u'The', u'reactions', u'in', u'this', u'cell', u'are', u'as', u'follows', u':', u'The', u'copper', u'does', u'not', u'react', u',', u'functioning', u'as', u'an', u'electrode', u'for', u'the', u'reaction', u'.'], u'lemmas': [u'the', u'reaction', u'in', u'this', u'cell', u'be', u'as', u'follow', u':', u'the', u'copper', u'do', u'not', u'react', u',', u'function', u'as', u'a', u'electrode', u'for', u'the', u'reaction', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'DT', u'NN', u'VBP', u'IN', u'VBZ', u':', u'DT', u'NN', u'VBZ', u'RB', u'VB', u',', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[4459, 4462], [4463, 4472], [4473, 4475], [4476, 4480], [4481, 4485], [4486, 4489], [4490, 4492], [4493, 4500], [4500, 4501], [4502, 4505], [4506, 4512], [4513, 4517], [4518, 4521], [4522, 4527], [4527, 4528], [4529, 4540], [4541, 4543], [4544, 4546], [4547, 4556], [4557, 4560], [4561, 4564], [4565, 4573], [4573, 4574]]}) 
answer: set([u'operate', u'pistol', u'invent', u'remotely'])
candidate Sentence: (0.11616787314414978, {u'tokens': [u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'lemmas': [u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'pos': [u'SYM', u'NN', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP'], u'char_offsets': [[5781, 5782], [5784, 5789], [5790, 5800], [5801, 5809], [5810, 5817], [5818, 5827], [5828, 5833], [5833, 5834], [5835, 5836], [5837, 5844], [5845, 5847], [5848, 5864]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])
candidate Sentence: (0.10874414443969727, {u'tokens': [u'In', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocated', u'by', u'Galvani', u',', u'he', u'invented', u'the', u'voltaic', u'pile', u',', u'an', u'early', u'electric', u'battery', u',', u'which', u'produced', u'a', u'steady', u'electric', u'current', u'.'], u'lemmas': [u'in', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocate', u'by', u'Galvani', u',', u'he', u'invent', u'the', u'voltaic', u'pile', u',', u'a', u'early', u'electric', u'battery', u',', u'which', u'produce', u'a', u'steady', u'electric', u'current', u'.'], u'pos': [u'IN', u'CD', u',', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u',', u'WDT', u'VBD', u'DT', u'JJ', u'JJ', u'JJ', u'.'], u'char_offsets': [[2451, 2453], [2454, 2458], [2458, 2459], [2460, 2462], [2463, 2466], [2467, 2473], [2474, 2476], [2477, 2478], [2479, 2491], [2492, 2504], [2505, 2509], [2510, 2513], [2514, 2522], [2523, 2531], [2532, 2541], [2542, 2544], [2545, 2552], [2552, 2553], [2554, 2556], [2557, 2565], [2566, 2569], [2570, 2577], [2578, 2582], [2582, 2583], [2584, 2586], [2587, 2592], [2593, 2601], [2602, 2609], [2609, 2610], [2611, 2616], [2617, 2625], [2626, 2627], [2628, 2634], [2635, 2643], [2644, 2651], [2651, 2652]]}) 
answer: set([u'operate', u'pistol', u'remotely'])
candidate Sentence: (0.072340548038482666, {u'tokens': [u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 5], [6, 16], [17, 25], [26, 33], [34, 43], [44, 49], [50, 51], [51, 59], [60, 62], [62, 63], [64, 68], [69, 70], [71, 76], [77, 78], [78, 79], [80, 84], [84, 85], [86, 89], [90, 92], [93, 100], [101, 109], [110, 118], [118, 119], [120, 121], [121, 126], [126, 127], [128, 135], [136, 139], [140, 147], [148, 150], [151, 154], [155, 158], [159, 161], [162, 175], [175, 176], [176, 177], [178, 187], [188, 198], [199, 204], [204, 205], [206, 210], [210, 211]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])

Did Alessandro Volta invent the remotely operated pistol?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 7 documents, 355 characters, 59 tokens, 50.7 char/doc, 8.4 tok/doc RATES: 1.647 doc/sec, 13.9 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 8 documents, 412 characters, 68 tokens, 51.5 char/doc, 8.5 tok/doc RATES: 1.831 doc/sec, 15.6 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116e83128>.answer
______________________________ test_yesno[param4] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116e833f8>, (<src.tfidf.TF_IDF object at 0x11485c990>, set(['alessandro', 'alessandro_volta', 'volta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Volta was taught in public schools.') == True
E                +  where 'Volta was taught in public schools.' = <src.question_processing.Question_parser instance at 0x116e833f8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.61417514085769653, {u'tokens': [u'Volta', u'was', u'born', u'in', u'Como', u',', u'Italy', u'and', u'was', u'taught', u'in', u'the', u'public', u'schools', u'there', u'.'], u'lemmas': [u'Volta', u'be', u'bear', u'in', u'Como', u',', u'Italy', u'and', u'be', u'teach', u'in', u'the', u'public', u'school', u'there', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u',', u'NNP', u'CC', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'RB', u'.'], u'char_offsets': [[375, 380], [381, 384], [385, 389], [390, 392], [393, 397], [397, 398], [399, 404], [405, 408], [409, 412], [413, 419], [420, 422], [423, 426], [427, 433], [434, 441], [442, 447], [447, 448]]}) 
answer: set([])
candidate Sentence: (0.14986923336982727, {u'tokens': [u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'lemmas': [u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry'], u'pos': [u'SYM', u'NN', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP'], u'char_offsets': [[5781, 5782], [5784, 5789], [5790, 5800], [5801, 5809], [5810, 5817], [5818, 5827], [5828, 5833], [5833, 5834], [5835, 5836], [5837, 5844], [5845, 5847], [5848, 5864]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.14533497393131256, {u'tokens': [u'The', u'primitive', u'cell', u'is', u'widely', u'used', u'in', u'schools', u'to', u'demonstrate', u'the', u'laws', u'of', u'electricity', u'and', u'is', u'known', u'as', u'the', u'Lemon', u'battery', u'.'], u'lemmas': [u'the', u'primitive', u'cell', u'be', u'widely', u'use', u'in', u'school', u'to', u'demonstrate', u'the', u'law', u'of', u'electricity', u'and', u'be', u'know', u'as', u'the', u'Lemon', u'battery', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NNS', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBZ', u'VBN', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[4914, 4917], [4918, 4927], [4928, 4932], [4933, 4935], [4936, 4942], [4943, 4947], [4948, 4950], [4951, 4958], [4959, 4961], [4962, 4973], [4974, 4977], [4978, 4982], [4983, 4985], [4986, 4997], [4998, 5001], [5002, 5004], [5005, 5010], [5011, 5013], [5014, 5017], [5018, 5023], [5024, 5031], [5031, 5032]]}) 
answer: set([u'teach', u'public'])
candidate Sentence: (0.096100956201553345, {u'tokens': [u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'--', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u':', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 5], [6, 16], [17, 25], [26, 33], [34, 43], [44, 49], [50, 51], [51, 59], [60, 62], [62, 63], [64, 68], [69, 70], [71, 76], [77, 78], [78, 79], [80, 84], [84, 85], [86, 89], [90, 92], [93, 100], [101, 109], [110, 118], [118, 119], [120, 121], [121, 126], [126, 127], [128, 135], [136, 139], [140, 147], [148, 150], [151, 154], [155, 158], [159, 161], [162, 175], [175, 176], [176, 177], [178, 187], [188, 198], [199, 204], [204, 205], [206, 210], [210, 211]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.044516365975141525, {u'tokens': [u'He', u'is', u'buried', u'in', u'Camnago', u'Volta', u'.'], u'lemmas': [u'he', u'be', u'bury', u'in', u'Camnago', u'Volta', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[5238, 5240], [5241, 5243], [5244, 5250], [5251, 5253], [5254, 5261], [5262, 5267], [5267, 5268]]}) 
answer: set([u'teach', u'school', u'public'])

Was Alessandro Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Volta was taught in public schools.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 9 documents, 458 characters, 76 tokens, 50.9 char/doc, 8.4 tok/doc RATES: 2.035 doc/sec, 17.2 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 10 documents, 504 characters, 84 tokens, 50.4 char/doc, 8.4 tok/doc RATES: 2.214 doc/sec, 18.6 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Volta was taught in public schools.') == True
 +  where 'Volta was taught in public schools.' = <src.question_processing.Question_parser instance at 0x116e833f8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param20] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116e84320>, (<src.tfidf.TF_IDF object at 0x1103c34d0>, set(['amedeo', 'amedeo_avogadro', 'avogadro'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116e84320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.28280490636825562, {u'tokens': [u'He', u'is', u'most', u'noted', u'for', u'his', u'contributions', u'to', u'molecular', u'theory', u',', u'including', u'what', u'is', u'known', u'as', u'Avogadro', u"'s", u'law', u'.'], u'lemmas': [u'he', u'be', u'most', u'note', u'for', u'he', u'contribution', u'to', u'molecular', u'theory', u',', u'include', u'what', u'be', u'know', u'as', u'Avogadro', u"'s", u'law', u'.'], u'pos': [u'PRP', u'VBZ', u'RBS', u'VBN', u'IN', u'PRP$', u'NNS', u'TO', u'JJ', u'NN', u',', u'VBG', u'WP', u'VBZ', u'VBN', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[172, 174], [175, 177], [178, 182], [183, 188], [189, 192], [193, 196], [197, 210], [211, 213], [214, 223], [224, 230], [230, 231], [232, 241], [242, 246], [247, 249], [250, 255], [256, 258], [259, 267], [267, 269], [270, 273], [273, 274]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])
candidate Sentence: (0.2272050678730011, {u'tokens': [u'In', u'honor', u'of', u'Avogadro', u"'s", u'contributions', u'to', u'molecular', u'theory', u',', u'the', u'number', u'of', u'molecules', u'in', u'one', u'mole', u'was', u'named', u'Avogadro', u"'s", u'number', u',', u'N', u'A', u'or', u'``', u'Avogadro', u"'s", u'constant', u"''", u'.'], u'lemmas': [u'in', u'honor', u'of', u'Avogadro', u"'s", u'contribution', u'to', u'molecular', u'theory', u',', u'the', u'number', u'of', u'molecule', u'in', u'one', u'mole', u'be', u'name', u'Avogadro', u"'s", u'number', u',', u'n', u'a', u'or', u'``', u'Avogadro', u"'s", u'constant', u"''", u'.'], u'pos': [u'IN', u'NN', u'IN', u'NNP', u'POS', u'NNS', u'TO', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'IN', u'CD', u'NN', u'VBD', u'VBN', u'NNP', u'POS', u'NN', u',', u'NN', u'NN', u'CC', u'``', u'NNP', u'POS', u'JJ', u"''", u'.'], u'char_offsets': [[2724, 2726], [2727, 2732], [2733, 2735], [2736, 2744], [2744, 2746], [2747, 2760], [2761, 2763], [2764, 2773], [2774, 2780], [2780, 2781], [2782, 2785], [2786, 2792], [2793, 2795], [2796, 2805], [2806, 2808], [2809, 2812], [2813, 2817], [2818, 2821], [2822, 2827], [2828, 2836], [2836, 2838], [2839, 2845], [2845, 2846], [2847, 2848], [2849, 2850], [2852, 2854], [2855, 2856], [2856, 2864], [2864, 2866], [2867, 2875], [2875, 2876], [2876, 2877]]}) 
answer: set([u'founder', u'hail', u'atomic-molecular'])
candidate Sentence: (0.17956864833831787, {u'tokens': [u'Rudolf', u'Clausius', u',', u'with', u'his', u'kinetic', u'theory', u'on', u'gases', u',', u'gave', u'another', u'confirmation', u'of', u'Avogadro', u"'s", u'Law', u'.'], u'lemmas': [u'Rudolf', u'Clausius', u',', u'with', u'he', u'kinetic', u'theory', u'on', u'gas', u',', u'give', u'another', u'confirmation', u'of', u'Avogadro', u"'s", u'law', u'.'], u'pos': [u'NNP', u'NNP', u',', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'NNS', u',', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[6930, 6936], [6937, 6945], [6945, 6946], [6947, 6951], [6952, 6955], [6956, 6963], [6964, 6970], [6971, 6973], [6974, 6979], [6979, 6980], [6981, 6985], [6986, 6993], [6994, 7006], [7007, 7009], [7010, 7018], [7018, 7020], [7021, 7024], [7024, 7025]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])
candidate Sentence: (0.16263261437416077, {u'tokens': [u'Andr\xe9-Marie', u'Amp\xe8re', u'achieved', u'the', u'same', u'results', u'three', u'years', u'later', u'by', u'another', u'method', u'-LRB-', u'in', u'his', u'--', u'On', u'the', u'Determination', u'of', u'Proportions', u'in', u'which', u'Bodies', u'Combine', u'According', u'to', u'the', u'Number', u'and', u'the', u'Respective', u'Disposition', u'of', u'the', u'Molecules', u'by', u'Which', u'Their', u'Integral', u'Particles', u'Are', u'Made', u'-RRB-', u',', u'but', u'the', u'same', u'indifference', u'was', u'shown', u'to', u'his', u'theory', u'as', u'well', u'.'], u'lemmas': [u'Andr\xe9-Marie', u'Amp\xe8re', u'achieve', u'the', u'same', u'result', u'three', u'year', u'later', u'by', u'another', u'method', u'-lrb-', u'in', u'he', u'--', u'on', u'the', u'determination', u'of', u'proportion', u'in', u'which', u'Bodies', u'combine', u'accord', u'to', u'the', u'Number', u'and', u'the', u'Respective', u'Disposition', u'of', u'the', u'Molecules', u'by', u'which', u'they', u'Integral', u'Particles', u'be', u'make', u'-rrb-', u',', u'but', u'the', u'same', u'indifference', u'be', u'show', u'to', u'he', u'theory', u'as', u'well', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNS', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'PRP$', u':', u'IN', u'DT', u'NN', u'IN', u'NNS', u'IN', u'WDT', u'NNP', u'VB', u'VBG', u'TO', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNPS', u'IN', u'WDT', u'PRP$', u'NNP', u'NNP', u'VBP', u'VBN', u'-RRB-', u',', u'CC', u'DT', u'JJ', u'NN', u'VBD', u'VBN', u'TO', u'PRP$', u'NN', u'RB', u'RB', u'.'], u'char_offsets': [[5740, 5751], [5752, 5758], [5759, 5767], [5768, 5771], [5772, 5776], [5777, 5784], [5785, 5790], [5791, 5796], [5797, 5802], [5803, 5805], [5806, 5813], [5814, 5820], [5821, 5822], [5822, 5824], [5825, 5828], [5831, 5833], [5834, 5836], [5837, 5840], [5841, 5854], [5855, 5857], [5858, 5869], [5870, 5872], [5873, 5878], [5879, 5885], [5886, 5893], [5894, 5903], [5904, 5906], [5907, 5910], [5911, 5917], [5918, 5921], [5922, 5925], [5926, 5936], [5937, 5948], [5949, 5951], [5952, 5955], [5956, 5965], [5966, 5968], [5969, 5974], [5975, 5980], [5981, 5989], [5990, 5999], [6000, 6003], [6004, 6008], [6008, 6009], [6009, 6010], [6011, 6014], [6015, 6018], [6019, 6023], [6024, 6036], [6037, 6040], [6041, 6046], [6047, 6049], [6050, 6053], [6054, 6060], [6061, 6063], [6064, 6068], [6068, 6069]]}) 
answer: set([u'founder', u'atomic-molecular', u'hail'])
candidate Sentence: (0.15669108927249908, {u'tokens': [u'The', u'scientific', u'community', u'did', u'not', u'give', u'great', u'attention', u'to', u'his', u'theory', u',', u'so', u'Avogadro', u"'s", u'hypothesis', u'was', u'not', u'immediately', u'accepted', u'.'], u'lemmas': [u'the', u'scientific', u'community', u'do', u'not', u'give', u'great', u'attention', u'to', u'he', u'theory', u',', u'so', u'Avogadro', u"'s", u'hypothesis', u'be', u'not', u'immediately', u'accept', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBD', u'RB', u'VB', u'JJ', u'NN', u'TO', u'PRP$', u'NN', u',', u'RB', u'NNP', u'POS', u'NN', u'VBD', u'RB', u'RB', u'VBN', u'.'], u'char_offsets': [[5616, 5619], [5620, 5630], [5631, 5640], [5641, 5644], [5645, 5648], [5649, 5653], [5654, 5659], [5660, 5669], [5670, 5672], [5673, 5676], [5677, 5683], [5683, 5684], [5685, 5687], [5688, 5696], [5696, 5698], [5699, 5709], [5710, 5713], [5714, 5717], [5718, 5729], [5730, 5738], [5738, 5739]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])

Is Avogadro hailed as a founder of the atomic-molecular theory?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116e84320>.answer
_____________________________ test_yesno[param21] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116e84638>, (<src.tfidf.TF_IDF object at 0x1103c34d0>, set(['amedeo', 'amedeo_avogadro', 'avogadro'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116e84638>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.28280490636825562, {u'tokens': [u'He', u'is', u'most', u'noted', u'for', u'his', u'contributions', u'to', u'molecular', u'theory', u',', u'including', u'what', u'is', u'known', u'as', u'Avogadro', u"'s", u'law', u'.'], u'lemmas': [u'he', u'be', u'most', u'note', u'for', u'he', u'contribution', u'to', u'molecular', u'theory', u',', u'include', u'what', u'be', u'know', u'as', u'Avogadro', u"'s", u'law', u'.'], u'pos': [u'PRP', u'VBZ', u'RBS', u'VBN', u'IN', u'PRP$', u'NNS', u'TO', u'JJ', u'NN', u',', u'VBG', u'WP', u'VBZ', u'VBN', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[172, 174], [175, 177], [178, 182], [183, 188], [189, 192], [193, 196], [197, 210], [211, 213], [214, 223], [224, 230], [230, 231], [232, 241], [242, 246], [247, 249], [250, 255], [256, 258], [259, 267], [267, 269], [270, 273], [273, 274]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])
candidate Sentence: (0.2272050678730011, {u'tokens': [u'In', u'honor', u'of', u'Avogadro', u"'s", u'contributions', u'to', u'molecular', u'theory', u',', u'the', u'number', u'of', u'molecules', u'in', u'one', u'mole', u'was', u'named', u'Avogadro', u"'s", u'number', u',', u'N', u'A', u'or', u'``', u'Avogadro', u"'s", u'constant', u"''", u'.'], u'lemmas': [u'in', u'honor', u'of', u'Avogadro', u"'s", u'contribution', u'to', u'molecular', u'theory', u',', u'the', u'number', u'of', u'molecule', u'in', u'one', u'mole', u'be', u'name', u'Avogadro', u"'s", u'number', u',', u'n', u'a', u'or', u'``', u'Avogadro', u"'s", u'constant', u"''", u'.'], u'pos': [u'IN', u'NN', u'IN', u'NNP', u'POS', u'NNS', u'TO', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'NNS', u'IN', u'CD', u'NN', u'VBD', u'VBN', u'NNP', u'POS', u'NN', u',', u'NN', u'NN', u'CC', u'``', u'NNP', u'POS', u'JJ', u"''", u'.'], u'char_offsets': [[2724, 2726], [2727, 2732], [2733, 2735], [2736, 2744], [2744, 2746], [2747, 2760], [2761, 2763], [2764, 2773], [2774, 2780], [2780, 2781], [2782, 2785], [2786, 2792], [2793, 2795], [2796, 2805], [2806, 2808], [2809, 2812], [2813, 2817], [2818, 2821], [2822, 2827], [2828, 2836], [2836, 2838], [2839, 2845], [2845, 2846], [2847, 2848], [2849, 2850], [2852, 2854], [2855, 2856], [2856, 2864], [2864, 2866], [2867, 2875], [2875, 2876], [2876, 2877]]}) 
answer: set([u'founder', u'hail', u'atomic-molecular'])
candidate Sentence: (0.17956864833831787, {u'tokens': [u'Rudolf', u'Clausius', u',', u'with', u'his', u'kinetic', u'theory', u'on', u'gases', u',', u'gave', u'another', u'confirmation', u'of', u'Avogadro', u"'s", u'Law', u'.'], u'lemmas': [u'Rudolf', u'Clausius', u',', u'with', u'he', u'kinetic', u'theory', u'on', u'gas', u',', u'give', u'another', u'confirmation', u'of', u'Avogadro', u"'s", u'law', u'.'], u'pos': [u'NNP', u'NNP', u',', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'NNS', u',', u'VBD', u'DT', u'NN', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[6930, 6936], [6937, 6945], [6945, 6946], [6947, 6951], [6952, 6955], [6956, 6963], [6964, 6970], [6971, 6973], [6974, 6979], [6979, 6980], [6981, 6985], [6986, 6993], [6994, 7006], [7007, 7009], [7010, 7018], [7018, 7020], [7021, 7024], [7024, 7025]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])
candidate Sentence: (0.16263261437416077, {u'tokens': [u'Andr\xe9-Marie', u'Amp\xe8re', u'achieved', u'the', u'same', u'results', u'three', u'years', u'later', u'by', u'another', u'method', u'-LRB-', u'in', u'his', u'--', u'On', u'the', u'Determination', u'of', u'Proportions', u'in', u'which', u'Bodies', u'Combine', u'According', u'to', u'the', u'Number', u'and', u'the', u'Respective', u'Disposition', u'of', u'the', u'Molecules', u'by', u'Which', u'Their', u'Integral', u'Particles', u'Are', u'Made', u'-RRB-', u',', u'but', u'the', u'same', u'indifference', u'was', u'shown', u'to', u'his', u'theory', u'as', u'well', u'.'], u'lemmas': [u'Andr\xe9-Marie', u'Amp\xe8re', u'achieve', u'the', u'same', u'result', u'three', u'year', u'later', u'by', u'another', u'method', u'-lrb-', u'in', u'he', u'--', u'on', u'the', u'determination', u'of', u'proportion', u'in', u'which', u'Bodies', u'combine', u'accord', u'to', u'the', u'Number', u'and', u'the', u'Respective', u'Disposition', u'of', u'the', u'Molecules', u'by', u'which', u'they', u'Integral', u'Particles', u'be', u'make', u'-rrb-', u',', u'but', u'the', u'same', u'indifference', u'be', u'show', u'to', u'he', u'theory', u'as', u'well', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'DT', u'JJ', u'NNS', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'PRP$', u':', u'IN', u'DT', u'NN', u'IN', u'NNS', u'IN', u'WDT', u'NNP', u'VB', u'VBG', u'TO', u'DT', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNPS', u'IN', u'WDT', u'PRP$', u'NNP', u'NNP', u'VBP', u'VBN', u'-RRB-', u',', u'CC', u'DT', u'JJ', u'NN', u'VBD', u'VBN', u'TO', u'PRP$', u'NN', u'RB', u'RB', u'.'], u'char_offsets': [[5740, 5751], [5752, 5758], [5759, 5767], [5768, 5771], [5772, 5776], [5777, 5784], [5785, 5790], [5791, 5796], [5797, 5802], [5803, 5805], [5806, 5813], [5814, 5820], [5821, 5822], [5822, 5824], [5825, 5828], [5831, 5833], [5834, 5836], [5837, 5840], [5841, 5854], [5855, 5857], [5858, 5869], [5870, 5872], [5873, 5878], [5879, 5885], [5886, 5893], [5894, 5903], [5904, 5906], [5907, 5910], [5911, 5917], [5918, 5921], [5922, 5925], [5926, 5936], [5937, 5948], [5949, 5951], [5952, 5955], [5956, 5965], [5966, 5968], [5969, 5974], [5975, 5980], [5981, 5989], [5990, 5999], [6000, 6003], [6004, 6008], [6008, 6009], [6009, 6010], [6011, 6014], [6015, 6018], [6019, 6023], [6024, 6036], [6037, 6040], [6041, 6046], [6047, 6049], [6050, 6053], [6054, 6060], [6061, 6063], [6064, 6068], [6068, 6069]]}) 
answer: set([u'founder', u'atomic-molecular', u'hail'])
candidate Sentence: (0.15669108927249908, {u'tokens': [u'The', u'scientific', u'community', u'did', u'not', u'give', u'great', u'attention', u'to', u'his', u'theory', u',', u'so', u'Avogadro', u"'s", u'hypothesis', u'was', u'not', u'immediately', u'accepted', u'.'], u'lemmas': [u'the', u'scientific', u'community', u'do', u'not', u'give', u'great', u'attention', u'to', u'he', u'theory', u',', u'so', u'Avogadro', u"'s", u'hypothesis', u'be', u'not', u'immediately', u'accept', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBD', u'RB', u'VB', u'JJ', u'NN', u'TO', u'PRP$', u'NN', u',', u'RB', u'NNP', u'POS', u'NN', u'VBD', u'RB', u'RB', u'VBN', u'.'], u'char_offsets': [[5616, 5619], [5620, 5630], [5631, 5640], [5641, 5644], [5645, 5648], [5649, 5653], [5654, 5659], [5660, 5669], [5670, 5672], [5673, 5676], [5677, 5683], [5683, 5684], [5685, 5687], [5688, 5696], [5696, 5698], [5699, 5709], [5710, 5713], [5714, 5717], [5718, 5729], [5730, 5738], [5738, 5739]]}) 
answer: set([u'atomic-molecular', u'hail', u'founder'])

Is Avogadro hailed as a founder of the atomic-molecular theory?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116e84638>.answer
_____________________________ test_yesno[param32] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9950>, (<src.tfidf.TF_IDF object at 0x112e8b710>, set(['ant'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, worker ants do not have wings.') == True
E                +  where 'No, worker ants do not have wings.' = <src.question_processing.Question_parser instance at 0x116ee9950>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.57592868804931641, {u'tokens': [u'Worker', u'ants', u'do', u'not', u'have', u'wings', u'and', u'reproductive', u'females', u'lose', u'their', u'wings', u'after', u'their', u'mating', u'flights', u'in', u'order', u'to', u'begin', u'their', u'colonies', u'.'], u'lemmas': [u'worker', u'ant', u'do', u'not', u'have', u'wing', u'and', u'reproductive', u'female', u'lose', u'they', u'wing', u'after', u'they', u'mating', u'flight', u'in', u'order', u'to', u'begin', u'they', u'colony', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'VB', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'PRP$', u'NNS', u'IN', u'PRP$', u'NN', u'NNS', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NNS', u'.'], u'char_offsets': [[25892, 25898], [25899, 25903], [25904, 25906], [25907, 25910], [25911, 25915], [25916, 25921], [25922, 25925], [25926, 25938], [25939, 25946], [25947, 25951], [25952, 25957], [25958, 25963], [25964, 25969], [25970, 25975], [25976, 25982], [25983, 25990], [25991, 25993], [25994, 25999], [26000, 26002], [26003, 26008], [26009, 26014], [26015, 26023], [26023, 26024]]}) 
answer: set([])
candidate Sentence: (0.32716178894042969, {u'tokens': [u'Most', u'queens', u'and', u'male', u'ants', u'have', u'wings', u';', u'queens', u'shed', u'the', u'wings', u'after', u'the', u'nuptial', u'flight', u',', u'leaving', u'visible', u'stubs', u',', u'a', u'distinguishing', u'feature', u'of', u'queens', u'.'], u'lemmas': [u'most', u'queen', u'and', u'male', u'ant', u'have', u'wing', u';', u'queen', u'shed', u'the', u'wing', u'after', u'the', u'nuptial', u'flight', u',', u'leave', u'visible', u'stub', u',', u'a', u'distinguish', u'feature', u'of', u'queen', u'.'], u'pos': [u'JJS', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'NNS', u':', u'NNS', u'VBD', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'VBG', u'JJ', u'NNS', u',', u'DT', u'VBG', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[8955, 8959], [8960, 8966], [8967, 8970], [8971, 8975], [8976, 8980], [8981, 8985], [8986, 8991], [8991, 8992], [8993, 8999], [9000, 9004], [9005, 9008], [9009, 9014], [9015, 9020], [9021, 9024], [9025, 9032], [9033, 9039], [9039, 9040], [9041, 9048], [9049, 9056], [9057, 9062], [9062, 9063], [9064, 9065], [9066, 9080], [9081, 9088], [9089, 9091], [9092, 9098], [9098, 9099]]}) 
answer: set([u'worker'])
candidate Sentence: (0.23581318557262421, {u'tokens': [u'There', u',', u'they', u'break', u'off', u'their', u'wings', u'and', u'begin', u'to', u'lay', u'and', u'care', u'for', u'eggs', u'.'], u'lemmas': [u'there', u',', u'they', u'break', u'off', u'they', u'wing', u'and', u'begin', u'to', u'lay', u'and', u'care', u'for', u'egg', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'RP', u'PRP$', u'NNS', u'CC', u'VB', u'TO', u'VB', u'CC', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[14640, 14645], [14645, 14646], [14647, 14651], [14652, 14657], [14658, 14661], [14662, 14667], [14668, 14673], [14674, 14677], [14678, 14683], [14684, 14686], [14687, 14690], [14691, 14694], [14695, 14699], [14700, 14703], [14704, 14708], [14708, 14709]]}) 
answer: set([u'worker'])
candidate Sentence: (0.17353235185146332, {u'tokens': [u'Here', u'birds', u'rest', u'on', u'ant', u'nests', u',', u'or', u'pick', u'and', u'drop', u'ants', u'onto', u'their', u'wings', u'and', u'feathers', u';', u'this', u'may', u'remove', u'ectoparasites', u'.'], u'lemmas': [u'here', u'bird', u'rest', u'on', u'ant', u'nest', u',', u'or', u'pick', u'and', u'drop', u'ant', u'onto', u'they', u'wing', u'and', u'feather', u';', u'this', u'may', u'remove', u'ectoparasite', u'.'], u'pos': [u'RB', u'NNS', u'NN', u'IN', u'NN', u'NNS', u',', u'CC', u'NN', u'CC', u'NN', u'NNS', u'IN', u'PRP$', u'NNS', u'CC', u'NNS', u':', u'DT', u'MD', u'VB', u'NNS', u'.'], u'char_offsets': [[36956, 36960], [36961, 36966], [36967, 36971], [36972, 36974], [36975, 36978], [36979, 36984], [36984, 36985], [36986, 36988], [36989, 36993], [36994, 36997], [36998, 37002], [37003, 37007], [37008, 37012], [37013, 37018], [37019, 37024], [37025, 37028], [37029, 37037], [37037, 37038], [37039, 37043], [37044, 37047], [37048, 37054], [37055, 37068], [37068, 37069]]}) 
answer: set([u'worker'])
candidate Sentence: (0.16383858025074005, {u'tokens': [u'Aesop', u'did', u'the', u'same', u'in', u'his', u'fable', u'The', u'Ant', u'and', u'the', u'Grasshopper', u'.'], u'lemmas': [u'Aesop', u'do', u'the', u'same', u'in', u'he', u'fable', u'the', u'ant', u'and', u'the', u'Grasshopper', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'JJ', u'DT', u'NN', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[43295, 43300], [43301, 43304], [43305, 43308], [43309, 43313], [43314, 43316], [43317, 43320], [43321, 43326], [43327, 43330], [43331, 43334], [43335, 43338], [43339, 43342], [43343, 43354], [43354, 43355]]}) 
answer: set([u'worker', u'wing'])

Do worker ants have wings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, worker ants do not have wings.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, worker ants do not have wings.') == True
 +  where 'No, worker ants do not have wings.' = <src.question_processing.Question_parser instance at 0x116ee9950>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param36] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9b00>, (<src.tfidf.TF_IDF object at 0x11129b910>, set(['arabic', 'arabic_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ee9b00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24048967659473419, {u'tokens': [u'By', u'the', u'fourth', u'century', u'AD', u',', u'the', u'Arab', u'kingdoms', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerged', u'in', u'Central', u'Arabia', u'.'], u'lemmas': [u'by', u'the', u'fourth', u'century', u'ad', u',', u'the', u'Arab', u'kingdom', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerge', u'in', u'Central', u'Arabia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'DT', u'NNP', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u',', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[7969, 7971], [7972, 7975], [7976, 7982], [7983, 7990], [7991, 7993], [7993, 7994], [7995, 7998], [7999, 8003], [8004, 8012], [8013, 8015], [8016, 8019], [8020, 8028], [8029, 8031], [8032, 8040], [8041, 8045], [8045, 8046], [8047, 8050], [8051, 8061], [8062, 8064], [8065, 8073], [8074, 8079], [8080, 8083], [8084, 8091], [8092, 8099], [8100, 8107], [8108, 8110], [8111, 8118], [8119, 8125], [8125, 8126]]}) 
answer: set([u'semitic'])
candidate Sentence: (0.11855049431324005, {u'tokens': [u'``', u'Arabic', u'language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[534, 535], [535, 541], [542, 550], [550, 551], [551, 552]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11855049431324005, {u'tokens': [u'``', u'Arabic', u'Language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[2978, 2979], [2979, 2985], [2986, 2994], [2994, 2995], [2995, 2996]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11421117186546326, {u'tokens': [u'Most', u'linguists', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'lemmas': [u'most', u'linguist', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'RB', u'IN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[3591, 3595], [3596, 3605], [3606, 3610], [3611, 3613], [3614, 3616], [3617, 3618], [3619, 3627], [3628, 3636], [3637, 3643], [3644, 3648], [3649, 3651], [3652, 3653], [3654, 3661], [3662, 3664], [3665, 3671], [3671, 3672]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11280353367328644, {u'tokens': [u'Arabic', u'is', u'the', u'language', u'of', u'the', u'Qur', u'`', u'an', u'.'], u'lemmas': [u'arabic', u'be', u'the', u'language', u'of', u'the', u'Qur', u'`', u'a', u'.'], u'pos': [u'JJ', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'``', u'DT', u'.'], u'char_offsets': [[6650, 6656], [6657, 6659], [6660, 6663], [6664, 6672], [6673, 6675], [6676, 6679], [6680, 6683], [6683, 6684], [6684, 6686], [6686, 6687]]}) 
answer: set([u'semitic', u'central'])

Is Arabic a Central Semitic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ee9b00>.answer
_____________________________ test_yesno[param46] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9dd0>, (<src.tfidf.TF_IDF object at 0x11485ce10>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9dd0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30907830595970154, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[42073, 42076], [42077, 42083], [42084, 42096], [42097, 42106], [42107, 42109], [42110, 42113], [42114, 42116], [42117, 42120], [42121, 42131], [42132, 42142], [42143, 42145], [42146, 42149], [42150, 42155], [42155, 42156], [42158, 42160], [42161, 42167], [42167, 42169], [42170, 42176], [42177, 42186], [42187, 42191], [42191, 42192]]}) 
answer: set([u'city', u'germany', u'capital'])
candidate Sentence: (0.2811722457408905, {u'tokens': [u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [7, 8], [9, 10], [12, 13], [14, 16], [17, 20], [21, 28], [29, 33], [34, 37], [38, 41], [42, 44], [45, 47], [48, 54], [55, 57], [58, 65], [65, 66]]}) 
answer: set([])
candidate Sentence: (0.22475744783878326, {u'tokens': [u'Berlin', u'is', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'is', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'is', u'Schloss', u'Bellevue', u'.'], u'lemmas': [u'Berlin', u'be', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'be', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'be', u'Schloss', u'Bellevue', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u',', u'WP$', u'JJ', u'NN', u'VBZ', u'NNP', u'NNP', u'.'], u'char_offsets': [[18208, 18214], [18215, 18217], [18218, 18221], [18222, 18229], [18230, 18232], [18233, 18236], [18237, 18244], [18245, 18253], [18254, 18256], [18257, 18264], [18265, 18268], [18269, 18271], [18272, 18275], [18276, 18280], [18281, 18283], [18284, 18287], [18288, 18297], [18298, 18300], [18301, 18308], [18308, 18309], [18310, 18315], [18316, 18324], [18325, 18334], [18335, 18337], [18338, 18345], [18346, 18354], [18354, 18355]]}) 
answer: set([u'city'])
candidate Sentence: (0.18567311763763428, {u'tokens': [u'On', u'3', u'October', u'1990', u'the', u'two', u'parts', u'of', u'Germany', u'were', u'reunified', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'became', u'the', u'German', u'capital', u'according', u'to', u'the', u'unification', u'treaty', u'.'], u'lemmas': [u'on', u'3', u'October', u'1990', u'the', u'two', u'part', u'of', u'Germany', u'be', u'reunify', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'become', u'the', u'german', u'capital', u'accord', u'to', u'the', u'unification', u'treaty', u'.'], u'pos': [u'IN', u'CD', u'NNP', u'CD', u'DT', u'CD', u'NNS', u'IN', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'CC', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'VBG', u'TO', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[9869, 9871], [9872, 9873], [9874, 9881], [9882, 9886], [9887, 9890], [9891, 9894], [9895, 9900], [9901, 9903], [9904, 9911], [9912, 9916], [9917, 9926], [9927, 9929], [9930, 9933], [9934, 9941], [9942, 9950], [9951, 9953], [9954, 9961], [9961, 9962], [9963, 9966], [9967, 9973], [9974, 9980], [9981, 9984], [9985, 9991], [9992, 9999], [10000, 10009], [10010, 10012], [10013, 10016], [10017, 10028], [10029, 10035], [10035, 10036]]}) 
answer: set([u'city'])
candidate Sentence: (0.15969072282314301, {u'tokens': [u'Following', u'German', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regained', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'hosting', u'147', u'foreign', u'embassies', u'.'], u'lemmas': [u'follow', u'german', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regain', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'host', u'147', u'foreign', u'embassy', u'.'], u'pos': [u'VBG', u'JJ', u'NN', u'IN', u'CD', u',', u'DT', u'NN', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'VBG', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[1061, 1070], [1071, 1077], [1078, 1091], [1092, 1094], [1095, 1099], [1099, 1100], [1101, 1104], [1105, 1109], [1110, 1118], [1119, 1122], [1123, 1129], [1130, 1132], [1133, 1136], [1137, 1144], [1145, 1147], [1148, 1151], [1152, 1159], [1160, 1167], [1168, 1171], [1172, 1179], [1180, 1189], [1189, 1190]]}) 
answer: set([])

Is Berlin the capital city of Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9dd0>.answer
_____________________________ test_yesno[param48] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9e60>, (<src.tfidf.TF_IDF object at 0x11485ce10>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.31826883554458618, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[42073, 42076], [42077, 42083], [42084, 42096], [42097, 42106], [42107, 42109], [42110, 42113], [42114, 42116], [42117, 42120], [42121, 42131], [42132, 42142], [42143, 42145], [42146, 42149], [42150, 42155], [42155, 42156], [42158, 42160], [42161, 42167], [42167, 42169], [42170, 42176], [42177, 42186], [42187, 42191], [42191, 42192]]}) 
answer: set([u'city', u'germany', u'largest'])
candidate Sentence: (0.23269101977348328, {u'tokens': [u'With', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'is', u'Germany', u"'s", u'largest', u'city', u'.'], u'lemmas': [u'with', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'be', u'Germany', u"'s", u'largest', u'city', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'CD', u'CD', u'NNS', u',', u'NNP', u'VBZ', u'NNP', u'POS', u'JJS', u'NN', u'.'], u'char_offsets': [[67, 71], [72, 73], [74, 84], [85, 87], [88, 91], [92, 99], [100, 106], [106, 107], [108, 114], [115, 117], [118, 125], [125, 127], [128, 135], [136, 140], [140, 141]]}) 
answer: set([])
candidate Sentence: (0.15405464172363281, {u'tokens': [u'The', u'Berlin', u'Hauptbahnhof', u'is', u'the', u'largest', u'crossing', u'station', u'in', u'Europe', u'.'], u'lemmas': [u'the', u'Berlin', u'Hauptbahnhof', u'be', u'the', u'largest', u'cross', u'station', u'in', u'Europe', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[47122, 47125], [47126, 47132], [47133, 47145], [47146, 47148], [47149, 47152], [47153, 47160], [47161, 47169], [47170, 47177], [47178, 47180], [47181, 47187], [47187, 47188]]}) 
answer: set([u'city', u'germany'])
candidate Sentence: (0.13956756889820099, {u'tokens': [u'It', u'is', u'the', u'largest', u'remaining', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'lemmas': [u'it', u'be', u'the', u'largest', u'remain', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[14278, 14280], [14281, 14283], [14284, 14287], [14288, 14295], [14296, 14305], [14306, 14314], [14315, 14317], [14318, 14321], [14322, 14326], [14326, 14328], [14329, 14339], [14340, 14348], [14348, 14349]]}) 
answer: set([u'germany'])
candidate Sentence: (0.12994390726089478, {u'tokens': [u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [7, 8], [9, 10], [12, 13], [14, 16], [17, 20], [21, 28], [29, 33], [34, 37], [38, 41], [42, 44], [45, 47], [48, 54], [55, 57], [58, 65], [65, 66]]}) 
answer: set([u'largest'])

Is Berlin the largest city in Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9e60>.answer
_____________________________ test_yesno[param49] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9ea8>, (<src.tfidf.TF_IDF object at 0x11485ce10>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes. ')
E                +    where 'yes. ' = <src.question_processing.Question_parser instance at 0x116ee9ea8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42407342791557312, {u'tokens': [u'Schloss', u'Charlottenburg', u',', u'which', u'was', u'burnt', u'out', u'in', u'the', u'Second', u'World', u'War', u'and', u'largely', u'destroyed', u',', u'has', u'been', u'rebuilt', u'and', u'is', u'the', u'largest', u'surviving', u'historical', u'palace', u'in', u'Berlin', u'.'], u'lemmas': [u'Schloss', u'Charlottenburg', u',', u'which', u'be', u'burn', u'out', u'in', u'the', u'second', u'World', u'War', u'and', u'largely', u'destroy', u',', u'have', u'be', u'rebuild', u'and', u'be', u'the', u'largest', u'survive', u'historical', u'palace', u'in', u'Berlin', u'.'], u'pos': [u'NNP', u'NNP', u',', u'WDT', u'VBD', u'VBN', u'RP', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'CC', u'RB', u'VBN', u',', u'VBZ', u'VBN', u'VBN', u'CC', u'VBZ', u'DT', u'JJS', u'VBG', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[17776, 17783], [17784, 17798], [17798, 17799], [17800, 17805], [17806, 17809], [17810, 17815], [17816, 17819], [17820, 17822], [17823, 17826], [17827, 17833], [17834, 17839], [17840, 17843], [17844, 17847], [17848, 17855], [17856, 17865], [17865, 17866], [17867, 17870], [17871, 17875], [17876, 17883], [17884, 17887], [17888, 17890], [17891, 17894], [17895, 17902], [17903, 17912], [17913, 17923], [17924, 17930], [17931, 17933], [17934, 17940], [17940, 17941]]}) 
answer: set([u'exist'])
candidate Sentence: (0.21522262692451477, {u'tokens': [u'The', u'Deutsche', u'Oper', u'opened', u'in', u'1912', u'in', u'Charlottenburg', u'.'], u'lemmas': [u'the', u'Deutsche', u'Oper', u'open', u'in', u'1912', u'in', u'Charlottenburg', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'CD', u'IN', u'NNP', u'.'], u'char_offsets': [[41874, 41877], [41878, 41886], [41887, 41891], [41892, 41898], [41899, 41901], [41902, 41906], [41907, 41909], [41910, 41924], [41924, 41925]]}) 
answer: set([u'schloss', u'exist', u'palace', u'largest'])
candidate Sentence: (0.21464258432388306, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[42073, 42076], [42077, 42083], [42084, 42096], [42097, 42106], [42107, 42109], [42110, 42113], [42114, 42116], [42117, 42120], [42121, 42131], [42132, 42142], [42143, 42145], [42146, 42149], [42150, 42155], [42155, 42156], [42158, 42160], [42161, 42167], [42167, 42169], [42170, 42176], [42177, 42186], [42187, 42191], [42191, 42192]]}) 
answer: set([u'schloss', u'exist', u'palace', u'charlottenburg', u'largest'])
candidate Sentence: (0.17142021656036377, {u'tokens': [u'West', u'of', u'the', u'center', u',', u'Schloss', u'Bellevue', u'is', u'the', u'residence', u'of', u'the', u'German', u'President', u'.'], u'lemmas': [u'West', u'of', u'the', u'center', u',', u'Schloss', u'Bellevue', u'be', u'the', u'residence', u'of', u'the', u'German', u'President', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[17697, 17701], [17702, 17704], [17705, 17708], [17709, 17715], [17715, 17716], [17717, 17724], [17725, 17733], [17734, 17736], [17737, 17740], [17741, 17750], [17751, 17753], [17754, 17757], [17758, 17764], [17765, 17774], [17774, 17775]]}) 
answer: set([u'exist', u'palace', u'charlottenburg', u'largest'])
candidate Sentence: (0.1407972127199173, {u'tokens': [u'In', u'1448', u'citizens', u'rebelled', u'in', u'the', u'``', u'Berlin', u'Indignation', u"''", u'against', u'the', u'construction', u'of', u'a', u'new', u'royal', u'palace', u'by', u'Elector', u'Frederick', u'II', u'Irontooth', u'.'], u'lemmas': [u'in', u'1448', u'citizen', u'rebel', u'in', u'the', u'``', u'Berlin', u'Indignation', u"''", u'against', u'the', u'construction', u'of', u'a', u'new', u'royal', u'palace', u'by', u'Elector', u'Frederick', u'II', u'Irontooth', u'.'], u'pos': [u'IN', u'CD', u'NNS', u'VBD', u'IN', u'DT', u'``', u'NNP', u'NNP', u"''", u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[3574, 3576], [3577, 3581], [3582, 3590], [3591, 3599], [3600, 3602], [3603, 3606], [3607, 3608], [3608, 3614], [3615, 3626], [3626, 3627], [3628, 3635], [3636, 3639], [3640, 3652], [3653, 3655], [3656, 3657], [3658, 3661], [3662, 3667], [3668, 3674], [3675, 3677], [3678, 3685], [3686, 3695], [3696, 3698], [3699, 3708], [3708, 3709]]}) 
answer: set([u'schloss', u'exist', u'charlottenburg', u'largest'])

Is Schloss Charlottenburg the largest existing palace in Berlin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes. 
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes. ')
 +    where 'yes. ' = <src.question_processing.Question_parser instance at 0x116ee9ea8>.answer
_____________________________ test_yesno[param50] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116ee9ef0>, (<src.tfidf.TF_IDF object at 0x11485ce10>, set(['berlin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9ef0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42407342791557312, {u'tokens': [u'Schloss', u'Charlottenburg', u',', u'which', u'was', u'burnt', u'out', u'in', u'the', u'Second', u'World', u'War', u'and', u'largely', u'destroyed', u',', u'has', u'been', u'rebuilt', u'and', u'is', u'the', u'largest', u'surviving', u'historical', u'palace', u'in', u'Berlin', u'.'], u'lemmas': [u'Schloss', u'Charlottenburg', u',', u'which', u'be', u'burn', u'out', u'in', u'the', u'second', u'World', u'War', u'and', u'largely', u'destroy', u',', u'have', u'be', u'rebuild', u'and', u'be', u'the', u'largest', u'survive', u'historical', u'palace', u'in', u'Berlin', u'.'], u'pos': [u'NNP', u'NNP', u',', u'WDT', u'VBD', u'VBN', u'RP', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'CC', u'RB', u'VBN', u',', u'VBZ', u'VBN', u'VBN', u'CC', u'VBZ', u'DT', u'JJS', u'VBG', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[17776, 17783], [17784, 17798], [17798, 17799], [17800, 17805], [17806, 17809], [17810, 17815], [17816, 17819], [17820, 17822], [17823, 17826], [17827, 17833], [17834, 17839], [17840, 17843], [17844, 17847], [17848, 17855], [17856, 17865], [17865, 17866], [17867, 17870], [17871, 17875], [17876, 17883], [17884, 17887], [17888, 17890], [17891, 17894], [17895, 17902], [17903, 17912], [17913, 17923], [17924, 17930], [17931, 17933], [17934, 17940], [17940, 17941]]}) 
answer: set([u'exist'])
candidate Sentence: (0.21522262692451477, {u'tokens': [u'The', u'Deutsche', u'Oper', u'opened', u'in', u'1912', u'in', u'Charlottenburg', u'.'], u'lemmas': [u'the', u'Deutsche', u'Oper', u'open', u'in', u'1912', u'in', u'Charlottenburg', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'CD', u'IN', u'NNP', u'.'], u'char_offsets': [[41874, 41877], [41878, 41886], [41887, 41891], [41892, 41898], [41899, 41901], [41902, 41906], [41907, 41909], [41910, 41924], [41924, 41925]]}) 
answer: set([u'schloss', u'exist', u'palace', u'largest'])
candidate Sentence: (0.21464258432388306, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[42073, 42076], [42077, 42083], [42084, 42096], [42097, 42106], [42107, 42109], [42110, 42113], [42114, 42116], [42117, 42120], [42121, 42131], [42132, 42142], [42143, 42145], [42146, 42149], [42150, 42155], [42155, 42156], [42158, 42160], [42161, 42167], [42167, 42169], [42170, 42176], [42177, 42186], [42187, 42191], [42191, 42192]]}) 
answer: set([u'schloss', u'exist', u'palace', u'charlottenburg', u'largest'])
candidate Sentence: (0.17142021656036377, {u'tokens': [u'West', u'of', u'the', u'center', u',', u'Schloss', u'Bellevue', u'is', u'the', u'residence', u'of', u'the', u'German', u'President', u'.'], u'lemmas': [u'West', u'of', u'the', u'center', u',', u'Schloss', u'Bellevue', u'be', u'the', u'residence', u'of', u'the', u'German', u'President', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NN', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[17697, 17701], [17702, 17704], [17705, 17708], [17709, 17715], [17715, 17716], [17717, 17724], [17725, 17733], [17734, 17736], [17737, 17740], [17741, 17750], [17751, 17753], [17754, 17757], [17758, 17764], [17765, 17774], [17774, 17775]]}) 
answer: set([u'exist', u'palace', u'charlottenburg', u'largest'])
candidate Sentence: (0.1407972127199173, {u'tokens': [u'In', u'1448', u'citizens', u'rebelled', u'in', u'the', u'``', u'Berlin', u'Indignation', u"''", u'against', u'the', u'construction', u'of', u'a', u'new', u'royal', u'palace', u'by', u'Elector', u'Frederick', u'II', u'Irontooth', u'.'], u'lemmas': [u'in', u'1448', u'citizen', u'rebel', u'in', u'the', u'``', u'Berlin', u'Indignation', u"''", u'against', u'the', u'construction', u'of', u'a', u'new', u'royal', u'palace', u'by', u'Elector', u'Frederick', u'II', u'Irontooth', u'.'], u'pos': [u'IN', u'CD', u'NNS', u'VBD', u'IN', u'DT', u'``', u'NNP', u'NNP', u"''", u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[3574, 3576], [3577, 3581], [3582, 3590], [3591, 3599], [3600, 3602], [3603, 3606], [3607, 3608], [3608, 3614], [3615, 3626], [3626, 3627], [3628, 3635], [3636, 3639], [3640, 3652], [3653, 3655], [3656, 3657], [3658, 3661], [3662, 3667], [3668, 3674], [3675, 3677], [3678, 3685], [3686, 3695], [3696, 3698], [3699, 3708], [3708, 3709]]}) 
answer: set([u'schloss', u'exist', u'charlottenburg', u'largest'])

Is Schloss Charlottenburg the largest existing palace in Berlin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ee9ef0>.answer
_____________________________ test_yesno[param56] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea0e0>, (<src.tfidf.TF_IDF object at 0x11485c310>, set(['blaise', 'blaise_pascal', 'pascal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea0e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.48414793610572815, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11762, 11765], [11766, 11768], [11768, 11769]]}) 
answer: set([u'mathematician', u'french'])
candidate Sentence: (0.37644895911216736, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[552, 558], [559, 562], [563, 564], [565, 578], [579, 581], [582, 585], [586, 591], [592, 597], [597, 598]]}) 
answer: set([u'french'])
candidate Sentence: (0.22699575126171112, {u'tokens': [u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 6], [7, 13], [14, 15], [16, 17], [17, 18], [19, 20], [20, 22], [23, 33], [34, 36], [37, 53], [53, 54], [55, 61], [61, 62], [63, 65], [66, 76], [77, 79], [80, 85], [85, 86], [87, 90], [91, 92], [93, 99], [100, 113], [113, 114], [115, 124], [124, 125], [126, 129], [130, 139], [140, 151], [151, 152]]}) 
answer: set([])
candidate Sentence: (0.16364733874797821, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[31923, 31929], [31930, 31936], [31936, 31937], [31938, 31951], [31951, 31952], [31953, 31962], [31962, 31963], [31964, 31967], [31968, 31975], [31976, 31981], [31982, 31985], [31986, 31987], [31987, 31991], [31991, 31992], [31993, 31994], [31995, 32002], [32002, 32003], [32004, 32010], [32010, 32011]]}) 
answer: set([u'french'])
candidate Sentence: (0.16347204148769379, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[30786, 30788], [30789, 30799], [30799, 30800], [30801, 30807], [30808, 30810], [30811, 30819], [30820, 30822], [30823, 30826], [30827, 30829], [30830, 30833], [30834, 30838], [30839, 30848], [30849, 30856], [30857, 30859], [30860, 30863], [30864, 30870], [30871, 30880], [30881, 30887], [30888, 30891], [30892, 30894], [30895, 30899], [30900, 30905], [30906, 30908], [30909, 30912], [30913, 30915], [30916, 30919], [30920, 30928], [30929, 30936], [30937, 30939], [30940, 30946], [30947, 30952], [30952, 30953]]}) 
answer: set([u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea0e0>.answer
_____________________________ test_yesno[param57] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea128>, (<src.tfidf.TF_IDF object at 0x11485c310>, set(['blaise', 'blaise_pascal', 'pascal'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eea128>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.48414793610572815, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11762, 11765], [11766, 11768], [11768, 11769]]}) 
answer: set([u'mathematician', u'french'])
candidate Sentence: (0.37644895911216736, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[552, 558], [559, 562], [563, 564], [565, 578], [579, 581], [582, 585], [586, 591], [592, 597], [597, 598]]}) 
answer: set([u'french'])
candidate Sentence: (0.22699575126171112, {u'tokens': [u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 6], [7, 13], [14, 15], [16, 17], [17, 18], [19, 20], [20, 22], [23, 33], [34, 36], [37, 53], [53, 54], [55, 61], [61, 62], [63, 65], [66, 76], [77, 79], [80, 85], [85, 86], [87, 90], [91, 92], [93, 99], [100, 113], [113, 114], [115, 124], [124, 125], [126, 129], [130, 139], [140, 151], [151, 152]]}) 
answer: set([])
candidate Sentence: (0.16364733874797821, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[31923, 31929], [31930, 31936], [31936, 31937], [31938, 31951], [31951, 31952], [31953, 31962], [31962, 31963], [31964, 31967], [31968, 31975], [31976, 31981], [31982, 31985], [31986, 31987], [31987, 31991], [31991, 31992], [31993, 31994], [31995, 32002], [32002, 32003], [32004, 32010], [32010, 32011]]}) 
answer: set([u'french'])
candidate Sentence: (0.16347204148769379, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[30786, 30788], [30789, 30799], [30799, 30800], [30801, 30807], [30808, 30810], [30811, 30819], [30820, 30822], [30823, 30826], [30827, 30829], [30830, 30833], [30834, 30838], [30839, 30848], [30849, 30856], [30857, 30859], [30860, 30863], [30864, 30870], [30871, 30880], [30881, 30887], [30888, 30891], [30892, 30894], [30895, 30899], [30900, 30905], [30906, 30908], [30909, 30912], [30913, 30915], [30916, 30919], [30920, 30928], [30929, 30936], [30937, 30939], [30940, 30946], [30947, 30952], [30952, 30953]]}) 
answer: set([u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eea128>.answer
_____________________________ test_yesno[param60] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea200>, (<src.tfidf.TF_IDF object at 0x11129b950>, set(['butterfly'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Some butterflies make sounds.') == True
E                +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x116eea200>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.18984135985374451, {u'tokens': [u'39:229', u'-233', u'Michiyo', u'Kinoshita', u',', u'Naoko', u'Shimada', u'And', u'Kentaro', u'Arikawa', u'-LRB-', u'1999', u'-RRB-', u'Color', u'vision', u'of', u'the', u'foraging', u'swallowtail', u'butterfly', u"''", u'Papilio', u'Some', u'butterflies', u'have', u'organs', u'of', u'hearing', u'and', u'some', u'species', u'are', u'also', u'known', u'to', u'make', u'stridulatory', u'and', u'clicking', u'sounds', u'.'], u'lemmas': [u'39:229', u'-233', u'Michiyo', u'Kinoshita', u',', u'Naoko', u'Shimada', u'and', u'Kentaro', u'Arikawa', u'-lrb-', u'1999', u'-rrb-', u'Color', u'vision', u'of', u'the', u'forage', u'swallowtail', u'butterfly', u"''", u'Papilio', u'some', u'butterfly', u'have', u'organ', u'of', u'hearing', u'and', u'some', u'species', u'be', u'also', u'know', u'to', u'make', u'stridulatory', u'and', u'click', u'sound', u'.'], u'pos': [u'CD', u'CD', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'NN', u'IN', u'DT', u'VBG', u'NN', u'NN', u"''", u'NNP', u'DT', u'NNS', u'VBP', u'NNS', u'IN', u'NN', u'CC', u'DT', u'NNS', u'VBP', u'RB', u'VBN', u'TO', u'VB', u'JJ', u'CC', u'VBG', u'NNS', u'.'], u'char_offsets': [[17333, 17339], [17339, 17343], [17346, 17353], [17354, 17363], [17363, 17364], [17365, 17370], [17371, 17378], [17379, 17382], [17383, 17390], [17391, 17398], [17399, 17400], [17400, 17404], [17404, 17405], [17406, 17411], [17412, 17418], [17419, 17421], [17422, 17425], [17426, 17434], [17435, 17446], [17447, 17456], [17457, 17459], [17459, 17466], [17467, 17471], [17472, 17483], [17484, 17488], [17489, 17495], [17496, 17498], [17499, 17506], [17507, 17510], [17511, 17515], [17516, 17523], [17524, 17527], [17528, 17532], [17533, 17538], [17539, 17541], [17542, 17546], [17547, 17559], [17560, 17563], [17564, 17572], [17573, 17579], [17579, 17580]]}) 
answer: set([])
candidate Sentence: (0.17789159715175629, {u'tokens': [u'This', u'helps', u'making', u'them', u'unpalatable', u'to', u'birds', u'and', u'other', u'predators', u'.'], u'lemmas': [u'this', u'help', u'make', u'they', u'unpalatable', u'to', u'bird', u'and', u'other', u'predator', u'.'], u'pos': [u'DT', u'VBZ', u'VBG', u'PRP', u'JJ', u'TO', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5021, 5025], [5026, 5031], [5032, 5038], [5039, 5043], [5044, 5055], [5056, 5058], [5059, 5064], [5065, 5068], [5069, 5074], [5075, 5084], [5084, 5085]]}) 
answer: set([u'sound'])
candidate Sentence: (0.16375178098678589, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[21390, 21396], [21396, 21397], [21398, 21399], [21400, 21401], [21402, 21403], [21403, 21404], [21405, 21408], [21409, 21411], [21412, 21419], [21419, 21420], [21421, 21426], [21427, 21429], [21430, 21436], [21437, 21440], [21441, 21446], [21447, 21449], [21450, 21453], [21454, 21455], [21455, 21459], [21459, 21460], [21461, 21465], [21466, 21470], [21471, 21478], [21479, 21486], [21487, 21498], [21499, 21505], [21506, 21518], [21519, 21523], [21523, 21524]]}) 
answer: set([u'sound', u'make'])
candidate Sentence: (0.15062651038169861, {u'tokens': [u'The', u'chrysalis', u'is', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segments', u'or', u'produce', u'sounds', u'to', u'scare', u'potential', u'predators', u'.'], u'lemmas': [u'the', u'chrysali', u'be', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segment', u'or', u'produce', u'sound', u'to', u'scare', u'potential', u'predator', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'NN', u',', u'IN', u'DT', u'NNS', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NNS', u'CC', u'VB', u'NNS', u'TO', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[7062, 7065], [7066, 7075], [7076, 7078], [7079, 7086], [7087, 7096], [7097, 7099], [7100, 7108], [7108, 7109], [7110, 7118], [7119, 7123], [7124, 7131], [7132, 7135], [7136, 7143], [7144, 7148], [7149, 7152], [7153, 7162], [7163, 7171], [7172, 7174], [7175, 7182], [7183, 7189], [7190, 7192], [7193, 7198], [7199, 7208], [7209, 7218], [7218, 7219]]}) 
answer: set([u'make'])
candidate Sentence: (0.13592489063739777, {u'tokens': [u'Does', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'Bicyclus', u'anynana', u'.'], u'lemmas': [u'do', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'bicyclus', u'anynana', u'.'], u'pos': [u'VBZ', u'NN', u'VB', u'NN', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13114, 13118], [13119, 13128], [13129, 13137], [13138, 13145], [13146, 13156], [13157, 13159], [13160, 13168], [13169, 13176], [13176, 13177]]}) 
answer: set([u'sound', u'make'])

Do butterflies make sounds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Some butterflies make sounds.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Some butterflies make sounds.') == True
 +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x116eea200>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param62] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea290>, (<src.tfidf.TF_IDF object at 0x11129b950>, set(['butterfly'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
E                +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x116eea290>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.5715985894203186, {u'tokens': [u'Also', u',', u'in', u'the', u'Philippines', u',', u'a', u'lingering', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'is', u'taken', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'has', u'died', u'or', u'will', u'soon', u'die', u'.'], u'lemmas': [u'also', u',', u'in', u'the', u'Philippines', u',', u'a', u'linger', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'be', u'take', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'have', u'die', u'or', u'will', u'soon', u'die', u'.'], u'pos': [u'RB', u',', u'IN', u'DT', u'NNPS', u',', u'DT', u'VBG', u'JJ', u'NN', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'IN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'CC', u'MD', u'RB', u'VB', u'.'], u'char_offsets': [[28497, 28501], [28501, 28502], [28503, 28505], [28506, 28509], [28510, 28521], [28521, 28522], [28523, 28524], [28525, 28534], [28535, 28540], [28541, 28550], [28551, 28553], [28554, 28558], [28559, 28561], [28562, 28565], [28566, 28571], [28572, 28574], [28575, 28580], [28581, 28583], [28584, 28588], [28589, 28593], [28594, 28601], [28602, 28604], [28605, 28608], [28609, 28615], [28616, 28619], [28620, 28624], [28625, 28627], [28628, 28632], [28633, 28637], [28638, 28641], [28641, 28642]]}) 
answer: set([])
candidate Sentence: (0.14392825961112976, {u'tokens': [u'Some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'lands', u'on', u'you', u'it', u'means', u'good', u'luck', u'.'], u'lemmas': [u'some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'land', u'on', u'you', u'it', u'mean', u'good', u'luck', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'IN', u'WRB', u'DT', u'NN', u'NNS', u'IN', u'PRP', u'PRP', u'VBZ', u'JJ', u'NN', u'.'], u'char_offsets': [[27478, 27482], [27483, 27489], [27490, 27493], [27494, 27498], [27499, 27503], [27504, 27505], [27506, 27515], [27516, 27521], [27522, 27524], [27525, 27528], [27529, 27531], [27532, 27537], [27538, 27542], [27543, 27547], [27547, 27548]]}) 
answer: set([u'moth', u'die', u'someone', u'black'])
candidate Sentence: (0.11445729434490204, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[21390, 21396], [21396, 21397], [21398, 21399], [21400, 21401], [21402, 21403], [21403, 21404], [21405, 21408], [21409, 21411], [21412, 21419], [21419, 21420], [21421, 21426], [21427, 21429], [21430, 21436], [21437, 21440], [21441, 21446], [21447, 21449], [21450, 21453], [21454, 21455], [21455, 21459], [21459, 21460], [21461, 21465], [21466, 21470], [21471, 21478], [21479, 21486], [21487, 21498], [21499, 21505], [21506, 21518], [21519, 21523], [21523, 21524]]}) 
answer: set([u'moth', u'die', u'someone', u'black', u'mean'])
candidate Sentence: (0.10759253799915314, {u'tokens': [u'According', u'to', u'the', u'``', u'Butterflies', u"''", u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'is', u'seen', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'living', u',', u'dying', u',', u'or', u'already', u'dead', u'.'], u'lemmas': [u'accord', u'to', u'the', u'``', u'Butterflies', u"''", u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'be', u'see', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'live', u',', u'die', u',', u'or', u'already', u'dead', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'``', u'NNPS', u"''", u'NN', u'IN', u',', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u':', u'IN', u'PRP', u'VB', u'VBG', u',', u'VBG', u',', u'CC', u'RB', u'JJ', u'.'], u'char_offsets': [[24907, 24916], [24917, 24919], [24920, 24923], [24924, 24925], [24925, 24936], [24936, 24937], [24938, 24945], [24946, 24948], [24949, 24950], [24951, 24953], [24954, 24962], [24963, 24968], [24968, 24969], [24970, 24971], [24972, 24981], [24982, 24984], [24985, 24989], [24990, 24992], [24993, 24996], [24997, 25012], [25013, 25015], [25016, 25017], [25018, 25024], [25024, 25026], [25027, 25031], [25031, 25032], [25033, 25040], [25041, 25045], [25046, 25048], [25049, 25055], [25055, 25056], [25057, 25062], [25062, 25063], [25064, 25066], [25067, 25074], [25075, 25079], [25079, 25080]]}) 
answer: set([u'moth', u'someone', u'black', u'mean'])
candidate Sentence: (0.10612095147371292, {u'tokens': [u'Such', u'unpalatibility', u'is', u'advertised', u'using', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colours', u'.'], u'lemmas': [u'such', u'unpalatibility', u'be', u'advertise', u'use', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colour', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBG', u'JJ', u'NN', u',', u'NN', u',', u'JJ', u'CC', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[5086, 5090], [5091, 5105], [5106, 5108], [5109, 5119], [5120, 5125], [5126, 5132], [5133, 5136], [5136, 5137], [5138, 5144], [5144, 5145], [5146, 5151], [5152, 5154], [5155, 5160], [5161, 5168], [5169, 5176], [5176, 5177]]}) 
answer: set([u'moth', u'die', u'someone', u'mean'])

Does a black moth mean that someone has died?
Validity= False
Question Type = NA
Answer Type = NA
Answer = In the Philippines a black butterfly or moth mean that someone has died.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
 +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x116eea290>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param67] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea440>, (<src.tfidf.TF_IDF object at 0x115c7b050>, set(['charles-augustin', 'charles-augustin_de_coulomb', 'coulomb', 'de'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eea440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45375323295593262, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1725, 1729], [1730, 1733], [1734, 1740], [1741, 1743], [1744, 1750], [1750, 1751], [1752, 1756], [1757, 1760], [1761, 1765], [1766, 1768], [1769, 1776], [1776, 1777], [1778, 1780], [1781, 1784], [1785, 1793], [1794, 1796], [1797, 1799], [1800, 1808], [1808, 1809], [1810, 1813], [1814, 1818], [1819, 1821], [1822, 1825], [1826, 1829], [1830, 1839], [1839, 1840]]}) 
answer: set([u'ever'])
candidate Sentence: (0.20240215957164764, {u'tokens': [u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u':', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 16], [17, 19], [20, 27], [28, 29], [29, 31], [32, 36], [37, 41], [42, 43], [44, 46], [47, 53], [54, 58], [58, 59], [60, 63], [64, 65], [66, 72], [73, 82], [82, 83]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.080316260457038879, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'NNP', u'NNP', u'NNP', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2685, 2687], [2688, 2692], [2692, 2693], [2694, 2697], [2698, 2708], [2709, 2719], [2720, 2722], [2723, 2737], [2738, 2741], [2742, 2744], [2745, 2750], [2751, 2753], [2754, 2761], [2762, 2764], [2765, 2768], [2769, 2781], [2782, 2785], [2786, 2790], [2791, 2793], [2794, 2799], [2800, 2808], [2809, 2811], [2812, 2822], [2823, 2829], [2830, 2833], [2834, 2842], [2842, 2843], [2844, 2851], [2851, 2852], [2853, 2857], [2859, 2860], [2860, 2871], [2872, 2880], [2881, 2884], [2885, 2900], [2901, 2903], [2904, 2911], [2912, 2915], [2916, 2919], [2920, 2930], [2931, 2933], [2934, 2939], [2940, 2944], [2944, 2945], [2946, 2954], [2954, 2955]]}) 
answer: set([u'employ', u'rochelle', u'ever'])
candidate Sentence: (0.073597773909568787, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[1989, 1991], [1992, 1996], [1996, 1997], [1998, 2000], [2001, 2004], [2005, 2014], [2015, 2026], [2027, 2029], [2030, 2035], [2035, 2036]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.067806839942932129, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[474, 478], [479, 486], [487, 490], [491, 492], [493, 496], [496, 497], [498, 501], [502, 508], [509, 514], [515, 517], [518, 523], [524, 527], [528, 533], [534, 541], [542, 549], [550, 552], [553, 556], [557, 568], [569, 576], [577, 580], [581, 595], [595, 596]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 1357621 characters, 255362 tokens, 2715.2 char/doc, 510.7 tok/doc RATES: 19.734 doc/sec, 10078.6 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eea440>.answer
_____________________________ test_yesno[param68] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea488>, (<src.tfidf.TF_IDF object at 0x115c7b050>, set(['charles-augustin', 'charles-augustin_de_coulomb', 'coulomb', 'de'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
E                +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x116eea488>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45375323295593262, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1725, 1729], [1730, 1733], [1734, 1740], [1741, 1743], [1744, 1750], [1750, 1751], [1752, 1756], [1757, 1760], [1761, 1765], [1766, 1768], [1769, 1776], [1776, 1777], [1778, 1780], [1781, 1784], [1785, 1793], [1794, 1796], [1797, 1799], [1800, 1808], [1808, 1809], [1810, 1813], [1814, 1818], [1819, 1821], [1822, 1825], [1826, 1829], [1830, 1839], [1839, 1840]]}) 
answer: set([u'ever'])
candidate Sentence: (0.20240215957164764, {u'tokens': [u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'--', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u':', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 16], [17, 19], [20, 27], [28, 29], [29, 31], [32, 36], [37, 41], [42, 43], [44, 46], [47, 53], [54, 58], [58, 59], [60, 63], [64, 65], [66, 72], [73, 82], [82, 83]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.080316260457038879, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'th\xe9oriques', u'et', u'exp\xe9rimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'\xe9lasticit\xe9", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'l\u2019Acad\xe9mie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'NNP', u'NNP', u'NNP', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2685, 2687], [2688, 2692], [2692, 2693], [2694, 2697], [2698, 2708], [2709, 2719], [2720, 2722], [2723, 2737], [2738, 2741], [2742, 2744], [2745, 2750], [2751, 2753], [2754, 2761], [2762, 2764], [2765, 2768], [2769, 2781], [2782, 2785], [2786, 2790], [2791, 2793], [2794, 2799], [2800, 2808], [2809, 2811], [2812, 2822], [2823, 2829], [2830, 2833], [2834, 2842], [2842, 2843], [2844, 2851], [2851, 2852], [2853, 2857], [2859, 2860], [2860, 2871], [2872, 2880], [2881, 2884], [2885, 2900], [2901, 2903], [2904, 2911], [2912, 2915], [2916, 2919], [2920, 2930], [2931, 2933], [2934, 2939], [2940, 2944], [2944, 2945], [2946, 2954], [2954, 2955]]}) 
answer: set([u'employ', u'rochelle', u'ever'])
candidate Sentence: (0.073597773909568787, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[1989, 1991], [1992, 1996], [1996, 1997], [1998, 2000], [2001, 2004], [2005, 2014], [2015, 2026], [2027, 2029], [2030, 2035], [2035, 2036]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])
candidate Sentence: (0.067806839942932129, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Coll\xe8ge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[474, 478], [479, 486], [487, 490], [491, 492], [493, 496], [496, 497], [498, 501], [502, 508], [509, 514], [515, 517], [518, 523], [524, 527], [528, 533], [534, 541], [542, 549], [550, 552], [553, 556], [557, 568], [569, 576], [577, 580], [581, 595], [595, 596]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'la'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
 +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x116eea488>.answer
_____________________________ test_yesno[param69] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea368>, (<src.tfidf.TF_IDF object at 0x112e8b6d0>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39762610197067261, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24611, 24614], [24615, 24624], [24625, 24627], [24628, 24634], [24635, 24642], [24643, 24646], [24647, 24652], [24652, 24653]]}) 
answer: set([u'analytical', u'tonal'])
candidate Sentence: (0.33823114633560181, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1552, 1558], [1559, 1566], [1567, 1569], [1570, 1583], [1584, 1586], [1587, 1590], [1591, 1595], [1596, 1601], [1602, 1604], [1605, 1613], [1614, 1623], [1623, 1624], [1625, 1633], [1634, 1637], [1638, 1644], [1645, 1654], [1655, 1657], [1658, 1665], [1666, 1669], [1670, 1675], [1676, 1679], [1680, 1688], [1688, 1689]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17555274069309235, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24213, 24216], [24217, 24222], [24223, 24229], [24230, 24232], [24233, 24242], [24243, 24245], [24246, 24250], [24251, 24260], [24261, 24263], [24264, 24273], [24274, 24278], [24279, 24284], [24285, 24286], [24287, 24295], [24295, 24296], [24297, 24306], [24307, 24312], [24313, 24322], [24322, 24323], [24324, 24329], [24330, 24332], [24333, 24337], [24338, 24343], [24344, 24346], [24347, 24353], [24354, 24356], [24357, 24361], [24362, 24364], [24365, 24372], [24373, 24382], [24383, 24384], [24384, 24388], [24388, 24389], [24390, 24392], [24392, 24394], [24395, 24401], [24402, 24409], [24410, 24412], [24413, 24419], [24420, 24425], [24426, 24431], [24432, 24441], [24441, 24442], [24443, 24446], [24447, 24452], [24453, 24456], [24457, 24459], [24460, 24463], [24464, 24466], [24467, 24472], [24473, 24476], [24477, 24488], [24488, 24489], [24490, 24492], [24493, 24498], [24499, 24508], [24508, 24509], [24510, 24514], [24515, 24516], [24516, 24520], [24520, 24521], [24522, 24535], [24536, 24538], [24539, 24546], [24546, 24547], [24548, 24554], [24554, 24555], [24556, 24558], [24558, 24560], [24561, 24564], [24565, 24566], [24567, 24572], [24573, 24575], [24576, 24580], [24581, 24585], [24586, 24595], [24596, 24599], [24600, 24607], [24607, 24608]]}) 
answer: set([u'analytical', u'speak'])
candidate Sentence: (0.16425740718841553, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40191, 40194], [40195, 40199], [40200, 40201], [40202, 40204], [40205, 40206], [40207, 40215], [40216, 40217], [40218, 40221], [40222, 40226], [40227, 40229], [40230, 40232], [40233, 40235], [40236, 40241], [40242, 40249], [40249, 40250]]}) 
answer: set([u'analytical', u'speak', u'tonal', u'variety'])
candidate Sentence: (0.155760258436203, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5808, 5811], [5812, 5822], [5823, 5830], [5831, 5834], [5835, 5843], [5844, 5846], [5847, 5850], [5851, 5858], [5859, 5865], [5866, 5875], [5876, 5878], [5879, 5882], [5883, 5885], [5886, 5888], [5889, 5890], [5891, 5897], [5898, 5906], [5907, 5909], [5910, 5923], [5923, 5924]]}) 
answer: set([u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea368>.answer
_____________________________ test_yesno[param70] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea4d0>, (<src.tfidf.TF_IDF object at 0x112e8b6d0>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea4d0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39762610197067261, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24611, 24614], [24615, 24624], [24625, 24627], [24628, 24634], [24635, 24642], [24643, 24646], [24647, 24652], [24652, 24653]]}) 
answer: set([u'analytical', u'tonal'])
candidate Sentence: (0.33823114633560181, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1552, 1558], [1559, 1566], [1567, 1569], [1570, 1583], [1584, 1586], [1587, 1590], [1591, 1595], [1596, 1601], [1602, 1604], [1605, 1613], [1614, 1623], [1623, 1624], [1625, 1633], [1634, 1637], [1638, 1644], [1645, 1654], [1655, 1657], [1658, 1665], [1666, 1669], [1670, 1675], [1676, 1679], [1680, 1688], [1688, 1689]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17555274069309235, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24213, 24216], [24217, 24222], [24223, 24229], [24230, 24232], [24233, 24242], [24243, 24245], [24246, 24250], [24251, 24260], [24261, 24263], [24264, 24273], [24274, 24278], [24279, 24284], [24285, 24286], [24287, 24295], [24295, 24296], [24297, 24306], [24307, 24312], [24313, 24322], [24322, 24323], [24324, 24329], [24330, 24332], [24333, 24337], [24338, 24343], [24344, 24346], [24347, 24353], [24354, 24356], [24357, 24361], [24362, 24364], [24365, 24372], [24373, 24382], [24383, 24384], [24384, 24388], [24388, 24389], [24390, 24392], [24392, 24394], [24395, 24401], [24402, 24409], [24410, 24412], [24413, 24419], [24420, 24425], [24426, 24431], [24432, 24441], [24441, 24442], [24443, 24446], [24447, 24452], [24453, 24456], [24457, 24459], [24460, 24463], [24464, 24466], [24467, 24472], [24473, 24476], [24477, 24488], [24488, 24489], [24490, 24492], [24493, 24498], [24499, 24508], [24508, 24509], [24510, 24514], [24515, 24516], [24516, 24520], [24520, 24521], [24522, 24535], [24536, 24538], [24539, 24546], [24546, 24547], [24548, 24554], [24554, 24555], [24556, 24558], [24558, 24560], [24561, 24564], [24565, 24566], [24567, 24572], [24573, 24575], [24576, 24580], [24581, 24585], [24586, 24595], [24596, 24599], [24600, 24607], [24607, 24608]]}) 
answer: set([u'analytical', u'speak'])
candidate Sentence: (0.16425740718841553, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40191, 40194], [40195, 40199], [40200, 40201], [40202, 40204], [40205, 40206], [40207, 40215], [40216, 40217], [40218, 40221], [40222, 40226], [40227, 40229], [40230, 40232], [40233, 40235], [40236, 40241], [40242, 40249], [40249, 40250]]}) 
answer: set([u'analytical', u'speak', u'tonal', u'variety'])
candidate Sentence: (0.155760258436203, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5808, 5811], [5812, 5822], [5823, 5830], [5831, 5834], [5835, 5843], [5844, 5846], [5847, 5850], [5851, 5858], [5859, 5865], [5866, 5875], [5876, 5878], [5879, 5882], [5883, 5885], [5886, 5888], [5889, 5890], [5891, 5897], [5898, 5906], [5907, 5909], [5910, 5923], [5923, 5924]]}) 
answer: set([u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea4d0>.answer
_____________________________ test_yesno[param73] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea5a8>, (<src.tfidf.TF_IDF object at 0x112e8b6d0>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eea5a8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.54190671443939209, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u8336', u'-LRB-', u'POJ', u':', u't\xea', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u8336', u'-lrb-', u'poj', u':', u't\xea', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22682, 22690], [22691, 22693], [22694, 22698], [22699, 22704], [22705, 22708], [22709, 22710], [22710, 22713], [22713, 22714], [22715, 22719], [22720, 22723], [22724, 22730], [22731, 22744], [22745, 22747], [22748, 22749], [22750, 22751], [22751, 22754], [22754, 22755], [22756, 22758], [22758, 22759], [22759, 22760], [22761, 22762], [22762, 22769], [22769, 22770], [22771, 22775], [22776, 22779], [22780, 22786], [22787, 22800], [22801, 22803], [22804, 22806], [22807, 22808], [22808, 22817], [22817, 22818], [22818, 22819], [22820, 22823], [22824, 22825], [22825, 22832], [22832, 22833], [22834, 22838], [22839, 22842], [22843, 22852], [22853, 22866], [22867, 22869], [22870, 22872], [22873, 22874], [22874, 22877], [22878, 22882], [22882, 22883], [22883, 22884]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.17470636963844299, {u'tokens': [u'From', u'French', u'came', u'\u82ad\u857e', u'-LRB-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'\u9999\u69df', u'-LRB-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'\u5496\u5561', u'-LRB-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'\u82ad\u857e', u'-lrb-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'\u9999\u69df', u'-lrb-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'\u5496\u5561', u'-lrb-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'CD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[36273, 36277], [36278, 36284], [36285, 36289], [36290, 36292], [36293, 36294], [36294, 36299], [36299, 36300], [36301, 36302], [36302, 36308], [36308, 36309], [36309, 36310], [36310, 36311], [36312, 36314], [36315, 36316], [36316, 36324], [36324, 36325], [36326, 36327], [36327, 36336], [36336, 36337], [36337, 36338], [36338, 36339], [36340, 36343], [36344, 36351], [36352, 36354], [36355, 36356], [36356, 36361], [36361, 36362], [36363, 36364], [36364, 36369], [36369, 36370], [36370, 36371], [36371, 36372]]}) 
answer: set([u'minnan', u'pronunciation', u'&#39853;', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.17335376143455505, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'CD', u'``', u'FW', u'.', u"''"], u'char_offsets': [[34782, 34787], [34788, 34793], [34794, 34798], [34799, 34803], [34804, 34811], [34812, 34819], [34820, 34822], [34823, 34826], [34827, 34832], [34832, 34833], [34834, 34838], [34839, 34841], [34842, 34844], [34845, 34846], [34846, 34852], [34852, 34853], [34853, 34854]]}) 
answer: set([u'-rrb-', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.16420707106590271, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[35444, 35448], [35449, 35451], [35452, 35456], [35457, 35459], [35460, 35469], [35470, 35477], [35478, 35488], [35489, 35493], [35494, 35501], [35502, 35516], [35516, 35517]]}) 
answer: set([u'``', u'-rrb-', u'minnan', u"''", u'&#39853;', u'-lrb-', u'&#27713;', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13111370801925659, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17795, 17798], [17799, 17807], [17808, 17811], [17812, 17815], [17816, 17829], [17830, 17832], [17833, 17839], [17840, 17847], [17848, 17853], [17854, 17858], [17859, 17866], [17867, 17874], [17874, 17875], [17876, 17882], [17883, 17890], [17891, 17901], [17901, 17902], [17903, 17910], [17911, 17923], [17923, 17924], [17925, 17932], [17933, 17949], [17949, 17950], [17951, 17952], [17952, 17959], [17960, 17966], [17966, 17967], [17968, 17979], [17980, 17982], [17983, 17990], [17991, 17998], [17999, 18011], [18012, 18014], [18015, 18024], [18025, 18028], [18029, 18037], [18038, 18044], [18044, 18045], [18046, 18049], [18050, 18057], [18058, 18066], [18067, 18079], [18080, 18082], [18083, 18090], [18091, 18096], [18096, 18097]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eea5a8>.answer
_____________________________ test_yesno[param74] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea5f0>, (<src.tfidf.TF_IDF object at 0x112e8b6d0>, set(['chinese', 'chinese_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea5f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.54190671443939209, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u8336', u'-LRB-', u'POJ', u':', u't\xea', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u8336', u'-lrb-', u'poj', u':', u't\xea', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'\u9bad\u6c41', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'\u91d1\u6a58', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22682, 22690], [22691, 22693], [22694, 22698], [22699, 22704], [22705, 22708], [22709, 22710], [22710, 22713], [22713, 22714], [22715, 22719], [22720, 22723], [22724, 22730], [22731, 22744], [22745, 22747], [22748, 22749], [22750, 22751], [22751, 22754], [22754, 22755], [22756, 22758], [22758, 22759], [22759, 22760], [22761, 22762], [22762, 22769], [22769, 22770], [22771, 22775], [22776, 22779], [22780, 22786], [22787, 22800], [22801, 22803], [22804, 22806], [22807, 22808], [22808, 22817], [22817, 22818], [22818, 22819], [22820, 22823], [22824, 22825], [22825, 22832], [22832, 22833], [22834, 22838], [22839, 22842], [22843, 22852], [22853, 22866], [22867, 22869], [22870, 22872], [22873, 22874], [22874, 22877], [22878, 22882], [22882, 22883], [22883, 22884]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.17470636963844299, {u'tokens': [u'From', u'French', u'came', u'\u82ad\u857e', u'-LRB-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'\u9999\u69df', u'-LRB-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'\u5496\u5561', u'-LRB-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'\u82ad\u857e', u'-lrb-', u'b\u0101l\xe9i', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'\u9999\u69df', u'-lrb-', u'xi\u0101ngb\u012bn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'\u5496\u5561', u'-lrb-', u'k\u0101f\u0113i', u',', u'``', u'caff\xe8', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'CD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'NN', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u'.'], u'char_offsets': [[36273, 36277], [36278, 36284], [36285, 36289], [36290, 36292], [36293, 36294], [36294, 36299], [36299, 36300], [36301, 36302], [36302, 36308], [36308, 36309], [36309, 36310], [36310, 36311], [36312, 36314], [36315, 36316], [36316, 36324], [36324, 36325], [36326, 36327], [36327, 36336], [36336, 36337], [36337, 36338], [36338, 36339], [36340, 36343], [36344, 36351], [36352, 36354], [36355, 36356], [36356, 36361], [36361, 36362], [36363, 36364], [36364, 36369], [36369, 36370], [36370, 36371], [36371, 36372]]}) 
answer: set([u'minnan', u'pronunciation', u'&#39853;', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.17335376143455505, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'\u80e1\u540c', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'CD', u'``', u'FW', u'.', u"''"], u'char_offsets': [[34782, 34787], [34788, 34793], [34794, 34798], [34799, 34803], [34804, 34811], [34812, 34819], [34820, 34822], [34823, 34826], [34827, 34832], [34832, 34833], [34834, 34838], [34839, 34841], [34842, 34844], [34845, 34846], [34846, 34852], [34852, 34853], [34853, 34854]]}) 
answer: set([u'-rrb-', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.16420707106590271, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[35444, 35448], [35449, 35451], [35452, 35456], [35457, 35459], [35460, 35469], [35470, 35477], [35478, 35488], [35489, 35493], [35494, 35501], [35502, 35516], [35516, 35517]]}) 
answer: set([u'``', u'-rrb-', u'minnan', u"''", u'&#39853;', u'-lrb-', u'&#27713;', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13111370801925659, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17795, 17798], [17799, 17807], [17808, 17811], [17812, 17815], [17816, 17829], [17830, 17832], [17833, 17839], [17840, 17847], [17848, 17853], [17854, 17858], [17859, 17866], [17867, 17874], [17874, 17875], [17876, 17882], [17883, 17890], [17891, 17901], [17901, 17902], [17903, 17910], [17911, 17923], [17923, 17924], [17925, 17932], [17933, 17949], [17949, 17950], [17951, 17952], [17952, 17959], [17960, 17966], [17966, 17967], [17968, 17979], [17980, 17982], [17983, 17990], [17991, 17998], [17999, 18011], [18012, 18014], [18015, 18024], [18025, 18028], [18029, 18037], [18038, 18044], [18044, 18045], [18046, 18049], [18050, 18057], [18058, 18066], [18067, 18079], [18080, 18082], [18083, 18090], [18091, 18096], [18096, 18097]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea5f0>.answer
_____________________________ test_yesno[param81] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea7e8>, (<src.tfidf.TF_IDF object at 0x115c7b7d0>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('A cougar is also known as a mountain lion.') == True
E                +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x116eea7e8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40987902879714966, {u'tokens': [u'The', u'cougar', u'-LRB-', u'Puma', u'concolor', u'-RRB-', u',', u'also', u'known', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depending', u'on', u'the', u'region', u',', u'is', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'lemmas': [u'the', u'cougar', u'-lrb-', u'puma', u'concolor', u'-rrb-', u',', u'also', u'know', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depend', u'on', u'the', u'region', u',', u'be', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'RB', u'VBN', u'IN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'CC', u'NN', u',', u'VBG', u'IN', u'DT', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u',', u'JJ', u'TO', u'DT', u'NNPS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 12], [12, 16], [17, 25], [25, 26], [26, 27], [28, 32], [33, 38], [39, 41], [42, 46], [46, 47], [48, 56], [57, 61], [61, 62], [63, 71], [72, 75], [75, 76], [77, 86], [87, 89], [90, 97], [97, 98], [99, 108], [109, 111], [112, 115], [116, 122], [122, 123], [124, 126], [127, 128], [129, 135], [136, 138], [139, 142], [143, 149], [150, 157], [157, 158], [159, 165], [166, 168], [169, 172], [173, 181], [181, 182]]}) 
answer: set([])
candidate Sentence: (0.31321975588798523, {u'tokens': [u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33034, 33035], [33037, 33039], [33040, 33045], [33046, 33049], [33050, 33059], [33059, 33060]]}) 
answer: set([u'mountain', u'lion', u'know', u'also'])
candidate Sentence: (0.27163082361221313, {u'tokens': [u'The', u'cougar', u'has', u'numerous', u'names', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'are', u'popular', u'.'], u'lemmas': [u'the', u'cougar', u'have', u'numerous', u'name', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'be', u'popular', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'WDT', u'NN', u'CC', u'NN', u'NN', u'VBP', u'JJ', u'.'], u'char_offsets': [[2324, 2327], [2328, 2334], [2335, 2338], [2339, 2347], [2348, 2353], [2354, 2356], [2357, 2364], [2364, 2365], [2366, 2368], [2369, 2374], [2375, 2379], [2380, 2383], [2384, 2392], [2393, 2397], [2398, 2401], [2402, 2409], [2409, 2410]]}) 
answer: set([u'also', u'know'])
candidate Sentence: (0.17418861389160156, {u'tokens': [u'Search', u'continues', u'for', u'mountain', u'lion', u'that', u'killed', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-RSB-', u';', u'Wounded', u'mountain', u'lion', u'captured', u',', u'killed', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-RSB-', u';', u'Second', u'mountain', u'lion', u'captured', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-RSB-', u'As', u'with', u'many', u'predators', u',', u'a', u'cougar', u'may', u'attack', u'if', u'cornered', u',', u'if', u'a', u'fleeing', u'human', u'stimulates', u'their', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'plays', u'dead', u'.', u"''"], u'lemmas': [u'search', u'continue', u'for', u'mountain', u'lion', u'that', u'kill', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-rsb-', u';', u'wound', u'mountain', u'lion', u'capture', u',', u'kill', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-rsb-', u';', u'second', u'mountain', u'lion', u'capture', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-rsb-', u'as', u'with', u'many', u'predator', u',', u'a', u'cougar', u'may', u'attack', u'if', u'corner', u',', u'if', u'a', u'flee', u'human', u'stimulate', u'they', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'play', u'dead', u'.', u"''"], u'pos': [u'VB', u'VBZ', u'IN', u'NN', u'NN', u'WDT', u'VBD', u'NNP', u'NNP', u'NN', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'VBN', u'NN', u'NN', u'VBN', u',', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'JJ', u'NN', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'IN', u'IN', u'JJ', u'NNS', u',', u'DT', u'NN', u'MD', u'VB', u'IN', u'VBN', u',', u'IN', u'DT', u'VBG', u'JJ', u'VBZ', u'PRP$', u'NN', u'TO', u'VB', u',', u'CC', u'IN', u'DT', u'NN', u'``', u'VBZ', u'JJ', u'.', u"''"], u'char_offsets': [[31325, 31331], [31332, 31341], [31342, 31345], [31346, 31354], [31355, 31359], [31360, 31364], [31365, 31371], [31372, 31377], [31378, 31383], [31384, 31387], [31387, 31388], [31389, 31392], [31393, 31399], [31400, 31410], [31411, 31413], [31414, 31418], [31419, 31422], [31423, 31427], [31427, 31428], [31429, 31434], [31435, 31442], [31443, 31447], [31448, 31450], [31450, 31451], [31452, 31456], [31456, 31457], [31457, 31458], [31460, 31467], [31468, 31476], [31477, 31481], [31482, 31490], [31490, 31491], [31492, 31498], [31499, 31503], [31504, 31509], [31510, 31515], [31515, 31516], [31517, 31520], [31521, 31527], [31528, 31538], [31539, 31541], [31542, 31546], [31547, 31550], [31551, 31555], [31555, 31556], [31557, 31562], [31563, 31570], [31571, 31575], [31576, 31578], [31578, 31579], [31580, 31584], [31584, 31585], [31585, 31586], [31588, 31594], [31595, 31603], [31604, 31608], [31609, 31617], [31618, 31622], [31623, 31628], [31629, 31634], [31634, 31635], [31636, 31639], [31640, 31646], [31647, 31657], [31658, 31660], [31661, 31665], [31666, 31669], [31670, 31674], [31674, 31675], [31676, 31681], [31682, 31689], [31690, 31694], [31695, 31696], [31696, 31697], [31698, 31702], [31702, 31703], [31704, 31706], [31707, 31711], [31712, 31716], [31717, 31726], [31726, 31727], [31728, 31729], [31730, 31736], [31737, 31740], [31741, 31747], [31748, 31750], [31751, 31759], [31759, 31760], [31761, 31763], [31764, 31765], [31766, 31773], [31774, 31779], [31780, 31790], [31791, 31796], [31797, 31805], [31806, 31808], [31809, 31814], [31814, 31815], [31816, 31818], [31819, 31821], [31822, 31823], [31824, 31830], [31831, 31832], [31832, 31837], [31838, 31842], [31842, 31843], [31843, 31844]]}) 
answer: set([u'also', u'know'])
candidate Sentence: (0.15002155303955078, {u'tokens': [u'The', u'Quebec', u'wildlife', u'services', u'-LRB-', u'known', u'locally', u'as', u'MRNF', u'-RRB-', u'also', u'considers', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threatened', u'species', u'after', u'multiple', u'DNA', u'tests', u'confirmed', u'cougar', u'hair', u'in', u'Lynx', u'mating', u'sites', u'.'], u'lemmas': [u'the', u'Quebec', u'wildlife', u'service', u'-lrb-', u'know', u'locally', u'as', u'mrnf', u'-rrb-', u'also', u'consider', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threaten', u'species', u'after', u'multiple', u'dna', u'test', u'confirm', u'cougar', u'hair', u'in', u'Lynx', u'mate', u'site', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NNS', u'-LRB-', u'VBN', u'RB', u'IN', u'NN', u'-RRB-', u'RB', u'VBZ', u'NNP', u'TO', u'VB', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'JJ', u'NN', u'NNS', u'VBD', u'NN', u'NN', u'IN', u'NNP', u'VBG', u'NNS', u'.'], u'char_offsets': [[18761, 18764], [18765, 18771], [18772, 18780], [18781, 18789], [18790, 18791], [18791, 18796], [18797, 18804], [18805, 18807], [18808, 18812], [18812, 18813], [18814, 18818], [18819, 18828], [18829, 18835], [18836, 18838], [18839, 18841], [18842, 18849], [18850, 18852], [18853, 18856], [18857, 18865], [18866, 18868], [18869, 18870], [18871, 18881], [18882, 18889], [18890, 18895], [18896, 18904], [18905, 18908], [18909, 18914], [18915, 18924], [18925, 18931], [18932, 18936], [18937, 18939], [18940, 18944], [18945, 18951], [18952, 18957], [18957, 18958]]}) 
answer: set([u'mountain', u'lion'])

Is a cougar also known as a mountain lion?
Validity= False
Question Type = NA
Answer Type = NA
Answer = A cougar is also known as a mountain lion.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('A cougar is also known as a mountain lion.') == True
 +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x116eea7e8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param86] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eea950>, (<src.tfidf.TF_IDF object at 0x115c7b7d0>, set(['cougar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.66087257862091064, {u'tokens': [u'The', u'World', u'Conservation', u'Union', u'-LRB-', u'IUCN', u'-RRB-', u'currently', u'lists', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'lemmas': [u'the', u'World', u'Conservation', u'Union', u'-lrb-', u'IUCN', u'-rrb-', u'currently', u'list', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'``', u'JJS', u'NN', u"''", u'NNS', u'.'], u'char_offsets': [[24823, 24826], [24827, 24832], [24833, 24845], [24846, 24851], [24852, 24853], [24853, 24857], [24857, 24858], [24859, 24868], [24869, 24874], [24875, 24878], [24879, 24885], [24886, 24888], [24889, 24890], [24891, 24892], [24892, 24897], [24898, 24905], [24905, 24906], [24907, 24914], [24914, 24915]]}) 
answer: set([u'consider'])
candidate Sentence: (0.21325004100799561, {u'tokens': [u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33034, 33035], [33037, 33039], [33040, 33045], [33046, 33049], [33050, 33059], [33059, 33060]]}) 
answer: set([u'``', u'consider', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])
candidate Sentence: (0.13880795240402222, {u'tokens': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-LRB-', u'IUCN', u'-RRB-', u'lists', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'lemmas': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-lrb-', u'IUCN', u'-rrb-', u'list', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNP', u'NNP', u',', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[20090, 20095], [20096, 20098], [20099, 20102], [20103, 20106], [20107, 20113], [20113, 20114], [20115, 20118], [20119, 20132], [20133, 20138], [20139, 20142], [20143, 20146], [20147, 20159], [20160, 20162], [20163, 20169], [20170, 20173], [20174, 20181], [20182, 20191], [20192, 20193], [20193, 20197], [20197, 20198], [20199, 20204], [20205, 20208], [20209, 20212], [20213, 20215], [20216, 20221], [20222, 20229], [20230, 20233], [20234, 20239], [20240, 20248], [20249, 20256], [20257, 20263], [20264, 20269], [20270, 20274], [20275, 20278], [20279, 20285], [20285, 20286]]}) 
answer: set([u'``', u'consider', u'least', u"''", u'world', u'species', u'concern'])
candidate Sentence: (0.13196323812007904, {u'tokens': [u'Most', u'did', u'not', u'reach', u'adulthood', u'.'], u'lemmas': [u'most', u'do', u'not', u'reach', u'adulthood', u'.'], u'pos': [u'JJS', u'VBD', u'RB', u'VB', u'NN', u'.'], u'char_offsets': [[24079, 24083], [24084, 24087], [24088, 24091], [24092, 24097], [24098, 24107], [24107, 24108]]}) 
answer: set([u'``', u'consider', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])
candidate Sentence: (0.12740030884742737, {u'tokens': [u'During', u'the', u'early', u'years', u'of', u'ranching', u',', u'cougars', u'were', u'considered', u'on', u'par', u'with', u'wolves', u'in', u'destructiveness', u'.'], u'lemmas': [u'during', u'the', u'early', u'year', u'of', u'ranching', u',', u'cougar', u'be', u'consider', u'on', u'par', u'with', u'wolf', u'in', u'destructiveness', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'NNS', u'VBD', u'VBN', u'IN', u'NN', u'IN', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[29241, 29247], [29248, 29251], [29252, 29257], [29258, 29263], [29264, 29266], [29267, 29275], [29275, 29276], [29277, 29284], [29285, 29289], [29290, 29300], [29301, 29303], [29304, 29307], [29308, 29312], [29313, 29319], [29320, 29322], [29323, 29338], [29338, 29339]]}) 
answer: set([u'``', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])

Does the World Conservation Union consider the cougar a "least concern" species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eea950>.answer
_____________________________ test_yesno[param92] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eeab00>, (<src.tfidf.TF_IDF object at 0x11485c510>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.8706357479095459, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3736, 3740], [3741, 3745], [3746, 3748], [3749, 3757], [3758, 3764], [3765, 3768], [3769, 3772], [3773, 3780], [3781, 3788], [3789, 3792], [3793, 3796], [3797, 3800], [3801, 3804], [3805, 3811], [3812, 3817], [3817, 3818]]}) 
answer: set([u'head'])
candidate Sentence: (0.14709712564945221, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[1951, 1956], [1957, 1961], [1962, 1965], [1966, 1971], [1972, 1975], [1976, 1980], [1981, 1985], [1986, 1987], [1988, 1991], [1992, 1994], [1995, 2000], [2000, 2001], [2002, 2008], [2009, 2015], [2015, 2016], [2017, 2021], [2022, 2028], [2029, 2032], [2033, 2039], [2040, 2044], [2044, 2045], [2046, 2049], [2050, 2054], [2054, 2055], [2056, 2058], [2059, 2063], [2064, 2069], [2069, 2070], [2071, 2076], [2077, 2080], [2081, 2085], [2086, 2091], [2092, 2096], [2097, 2098]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.11499261111021042, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4759, 4762], [4763, 4767], [4768, 4770], [4771, 4776], [4777, 4781], [4782, 4789], [4790, 4793], [4794, 4799], [4800, 4802], [4803, 4804], [4805, 4809], [4809, 4810]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.091987736523151398, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2520, 2523], [2524, 2529], [2530, 2532], [2533, 2534], [2535, 2539], [2540, 2547], [2548, 2550], [2551, 2558], [2559, 2568], [2568, 2569], [2570, 2579], [2580, 2585], [2585, 2586], [2587, 2591], [2592, 2595], [2596, 2605], [2606, 2608], [2609, 2612], [2613, 2618], [2618, 2619], [2620, 2629], [2630, 2634], [2635, 2640], [2641, 2644], [2645, 2650], [2651, 2654], [2655, 2659], [2659, 2660], [2661, 2672], [2673, 2681], [2681, 2682], [2683, 2687], [2688, 2690], [2691, 2699], [2700, 2704], [2705, 2708], [2709, 2716], [2717, 2724], [2725, 2727], [2728, 2730], [2730, 2731], [2732, 2740], [2741, 2743], [2744, 2747], [2748, 2752], [2752, 2753], [2754, 2762], [2762, 2763], [2764, 2767], [2768, 2771], [2772, 2780], [2781, 2784], [2785, 2790], [2791, 2793], [2794, 2799], [2800, 2802], [2803, 2805], [2806, 2812], [2812, 2813]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.077585257589817047, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'covering', u'both', u'ends', u'of', u'a', u'cylindrical', u'shell', u'often', u'have', u'a', u'small', u'hole', u'somewhat', u'halfway', u'between', u'the', u'two', u'heads', u';', u'the', u'shell', u'forms', u'a', u'resonating', u'chamber', u'for', u'the', u'resulting', u'sound', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'cover', u'both', u'end', u'of', u'a', u'cylindrical', u'shell', u'often', u'have', u'a', u'small', u'hole', u'somewhat', u'halfway', u'between', u'the', u'two', u'head', u';', u'the', u'shell', u'form', u'a', u'resonate', u'chamber', u'for', u'the', u'result', u'sound', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'VBG', u'CC', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'RB', u'VBP', u'DT', u'JJ', u'NN', u'RB', u'RB', u'IN', u'DT', u'CD', u'NNS', u':', u'DT', u'NN', u'VBZ', u'DT', u'VBG', u'NN', u'IN', u'DT', u'VBG', u'NN', u'.'], u'char_offsets': [[1627, 1632], [1633, 1637], [1638, 1641], [1642, 1647], [1648, 1656], [1657, 1661], [1662, 1666], [1667, 1669], [1670, 1671], [1672, 1683], [1684, 1689], [1690, 1695], [1696, 1700], [1701, 1702], [1703, 1708], [1709, 1713], [1714, 1722], [1723, 1730], [1731, 1738], [1739, 1742], [1743, 1746], [1747, 1752], [1752, 1753], [1754, 1757], [1758, 1763], [1764, 1769], [1770, 1771], [1772, 1782], [1783, 1790], [1791, 1794], [1795, 1798], [1799, 1808], [1809, 1814], [1814, 1815]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab00>.answer
_____________________________ test_yesno[param93] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eeab48>, (<src.tfidf.TF_IDF object at 0x11485c510>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.8706357479095459, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3736, 3740], [3741, 3745], [3746, 3748], [3749, 3757], [3758, 3764], [3765, 3768], [3769, 3772], [3773, 3780], [3781, 3788], [3789, 3792], [3793, 3796], [3797, 3800], [3801, 3804], [3805, 3811], [3812, 3817], [3817, 3818]]}) 
answer: set([u'head'])
candidate Sentence: (0.14709712564945221, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[1951, 1956], [1957, 1961], [1962, 1965], [1966, 1971], [1972, 1975], [1976, 1980], [1981, 1985], [1986, 1987], [1988, 1991], [1992, 1994], [1995, 2000], [2000, 2001], [2002, 2008], [2009, 2015], [2015, 2016], [2017, 2021], [2022, 2028], [2029, 2032], [2033, 2039], [2040, 2044], [2044, 2045], [2046, 2049], [2050, 2054], [2054, 2055], [2056, 2058], [2059, 2063], [2064, 2069], [2069, 2070], [2071, 2076], [2077, 2080], [2081, 2085], [2086, 2091], [2092, 2096], [2097, 2098]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.11499261111021042, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4759, 4762], [4763, 4767], [4768, 4770], [4771, 4776], [4777, 4781], [4782, 4789], [4790, 4793], [4794, 4799], [4800, 4802], [4803, 4804], [4805, 4809], [4809, 4810]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.091987736523151398, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2520, 2523], [2524, 2529], [2530, 2532], [2533, 2534], [2535, 2539], [2540, 2547], [2548, 2550], [2551, 2558], [2559, 2568], [2568, 2569], [2570, 2579], [2580, 2585], [2585, 2586], [2587, 2591], [2592, 2595], [2596, 2605], [2606, 2608], [2609, 2612], [2613, 2618], [2618, 2619], [2620, 2629], [2630, 2634], [2635, 2640], [2641, 2644], [2645, 2650], [2651, 2654], [2655, 2659], [2659, 2660], [2661, 2672], [2673, 2681], [2681, 2682], [2683, 2687], [2688, 2690], [2691, 2699], [2700, 2704], [2705, 2708], [2709, 2716], [2717, 2724], [2725, 2727], [2728, 2730], [2730, 2731], [2732, 2740], [2741, 2743], [2744, 2747], [2748, 2752], [2752, 2753], [2754, 2762], [2762, 2763], [2764, 2767], [2768, 2771], [2772, 2780], [2781, 2784], [2785, 2790], [2791, 2793], [2794, 2799], [2800, 2802], [2803, 2805], [2806, 2812], [2812, 2813]]}) 
answer: set([u'head', u'serve', u'purpose', u'musical'])
candidate Sentence: (0.077585257589817047, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'covering', u'both', u'ends', u'of', u'a', u'cylindrical', u'shell', u'often', u'have', u'a', u'small', u'hole', u'somewhat', u'halfway', u'between', u'the', u'two', u'heads', u';', u'the', u'shell', u'forms', u'a', u'resonating', u'chamber', u'for', u'the', u'resulting', u'sound', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'cover', u'both', u'end', u'of', u'a', u'cylindrical', u'shell', u'often', u'have', u'a', u'small', u'hole', u'somewhat', u'halfway', u'between', u'the', u'two', u'head', u';', u'the', u'shell', u'form', u'a', u'resonate', u'chamber', u'for', u'the', u'result', u'sound', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'VBG', u'CC', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'RB', u'VBP', u'DT', u'JJ', u'NN', u'RB', u'RB', u'IN', u'DT', u'CD', u'NNS', u':', u'DT', u'NN', u'VBZ', u'DT', u'VBG', u'NN', u'IN', u'DT', u'VBG', u'NN', u'.'], u'char_offsets': [[1627, 1632], [1633, 1637], [1638, 1641], [1642, 1647], [1648, 1656], [1657, 1661], [1662, 1666], [1667, 1669], [1670, 1671], [1672, 1683], [1684, 1689], [1690, 1695], [1696, 1700], [1701, 1702], [1703, 1708], [1709, 1713], [1714, 1722], [1723, 1730], [1731, 1738], [1739, 1742], [1743, 1746], [1747, 1752], [1752, 1753], [1754, 1757], [1758, 1763], [1764, 1769], [1770, 1771], [1772, 1782], [1783, 1790], [1791, 1794], [1795, 1798], [1799, 1808], [1809, 1814], [1814, 1815]]}) 
answer: set([u'type', u'serve', u'purpose', u'musical'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab48>.answer
_____________________________ test_yesno[param94] ______________________________

param = (<src.question_processing.Question_parser instance at 0x116eeab90>, (<src.tfidf.TF_IDF object at 0x11485c510>, set(['drum'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.49329322576522827, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4759, 4762], [4763, 4767], [4768, 4770], [4771, 4776], [4777, 4781], [4782, 4789], [4790, 4793], [4794, 4799], [4800, 4802], [4803, 4804], [4805, 4809], [4809, 4810]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.31229844689369202, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5040, 5043], [5044, 5048], [5049, 5051], [5052, 5056], [5057, 5059], [5060, 5069], [5070, 5072], [5073, 5077], [5077, 5078]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.26628404855728149, {u'tokens': [u'Because', u'the', u'vibrations', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'used', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produced', u'.'], u'lemmas': [u'because', u'the', u'vibration', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'use', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produce', u'.'], u'pos': [u'IN', u'DT', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBP', u',', u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'CC', u'TO', u'VB', u'DT', u'NN', u'IN', u'NN', u'VBD', u'.'], u'char_offsets': [[4811, 4818], [4819, 4822], [4823, 4833], [4834, 4842], [4843, 4845], [4846, 4849], [4850, 4855], [4856, 4858], [4859, 4862], [4863, 4867], [4867, 4868], [4869, 4872], [4873, 4878], [4879, 4882], [4883, 4885], [4886, 4890], [4891, 4893], [4894, 4902], [4903, 4906], [4907, 4913], [4914, 4917], [4918, 4920], [4921, 4931], [4932, 4935], [4936, 4940], [4941, 4943], [4944, 4949], [4950, 4958], [4958, 4959]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.24978968501091003, {u'tokens': [u'Drum', u'carried', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'Several', u'factors', u'determine', u'the', u'sound', u'a', u'drum', u'produces', u',', u'including', u'the', u'type', u'of', u'shell', u'the', u'drum', u'has', u',', u'the', u'type', u'of', u'drumheads', u'it', u'has', u',', u'and', u'the', u'tension', u'of', u'the', u'drumheads', u'.'], u'lemmas': [u'drum', u'carry', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'several', u'factor', u'determine', u'the', u'sound', u'a', u'drum', u'produce', u',', u'include', u'the', u'type', u'of', u'shell', u'the', u'drum', u'have', u',', u'the', u'type', u'of', u'drumhead', u'it', u'have', u',', u'and', u'the', u'tension', u'of', u'the', u'drumhead', u'.'], u'pos': [u'VB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'JJ', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'CD', u',', u'CD', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'DT', u'VB', u'VBZ', u',', u'VBG', u'DT', u'NN', u'IN', u'NN', u'DT', u'VB', u'VBZ', u',', u'DT', u'NN', u'IN', u'NNS', u'PRP', u'VBZ', u',', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[3080, 3084], [3085, 3092], [3093, 3095], [3096, 3100], [3101, 3106], [3106, 3107], [3108, 3115], [3116, 3117], [3117, 3118], [3119, 3123], [3124, 3132], [3133, 3136], [3137, 3141], [3142, 3149], [3150, 3159], [3160, 3168], [3169, 3175], [3176, 3184], [3184, 3185], [3186, 3194], [3195, 3197], [3197, 3198], [3199, 3203], [3204, 3211], [3212, 3219], [3220, 3229], [3230, 3233], [3234, 3239], [3240, 3241], [3242, 3246], [3247, 3255], [3255, 3256], [3257, 3266], [3267, 3270], [3271, 3275], [3276, 3278], [3279, 3284], [3285, 3288], [3289, 3293], [3294, 3297], [3297, 3298], [3299, 3302], [3303, 3307], [3308, 3310], [3311, 3320], [3321, 3323], [3324, 3327], [3327, 3328], [3329, 3332], [3333, 3336], [3337, 3344], [3345, 3347], [3348, 3351], [3352, 3361], [3361, 3362]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.16733676195144653, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2520, 2523], [2524, 2529], [2530, 2532], [2533, 2534], [2535, 2539], [2540, 2547], [2548, 2550], [2551, 2558], [2559, 2568], [2568, 2569], [2570, 2579], [2580, 2585], [2585, 2586], [2587, 2591], [2592, 2595], [2596, 2605], [2606, 2608], [2609, 2612], [2613, 2618], [2618, 2619], [2620, 2629], [2630, 2634], [2635, 2640], [2641, 2644], [2645, 2650], [2651, 2654], [2655, 2659], [2659, 2660], [2661, 2672], [2673, 2681], [2681, 2682], [2683, 2687], [2688, 2690], [2691, 2699], [2700, 2704], [2705, 2708], [2709, 2716], [2717, 2724], [2725, 2727], [2728, 2730], [2730, 2731], [2732, 2740], [2741, 2743], [2744, 2747], [2748, 2752], [2752, 2753], [2754, 2762], [2762, 2763], [2764, 2767], [2768, 2771], [2772, 2780], [2781, 2784], [2785, 2790], [2791, 2793], [2794, 2799], [2800, 2802], [2803, 2805], [2806, 2812], [2812, 2813]]}) 
answer: set([u'aburukuwa'])

Is the Aburukuwa a type of drum?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eeab90>.answer
_____________________________ test_yesno[param100] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eead40>, (<src.tfidf.TF_IDF object at 0x110249510>, set(['eel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116eead40>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40879398584365845, {u'tokens': [u'The', u'electric', u'eel', u'of', u'South', u'America', u'is', u'not', u'a', u'true', u'eel', u',', u'but', u'is', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'lemmas': [u'the', u'electric', u'eel', u'of', u'South', u'America', u'be', u'not', u'a', u'true', u'eel', u',', u'but', u'be', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'CC', u'VBZ', u'RBR', u'RB', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[2201, 2204], [2205, 2213], [2214, 2217], [2218, 2220], [2221, 2226], [2227, 2234], [2235, 2237], [2238, 2241], [2242, 2243], [2244, 2248], [2249, 2252], [2252, 2253], [2254, 2257], [2258, 2260], [2261, 2265], [2266, 2273], [2274, 2281], [2282, 2284], [2285, 2288], [2289, 2293], [2293, 2294]]}) 
answer: set([])
candidate Sentence: (0.20954445004463196, {u'tokens': [u'The', u'term', u'``', u'eel', u"''", u'is', u'also', u'used', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eels', u'and', u'spiny', u'eels', u',', u'but', u'these', u'are', u'not', u'members', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'lemmas': [u'the', u'term', u'``', u'eel', u"''", u'be', u'also', u'use', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eel', u'and', u'spiny', u'eel', u',', u'but', u'these', u'be', u'not', u'member', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'RB', u'JJ', u'NN', u',', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u',', u'CC', u'DT', u'VBP', u'RB', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[316, 319], [320, 324], [325, 326], [326, 329], [329, 330], [331, 333], [334, 338], [339, 343], [344, 347], [348, 352], [353, 358], [359, 368], [369, 375], [376, 380], [380, 381], [382, 386], [387, 389], [390, 398], [399, 403], [404, 407], [408, 413], [414, 418], [418, 419], [420, 423], [424, 429], [430, 433], [434, 437], [438, 445], [446, 448], [449, 452], [453, 467], [468, 473], [473, 474]]}) 
answer: set([u'true'])
candidate Sentence: (0.14467856287956238, {u'tokens': [u'True', u'eels', u'are', u'elongated', u'fishes', u',', u'ranging', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-LRB-', u'Monognathus', u'ahlstromi', u'-RRB-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'lemmas': [u'true', u'eel', u'be', u'elongate', u'fish', u',', u'range', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-lrb-', u'monognathus', u'ahlstromus', u'-rrb-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'VBG', u'IN', u'NN', u'IN', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'TO', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[475, 479], [480, 484], [485, 488], [489, 498], [499, 505], [505, 506], [507, 514], [515, 517], [518, 524], [525, 529], [532, 534], [535, 538], [539, 548], [549, 552], [553, 554], [554, 565], [566, 575], [575, 576], [577, 579], [582, 584], [585, 588], [589, 594], [595, 600], [600, 601]]}) 
answer: set([u'electric'])
candidate Sentence: (0.13693496584892273, {u'tokens': [u'True', u'eels', u'-LRB-', u'Anguilliformes', u';', u'-RRB-', u'are', u'an', u'order', u'of', u'fish', u',', u'which', u'consists', u'of', u'four', u'suborders', u',', u'19', u'families', u',', u'110', u'genera', u'and', u'approximately', u'800', u'species', u'.'], u'lemmas': [u'true', u'eel', u'-lrb-', u'anguilliforme', u';', u'-rrb-', u'be', u'a', u'order', u'of', u'fish', u',', u'which', u'consist', u'of', u'four', u'suborder', u',', u'19', u'family', u',', u'110', u'genus', u'and', u'approximately', u'800', u'species', u'.'], u'pos': [u'JJ', u'NNS', u'-LRB-', u'NNS', u':', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'NN', u',', u'WDT', u'VBZ', u'IN', u'CD', u'NNS', u',', u'CD', u'NNS', u',', u'CD', u'NN', u'CC', u'RB', u'CD', u'NNS', u'.'], u'char_offsets': [[149, 153], [154, 158], [159, 160], [160, 174], [174, 175], [177, 178], [179, 182], [183, 185], [186, 191], [192, 194], [195, 199], [199, 200], [201, 206], [207, 215], [216, 218], [219, 223], [224, 233], [233, 234], [235, 237], [238, 246], [246, 247], [248, 251], [252, 258], [259, 262], [263, 276], [277, 280], [281, 288], [288, 289]]}) 
answer: set([u'electric'])
candidate Sentence: (0.1245589554309845, {u'tokens': [u'Most', u'true', u'eels', u'prefer', u'to', u'dwell', u'in', u'shallow', u'waters', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'holes', u'.'], u'lemmas': [u'most', u'true', u'eel', u'prefer', u'to', u'dwell', u'in', u'shallow', u'water', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'hole', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'TO', u'VB', u'IN', u'JJ', u'NNS', u'CC', u'VB', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'NNS', u'.'], u'char_offsets': [[815, 819], [820, 824], [825, 829], [830, 836], [837, 839], [840, 845], [846, 848], [849, 856], [857, 863], [864, 866], [867, 871], [872, 874], [875, 878], [879, 885], [886, 891], [892, 894], [895, 898], [899, 904], [904, 905], [906, 915], [916, 918], [919, 924], [924, 925]]}) 
answer: set([u'electric'])

Is the electric eel a true eel?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116eead40>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param101] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eead88>, (<src.tfidf.TF_IDF object at 0x110249510>, set(['eel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, the electric eel is not a true eel.') == True
E                +  where 'No, the electric eel is not a true eel.' = <src.question_processing.Question_parser instance at 0x116eead88>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40879398584365845, {u'tokens': [u'The', u'electric', u'eel', u'of', u'South', u'America', u'is', u'not', u'a', u'true', u'eel', u',', u'but', u'is', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'lemmas': [u'the', u'electric', u'eel', u'of', u'South', u'America', u'be', u'not', u'a', u'true', u'eel', u',', u'but', u'be', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'CC', u'VBZ', u'RBR', u'RB', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[2201, 2204], [2205, 2213], [2214, 2217], [2218, 2220], [2221, 2226], [2227, 2234], [2235, 2237], [2238, 2241], [2242, 2243], [2244, 2248], [2249, 2252], [2252, 2253], [2254, 2257], [2258, 2260], [2261, 2265], [2266, 2273], [2274, 2281], [2282, 2284], [2285, 2288], [2289, 2293], [2293, 2294]]}) 
answer: set([])
candidate Sentence: (0.20954445004463196, {u'tokens': [u'The', u'term', u'``', u'eel', u"''", u'is', u'also', u'used', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eels', u'and', u'spiny', u'eels', u',', u'but', u'these', u'are', u'not', u'members', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'lemmas': [u'the', u'term', u'``', u'eel', u"''", u'be', u'also', u'use', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eel', u'and', u'spiny', u'eel', u',', u'but', u'these', u'be', u'not', u'member', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'RB', u'JJ', u'NN', u',', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u',', u'CC', u'DT', u'VBP', u'RB', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[316, 319], [320, 324], [325, 326], [326, 329], [329, 330], [331, 333], [334, 338], [339, 343], [344, 347], [348, 352], [353, 358], [359, 368], [369, 375], [376, 380], [380, 381], [382, 386], [387, 389], [390, 398], [399, 403], [404, 407], [408, 413], [414, 418], [418, 419], [420, 423], [424, 429], [430, 433], [434, 437], [438, 445], [446, 448], [449, 452], [453, 467], [468, 473], [473, 474]]}) 
answer: set([u'true'])
candidate Sentence: (0.14467856287956238, {u'tokens': [u'True', u'eels', u'are', u'elongated', u'fishes', u',', u'ranging', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-LRB-', u'Monognathus', u'ahlstromi', u'-RRB-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'lemmas': [u'true', u'eel', u'be', u'elongate', u'fish', u',', u'range', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-lrb-', u'monognathus', u'ahlstromus', u'-rrb-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'VBG', u'IN', u'NN', u'IN', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'TO', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[475, 479], [480, 484], [485, 488], [489, 498], [499, 505], [505, 506], [507, 514], [515, 517], [518, 524], [525, 529], [532, 534], [535, 538], [539, 548], [549, 552], [553, 554], [554, 565], [566, 575], [575, 576], [577, 579], [582, 584], [585, 588], [589, 594], [595, 600], [600, 601]]}) 
answer: set([u'electric'])
candidate Sentence: (0.13693496584892273, {u'tokens': [u'True', u'eels', u'-LRB-', u'Anguilliformes', u';', u'-RRB-', u'are', u'an', u'order', u'of', u'fish', u',', u'which', u'consists', u'of', u'four', u'suborders', u',', u'19', u'families', u',', u'110', u'genera', u'and', u'approximately', u'800', u'species', u'.'], u'lemmas': [u'true', u'eel', u'-lrb-', u'anguilliforme', u';', u'-rrb-', u'be', u'a', u'order', u'of', u'fish', u',', u'which', u'consist', u'of', u'four', u'suborder', u',', u'19', u'family', u',', u'110', u'genus', u'and', u'approximately', u'800', u'species', u'.'], u'pos': [u'JJ', u'NNS', u'-LRB-', u'NNS', u':', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'NN', u',', u'WDT', u'VBZ', u'IN', u'CD', u'NNS', u',', u'CD', u'NNS', u',', u'CD', u'NN', u'CC', u'RB', u'CD', u'NNS', u'.'], u'char_offsets': [[149, 153], [154, 158], [159, 160], [160, 174], [174, 175], [177, 178], [179, 182], [183, 185], [186, 191], [192, 194], [195, 199], [199, 200], [201, 206], [207, 215], [216, 218], [219, 223], [224, 233], [233, 234], [235, 237], [238, 246], [246, 247], [248, 251], [252, 258], [259, 262], [263, 276], [277, 280], [281, 288], [288, 289]]}) 
answer: set([u'electric'])
candidate Sentence: (0.1245589554309845, {u'tokens': [u'Most', u'true', u'eels', u'prefer', u'to', u'dwell', u'in', u'shallow', u'waters', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'holes', u'.'], u'lemmas': [u'most', u'true', u'eel', u'prefer', u'to', u'dwell', u'in', u'shallow', u'water', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'hole', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'TO', u'VB', u'IN', u'JJ', u'NNS', u'CC', u'VB', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'NNS', u'.'], u'char_offsets': [[815, 819], [820, 824], [825, 829], [830, 836], [837, 839], [840, 845], [846, 848], [849, 856], [857, 863], [864, 866], [867, 871], [872, 874], [875, 878], [879, 885], [886, 891], [892, 894], [895, 898], [899, 904], [904, 905], [906, 915], [916, 918], [919, 924], [924, 925]]}) 
answer: set([u'electric'])

Is the electric eel a true eel?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, the electric eel is not a true eel.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, the electric eel is not a true eel.') == True
 +  where 'No, the electric eel is not a true eel.' = <src.question_processing.Question_parser instance at 0x116eead88>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param110] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed050>, (<src.tfidf.TF_IDF object at 0x112e8bcd0>, set(['finnish', 'finnish_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed050>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.59648299217224121, {u'tokens': [u'However', u',', u'this', u'does', u'not', u'mean', u'that', u'Finnish', u'is', u'threatened', u'by', u'English', u'.'], u'lemmas': [u'however', u',', u'this', u'do', u'not', u'mean', u'that', u'finnish', u'be', u'threaten', u'by', u'English', u'.'], u'pos': [u'RB', u',', u'DT', u'VBZ', u'RB', u'VB', u'IN', u'JJ', u'VBZ', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[32876, 32883], [32883, 32884], [32885, 32889], [32890, 32894], [32895, 32898], [32899, 32903], [32904, 32908], [32909, 32916], [32917, 32919], [32920, 32930], [32931, 32933], [32934, 32941], [32941, 32942]]}) 
answer: set([])
candidate Sentence: (0.20703616738319397, {u'tokens': [u'*', u'Mit\xe4', u'kuuluu', u'?'], u'lemmas': [u'*', u'mit\xe4', u'kuuluu', u'?'], u'pos': [u'SYM', u'NN', u'NN', u'.'], u'char_offsets': [[39409, 39410], [39410, 39414], [39415, 39421], [39421, 39422]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.19317543506622314, {u'tokens': [u'-LRB-', u'literally', u'``', u'What', u'is', u'heard', u'?', u"''", u'-RRB-'], u'lemmas': [u'-lrb-', u'literally', u'``', u'what', u'be', u'hear', u'?', u"''", u'-rrb-'], u'pos': [u'-LRB-', u'RB', u'``', u'WP', u'VBZ', u'VBN', u'.', u"''", u'-RRB-'], u'char_offsets': [[39482, 39483], [39483, 39492], [39493, 39494], [39494, 39498], [39499, 39501], [39502, 39507], [39507, 39508], [39508, 39509], [39509, 39510]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.19308952987194061, {u'tokens': [u'--', u'Where', u'do', u'you', u'live', u'?'], u'lemmas': [u'--', u'where', u'do', u'you', u'live', u'?'], u'pos': [u':', u'WRB', u'VBP', u'PRP', u'VB', u'.'], u'char_offsets': [[39930, 39931], [39932, 39937], [39938, 39940], [39941, 39944], [39945, 39949], [39949, 39950]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.12556374073028564, {u'tokens': [u'--', u'How', u'are', u'you', u'/', u'How', u'you', u'doing', u'?'], u'lemmas': [u'--', u'how', u'be', u'you', u'/', u'how', u'you', u'do', u'?'], u'pos': [u':', u'WRB', u'VBP', u'PRP', u':', u'WRB', u'PRP', u'VBG', u'.'], u'char_offsets': [[39423, 39424], [39425, 39428], [39429, 39432], [39433, 39436], [39437, 39438], [39439, 39442], [39443, 39446], [39447, 39452], [39452, 39453]]}) 
answer: set([u'threaten', u'english'])

Is Finnish threatened by English?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed050>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param111] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed098>, (<src.tfidf.TF_IDF object at 0x112e8bcd0>, set(['finnish', 'finnish_language', 'language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, Finnish is not threatened by English.') == True
E                +  where 'No, Finnish is not threatened by English.' = <src.question_processing.Question_parser instance at 0x116eed098>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.59648299217224121, {u'tokens': [u'However', u',', u'this', u'does', u'not', u'mean', u'that', u'Finnish', u'is', u'threatened', u'by', u'English', u'.'], u'lemmas': [u'however', u',', u'this', u'do', u'not', u'mean', u'that', u'finnish', u'be', u'threaten', u'by', u'English', u'.'], u'pos': [u'RB', u',', u'DT', u'VBZ', u'RB', u'VB', u'IN', u'JJ', u'VBZ', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[32876, 32883], [32883, 32884], [32885, 32889], [32890, 32894], [32895, 32898], [32899, 32903], [32904, 32908], [32909, 32916], [32917, 32919], [32920, 32930], [32931, 32933], [32934, 32941], [32941, 32942]]}) 
answer: set([])
candidate Sentence: (0.20703616738319397, {u'tokens': [u'*', u'Mit\xe4', u'kuuluu', u'?'], u'lemmas': [u'*', u'mit\xe4', u'kuuluu', u'?'], u'pos': [u'SYM', u'NN', u'NN', u'.'], u'char_offsets': [[39409, 39410], [39410, 39414], [39415, 39421], [39421, 39422]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.19317543506622314, {u'tokens': [u'-LRB-', u'literally', u'``', u'What', u'is', u'heard', u'?', u"''", u'-RRB-'], u'lemmas': [u'-lrb-', u'literally', u'``', u'what', u'be', u'hear', u'?', u"''", u'-rrb-'], u'pos': [u'-LRB-', u'RB', u'``', u'WP', u'VBZ', u'VBN', u'.', u"''", u'-RRB-'], u'char_offsets': [[39482, 39483], [39483, 39492], [39493, 39494], [39494, 39498], [39499, 39501], [39502, 39507], [39507, 39508], [39508, 39509], [39509, 39510]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.19308952987194061, {u'tokens': [u'--', u'Where', u'do', u'you', u'live', u'?'], u'lemmas': [u'--', u'where', u'do', u'you', u'live', u'?'], u'pos': [u':', u'WRB', u'VBP', u'PRP', u'VB', u'.'], u'char_offsets': [[39930, 39931], [39932, 39937], [39938, 39940], [39941, 39944], [39945, 39949], [39949, 39950]]}) 
answer: set([u'threaten', u'english'])
candidate Sentence: (0.12556374073028564, {u'tokens': [u'--', u'How', u'are', u'you', u'/', u'How', u'you', u'doing', u'?'], u'lemmas': [u'--', u'how', u'be', u'you', u'/', u'how', u'you', u'do', u'?'], u'pos': [u':', u'WRB', u'VBP', u'PRP', u':', u'WRB', u'PRP', u'VBG', u'.'], u'char_offsets': [[39423, 39424], [39425, 39428], [39429, 39432], [39433, 39436], [39437, 39438], [39439, 39442], [39443, 39446], [39447, 39452], [39452, 39453]]}) 
answer: set([u'threaten', u'english'])

Is Finnish threatened by English?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, Finnish is not threatened by English.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, Finnish is not threatened by English.') == True
 +  where 'No, Finnish is not threatened by English.' = <src.question_processing.Question_parser instance at 0x116eed098>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param124] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed440>, (<src.tfidf.TF_IDF object at 0x112e8b0d0>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x116eed440>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.35113933682441711, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.11170447617769241, {u'tokens': [u'However', u',', u'the', u'IUCN', u'does', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'Vulnerable', u'.'], u'lemmas': [u'however', u',', u'the', u'IUCN', u'do', u'not', u'believe', u'there', u'be', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'vulnerable', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'VBZ', u'RB', u'VB', u'EX', u'VBZ', u'JJ', u'NN', u'RB', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NNP', u'TO', u'JJ', u'.'], u'char_offsets': [[1270, 1277], [1277, 1278], [1279, 1282], [1283, 1287], [1288, 1292], [1293, 1296], [1297, 1304], [1305, 1310], [1311, 1313], [1314, 1320], [1321, 1330], [1331, 1334], [1335, 1337], [1338, 1348], [1349, 1352], [1353, 1360], [1361, 1365], [1366, 1376], [1377, 1379], [1380, 1390], [1390, 1391]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.10920251160860062, {u'tokens': [u'At', u'this', u'time', u',', u'scientists', u'do', u'not', u'know', u'how', u'the', u'female', u'chooses', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'is', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'lemmas': [u'at', u'this', u'time', u',', u'scientist', u'do', u'not', u'know', u'how', u'the', u'female', u'choose', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'be', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u'WRB', u'DT', u'JJ', u'VBZ', u'WDT', u'NN', u'TO', u'VB', u',', u'CC', u'DT', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17181, 17183], [17184, 17188], [17189, 17193], [17193, 17194], [17195, 17205], [17206, 17208], [17209, 17212], [17213, 17217], [17218, 17221], [17222, 17225], [17226, 17232], [17233, 17240], [17241, 17246], [17247, 17250], [17251, 17253], [17254, 17259], [17259, 17260], [17261, 17264], [17265, 17269], [17270, 17272], [17273, 17274], [17275, 17280], [17281, 17283], [17284, 17291], [17292, 17300], [17300, 17301]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.10047616064548492, {u'tokens': [u'The', u'Giant', u'Panda', u'is', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'trees', u'or', u'rock', u'crevices', u'but', u'does', u'not', u'establish', u'permanent', u'dens', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'be', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'tree', u'or', u'rock', u'crevice', u'but', u'do', u'not', u'establish', u'permanent', u'den', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'VB', u'CC', u'VB', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'CC', u'VBZ', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3717, 3720], [3721, 3726], [3727, 3732], [3733, 3735], [3736, 3740], [3741, 3743], [3744, 3749], [3750, 3753], [3754, 3758], [3759, 3766], [3767, 3769], [3770, 3776], [3777, 3782], [3783, 3785], [3786, 3790], [3791, 3799], [3800, 3803], [3804, 3808], [3809, 3812], [3813, 3822], [3823, 3832], [3833, 3837], [3837, 3838]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.085326492786407471, {u'tokens': [u'However', u',', u'the', u'Giant', u'Panda', u'still', u'has', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'does', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derives', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'lemmas': [u'however', u',', u'the', u'Giant', u'Panda', u'still', u'have', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'do', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derive', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'RB', u',', u'CC', u'RB', u'VBZ', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[4408, 4415], [4415, 4416], [4417, 4420], [4421, 4426], [4427, 4432], [4433, 4438], [4439, 4442], [4443, 4446], [4447, 4456], [4457, 4463], [4464, 4466], [4467, 4468], [4469, 4478], [4479, 4482], [4483, 4487], [4488, 4491], [4492, 4496], [4497, 4500], [4501, 4508], [4509, 4511], [4512, 4518], [4519, 4528], [4529, 4540], [4540, 4541], [4542, 4545], [4546, 4550], [4551, 4558], [4559, 4565], [4566, 4572], [4573, 4576], [4577, 4583], [4584, 4591], [4592, 4596], [4597, 4608], [4609, 4611], [4612, 4618], [4618, 4619]]}) 
answer: set([u'hibernate'])

Do pandas hibernate?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x116eed440>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param125] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed488>, (<src.tfidf.TF_IDF object at 0x112e8b0d0>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed488>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.35113933682441711, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.11170447617769241, {u'tokens': [u'However', u',', u'the', u'IUCN', u'does', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'Vulnerable', u'.'], u'lemmas': [u'however', u',', u'the', u'IUCN', u'do', u'not', u'believe', u'there', u'be', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'vulnerable', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'VBZ', u'RB', u'VB', u'EX', u'VBZ', u'JJ', u'NN', u'RB', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NNP', u'TO', u'JJ', u'.'], u'char_offsets': [[1270, 1277], [1277, 1278], [1279, 1282], [1283, 1287], [1288, 1292], [1293, 1296], [1297, 1304], [1305, 1310], [1311, 1313], [1314, 1320], [1321, 1330], [1331, 1334], [1335, 1337], [1338, 1348], [1349, 1352], [1353, 1360], [1361, 1365], [1366, 1376], [1377, 1379], [1380, 1390], [1390, 1391]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.10920251160860062, {u'tokens': [u'At', u'this', u'time', u',', u'scientists', u'do', u'not', u'know', u'how', u'the', u'female', u'chooses', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'is', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'lemmas': [u'at', u'this', u'time', u',', u'scientist', u'do', u'not', u'know', u'how', u'the', u'female', u'choose', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'be', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u'WRB', u'DT', u'JJ', u'VBZ', u'WDT', u'NN', u'TO', u'VB', u',', u'CC', u'DT', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17181, 17183], [17184, 17188], [17189, 17193], [17193, 17194], [17195, 17205], [17206, 17208], [17209, 17212], [17213, 17217], [17218, 17221], [17222, 17225], [17226, 17232], [17233, 17240], [17241, 17246], [17247, 17250], [17251, 17253], [17254, 17259], [17259, 17260], [17261, 17264], [17265, 17269], [17270, 17272], [17273, 17274], [17275, 17280], [17281, 17283], [17284, 17291], [17292, 17300], [17300, 17301]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.10047616064548492, {u'tokens': [u'The', u'Giant', u'Panda', u'is', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'trees', u'or', u'rock', u'crevices', u'but', u'does', u'not', u'establish', u'permanent', u'dens', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'be', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'tree', u'or', u'rock', u'crevice', u'but', u'do', u'not', u'establish', u'permanent', u'den', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'VB', u'CC', u'VB', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'CC', u'VBZ', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3717, 3720], [3721, 3726], [3727, 3732], [3733, 3735], [3736, 3740], [3741, 3743], [3744, 3749], [3750, 3753], [3754, 3758], [3759, 3766], [3767, 3769], [3770, 3776], [3777, 3782], [3783, 3785], [3786, 3790], [3791, 3799], [3800, 3803], [3804, 3808], [3809, 3812], [3813, 3822], [3823, 3832], [3833, 3837], [3837, 3838]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.085326492786407471, {u'tokens': [u'However', u',', u'the', u'Giant', u'Panda', u'still', u'has', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'does', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derives', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'lemmas': [u'however', u',', u'the', u'Giant', u'Panda', u'still', u'have', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'do', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derive', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'RB', u',', u'CC', u'RB', u'VBZ', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[4408, 4415], [4415, 4416], [4417, 4420], [4421, 4426], [4427, 4432], [4433, 4438], [4439, 4442], [4443, 4446], [4447, 4456], [4457, 4463], [4464, 4466], [4467, 4468], [4469, 4478], [4479, 4482], [4483, 4487], [4488, 4491], [4492, 4496], [4497, 4500], [4501, 4508], [4509, 4511], [4512, 4518], [4519, 4528], [4529, 4540], [4540, 4541], [4542, 4545], [4546, 4550], [4551, 4558], [4559, 4565], [4566, 4572], [4573, 4576], [4577, 4583], [4584, 4591], [4592, 4596], [4597, 4608], [4609, 4611], [4612, 4618], [4618, 4619]]}) 
answer: set([u'hibernate'])

Do pandas hibernate?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed488>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param128] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed560>, (<src.tfidf.TF_IDF object at 0x112e8b0d0>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eed560>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39058977365493774, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1794, 1795], [1796, 1801], [1802, 1807], [1808, 1811], [1811, 1812]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.26230424642562866, {u'tokens': [u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 15], [16, 17], [17, 27], [28, 39], [39, 40], [41, 50], [51, 58], [59, 60], [60, 68], [69, 84], [84, 85], [85, 86], [87, 89], [90, 91], [92, 98], [99, 105], [106, 108], [109, 124], [125, 128], [129, 134], [135, 142], [143, 148], [148, 149]]}) 
answer: set([])
candidate Sentence: (0.23647451400756836, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.1314263790845871, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25069, 25072], [25073, 25076], [25077, 25082], [25083, 25088], [25089, 25094], [25095, 25099], [25100, 25103], [25104, 25108], [25109, 25112], [25113, 25121], [25122, 25124], [25125, 25134], [25135, 25142], [25143, 25148], [25148, 25149]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.10815749317407608, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6420, 6423], [6424, 6429], [6430, 6435], [6436, 6442], [6443, 6446], [6447, 6456], [6457, 6459], [6460, 6464], [6465, 6470], [6471, 6472], [6473, 6488], [6489, 6499], [6500, 6510], [6510, 6511]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eed560>.answer
_____________________________ test_yesno[param129] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed5a8>, (<src.tfidf.TF_IDF object at 0x112e8b0d0>, set(['giant', 'giant_panda', 'panda'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eed5a8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39058977365493774, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1794, 1795], [1796, 1801], [1802, 1807], [1808, 1811], [1811, 1812]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.26230424642562866, {u'tokens': [u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 9], [10, 15], [16, 17], [17, 27], [28, 39], [39, 40], [41, 50], [51, 58], [59, 60], [60, 68], [69, 84], [84, 85], [85, 86], [87, 89], [90, 91], [92, 98], [99, 105], [106, 108], [109, 124], [125, 128], [129, 134], [135, 142], [143, 148], [148, 149]]}) 
answer: set([])
candidate Sentence: (0.23647451400756836, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3839, 3842], [3843, 3847], [3848, 3854], [3854, 3855], [3856, 3862], [3863, 3865], [3866, 3869], [3870, 3879], [3879, 3880], [3881, 3886], [3887, 3889], [3890, 3897], [3898, 3900], [3901, 3906], [3907, 3918], [3919, 3926], [3926, 3927], [3928, 3931], [3932, 3936], [3937, 3944], [3945, 3949], [3950, 3952], [3953, 3963], [3964, 3968], [3969, 3975], [3976, 3988], [3988, 3989]]}) 
answer: set([])
candidate Sentence: (0.1314263790845871, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25069, 25072], [25073, 25076], [25077, 25082], [25083, 25088], [25089, 25094], [25095, 25099], [25100, 25103], [25104, 25108], [25109, 25112], [25113, 25121], [25122, 25124], [25125, 25134], [25135, 25142], [25143, 25148], [25148, 25149]]}) 
answer: set([u'mammal'])
candidate Sentence: (0.10815749317407608, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6420, 6423], [6424, 6429], [6430, 6435], [6436, 6442], [6443, 6446], [6447, 6456], [6457, 6459], [6460, 6464], [6465, 6470], [6471, 6472], [6473, 6488], [6489, 6499], [6500, 6510], [6510, 6511]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eed5a8>.answer
_____________________________ test_yesno[param134] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed710>, (<src.tfidf.TF_IDF object at 0x112e8b9d0>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed710>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.51019048690795898, {u'tokens': [u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5423, 5430], [5431, 5434], [5435, 5437], [5438, 5445], [5446, 5450], [5451, 5454], [5455, 5460], [5461, 5471], [5471, 5472], [5473, 5481], [5482, 5485], [5486, 5494], [5494, 5495], [5496, 5498], [5499, 5507], [5508, 5514], [5515, 5517], [5518, 5521], [5522, 5525], [5526, 5535], [5536, 5538], [5539, 5541], [5542, 5550], [5551, 5557], [5558, 5560], [5561, 5563], [5564, 5569], [5570, 5573], [5574, 5578], [5579, 5580], [5581, 5591], [5592, 5597], [5598, 5600], [5601, 5602], [5603, 5609], [5610, 5615], [5616, 5623], [5624, 5626], [5627, 5630], [5631, 5636], [5637, 5639], [5640, 5643], [5644, 5650], [5650, 5652], [5653, 5657], [5657, 5658]]}) 
answer: set([])
candidate Sentence: (0.17831169068813324, {u'tokens': [u'In', u'many', u'cases', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shielding', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'lemmas': [u'in', u'many', u'case', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shield', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'DT', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'VBG', u'TO', u'VB', u'NN', u'IN', u'JJ', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[36823, 36825], [36826, 36830], [36831, 36836], [36837, 36840], [36841, 36852], [36853, 36857], [36858, 36862], [36863, 36867], [36868, 36870], [36871, 36880], [36881, 36883], [36884, 36891], [36892, 36898], [36899, 36901], [36902, 36910], [36911, 36923], [36924, 36927], [36928, 36933], [36933, 36934]]}) 
answer: set([u'device', u'dependent', u'acoustic'])
candidate Sentence: (0.16498072445392609, {u'tokens': [u'It', u'is', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[39955, 39957], [39958, 39960], [39961, 39962], [39963, 39969], [39970, 39977], [39978, 39980], [39981, 39993], [39994, 40002], [40003, 40010], [40010, 40011]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.15365138649940491, {u'tokens': [u'On', u'both', u'electric', u'and', u'acoustic', u'guitars', u',', u'the', u'bridge', u'holds', u'the', u'strings', u'in', u'place', u'on', u'the', u'body', u'.'], u'lemmas': [u'on', u'both', u'electric', u'and', u'acoustic', u'guitar', u',', u'the', u'bridge', u'hold', u'the', u'string', u'in', u'place', u'on', u'the', u'body', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'DT', u'NN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[38164, 38166], [38167, 38171], [38172, 38180], [38181, 38184], [38185, 38193], [38194, 38201], [38201, 38202], [38203, 38206], [38207, 38213], [38214, 38219], [38220, 38223], [38224, 38231], [38232, 38234], [38235, 38240], [38241, 38243], [38244, 38247], [38248, 38252], [38252, 38253]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.13757786154747009, {u'tokens': [u'It', u'is', u'flat', u'on', u'classical', u'guitars', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'flat', u'on', u'classical', u'guitar', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[19704, 19706], [19707, 19709], [19710, 19714], [19715, 19717], [19718, 19727], [19728, 19735], [19736, 19739], [19740, 19748], [19749, 19755], [19756, 19765], [19766, 19768], [19769, 19777], [19778, 19781], [19782, 19790], [19791, 19798], [19798, 19799]]}) 
answer: set([u'dependent', u'device', u'external'])

Is an acoustic guitar dependent on an external device?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116eed710>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param135] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed758>, (<src.tfidf.TF_IDF object at 0x112e8b9d0>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x116eed758>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.51019048690795898, {u'tokens': [u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5423, 5430], [5431, 5434], [5435, 5437], [5438, 5445], [5446, 5450], [5451, 5454], [5455, 5460], [5461, 5471], [5471, 5472], [5473, 5481], [5482, 5485], [5486, 5494], [5494, 5495], [5496, 5498], [5499, 5507], [5508, 5514], [5515, 5517], [5518, 5521], [5522, 5525], [5526, 5535], [5536, 5538], [5539, 5541], [5542, 5550], [5551, 5557], [5558, 5560], [5561, 5563], [5564, 5569], [5570, 5573], [5574, 5578], [5579, 5580], [5581, 5591], [5592, 5597], [5598, 5600], [5601, 5602], [5603, 5609], [5610, 5615], [5616, 5623], [5624, 5626], [5627, 5630], [5631, 5636], [5637, 5639], [5640, 5643], [5644, 5650], [5650, 5652], [5653, 5657], [5657, 5658]]}) 
answer: set([])
candidate Sentence: (0.17831169068813324, {u'tokens': [u'In', u'many', u'cases', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shielding', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'lemmas': [u'in', u'many', u'case', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shield', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'DT', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'VBG', u'TO', u'VB', u'NN', u'IN', u'JJ', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[36823, 36825], [36826, 36830], [36831, 36836], [36837, 36840], [36841, 36852], [36853, 36857], [36858, 36862], [36863, 36867], [36868, 36870], [36871, 36880], [36881, 36883], [36884, 36891], [36892, 36898], [36899, 36901], [36902, 36910], [36911, 36923], [36924, 36927], [36928, 36933], [36933, 36934]]}) 
answer: set([u'device', u'dependent', u'acoustic'])
candidate Sentence: (0.16498072445392609, {u'tokens': [u'It', u'is', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[39955, 39957], [39958, 39960], [39961, 39962], [39963, 39969], [39970, 39977], [39978, 39980], [39981, 39993], [39994, 40002], [40003, 40010], [40010, 40011]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.15365138649940491, {u'tokens': [u'On', u'both', u'electric', u'and', u'acoustic', u'guitars', u',', u'the', u'bridge', u'holds', u'the', u'strings', u'in', u'place', u'on', u'the', u'body', u'.'], u'lemmas': [u'on', u'both', u'electric', u'and', u'acoustic', u'guitar', u',', u'the', u'bridge', u'hold', u'the', u'string', u'in', u'place', u'on', u'the', u'body', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'DT', u'NN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[38164, 38166], [38167, 38171], [38172, 38180], [38181, 38184], [38185, 38193], [38194, 38201], [38201, 38202], [38203, 38206], [38207, 38213], [38214, 38219], [38220, 38223], [38224, 38231], [38232, 38234], [38235, 38240], [38241, 38243], [38244, 38247], [38248, 38252], [38252, 38253]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.13757786154747009, {u'tokens': [u'It', u'is', u'flat', u'on', u'classical', u'guitars', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'flat', u'on', u'classical', u'guitar', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[19704, 19706], [19707, 19709], [19710, 19714], [19715, 19717], [19718, 19727], [19728, 19735], [19736, 19739], [19740, 19748], [19749, 19755], [19756, 19765], [19766, 19768], [19769, 19777], [19778, 19781], [19782, 19790], [19791, 19798], [19798, 19799]]}) 
answer: set([u'dependent', u'device', u'external'])

Is an acoustic guitar dependent on an external device?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x116eed758>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param138] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed830>, (<src.tfidf.TF_IDF object at 0x112e8b9d0>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eed830>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32999053597450256, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[48562, 48563], [48564, 48572], [48572, 48573]]}) 
answer: set([u'similar', u'classical'])
candidate Sentence: (0.24714069068431854, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[5956, 5961], [5962, 5965], [5966, 5973], [5974, 5981], [5982, 5995], [5996, 6002], [6003, 6006], [6007, 6015], [6016, 6022], [6023, 6028], [6028, 6029], [6030, 6039], [6040, 6043], [6044, 6052], [6053, 6060], [6060, 6061], [6062, 6067], [6068, 6074], [6075, 6082], [6082, 6083], [6084, 6089], [6090, 6097], [6098, 6101], [6102, 6106], [6107, 6110], [6111, 6113], [6114, 6115], [6115, 6119], [6119, 6120], [6121, 6127], [6127, 6128], [6129, 6135], [6136, 6142], [6143, 6150], [6151, 6154], [6155, 6158], [6159, 6163], [6164, 6167], [6168, 6174], [6174, 6175]]}) 
answer: set([u'similar'])
candidate Sentence: (0.23813384771347046, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[28874, 28883], [28884, 28887], [28888, 28896], [28897, 28908], [28909, 28921], [28922, 28926], [28927, 28930], [28931, 28938], [28938, 28939], [28940, 28943], [28944, 28949], [28950, 28954], [28955, 28959], [28960, 28970], [28971, 28973], [28974, 28981], [28982, 28991], [28991, 28992], [28993, 28997], [28998, 29000], [29001, 29006], [29007, 29010], [29011, 29023], [29024, 29033], [29033, 29034]]}) 
answer: set([u'similar'])
candidate Sentence: (0.21562930941581726, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9375, 9376], [9376, 9384], [9385, 9386], [9386, 9398], [9398, 9399], [9400, 9407], [9407, 9408], [9409, 9416], [9417, 9419], [9420, 9423], [9424, 9433], [9434, 9440], [9440, 9441], [9442, 9449], [9449, 9450], [9451, 9457], [9458, 9461], [9462, 9468], [9469, 9474], [9475, 9477], [9478, 9481], [9482, 9496], [9497, 9503], [9504, 9507], [9508, 9512], [9513, 9517], [9518, 9520], [9521, 9528], [9529, 9542], [9543, 9549], [9550, 9554], [9555, 9556], [9557, 9566], [9567, 9573], [9574, 9577], [9578, 9580], [9581, 9584], [9585, 9586], [9587, 9595], [9595, 9596], [9597, 9607], [9608, 9612], [9613, 9616], [9617, 9625], [9626, 9636], [9637, 9643], [9643, 9644]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.21466012299060822, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[10873, 10876], [10877, 10885], [10886, 10895], [10896, 10898], [10899, 10902], [10903, 10909], [10910, 10912], [10913, 10922], [10923, 10930], [10931, 10933], [10934, 10937], [10938, 10943], [10943, 10944]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eed830>.answer
_____________________________ test_yesno[param139] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eed878>, (<src.tfidf.TF_IDF object at 0x112e8b9d0>, set(['guitar'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eed878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32999053597450256, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[48562, 48563], [48564, 48572], [48572, 48573]]}) 
answer: set([u'similar', u'classical'])
candidate Sentence: (0.24714069068431854, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[5956, 5961], [5962, 5965], [5966, 5973], [5974, 5981], [5982, 5995], [5996, 6002], [6003, 6006], [6007, 6015], [6016, 6022], [6023, 6028], [6028, 6029], [6030, 6039], [6040, 6043], [6044, 6052], [6053, 6060], [6060, 6061], [6062, 6067], [6068, 6074], [6075, 6082], [6082, 6083], [6084, 6089], [6090, 6097], [6098, 6101], [6102, 6106], [6107, 6110], [6111, 6113], [6114, 6115], [6115, 6119], [6119, 6120], [6121, 6127], [6127, 6128], [6129, 6135], [6136, 6142], [6143, 6150], [6151, 6154], [6155, 6158], [6159, 6163], [6164, 6167], [6168, 6174], [6174, 6175]]}) 
answer: set([u'similar'])
candidate Sentence: (0.23813384771347046, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[28874, 28883], [28884, 28887], [28888, 28896], [28897, 28908], [28909, 28921], [28922, 28926], [28927, 28930], [28931, 28938], [28938, 28939], [28940, 28943], [28944, 28949], [28950, 28954], [28955, 28959], [28960, 28970], [28971, 28973], [28974, 28981], [28982, 28991], [28991, 28992], [28993, 28997], [28998, 29000], [29001, 29006], [29007, 29010], [29011, 29023], [29024, 29033], [29033, 29034]]}) 
answer: set([u'similar'])
candidate Sentence: (0.21562930941581726, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9375, 9376], [9376, 9384], [9385, 9386], [9386, 9398], [9398, 9399], [9400, 9407], [9407, 9408], [9409, 9416], [9417, 9419], [9420, 9423], [9424, 9433], [9434, 9440], [9440, 9441], [9442, 9449], [9449, 9450], [9451, 9457], [9458, 9461], [9462, 9468], [9469, 9474], [9475, 9477], [9478, 9481], [9482, 9496], [9497, 9503], [9504, 9507], [9508, 9512], [9513, 9517], [9518, 9520], [9521, 9528], [9529, 9542], [9543, 9549], [9550, 9554], [9555, 9556], [9557, 9566], [9567, 9573], [9574, 9577], [9578, 9580], [9581, 9584], [9585, 9586], [9587, 9595], [9595, 9596], [9597, 9607], [9608, 9612], [9613, 9616], [9617, 9625], [9626, 9636], [9637, 9643], [9643, 9644]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.21466012299060822, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[10873, 10876], [10877, 10885], [10886, 10895], [10896, 10898], [10899, 10902], [10903, 10909], [10910, 10912], [10913, 10922], [10923, 10930], [10931, 10933], [10934, 10937], [10938, 10943], [10943, 10944]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eed878>.answer
_____________________________ test_yesno[param146] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eeda70>, (<src.tfidf.TF_IDF object at 0x11485cb10>, set(['becquerel', 'henri', 'henri_becquerel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eeda70>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.53987157344818115, {u'tokens': [u'He', u'studied', u'science', u'at', u'the', u'\xc9cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'\xc9cole', u'des', u'Ponts', u'et', u'Chauss\xe9es', u'.'], u'lemmas': [u'he', u'study', u'science', u'at', u'the', u'\xc9cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'\xc9cole', u'des', u'Ponts', u'et', u'chauss\xe9es', u'.'], u'pos': [u'PRP', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NNP', u'FW', u'NNP', u'FW', u'FW', u'.'], u'char_offsets': [[400, 402], [403, 410], [411, 418], [419, 421], [422, 425], [426, 431], [432, 445], [446, 449], [450, 461], [462, 464], [465, 468], [469, 474], [475, 478], [479, 484], [485, 487], [488, 497], [497, 498]]}) 
answer: set([u'cole', u'chausses'])
candidate Sentence: (0.10870081186294556, {u'tokens': [u'In', u'1908', u',', u'the', u'year', u'of', u'his', u'death', u',', u'Becquerel', u'was', u'elected', u'Permanent', u'Secretary', u'of', u'the', u'Acad\xe9mie', u'des', u'Sciences', u'.'], u'lemmas': [u'in', u'1908', u',', u'the', u'year', u'of', u'he', u'death', u',', u'Becquerel', u'be', u'elect', u'Permanent', u'Secretary', u'of', u'the', u'Acad\xe9mie', u'des', u'Sciences', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'VBN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[2726, 2728], [2729, 2733], [2733, 2734], [2735, 2738], [2739, 2743], [2744, 2746], [2747, 2750], [2751, 2756], [2756, 2757], [2758, 2767], [2768, 2771], [2772, 2779], [2780, 2789], [2790, 2799], [2800, 2802], [2803, 2806], [2807, 2815], [2816, 2819], [2820, 2828], [2828, 2829]]}) 
answer: set([u'science', u'study', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.084758460521697998, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1316, 1326], [1327, 1330], [1331, 1337], [1338, 1340], [1341, 1344], [1345, 1351], [1352, 1359], [1360, 1362], [1363, 1371], [1372, 1374], [1375, 1377], [1378, 1385], [1386, 1390], [1390, 1391], [1392, 1394], [1395, 1399], [1399, 1400], [1402, 1405], [1406, 1411], [1412, 1413], [1414, 1421], [1422, 1434], [1435, 1440], [1441, 1445], [1446, 1447], [1448, 1455], [1456, 1464], [1465, 1467], [1468, 1471], [1472, 1478], [1479, 1481], [1482, 1486], [1487, 1492], [1493, 1498], [1499, 1504], [1504, 1505], [1506, 1510], [1511, 1515], [1516, 1519], [1520, 1525], [1526, 1530], [1531, 1534], [1535, 1541], [1542, 1549], [1550, 1554], [1555, 1560], [1561, 1568], [1569, 1571], [1572, 1575], [1576, 1579], [1580, 1583], [1584, 1585], [1586, 1589], [1589, 1590]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.082553312182426453, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2830, 2832], [2833, 2837], [2838, 2840], [2841, 2844], [2845, 2848], [2849, 2851], [2852, 2854], [2855, 2857], [2858, 2860], [2861, 2868], [2868, 2869]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.062086045742034912, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[542, 544], [545, 549], [549, 550], [551, 553], [554, 560], [561, 564], [565, 570], [571, 573], [574, 577], [578, 584], [585, 587], [588, 594], [595, 598], [599, 606], [607, 612], [613, 615], [616, 619], [620, 626], [627, 635], [636, 646], [647, 656], [656, 657]]}) 
answer: set([u'science', u'study', u'des', u'ponts', u'et', u'cole', u'chausses'])

Did Becquerel study science at the cole des Ponts et Chausses?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116eeda70>.answer
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedb00>, (<src.tfidf.TF_IDF object at 0x11485cb10>, set(['becquerel', 'henri', 'henri_becquerel'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedb00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79266440868377686, {u'tokens': [u'In', u'1894', u',', u'he', u'became', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'Highways', u'.'], u'lemmas': [u'in', u'1894', u',', u'he', u'become', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'highway', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'NNS', u'.'], u'char_offsets': [[658, 660], [661, 665], [665, 666], [667, 669], [670, 676], [677, 682], [683, 691], [692, 694], [695, 698], [699, 709], [710, 712], [713, 720], [721, 724], [725, 733], [733, 734]]}) 
answer: set([u'1892'])
candidate Sentence: (0.19068318605422974, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Mus\xe9um', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[542, 544], [545, 549], [549, 550], [551, 553], [554, 560], [561, 564], [565, 570], [571, 573], [574, 577], [578, 584], [585, 587], [588, 594], [595, 598], [599, 606], [607, 612], [613, 615], [616, 619], [620, 626], [627, 635], [636, 646], [647, 656], [656, 657]]}) 
answer: set([u'department', u'bridges', u'chief', u'highway', u'engineer'])
candidate Sentence: (0.1143018901348114, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumi\xe8re', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1316, 1326], [1327, 1330], [1331, 1337], [1338, 1340], [1341, 1344], [1345, 1351], [1352, 1359], [1360, 1362], [1363, 1371], [1372, 1374], [1375, 1377], [1378, 1385], [1386, 1390], [1390, 1391], [1392, 1394], [1395, 1399], [1399, 1400], [1402, 1405], [1406, 1411], [1412, 1413], [1414, 1421], [1422, 1434], [1435, 1440], [1441, 1445], [1446, 1447], [1448, 1455], [1456, 1464], [1465, 1467], [1468, 1471], [1472, 1478], [1479, 1481], [1482, 1486], [1487, 1492], [1493, 1498], [1499, 1504], [1504, 1505], [1506, 1510], [1511, 1515], [1516, 1519], [1520, 1525], [1526, 1530], [1531, 1534], [1535, 1541], [1542, 1549], [1550, 1554], [1555, 1560], [1561, 1568], [1569, 1571], [1572, 1575], [1576, 1579], [1580, 1583], [1584, 1585], [1586, 1589], [1589, 1590]]}) 
answer: set([u'bridges', u'chief', u'highway', u'department', u'1892', u'engineer'])
candidate Sentence: (0.048345927149057388, {u'tokens': [u'In', u'1903', u',', u'he', u'shared', u'the', u'Nobel', u'Prize', u'in', u'Physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'services', u'he', u'has', u'rendered', u'by', u'his', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'lemmas': [u'in', u'1903', u',', u'he', u'share', u'the', u'Nobel', u'Prize', u'in', u'physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'service', u'he', u'have', u'render', u'by', u'he', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'``', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'PRP', u'VBZ', u'VBN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u"''", u'.'], u'char_offsets': [[2332, 2334], [2335, 2339], [2339, 2340], [2341, 2343], [2344, 2350], [2351, 2354], [2355, 2360], [2361, 2366], [2367, 2369], [2370, 2377], [2378, 2382], [2383, 2389], [2390, 2393], [2394, 2399], [2400, 2405], [2406, 2407], [2407, 2409], [2410, 2421], [2422, 2424], [2425, 2428], [2429, 2442], [2443, 2451], [2452, 2454], [2455, 2458], [2459, 2467], [2468, 2470], [2471, 2474], [2475, 2484], [2485, 2487], [2488, 2499], [2500, 2513], [2513, 2514], [2514, 2515]]}) 
answer: set([u'bridges', u'chief', u'highway', u'department', u'become', u'1892', u'engineer'])
candidate Sentence: (0.023881666362285614, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2830, 2832], [2833, 2837], [2838, 2840], [2841, 2844], [2845, 2848], [2849, 2851], [2852, 2854], [2855, 2857], [2858, 2860], [2861, 2868], [2868, 2869]]}) 
answer: set([u'bridges', u'chief', u'1892', u'department', u'become', u'highway', u'engineer'])

Did he become chief engineer in the Department of Bridges and Highways in 1892?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedb00>.answer
_____________________________ test_yesno[param151] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedbd8>, (<src.tfidf.TF_IDF object at 0x112e8b790>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eedbd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32104825973510742, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[47840, 47842], [47843, 47848], [47849, 47850], [47851, 47862], [47862, 47863], [47864, 47870], [47871, 47873], [47874, 47875], [47875, 47878], [47879, 47884], [47885, 47891], [47892, 47894], [47895, 47900], [47900, 47901]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[46579, 46580], [46581, 46587], [46587, 46588], [46589, 46594], [46594, 46595]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49044, 49045], [49045, 49051], [49051, 49052], [49053, 49058], [49058, 49059]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[48584, 48585], [48586, 48592], [48592, 48593], [48594, 48599], [48599, 48600]]}) 
answer: set([u'british'])
candidate Sentence: (0.17842245101928711, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u':', u'CD', u'.'], u'char_offsets': [[47347, 47348], [47348, 47351], [47352, 47358], [47359, 47364], [47365, 47367], [47368, 47376], [47376, 47377], [47378, 47384], [47384, 47386], [47387, 47393], [47394, 47396], [47397, 47405], [47405, 47406], [47407, 47414], [47415, 47422], [47423, 47426], [47427, 47430], [47431, 47438], [47439, 47441], [47442, 47449], [47450, 47452], [47452, 47453], [47454, 47457], [47457, 47458], [47458, 47461], [47461, 47462]]}) 
answer: set([])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116eedbd8>.answer
_____________________________ test_yesno[param152] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedc20>, (<src.tfidf.TF_IDF object at 0x112e8b790>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was English.')
E                +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x116eedc20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32104825973510742, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[47840, 47842], [47843, 47848], [47849, 47850], [47851, 47862], [47862, 47863], [47864, 47870], [47871, 47873], [47874, 47875], [47875, 47878], [47879, 47884], [47885, 47891], [47892, 47894], [47895, 47900], [47900, 47901]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[46579, 46580], [46581, 46587], [46587, 46588], [46589, 46594], [46594, 46595]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49044, 49045], [49045, 49051], [49051, 49052], [49053, 49058], [49058, 49059]]}) 
answer: set([u'british'])
candidate Sentence: (0.20598186552524567, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[48584, 48585], [48586, 48592], [48592, 48593], [48594, 48599], [48599, 48600]]}) 
answer: set([u'british'])
candidate Sentence: (0.17842245101928711, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417', u'--', u'438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u':', u'CD', u'.'], u'char_offsets': [[47347, 47348], [47348, 47351], [47352, 47358], [47359, 47364], [47365, 47367], [47368, 47376], [47376, 47377], [47378, 47384], [47384, 47386], [47387, 47393], [47394, 47396], [47397, 47405], [47405, 47406], [47407, 47414], [47415, 47422], [47423, 47426], [47427, 47430], [47431, 47438], [47439, 47441], [47442, 47449], [47450, 47452], [47452, 47453], [47454, 47457], [47457, 47458], [47458, 47461], [47461, 47462]]}) 
answer: set([])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was English.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was English.')
 +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x116eedc20>.answer
_____________________________ test_yesno[param153] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedc68>, (<src.tfidf.TF_IDF object at 0x112e8b790>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
E                +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x116eedc68>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.35576623678207397, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[47840, 47842], [47843, 47848], [47849, 47850], [47851, 47862], [47862, 47863], [47864, 47870], [47871, 47873], [47874, 47875], [47875, 47878], [47879, 47884], [47885, 47891], [47892, 47894], [47895, 47900], [47900, 47901]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22825659811496735, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49044, 49045], [49045, 49051], [49051, 49052], [49053, 49058], [49058, 49059]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22825659811496735, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[48584, 48585], [48586, 48592], [48592, 48593], [48594, 48599], [48599, 48600]]}) 
answer: set([u'religious'])
candidate Sentence: (0.22825659811496735, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[46579, 46580], [46581, 46587], [46587, 46588], [46589, 46594], [46594, 46595]]}) 
answer: set([u'religious'])
candidate Sentence: (0.17603617906570435, {u'tokens': [u'Thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'views', u'and', u'Anglican', u'orthodoxy', u'was', u'averted', u'.'], u'lemmas': [u'thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'view', u'and', u'anglican', u'orthodoxy', u'be', u'avert', u'.'], u'pos': [u'RB', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[10777, 10781], [10782, 10783], [10784, 10792], [10793, 10800], [10801, 10807], [10807, 10809], [10810, 10819], [10820, 10825], [10826, 10829], [10830, 10838], [10839, 10848], [10849, 10852], [10853, 10860], [10860, 10861]]}) 
answer: set([])

Was Isaac Newton religious?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was highly religious, though an unorthodox Christian.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 300 documents, 13640 characters, 2640 tokens, 45.5 char/doc, 8.8 tok/doc RATES: 20.537 doc/sec, 180.7 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
 +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x116eedc68>.answer
_____________________________ test_yesno[param159] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eede18>, (<src.tfidf.TF_IDF object at 0x112e8b790>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eede18>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32054281234741211, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3249, 3251], [3251, 3252], [3253, 3259], [3260, 3262], [3263, 3270], [3271, 3272], [3273, 3276], [3276, 3277], [3278, 3282], [3282, 3283], [3284, 3288], [3289, 3292], [3293, 3296], [3297, 3299], [3300, 3305], [3306, 3312], [3313, 3318], [3319, 3321], [3322, 3325], [3326, 3335], [3335, 3336], [3337, 3343], [3344, 3347], [3348, 3356], [3357, 3359], [3360, 3363], [3364, 3368], [3368, 3370], [3371, 3377], [3377, 3378], [3379, 3387], [3388, 3389], [3389, 3394], [3395, 3398], [3399, 3408], [3409, 3412], [3413, 3418], [3419, 3421], [3422, 3426], [3427, 3431], [3432, 3433], [3434, 3441], [3442, 3448], [3449, 3453], [3453, 3454], [3454, 3455]]}) 
answer: set([u'schol'])
candidate Sentence: (0.25443542003631592, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44392, 44395], [44396, 44400], [44400, 44402], [44403, 44409], [44409, 44410], [44411, 44419], [44419, 44420], [44421, 44427], [44428, 44432], [44433, 44436], [44437, 44441], [44442, 44445], [44446, 44455], [44456, 44458], [44459, 44462], [44463, 44469], [44469, 44470], [44471, 44479], [44480, 44483], [44484, 44495], [44496, 44498], [44499, 44502], [44503, 44513], [44513, 44515], [44516, 44522], [44523, 44527], [44528, 44533], [44534, 44539], [44539, 44540]]}) 
answer: set([u'educate', u'schol'])
candidate Sentence: (0.22652646899223328, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[47840, 47842], [47843, 47848], [47849, 47850], [47851, 47862], [47862, 47863], [47864, 47870], [47871, 47873], [47874, 47875], [47875, 47878], [47879, 47884], [47885, 47891], [47892, 47894], [47895, 47900], [47900, 47901]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])
candidate Sentence: (0.1531941294670105, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38346, 38354], [38355, 38359], [38359, 38360], [38361, 38363], [38363, 38365], [38366, 38369], [38370, 38372], [38373, 38379], [38379, 38381], [38382, 38387], [38388, 38390], [38391, 38394], [38395, 38399], [38399, 38401], [38402, 38410], [38411, 38414], [38415, 38422], [38423, 38430], [38431, 38439], [38439, 38440]]}) 
answer: set([u'educate', u'grantham', u'schol'])
candidate Sentence: (0.14810158312320709, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49044, 49045], [49045, 49051], [49051, 49052], [49053, 49058], [49058, 49059]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eede18>.answer
_____________________________ test_yesno[param160] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eede60>, (<src.tfidf.TF_IDF object at 0x112e8b790>, set(['isaac', 'isaac_newton', 'newton'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eede60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32054281234741211, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3249, 3251], [3251, 3252], [3253, 3259], [3260, 3262], [3263, 3270], [3271, 3272], [3273, 3276], [3276, 3277], [3278, 3282], [3282, 3283], [3284, 3288], [3289, 3292], [3293, 3296], [3297, 3299], [3300, 3305], [3306, 3312], [3313, 3318], [3319, 3321], [3322, 3325], [3326, 3335], [3335, 3336], [3337, 3343], [3344, 3347], [3348, 3356], [3357, 3359], [3360, 3363], [3364, 3368], [3368, 3370], [3371, 3377], [3377, 3378], [3379, 3387], [3388, 3389], [3389, 3394], [3395, 3398], [3399, 3408], [3409, 3412], [3413, 3418], [3419, 3421], [3422, 3426], [3427, 3431], [3432, 3433], [3434, 3441], [3442, 3448], [3449, 3453], [3453, 3454], [3454, 3455]]}) 
answer: set([u'schol'])
candidate Sentence: (0.25443542003631592, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44392, 44395], [44396, 44400], [44400, 44402], [44403, 44409], [44409, 44410], [44411, 44419], [44419, 44420], [44421, 44427], [44428, 44432], [44433, 44436], [44437, 44441], [44442, 44445], [44446, 44455], [44456, 44458], [44459, 44462], [44463, 44469], [44469, 44470], [44471, 44479], [44480, 44483], [44484, 44495], [44496, 44498], [44499, 44502], [44503, 44513], [44513, 44515], [44516, 44522], [44523, 44527], [44528, 44533], [44534, 44539], [44539, 44540]]}) 
answer: set([u'educate', u'schol'])
candidate Sentence: (0.22652646899223328, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[47840, 47842], [47843, 47848], [47849, 47850], [47851, 47862], [47862, 47863], [47864, 47870], [47871, 47873], [47874, 47875], [47875, 47878], [47879, 47884], [47885, 47891], [47892, 47894], [47895, 47900], [47900, 47901]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])
candidate Sentence: (0.1531941294670105, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38346, 38354], [38355, 38359], [38359, 38360], [38361, 38363], [38363, 38365], [38366, 38369], [38370, 38372], [38373, 38379], [38379, 38381], [38382, 38387], [38388, 38390], [38391, 38394], [38395, 38399], [38399, 38401], [38402, 38410], [38411, 38414], [38415, 38422], [38423, 38430], [38431, 38439], [38439, 38440]]}) 
answer: set([u'educate', u'grantham', u'schol'])
candidate Sentence: (0.14810158312320709, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[49044, 49045], [49045, 49051], [49051, 49052], [49053, 49058], [49058, 49059]]}) 
answer: set([u'king', u'educate', u'grantham', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eede60>.answer
_____________________________ test_yesno[param161] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedea8>, (<src.tfidf.TF_IDF object at 0x1103c3850>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedea8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38195893168449402, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22070, 22077], [22077, 22079], [22080, 22087], [22088, 22096], [22097, 22105], [22106, 22111], [22112, 22115], [22116, 22124], [22125, 22133], [22134, 22138], [22138, 22139], [22140, 22148], [22149, 22151], [22152, 22155], [22156, 22161], [22162, 22164], [22165, 22173], [22173, 22174], [22175, 22184], [22185, 22188], [22189, 22196], [22197, 22203], [22204, 22212], [22213, 22215], [22216, 22225], [22225, 22226]]}) 
answer: set([u'build'])
candidate Sentence: (0.28225806355476379, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[22468, 22471], [22472, 22477], [22478, 22480], [22481, 22489], [22490, 22492], [22493, 22500], [22501, 22508], [22509, 22511], [22512, 22521], [22522, 22525], [22526, 22533], [22534, 22542], [22543, 22545], [22546, 22553], [22554, 22557], [22558, 22567], [22567, 22568]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18197523057460785, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[8969, 8972], [8973, 8977], [8978, 8986], [8987, 8994], [8994, 8996], [8997, 9006], [9007, 9010], [9011, 9020], [9021, 9028], [9029, 9032], [9033, 9040], [9041, 9048], [9049, 9057], [9058, 9061], [9062, 9065], [9066, 9070], [9071, 9076], [9077, 9085], [9085, 9086]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])
candidate Sentence: (0.16578656435012817, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3444, 3455], [3456, 3458], [3459, 3466], [3467, 3469], [3470, 3474], [3475, 3479], [3480, 3487], [3488, 3499], [3500, 3504], [3505, 3508], [3509, 3516], [3517, 3526], [3526, 3527], [3528, 3534], [3535, 3537], [3538, 3541], [3542, 3547], [3547, 3548], [3549, 3551], [3552, 3560], [3561, 3565], [3566, 3568], [3569, 3574], [3575, 3581], [3582, 3590], [3591, 3597], [3598, 3602], [3603, 3606], [3607, 3612], [3613, 3622], [3623, 3625], [3626, 3630], [3630, 3631]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.15428701043128967, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23202, 23205], [23206, 23210], [23211, 23213], [23214, 23224], [23225, 23227], [23228, 23235], [23236, 23241], [23242, 23250], [23251, 23260], [23260, 23261]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedea8>.answer
_____________________________ test_yesno[param162] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedef0>, (<src.tfidf.TF_IDF object at 0x1103c3850>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes,')
E                +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x116eedef0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38195893168449402, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22070, 22077], [22077, 22079], [22080, 22087], [22088, 22096], [22097, 22105], [22106, 22111], [22112, 22115], [22116, 22124], [22125, 22133], [22134, 22138], [22138, 22139], [22140, 22148], [22149, 22151], [22152, 22155], [22156, 22161], [22162, 22164], [22165, 22173], [22173, 22174], [22175, 22184], [22185, 22188], [22189, 22196], [22197, 22203], [22204, 22212], [22213, 22215], [22216, 22225], [22225, 22226]]}) 
answer: set([u'build'])
candidate Sentence: (0.28225806355476379, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[22468, 22471], [22472, 22477], [22478, 22480], [22481, 22489], [22490, 22492], [22493, 22500], [22501, 22508], [22509, 22511], [22512, 22521], [22522, 22525], [22526, 22533], [22534, 22542], [22543, 22545], [22546, 22553], [22554, 22557], [22558, 22567], [22567, 22568]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18197523057460785, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[8969, 8972], [8973, 8977], [8978, 8986], [8987, 8994], [8994, 8996], [8997, 9006], [9007, 9010], [9011, 9020], [9021, 9028], [9029, 9032], [9033, 9040], [9041, 9048], [9049, 9057], [9058, 9061], [9062, 9065], [9066, 9070], [9071, 9076], [9077, 9085], [9085, 9086]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])
candidate Sentence: (0.16578656435012817, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3444, 3455], [3456, 3458], [3459, 3466], [3467, 3469], [3470, 3474], [3475, 3479], [3480, 3487], [3488, 3499], [3500, 3504], [3505, 3508], [3509, 3516], [3517, 3526], [3526, 3527], [3528, 3534], [3535, 3537], [3538, 3541], [3542, 3547], [3547, 3548], [3549, 3551], [3552, 3560], [3561, 3565], [3566, 3568], [3569, 3574], [3575, 3581], [3582, 3590], [3591, 3597], [3598, 3602], [3603, 3606], [3607, 3612], [3613, 3622], [3623, 3625], [3626, 3630], [3630, 3631]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.15428701043128967, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23202, 23205], [23206, 23210], [23211, 23213], [23214, 23224], [23225, 23227], [23228, 23235], [23236, 23241], [23242, 23250], [23251, 23260], [23260, 23261]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes,
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes,')
 +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x116eedef0>.answer
_____________________________ test_yesno[param165] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116eedfc8>, (<src.tfidf.TF_IDF object at 0x1103c3850>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedfc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46444648504257202, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[339, 342], [343, 355], [356, 360], [360, 361], [362, 373], [373, 374], [375, 377], [378, 381], [382, 388], [389, 396], [397, 399], [400, 403], [404, 409], [409, 410]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.38332664966583252, {u'tokens': [u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [9, 13], [14, 17], [18, 25], [25, 26], [27, 29], [30, 33], [34, 41], [42, 45], [46, 53], [54, 58], [59, 61], [62, 71], [71, 72]]}) 
answer: set([u'12th', u'world'])
candidate Sentence: (0.35533809661865234, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[21588, 21591], [21592, 21602], [21603, 21605], [21606, 21613], [21614, 21621], [21622, 21624], [21625, 21634], [21635, 21637], [21638, 21640], [21641, 21648], [21648, 21649], [21650, 21656], [21657, 21659], [21660, 21663], [21664, 21670], [21671, 21678], [21679, 21684], [21685, 21689], [21690, 21692], [21693, 21696], [21697, 21702], [21702, 21703]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.31975489854812622, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[231, 233], [234, 236], [237, 240], [241, 245], [246, 254], [255, 259], [260, 262], [263, 272], [273, 276], [277, 286], [287, 291], [291, 292], [293, 296], [297, 299], [300, 303], [304, 319], [320, 324], [325, 327], [328, 331], [332, 337], [337, 338]]}) 
answer: set([u'12th', u'largest'])
candidate Sentence: (0.2883484959602356, {u'tokens': [u'One', u'of', u'the', u'most', u'populous', u'cities', u'in', u'the', u'world', u',', u'Jakarta', u'is', u'strained', u'by', u'transportation', u'problems', u'.'], u'lemmas': [u'one', u'of', u'the', u'most', u'populous', u'city', u'in', u'the', u'world', u',', u'Jakarta', u'be', u'strain', u'by', u'transportation', u'problem', u'.'], u'pos': [u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[24585, 24588], [24589, 24591], [24592, 24595], [24596, 24600], [24601, 24609], [24610, 24616], [24617, 24619], [24620, 24623], [24624, 24629], [24629, 24630], [24631, 24638], [24639, 24641], [24642, 24650], [24651, 24653], [24654, 24668], [24669, 24677], [24677, 24678]]}) 
answer: set([u'12th', u'largest'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116eedfc8>.answer
_____________________________ test_yesno[param166] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2050>, (<src.tfidf.TF_IDF object at 0x1103c3850>, set(['jakarta'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef2050>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46444648504257202, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[339, 342], [343, 355], [356, 360], [360, 361], [362, 373], [373, 374], [375, 377], [378, 381], [382, 388], [389, 396], [397, 399], [400, 403], [404, 409], [409, 410]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.38332664966583252, {u'tokens': [u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [9, 13], [14, 17], [18, 25], [25, 26], [27, 29], [30, 33], [34, 41], [42, 45], [46, 53], [54, 58], [59, 61], [62, 71], [71, 72]]}) 
answer: set([u'12th', u'world'])
candidate Sentence: (0.35533809661865234, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[21588, 21591], [21592, 21602], [21603, 21605], [21606, 21613], [21614, 21621], [21622, 21624], [21625, 21634], [21635, 21637], [21638, 21640], [21641, 21648], [21648, 21649], [21650, 21656], [21657, 21659], [21660, 21663], [21664, 21670], [21671, 21678], [21679, 21684], [21685, 21689], [21690, 21692], [21693, 21696], [21697, 21702], [21702, 21703]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.31975489854812622, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[231, 233], [234, 236], [237, 240], [241, 245], [246, 254], [255, 259], [260, 262], [263, 272], [273, 276], [277, 286], [287, 291], [291, 292], [293, 296], [297, 299], [300, 303], [304, 319], [320, 324], [325, 327], [328, 331], [332, 337], [337, 338]]}) 
answer: set([u'12th', u'largest'])
candidate Sentence: (0.2883484959602356, {u'tokens': [u'One', u'of', u'the', u'most', u'populous', u'cities', u'in', u'the', u'world', u',', u'Jakarta', u'is', u'strained', u'by', u'transportation', u'problems', u'.'], u'lemmas': [u'one', u'of', u'the', u'most', u'populous', u'city', u'in', u'the', u'world', u',', u'Jakarta', u'be', u'strain', u'by', u'transportation', u'problem', u'.'], u'pos': [u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'NN', u'NNS', u'.'], u'char_offsets': [[24585, 24588], [24589, 24591], [24592, 24595], [24596, 24600], [24601, 24609], [24610, 24616], [24617, 24619], [24620, 24623], [24624, 24629], [24629, 24630], [24631, 24638], [24639, 24641], [24642, 24650], [24651, 24653], [24654, 24668], [24669, 24677], [24677, 24678]]}) 
answer: set([u'12th', u'largest'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef2050>.answer
_____________________________ test_yesno[param174] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2290>, (<src.tfidf.TF_IDF object at 0x112e8b3d0>, set(['james', 'james_watt', 'watt'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
E                +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x116ef2290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24258217215538025, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7672, 7674], [7675, 7678], [7679, 7680], [7681, 7689], [7690, 7693], [7694, 7705], [7706, 7708], [7709, 7718], [7719, 7721], [7722, 7729], [7729, 7730]]}) 
answer: set([u'engine'])
candidate Sentence: (0.16149678826332092, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8203, 8210], [8211, 8216], [8217, 8221], [8222, 8226], [8227, 8238], [8238, 8239], [8240, 8243], [8244, 8257], [8258, 8270], [8271, 8278], [8279, 8287], [8287, 8288]]}) 
answer: set([u'engine'])
candidate Sentence: (0.15517088770866394, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5743, 5747], [5747, 5748], [5749, 5753], [5754, 5757], [5758, 5765], [5766, 5773], [5774, 5781], [5781, 5782], [5783, 5790], [5791, 5798], [5799, 5804], [5805, 5814], [5815, 5819], [5820, 5822], [5823, 5831], [5832, 5842], [5843, 5846], [5847, 5852], [5853, 5855], [5856, 5863], [5864, 5871], [5872, 5877], [5878, 5881], [5882, 5885], [5886, 5890], [5891, 5895], [5896, 5898], [5899, 5902], [5903, 5910], [5910, 5911]]}) 
answer: set([u'improve'])
candidate Sentence: (0.13948547840118408, {u'tokens': [u'The', u'huge', u'painting', u'James', u'Watt', u'contemplating', u'the', u'steam', u'engine', u'by', u'James', u'Eckford', u'Lauder', u'is', u'now', u'owned', u'by', u'the', u'National', u'Gallery', u'of', u'Scotland', u'.'], u'lemmas': [u'the', u'huge', u'painting', u'James', u'Watt', u'contemplate', u'the', u'steam', u'engine', u'by', u'James', u'Eckford', u'Lauder', u'be', u'now', u'own', u'by', u'the', u'National', u'Gallery', u'of', u'Scotland', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NNP', u'NNP', u'VBG', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[11519, 11522], [11523, 11527], [11528, 11536], [11537, 11542], [11543, 11547], [11548, 11561], [11562, 11565], [11566, 11571], [11572, 11578], [11579, 11581], [11582, 11587], [11588, 11595], [11596, 11602], [11603, 11605], [11606, 11609], [11610, 11615], [11616, 11618], [11619, 11622], [11623, 11631], [11632, 11639], [11640, 11642], [11643, 11651], [11651, 11652]]}) 
answer: set([u'improve'])
candidate Sentence: (0.1379074901342392, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8661, 8663], [8664, 8667], [8668, 8677], [8677, 8678], [8679, 8683], [8684, 8686], [8687, 8690], [8691, 8700], [8701, 8708], [8709, 8712], [8713, 8720], [8721, 8733], [8734, 8735], [8736, 8739], [8740, 8743], [8744, 8748], [8749, 8754], [8754, 8755]]}) 
answer: set([u'engine', u'improve'])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
 +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x116ef2290>.answer
_____________________________ test_yesno[param175] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef22d8>, (<src.tfidf.TF_IDF object at 0x112e8b3d0>, set(['james', 'james_watt', 'watt'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef22d8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.24258217215538025, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7672, 7674], [7675, 7678], [7679, 7680], [7681, 7689], [7690, 7693], [7694, 7705], [7706, 7708], [7709, 7718], [7719, 7721], [7722, 7729], [7729, 7730]]}) 
answer: set([u'engine'])
candidate Sentence: (0.16149678826332092, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8203, 8210], [8211, 8216], [8217, 8221], [8222, 8226], [8227, 8238], [8238, 8239], [8240, 8243], [8244, 8257], [8258, 8270], [8271, 8278], [8279, 8287], [8287, 8288]]}) 
answer: set([u'engine'])
candidate Sentence: (0.15517088770866394, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5743, 5747], [5747, 5748], [5749, 5753], [5754, 5757], [5758, 5765], [5766, 5773], [5774, 5781], [5781, 5782], [5783, 5790], [5791, 5798], [5799, 5804], [5805, 5814], [5815, 5819], [5820, 5822], [5823, 5831], [5832, 5842], [5843, 5846], [5847, 5852], [5853, 5855], [5856, 5863], [5864, 5871], [5872, 5877], [5878, 5881], [5882, 5885], [5886, 5890], [5891, 5895], [5896, 5898], [5899, 5902], [5903, 5910], [5910, 5911]]}) 
answer: set([u'improve'])
candidate Sentence: (0.13948547840118408, {u'tokens': [u'The', u'huge', u'painting', u'James', u'Watt', u'contemplating', u'the', u'steam', u'engine', u'by', u'James', u'Eckford', u'Lauder', u'is', u'now', u'owned', u'by', u'the', u'National', u'Gallery', u'of', u'Scotland', u'.'], u'lemmas': [u'the', u'huge', u'painting', u'James', u'Watt', u'contemplate', u'the', u'steam', u'engine', u'by', u'James', u'Eckford', u'Lauder', u'be', u'now', u'own', u'by', u'the', u'National', u'Gallery', u'of', u'Scotland', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NNP', u'NNP', u'VBG', u'DT', u'NN', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[11519, 11522], [11523, 11527], [11528, 11536], [11537, 11542], [11543, 11547], [11548, 11561], [11562, 11565], [11566, 11571], [11572, 11578], [11579, 11581], [11582, 11587], [11588, 11595], [11596, 11602], [11603, 11605], [11606, 11609], [11610, 11615], [11616, 11618], [11619, 11622], [11623, 11631], [11632, 11639], [11640, 11642], [11643, 11651], [11651, 11652]]}) 
answer: set([u'improve'])
candidate Sentence: (0.1379074901342392, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8661, 8663], [8664, 8667], [8668, 8677], [8677, 8678], [8679, 8683], [8684, 8686], [8687, 8690], [8691, 8700], [8701, 8708], [8709, 8712], [8713, 8720], [8721, 8733], [8734, 8735], [8736, 8739], [8740, 8743], [8744, 8748], [8749, 8754], [8754, 8755]]}) 
answer: set([u'engine', u'improve'])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef22d8>.answer
_____________________________ test_yesno[param186] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef25f0>, (<src.tfidf.TF_IDF object at 0x11129b790>, set(['kuala', 'kuala_lumpur', 'lumpur'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef25f0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.36338672041893005, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[583, 588], [589, 595], [596, 598], [599, 602], [603, 607], [608, 610], [611, 614], [615, 625], [626, 628], [629, 637], [637, 638]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.25169450044631958, {u'tokens': [u'As', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'has', u'a', u'comprehensive', u'road', u'network', u'that', u'leads', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'lemmas': [u'as', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'have', u'a', u'comprehensive', u'road', u'network', u'that', u'lead', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'pos': [u'IN', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'WDT', u'VBZ', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[35194, 35196], [35197, 35204], [35205, 35207], [35208, 35216], [35216, 35217], [35218, 35223], [35224, 35230], [35231, 35234], [35235, 35236], [35237, 35250], [35251, 35255], [35256, 35263], [35264, 35268], [35269, 35274], [35275, 35277], [35278, 35281], [35282, 35286], [35287, 35289], [35290, 35300], [35301, 35309], [35309, 35310]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.239604651927948, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'a', u'hub', u'for', u'cultural', u'activities', u'and', u'events', u'in', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'a', u'hub', u'for', u'cultural', u'activity', u'and', u'event', u'in', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[26603, 26608], [26609, 26615], [26616, 26618], [26619, 26620], [26621, 26624], [26625, 26628], [26629, 26637], [26638, 26648], [26649, 26652], [26653, 26659], [26660, 26662], [26663, 26671], [26671, 26672]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.21624670922756195, {u'tokens': [u'-LRB-', u'14', u'December', u'2008', u'-RRB-', u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'-lrb-', u'14', u'December', u'2008', u'-rrb-', u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'-LRB-', u'CD', u'NNP', u'CD', u'-RRB-', u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12666, 12667], [12667, 12669], [12670, 12678], [12679, 12683], [12683, 12684], [12685, 12690], [12691, 12697], [12698, 12700], [12701, 12705], [12706, 12708], [12709, 12712], [12713, 12723], [12724, 12726], [12727, 12735], [12735, 12736]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.20863176882266998, {u'tokens': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'is', u'based', u'in', u'the', u'city', u'and', u'forms', u'one', u'of', u'its', u'core', u'economic', u'activities', u'.'], u'lemmas': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'be', u'base', u'in', u'the', u'city', u'and', u'form', u'one', u'of', u'its', u'core', u'economic', u'activity', u'.'], u'pos': [u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'CD', u'IN', u'PRP$', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[14412, 14417], [14418, 14426], [14427, 14429], [14430, 14433], [14434, 14442], [14443, 14451], [14452, 14454], [14455, 14460], [14461, 14463], [14464, 14467], [14468, 14472], [14473, 14476], [14477, 14482], [14483, 14486], [14487, 14489], [14490, 14493], [14494, 14498], [14499, 14507], [14508, 14518], [14518, 14519]]}) 
answer: set([u'capitol'])

Is Kuala Lumpur the capitol of Malaysia? disfluent
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef25f0>.answer
_____________________________ test_yesno[param191] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2758>, (<src.tfidf.TF_IDF object at 0x11129b790>, set(['kuala', 'kuala_lumpur', 'lumpur'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef2758>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.27995327115058899, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[38908, 38913], [38914, 38920], [38921, 38923], [38924, 38928], [38929, 38931], [38932, 38935], [38936, 38946], [38947, 38949], [38950, 38956], [38956, 38957]]}) 
answer: set([u'parliament', u'malaysium'])
candidate Sentence: (0.22286516427993774, {u'tokens': [u'The', u'parliament', u'is', u'composed', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-LRB-', u'Dewan', u'Rakyat', u'-RRB-', u'and', u'an', u'upper', u'House', u'of', u'Senate', u'-LRB-', u'Dewan', u'Negara', u'-RRB-', u'.'], u'lemmas': [u'the', u'parliament', u'be', u'compose', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-lrb-', u'Dewan', u'Rakyat', u'-rrb-', u'and', u'a', u'upper', u'House', u'of', u'Senate', u'-lrb-', u'Dewan', u'Negara', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJR', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'CC', u'DT', u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[12737, 12740], [12741, 12751], [12752, 12754], [12755, 12763], [12764, 12766], [12767, 12768], [12769, 12774], [12775, 12780], [12781, 12783], [12784, 12799], [12800, 12801], [12801, 12806], [12807, 12813], [12813, 12814], [12815, 12818], [12819, 12821], [12822, 12827], [12828, 12833], [12834, 12836], [12837, 12843], [12844, 12845], [12845, 12850], [12851, 12857], [12857, 12858], [12858, 12859]]}) 
answer: set([u'home', u'malaysium'])
candidate Sentence: (0.19047150015830994, {u'tokens': [u'-LRB-', u'14', u'December', u'2008', u'-RRB-', u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'-lrb-', u'14', u'December', u'2008', u'-rrb-', u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'-LRB-', u'CD', u'NNP', u'CD', u'-RRB-', u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12666, 12667], [12667, 12669], [12670, 12678], [12679, 12683], [12683, 12684], [12685, 12690], [12691, 12697], [12698, 12700], [12701, 12705], [12706, 12708], [12709, 12712], [12713, 12723], [12724, 12726], [12727, 12735], [12735, 12736]]}) 
answer: set([u'malaysium'])
candidate Sentence: (0.140273317694664, {u'tokens': [u'In', u'addition', u',', u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'tallest', u'twin', u'buildings', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'lemmas': [u'in', u'addition', u',', u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'tallest', u'twin', u'building', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'JJS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[1709, 1711], [1712, 1720], [1720, 1721], [1722, 1727], [1728, 1734], [1735, 1737], [1738, 1742], [1743, 1745], [1746, 1749], [1750, 1757], [1758, 1762], [1763, 1772], [1773, 1775], [1776, 1779], [1780, 1785], [1785, 1786], [1787, 1790], [1791, 1799], [1800, 1804], [1805, 1811], [1811, 1812]]}) 
answer: set([u'parliament', u'malaysium'])
candidate Sentence: (0.12259459495544434, {u'tokens': [u'The', u'city', u'was', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branches', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'moved', u'to', u'Putrajaya', u'starting', u'in', u'1999', u'.'], u'lemmas': [u'the', u'city', u'be', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branch', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'move', u'to', u'Putrajaya', u'start', u'in', u'1999', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'NN', u'TO', u'DT', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'PRP', u'VBP', u'IN', u'VBN', u'TO', u'NNP', u'VBG', u'IN', u'CD', u'.'], u'char_offsets': [[639, 642], [643, 647], [648, 651], [652, 656], [657, 661], [662, 664], [665, 668], [669, 678], [679, 682], [683, 691], [692, 700], [701, 703], [704, 707], [708, 715], [716, 726], [726, 727], [728, 731], [732, 736], [737, 741], [742, 747], [748, 753], [754, 756], [757, 766], [767, 775], [776, 778], [779, 783], [783, 784]]}) 
answer: set([u'parliament', u'malaysium'])

is it home to the parliament of malaysia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef2758>.answer
_____________________________ test_yesno[param194] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2830>, (<src.tfidf.TF_IDF object at 0x112e8b250>, set(['lobster'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116ef2830>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39304929971694946, {u'tokens': [u'As', u'with', u'all', u'shellfish', u',', u'lobster', u'is', u'not', u'kosher', u'.'], u'lemmas': [u'as', u'with', u'all', u'shellfish', u',', u'lobster', u'be', u'not', u'kosher', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NN', u',', u'NN', u'VBZ', u'RB', u'NN', u'.'], u'char_offsets': [[5374, 5376], [5377, 5381], [5382, 5385], [5386, 5395], [5395, 5396], [5397, 5404], [5405, 5407], [5408, 5411], [5412, 5418], [5418, 5419]]}) 
answer: set([])
candidate Sentence: (0.093065358698368073, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wo', u"n't", u'you', u',', u'will', u'you', u',', u'wo', u"n't", u'you', u',', u'wo', u"n't", u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'will', u'not', u'you', u',', u'will', u'you', u',', u'will', u'not', u'you', u',', u'will', u'not', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'MD', u'RB', u'PRP', u',', u'MD', u'PRP', u',', u'MD', u'RB', u'PRP', u',', u'MD', u'RB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12280, 12282], [12283, 12286], [12287, 12290], [12291, 12298], [12299, 12306], [12307, 12312], [12313, 12316], [12317, 12319], [12320, 12324], [12326, 12330], [12330, 12331], [12332, 12333], [12333, 12337], [12338, 12341], [12341, 12342], [12343, 12345], [12345, 12348], [12349, 12352], [12352, 12353], [12354, 12358], [12359, 12362], [12362, 12363], [12364, 12366], [12366, 12369], [12370, 12373], [12373, 12374], [12375, 12377], [12377, 12380], [12381, 12384], [12385, 12389], [12390, 12393], [12394, 12399], [12399, 12400], [12400, 12401]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.013078490272164345, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[233, 239], [240, 247], [248, 254], [255, 257], [258, 269], [270, 273], [274, 279], [280, 282], [283, 284], [284, 292], [292, 293], [293, 294], [295, 298], [299, 305], [306, 314], [315, 318], [319, 323], [324, 329], [330, 340], [341, 345], [346, 349], [350, 354], [354, 355]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.013057945296168327, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1967, 1975], [1976, 1983], [1984, 1988], [1989, 1992], [1993, 1997], [1998, 2003], [2004, 2006], [2007, 2014], [2015, 2023], [2023, 2024], [2025, 2029], [2030, 2032], [2033, 2040], [2041, 2049], [2050, 2053], [2054, 2059], [2060, 2064], [2065, 2069], [2070, 2075], [2076, 2083], [2083, 2084]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012671229429543018, {u'tokens': [u'Lobster', u'is', u'fished', u'in', u'water', u'between', u',', u'although', u'some', u'lobsters', u'live', u'at', u'.'], u'lemmas': [u'lobster', u'be', u'fish', u'in', u'water', u'between', u',', u'although', u'some', u'lobster', u'live', u'at', u'.'], u'pos': [u'NN', u'VBZ', u'VBN', u'IN', u'NN', u'IN', u',', u'IN', u'DT', u'NNS', u'VBP', u'IN', u'.'], u'char_offsets': [[11725, 11732], [11733, 11735], [11736, 11742], [11743, 11745], [11746, 11751], [11752, 11759], [11761, 11762], [11763, 11771], [11772, 11776], [11777, 11785], [11786, 11790], [11791, 11793], [11795, 11796]]}) 
answer: set([u'kosher'])

Are lobsters kosher?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116ef2830>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param195] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2878>, (<src.tfidf.TF_IDF object at 0x112e8b250>, set(['lobster'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116ef2878>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39304929971694946, {u'tokens': [u'As', u'with', u'all', u'shellfish', u',', u'lobster', u'is', u'not', u'kosher', u'.'], u'lemmas': [u'as', u'with', u'all', u'shellfish', u',', u'lobster', u'be', u'not', u'kosher', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NN', u',', u'NN', u'VBZ', u'RB', u'NN', u'.'], u'char_offsets': [[5374, 5376], [5377, 5381], [5382, 5385], [5386, 5395], [5395, 5396], [5397, 5404], [5405, 5407], [5408, 5411], [5412, 5418], [5418, 5419]]}) 
answer: set([])
candidate Sentence: (0.093065358698368073, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wo', u"n't", u'you', u',', u'will', u'you', u',', u'wo', u"n't", u'you', u',', u'wo', u"n't", u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'will', u'not', u'you', u',', u'will', u'you', u',', u'will', u'not', u'you', u',', u'will', u'not', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'MD', u'RB', u'PRP', u',', u'MD', u'PRP', u',', u'MD', u'RB', u'PRP', u',', u'MD', u'RB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12280, 12282], [12283, 12286], [12287, 12290], [12291, 12298], [12299, 12306], [12307, 12312], [12313, 12316], [12317, 12319], [12320, 12324], [12326, 12330], [12330, 12331], [12332, 12333], [12333, 12337], [12338, 12341], [12341, 12342], [12343, 12345], [12345, 12348], [12349, 12352], [12352, 12353], [12354, 12358], [12359, 12362], [12362, 12363], [12364, 12366], [12366, 12369], [12370, 12373], [12373, 12374], [12375, 12377], [12377, 12380], [12381, 12384], [12385, 12389], [12390, 12393], [12394, 12399], [12399, 12400], [12400, 12401]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.013078490272164345, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[233, 239], [240, 247], [248, 254], [255, 257], [258, 269], [270, 273], [274, 279], [280, 282], [283, 284], [284, 292], [292, 293], [293, 294], [295, 298], [299, 305], [306, 314], [315, 318], [319, 323], [324, 329], [330, 340], [341, 345], [346, 349], [350, 354], [354, 355]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.013057945296168327, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1967, 1975], [1976, 1983], [1984, 1988], [1989, 1992], [1993, 1997], [1998, 2003], [2004, 2006], [2007, 2014], [2015, 2023], [2023, 2024], [2025, 2029], [2030, 2032], [2033, 2040], [2041, 2049], [2050, 2053], [2054, 2059], [2060, 2064], [2065, 2069], [2070, 2075], [2076, 2083], [2083, 2084]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012671229429543018, {u'tokens': [u'Lobster', u'is', u'fished', u'in', u'water', u'between', u',', u'although', u'some', u'lobsters', u'live', u'at', u'.'], u'lemmas': [u'lobster', u'be', u'fish', u'in', u'water', u'between', u',', u'although', u'some', u'lobster', u'live', u'at', u'.'], u'pos': [u'NN', u'VBZ', u'VBN', u'IN', u'NN', u'IN', u',', u'IN', u'DT', u'NNS', u'VBP', u'IN', u'.'], u'char_offsets': [[11725, 11732], [11733, 11735], [11736, 11742], [11743, 11745], [11746, 11751], [11752, 11759], [11761, 11762], [11763, 11771], [11772, 11776], [11777, 11785], [11786, 11790], [11791, 11793], [11795, 11796]]}) 
answer: set([u'kosher'])

Are lobsters kosher?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116ef2878>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param202] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2a70>, (<src.tfidf.TF_IDF object at 0x115c7b650>, set(['language', 'malay', 'malay_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef2a70>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.52346903085708618, {u'tokens': [u'One', u'of', u'these', u'is', u'that', u'it', u'came', u'from', u'Sumatra', u'island', u'.'], u'lemmas': [u'one', u'of', u'these', u'be', u'that', u'it', u'come', u'from', u'Sumatra', u'island', u'.'], u'pos': [u'CD', u'IN', u'DT', u'VBZ', u'IN', u'PRP', u'VBD', u'IN', u'NNP', u'NN', u'.'], u'char_offsets': [[1906, 1909], [1910, 1912], [1913, 1918], [1919, 1921], [1922, 1926], [1927, 1929], [1930, 1934], [1935, 1939], [1940, 1947], [1948, 1954], [1954, 1955]]}) 
answer: set([u'originate'])
candidate Sentence: (0.23974521458148956, {u'tokens': [u'-LSB-', u'1', u'-RSB-', u'There', u'are', u'many', u'hypotheses', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originated', u'.'], u'lemmas': [u'-lsb-', u'1', u'-rsb-', u'there', u'be', u'many', u'hypothesis', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originate', u'.'], u'pos': [u'-LRB-', u'CD', u'-RRB-', u'EX', u'VBP', u'JJ', u'NNS', u'IN', u'TO', u'WRB', u'DT', u'NNP', u'NN', u'VBD', u'.'], u'char_offsets': [[1833, 1834], [1834, 1835], [1835, 1836], [1837, 1842], [1843, 1846], [1847, 1851], [1852, 1862], [1863, 1865], [1866, 1868], [1869, 1874], [1875, 1878], [1879, 1884], [1885, 1893], [1894, 1904], [1904, 1905]]}) 
answer: set([u'island', u'sumatra'])
candidate Sentence: (0.1675863116979599, {u'tokens': [u'The', u'oldest', u'written', u'documents', u'in', u'Malay', u',', u'dated', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'AD', u',', u'were', u'found', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'lemmas': [u'the', u'oldest', u'write', u'document', u'in', u'Malay', u',', u'date', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'ad', u',', u'be', u'find', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NNS', u'IN', u'NNP', u',', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'IN', u'NNP', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[1956, 1959], [1960, 1966], [1967, 1974], [1975, 1984], [1985, 1987], [1988, 1993], [1993, 1994], [1995, 2000], [2001, 2005], [2006, 2009], [2010, 2013], [2014, 2016], [2017, 2020], [2021, 2024], [2025, 2032], [2033, 2035], [2035, 2036], [2037, 2041], [2042, 2047], [2048, 2050], [2051, 2057], [2058, 2064], [2064, 2065], [2066, 2069], [2070, 2073], [2074, 2086], [2087, 2092], [2093, 2095], [2096, 2103], [2104, 2107], [2108, 2110], [2111, 2120], [2121, 2123], [2124, 2132], [2133, 2140], [2140, 2141]]}) 
answer: set([u'originate'])
candidate Sentence: (0.11320345103740692, {u'tokens': [u'In', u'Malay', u',', u'there', u'are', u':', u'In', u'addition', u'to', u'these', u'affixes', u',', u'Malay', u'also', u'has', u'a', u'lot', u'of', u'borrowed', u'affixes', u'from', u'other', u'languages', u'such', u'as', u'Sanskrit', u',', u'Arabic', u'and', u'English', u'.'], u'lemmas': [u'in', u'Malay', u',', u'there', u'be', u':', u'in', u'addition', u'to', u'these', u'affix', u',', u'Malay', u'also', u'have', u'a', u'lot', u'of', u'borrow', u'affix', u'from', u'other', u'language', u'such', u'as', u'Sanskrit', u',', u'Arabic', u'and', u'English', u'.'], u'pos': [u'IN', u'NNP', u',', u'EX', u'VBP', u':', u'IN', u'NN', u'TO', u'DT', u'NNS', u',', u'NNP', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'VBN', u'NNS', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u',', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[10831, 10833], [10834, 10839], [10839, 10840], [10841, 10846], [10847, 10850], [10850, 10851], [10852, 10854], [10855, 10863], [10864, 10866], [10867, 10872], [10873, 10880], [10880, 10881], [10882, 10887], [10888, 10892], [10893, 10896], [10897, 10898], [10899, 10902], [10903, 10905], [10906, 10914], [10915, 10922], [10923, 10927], [10928, 10933], [10934, 10943], [10944, 10948], [10949, 10951], [10952, 10960], [10960, 10961], [10962, 10968], [10969, 10972], [10973, 10980], [10980, 10981]]}) 
answer: set([u'island', u'sumatra', u'originate'])
candidate Sentence: (0.11007243394851685, {u'tokens': [u'In', u'several', u'parts', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'is', u'spoken', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'lemmas': [u'in', u'several', u'part', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'be', u'speak', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'NNP', u'CC', u'NNP', u'NNPS', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[3110, 3112], [3113, 3120], [3121, 3126], [3127, 3129], [3130, 3139], [3139, 3140], [3141, 3143], [3144, 3151], [3152, 3155], [3156, 3162], [3163, 3170], [3170, 3171], [3172, 3177], [3178, 3180], [3181, 3187], [3188, 3190], [3191, 3196], [3197, 3204], [3205, 3207], [3208, 3214], [3215, 3221], [3221, 3222]]}) 
answer: set([u'island', u'originate'])

Could Malay have originated from Sumatra island?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef2a70>.answer
_____________________________ test_yesno[param218] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2ef0>, (<src.tfidf.TF_IDF object at 0x1103c39d0>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Faraday also discovered the laws of  electrolysis.')
E                +    where 'Yes, Faraday also discovered the laws of  electrolysis.' = <src.question_processing.Question_parser instance at 0x116ef2ef0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45894759893417358, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[386, 388], [389, 399], [400, 415], [416, 425], [425, 426], [427, 439], [439, 440], [441, 444], [445, 449], [450, 452], [453, 465], [465, 466]]}) 
answer: set([u'also'])
candidate Sentence: (0.29236948490142822, {u'tokens': [u'Faraday', u'also', u'discovered', u'the', u'laws', u'of', u'electrolysis', u'and', u'popularised', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'terms', u'largely', u'created', u'by', u'William', u'Whewell', u'.'], u'lemmas': [u'Faraday', u'also', u'discover', u'the', u'law', u'of', u'electrolysis', u'and', u'popularise', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'term', u'largely', u'create', u'by', u'William', u'Whewell', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'NNS', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[9582, 9589], [9590, 9594], [9595, 9605], [9606, 9609], [9610, 9614], [9615, 9617], [9618, 9630], [9631, 9634], [9635, 9646], [9647, 9658], [9659, 9663], [9664, 9666], [9667, 9672], [9672, 9673], [9674, 9681], [9681, 9682], [9683, 9692], [9692, 9693], [9694, 9697], [9698, 9701], [9701, 9702], [9703, 9708], [9709, 9716], [9717, 9724], [9725, 9727], [9728, 9735], [9736, 9743], [9743, 9744]]}) 
answer: set([])
candidate Sentence: (0.26700419187545776, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24478, 24479], [24480, 24489], [24490, 24493], [24494, 24503], [24503, 24504], [24505, 24506], [24506, 24518], [24518, 24519]]}) 
answer: set([u'also', u'law', u'electrolysis', u'discover'])
candidate Sentence: (0.12058286368846893, {u'tokens': [u'Faraday', u'also', u'determined', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'had', u'been', u'discovered', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'lemmas': [u'Faraday', u'also', u'determine', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'have', u'be', u'discover', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'JJ', u'NN', u',', u'WDT', u'VBD', u'VBN', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[9456, 9463], [9464, 9468], [9469, 9479], [9480, 9483], [9484, 9495], [9496, 9498], [9499, 9502], [9503, 9511], [9512, 9521], [9522, 9529], [9529, 9530], [9531, 9536], [9537, 9540], [9541, 9545], [9546, 9556], [9557, 9559], [9560, 9567], [9568, 9572], [9573, 9575], [9576, 9580], [9580, 9581]]}) 
answer: set([u'law', u'electrolysis'])
candidate Sentence: (0.11835583299398422, {u'tokens': [u'Faraday', u'used', u'``', u'static', u"''", u',', u'batteries', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomena', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'lemmas': [u'Faraday', u'use', u'``', u'static', u"''", u',', u'battery', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomenon', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'pos': [u'NNP', u'VBD', u'``', u'JJ', u"''", u',', u'NNS', u',', u'CC', u'``', u'JJ', u'NN', u"''", u'TO', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u',', u'NN', u',', u'FW', u'.'], u'char_offsets': [[14588, 14595], [14596, 14600], [14601, 14602], [14602, 14608], [14608, 14609], [14609, 14610], [14612, 14621], [14621, 14622], [14623, 14626], [14627, 14628], [14628, 14634], [14635, 14646], [14646, 14647], [14648, 14650], [14651, 14658], [14659, 14662], [14663, 14672], [14673, 14675], [14676, 14689], [14690, 14700], [14700, 14701], [14702, 14714], [14714, 14715], [14716, 14725], [14725, 14726], [14727, 14730], [14730, 14731]]}) 
answer: set([u'also', u'law', u'discover'])

Did Faraday also discover the laws of electrolysis?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Faraday also discovered the laws of  electrolysis.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Faraday also discovered the laws of  electrolysis.')
 +    where 'Yes, Faraday also discovered the laws of  electrolysis.' = <src.question_processing.Question_parser instance at 0x116ef2ef0>.answer
_____________________________ test_yesno[param219] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2f38>, (<src.tfidf.TF_IDF object at 0x1103c39d0>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef2f38>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45894759893417358, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[386, 388], [389, 399], [400, 415], [416, 425], [425, 426], [427, 439], [439, 440], [441, 444], [445, 449], [450, 452], [453, 465], [465, 466]]}) 
answer: set([u'also'])
candidate Sentence: (0.29236948490142822, {u'tokens': [u'Faraday', u'also', u'discovered', u'the', u'laws', u'of', u'electrolysis', u'and', u'popularised', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'terms', u'largely', u'created', u'by', u'William', u'Whewell', u'.'], u'lemmas': [u'Faraday', u'also', u'discover', u'the', u'law', u'of', u'electrolysis', u'and', u'popularise', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'term', u'largely', u'create', u'by', u'William', u'Whewell', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'NNS', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[9582, 9589], [9590, 9594], [9595, 9605], [9606, 9609], [9610, 9614], [9615, 9617], [9618, 9630], [9631, 9634], [9635, 9646], [9647, 9658], [9659, 9663], [9664, 9666], [9667, 9672], [9672, 9673], [9674, 9681], [9681, 9682], [9683, 9692], [9692, 9693], [9694, 9697], [9698, 9701], [9701, 9702], [9703, 9708], [9709, 9716], [9717, 9724], [9725, 9727], [9728, 9735], [9736, 9743], [9743, 9744]]}) 
answer: set([])
candidate Sentence: (0.26700419187545776, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24478, 24479], [24480, 24489], [24490, 24493], [24494, 24503], [24503, 24504], [24505, 24506], [24506, 24518], [24518, 24519]]}) 
answer: set([u'also', u'law', u'electrolysis', u'discover'])
candidate Sentence: (0.12058286368846893, {u'tokens': [u'Faraday', u'also', u'determined', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'had', u'been', u'discovered', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'lemmas': [u'Faraday', u'also', u'determine', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'have', u'be', u'discover', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'JJ', u'NN', u',', u'WDT', u'VBD', u'VBN', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[9456, 9463], [9464, 9468], [9469, 9479], [9480, 9483], [9484, 9495], [9496, 9498], [9499, 9502], [9503, 9511], [9512, 9521], [9522, 9529], [9529, 9530], [9531, 9536], [9537, 9540], [9541, 9545], [9546, 9556], [9557, 9559], [9560, 9567], [9568, 9572], [9573, 9575], [9576, 9580], [9580, 9581]]}) 
answer: set([u'law', u'electrolysis'])
candidate Sentence: (0.11835583299398422, {u'tokens': [u'Faraday', u'used', u'``', u'static', u"''", u',', u'batteries', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomena', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'lemmas': [u'Faraday', u'use', u'``', u'static', u"''", u',', u'battery', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomenon', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'pos': [u'NNP', u'VBD', u'``', u'JJ', u"''", u',', u'NNS', u',', u'CC', u'``', u'JJ', u'NN', u"''", u'TO', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u',', u'NN', u',', u'FW', u'.'], u'char_offsets': [[14588, 14595], [14596, 14600], [14601, 14602], [14602, 14608], [14608, 14609], [14609, 14610], [14612, 14621], [14621, 14622], [14623, 14626], [14627, 14628], [14628, 14634], [14635, 14646], [14646, 14647], [14648, 14650], [14651, 14658], [14659, 14662], [14663, 14672], [14673, 14675], [14676, 14689], [14690, 14700], [14700, 14701], [14702, 14714], [14714, 14715], [14716, 14725], [14725, 14726], [14727, 14730], [14730, 14731]]}) 
answer: set([u'also', u'law', u'discover'])

Did Faraday also discover the laws of electrolysis?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef2f38>.answer
_____________________________ test_yesno[param221] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef2fc8>, (<src.tfidf.TF_IDF object at 0x1103c39d0>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef2fc8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.63385277986526489, {u'tokens': [u'Faraday', u'also', u'was', u'active', u'in', u'what', u'would', u'now', u'be', u'called', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'lemmas': [u'Faraday', u'also', u'be', u'active', u'in', u'what', u'would', u'now', u'be', u'call', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'JJ', u'IN', u'WP', u'MD', u'RB', u'VB', u'VBN', u'JJ', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[19186, 19193], [19194, 19198], [19199, 19202], [19203, 19209], [19210, 19212], [19213, 19217], [19218, 19223], [19224, 19227], [19228, 19230], [19231, 19237], [19238, 19251], [19252, 19259], [19259, 19260], [19261, 19263], [19264, 19275], [19275, 19276]]}) 
answer: set([u'area'])
candidate Sentence: (0.20709818601608276, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24478, 24479], [24480, 24489], [24490, 24493], [24494, 24503], [24503, 24504], [24505, 24506], [24506, 24518], [24518, 24519]]}) 
answer: set([u'area', u'science', u'environmental', u'call', u'active', u'now'])
candidate Sentence: (0.19514688849449158, {u'tokens': [u'Education', u'was', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'lemmas': [u'education', u'be', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'pos': [u'NN', u'VBD', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[19819, 19828], [19829, 19832], [19833, 19840], [19841, 19845], [19846, 19848], [19849, 19856], [19857, 19860], [19861, 19868], [19868, 19869]]}) 
answer: set([u'active', u'science', u'now', u'call', u'environmental'])
candidate Sentence: (0.16667437553405762, {u'tokens': [u'This', u'is', u'now', u'termed', u'the', u'Faraday', u'effect', u'.'], u'lemmas': [u'this', u'be', u'now', u'term', u'the', u'Faraday', u'effect', u'.'], u'pos': [u'DT', u'VBZ', u'RB', u'VBN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[16239, 16243], [16244, 16246], [16247, 16250], [16251, 16257], [16258, 16261], [16262, 16269], [16270, 16276], [16276, 16277]]}) 
answer: set([u'active', u'science', u'call', u'environmental', u'area'])
candidate Sentence: (0.1416795551776886, {u'tokens': [u'Some', u'historians', u'of', u'science', u'refer', u'to', u'him', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'lemmas': [u'some', u'historian', u'of', u'science', u'refer', u'to', u'he', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'NN', u'VBP', u'TO', u'PRP', u'IN', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[1382, 1386], [1387, 1397], [1401, 1403], [1404, 1411], [1412, 1417], [1418, 1420], [1421, 1424], [1425, 1427], [1428, 1431], [1432, 1436], [1437, 1452], [1453, 1455], [1456, 1459], [1460, 1467], [1468, 1470], [1471, 1478], [1478, 1479]]}) 
answer: set([u'active', u'environmental', u'now', u'call', u'area'])

was he active in the area now called environmental science?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef2fc8>.answer
_____________________________ test_yesno[param222] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7050>, (<src.tfidf.TF_IDF object at 0x1103c39d0>, set(['faraday', 'michael', 'michael_faraday'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7050>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.29547721147537231, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[24478, 24479], [24480, 24489], [24490, 24493], [24494, 24503], [24503, 24504], [24505, 24506], [24506, 24518], [24518, 24519]]}) 
answer: set([u'benzene', u'discover'])
candidate Sentence: (0.15973037481307983, {u'tokens': [u'As', u'a', u'chemist', u',', u'Faraday', u'discovered', u'benzene', u',', u'investigated', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invented', u'an', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'numbers', u',', u'and', u'popularized', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'lemmas': [u'as', u'a', u'chemist', u',', u'Faraday', u'discover', u'benzene', u',', u'investigate', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invent', u'a', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'number', u',', u'and', u'popularize', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'VBD', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[974, 976], [977, 978], [979, 986], [986, 987], [988, 995], [996, 1006], [1007, 1014], [1014, 1015], [1016, 1028], [1029, 1032], [1033, 1042], [1043, 1050], [1051, 1053], [1054, 1062], [1062, 1063], [1064, 1072], [1073, 1075], [1076, 1081], [1082, 1086], [1087, 1089], [1090, 1093], [1094, 1100], [1101, 1107], [1108, 1111], [1112, 1115], [1116, 1122], [1123, 1125], [1126, 1135], [1136, 1143], [1143, 1144], [1145, 1148], [1149, 1160], [1161, 1172], [1173, 1177], [1178, 1180], [1181, 1186], [1186, 1187], [1188, 1195], [1195, 1196], [1197, 1206], [1206, 1207], [1208, 1211], [1212, 1215], [1215, 1216]]}) 
answer: set([])
candidate Sentence: (0.15852710604667664, {u'tokens': [u'See', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'Being', u'Instructions', u'to', u'Students', u'in', u'Chemistry', u'-LRB-', u'1827', u'-RRB-', u'Faraday', u'worked', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discovering', u'chemical', u'substances', u'such', u'as', u'benzene', u'-LRB-', u'which', u'he', u'called', u'bicarburet', u'of', u'hydrogen', u'-RRB-', u',', u'and', u'liquefying', u'gases', u'such', u'as', u'chlorine', u'.'], u'lemmas': [u'see', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'be', u'instruction', u'to', u'student', u'in', u'Chemistry', u'-lrb-', u'1827', u'-rrb-', u'Faraday', u'work', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discover', u'chemical', u'substance', u'such', u'as', u'benzene', u'-lrb-', u'which', u'he', u'call', u'bicarburet', u'of', u'hydrogen', u'-rrb-', u',', u'and', u'liquefy', u'gas', u'such', u'as', u'chlorine', u'.'], u'pos': [u'VB', u'NN', u'CD', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'TO', u'NNS', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'VBD', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u',', u'VBG', u'NN', u'NNS', u'JJ', u'IN', u'NN', u'-LRB-', u'WDT', u'PRP', u'VBD', u'NN', u'IN', u'NN', u'-RRB-', u',', u'CC', u'VBG', u'NNS', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[9000, 9003], [9004, 9008], [9009, 9012], [9013, 9015], [9016, 9023], [9023, 9025], [9026, 9034], [9035, 9047], [9047, 9048], [9049, 9054], [9055, 9067], [9068, 9070], [9071, 9079], [9080, 9082], [9083, 9092], [9093, 9094], [9094, 9098], [9098, 9099], [9101, 9108], [9109, 9115], [9116, 9127], [9128, 9130], [9131, 9134], [9135, 9140], [9141, 9143], [9144, 9153], [9153, 9154], [9155, 9166], [9167, 9175], [9176, 9186], [9187, 9191], [9192, 9194], [9195, 9202], [9203, 9204], [9204, 9209], [9210, 9212], [9213, 9219], [9220, 9230], [9231, 9233], [9234, 9242], [9242, 9243], [9243, 9244], [9245, 9248], [9249, 9259], [9260, 9265], [9266, 9270], [9271, 9273], [9274, 9282], [9282, 9283]]}) 
answer: set([])
candidate Sentence: (0.11557169258594513, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[386, 388], [389, 399], [400, 415], [416, 425], [425, 426], [427, 439], [439, 440], [441, 444], [445, 449], [450, 452], [453, 465], [465, 466]]}) 
answer: set([u'benzene'])
candidate Sentence: (0.10843764990568161, {u'tokens': [u'The', u'trip', u'did', u',', u'however', u',', u'give', u'him', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulating', u'ideas', u'.'], u'lemmas': [u'the', u'trip', u'do', u',', u'however', u',', u'give', u'he', u'access', u'to', u'the', u'european', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulate', u'idea', u'.'], u'pos': [u'DT', u'NN', u'VBD', u',', u'RB', u',', u'VB', u'PRP', u'NN', u'TO', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'VBG', u'NNS', u'.'], u'char_offsets': [[5800, 5803], [5804, 5808], [5809, 5812], [5812, 5813], [5814, 5821], [5821, 5822], [5823, 5827], [5828, 5831], [5832, 5838], [5839, 5841], [5842, 5845], [5846, 5854], [5855, 5865], [5866, 5871], [5872, 5875], [5876, 5877], [5878, 5882], [5883, 5885], [5886, 5897], [5898, 5903], [5903, 5904]]}) 
answer: set([u'benzene', u'discover'])

did he discover benzene?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7050>.answer
_____________________________ test_yesno[param229] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7248>, (<src.tfidf.TF_IDF object at 0x112e8bb50>, set(['nairobi'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7248>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.55086791515350342, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14307, 14314], [14315, 14330], [14330, 14331]]}) 
answer: set([u'kenya', u'capital'])
candidate Sentence: (0.44897595047950745, {u'tokens': [u'Nairobi', u'-LRB-', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'lemmas': [u'Nairobi', u'-lrb-', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'pos': [u'NNP', u'-LRB-', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [8, 9], [10, 11], [12, 14], [15, 18], [19, 26], [27, 30], [31, 38], [39, 43], [44, 46], [47, 52], [52, 53]]}) 
answer: set([])
candidate Sentence: (0.25201243162155151, {u'tokens': [u'History', u'-', u'Nairobi', u'Nairobi', u'is', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'lemmas': [u'history', u'-', u'Nairobi', u'Nairobi', u'be', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'pos': [u'NN', u':', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[677, 684], [685, 686], [687, 694], [697, 704], [705, 707], [708, 712], [713, 716], [717, 724], [725, 727], [728, 731], [732, 739], [740, 748], [749, 752], [753, 755], [756, 759], [760, 767], [768, 776], [776, 777]]}) 
answer: set([u'kenya'])
candidate Sentence: (0.19087563455104828, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[349, 356], [357, 359], [360, 364], [365, 367], [368, 369], [370, 376], [377, 381], [382, 387], [388, 390], [391, 394], [395, 402], [403, 410], [411, 418], [419, 421], [422, 428], [428, 429], [430, 433], [434, 438], [439, 446], [447, 451], [452, 454], [455, 461], [462, 465], [466, 473], [474, 476], [477, 484], [485, 489], [490, 496], [497, 499], [500, 504], [505, 508], [509, 519], [520, 523], [524, 531], [532, 534], [535, 536], [537, 541], [542, 548], [549, 557], [558, 560], [561, 565], [565, 566]]}) 
answer: set([u'kenya'])
candidate Sentence: (0.14558723568916321, {u'tokens': [u'The', u'national', u'park', u'is', u'unique', u',', u'in', u'being', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'lemmas': [u'the', u'national', u'park', u'be', u'unique', u',', u'in', u'be', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'JJ', u',', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[20444, 20447], [20448, 20456], [20457, 20461], [20462, 20464], [20465, 20471], [20471, 20472], [20473, 20475], [20476, 20481], [20482, 20485], [20486, 20490], [20491, 20503], [20504, 20506], [20507, 20511], [20512, 20518], [20519, 20521], [20522, 20528], [20529, 20530], [20531, 20538], [20539, 20543], [20543, 20544], [20545, 20547], [20548, 20552], [20553, 20555], [20556, 20560], [20561, 20565], [20565, 20566]]}) 
answer: set([u'kenya'])

Is Nairobi the capital of Kenya?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7248>.answer
_____________________________ test_yesno[param230] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7290>, (<src.tfidf.TF_IDF object at 0x112e8bb50>, set(['nairobi'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46621730923652649, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14307, 14314], [14315, 14330], [14330, 14331]]}) 
answer: set([u'found', u'1899'])
candidate Sentence: (0.24989064037799835, {u'tokens': [u'The', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'is', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'founded', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'years', u'after', u'the', u'city', u'was', u'founded', u'.'], u'lemmas': [u'the', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'be', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'found', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'year', u'after', u'the', u'city', u'be', u'found', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'CD', u'IN', u'DT', u'NNP', u',', u'RB', u'CD', u'NNS', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[19730, 19733], [19734, 19740], [19741, 19748], [19749, 19753], [19754, 19760], [19761, 19763], [19764, 19767], [19768, 19772], [19773, 19775], [19776, 19779], [19780, 19785], [19786, 19793], [19794, 19798], [19799, 19803], [19803, 19804], [19805, 19812], [19813, 19815], [19816, 19820], [19821, 19823], [19824, 19827], [19828, 19835], [19835, 19836], [19837, 19841], [19842, 19847], [19848, 19853], [19854, 19859], [19860, 19863], [19864, 19868], [19869, 19872], [19873, 19880], [19880, 19881]]}) 
answer: set([u'1899'])
candidate Sentence: (0.21632850170135498, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[349, 356], [357, 359], [360, 364], [365, 367], [368, 369], [370, 376], [377, 381], [382, 387], [388, 390], [391, 394], [395, 402], [403, 410], [411, 418], [419, 421], [422, 428], [428, 429], [430, 433], [434, 438], [439, 446], [447, 451], [452, 454], [455, 461], [462, 465], [466, 473], [474, 476], [477, 484], [485, 489], [490, 496], [497, 499], [500, 504], [505, 508], [509, 519], [520, 523], [524, 531], [532, 534], [535, 536], [537, 541], [542, 548], [549, 557], [558, 560], [561, 565], [565, 566]]}) 
answer: set([])
candidate Sentence: (0.18447409570217133, {u'tokens': [u'Since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'has', u'grown', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'being', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'lemmas': [u'since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'have', u'grow', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'be', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'IN', u'CD', u',', u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'NNP', u',', u'IN', u'VBG', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[30841, 30846], [30847, 30850], [30851, 30861], [30862, 30864], [30865, 30869], [30869, 30870], [30871, 30878], [30879, 30882], [30883, 30888], [30889, 30891], [30892, 30898], [30899, 30902], [30903, 30910], [30911, 30915], [30916, 30918], [30919, 30923], [30924, 30930], [30930, 30931], [30932, 30939], [30940, 30945], [30946, 30949], [30950, 30958], [30959, 30963], [30964, 30966], [30967, 30970], [30971, 30977], [30977, 30978]]}) 
answer: set([u'found'])
candidate Sentence: (0.15859608352184296, {u'tokens': [u'Nairobi', u'was', u'founded', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-LRB-', u'KR', u'-RRB-', u'main', u'headquarters', u'are', u'still', u'situated', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'lemmas': [u'Nairobi', u'be', u'found', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-lrb-', u'KR', u'-rrb-', u'main', u'headquarters', u'be', u'still', u'situate', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'RB', u',', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[26232, 26239], [26240, 26243], [26244, 26251], [26252, 26254], [26255, 26256], [26257, 26264], [26265, 26269], [26269, 26270], [26271, 26274], [26275, 26278], [26279, 26284], [26285, 26293], [26294, 26295], [26295, 26297], [26297, 26298], [26299, 26303], [26304, 26316], [26317, 26320], [26321, 26326], [26327, 26335], [26336, 26341], [26341, 26342], [26343, 26347], [26348, 26351], [26352, 26356], [26357, 26363], [26363, 26364]]}) 
answer: set([u'1899'])

Was Nairobi founded in 1899?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7290>.answer
_____________________________ test_yesno[param233] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7368>, (<src.tfidf.TF_IDF object at 0x115c7b950>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7368>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.34562104940414429, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7475, 7478], [7479, 7484], [7485, 7491], [7492, 7498], [7499, 7502], [7503, 7514], [7514, 7515], [7515, 7516]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.29143422842025757, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49115, 49118], [49119, 49122], [49123, 49127], [49128, 49129], [49129, 49134], [49134, 49135], [49135, 49136]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.26135227084159851, {u'tokens': [u'Prodigal', u'Genius', u':', u'The', u'Life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'died', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'lemmas': [u'prodigal', u'genius', u':', u'the', u'life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'die', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'pos': [u'JJ', u'NN', u':', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'CD', u'NNP', u'VBD', u'IN', u'NN', u'NN', u'RB', u'IN', u'NN', u'CD', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'IN', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[42362, 42370], [42371, 42377], [42377, 42378], [42379, 42382], [42383, 42387], [42388, 42390], [42391, 42397], [42398, 42403], [42404, 42406], [42407, 42411], [42412, 42417], [42418, 42425], [42426, 42430], [42431, 42445], [42446, 42451], [42452, 42456], [42457, 42459], [42460, 42465], [42466, 42473], [42474, 42479], [42480, 42482], [42483, 42487], [42488, 42492], [42493, 42495], [42496, 42499], [42500, 42503], [42504, 42510], [42511, 42516], [42516, 42517], [42518, 42520], [42521, 42522], [42523, 42530], [42531, 42535], [42535, 42536]]}) 
answer: set([])
candidate Sentence: (0.17864766716957092, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[55589, 55593], [55594, 55595], [55596, 55608], [55608, 55609], [55610, 55614], [55614, 55615], [55616, 55622], [55623, 55628], [55628, 55629], [55630, 55633], [55634, 55637], [55638, 55640], [55641, 55643], [55644, 55648], [55649, 55657], [55658, 55661], [55662, 55671], [55671, 55672]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.16287904977798462, {u'tokens': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378', u'--', u'380', u'Earlier', u',', u'Tesla', u'alone', u'was', u'rumored', u'to', u'have', u'been', u'nominated', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'lemmas': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378', u'--', u'380', u'earlier', u',', u'Tesla', u'alone', u'be', u'rumor', u'to', u'have', u'be', u'nominate', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'pos': [u'NNP', u',', u'``', u'NNP', u"''", u'NN', u'CD', u':', u'CD', u'JJR', u',', u'NNP', u'RB', u'VBD', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[28807, 28813], [28813, 28814], [28815, 28816], [28816, 28822], [28822, 28823], [28824, 28826], [28827, 28830], [28830, 28831], [28831, 28834], [28836, 28843], [28843, 28844], [28845, 28850], [28851, 28856], [28857, 28860], [28861, 28868], [28869, 28871], [28872, 28876], [28877, 28881], [28882, 28891], [28892, 28895], [28896, 28899], [28900, 28905], [28906, 28911], [28912, 28914], [28915, 28919], [28919, 28920]]}) 
answer: set([u'die'])

Did Nikola Tesla die alone?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7368>.answer
_____________________________ test_yesno[param234] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef73b0>, (<src.tfidf.TF_IDF object at 0x115c7b950>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Nikola Tesla was close friends with Mark Twain.') == True
E                +  where 'Nikola Tesla was close friends with Mark Twain.' = <src.question_processing.Question_parser instance at 0x116ef73b0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.65068519115447998, {u'tokens': [u'In', u'middle', u'age', u',', u'Tesla', u'became', u'very', u'close', u'friends', u'with', u'Mark', u'Twain', u'.'], u'lemmas': [u'in', u'middle', u'age', u',', u'Tesla', u'become', u'very', u'close', u'friend', u'with', u'Mark', u'Twain', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[39210, 39212], [39213, 39219], [39220, 39223], [39223, 39224], [39225, 39230], [39231, 39237], [39238, 39242], [39243, 39248], [39249, 39256], [39257, 39261], [39262, 39266], [39267, 39272], [39272, 39273]]}) 
answer: set([])
candidate Sentence: (0.37245181202888489, {u'tokens': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'Thunder', u'and', u'Lightning', u'.'], u'lemmas': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'thunder', u'and', u'lightning', u'.'], u'pos': [u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u':', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[17418, 17424], [17424, 17425], [17426, 17435], [17435, 17436], [17438, 17442], [17443, 17448], [17449, 17452], [17453, 17459], [17460, 17465], [17465, 17466], [17467, 17474], [17475, 17478], [17479, 17488], [17488, 17489]]}) 
answer: set([u'close', u'friend'])
candidate Sentence: (0.22945791482925415, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49115, 49118], [49119, 49122], [49123, 49127], [49128, 49129], [49129, 49134], [49134, 49135], [49135, 49136]]}) 
answer: set([u'twain', u'close', u'friend', u'mark'])
candidate Sentence: (0.19084540009498596, {u'tokens': [u'Tesla', u'was', u'good', u'friends', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'lemmas': [u'Tesla', u'be', u'good', u'friend', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'pos': [u'NNP', u'VBD', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[39775, 39780], [39781, 39784], [39785, 39789], [39790, 39797], [39798, 39802], [39803, 39809], [39810, 39819], [39820, 39827], [39827, 39828]]}) 
answer: set([u'twain', u'close', u'mark'])
candidate Sentence: (0.18484398722648621, {u'tokens': [u'16', u'-RRB-', u'His', u'wish', u'was', u'to', u'have', u'a', u'sculpture', u'made', u'by', u'his', u'close', u'friend', u',', u'Croatian', u'sculptor', u'Ivan', u'Me\u0161trovi\u0107', u',', u'who', u'was', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'died', u'before', u'getting', u'a', u'chance', u'to', u'see', u'it', u'.'], u'lemmas': [u'16', u'-rrb-', u'he', u'wish', u'be', u'to', u'have', u'a', u'sculpture', u'make', u'by', u'he', u'close', u'friend', u',', u'croatian', u'sculptor', u'Ivan', u'Me\u0161trovi\u0107', u',', u'who', u'be', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'die', u'before', u'get', u'a', u'chance', u'to', u'see', u'it', u'.'], u'pos': [u'CD', u'-RRB-', u'PRP$', u'NN', u'VBD', u'TO', u'VB', u'DT', u'NN', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'JJ', u'NN', u'NNP', u'NNP', u',', u'WP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNPS', u',', u'CC', u'PRP', u'VBD', u'IN', u'VBG', u'DT', u'NN', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[46869, 46871], [46871, 46872], [46874, 46877], [46878, 46882], [46883, 46886], [46887, 46889], [46890, 46894], [46895, 46896], [46897, 46906], [46907, 46911], [46912, 46914], [46915, 46918], [46919, 46924], [46925, 46931], [46931, 46932], [46933, 46941], [46942, 46950], [46951, 46955], [46956, 46965], [46965, 46966], [46967, 46970], [46971, 46974], [46975, 46977], [46978, 46982], [46983, 46987], [46988, 46990], [46991, 46997], [46998, 47004], [47004, 47005], [47006, 47009], [47010, 47012], [47013, 47017], [47018, 47024], [47025, 47032], [47033, 47034], [47035, 47041], [47042, 47044], [47045, 47048], [47049, 47051], [47051, 47052]]}) 
answer: set([u'twain', u'mark'])

Was Nikola Tesla close friends with Mark Twain?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Nikola Tesla was close friends with Mark Twain.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Nikola Tesla was close friends with Mark Twain.') == True
 +  where 'Nikola Tesla was close friends with Mark Twain.' = <src.question_processing.Question_parser instance at 0x116ef73b0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param237] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7488>, (<src.tfidf.TF_IDF object at 0x115c7b950>, set(['nikola', 'nikola_tesla', 'tesla'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7488>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.3363785445690155, {u'tokens': [u'Tesla', u'would', u'visualise', u'an', u'invention', u'in', u'his', u'brain', u'with', u'extreme', u'precision', u',', u'including', u'all', u'dimensions', u',', u'before', u'moving', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'known', u'as', u'picture', u'thinking', u'.'], u'lemmas': [u'Tesla', u'would', u'visualise', u'a', u'invention', u'in', u'he', u'brain', u'with', u'extreme', u'precision', u',', u'include', u'all', u'dimension', u',', u'before', u'move', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'know', u'as', u'picture', u'thinking', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u',', u'VBG', u'DT', u'NNS', u',', u'IN', u'VBG', u'TO', u'DT', u'NN', u'NN', u':', u'DT', u'NN', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[6339, 6344], [6345, 6350], [6351, 6360], [6361, 6363], [6364, 6373], [6374, 6376], [6377, 6380], [6381, 6386], [6387, 6391], [6392, 6399], [6400, 6409], [6409, 6410], [6411, 6420], [6421, 6424], [6425, 6435], [6435, 6436], [6437, 6443], [6444, 6450], [6451, 6453], [6454, 6457], [6458, 6470], [6471, 6476], [6476, 6477], [6478, 6479], [6480, 6489], [6490, 6499], [6500, 6505], [6506, 6508], [6509, 6516], [6517, 6525], [6525, 6526]]}) 
answer: set([u'use', u'call'])
candidate Sentence: (0.25358206033706665, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7475, 7478], [7479, 7484], [7485, 7491], [7492, 7498], [7499, 7502], [7503, 7514], [7514, 7515], [7515, 7516]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])
candidate Sentence: (0.21382521092891693, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49115, 49118], [49119, 49122], [49123, 49127], [49128, 49129], [49129, 49134], [49134, 49135], [49135, 49136]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])
candidate Sentence: (0.17329509556293488, {u'tokens': [u'Tesla', u'called', u'his', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'lemmas': [u'Tesla', u'call', u'he', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'pos': [u'NNP', u'VBD', u'PRP$', u'NN', u'DT', u'``', u'NN', u"''", u'.'], u'char_offsets': [[21536, 21541], [21542, 21548], [21549, 21552], [21553, 21557], [21558, 21559], [21560, 21561], [21561, 21574], [21574, 21575], [21575, 21576]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique'])
candidate Sentence: (0.13107374310493469, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[55589, 55593], [55594, 55595], [55596, 55608], [55608, 55609], [55610, 55614], [55614, 55615], [55616, 55622], [55623, 55628], [55628, 55629], [55630, 55633], [55634, 55637], [55638, 55640], [55641, 55643], [55644, 55648], [55649, 55657], [55658, 55661], [55662, 55671], [55671, 55672]]}) 
answer: set([u'thinking', u'picture', u'use', u'technique', u'call'])

Did Nikola Tesla use a technique called picture thinking?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7488>.answer
_____________________________ test_yesno[param249] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef77e8>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef77e8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46675711870193481, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[13794, 13795], [13796, 13801], [13802, 13816], [13817, 13830], [13831, 13834], [13835, 13836], [13836, 13843], [13844, 13849], [13849, 13850], [13851, 13852], [13852, 13859], [13860, 13865], [13868, 13871], [13874, 13878], [13878, 13879], [13880, 13884], [13885, 13888], [13889, 13890], [13890, 13896], [13897, 13902], [13902, 13903], [13904, 13906], [13907, 13908], [13908, 13915], [13916, 13921], [13921, 13922], [13923, 13924], [13924, 13929], [13932, 13934], [13936, 13937], [13938, 13941], [13942, 13945], [13946, 13953], [13954, 13955], [13955, 13959], [13960, 13965], [13965, 13966], [13966, 13967]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.45928633213043213, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[15958, 15965], [15966, 15972], [15973, 15977], [15978, 15987], [15988, 15992], [15993, 15999], [16000, 16003], [16004, 16008], [16009, 16016], [16017, 16020], [16021, 16030], [16031, 16037], [16038, 16039], [16039, 16046], [16047, 16052], [16052, 16053], [16054, 16060], [16060, 16061]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45149636268615723, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31363, 31368], [31368, 31369], [31370, 31376], [31377, 31381], [31382, 31388], [31389, 31390], [31391, 31396], [31397, 31399], [31400, 31403], [31404, 31411], [31412, 31425], [31425, 31426], [31427, 31430], [31431, 31434], [31435, 31444], [31445, 31453], [31454, 31456], [31457, 31459], [31460, 31469], [31470, 31479], [31479, 31480], [31481, 31482], [31482, 31485], [31486, 31493], [31493, 31494], [31494, 31495], [31496, 31497], [31497, 31500], [31501, 31507], [31507, 31508], [31508, 31509], [31510, 31511], [31511, 31514], [31515, 31527], [31527, 31528], [31528, 31529], [31530, 31533], [31534, 31535], [31535, 31538], [31539, 31544], [31544, 31545], [31545, 31546], [31546, 31547], [31548, 31551], [31552, 31557], [31557, 31558], [31558, 31559], [31559, 31560], [31560, 31561], [31561, 31562], [31563, 31564], [31564, 31567], [31568, 31574], [31575, 31578], [31578, 31579], [31579, 31580], [31580, 31581], [31581, 31582], [31582, 31583]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.39658915996551514, {u'tokens': [u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[14898, 14905], [14906, 14912], [14912, 14913], [14914, 14918], [14919, 14925], [14926, 14934], [14935, 14941], [14941, 14942], [14943, 14946], [14947, 14951], [14952, 14959], [14960, 14967], [14968, 14971], [14972, 14977], [14978, 14981], [14982, 14989], [14990, 14993], [14995, 15003], [15003, 15004]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34162077307701111, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[29823, 29825], [29826, 29829], [29830, 29834], [29834, 29835], [29836, 29839], [29840, 29846], [29847, 29851], [29852, 29861], [29862, 29863], [29864, 29871], [29872, 29878], [29879, 29880], [29880, 29887], [29887, 29888], [29889, 29891], [29892, 29893], [29893, 29900], [29900, 29901], [29901, 29902], [29903, 29908], [29909, 29917], [29918, 29920], [29921, 29926], [29927, 29933], [29933, 29934], [29935, 29939], [29940, 29946], [29947, 29950], [29951, 29955], [29956, 29959], [29960, 29964], [29965, 29967], [29968, 29973], [29973, 29974]]}) 
answer: set([u'upright', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef77e8>.answer
_____________________________ test_yesno[param250] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7830>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7830>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.46675711870193481, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[13794, 13795], [13796, 13801], [13802, 13816], [13817, 13830], [13831, 13834], [13835, 13836], [13836, 13843], [13844, 13849], [13849, 13850], [13851, 13852], [13852, 13859], [13860, 13865], [13868, 13871], [13874, 13878], [13878, 13879], [13880, 13884], [13885, 13888], [13889, 13890], [13890, 13896], [13897, 13902], [13902, 13903], [13904, 13906], [13907, 13908], [13908, 13915], [13916, 13921], [13921, 13922], [13923, 13924], [13924, 13929], [13932, 13934], [13936, 13937], [13938, 13941], [13942, 13945], [13946, 13953], [13954, 13955], [13955, 13959], [13960, 13965], [13965, 13966], [13966, 13967]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.45928633213043213, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[15958, 15965], [15966, 15972], [15973, 15977], [15978, 15987], [15988, 15992], [15993, 15999], [16000, 16003], [16004, 16008], [16009, 16016], [16017, 16020], [16021, 16030], [16031, 16037], [16038, 16039], [16039, 16046], [16047, 16052], [16052, 16053], [16054, 16060], [16060, 16061]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45149636268615723, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31363, 31368], [31368, 31369], [31370, 31376], [31377, 31381], [31382, 31388], [31389, 31390], [31391, 31396], [31397, 31399], [31400, 31403], [31404, 31411], [31412, 31425], [31425, 31426], [31427, 31430], [31431, 31434], [31435, 31444], [31445, 31453], [31454, 31456], [31457, 31459], [31460, 31469], [31470, 31479], [31479, 31480], [31481, 31482], [31482, 31485], [31486, 31493], [31493, 31494], [31494, 31495], [31496, 31497], [31497, 31500], [31501, 31507], [31507, 31508], [31508, 31509], [31510, 31511], [31511, 31514], [31515, 31527], [31527, 31528], [31528, 31529], [31530, 31533], [31534, 31535], [31535, 31538], [31539, 31544], [31544, 31545], [31545, 31546], [31546, 31547], [31548, 31551], [31552, 31557], [31557, 31558], [31558, 31559], [31559, 31560], [31560, 31561], [31561, 31562], [31563, 31564], [31564, 31567], [31568, 31574], [31575, 31578], [31578, 31579], [31579, 31580], [31580, 31581], [31581, 31582], [31582, 31583]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.39658915996551514, {u'tokens': [u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[14898, 14905], [14906, 14912], [14912, 14913], [14914, 14918], [14919, 14925], [14926, 14934], [14935, 14941], [14941, 14942], [14943, 14946], [14947, 14951], [14952, 14959], [14960, 14967], [14968, 14971], [14972, 14977], [14978, 14981], [14982, 14989], [14990, 14993], [14995, 15003], [15003, 15004]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34162077307701111, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[29823, 29825], [29826, 29829], [29830, 29834], [29834, 29835], [29836, 29839], [29840, 29846], [29847, 29851], [29852, 29861], [29862, 29863], [29864, 29871], [29872, 29878], [29879, 29880], [29880, 29887], [29887, 29888], [29889, 29891], [29892, 29893], [29893, 29900], [29900, 29901], [29901, 29902], [29903, 29908], [29909, 29917], [29918, 29920], [29921, 29926], [29927, 29933], [29933, 29934], [29935, 29939], [29940, 29946], [29947, 29950], [29951, 29955], [29956, 29959], [29960, 29964], [29965, 29967], [29968, 29973], [29973, 29974]]}) 
answer: set([u'upright', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7830>.answer
_____________________________ test_yesno[param251] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7878>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef7878>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25390845537185669, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2700, 2703], [2704, 2713], [2714, 2716], [2717, 2720], [2721, 2727], [2728, 2733], [2734, 2736], [2737, 2745], [2746, 2748], [2749, 2759], [2760, 2770], [2771, 2773], [2774, 2779], [2779, 2780], [2781, 2786], [2786, 2787], [2788, 2791], [2792, 2795], [2796, 2804], [2805, 2807], [2808, 2814], [2815, 2824], [2825, 2827], [2828, 2834], [2835, 2837], [2838, 2841], [2842, 2848], [2849, 2851], [2852, 2855], [2856, 2867], [2867, 2868]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18693132698535919, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4531, 4541], [4541, 4543], [4544, 4550], [4551, 4555], [4556, 4565], [4566, 4572], [4573, 4579], [4580, 4582], [4583, 4593], [4593, 4595], [4595, 4596], [4597, 4601], [4602, 4605], [4606, 4615], [4616, 4624], [4624, 4625], [4626, 4636], [4637, 4645], [4646, 4649], [4650, 4660], [4661, 4663], [4664, 4667], [4668, 4674], [4675, 4681], [4682, 4687], [4687, 4688], [4689, 4694], [4695, 4700], [4701, 4704], [4705, 4708], [4709, 4716], [4717, 4721], [4722, 4725], [4726, 4733], [4734, 4736], [4737, 4741], [4741, 4742]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14114852249622345, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2516, 2524], [2525, 2531], [2532, 2537], [2538, 2543], [2544, 2549], [2550, 2552], [2553, 2560], [2560, 2561], [2562, 2570], [2571, 2573], [2574, 2582], [2583, 2593], [2594, 2597], [2598, 2604], [2605, 2612], [2613, 2617], [2618, 2621], [2622, 2626], [2627, 2629], [2630, 2640], [2641, 2652], [2653, 2654], [2654, 2657], [2658, 2662], [2662, 2663], [2664, 2668], [2669, 2677], [2678, 2687], [2688, 2698], [2698, 2699]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.14035876095294952, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[27736, 27739], [27740, 27743], [27744, 27746], [27747, 27755], [27756, 27759], [27760, 27765], [27766, 27772], [27772, 27773], [27774, 27781], [27781, 27782], [27783, 27786], [27787, 27790], [27791, 27797], [27798, 27804], [27805, 27813], [27814, 27817], [27818, 27821], [27822, 27834], [27834, 27835]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12918558716773987, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[18808, 18813], [18814, 18818], [18819, 18830], [18831, 18840], [18841, 18843], [18844, 18854], [18855, 18862], [18863, 18865], [18866, 18871], [18872, 18876], [18876, 18877], [18879, 18883], [18884, 18891], [18892, 18898], [18899, 18901], [18902, 18905], [18906, 18911], [18912, 18915], [18916, 18920], [18921, 18923], [18924, 18927], [18928, 18932], [18933, 18941], [18942, 18948], [18948, 18949]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116ef7878>.answer
_____________________________ test_yesno[param252] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef78c0>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef78c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25390845537185669, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2700, 2703], [2704, 2713], [2714, 2716], [2717, 2720], [2721, 2727], [2728, 2733], [2734, 2736], [2737, 2745], [2746, 2748], [2749, 2759], [2760, 2770], [2771, 2773], [2774, 2779], [2779, 2780], [2781, 2786], [2786, 2787], [2788, 2791], [2792, 2795], [2796, 2804], [2805, 2807], [2808, 2814], [2815, 2824], [2825, 2827], [2828, 2834], [2835, 2837], [2838, 2841], [2842, 2848], [2849, 2851], [2852, 2855], [2856, 2867], [2867, 2868]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18693132698535919, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4531, 4541], [4541, 4543], [4544, 4550], [4551, 4555], [4556, 4565], [4566, 4572], [4573, 4579], [4580, 4582], [4583, 4593], [4593, 4595], [4595, 4596], [4597, 4601], [4602, 4605], [4606, 4615], [4616, 4624], [4624, 4625], [4626, 4636], [4637, 4645], [4646, 4649], [4650, 4660], [4661, 4663], [4664, 4667], [4668, 4674], [4675, 4681], [4682, 4687], [4687, 4688], [4689, 4694], [4695, 4700], [4701, 4704], [4705, 4708], [4709, 4716], [4717, 4721], [4722, 4725], [4726, 4733], [4734, 4736], [4737, 4741], [4741, 4742]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14114852249622345, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2516, 2524], [2525, 2531], [2532, 2537], [2538, 2543], [2544, 2549], [2550, 2552], [2553, 2560], [2560, 2561], [2562, 2570], [2571, 2573], [2574, 2582], [2583, 2593], [2594, 2597], [2598, 2604], [2605, 2612], [2613, 2617], [2618, 2621], [2622, 2626], [2627, 2629], [2630, 2640], [2641, 2652], [2653, 2654], [2654, 2657], [2658, 2662], [2662, 2663], [2664, 2668], [2669, 2677], [2678, 2687], [2688, 2698], [2698, 2699]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.14035876095294952, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[27736, 27739], [27740, 27743], [27744, 27746], [27747, 27755], [27756, 27759], [27760, 27765], [27766, 27772], [27772, 27773], [27774, 27781], [27781, 27782], [27783, 27786], [27787, 27790], [27791, 27797], [27798, 27804], [27805, 27813], [27814, 27817], [27818, 27821], [27822, 27834], [27834, 27835]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12918558716773987, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[18808, 18813], [18814, 18818], [18819, 18830], [18831, 18840], [18841, 18843], [18844, 18854], [18855, 18862], [18863, 18865], [18866, 18871], [18872, 18876], [18876, 18877], [18879, 18883], [18884, 18891], [18892, 18898], [18899, 18901], [18902, 18905], [18906, 18911], [18912, 18915], [18916, 18920], [18921, 18923], [18924, 18927], [18928, 18932], [18933, 18941], [18942, 18948], [18948, 18949]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef78c0>.answer
_____________________________ test_yesno[param253] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7908>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7908>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.49141377210617065, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22234, 22237], [22238, 22242], [22243, 22248], [22249, 22251], [22252, 22255], [22256, 22261], [22262, 22267], [22268, 22270], [22271, 22277], [22278, 22286], [22287, 22289], [22290, 22293], [22294, 22297], [22298, 22300], [22301, 22307], [22307, 22308]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.48658549785614014, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21455, 21460], [21461, 21467], [21468, 21472], [21473, 21477], [21478, 21480], [21481, 21486], [21486, 21487], [21488, 21491], [21492, 21497], [21497, 21498], [21499, 21508], [21508, 21509], [21510, 21513], [21514, 21520], [21520, 21521]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.43914318084716797, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21699, 21703], [21704, 21709], [21710, 21716], [21717, 21721], [21722, 21727], [21728, 21734], [21734, 21735], [21736, 21740], [21741, 21746], [21747, 21748], [21748, 21751], [21752, 21757], [21757, 21758], [21758, 21759], [21760, 21769], [21769, 21770], [21771, 21774], [21775, 21782], [21783, 21788], [21789, 21790], [21790, 21794], [21795, 21799], [21800, 21802], [21803, 21808], [21808, 21809], [21810, 21822], [21822, 21823], [21823, 21824]]}) 
answer: set([u'left-most', u'call'])
candidate Sentence: (0.34356230497360229, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22762, 22764], [22765, 22770], [22771, 22777], [22777, 22778], [22779, 22782], [22783, 22789], [22790, 22795], [22796, 22798], [22799, 22800], [22801, 22810], [22811, 22816], [22816, 22817]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27817422151565552, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'left-most', u'corda', u'pedal', u'call', u'una'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7908>.answer
_____________________________ test_yesno[param254] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7950>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
E                +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x116ef7950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.49141377210617065, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22234, 22237], [22238, 22242], [22243, 22248], [22249, 22251], [22252, 22255], [22256, 22261], [22262, 22267], [22268, 22270], [22271, 22277], [22278, 22286], [22287, 22289], [22290, 22293], [22294, 22297], [22298, 22300], [22301, 22307], [22307, 22308]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.48658549785614014, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21455, 21460], [21461, 21467], [21468, 21472], [21473, 21477], [21478, 21480], [21481, 21486], [21486, 21487], [21488, 21491], [21492, 21497], [21497, 21498], [21499, 21508], [21508, 21509], [21510, 21513], [21514, 21520], [21520, 21521]]}) 
answer: set([u'left-most', u'call', u'grand'])
candidate Sentence: (0.43914318084716797, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21699, 21703], [21704, 21709], [21710, 21716], [21717, 21721], [21722, 21727], [21728, 21734], [21734, 21735], [21736, 21740], [21741, 21746], [21747, 21748], [21748, 21751], [21752, 21757], [21757, 21758], [21758, 21759], [21760, 21769], [21769, 21770], [21771, 21774], [21775, 21782], [21783, 21788], [21789, 21790], [21790, 21794], [21795, 21799], [21800, 21802], [21803, 21808], [21808, 21809], [21810, 21822], [21822, 21823], [21823, 21824]]}) 
answer: set([u'left-most', u'call'])
candidate Sentence: (0.34356230497360229, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[22762, 22764], [22765, 22770], [22771, 22777], [22777, 22778], [22779, 22782], [22783, 22789], [22790, 22795], [22796, 22798], [22799, 22800], [22801, 22810], [22811, 22816], [22816, 22817]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27817422151565552, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'left-most', u'corda', u'pedal', u'call', u'una'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the left-most pedal on a grand piano is called the una corda.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
 +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x116ef7950>.answer
_____________________________ test_yesno[param255] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7998>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7998>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.90269917249679565, {u'tokens': [u'It', u'is', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'lemmas': [u'it', u'be', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'DT', u'NN', u'TO', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[26825, 26827], [26828, 26830], [26831, 26843], [26844, 26847], [26848, 26851], [26852, 26857], [26858, 26860], [26861, 26863], [26864, 26869], [26870, 26877], [26877, 26878]]}) 
answer: set([u'metal', u'grand'])
candidate Sentence: (0.21539036929607391, {u'tokens': [u'The', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'is', u'usually', u'made', u'of', u'cast', u'iron', u'.'], u'lemmas': [u'the', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'be', u'usually', u'make', u'of', u'cast', u'iron', u'.'], u'pos': [u'DT', u'NN', u',', u'CC', u'NN', u'NN', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[26757, 26760], [26761, 26766], [26766, 26767], [26768, 26770], [26771, 26776], [26777, 26782], [26782, 26783], [26784, 26786], [26787, 26788], [26789, 26794], [26795, 26797], [26798, 26805], [26806, 26810], [26811, 26813], [26814, 26818], [26819, 26823], [26823, 26824]]}) 
answer: set([u'grand', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.18434406816959381, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10196, 10201], [10202, 10207], [10207, 10208]]}) 
answer: set([u'plate', u'metal', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.11775688827037811, {u'tokens': [u'The', u'inclusion', u'in', u'a', u'piano', u'of', u'an', u'extremely', u'large', u'piece', u'of', u'metal', u'is', u'potentially', u'an', u'aesthetic', u'handicap', u',', u'which', u'piano', u'makers', u'overcome', u'by', u'polishing', u',', u'painting', u'and', u'decorating', u'the', u'plate', u'.'], u'lemmas': [u'the', u'inclusion', u'in', u'a', u'piano', u'of', u'a', u'extremely', u'large', u'piece', u'of', u'metal', u'be', u'potentially', u'a', u'aesthetic', u'handicap', u',', u'which', u'piano', u'maker', u'overcome', u'by', u'polish', u',', u'painting', u'and', u'decorate', u'the', u'plate', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'NN', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'WDT', u'NN', u'NNS', u'VBN', u'IN', u'VBG', u',', u'NN', u'CC', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[27313, 27316], [27317, 27326], [27327, 27329], [27330, 27331], [27332, 27337], [27338, 27340], [27341, 27343], [27344, 27353], [27354, 27359], [27360, 27365], [27366, 27368], [27369, 27374], [27375, 27377], [27378, 27389], [27390, 27392], [27393, 27402], [27403, 27411], [27411, 27412], [27413, 27418], [27419, 27424], [27425, 27431], [27432, 27440], [27441, 27443], [27444, 27453], [27453, 27454], [27455, 27463], [27464, 27467], [27468, 27478], [27479, 27482], [27483, 27488], [27488, 27489]]}) 
answer: set([u'grand', u'massive', u'advantageous', u'quite'])
candidate Sentence: (0.10906426608562469, {u'tokens': [u'Plates', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'lemmas': [u'plate', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'DT', u'NN', u'POS', u'JJ', u'NN', u'CC', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[27490, 27496], [27497, 27502], [27503, 27510], [27511, 27514], [27515, 27527], [27527, 27529], [27530, 27540], [27541, 27550], [27551, 27554], [27555, 27558], [27559, 27561], [27562, 27572], [27573, 27583], [27583, 27584]]}) 
answer: set([u'grand', u'metal', u'massive', u'advantageous', u'quite'])

Is it advantageous for a grand piano's metal plate to be quite massive?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7998>.answer
_____________________________ test_yesno[param257] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7a28>, (<src.tfidf.TF_IDF object at 0x11129bf10>, set(['piano'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7a28>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.25737065076828003, {u'tokens': [u'A', u'prepared', u'piano', u'is', u'a', u'standard', u'grand', u'piano', u'which', u'has', u'had', u'objects', u'placed', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'has', u'had', u'its', u'mechanism', u'changed', u'in', u'some', u'way', u'.'], u'lemmas': [u'a', u'prepared', u'piano', u'be', u'a', u'standard', u'grand', u'piano', u'which', u'have', u'have', u'object', u'place', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'have', u'have', u'its', u'mechanism', u'change', u'in', u'some', u'way', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'NNS', u'VBD', u'IN', u'PRP', u'IN', u'DT', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u',', u'CC', u'WDT', u'VBZ', u'VBN', u'PRP$', u'NN', u'VBD', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[17771, 17772], [17773, 17781], [17782, 17787], [17788, 17790], [17791, 17792], [17793, 17801], [17802, 17807], [17808, 17813], [17814, 17819], [17820, 17823], [17824, 17827], [17828, 17835], [17836, 17842], [17843, 17849], [17850, 17852], [17853, 17859], [17860, 17861], [17862, 17873], [17874, 17876], [17877, 17882], [17883, 17885], [17886, 17891], [17892, 17895], [17896, 17901], [17901, 17902], [17903, 17905], [17906, 17911], [17912, 17915], [17916, 17919], [17920, 17923], [17924, 17933], [17934, 17941], [17942, 17944], [17945, 17949], [17950, 17953], [17953, 17954]]}) 
answer: set([u'upright', u'perpendicular', u'key'])
candidate Sentence: (0.16863591969013214, {u'tokens': [u'From', u'lower', u'left', u'to', u'upper', u'right', u':', u'dampers', u',', u'main', u'sounding', u'length', u'of', u'strings', u',', u'treble', u'bridge', u',', u'duplex', u'string', u'length', u',', u'duplex', u'bridge', u'-LRB-', u'long', u'bar', u'perpendicular', u'to', u'strings', u'-RRB-', u',', u'hitchpins', u'.'], u'lemmas': [u'from', u'lower', u'leave', u'to', u'upper', u'right', u':', u'damper', u',', u'main', u'sound', u'length', u'of', u'string', u',', u'treble', u'bridge', u',', u'duplex', u'string', u'length', u',', u'duplex', u'bridge', u'-lrb-', u'long', u'bar', u'perpendicular', u'to', u'string', u'-rrb-', u',', u'hitchpin', u'.'], u'pos': [u'IN', u'JJR', u'VBD', u'TO', u'JJ', u'NN', u':', u'NNS', u',', u'JJ', u'VBG', u'NN', u'IN', u'NNS', u',', u'JJ', u'NN', u',', u'NN', u'NN', u'NN', u',', u'NN', u'NN', u'-LRB-', u'JJ', u'NN', u'JJ', u'TO', u'NNS', u'-RRB-', u',', u'NNS', u'.'], u'char_offsets': [[10209, 10213], [10214, 10219], [10220, 10224], [10225, 10227], [10228, 10233], [10234, 10239], [10239, 10240], [10241, 10248], [10248, 10249], [10250, 10254], [10255, 10263], [10264, 10270], [10271, 10273], [10274, 10281], [10281, 10282], [10283, 10289], [10290, 10296], [10296, 10297], [10298, 10304], [10305, 10311], [10312, 10318], [10318, 10319], [10320, 10326], [10327, 10333], [10334, 10335], [10335, 10339], [10340, 10343], [10344, 10357], [10358, 10360], [10361, 10368], [10368, 10369], [10369, 10370], [10371, 10380], [10380, 10381]]}) 
answer: set([u'upright', u'key', u'mechanism'])
candidate Sentence: (0.16198922693729401, {u'tokens': [u'The', u'extra', u'keys', u'are', u'the', u'same', u'as', u'the', u'other', u'keys', u'in', u'appearance', u'.'], u'lemmas': [u'the', u'extra', u'key', u'be', u'the', u'same', u'as', u'the', u'other', u'key', u'in', u'appearance', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[20932, 20935], [20936, 20941], [20942, 20946], [20947, 20950], [20951, 20954], [20955, 20959], [20960, 20962], [20963, 20966], [20967, 20972], [20973, 20977], [20978, 20980], [20981, 20991], [20991, 20992]]}) 
answer: set([u'upright', u'perpendicular', u'mechanism'])
candidate Sentence: (0.14615240693092346, {u'tokens': [u'The', u'entire', u'action', u'of', u'the', u'piano', u'is', u'thus', u'shifted', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'written', u'in', u'one', u'key', u'so', u'that', u'it', u'sounds', u'in', u'a', u'different', u'key', u'.'], u'lemmas': [u'the', u'entire', u'action', u'of', u'the', u'piano', u'be', u'thus', u'shift', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'write', u'in', u'one', u'key', u'so', u'that', u'it', u'sound', u'in', u'a', u'different', u'key', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'VBN', u'IN', u'CD', u'NN', u'IN', u'IN', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[24181, 24184], [24185, 24191], [24192, 24198], [24199, 24201], [24202, 24205], [24206, 24211], [24212, 24214], [24215, 24219], [24220, 24227], [24228, 24230], [24231, 24236], [24237, 24240], [24241, 24248], [24249, 24251], [24252, 24256], [24257, 24262], [24263, 24270], [24271, 24273], [24274, 24277], [24278, 24281], [24282, 24284], [24285, 24289], [24290, 24292], [24293, 24299], [24300, 24302], [24303, 24304], [24305, 24314], [24315, 24318], [24318, 24319]]}) 
answer: set([u'upright', u'perpendicular', u'mechanism'])
candidate Sentence: (0.13828641176223755, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[15958, 15965], [15966, 15972], [15973, 15977], [15978, 15987], [15988, 15992], [15993, 15999], [16000, 16003], [16004, 16008], [16009, 16016], [16017, 16020], [16021, 16030], [16031, 16037], [16038, 16039], [16039, 16046], [16047, 16052], [16052, 16053], [16054, 16060], [16060, 16061]]}) 
answer: set([u'key', u'perpendicular', u'mechanism'])

Is the mechanism in an upright piano perpendicular to its keys?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 22627 characters, 4419 tokens, 45.3 char/doc, 8.8 tok/doc RATES: 25.167 doc/sec, 222.4 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116ef7a28>.answer
_____________________________ test_yesno[param261] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7b48>, (<src.tfidf.TF_IDF object at 0x11485cc90>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7b48>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.20397725701332092, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31045, 31046], [31047, 31050], [31051, 31056], [31057, 31058], [31059, 31065], [31066, 31073], [31073, 31074]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.2022576630115509, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[11228, 11236], [11237, 11239], [11240, 11243], [11244, 11251], [11252, 11261], [11262, 11264], [11265, 11268], [11269, 11271], [11271, 11272], [11273, 11276], [11277, 11283], [11284, 11291], [11292, 11296], [11297, 11301], [11302, 11305], [11306, 11311], [11312, 11320], [11320, 11321], [11322, 11326], [11327, 11332], [11333, 11336], [11337, 11344], [11345, 11354], [11355, 11362], [11362, 11363]]}) 
answer: set([u'root'])
candidate Sentence: (0.17380179464817047, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31009, 31011], [31012, 31015], [31016, 31017], [31017, 31020], [31021, 31027], [31028, 31029], [31030, 31036], [31037, 31044], [31044, 31045]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.17353254556655884, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[12135, 12138], [12139, 12147], [12148, 12157], [12158, 12165], [12166, 12168], [12169, 12170], [12171, 12184], [12185, 12195], [12196, 12204], [12205, 12208], [12209, 12223], [12224, 12233], [12234, 12236], [12237, 12240], [12241, 12244], [12245, 12252], [12252, 12253], [12254, 12259], [12260, 12272], [12273, 12277], [12278, 12282], [12283, 12288], [12289, 12296], [12296, 12297]]}) 
answer: set([u'root'])
candidate Sentence: (0.15468744933605194, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[30916, 30918], [30919, 30922], [30923, 30928], [30929, 30933], [30933, 30934], [30935, 30938], [30939, 30946], [30947, 30958], [30959, 30961], [30962, 30965], [30966, 30974], [30975, 30976], [30976, 30980], [30981, 30984], [30985, 30990], [30991, 30994], [30995, 31001], [31002, 31006], [31006, 31007], [31007, 31008]]}) 
answer: set([u'latin', u'root'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7b48>.answer
_____________________________ test_yesno[param262] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7b90>, (<src.tfidf.TF_IDF object at 0x11485cc90>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese is derived from Latin.')
E                +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x116ef7b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.20397725701332092, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31045, 31046], [31047, 31050], [31051, 31056], [31057, 31058], [31059, 31065], [31066, 31073], [31073, 31074]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.2022576630115509, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[11228, 11236], [11237, 11239], [11240, 11243], [11244, 11251], [11252, 11261], [11262, 11264], [11265, 11268], [11269, 11271], [11271, 11272], [11273, 11276], [11277, 11283], [11284, 11291], [11292, 11296], [11297, 11301], [11302, 11305], [11306, 11311], [11312, 11320], [11320, 11321], [11322, 11326], [11327, 11332], [11333, 11336], [11337, 11344], [11345, 11354], [11355, 11362], [11362, 11363]]}) 
answer: set([u'root'])
candidate Sentence: (0.17380179464817047, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31009, 31011], [31012, 31015], [31016, 31017], [31017, 31020], [31021, 31027], [31028, 31029], [31030, 31036], [31037, 31044], [31044, 31045]]}) 
answer: set([u'latin', u'root'])
candidate Sentence: (0.17353254556655884, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[12135, 12138], [12139, 12147], [12148, 12157], [12158, 12165], [12166, 12168], [12169, 12170], [12171, 12184], [12185, 12195], [12196, 12204], [12205, 12208], [12209, 12223], [12224, 12233], [12234, 12236], [12237, 12240], [12241, 12244], [12245, 12252], [12252, 12253], [12254, 12259], [12260, 12272], [12273, 12277], [12278, 12282], [12283, 12288], [12289, 12296], [12296, 12297]]}) 
answer: set([u'root'])
candidate Sentence: (0.15468744933605194, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[30916, 30918], [30919, 30922], [30923, 30928], [30929, 30933], [30933, 30934], [30935, 30938], [30939, 30946], [30947, 30958], [30959, 30961], [30962, 30965], [30966, 30974], [30975, 30976], [30976, 30980], [30981, 30984], [30985, 30990], [30991, 30994], [30995, 31001], [31002, 31006], [31006, 31007], [31007, 31008]]}) 
answer: set([u'latin', u'root'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese is derived from Latin.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese is derived from Latin.')
 +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x116ef7b90>.answer
_____________________________ test_yesno[param263] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7bd8>, (<src.tfidf.TF_IDF object at 0x11485cc90>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7bd8>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.27095523476600647, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[23093, 23100], [23101, 23108], [23109, 23118], [23119, 23121], [23122, 23128], [23129, 23134], [23135, 23138], [23139, 23143], [23144, 23148], [23149, 23151], [23152, 23159], [23160, 23165], [23166, 23168], [23169, 23179], [23180, 23186], [23186, 23187], [23188, 23192], [23193, 23198], [23199, 23201], [23202, 23212], [23212, 23213], [23214, 23222], [23223, 23228], [23229, 23231], [23232, 23242], [23243, 23249], [23249, 23250], [23251, 23259], [23260, 23265], [23266, 23268], [23269, 23274], [23274, 23275], [23276, 23283], [23284, 23289], [23290, 23292], [23293, 23303], [23304, 23310], [23310, 23311], [23312, 23316], [23317, 23322], [23323, 23327], [23328, 23338], [23339, 23341], [23342, 23345], [23346, 23352], [23353, 23358], [23358, 23359]]}) 
answer: set([u'arabic', u'contain'])
candidate Sentence: (0.25721213221549988, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[17052, 17059], [17060, 17063], [17064, 17067], [17068, 17071], [17072, 17076], [17077, 17086], [17086, 17087], [17088, 17098], [17099, 17107], [17108, 17113], [17114, 17117], [17118, 17123], [17124, 17128], [17129, 17135], [17136, 17138], [17139, 17148], [17149, 17151], [17152, 17159], [17160, 17166], [17166, 17167]]}) 
answer: set([u'contain'])
candidate Sentence: (0.25070035457611084, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31045, 31046], [31047, 31050], [31051, 31056], [31057, 31058], [31059, 31065], [31066, 31073], [31073, 31074]]}) 
answer: set([u'arabic', u'word', u'contain'])
candidate Sentence: (0.24728778004646301, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mu\xe7a', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mu\xe7a', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[17609, 17612], [17613, 17617], [17618, 17628], [17629, 17635], [17636, 17638], [17639, 17643], [17644, 17647], [17648, 17654], [17655, 17659], [17660, 17662], [17663, 17669], [17670, 17674], [17675, 17683], [17684, 17685], [17685, 17689], [17690, 17697], [17697, 17698], [17698, 17699]]}) 
answer: set([u'contain'])
candidate Sentence: (0.21361289918422699, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31009, 31011], [31012, 31015], [31016, 31017], [31017, 31020], [31021, 31027], [31028, 31029], [31030, 31036], [31037, 31044], [31044, 31045]]}) 
answer: set([u'arabic', u'word', u'contain'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7bd8>.answer
_____________________________ test_yesno[param264] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7c20>, (<src.tfidf.TF_IDF object at 0x11485cc90>, set(['language', 'portuguese', 'portuguese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
E                +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x116ef7c20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.27095523476600647, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[23093, 23100], [23101, 23108], [23109, 23118], [23119, 23121], [23122, 23128], [23129, 23134], [23135, 23138], [23139, 23143], [23144, 23148], [23149, 23151], [23152, 23159], [23160, 23165], [23166, 23168], [23169, 23179], [23180, 23186], [23186, 23187], [23188, 23192], [23193, 23198], [23199, 23201], [23202, 23212], [23212, 23213], [23214, 23222], [23223, 23228], [23229, 23231], [23232, 23242], [23243, 23249], [23249, 23250], [23251, 23259], [23260, 23265], [23266, 23268], [23269, 23274], [23274, 23275], [23276, 23283], [23284, 23289], [23290, 23292], [23293, 23303], [23304, 23310], [23310, 23311], [23312, 23316], [23317, 23322], [23323, 23327], [23328, 23338], [23339, 23341], [23342, 23345], [23346, 23352], [23353, 23358], [23358, 23359]]}) 
answer: set([u'arabic', u'contain'])
candidate Sentence: (0.25721213221549988, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[17052, 17059], [17060, 17063], [17064, 17067], [17068, 17071], [17072, 17076], [17077, 17086], [17086, 17087], [17088, 17098], [17099, 17107], [17108, 17113], [17114, 17117], [17118, 17123], [17124, 17128], [17129, 17135], [17136, 17138], [17139, 17148], [17149, 17151], [17152, 17159], [17160, 17166], [17166, 17167]]}) 
answer: set([u'contain'])
candidate Sentence: (0.25070035457611084, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31045, 31046], [31047, 31050], [31051, 31056], [31057, 31058], [31059, 31065], [31066, 31073], [31073, 31074]]}) 
answer: set([u'arabic', u'word', u'contain'])
candidate Sentence: (0.24728778004646301, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mu\xe7a', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mu\xe7a', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[17609, 17612], [17613, 17617], [17618, 17628], [17629, 17635], [17636, 17638], [17639, 17643], [17644, 17647], [17648, 17654], [17655, 17659], [17660, 17662], [17663, 17669], [17670, 17674], [17675, 17683], [17684, 17685], [17685, 17689], [17690, 17697], [17697, 17698], [17698, 17699]]}) 
answer: set([u'contain'])
candidate Sentence: (0.21361289918422699, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'\xfaltima', u'not\xedcia', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[31009, 31011], [31012, 31015], [31016, 31017], [31017, 31020], [31021, 31027], [31028, 31029], [31030, 31036], [31037, 31044], [31044, 31045]]}) 
answer: set([u'arabic', u'word', u'contain'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese contains words from the Arabic language.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
 +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x116ef7c20>.answer
_____________________________ test_yesno[param269] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7d88>, (<src.tfidf.TF_IDF object at 0x1103c3fd0>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
E                +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x116ef7d88>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79888391494750977, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[21903, 21906], [21907, 21916], [21917, 21919], [21920, 21933], [21934, 21936], [21937, 21938], [21939, 21943], [21944, 21952], [21953, 21955], [21956, 21962], [21962, 21963]]}) 
answer: set([u'franciscio'])
candidate Sentence: (0.23340295255184174, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22604, 22611], [22612, 22615], [22616, 22620], [22621, 22623], [22624, 22630], [22631, 22633], [22634, 22637], [22638, 22647], [22648, 22650], [22651, 22664], [22665, 22669], [22669, 22670], [22671, 22675], [22676, 22682], [22683, 22688], [22689, 22697], [22698, 22702], [22703, 22710], [22711, 22715], [22716, 22719], [22720, 22722], [22723, 22729], [22730, 22736], [22737, 22739], [22740, 22744], [22745, 22751], [22752, 22755], [22756, 22760], [22761, 22764], [22765, 22769], [22770, 22774], [22774, 22775]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19876597821712494, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[27965, 27968], [27969, 27976], [27977, 27986], [27986, 27987], [27988, 27997], [27998, 27999], [28000, 28006], [28007, 28011], [28011, 28012], [28013, 28015], [28016, 28018], [28019, 28026], [28027, 28029], [28030, 28041], [28042, 28054], [28055, 28058], [28059, 28065], [28066, 28068], [28069, 28073], [28073, 28074]]}) 
answer: set([u'high', u'franciscio', u'standard'])
candidate Sentence: (0.15052807331085205, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13191, 13194], [13195, 13199], [13200, 13203], [13204, 13214], [13215, 13223], [13224, 13227], [13228, 13236], [13237, 13242], [13242, 13243], [13244, 13253], [13254, 13263], [13264, 13267], [13268, 13273], [13274, 13283], [13284, 13287], [13288, 13294], [13295, 13306], [13307, 13316], [13317, 13320], [13321, 13324], [13325, 13337], [13337, 13338]]}) 
answer: set([u'high', u'living', u'franciscio'])
candidate Sentence: (0.12307348847389221, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[14967, 14970], [14971, 14976], [14977, 14983], [14984, 14986], [14987, 14995], [14996, 14998], [14999, 15004], [15005, 15007], [15008, 15012], [15013, 15017], [15018, 15022], [15023, 15035], [15036, 15038], [15041, 15044], [15045, 15049], [15050, 15052], [15054, 15055]]}) 
answer: set([u'living', u'standard', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, San Francisco is characterized by a high standard of living.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
 +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x116ef7d88>.answer
_____________________________ test_yesno[param270] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7dd0>, (<src.tfidf.TF_IDF object at 0x1103c3fd0>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7dd0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.79888391494750977, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[21903, 21906], [21907, 21916], [21917, 21919], [21920, 21933], [21934, 21936], [21937, 21938], [21939, 21943], [21944, 21952], [21953, 21955], [21956, 21962], [21962, 21963]]}) 
answer: set([u'franciscio'])
candidate Sentence: (0.23340295255184174, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22604, 22611], [22612, 22615], [22616, 22620], [22621, 22623], [22624, 22630], [22631, 22633], [22634, 22637], [22638, 22647], [22648, 22650], [22651, 22664], [22665, 22669], [22669, 22670], [22671, 22675], [22676, 22682], [22683, 22688], [22689, 22697], [22698, 22702], [22703, 22710], [22711, 22715], [22716, 22719], [22720, 22722], [22723, 22729], [22730, 22736], [22737, 22739], [22740, 22744], [22745, 22751], [22752, 22755], [22756, 22760], [22761, 22764], [22765, 22769], [22770, 22774], [22774, 22775]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19876597821712494, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[27965, 27968], [27969, 27976], [27977, 27986], [27986, 27987], [27988, 27997], [27998, 27999], [28000, 28006], [28007, 28011], [28011, 28012], [28013, 28015], [28016, 28018], [28019, 28026], [28027, 28029], [28030, 28041], [28042, 28054], [28055, 28058], [28059, 28065], [28066, 28068], [28069, 28073], [28073, 28074]]}) 
answer: set([u'high', u'franciscio', u'standard'])
candidate Sentence: (0.15052807331085205, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13191, 13194], [13195, 13199], [13200, 13203], [13204, 13214], [13215, 13223], [13224, 13227], [13228, 13236], [13237, 13242], [13242, 13243], [13244, 13253], [13254, 13263], [13264, 13267], [13268, 13273], [13274, 13283], [13284, 13287], [13288, 13294], [13295, 13306], [13307, 13316], [13317, 13320], [13321, 13324], [13325, 13337], [13337, 13338]]}) 
answer: set([u'high', u'living', u'franciscio'])
candidate Sentence: (0.12307348847389221, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[14967, 14970], [14971, 14976], [14977, 14983], [14984, 14986], [14987, 14995], [14996, 14998], [14999, 15004], [15005, 15007], [15008, 15012], [15013, 15017], [15018, 15022], [15023, 15035], [15036, 15038], [15041, 15044], [15045, 15049], [15050, 15052], [15054, 15055]]}) 
answer: set([u'living', u'standard', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7dd0>.answer
_____________________________ test_yesno[param271] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7e18>, (<src.tfidf.TF_IDF object at 0x1103c3fd0>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
E                +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x116ef7e18>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45201346278190613, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40274, 40283], [40284, 40286], [40287, 40290], [40291, 40295], [40296, 40304], [40305, 40314], [40315, 40321], [40321, 40322], [40323, 40326], [40327, 40336], [40337, 40340], [40341, 40344], [40345, 40352], [40353, 40363], [40364, 40366], [40367, 40370], [40371, 40374], [40375, 40382], [40383, 40394], [40395, 40397], [40398, 40401], [40402, 40404], [40405, 40408], [40409, 40411], [40412, 40419], [40420, 40424], [40425, 40431], [40431, 40432], [40433, 40435], [40436, 40440], [40440, 40441], [40441, 40442]]}) 
answer: set([u'high'])
candidate Sentence: (0.16249661147594452, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[39802, 39805], [39806, 39813], [39814, 39824], [39825, 39827], [39828, 39835], [39836, 39845], [39846, 39848], [39849, 39852], [39853, 39862], [39863, 39865], [39866, 39873], [39874, 39876], [39877, 39881], [39882, 39884], [39885, 39888], [39889, 39894], [39895, 39897], [39898, 39908], [39908, 39909], [39911, 39921], [39921, 39922], [39923, 39926], [39927, 39931], [39931, 39933], [39934, 39944], [39945, 39947], [39948, 39956], [39957, 39966], [39967, 39969], [39970, 39974], [39975, 39979], [39980, 39984], [39985, 39987], [39988, 39992], [39993, 39995], [39996, 39999], [40000, 40005], [40005, 40006]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12860289216041565, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40446, 40449], [40450, 40459], [40460, 40464], [40465, 40468], [40469, 40472], [40473, 40480], [40481, 40491], [40492, 40494], [40495, 40503], [40504, 40514], [40515, 40517], [40518, 40521], [40522, 40530], [40531, 40537], [40537, 40538], [40539, 40543], [40544, 40547], [40548, 40551], [40552, 40556], [40557, 40563], [40564, 40565], [40566, 40572], [40573, 40586], [40587, 40591], [40592, 40595], [40596, 40601], [40602, 40614], [40615, 40619], [40619, 40620]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12630821764469147, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[36965, 36969], [36970, 36973], [36974, 36979], [36980, 36982], [36983, 36994], [36995, 36997], [36998, 37003], [37003, 37004], [37005, 37008], [37009, 37018], [37019, 37021], [37022, 37025], [37026, 37031], [37032, 37034], [37035, 37046], [37047, 37054], [37055, 37059], [37060, 37066], [37066, 37067], [37068, 37070], [37071, 37074], [37075, 37081], [37082, 37091], [37092, 37097], [37098, 37101], [37102, 37115], [37116, 37118], [37119, 37125], [37126, 37133], [37134, 37136], [37137, 37141], [37141, 37142]]}) 
answer: set([u'high', u'percentage', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.11949537694454193, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[21903, 21906], [21907, 21916], [21917, 21919], [21920, 21933], [21934, 21936], [21937, 21938], [21939, 21943], [21944, 21952], [21953, 21955], [21956, 21962], [21962, 21963]]}) 
answer: set([u'percentage', u'individual', u'lesbian', u'gay'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
 +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x116ef7e18>.answer
_____________________________ test_yesno[param272] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116ef7e60>, (<src.tfidf.TF_IDF object at 0x1103c3fd0>, set(['francisco', 'san', 'san_francisco'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7e60>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.45201346278190613, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40274, 40283], [40284, 40286], [40287, 40290], [40291, 40295], [40296, 40304], [40305, 40314], [40315, 40321], [40321, 40322], [40323, 40326], [40327, 40336], [40337, 40340], [40341, 40344], [40345, 40352], [40353, 40363], [40364, 40366], [40367, 40370], [40371, 40374], [40375, 40382], [40383, 40394], [40395, 40397], [40398, 40401], [40402, 40404], [40405, 40408], [40409, 40411], [40412, 40419], [40420, 40424], [40425, 40431], [40431, 40432], [40433, 40435], [40436, 40440], [40440, 40441], [40441, 40442]]}) 
answer: set([u'high'])
candidate Sentence: (0.16249661147594452, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[39802, 39805], [39806, 39813], [39814, 39824], [39825, 39827], [39828, 39835], [39836, 39845], [39846, 39848], [39849, 39852], [39853, 39862], [39863, 39865], [39866, 39873], [39874, 39876], [39877, 39881], [39882, 39884], [39885, 39888], [39889, 39894], [39895, 39897], [39898, 39908], [39908, 39909], [39911, 39921], [39921, 39922], [39923, 39926], [39927, 39931], [39931, 39933], [39934, 39944], [39945, 39947], [39948, 39956], [39957, 39966], [39967, 39969], [39970, 39974], [39975, 39979], [39980, 39984], [39985, 39987], [39988, 39992], [39993, 39995], [39996, 39999], [40000, 40005], [40005, 40006]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12860289216041565, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40446, 40449], [40450, 40459], [40460, 40464], [40465, 40468], [40469, 40472], [40473, 40480], [40481, 40491], [40492, 40494], [40495, 40503], [40504, 40514], [40515, 40517], [40518, 40521], [40522, 40530], [40531, 40537], [40537, 40538], [40539, 40543], [40544, 40547], [40548, 40551], [40552, 40556], [40557, 40563], [40564, 40565], [40566, 40572], [40573, 40586], [40587, 40591], [40592, 40595], [40596, 40601], [40602, 40614], [40615, 40619], [40619, 40620]]}) 
answer: set([u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12630821764469147, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[36965, 36969], [36970, 36973], [36974, 36979], [36980, 36982], [36983, 36994], [36995, 36997], [36998, 37003], [37003, 37004], [37005, 37008], [37009, 37018], [37019, 37021], [37022, 37025], [37026, 37031], [37032, 37034], [37035, 37046], [37047, 37054], [37055, 37059], [37060, 37066], [37066, 37067], [37068, 37070], [37071, 37074], [37075, 37081], [37082, 37091], [37092, 37097], [37098, 37101], [37102, 37115], [37116, 37118], [37119, 37125], [37126, 37133], [37134, 37136], [37137, 37141], [37141, 37142]]}) 
answer: set([u'high', u'percentage', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.11949537694454193, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[21903, 21906], [21907, 21916], [21917, 21919], [21920, 21933], [21934, 21936], [21937, 21938], [21939, 21943], [21944, 21952], [21953, 21955], [21956, 21962], [21962, 21963]]}) 
answer: set([u'percentage', u'individual', u'lesbian', u'gay'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 1366789 characters, 257172 tokens, 1952.6 char/doc, 367.4 tok/doc RATES: 19.135 doc/sec, 7030.0 tok/sec

Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116ef7e60>.answer
_____________________________ test_yesno[param280] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc0e0>, (<src.tfidf.TF_IDF object at 0x11129bc10>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
E                +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x116efc0e0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.40042352676391602, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[28520, 28529], [28530, 28533], [28534, 28537], [28538, 28539], [28540, 28542], [28543, 28548], [28549, 28557], [28557, 28558]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.17478674650192261, {u'tokens': [u'However', u',', u'elsewhere', u'this', u'does', u"n't", u'happen', u':', u'ndizi', u'``', u'banana', u"''", u'has', u'two', u'syllables', u',', u',', u'as', u'does', u'nenda', u'-LRB-', u'not', u'-RRB-', u'``', u'go', u"''", u'.'], u'lemmas': [u'however', u',', u'elsewhere', u'this', u'do', u'not', u'happen', u':', u'ndizus', u'``', u'banana', u"''", u'have', u'two', u'syllable', u',', u',', u'as', u'do', u'nenda', u'-lrb-', u'not', u'-rrb-', u'``', u'go', u"''", u'.'], u'pos': [u'RB', u',', u'RB', u'DT', u'VBZ', u'RB', u'VB', u':', u'NNS', u'``', u'NN', u"''", u'VBZ', u'CD', u'NNS', u',', u',', u'IN', u'VBZ', u'NN', u'-LRB-', u'RB', u'-RRB-', u'``', u'VB', u"''", u'.'], u'char_offsets': [[6330, 6337], [6337, 6338], [6339, 6348], [6349, 6353], [6354, 6358], [6358, 6361], [6362, 6368], [6368, 6369], [6370, 6375], [6376, 6377], [6377, 6383], [6383, 6384], [6385, 6388], [6389, 6392], [6393, 6402], [6402, 6403], [6405, 6406], [6407, 6409], [6410, 6414], [6415, 6420], [6423, 6424], [6424, 6427], [6429, 6430], [6431, 6432], [6432, 6434], [6434, 6435], [6435, 6436]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.16710565984249115, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8809, 8813], [8814, 8817], [8818, 8822], [8823, 8829], [8830, 8834], [8835, 8838], [8839, 8843], [8844, 8849], [8850, 8855], [8856, 8861], [8862, 8864], [8865, 8872], [8873, 8875], [8875, 8876], [8877, 8880], [8881, 8889], [8890, 8892], [8892, 8893]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.1518079936504364, {u'tokens': [u'The', u'British', u'did', u'not', u'do', u'so', u'in', u'neighbouring', u'Kenya', u',', u'even', u'though', u'they', u'made', u'moves', u'in', u'that', u'direction', u'.'], u'lemmas': [u'the', u'British', u'do', u'not', u'do', u'so', u'in', u'neighbour', u'Kenya', u',', u'even', u'though', u'they', u'make', u'move', u'in', u'that', u'direction', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'RB', u'VB', u'RB', u'IN', u'VBG', u'NNP', u',', u'RB', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[25374, 25377], [25378, 25385], [25386, 25389], [25390, 25393], [25394, 25396], [25397, 25399], [25400, 25402], [25403, 25415], [25416, 25421], [25421, 25422], [25423, 25427], [25428, 25434], [25435, 25439], [25440, 25444], [25445, 25450], [25451, 25453], [25454, 25458], [25459, 25468], [25468, 25469]]}) 
answer: set([u'dipthong'])
candidate Sentence: (0.13234087824821472, {u'tokens': [u'This', u'is', u'often', u'called', u'the', u'`', u'tree', u"'", u'class', u',', u'because', u'mti', u',', u'miti', u'``', u'tree', u'-LRB-', u's', u'-RRB-', u"''", u'is', u'the', u'prototypical', u'example', u',', u'but', u'that', u'does', u"n't", u'do', u'it', u'justice', u'.'], u'lemmas': [u'this', u'be', u'often', u'call', u'the', u'`', u'tree', u"'", u'class', u',', u'because', u'mtus', u',', u'mitus', u'``', u'tree', u'-lrb-', u's', u'-rrb-', u"''", u'be', u'the', u'prototypical', u'example', u',', u'but', u'that', u'do', u'not', u'do', u'it', u'justice', u'.'], u'pos': [u'DT', u'VBZ', u'RB', u'VBN', u'DT', u'``', u'NN', u"''", u'NN', u',', u'IN', u'NNS', u',', u'NNS', u'``', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'VBZ', u'DT', u'JJ', u'NN', u',', u'CC', u'IN', u'VBZ', u'RB', u'VB', u'PRP', u'NN', u'.'], u'char_offsets': [[11980, 11984], [11985, 11987], [11988, 11993], [11994, 12000], [12001, 12004], [12005, 12006], [12006, 12010], [12010, 12011], [12012, 12017], [12017, 12018], [12019, 12026], [12027, 12030], [12030, 12031], [12032, 12036], [12037, 12038], [12038, 12042], [12042, 12043], [12043, 12044], [12044, 12045], [12045, 12046], [12047, 12049], [12050, 12053], [12054, 12066], [12067, 12074], [12074, 12075], [12076, 12079], [12080, 12084], [12085, 12089], [12089, 12092], [12093, 12095], [12096, 12098], [12099, 12106], [12106, 12107]]}) 
answer: set([u'dipthong'])

Does Swahili have dipthongs?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili has diphthongs. (Typo)
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
 +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x116efc0e0>.answer
_____________________________ test_yesno[param281] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc170>, (<src.tfidf.TF_IDF object at 0x11129bc10>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili is a Bantu language.')
E                +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x116efc170>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43797633051872253, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[28520, 28529], [28530, 28533], [28534, 28537], [28538, 28539], [28540, 28542], [28543, 28548], [28549, 28557], [28557, 28558]]}) 
answer: set([u'bantu'])
candidate Sentence: (0.2162090539932251, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[637, 644], [645, 647], [648, 649], [650, 655], [656, 664], [665, 669], [670, 676], [677, 679], [680, 681], [682, 688], [689, 697], [698, 700], [701, 708], [709, 715], [716, 729], [730, 740], [741, 746], [747, 749], [750, 753], [754, 758], [759, 766], [767, 772], [772, 773]]}) 
answer: set([])
candidate Sentence: (0.1706826388835907, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5195, 5198], [5199, 5204], [5205, 5214], [5215, 5218], [5219, 5220], [5221, 5225], [5226, 5234], [5235, 5245], [5246, 5248], [5249, 5252], [5253, 5260], [5261, 5263], [5264, 5269], [5269, 5270]]}) 
answer: set([])
candidate Sentence: (0.16643670201301575, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8367, 8371], [8372, 8377], [8378, 8382], [8383, 8391], [8392, 8401], [8402, 8403], [8403, 8407], [8408, 8410], [8411, 8414], [8415, 8419], [8420, 8422], [8423, 8426], [8427, 8435], [8436, 8445], [8445, 8446], [8446, 8447], [8448, 8451], [8452, 8463], [8463, 8464], [8465, 8470], [8471, 8474], [8475, 8479], [8480, 8481], [8482, 8490], [8491, 8496], [8497, 8499], [8500, 8507], [8508, 8514], [8515, 8517], [8518, 8523], [8523, 8524]]}) 
answer: set([])
candidate Sentence: (0.16348877549171448, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7182, 7184], [7185, 7191], [7192, 7196], [7197, 7200], [7201, 7206], [7207, 7216], [7216, 7217], [7218, 7225], [7226, 7233], [7234, 7242], [7243, 7248], [7249, 7253], [7254, 7255], [7256, 7262], [7263, 7265], [7266, 7273], [7273, 7274]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili is a Bantu language.
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili is a Bantu language.')
 +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x116efc170>.answer
_____________________________ test_yesno[param282] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc200>, (<src.tfidf.TF_IDF object at 0x11129bc10>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116efc200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.43797633051872253, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[28520, 28529], [28530, 28533], [28534, 28537], [28538, 28539], [28540, 28542], [28543, 28548], [28549, 28557], [28557, 28558]]}) 
answer: set([u'bantu'])
candidate Sentence: (0.2162090539932251, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[637, 644], [645, 647], [648, 649], [650, 655], [656, 664], [665, 669], [670, 676], [677, 679], [680, 681], [682, 688], [689, 697], [698, 700], [701, 708], [709, 715], [716, 729], [730, 740], [741, 746], [747, 749], [750, 753], [754, 758], [759, 766], [767, 772], [772, 773]]}) 
answer: set([])
candidate Sentence: (0.1706826388835907, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5195, 5198], [5199, 5204], [5205, 5214], [5215, 5218], [5219, 5220], [5221, 5225], [5226, 5234], [5235, 5245], [5246, 5248], [5249, 5252], [5253, 5260], [5261, 5263], [5264, 5269], [5269, 5270]]}) 
answer: set([])
candidate Sentence: (0.16643670201301575, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8367, 8371], [8372, 8377], [8378, 8382], [8383, 8391], [8392, 8401], [8402, 8403], [8403, 8407], [8408, 8410], [8411, 8414], [8415, 8419], [8420, 8422], [8423, 8426], [8427, 8435], [8436, 8445], [8445, 8446], [8446, 8447], [8448, 8451], [8452, 8463], [8463, 8464], [8465, 8470], [8471, 8474], [8475, 8479], [8480, 8481], [8482, 8490], [8491, 8496], [8497, 8499], [8500, 8507], [8508, 8514], [8515, 8517], [8518, 8523], [8523, 8524]]}) 
answer: set([])
candidate Sentence: (0.16348877549171448, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7182, 7184], [7185, 7191], [7192, 7196], [7197, 7200], [7201, 7206], [7207, 7216], [7216, 7217], [7218, 7225], [7226, 7233], [7234, 7242], [7243, 7248], [7249, 7253], [7254, 7255], [7256, 7262], [7263, 7265], [7266, 7273], [7273, 7274]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116efc200>.answer
_____________________________ test_yesno[param283] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc290>, (<src.tfidf.TF_IDF object at 0x11129bc10>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
E                +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x116efc290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39792376756668091, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implemented', u'--', u'and', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implement', u'--', u'and', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'CD', u':', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'VBN', u':', u'CC', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1240, 1243], [1244, 1255], [1256, 1262], [1263, 1265], [1266, 1272], [1273, 1277], [1278, 1285], [1286, 1287], [1288, 1296], [1297, 1304], [1305, 1307], [1308, 1315], [1316, 1323], [1324, 1326], [1327, 1331], [1331, 1332], [1332, 1340], [1341, 1345], [1346, 1353], [1354, 1357], [1358, 1361], [1362, 1366], [1367, 1371], [1372, 1383], [1383, 1384], [1384, 1387], [1388, 1396], [1397, 1399], [1400, 1402], [1403, 1411], [1412, 1420], [1421, 1423], [1424, 1428], [1429, 1431], [1432, 1443], [1444, 1447], [1448, 1451], [1452, 1456], [1457, 1464], [1465, 1475], [1475, 1476]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.22271235287189484, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[28520, 28529], [28530, 28533], [28534, 28537], [28538, 28539], [28540, 28542], [28543, 28548], [28549, 28557], [28557, 28558]]}) 
answer: set([u'school', u'make', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.19400520622730255, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[27417, 27419], [27420, 27426], [27426, 27427], [27428, 27431], [27432, 27439], [27440, 27449], [27450, 27452], [27452, 27455], [27456, 27461], [27462, 27469], [27469, 27470], [27471, 27474], [27475, 27477], [27478, 27480], [27481, 27483], [27484, 27490], [27491, 27494], [27495, 27500], [27501, 27504], [27505, 27507], [27508, 27515], [27516, 27522], [27523, 27532], [27533, 27535], [27536, 27539], [27540, 27547], [27547, 27548], [27549, 27552], [27553, 27555], [27556, 27565], [27566, 27571], [27572, 27583], [27584, 27586], [27587, 27594], [27595, 27605], [27606, 27608], [27609, 27620], [27621, 27624], [27625, 27628], [27629, 27633], [27634, 27641], [27642, 27651], [27651, 27652]]}) 
answer: set([u'swahilus', u'make', u'subject', u'require', u'primary'])
candidate Sentence: (0.16621012985706329, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8809, 8813], [8814, 8817], [8818, 8822], [8823, 8829], [8830, 8834], [8835, 8838], [8839, 8843], [8844, 8849], [8850, 8855], [8856, 8861], [8862, 8864], [8865, 8872], [8873, 8875], [8875, 8876], [8877, 8880], [8881, 8889], [8890, 8892], [8892, 8893]]}) 
answer: set([u'school', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.16102960705757141, {u'tokens': [u'The', u'British', u'did', u'not', u'do', u'so', u'in', u'neighbouring', u'Kenya', u',', u'even', u'though', u'they', u'made', u'moves', u'in', u'that', u'direction', u'.'], u'lemmas': [u'the', u'British', u'do', u'not', u'do', u'so', u'in', u'neighbour', u'Kenya', u',', u'even', u'though', u'they', u'make', u'move', u'in', u'that', u'direction', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'RB', u'VB', u'RB', u'IN', u'VBG', u'NNP', u',', u'RB', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[25374, 25377], [25378, 25385], [25386, 25389], [25390, 25393], [25394, 25396], [25397, 25399], [25400, 25402], [25403, 25415], [25416, 25421], [25421, 25422], [25423, 25427], [25428, 25434], [25435, 25439], [25440, 25444], [25445, 25450], [25451, 25453], [25454, 25458], [25459, 25468], [25468, 25469]]}) 
answer: set([u'school', u'swahilus', u'primary', u'uganda', u'require', u'subject'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Uganda made Swahili a required subject in primary schools.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
 +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x116efc290>.answer
_____________________________ test_yesno[param284] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc320>, (<src.tfidf.TF_IDF object at 0x11129bc10>, set(['language', 'swahili', 'swahili_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116efc320>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.39792376756668091, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implemented', u'--', u'and', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992', u'--', u'although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implement', u'--', u'and', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'CD', u':', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'VBN', u':', u'CC', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1240, 1243], [1244, 1255], [1256, 1262], [1263, 1265], [1266, 1272], [1273, 1277], [1278, 1285], [1286, 1287], [1288, 1296], [1297, 1304], [1305, 1307], [1308, 1315], [1316, 1323], [1324, 1326], [1327, 1331], [1331, 1332], [1332, 1340], [1341, 1345], [1346, 1353], [1354, 1357], [1358, 1361], [1362, 1366], [1367, 1371], [1372, 1383], [1383, 1384], [1384, 1387], [1388, 1396], [1397, 1399], [1400, 1402], [1403, 1411], [1412, 1420], [1421, 1423], [1424, 1428], [1429, 1431], [1432, 1443], [1444, 1447], [1448, 1451], [1452, 1456], [1457, 1464], [1465, 1475], [1475, 1476]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.22271235287189484, {u'tokens': [u'Education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'--', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u':', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[28520, 28529], [28530, 28533], [28534, 28537], [28538, 28539], [28540, 28542], [28543, 28548], [28549, 28557], [28557, 28558]]}) 
answer: set([u'school', u'make', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.19400520622730255, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[27417, 27419], [27420, 27426], [27426, 27427], [27428, 27431], [27432, 27439], [27440, 27449], [27450, 27452], [27452, 27455], [27456, 27461], [27462, 27469], [27469, 27470], [27471, 27474], [27475, 27477], [27478, 27480], [27481, 27483], [27484, 27490], [27491, 27494], [27495, 27500], [27501, 27504], [27505, 27507], [27508, 27515], [27516, 27522], [27523, 27532], [27533, 27535], [27536, 27539], [27540, 27547], [27547, 27548], [27549, 27552], [27553, 27555], [27556, 27565], [27566, 27571], [27572, 27583], [27584, 27586], [27587, 27594], [27595, 27605], [27606, 27608], [27609, 27620], [27621, 27624], [27625, 27628], [27629, 27633], [27634, 27641], [27642, 27651], [27651, 27652]]}) 
answer: set([u'swahilus', u'make', u'subject', u'require', u'primary'])
candidate Sentence: (0.16621012985706329, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8809, 8813], [8814, 8817], [8818, 8822], [8823, 8829], [8830, 8834], [8835, 8838], [8839, 8843], [8844, 8849], [8850, 8855], [8856, 8861], [8862, 8864], [8865, 8872], [8873, 8875], [8875, 8876], [8877, 8880], [8881, 8889], [8890, 8892], [8892, 8893]]}) 
answer: set([u'school', u'require', u'primary', u'uganda', u'swahilus', u'subject'])
candidate Sentence: (0.16102960705757141, {u'tokens': [u'The', u'British', u'did', u'not', u'do', u'so', u'in', u'neighbouring', u'Kenya', u',', u'even', u'though', u'they', u'made', u'moves', u'in', u'that', u'direction', u'.'], u'lemmas': [u'the', u'British', u'do', u'not', u'do', u'so', u'in', u'neighbour', u'Kenya', u',', u'even', u'though', u'they', u'make', u'move', u'in', u'that', u'direction', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'RB', u'VB', u'RB', u'IN', u'VBG', u'NNP', u',', u'RB', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[25374, 25377], [25378, 25385], [25386, 25389], [25390, 25393], [25394, 25396], [25397, 25399], [25400, 25402], [25403, 25415], [25416, 25421], [25421, 25422], [25423, 25427], [25428, 25434], [25435, 25439], [25440, 25444], [25445, 25450], [25451, 25453], [25454, 25458], [25459, 25468], [25468, 25469]]}) 
answer: set([u'school', u'swahilus', u'primary', u'uganda', u'require', u'subject'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116efc320>.answer
_____________________________ test_yesno[param285] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc3b0>, (<src.tfidf.TF_IDF object at 0x115c7b290>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116efc3b0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42175495624542236, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[27983, 27989], [27989, 27990]]}) 
answer: set([u'norse', u'old', u'descendant'])
candidate Sentence: (0.35037073493003845, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[589, 594], [595, 599], [600, 603], [604, 609], [610, 615], [616, 624], [625, 634], [634, 635], [636, 643], [644, 646], [647, 648], [649, 659], [660, 662], [663, 666], [667, 672], [672, 673], [674, 677], [678, 684], [685, 693], [694, 696], [697, 700], [701, 709], [710, 717], [718, 724], [725, 727], [728, 739], [740, 746], [747, 750], [751, 757], [758, 761], [761, 762]]}) 
answer: set([])
candidate Sentence: (0.32295453548431396, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4221, 4225], [4226, 4233], [4234, 4236], [4237, 4242], [4243, 4252], [4253, 4255], [4256, 4258], [4259, 4262], [4263, 4266], [4267, 4274], [4274, 4275], [4276, 4279], [4280, 4285], [4286, 4291], [4292, 4294], [4295, 4302], [4303, 4307], [4308, 4311], [4312, 4316], [4317, 4322], [4323, 4324], [4324, 4330], [4331, 4334], [4335, 4342], [4342, 4343], [4344, 4347], [4348, 4351], [4352, 4356], [4357, 4362], [4363, 4364], [4364, 4370], [4371, 4374], [4375, 4382], [4382, 4383], [4383, 4384]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.22212690114974976, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4984, 4988], [4989, 4997], [4998, 5003], [5004, 5006], [5007, 5014], [5015, 5018], [5019, 5026], [5027, 5031], [5032, 5035], [5036, 5039], [5040, 5046], [5047, 5049], [5050, 5053], [5054, 5056], [5057, 5068], [5068, 5069], [5070, 5075], [5076, 5084], [5085, 5087], [5088, 5091], [5092, 5102], [5103, 5105], [5106, 5109], [5110, 5117], [5118, 5126], [5126, 5127], [5128, 5131], [5132, 5136], [5137, 5142], [5143, 5144], [5144, 5150], [5151, 5154], [5155, 5162], [5162, 5163], [5164, 5167], [5168, 5171], [5172, 5176], [5177, 5182], [5183, 5184], [5184, 5191], [5192, 5195], [5196, 5202], [5202, 5203], [5203, 5204]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.16664943099021912, {u'tokens': [u'In', u'the', u'8th', u'century', u',', u'the', u'common', u'Germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'had', u'undergone', u'some', u'changes', u'and', u'evolved', u'into', u'Old', u'Norse', u'.'], u'lemmas': [u'in', u'the', u'8th', u'century', u',', u'the', u'common', u'germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'have', u'undergo', u'some', u'change', u'and', u'evolve', u'into', u'Old', u'Norse', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'VBD', u'VBN', u'DT', u'NNS', u'CC', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[4851, 4853], [4854, 4857], [4858, 4861], [4862, 4869], [4869, 4870], [4871, 4874], [4875, 4881], [4882, 4890], [4891, 4899], [4900, 4902], [4903, 4914], [4914, 4915], [4916, 4927], [4927, 4928], [4929, 4932], [4933, 4942], [4943, 4947], [4948, 4955], [4956, 4959], [4960, 4967], [4968, 4972], [4973, 4976], [4977, 4982], [4982, 4983]]}) 
answer: set([u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116efc3b0>.answer
_____________________________ test_yesno[param286] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc440>, (<src.tfidf.TF_IDF object at 0x115c7b290>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116efc440>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.42175495624542236, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[27983, 27989], [27989, 27990]]}) 
answer: set([u'norse', u'old', u'descendant'])
candidate Sentence: (0.35037073493003845, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[589, 594], [595, 599], [600, 603], [604, 609], [610, 615], [616, 624], [625, 634], [634, 635], [636, 643], [644, 646], [647, 648], [649, 659], [660, 662], [663, 666], [667, 672], [672, 673], [674, 677], [678, 684], [685, 693], [694, 696], [697, 700], [701, 709], [710, 717], [718, 724], [725, 727], [728, 739], [740, 746], [747, 750], [751, 757], [758, 761], [761, 762]]}) 
answer: set([])
candidate Sentence: (0.32295453548431396, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4221, 4225], [4226, 4233], [4234, 4236], [4237, 4242], [4243, 4252], [4253, 4255], [4256, 4258], [4259, 4262], [4263, 4266], [4267, 4274], [4274, 4275], [4276, 4279], [4280, 4285], [4286, 4291], [4292, 4294], [4295, 4302], [4303, 4307], [4308, 4311], [4312, 4316], [4317, 4322], [4323, 4324], [4324, 4330], [4331, 4334], [4335, 4342], [4342, 4343], [4344, 4347], [4348, 4351], [4352, 4356], [4357, 4362], [4363, 4364], [4364, 4370], [4371, 4374], [4375, 4382], [4382, 4383], [4383, 4384]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.22212690114974976, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4984, 4988], [4989, 4997], [4998, 5003], [5004, 5006], [5007, 5014], [5015, 5018], [5019, 5026], [5027, 5031], [5032, 5035], [5036, 5039], [5040, 5046], [5047, 5049], [5050, 5053], [5054, 5056], [5057, 5068], [5068, 5069], [5070, 5075], [5076, 5084], [5085, 5087], [5088, 5091], [5092, 5102], [5103, 5105], [5106, 5109], [5110, 5117], [5118, 5126], [5126, 5127], [5128, 5131], [5132, 5136], [5137, 5142], [5143, 5144], [5144, 5150], [5151, 5154], [5155, 5162], [5162, 5163], [5164, 5167], [5168, 5171], [5172, 5176], [5177, 5182], [5183, 5184], [5184, 5191], [5192, 5195], [5196, 5202], [5202, 5203], [5203, 5204]]}) 
answer: set([u'descendant'])
candidate Sentence: (0.16664943099021912, {u'tokens': [u'In', u'the', u'8th', u'century', u',', u'the', u'common', u'Germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'had', u'undergone', u'some', u'changes', u'and', u'evolved', u'into', u'Old', u'Norse', u'.'], u'lemmas': [u'in', u'the', u'8th', u'century', u',', u'the', u'common', u'germanic', u'language', u'of', u'Scandinavia', u',', u'Proto-Norse', u',', u'have', u'undergo', u'some', u'change', u'and', u'evolve', u'into', u'Old', u'Norse', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u',', u'VBD', u'VBN', u'DT', u'NNS', u'CC', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[4851, 4853], [4854, 4857], [4858, 4861], [4862, 4869], [4869, 4870], [4871, 4874], [4875, 4881], [4882, 4890], [4891, 4899], [4900, 4902], [4903, 4914], [4914, 4915], [4916, 4927], [4927, 4928], [4929, 4932], [4933, 4942], [4943, 4947], [4948, 4955], [4956, 4959], [4960, 4967], [4968, 4972], [4973, 4976], [4977, 4982], [4982, 4983]]}) 
answer: set([u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116efc440>.answer
_____________________________ test_yesno[param287] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc4d0>, (<src.tfidf.TF_IDF object at 0x115c7b290>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x116efc4d0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.75207948684692383, {u'tokens': [u'Perfect', u'and', u'present', u'participles', u'as', u'adjectival', u'verbs', u'are', u'very', u'common', u':', u'In', u'contrast', u'to', u'English', u'and', u'many', u'other', u'languages', u',', u'Swedish', u'does', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tenses', u'.'], u'lemmas': [u'Perfect', u'and', u'present', u'participle', u'as', u'adjectival', u'verb', u'be', u'very', u'common', u':', u'in', u'contrast', u'to', u'English', u'and', u'many', u'other', u'language', u',', u'Swedish', u'do', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tense', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u':', u'IN', u'NN', u'TO', u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'JJ', u'JJ', u'CC', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[36521, 36528], [36529, 36532], [36533, 36540], [36541, 36552], [36553, 36555], [36556, 36566], [36567, 36572], [36573, 36576], [36577, 36581], [36582, 36588], [36588, 36589], [36590, 36592], [36593, 36601], [36602, 36604], [36605, 36612], [36613, 36616], [36617, 36621], [36622, 36627], [36628, 36637], [36637, 36638], [36639, 36646], [36647, 36651], [36652, 36655], [36656, 36659], [36660, 36663], [36664, 36671], [36672, 36682], [36683, 36685], [36686, 36690], [36691, 36694], [36695, 36702], [36703, 36710], [36711, 36714], [36715, 36719], [36720, 36727], [36728, 36734], [36734, 36735]]}) 
answer: set([])
candidate Sentence: (0.37280875444412231, {u'tokens': [u'Rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-LRB-', u'``', u'have', u"''", u'-RRB-', u',', u'hade', u'-LRB-', u'``', u'had', u"''", u'-RRB-', u'is', u'followed', u'by', u'a', u'special', u'form', u',', u'called', u'supine', u',', u'used', u'solely', u'for', u'this', u'purpose', u'-LRB-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-RRB-', u':', u':', u'Perfect', u'participle', u':', u'm\xe5lad', u';', u'``', u'painted', u"''", u'-', u'supine', u'm\xe5lat', u',', u'present', u'perfect', u'har', u'm\xe5lat', u';', u'``', u'have', u'painted', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fried', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fried', u"''", u'The', u'Past', u'participle', u'is', u'used', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'lemmas': [u'rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u',', u'hade', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u'be', u'follow', u'by', u'a', u'special', u'form', u',', u'call', u'supine', u',', u'use', u'solely', u'for', u'this', u'purpose', u'-lrb-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-rrb-', u':', u':', u'Perfect', u'participle', u':', u'm\xe5lad', u';', u'``', u'paint', u"''", u'-', u'supine', u'm\xe5lat', u',', u'present', u'perfect', u'har', u'm\xe5lat', u';', u'``', u'have', u'paint', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fry', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fry', u"''", u'the', u'past', u'participle', u'be', u'use', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'VB', u'NN', u'-LRB-', u'``', u'VBP', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'``', u'VBD', u"''", u'-RRB-', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'VBN', u'NN', u',', u'VBN', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'RB', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'-RRB-', u':', u':', u'NNP', u'NN', u':', u'NN', u':', u'``', u'VBN', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u':', u'NNP', u'NN', u':', u'NN', u',', u'``', u'VBD', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'NN', u'NN', u',', u'RB', u'.'], u'char_offsets': [[36736, 36742], [36742, 36743], [36744, 36747], [36748, 36757], [36758, 36762], [36763, 36766], [36767, 36768], [36768, 36769], [36769, 36773], [36773, 36774], [36774, 36775], [36775, 36776], [36777, 36781], [36782, 36783], [36783, 36784], [36784, 36787], [36787, 36788], [36788, 36789], [36790, 36792], [36793, 36801], [36802, 36804], [36805, 36806], [36807, 36814], [36815, 36819], [36819, 36820], [36821, 36827], [36828, 36834], [36834, 36835], [36836, 36840], [36841, 36847], [36848, 36851], [36852, 36856], [36857, 36864], [36865, 36866], [36866, 36874], [36875, 36884], [36885, 36894], [36895, 36897], [36898, 36901], [36902, 36909], [36910, 36920], [36920, 36921], [36921, 36922], [36923, 36924], [36924, 36931], [36932, 36942], [36942, 36943], [36944, 36949], [36949, 36950], [36951, 36952], [36952, 36959], [36959, 36960], [36961, 36962], [36963, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36996], [36997, 37002], [37002, 37003], [37004, 37005], [37005, 37009], [37010, 37017], [37017, 37018], [37019, 37020], [37020, 37027], [37028, 37038], [37038, 37039], [37040, 37045], [37045, 37046], [37047, 37048], [37048, 37053], [37053, 37054], [37055, 37056], [37057, 37063], [37064, 37069], [37069, 37070], [37071, 37078], [37079, 37086], [37087, 37090], [37091, 37096], [37096, 37097], [37098, 37099], [37099, 37103], [37104, 37109], [37109, 37110], [37111, 37114], [37115, 37119], [37120, 37130], [37131, 37133], [37134, 37138], [37139, 37141], [37142, 37147], [37148, 37151], [37152, 37160], [37161, 37168], [37169, 37174], [37174, 37175], [37176, 37183], [37183, 37184]]}) 
answer: set([u'tense'])
candidate Sentence: (0.26599803566932678, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[27983, 27989], [27989, 27990]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])
candidate Sentence: (0.15978507697582245, {u'tokens': [u'One', u'group', u'of', u'verbs', u'-LRB-', u'the', u'ones', u'ending', u'in', u'-', u'er', u'in', u'present', u'tense', u'-RRB-', u'have', u'a', u'special', u'imperative', u'form', u'-LRB-', u'generally', u'the', u'verb', u'stem', u'-RRB-', u',', u'but', u'with', u'most', u'verbs', u'the', u'imperative', u'is', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'lemmas': [u'one', u'group', u'of', u'verb', u'-lrb-', u'the', u'one', u'end', u'in', u'-', u'er', u'in', u'present', u'tense', u'-rrb-', u'have', u'a', u'special', u'imperative', u'form', u'-lrb-', u'generally', u'the', u'verb', u'stem', u'-rrb-', u',', u'but', u'with', u'most', u'verb', u'the', u'imperative', u'be', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'pos': [u'CD', u'NN', u'IN', u'NNS', u'-LRB-', u'DT', u'NNS', u'VBG', u'IN', u':', u'NN', u'IN', u'JJ', u'JJ', u'-RRB-', u'VBP', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'DT', u'VB', u'NN', u'-RRB-', u',', u'CC', u'IN', u'JJS', u'NNS', u'DT', u'JJ', u'VBZ', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[36330, 36333], [36334, 36339], [36340, 36342], [36343, 36348], [36349, 36350], [36350, 36353], [36354, 36358], [36359, 36365], [36366, 36368], [36369, 36370], [36370, 36372], [36373, 36375], [36376, 36383], [36384, 36389], [36389, 36390], [36391, 36395], [36396, 36397], [36398, 36405], [36406, 36416], [36417, 36421], [36422, 36423], [36423, 36432], [36433, 36436], [36437, 36441], [36442, 36446], [36446, 36447], [36447, 36448], [36449, 36452], [36453, 36457], [36458, 36462], [36463, 36468], [36469, 36472], [36473, 36483], [36484, 36486], [36487, 36496], [36497, 36499], [36500, 36503], [36504, 36514], [36515, 36519], [36519, 36520]]}) 
answer: set([u'perfect', u'use', u'participle'])
candidate Sentence: (0.12599743902683258, {u'tokens': [u'The', u'Swedish', u'Language', u'Council', u'-LRB-', u'Spr\xe5kr\xe5det', u'-RRB-', u'is', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'does', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acad\xe9mie', u'fran\xe7aise', u'does', u'for', u'French', u'.'], u'lemmas': [u'the', u'Swedish', u'Language', u'Council', u'-lrb-', u'Spr\xe5kr\xe5det', u'-rrb-', u'be', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'do', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'acad\xe9mie', u'fran\xe7aise', u'do', u'for', u'French', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'IN', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'IN', u'NNP', u'.'], u'char_offsets': [[20719, 20722], [20723, 20730], [20731, 20739], [20740, 20747], [20748, 20749], [20749, 20759], [20759, 20760], [20761, 20763], [20764, 20767], [20768, 20776], [20777, 20786], [20787, 20789], [20790, 20797], [20797, 20798], [20799, 20802], [20803, 20807], [20808, 20811], [20812, 20819], [20820, 20822], [20823, 20830], [20831, 20838], [20839, 20841], [20842, 20845], [20846, 20854], [20854, 20855], [20856, 20858], [20859, 20862], [20863, 20871], [20872, 20875], [20876, 20884], [20885, 20894], [20895, 20899], [20900, 20903], [20904, 20910], [20910, 20911]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])

Does Swedish use the perfect participle to form the present perfect tense?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x116efc4d0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param288] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc560>, (<src.tfidf.TF_IDF object at 0x115c7b290>, set(['language', 'swedish', 'swedish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116efc560>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.75207948684692383, {u'tokens': [u'Perfect', u'and', u'present', u'participles', u'as', u'adjectival', u'verbs', u'are', u'very', u'common', u':', u'In', u'contrast', u'to', u'English', u'and', u'many', u'other', u'languages', u',', u'Swedish', u'does', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tenses', u'.'], u'lemmas': [u'Perfect', u'and', u'present', u'participle', u'as', u'adjectival', u'verb', u'be', u'very', u'common', u':', u'in', u'contrast', u'to', u'English', u'and', u'many', u'other', u'language', u',', u'Swedish', u'do', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tense', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u':', u'IN', u'NN', u'TO', u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'JJ', u'JJ', u'CC', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[36521, 36528], [36529, 36532], [36533, 36540], [36541, 36552], [36553, 36555], [36556, 36566], [36567, 36572], [36573, 36576], [36577, 36581], [36582, 36588], [36588, 36589], [36590, 36592], [36593, 36601], [36602, 36604], [36605, 36612], [36613, 36616], [36617, 36621], [36622, 36627], [36628, 36637], [36637, 36638], [36639, 36646], [36647, 36651], [36652, 36655], [36656, 36659], [36660, 36663], [36664, 36671], [36672, 36682], [36683, 36685], [36686, 36690], [36691, 36694], [36695, 36702], [36703, 36710], [36711, 36714], [36715, 36719], [36720, 36727], [36728, 36734], [36734, 36735]]}) 
answer: set([])
candidate Sentence: (0.37280875444412231, {u'tokens': [u'Rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-LRB-', u'``', u'have', u"''", u'-RRB-', u',', u'hade', u'-LRB-', u'``', u'had', u"''", u'-RRB-', u'is', u'followed', u'by', u'a', u'special', u'form', u',', u'called', u'supine', u',', u'used', u'solely', u'for', u'this', u'purpose', u'-LRB-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-RRB-', u':', u':', u'Perfect', u'participle', u':', u'm\xe5lad', u';', u'``', u'painted', u"''", u'-', u'supine', u'm\xe5lat', u',', u'present', u'perfect', u'har', u'm\xe5lat', u';', u'``', u'have', u'painted', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fried', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fried', u"''", u'The', u'Past', u'participle', u'is', u'used', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'lemmas': [u'rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u',', u'hade', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u'be', u'follow', u'by', u'a', u'special', u'form', u',', u'call', u'supine', u',', u'use', u'solely', u'for', u'this', u'purpose', u'-lrb-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-rrb-', u':', u':', u'Perfect', u'participle', u':', u'm\xe5lad', u';', u'``', u'paint', u"''", u'-', u'supine', u'm\xe5lat', u',', u'present', u'perfect', u'har', u'm\xe5lat', u';', u'``', u'have', u'paint', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fry', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fry', u"''", u'the', u'past', u'participle', u'be', u'use', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'VB', u'NN', u'-LRB-', u'``', u'VBP', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'``', u'VBD', u"''", u'-RRB-', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'VBN', u'NN', u',', u'VBN', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'RB', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'-RRB-', u':', u':', u'NNP', u'NN', u':', u'NN', u':', u'``', u'VBN', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u':', u'NNP', u'NN', u':', u'NN', u',', u'``', u'VBD', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'NN', u'NN', u',', u'RB', u'.'], u'char_offsets': [[36736, 36742], [36742, 36743], [36744, 36747], [36748, 36757], [36758, 36762], [36763, 36766], [36767, 36768], [36768, 36769], [36769, 36773], [36773, 36774], [36774, 36775], [36775, 36776], [36777, 36781], [36782, 36783], [36783, 36784], [36784, 36787], [36787, 36788], [36788, 36789], [36790, 36792], [36793, 36801], [36802, 36804], [36805, 36806], [36807, 36814], [36815, 36819], [36819, 36820], [36821, 36827], [36828, 36834], [36834, 36835], [36836, 36840], [36841, 36847], [36848, 36851], [36852, 36856], [36857, 36864], [36865, 36866], [36866, 36874], [36875, 36884], [36885, 36894], [36895, 36897], [36898, 36901], [36902, 36909], [36910, 36920], [36920, 36921], [36921, 36922], [36923, 36924], [36924, 36931], [36932, 36942], [36942, 36943], [36944, 36949], [36949, 36950], [36951, 36952], [36952, 36959], [36959, 36960], [36961, 36962], [36963, 36969], [36970, 36975], [36975, 36976], [36977, 36984], [36985, 36992], [36993, 36996], [36997, 37002], [37002, 37003], [37004, 37005], [37005, 37009], [37010, 37017], [37017, 37018], [37019, 37020], [37020, 37027], [37028, 37038], [37038, 37039], [37040, 37045], [37045, 37046], [37047, 37048], [37048, 37053], [37053, 37054], [37055, 37056], [37057, 37063], [37064, 37069], [37069, 37070], [37071, 37078], [37079, 37086], [37087, 37090], [37091, 37096], [37096, 37097], [37098, 37099], [37099, 37103], [37104, 37109], [37109, 37110], [37111, 37114], [37115, 37119], [37120, 37130], [37131, 37133], [37134, 37138], [37139, 37141], [37142, 37147], [37148, 37151], [37152, 37160], [37161, 37168], [37169, 37174], [37174, 37175], [37176, 37183], [37183, 37184]]}) 
answer: set([u'tense'])
candidate Sentence: (0.26599803566932678, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[27983, 27989], [27989, 27990]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])
candidate Sentence: (0.15978507697582245, {u'tokens': [u'One', u'group', u'of', u'verbs', u'-LRB-', u'the', u'ones', u'ending', u'in', u'-', u'er', u'in', u'present', u'tense', u'-RRB-', u'have', u'a', u'special', u'imperative', u'form', u'-LRB-', u'generally', u'the', u'verb', u'stem', u'-RRB-', u',', u'but', u'with', u'most', u'verbs', u'the', u'imperative', u'is', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'lemmas': [u'one', u'group', u'of', u'verb', u'-lrb-', u'the', u'one', u'end', u'in', u'-', u'er', u'in', u'present', u'tense', u'-rrb-', u'have', u'a', u'special', u'imperative', u'form', u'-lrb-', u'generally', u'the', u'verb', u'stem', u'-rrb-', u',', u'but', u'with', u'most', u'verb', u'the', u'imperative', u'be', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'pos': [u'CD', u'NN', u'IN', u'NNS', u'-LRB-', u'DT', u'NNS', u'VBG', u'IN', u':', u'NN', u'IN', u'JJ', u'JJ', u'-RRB-', u'VBP', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'DT', u'VB', u'NN', u'-RRB-', u',', u'CC', u'IN', u'JJS', u'NNS', u'DT', u'JJ', u'VBZ', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[36330, 36333], [36334, 36339], [36340, 36342], [36343, 36348], [36349, 36350], [36350, 36353], [36354, 36358], [36359, 36365], [36366, 36368], [36369, 36370], [36370, 36372], [36373, 36375], [36376, 36383], [36384, 36389], [36389, 36390], [36391, 36395], [36396, 36397], [36398, 36405], [36406, 36416], [36417, 36421], [36422, 36423], [36423, 36432], [36433, 36436], [36437, 36441], [36442, 36446], [36446, 36447], [36447, 36448], [36449, 36452], [36453, 36457], [36458, 36462], [36463, 36468], [36469, 36472], [36473, 36483], [36484, 36486], [36487, 36496], [36497, 36499], [36500, 36503], [36504, 36514], [36515, 36519], [36519, 36520]]}) 
answer: set([u'perfect', u'use', u'participle'])
candidate Sentence: (0.12599743902683258, {u'tokens': [u'The', u'Swedish', u'Language', u'Council', u'-LRB-', u'Spr\xe5kr\xe5det', u'-RRB-', u'is', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'does', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acad\xe9mie', u'fran\xe7aise', u'does', u'for', u'French', u'.'], u'lemmas': [u'the', u'Swedish', u'Language', u'Council', u'-lrb-', u'Spr\xe5kr\xe5det', u'-rrb-', u'be', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'do', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'acad\xe9mie', u'fran\xe7aise', u'do', u'for', u'French', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'IN', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'IN', u'NNP', u'.'], u'char_offsets': [[20719, 20722], [20723, 20730], [20731, 20739], [20740, 20747], [20748, 20749], [20749, 20759], [20759, 20760], [20761, 20763], [20764, 20767], [20768, 20776], [20777, 20786], [20787, 20789], [20790, 20797], [20797, 20798], [20799, 20802], [20803, 20807], [20808, 20811], [20812, 20819], [20820, 20822], [20823, 20830], [20831, 20838], [20839, 20841], [20842, 20845], [20846, 20854], [20854, 20855], [20856, 20858], [20859, 20862], [20863, 20871], [20872, 20875], [20876, 20884], [20885, 20894], [20895, 20899], [20900, 20903], [20904, 20910], [20910, 20911]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])

Does Swedish use the perfect participle to form the present perfect tense?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116efc560>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param289] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116efc5f0>, (<src.tfidf.TF_IDF object at 0x115c7b4d0>, set(['taipei'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Taipei is in the valleys of the Keelung and Xindian Rivers') == True
E                +  where 'Taipei is in the valleys of the Keelung and Xindian Rivers' = <src.question_processing.Question_parser instance at 0x116efc5f0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.2638886570930481, {u'tokens': [u'Taipei', u'lies', u'in', u'the', u'two', u'relatively', u'narrow', u'valleys', u'of', u'the', u'Keelung', u'-LRB-', u'\u57fa\u9686\u6cb3', u'-RRB-', u'and', u'Xindian', u'-LRB-', u'\u65b0\u5e97\u6eaa', u'-RRB-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'lemmas': [u'Taipei', u'lie', u'in', u'the', u'two', u'relatively', u'narrow', u'valley', u'of', u'the', u'Keelung', u'-lrb-', u'\u57fa\u9686\u6cb3', u'-rrb-', u'and', u'xindian', u'-lrb-', u'\u65b0\u5e97\u6eaa', u'-rrb-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'pos': [u'NNP', u'VBZ', u'IN', u'DT', u'CD', u'RB', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'CC', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NNP', u',', u'WDT', u'VBP', u'TO', u'VB', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[471, 477], [478, 482], [483, 485], [486, 489], [490, 493], [494, 504], [505, 511], [512, 519], [520, 522], [523, 526], [527, 534], [535, 536], [536, 539], [539, 540], [541, 544], [545, 552], [553, 554], [554, 557], [557, 558], [559, 565], [565, 566], [567, 572], [573, 577], [578, 580], [581, 585], [586, 589], [590, 597], [598, 603], [604, 609], [610, 613], [614, 618], [618, 620], [621, 628], [629, 635], [635, 636]]}) 
answer: set([])
candidate Sentence: (0.059273336082696915, {u'tokens': [u'The', u'mayor', u'of', u'Taipei', u'City', u'had', u'been', u'an', u'appointed', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'was', u'held', u'in', u'1994', u'.'], u'lemmas': [u'the', u'mayor', u'of', u'Taipei', u'City', u'have', u'be', u'a', u'appoint', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'be', u'hold', u'in', u'1994', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'DT', u'VBN', u'NN', u'IN', u'NNP', u'POS', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[21255, 21258], [21259, 21264], [21265, 21267], [21268, 21274], [21275, 21279], [21280, 21283], [21284, 21288], [21289, 21291], [21292, 21301], [21302, 21310], [21311, 21316], [21317, 21323], [21323, 21325], [21326, 21336], [21337, 21339], [21340, 21341], [21342, 21364], [21365, 21377], [21378, 21380], [21381, 21385], [21386, 21391], [21392, 21395], [21396, 21401], [21402, 21408], [21409, 21417], [21418, 21421], [21422, 21426], [21427, 21429], [21430, 21434], [21434, 21435]]}) 
answer: set([u'valley'])
candidate Sentence: (0.055108401924371719, {u'tokens': [u'Taipei', u'is', u'part', u'of', u'a', u'major', u'industrial', u'area', u'.'], u'lemmas': [u'Taipei', u'be', u'part', u'of', u'a', u'major', u'industrial', u'area', u'.'], u'pos': [u'NNP', u'VBZ', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[969, 975], [976, 978], [979, 983], [984, 986], [987, 988], [989, 994], [995, 1005], [1006, 1010], [1010, 1011]]}) 
answer: set([u'valley'])
candidate Sentence: (0.054904580116271973, {u'tokens': [u'It', u'is', u'a', u'public', u'university', u'with', u'campuses', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'lemmas': [u'it', u'be', u'a', u'public', u'university', u'with', u'campus', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[24932, 24934], [24935, 24937], [24938, 24939], [24940, 24946], [24947, 24957], [24958, 24962], [24963, 24971], [24972, 24974], [24975, 24979], [24980, 24986], [24987, 24990], [24991, 24998], [24998, 24999]]}) 
answer: set([u'valley'])
candidate Sentence: (0.049210380762815475, {u'tokens': [u'It', u'was', u'designed', u'by', u'Archasia', u',', u'an', u'architectural', u'firm', u'established', u'in', u'Taipei', u'.'], u'lemmas': [u'it', u'be', u'design', u'by', u'Archasia', u',', u'a', u'architectural', u'firm', u'establish', u'in', u'Taipei', u'.'], u'pos': [u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u',', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[27067, 27069], [27070, 27073], [27074, 27082], [27083, 27085], [27086, 27094], [27094, 27095], [27096, 27098], [27099, 27112], [27113, 27117], [27118, 27129], [27130, 27132], [27133, 27139], [27139, 27140]]}) 
answer: set([u'valley'])

Is Taipei in a valley?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Taipei is in the valleys of the Keelung and Xindian Rivers
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Taipei is in the valleys of the Keelung and Xindian Rivers') == True
 +  where 'Taipei is in the valleys of the Keelung and Xindian Rivers' = <src.question_processing.Question_parser instance at 0x116efc5f0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param308] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f000e0>, (<src.tfidf.TF_IDF object at 0x115c7b1d0>, set(['language', 'turkish', 'turkish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x116f000e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37818551063537598, {u'tokens': [u'\u0130ml\xe2', u'Kilavuzu', u'There', u'is', u'no', u'definite', u'article', u'in', u'Turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'is', u'implied', u'when', u'the', u'accusative', u'ending', u'is', u'used', u'-LRB-', u'see', u'below', u'-RRB-', u'.'], u'lemmas': [u'\u0130ml\xe2', u'Kilavuzu', u'there', u'be', u'no', u'definite', u'article', u'in', u'turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'be', u'imply', u'when', u'the', u'accusative', u'ending', u'be', u'use', u'-lrb-', u'see', u'below', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'-LRB-', u'VB', u'IN', u'-RRB-', u'.'], u'char_offsets': [[19960, 19964], [19965, 19973], [19974, 19979], [19980, 19982], [19983, 19985], [19986, 19994], [19995, 20002], [20003, 20005], [20006, 20013], [20013, 20014], [20015, 20018], [20019, 20031], [20032, 20034], [20035, 20038], [20039, 20045], [20046, 20048], [20049, 20056], [20057, 20061], [20062, 20065], [20066, 20076], [20077, 20083], [20084, 20086], [20087, 20091], [20092, 20093], [20093, 20096], [20097, 20102], [20102, 20103], [20103, 20104]]}) 
answer: set([])
candidate Sentence: (0.25496336817741394, {u'tokens': [u'-LSB-', u'is', u'it', u'a', u'-RSB-', u'tree', u'?', u"''"], u'lemmas': [u'-lsb-', u'be', u'it', u'a', u'-rsb-', u'tree', u'?', u"''"], u'pos': [u'-LRB-', u'VBZ', u'PRP', u'DT', u'-RRB-', u'NN', u'.', u"''"], u'char_offsets': [[21439, 21440], [21440, 21442], [21443, 21445], [21446, 21447], [21447, 21448], [21449, 21453], [21453, 21454], [21454, 21455]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.23388397693634033, {u'tokens': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'lemmas': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'pos': [u',', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[21427, 21428], [21429, 21433], [21434, 21436], [21436, 21437], [21438, 21439]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.20958277583122253, {u'tokens': [u'-LSB-', u'going', u'-RSB-', u'to', u'the', u'village', u'?', u"''"], u'lemmas': [u'-lsb-', u'go', u'-rsb-', u'to', u'the', u'village', u'?', u"''"], u'pos': [u'-LRB-', u'VBG', u'-RRB-', u'TO', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[21403, 21404], [21404, 21409], [21409, 21410], [21411, 21413], [21414, 21417], [21418, 21425], [21425, 21426], [21426, 21427]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.13117724657058716, {u'tokens': [u'There', u'are', u'some', u'exceptions', u'to', u'the', u'rules', u'of', u'vowel', u'harmony', u'.'], u'lemmas': [u'there', u'be', u'some', u'exception', u'to', u'the', u'rule', u'of', u'vowel', u'harmony', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'NNS', u'TO', u'DT', u'NNS', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[16197, 16202], [16203, 16206], [16207, 16211], [16212, 16222], [16223, 16225], [16226, 16229], [16230, 16235], [16236, 16238], [16239, 16244], [16245, 16252], [16252, 16253]]}) 
answer: set([u'article', u'definite'])

Is there a definite article in Turkish language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x116f000e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param309] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00170>, (<src.tfidf.TF_IDF object at 0x115c7b1d0>, set(['language', 'turkish', 'turkish_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x116f00170>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.37818551063537598, {u'tokens': [u'\u0130ml\xe2', u'Kilavuzu', u'There', u'is', u'no', u'definite', u'article', u'in', u'Turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'is', u'implied', u'when', u'the', u'accusative', u'ending', u'is', u'used', u'-LRB-', u'see', u'below', u'-RRB-', u'.'], u'lemmas': [u'\u0130ml\xe2', u'Kilavuzu', u'there', u'be', u'no', u'definite', u'article', u'in', u'turkish', u',', u'but', u'definiteness', u'of', u'the', u'object', u'be', u'imply', u'when', u'the', u'accusative', u'ending', u'be', u'use', u'-lrb-', u'see', u'below', u'-rrb-', u'.'], u'pos': [u'NNP', u'NNP', u'EX', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'WRB', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'-LRB-', u'VB', u'IN', u'-RRB-', u'.'], u'char_offsets': [[19960, 19964], [19965, 19973], [19974, 19979], [19980, 19982], [19983, 19985], [19986, 19994], [19995, 20002], [20003, 20005], [20006, 20013], [20013, 20014], [20015, 20018], [20019, 20031], [20032, 20034], [20035, 20038], [20039, 20045], [20046, 20048], [20049, 20056], [20057, 20061], [20062, 20065], [20066, 20076], [20077, 20083], [20084, 20086], [20087, 20091], [20092, 20093], [20093, 20096], [20097, 20102], [20102, 20103], [20103, 20104]]}) 
answer: set([])
candidate Sentence: (0.25496336817741394, {u'tokens': [u'-LSB-', u'is', u'it', u'a', u'-RSB-', u'tree', u'?', u"''"], u'lemmas': [u'-lsb-', u'be', u'it', u'a', u'-rsb-', u'tree', u'?', u"''"], u'pos': [u'-LRB-', u'VBZ', u'PRP', u'DT', u'-RRB-', u'NN', u'.', u"''"], u'char_offsets': [[21439, 21440], [21440, 21442], [21443, 21445], [21446, 21447], [21447, 21448], [21449, 21453], [21453, 21454], [21454, 21455]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.23388397693634033, {u'tokens': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'lemmas': [u',', u'a\u011fa\xe7', u'm\u0131', u'?', u"''"], u'pos': [u',', u'NN', u'NN', u'.', u"''"], u'char_offsets': [[21427, 21428], [21429, 21433], [21434, 21436], [21436, 21437], [21438, 21439]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.20958277583122253, {u'tokens': [u'-LSB-', u'going', u'-RSB-', u'to', u'the', u'village', u'?', u"''"], u'lemmas': [u'-lsb-', u'go', u'-rsb-', u'to', u'the', u'village', u'?', u"''"], u'pos': [u'-LRB-', u'VBG', u'-RRB-', u'TO', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[21403, 21404], [21404, 21409], [21409, 21410], [21411, 21413], [21414, 21417], [21418, 21425], [21425, 21426], [21426, 21427]]}) 
answer: set([u'article', u'definite'])
candidate Sentence: (0.13117724657058716, {u'tokens': [u'There', u'are', u'some', u'exceptions', u'to', u'the', u'rules', u'of', u'vowel', u'harmony', u'.'], u'lemmas': [u'there', u'be', u'some', u'exception', u'to', u'the', u'rule', u'of', u'vowel', u'harmony', u'.'], u'pos': [u'EX', u'VBP', u'DT', u'NNS', u'TO', u'DT', u'NNS', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[16197, 16202], [16203, 16206], [16207, 16211], [16212, 16222], [16223, 16225], [16226, 16229], [16230, 16235], [16236, 16238], [16239, 16244], [16245, 16252], [16252, 16253]]}) 
answer: set([u'article', u'definite'])

Is there a definite article in Turkish language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x116f00170>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param320] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f007a0>, (<src.tfidf.TF_IDF object at 0x11129bd90>, set(['language', 'vietnamese', 'vietnamese_language'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
E                +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x116f007a0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.41722273826599121, {u'tokens': [u'``', u'What', u"'s", u'so', u'Chinese', u'about', u'Vietnamese', u'?', u"''"], u'lemmas': [u'``', u'what', u'be', u'so', u'chinese', u'about', u'vietnamese', u'?', u"''"], u'pos': [u'``', u'WP', u'VBZ', u'RB', u'JJ', u'IN', u'NNS', u'.', u"''"], u'char_offsets': [[30123, 30124], [30124, 30128], [30128, 30130], [30131, 30133], [30134, 30141], [30142, 30147], [30148, 30158], [30158, 30159], [30159, 30160]]}) 
answer: set([u'write', u'use', u'formally', u'system', u'writing'])
candidate Sentence: (0.29987317323684692, {u'tokens': [u'Qu\u1ed1c-ng\u1eef', u':', u'The', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'lemmas': [u'qu\u1ed1c-ng\u1eef', u':', u'the', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'pos': [u'NN', u':', u'DT', u'JJ', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[31150, 31158], [31158, 31159], [31160, 31163], [31164, 31170], [31171, 31178], [31179, 31185], [31186, 31188], [31189, 31196], [31196, 31197]]}) 
answer: set([u'write', u'use', u'formally', u'chinese'])
candidate Sentence: (0.27255517244338989, {u'tokens': [u'Much', u'vocabulary', u'has', u'been', u'borrowed', u'from', u'Chinese', u',', u'especially', u'words', u'that', u'denote', u'abstract', u'ideas', u'in', u'the', u'same', u'way', u'European', u'languages', u'borrow', u'from', u'Latin', u'and', u'Greek', u',', u'and', u'it', u'was', u'formerly', u'written', u'using', u'the', u'Chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modified', u'format', u'and', u'was', u'given', u'vernacular', u'pronunciation', u'.'], u'lemmas': [u'much', u'vocabulary', u'have', u'be', u'borrow', u'from', u'chinese', u',', u'especially', u'word', u'that', u'denote', u'abstract', u'idea', u'in', u'the', u'same', u'way', u'european', u'language', u'borrow', u'from', u'Latin', u'and', u'greek', u',', u'and', u'it', u'be', u'formerly', u'write', u'use', u'the', u'chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modify', u'format', u'and', u'be', u'give', u'vernacular', u'pronunciation', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'JJ', u',', u'RB', u'NNS', u'WDT', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'NNS', u'VB', u'IN', u'NNP', u'CC', u'JJ', u',', u'CC', u'PRP', u'VBD', u'RB', u'VBN', u'VBG', u'DT', u'JJ', u'NN', u'NN', u',', u'IN', u'IN', u'DT', u'VBN', u'NN', u'CC', u'VBD', u'VBN', u'JJ', u'NN', u'.'], u'char_offsets': [[852, 856], [857, 867], [868, 871], [872, 876], [877, 885], [886, 890], [891, 898], [898, 899], [900, 910], [911, 916], [917, 921], [922, 928], [929, 937], [938, 943], [944, 946], [947, 950], [951, 955], [956, 959], [960, 968], [969, 978], [979, 985], [986, 990], [991, 996], [997, 1000], [1001, 1006], [1006, 1007], [1008, 1011], [1012, 1014], [1015, 1018], [1019, 1027], [1028, 1035], [1036, 1041], [1042, 1045], [1046, 1053], [1054, 1061], [1062, 1068], [1068, 1069], [1070, 1076], [1077, 1079], [1080, 1081], [1082, 1090], [1091, 1097], [1098, 1101], [1102, 1105], [1106, 1111], [1112, 1122], [1123, 1136], [1136, 1137]]}) 
answer: set([u'formally'])
candidate Sentence: (0.25612178444862366, {u'tokens': [u'Before', u'French', u'rule', u',', u'the', u'first', u'two', u'Vietnamese', u'writing', u'systems', u'were', u'based', u'on', u'Chinese', u'script', u':', u'*', u'the', u'standard', u'Chinese', u'character', u'set', u'called', u'ch\u1eef', u'nho', u'-LRB-', u'scholar', u"'s", u'characters', u',', u'\u5112', u'-RRB-', u':', u'used', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'known', u'as', u'ch\u1eef', u'n\xf4m', u'-LRB-', u'southern/vernacular', u'characters', u',', u'\u5583', u'-RRB-', u'with', u'characters', u'not', u'found', u'in', u'the', u'Chinese', u'character', u'set', u';', u'this', u'system', u'was', u'better', u'adapted', u'to', u'the', u'unique', u'phonetic', u'aspects', u'of', u'Vietnamese', u'which', u'differed', u'from', u'Chinese', u'The', u'authentic', u'Chinese', u'writing', u',', u'ch\u1eef', u'nho', u',', u'was', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch\u1eef', u'n\xf4m', u'was', u'used', u'by', u'members', u'of', u'the', u'educated', u'elite', u'-LRB-', u'one', u'needs', u'to', u'be', u'able', u'to', u'read', u'ch\u1eef', u'nho', u'in', u'order', u'to', u'read', u'ch\u1eef', u'n\xf4m', u'-RRB-', u'.'], u'lemmas': [u'before', u'french', u'rule', u',', u'the', u'first', u'two', u'vietnamese', u'write', u'system', u'be', u'base', u'on', u'chinese', u'script', u':', u'*', u'the', u'standard', u'chinese', u'character', u'set', u'call', u'ch\u1eef', u'nho', u'-lrb-', u'scholar', u"'s", u'character', u',', u'\u5112', u'-rrb-', u':', u'use', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'know', u'as', u'ch\u1eef', u'n\xf4m', u'-lrb-', u'southern/vernacular', u'character', u',', u'\u5583', u'-rrb-', u'with', u'character', u'not', u'find', u'in', u'the', u'chinese', u'character', u'set', u';', u'this', u'system', u'be', u'better', u'adapt', u'to', u'the', u'unique', u'phonetic', u'aspect', u'of', u'vietnamese', u'which', u'differ', u'from', u'chinese', u'the', u'authentic', u'chinese', u'writing', u',', u'ch\u1eef', u'nho', u',', u'be', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch\u1eef', u'n\xf4m', u'be', u'use', u'by', u'member', u'of', u'the', u'educate', u'elite', u'-lrb-', u'one', u'need', u'to', u'be', u'able', u'to', u'read', u'ch\u1eef', u'nho', u'in', u'order', u'to', u'read', u'ch\u1eef', u'n\xf4m', u'-rrb-', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'JJ', u'CD', u'JJ', u'VBG', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u':', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'NN', u'VBN', u'NN', u'NN', u'-LRB-', u'NN', u'POS', u'NNS', u',', u'NN', u'-RRB-', u':', u'VBN', u'TO', u'VB', u'NNP', u'NNP', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'VBN', u'IN', u'NN', u'NN', u'-LRB-', u'JJ', u'NNS', u',', u'NN', u'-RRB-', u'IN', u'NNS', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'DT', u'NN', u'VBD', u'RBR', u'VBN', u'TO', u'DT', u'JJ', u'JJ', u'NNS', u'IN', u'NNS', u'WDT', u'VBD', u'IN', u'JJ', u'DT', u'JJ', u'JJ', u'NN', u',', u'NN', u'NN', u',', u'VBD', u'IN', u'RBR', u'JJ', u'NN', u',', u'IN', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'VBN', u'NN', u'-LRB-', u'CD', u'VBZ', u'TO', u'VB', u'JJ', u'TO', u'VB', u'NN', u'NN', u'IN', u'NN', u'TO', u'VB', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[21946, 21952], [21953, 21959], [21960, 21964], [21964, 21965], [21966, 21969], [21970, 21975], [21976, 21979], [21980, 21990], [21991, 21998], [21999, 22006], [22007, 22011], [22012, 22017], [22018, 22020], [22021, 22028], [22029, 22035], [22035, 22036], [22037, 22038], [22039, 22042], [22043, 22051], [22052, 22059], [22060, 22069], [22070, 22073], [22074, 22080], [22081, 22084], [22085, 22088], [22089, 22090], [22090, 22097], [22097, 22099], [22100, 22110], [22110, 22111], [22115, 22116], [22116, 22117], [22117, 22118], [22119, 22123], [22124, 22126], [22127, 22132], [22133, 22141], [22142, 22149], [22150, 22151], [22152, 22153], [22154, 22165], [22166, 22173], [22174, 22178], [22179, 22184], [22185, 22187], [22188, 22191], [22192, 22195], [22196, 22197], [22197, 22216], [22217, 22227], [22227, 22228], [22232, 22233], [22233, 22234], [22235, 22239], [22240, 22250], [22251, 22254], [22255, 22260], [22261, 22263], [22264, 22267], [22268, 22275], [22276, 22285], [22286, 22289], [22289, 22290], [22291, 22295], [22296, 22302], [22303, 22306], [22307, 22313], [22314, 22321], [22322, 22324], [22325, 22328], [22329, 22335], [22336, 22344], [22345, 22352], [22353, 22355], [22356, 22366], [22367, 22372], [22373, 22381], [22382, 22386], [22387, 22394], [22395, 22398], [22399, 22408], [22409, 22416], [22417, 22424], [22424, 22425], [22426, 22429], [22430, 22433], [22433, 22434], [22435, 22438], [22439, 22441], [22442, 22446], [22447, 22453], [22454, 22459], [22459, 22460], [22461, 22468], [22469, 22472], [22473, 22476], [22477, 22480], [22481, 22485], [22486, 22488], [22489, 22496], [22497, 22499], [22500, 22503], [22504, 22512], [22513, 22518], [22519, 22520], [22520, 22523], [22524, 22529], [22530, 22532], [22533, 22535], [22536, 22540], [22541, 22543], [22544, 22548], [22549, 22552], [22553, 22556], [22557, 22559], [22560, 22565], [22566, 22568], [22569, 22573], [22574, 22577], [22578, 22581], [22581, 22582], [22582, 22583]]}) 
answer: set([u'formally'])
candidate Sentence: (0.24892276525497437, {u'tokens': [u'The', u'Vietnamese', u'writing', u'system', u'in', u'use', u'today', u'is', u'an', u'adapted', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritics', u'for', u'tones', u'and', u'certain', u'letters', u'.'], u'lemmas': [u'the', u'vietnamese', u'writing', u'system', u'in', u'use', u'today', u'be', u'a', u'adapt', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritic', u'for', u'tone', u'and', u'certain', u'letter', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'IN', u'NN', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NNP', u'NN', u',', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1138, 1141], [1142, 1152], [1153, 1160], [1161, 1167], [1168, 1170], [1171, 1174], [1175, 1180], [1181, 1183], [1184, 1186], [1187, 1194], [1195, 1202], [1203, 1205], [1206, 1209], [1210, 1215], [1216, 1224], [1224, 1225], [1226, 1230], [1231, 1241], [1242, 1252], [1253, 1256], [1257, 1262], [1263, 1266], [1267, 1274], [1275, 1282], [1282, 1283]]}) 
answer: set([u'write', u'formally', u'chinese'])

Was Vietnamese formally written using the Chinese writing system?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Vietnamese was *formerly* written using the Chinese writing system.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
 +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x116f007a0>.answer
_____________________________ test_yesno[param322] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f008c0>, (<src.tfidf.TF_IDF object at 0x112e8be50>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f008c0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38673242926597595, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[43752, 43753], [43755, 43758], [43759, 43761], [43762, 43765], [43766, 43772], [43773, 43775], [43776, 43780], [43781, 43783], [43784, 43788], [43788, 43789]]}) 
answer: set([u'four', u'string'])
candidate Sentence: (0.25625678896903992, {u'tokens': [u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'the', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 13], [14, 15], [16, 21], [22, 28], [29, 39], [40, 44], [45, 49], [50, 57], [58, 65], [66, 71], [72, 74], [75, 82], [83, 89], [89, 90]]}) 
answer: set([])
candidate Sentence: (0.21043112874031067, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[14496, 14501], [14502, 14506], [14507, 14514], [14515, 14519], [14520, 14524], [14525, 14532], [14532, 14533], [14534, 14539], [14540, 14543], [14544, 14548], [14549, 14560], [14561, 14565], [14566, 14570], [14571, 14578], [14578, 14579], [14583, 14586], [14586, 14587], [14588, 14590], [14591, 14595], [14596, 14601], [14601, 14602]]}) 
answer: set([])
candidate Sentence: (0.19609341025352478, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[39335, 39337], [39338, 39346], [39346, 39347], [39348, 39352], [39353, 39359], [39360, 39367], [39368, 39374], [39375, 39377], [39378, 39381], [39382, 39383], [39384, 39393], [39394, 39398], [39399, 39403], [39404, 39410], [39411, 39413], [39414, 39417], [39418, 39422], [39423, 39430], [39431, 39438], [39439, 39441], [39442, 39446], [39447, 39452], [39453, 39456], [39457, 39459], [39460, 39463], [39464, 39465], [39466, 39472], [39473, 39475], [39476, 39480], [39481, 39490], [39491, 39498], [39499, 39501], [39501, 39502]]}) 
answer: set([])
candidate Sentence: (0.18582916259765625, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3275, 3278], [3279, 3285], [3286, 3296], [3297, 3303], [3304, 3306], [3307, 3311], [3312, 3316], [3317, 3324], [3324, 3325], [3326, 3330], [3331, 3334], [3335, 3341], [3342, 3348], [3348, 3349], [3350, 3352], [3353, 3361], [3362, 3364], [3365, 3369], [3370, 3374], [3375, 3386], [3387, 3389], [3390, 3394], [3395, 3397], [3398, 3404], [3405, 3410], [3410, 3411], [3412, 3415], [3416, 3419], [3420, 3424], [3425, 3427], [3428, 3437], [3437, 3438]]}) 
answer: set([])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f008c0>.answer
_____________________________ test_yesno[param323] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00950>, (<src.tfidf.TF_IDF object at 0x112e8be50>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f00950>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.38673242926597595, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[43752, 43753], [43755, 43758], [43759, 43761], [43762, 43765], [43766, 43772], [43773, 43775], [43776, 43780], [43781, 43783], [43784, 43788], [43788, 43789]]}) 
answer: set([u'four', u'string'])
candidate Sentence: (0.25625678896903992, {u'tokens': [u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'the', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 3], [4, 10], [11, 13], [14, 15], [16, 21], [22, 28], [29, 39], [40, 44], [45, 49], [50, 57], [58, 65], [66, 71], [72, 74], [75, 82], [83, 89], [89, 90]]}) 
answer: set([])
candidate Sentence: (0.21043112874031067, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[14496, 14501], [14502, 14506], [14507, 14514], [14515, 14519], [14520, 14524], [14525, 14532], [14532, 14533], [14534, 14539], [14540, 14543], [14544, 14548], [14549, 14560], [14561, 14565], [14566, 14570], [14571, 14578], [14578, 14579], [14583, 14586], [14586, 14587], [14588, 14590], [14591, 14595], [14596, 14601], [14601, 14602]]}) 
answer: set([])
candidate Sentence: (0.19609341025352478, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[39335, 39337], [39338, 39346], [39346, 39347], [39348, 39352], [39353, 39359], [39360, 39367], [39368, 39374], [39375, 39377], [39378, 39381], [39382, 39383], [39384, 39393], [39394, 39398], [39399, 39403], [39404, 39410], [39411, 39413], [39414, 39417], [39418, 39422], [39423, 39430], [39431, 39438], [39439, 39441], [39442, 39446], [39447, 39452], [39453, 39456], [39457, 39459], [39460, 39463], [39464, 39465], [39466, 39472], [39473, 39475], [39476, 39480], [39481, 39490], [39491, 39498], [39499, 39501], [39501, 39502]]}) 
answer: set([])
candidate Sentence: (0.18582916259765625, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3275, 3278], [3279, 3285], [3286, 3296], [3297, 3303], [3304, 3306], [3307, 3311], [3312, 3316], [3317, 3324], [3324, 3325], [3326, 3330], [3331, 3334], [3335, 3341], [3342, 3348], [3348, 3349], [3350, 3352], [3353, 3361], [3362, 3364], [3365, 3369], [3370, 3374], [3375, 3386], [3387, 3389], [3390, 3394], [3395, 3397], [3398, 3404], [3405, 3410], [3410, 3411], [3412, 3415], [3416, 3419], [3420, 3424], [3425, 3427], [3428, 3437], [3437, 3438]]}) 
answer: set([])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'Yes', 'Yes']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f00950>.answer
_____________________________ test_yesno[param326] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00b00>, (<src.tfidf.TF_IDF object at 0x112e8be50>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f00b00>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32698458433151245, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5297, 5298], [5299, 5310], [5311, 5318], [5319, 5321], [5322, 5323], [5324, 5330], [5331, 5335], [5336, 5338], [5339, 5342], [5343, 5344], [5344, 5353], [5353, 5354], [5355, 5360], [5361, 5364], [5365, 5368], [5369, 5376], [5377, 5379], [5380, 5383], [5384, 5387], [5388, 5391], [5392, 5396], [5396, 5397]]}) 
answer: set([u'like'])
candidate Sentence: (0.32352206110954285, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[43752, 43753], [43755, 43758], [43759, 43761], [43762, 43765], [43766, 43772], [43773, 43775], [43776, 43780], [43781, 43783], [43784, 43788], [43788, 43789]]}) 
answer: set([u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20847281813621521, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5398, 5401], [5402, 5411], [5412, 5417], [5418, 5427], [5428, 5431], [5432, 5437], [5438, 5443], [5443, 5444], [5445, 5448], [5449, 5454], [5455, 5460], [5460, 5461], [5462, 5465], [5466, 5469], [5470, 5477], [5478, 5485], [5486, 5488], [5489, 5492], [5493, 5494], [5494, 5499], [5499, 5500], [5500, 5501], [5502, 5511], [5512, 5521], [5522, 5525], [5526, 5529], [5530, 5533], [5533, 5534]]}) 
answer: set([u'like'])
candidate Sentence: (0.15787236392498016, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[9801, 9804], [9805, 9811], [9812, 9817], [9817, 9818], [9819, 9822], [9823, 9832], [9833, 9835], [9836, 9839], [9840, 9844], [9844, 9845], [9846, 9849], [9850, 9853], [9854, 9862], [9863, 9872], [9873, 9879], [9880, 9883], [9884, 9889], [9890, 9892], [9893, 9894], [9895, 9901], [9901, 9902]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.13291676342487335, {u'tokens': [u'Like', u'many', u'other', u'instruments', u'used', u'in', u'classical', u'music', u',', u'the', u'violin', u'descends', u'from', u'remote', u'ancestors', u'that', u'were', u'used', u'for', u'folk', u'music', u'.'], u'lemmas': [u'like', u'many', u'other', u'instrument', u'use', u'in', u'classical', u'music', u',', u'the', u'violin', u'descend', u'from', u'remote', u'ancestor', u'that', u'be', u'use', u'for', u'folk', u'music', u'.'], u'pos': [u'IN', u'JJ', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBZ', u'IN', u'JJ', u'NNS', u'WDT', u'VBD', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[38010, 38014], [38015, 38019], [38020, 38025], [38026, 38037], [38038, 38042], [38043, 38045], [38046, 38055], [38056, 38061], [38061, 38062], [38063, 38066], [38067, 38073], [38074, 38082], [38083, 38087], [38088, 38094], [38095, 38104], [38105, 38109], [38110, 38114], [38115, 38119], [38120, 38123], [38124, 38128], [38129, 38134], [38134, 38135]]}) 
answer: set([u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f00b00>.answer
_____________________________ test_yesno[param327] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00b90>, (<src.tfidf.TF_IDF object at 0x112e8be50>, set(['violin'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116f00b90>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.32698458433151245, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5297, 5298], [5299, 5310], [5311, 5318], [5319, 5321], [5322, 5323], [5324, 5330], [5331, 5335], [5336, 5338], [5339, 5342], [5343, 5344], [5344, 5353], [5353, 5354], [5355, 5360], [5361, 5364], [5365, 5368], [5369, 5376], [5377, 5379], [5380, 5383], [5384, 5387], [5388, 5391], [5392, 5396], [5396, 5397]]}) 
answer: set([u'like'])
candidate Sentence: (0.32352206110954285, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[43752, 43753], [43755, 43758], [43759, 43761], [43762, 43765], [43766, 43772], [43773, 43775], [43776, 43780], [43781, 43783], [43784, 43788], [43788, 43789]]}) 
answer: set([u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20847281813621521, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5398, 5401], [5402, 5411], [5412, 5417], [5418, 5427], [5428, 5431], [5432, 5437], [5438, 5443], [5443, 5444], [5445, 5448], [5449, 5454], [5455, 5460], [5460, 5461], [5462, 5465], [5466, 5469], [5470, 5477], [5478, 5485], [5486, 5488], [5489, 5492], [5493, 5494], [5494, 5499], [5499, 5500], [5500, 5501], [5502, 5511], [5512, 5521], [5522, 5525], [5526, 5529], [5530, 5533], [5533, 5534]]}) 
answer: set([u'like'])
candidate Sentence: (0.15787236392498016, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[9801, 9804], [9805, 9811], [9812, 9817], [9817, 9818], [9819, 9822], [9823, 9832], [9833, 9835], [9836, 9839], [9840, 9844], [9844, 9845], [9846, 9849], [9850, 9853], [9854, 9862], [9863, 9872], [9873, 9879], [9880, 9883], [9884, 9889], [9890, 9892], [9893, 9894], [9895, 9901], [9901, 9902]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.13291676342487335, {u'tokens': [u'Like', u'many', u'other', u'instruments', u'used', u'in', u'classical', u'music', u',', u'the', u'violin', u'descends', u'from', u'remote', u'ancestors', u'that', u'were', u'used', u'for', u'folk', u'music', u'.'], u'lemmas': [u'like', u'many', u'other', u'instrument', u'use', u'in', u'classical', u'music', u',', u'the', u'violin', u'descend', u'from', u'remote', u'ancestor', u'that', u'be', u'use', u'for', u'folk', u'music', u'.'], u'pos': [u'IN', u'JJ', u'JJ', u'NNS', u'VBN', u'IN', u'JJ', u'NN', u',', u'DT', u'NN', u'VBZ', u'IN', u'JJ', u'NNS', u'WDT', u'VBD', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[38010, 38014], [38015, 38019], [38020, 38025], [38026, 38037], [38038, 38042], [38043, 38045], [38046, 38055], [38056, 38061], [38061, 38062], [38063, 38066], [38067, 38073], [38074, 38082], [38083, 38087], [38088, 38094], [38095, 38104], [38105, 38109], [38110, 38114], [38115, 38119], [38120, 38123], [38124, 38128], [38129, 38134], [38134, 38135]]}) 
answer: set([u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116f00b90>.answer
_____________________________ test_yesno[param328] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00c20>, (<src.tfidf.TF_IDF object at 0x112e8b550>, set(['xylophone'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116f00c20>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30032527446746826, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[400, 404], [405, 408], [409, 411], [412, 417], [418, 420], [421, 422], [423, 431], [432, 437], [438, 440], [441, 444], [445, 452], [453, 458], [458, 459]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.18337938189506531, {u'tokens': [u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'the', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u'NN', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u'SYM', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 13], [14, 15], [15, 19], [20, 23], [24, 29], [30, 35], [36, 41], [42, 43], [45, 50], [50, 51], [52, 53], [53, 57], [57, 58], [59, 60], [61, 65], [66, 67], [68, 73], [73, 74], [75, 76], [76, 81], [81, 82], [82, 83], [84, 91], [92, 93], [93, 99], [100, 105], [105, 106], [106, 107], [108, 110], [111, 112], [113, 120], [121, 131], [132, 134], [135, 138], [139, 149], [150, 156], [157, 162], [163, 171], [172, 182], [183, 185], [186, 195], [195, 196]]}) 
answer: set([])
candidate Sentence: (0.17571449279785156, {u'tokens': [u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[820, 823], [824, 833], [834, 836], [837, 839], [840, 847], [848, 858], [859, 863], [864, 874], [875, 888], [889, 891], [892, 898], [899, 902], [903, 907], [907, 908]]}) 
answer: set([u'musical'])
candidate Sentence: (0.15533377230167389, {u'tokens': [u'1511', u'--', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'--', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'lemmas': [u'1511', u'--', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'--', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'pos': [u'CD', u':', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u':', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''", u"''"], u'char_offsets': [[3616, 3620], [3621, 3622], [3623, 3628], [3629, 3637], [3638, 3645], [3646, 3648], [3649, 3655], [3656, 3664], [3665, 3671], [3672, 3679], [3679, 3680], [3681, 3685], [3687, 3693], [3694, 3696], [3697, 3707], [3708, 3710], [3711, 3714], [3715, 3724], [3725, 3727], [3728, 3735], [3736, 3747], [3748, 3749], [3749, 3755], [3755, 3756], [3758, 3769], [3769, 3770], [3771, 3773], [3774, 3780], [3781, 3790], [3790, 3791], [3792, 3794], [3795, 3803], [3803, 3804], [3805, 3807], [3808, 3813], [3814, 3820], [3821, 3822], [3823, 3827], [3827, 3828], [3829, 3834], [3835, 3836], [3837, 3838], [3839, 3842], [3843, 3847], [3848, 3857], [3858, 3860], [3861, 3867], [3867, 3868], [3869, 3877], [3878, 3880], [3881, 3884], [3885, 3894], [3894, 3895], [3896, 3897], [3897, 3898], [3899, 3906], [3907, 3910], [3911, 3914], [3915, 3919], [3920, 3929], [3930, 3936], [3937, 3941], [3942, 3948], [3949, 3959], [3960, 3963], [3964, 3965], [3966, 3973], [3974, 3976], [3977, 3983], [3984, 3988], [3988, 3989], [3990, 3996], [3997, 4000], [4001, 4002], [4002, 4011], [4011, 4012], [4012, 4013], [4013, 4014]]}) 
answer: set([])
candidate Sentence: (0.10592997819185257, {u'tokens': [u'Certainly', u'in', u'the', u'1830', u"'s", u'a', u'xylophone', u'solo', u'was', u'a', u'novelty', u'.'], u'lemmas': [u'certainly', u'in', u'the', u'1830', u"'s", u'a', u'xylophone', u'solo', u'be', u'a', u'novelty', u'.'], u'pos': [u'RB', u'IN', u'DT', u'CD', u'POS', u'DT', u'NN', u'NN', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[2830, 2839], [2840, 2842], [2843, 2846], [2847, 2851], [2851, 2853], [2854, 2855], [2856, 2865], [2866, 2870], [2871, 2874], [2875, 2876], [2877, 2884], [2884, 2885]]}) 
answer: set([u'instrument', u'musical'])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'Yes', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116f00c20>.answer
_____________________________ test_yesno[param329] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f00cb0>, (<src.tfidf.TF_IDF object at 0x112e8b550>, set(['xylophone'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116f00cb0>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30032527446746826, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[400, 404], [405, 408], [409, 411], [412, 417], [418, 420], [421, 422], [423, 431], [432, 437], [438, 440], [441, 444], [445, 452], [453, 458], [458, 459]]}) 
answer: set([u'instrument'])
candidate Sentence: (0.18337938189506531, {u'tokens': [u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'the', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'\u03be\u03cd\u03bb\u03bf\u03bd', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'\u03c6\u03c9\u03bd\u03ae', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'DT', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u'NN', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u'SYM', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 3], [4, 13], [14, 15], [15, 19], [20, 23], [24, 29], [30, 35], [36, 41], [42, 43], [45, 50], [50, 51], [52, 53], [53, 57], [57, 58], [59, 60], [61, 65], [66, 67], [68, 73], [73, 74], [75, 76], [76, 81], [81, 82], [82, 83], [84, 91], [92, 93], [93, 99], [100, 105], [105, 106], [106, 107], [108, 110], [111, 112], [113, 120], [121, 131], [132, 134], [135, 138], [139, 149], [150, 156], [157, 162], [163, 171], [172, 182], [183, 185], [186, 195], [195, 196]]}) 
answer: set([])
candidate Sentence: (0.17571449279785156, {u'tokens': [u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[820, 823], [824, 833], [834, 836], [837, 839], [840, 847], [848, 858], [859, 863], [864, 874], [875, 888], [889, 891], [892, 898], [899, 902], [903, 907], [907, 908]]}) 
answer: set([u'musical'])
candidate Sentence: (0.15533377230167389, {u'tokens': [u'1511', u'--', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'--', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'lemmas': [u'1511', u'--', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'--', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"'", u"''"], u'pos': [u'CD', u':', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u':', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''", u"''"], u'char_offsets': [[3616, 3620], [3621, 3622], [3623, 3628], [3629, 3637], [3638, 3645], [3646, 3648], [3649, 3655], [3656, 3664], [3665, 3671], [3672, 3679], [3679, 3680], [3681, 3685], [3687, 3693], [3694, 3696], [3697, 3707], [3708, 3710], [3711, 3714], [3715, 3724], [3725, 3727], [3728, 3735], [3736, 3747], [3748, 3749], [3749, 3755], [3755, 3756], [3758, 3769], [3769, 3770], [3771, 3773], [3774, 3780], [3781, 3790], [3790, 3791], [3792, 3794], [3795, 3803], [3803, 3804], [3805, 3807], [3808, 3813], [3814, 3820], [3821, 3822], [3823, 3827], [3827, 3828], [3829, 3834], [3835, 3836], [3837, 3838], [3839, 3842], [3843, 3847], [3848, 3857], [3858, 3860], [3861, 3867], [3867, 3868], [3869, 3877], [3878, 3880], [3881, 3884], [3885, 3894], [3894, 3895], [3896, 3897], [3897, 3898], [3899, 3906], [3907, 3910], [3911, 3914], [3915, 3919], [3920, 3929], [3930, 3936], [3937, 3941], [3942, 3948], [3949, 3959], [3960, 3963], [3964, 3965], [3966, 3973], [3974, 3976], [3977, 3983], [3984, 3988], [3988, 3989], [3990, 3996], [3997, 4000], [4001, 4002], [4002, 4011], [4011, 4012], [4012, 4013], [4013, 4014]]}) 
answer: set([])
candidate Sentence: (0.10592997819185257, {u'tokens': [u'Certainly', u'in', u'the', u'1830', u"'s", u'a', u'xylophone', u'solo', u'was', u'a', u'novelty', u'.'], u'lemmas': [u'certainly', u'in', u'the', u'1830', u"'s", u'a', u'xylophone', u'solo', u'be', u'a', u'novelty', u'.'], u'pos': [u'RB', u'IN', u'DT', u'CD', u'POS', u'DT', u'NN', u'NN', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[2830, 2839], [2840, 2842], [2843, 2846], [2847, 2851], [2851, 2853], [2854, 2855], [2856, 2865], [2866, 2870], [2871, 2874], [2875, 2876], [2877, 2884], [2884, 2885]]}) 
answer: set([u'instrument', u'musical'])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'No', 'Yes', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x116f00cb0>.answer
_____________________________ test_yesno[param338] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f03200>, (<src.tfidf.TF_IDF object at 0x11129b490>, set(['zebra'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x116f03200>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30424642562866211, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4025, 4027], [4028, 4037], [4037, 4038], [4039, 4045], [4046, 4052], [4053, 4057], [4058, 4062], [4063, 4070], [4071, 4075], [4076, 4084], [4085, 4091], [4091, 4092]]}) 
answer: set([u'plain'])
candidate Sentence: (0.24126563966274261, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[7822, 7830], [7831, 7837], [7838, 7841], [7842, 7848], [7849, 7855], [7856, 7860], [7861, 7863], [7864, 7870], [7870, 7871], [7872, 7877], [7878, 7880], [7881, 7882], [7882, 7888], [7888, 7889], [7889, 7890], [7891, 7901], [7902, 7904], [7905, 7908], [7909, 7917], [7918, 7922], [7923, 7925], [7926, 7928], [7929, 7932], [7933, 7938], [7939, 7942], [7943, 7948], [7949, 7954], [7954, 7955]]}) 
answer: set([u'cross'])
candidate Sentence: (0.19829589128494263, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[11741, 11744], [11745, 11749], [11750, 11758], [11759, 11764], [11765, 11768], [11769, 11775], [11776, 11778], [11779, 11783], [11784, 11794], [11795, 11799], [11800, 11804], [11805, 11809], [11810, 11813], [11814, 11825], [11826, 11828], [11829, 11832], [11833, 11838], [11838, 11839]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.18958000838756561, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[4940, 4943], [4944, 4945], [4945, 4950], [4951, 4959], [4959, 4960], [4961, 4963], [4964, 4969], [4970, 4975], [4976, 4979], [4980, 4985], [4985, 4987], [4988, 4993], [4994, 4997], [4998, 5003], [5004, 5011], [5011, 5012]]}) 
answer: set([u'mountain', u'plain'])
candidate Sentence: (0.13732314109802246, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1023, 1027], [1028, 1031], [1032, 1034], [1035, 1040], [1041, 1043], [1044, 1045], [1046, 1053], [1054, 1056], [1057, 1065], [1065, 1066], [1067, 1071], [1072, 1074], [1075, 1085], [1085, 1086], [1087, 1095], [1095, 1096], [1097, 1106], [1106, 1107], [1108, 1114], [1115, 1125], [1125, 1126], [1127, 1136], [1137, 1140], [1141, 1148], [1149, 1154], [1154, 1155]]}) 
answer: set([u'plain', u'cross'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x116f03200>.answer
_____________________________ test_yesno[param339] _____________________________

param = (<src.question_processing.Question_parser instance at 0x116f03290>, (<src.tfidf.TF_IDF object at 0x11129b490>, set(['zebra'])))

    def test_yesno(param):
        qpobj = param[0]
        stopLemmasSet = getStopLemmas()
        objTfidf,titleLemmasSet = param[1]
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess, titleLemmasSet,stopLemmasSet)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f03290>.answer

test_compute.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
candidate Sentence: (0.30424642562866211, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4025, 4027], [4028, 4037], [4037, 4038], [4039, 4045], [4046, 4052], [4053, 4057], [4058, 4062], [4063, 4070], [4071, 4075], [4076, 4084], [4085, 4091], [4091, 4092]]}) 
answer: set([u'plain'])
candidate Sentence: (0.24126563966274261, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[7822, 7830], [7831, 7837], [7838, 7841], [7842, 7848], [7849, 7855], [7856, 7860], [7861, 7863], [7864, 7870], [7870, 7871], [7872, 7877], [7878, 7880], [7881, 7882], [7882, 7888], [7888, 7889], [7889, 7890], [7891, 7901], [7902, 7904], [7905, 7908], [7909, 7917], [7918, 7922], [7923, 7925], [7926, 7928], [7929, 7932], [7933, 7938], [7939, 7942], [7943, 7948], [7949, 7954], [7954, 7955]]}) 
answer: set([u'cross'])
candidate Sentence: (0.19829589128494263, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[11741, 11744], [11745, 11749], [11750, 11758], [11759, 11764], [11765, 11768], [11769, 11775], [11776, 11778], [11779, 11783], [11784, 11794], [11795, 11799], [11800, 11804], [11805, 11809], [11810, 11813], [11814, 11825], [11826, 11828], [11829, 11832], [11833, 11838], [11838, 11839]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.18958000838756561, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[4940, 4943], [4944, 4945], [4945, 4950], [4951, 4959], [4959, 4960], [4961, 4963], [4964, 4969], [4970, 4975], [4976, 4979], [4980, 4985], [4985, 4987], [4988, 4993], [4994, 4997], [4998, 5003], [5004, 5011], [5011, 5012]]}) 
answer: set([u'mountain', u'plain'])
candidate Sentence: (0.13732314109802246, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1023, 1027], [1028, 1031], [1032, 1034], [1035, 1040], [1041, 1043], [1044, 1045], [1046, 1053], [1054, 1056], [1057, 1065], [1065, 1066], [1067, 1071], [1072, 1074], [1075, 1085], [1085, 1086], [1087, 1095], [1095, 1096], [1097, 1106], [1106, 1107], [1108, 1114], [1115, 1125], [1125, 1126], [1127, 1136], [1137, 1140], [1141, 1148], [1149, 1154], [1154, 1155]]}) 
answer: set([u'plain', u'cross'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/Users/dhruv/Documents/Acads/sem2/nlp/NLP-project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x116f03290>.answer
=============== 101 failed, 239 passed, 1 error in 40.02 seconds ===============
