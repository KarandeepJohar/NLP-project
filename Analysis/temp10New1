============================= test session starts ==============================
platform linux2 -- Python 2.7.6 -- pytest-2.5.1
collected 340 items

test_compute.py ...F.F......FF.................FFFFFF.........F.F...F...FF..FFF..FFFFFF..FF......F....F.F...FFF.....FF........FF........FF..FF..FF....FF..FF......F.F..FFF....FFFFF..FF.......FF..........F..F.FFFFF......F.....FF........FF.FF......FF..F.F.FFFFFFFFFF..FFFFFFF.F...FFFF....FFFF.......FFFFFFFFF.F..FF.........................F.FF..FFFF........FF

=================================== FAILURES ===================================
______________________________ test_yesno[param3] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ccfd88>, <src.tfidf.TF_IDF object at 0x7fbca2601c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ccfd88>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.47307282686233521, {u'tokens': [u'*', u'-LRB-', u'An', u'additional', u'invention', u'pioneered', u'by', u'Volta', u',', u'was', u'the', u'remotely', u'operated', u'pistol', u'.'], u'lemmas': [u'*', u'-lrb-', u'a', u'additional', u'invention', u'pioneer', u'by', u'Volta', u',', u'be', u'the', u'remotely', u'operate', u'pistol', u'.'], u'pos': [u'SYM', u'-LRB-', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'VBD', u'DT', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[3367, 3368], [3370, 3371], [3373, 3375], [3376, 3386], [3387, 3396], [3397, 3406], [3407, 3409], [3410, 3415], [3415, 3416], [3417, 3420], [3421, 3424], [3425, 3433], [3434, 3442], [3443, 3449], [3449, 3450]]}) 
answer: set([u'alessandro', u'invent'])
candidate Sentence: (0.1109655350446701, {u'tokens': [u'In', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocated', u'by', u'Galvani', u',', u'he', u'invented', u'the', u'voltaic', u'pile', u',', u'an', u'early', u'electric', u'battery', u',', u'which', u'produced', u'a', u'steady', u'electric', u'current', u'.'], u'lemmas': [u'in', u'1800', u',', u'as', u'the', u'result', u'of', u'a', u'professional', u'disagreement', u'over', u'the', u'galvanic', u'response', u'advocate', u'by', u'Galvani', u',', u'he', u'invent', u'the', u'voltaic', u'pile', u',', u'a', u'early', u'electric', u'battery', u',', u'which', u'produce', u'a', u'steady', u'electric', u'current', u'.'], u'pos': [u'IN', u'CD', u',', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'JJ', u'NN', u',', u'WDT', u'VBD', u'DT', u'JJ', u'JJ', u'JJ', u'.'], u'char_offsets': [[2481, 2483], [2484, 2488], [2488, 2489], [2490, 2492], [2493, 2496], [2497, 2503], [2504, 2506], [2507, 2508], [2509, 2521], [2522, 2534], [2535, 2539], [2540, 2543], [2544, 2552], [2553, 2561], [2562, 2571], [2572, 2574], [2575, 2582], [2582, 2583], [2584, 2586], [2587, 2595], [2596, 2599], [2600, 2607], [2608, 2612], [2612, 2613], [2614, 2616], [2617, 2622], [2623, 2631], [2632, 2639], [2639, 2640], [2641, 2646], [2647, 2655], [2656, 2657], [2658, 2664], [2665, 2673], [2674, 2681], [2681, 2682]]}) 
answer: set([u'volta', u'alessandro', u'operate', u'pistol', u'remotely'])
candidate Sentence: (0.10032622516155243, {u'tokens': [u'*', u'Volta', u'Prize', u'*', u'Luigi', u'Galvani', u'*', u'Eudiometer', u'*', u'History', u'of', u'the', u'battery', u'*', u'Volta', u'-LRB-', u'lunar', u'crater', u'-RRB-', u'*', u'History', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Lemon', u'battery', u'*', u'*', u'Volta', u'and', u'the', u'``', u'Pile', u"''", u'*', u'Alessandro', u'Volta', u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry', u'*', u'Count', u'Alessandro', u'Volta', u'*', u'Alessandro', u'Volta', u'-LRB-', u'1745-1827', u'-RRB-', u'*'], u'lemmas': [u'*', u'Volta', u'Prize', u'*', u'Luigi', u'Galvani', u'*', u'Eudiometer', u'*', u'history', u'of', u'the', u'battery', u'*', u'volta', u'-lrb-', u'lunar', u'crater', u'-rrb-', u'*', u'history', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Lemon', u'battery', u'*', u'*', u'Volta', u'and', u'the', u'``', u'pile', u"''", u'*', u'Alessandro', u'Volta', u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry', u'*', u'count', u'Alessandro', u'Volta', u'*', u'Alessandro', u'Volta', u'-lrb-', u'1745-1827', u'-rrb-', u'*'], u'pos': [u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'SYM', u'NN', u'IN', u'DT', u'NN', u'SYM', u'FW', u'-LRB-', u'JJ', u'NN', u'-RRB-', u'SYM', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'NN', u'SYM', u'SYM', u'NNP', u'CC', u'DT', u'``', u'VB', u"''", u'SYM', u'NNP', u'NNP', u'SYM', u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'VB', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM'], u'char_offsets': [[5920, 5921], [5922, 5927], [5928, 5933], [5934, 5935], [5936, 5941], [5942, 5949], [5950, 5951], [5952, 5962], [5963, 5964], [5965, 5972], [5973, 5975], [5976, 5979], [5980, 5987], [5988, 5989], [5990, 5995], [5996, 5997], [5997, 6002], [6003, 6009], [6009, 6010], [6011, 6012], [6013, 6020], [6021, 6023], [6024, 6027], [6028, 6036], [6037, 6047], [6048, 6054], [6055, 6056], [6057, 6062], [6063, 6070], [6075, 6076], [6079, 6080], [6082, 6087], [6088, 6091], [6092, 6095], [6096, 6097], [6097, 6101], [6101, 6102], [6103, 6104], [6106, 6116], [6117, 6122], [6123, 6124], [6126, 6131], [6132, 6142], [6143, 6151], [6152, 6159], [6160, 6169], [6170, 6175], [6175, 6176], [6177, 6178], [6179, 6186], [6187, 6189], [6190, 6206], [6207, 6208], [6210, 6215], [6216, 6226], [6227, 6232], [6233, 6234], [6236, 6246], [6247, 6252], [6253, 6254], [6254, 6263], [6263, 6264], [6266, 6267]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])
candidate Sentence: (0.071917369961738586, {u'tokens': [u'Alessandro_Volta', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'Alessandro_Volta', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 16], [20, 25], [26, 36], [37, 45], [46, 53], [54, 63], [64, 69], [70, 71], [71, 79], [80, 82], [82, 83], [84, 88], [90, 95], [96, 97], [97, 98], [99, 103], [103, 104], [105, 108], [109, 111], [112, 119], [120, 128], [129, 137], [137, 138], [139, 140], [140, 145], [145, 146], [147, 154], [155, 158], [159, 166], [167, 169], [170, 173], [174, 177], [178, 180], [181, 194], [194, 195], [195, 196], [197, 206], [207, 217], [218, 223], [223, 224], [225, 229], [229, 230]]}) 
answer: set([u'pistol', u'operate', u'invent', u'remotely'])
candidate Sentence: (0.065958589315414429, {u'tokens': [u'He', u'made', u'use', u'of', u'a', u'Leyden', u'jar', u'to', u'send', u'an', u'electric', u'current', u'from', u'Como', u'to', u'Milan', u'-LRB-', u'~', u'50', u'km', u'or', u'~', u'30', u'miles', u'-RRB-', u',', u'which', u'in', u'turn', u',', u'set', u'off', u'the', u'pistol', u'.'], u'lemmas': [u'he', u'make', u'use', u'of', u'a', u'Leyden', u'jar', u'to', u'send', u'a', u'electric', u'current', u'from', u'Como', u'to', u'Milan', u'-lrb-', u'~', u'50', u'km', u'or', u'~', u'30', u'mile', u'-rrb-', u',', u'which', u'in', u'turn', u',', u'set', u'off', u'the', u'pistol', u'.'], u'pos': [u'PRP', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'NN', u'TO', u'VB', u'DT', u'JJ', u'JJ', u'IN', u'NNP', u'TO', u'NNP', u'-LRB-', u'CD', u'CD', u'NN', u'CC', u'NN', u'CD', u'NNS', u'-RRB-', u',', u'WDT', u'IN', u'NN', u',', u'VBN', u'RP', u'DT', u'NN', u'.'], u'char_offsets': [[3451, 3453], [3454, 3458], [3459, 3462], [3463, 3465], [3466, 3467], [3468, 3474], [3475, 3478], [3479, 3481], [3482, 3486], [3487, 3489], [3490, 3498], [3499, 3506], [3507, 3511], [3512, 3516], [3517, 3519], [3520, 3525], [3526, 3527], [3527, 3528], [3528, 3530], [3531, 3533], [3534, 3536], [3537, 3538], [3538, 3540], [3541, 3546], [3546, 3547], [3547, 3548], [3549, 3554], [3555, 3557], [3558, 3562], [3562, 3563], [3564, 3567], [3568, 3571], [3572, 3575], [3576, 3582], [3582, 3583]]}) 
answer: set([u'volta', u'alessandro', u'operate', u'invent', u'remotely'])

Did Alessandro Volta invent the remotely operated pistol?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 6 documents, 298 characters, 50 tokens, 49.7 char/doc, 8.3 tok/doc RATES: 1.573 doc/sec, 13.1 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 7 documents, 355 characters, 59 tokens, 50.7 char/doc, 8.4 tok/doc RATES: 1.693 doc/sec, 14.3 tok/sec

INFO:CoreNLP_JavaServer: INPUT: 8 documents, 412 characters, 68 tokens, 51.5 char/doc, 8.5 tok/doc RATES: 1.911 doc/sec, 16.2 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ccfd88>.answer
______________________________ test_yesno[param5] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd0368>, <src.tfidf.TF_IDF object at 0x7fbca2601c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd0368>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.61436331272125244, {u'tokens': [u'Volta', u'was', u'born', u'in', u'Como', u',', u'Italy', u'and', u'was', u'taught', u'in', u'the', u'public', u'schools', u'there', u'.'], u'lemmas': [u'Volta', u'be', u'bear', u'in', u'Como', u',', u'Italy', u'and', u'be', u'teach', u'in', u'the', u'public', u'school', u'there', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u',', u'NNP', u'CC', u'VBD', u'VBN', u'IN', u'DT', u'JJ', u'NNS', u'RB', u'.'], u'char_offsets': [[398, 403], [404, 407], [408, 412], [413, 415], [416, 420], [420, 421], [422, 427], [428, 431], [432, 435], [436, 442], [443, 445], [446, 449], [450, 456], [457, 464], [465, 470], [470, 471]]}) 
answer: set([u'alessandro'])
candidate Sentence: (0.1495511382818222, {u'tokens': [u'The', u'primitive', u'cell', u'is', u'widely', u'used', u'in', u'schools', u'to', u'demonstrate', u'the', u'laws', u'of', u'electricity', u'and', u'is', u'known', u'as', u'the', u'Lemon', u'battery', u'.'], u'lemmas': [u'the', u'primitive', u'cell', u'be', u'widely', u'use', u'in', u'school', u'to', u'demonstrate', u'the', u'law', u'of', u'electricity', u'and', u'be', u'know', u'as', u'the', u'Lemon', u'battery', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NNS', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBZ', u'VBN', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[5043, 5046], [5047, 5056], [5057, 5061], [5062, 5064], [5065, 5071], [5072, 5076], [5077, 5079], [5080, 5087], [5088, 5090], [5091, 5102], [5103, 5106], [5107, 5111], [5112, 5114], [5115, 5126], [5127, 5130], [5131, 5133], [5134, 5139], [5140, 5142], [5143, 5146], [5147, 5152], [5153, 5160], [5160, 5161]]}) 
answer: set([u'alessandro', u'volta', u'teach', u'public'])
candidate Sentence: (0.12604589760303497, {u'tokens': [u'*', u'Volta', u'Prize', u'*', u'Luigi', u'Galvani', u'*', u'Eudiometer', u'*', u'History', u'of', u'the', u'battery', u'*', u'Volta', u'-LRB-', u'lunar', u'crater', u'-RRB-', u'*', u'History', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Lemon', u'battery', u'*', u'*', u'Volta', u'and', u'the', u'``', u'Pile', u"''", u'*', u'Alessandro', u'Volta', u'*', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry', u'*', u'Count', u'Alessandro', u'Volta', u'*', u'Alessandro', u'Volta', u'-LRB-', u'1745-1827', u'-RRB-', u'*'], u'lemmas': [u'*', u'Volta', u'Prize', u'*', u'Luigi', u'Galvani', u'*', u'Eudiometer', u'*', u'history', u'of', u'the', u'battery', u'*', u'volta', u'-lrb-', u'lunar', u'crater', u'-rrb-', u'*', u'history', u'of', u'the', u'internal', u'combustion', u'engine', u'*', u'Lemon', u'battery', u'*', u'*', u'Volta', u'and', u'the', u'``', u'pile', u"''", u'*', u'Alessandro', u'Volta', u'*', u'count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u':', u'A', u'Pioneer', u'in', u'Electrochemistry', u'*', u'count', u'Alessandro', u'Volta', u'*', u'Alessandro', u'Volta', u'-lrb-', u'1745-1827', u'-rrb-', u'*'], u'pos': [u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'SYM', u'NN', u'IN', u'DT', u'NN', u'SYM', u'FW', u'-LRB-', u'JJ', u'NN', u'-RRB-', u'SYM', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u'SYM', u'NNP', u'NN', u'SYM', u'SYM', u'NNP', u'CC', u'DT', u'``', u'VB', u"''", u'SYM', u'NNP', u'NNP', u'SYM', u'VB', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u':', u'NNP', u'NNP', u'IN', u'NNP', u'SYM', u'VB', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM'], u'char_offsets': [[5920, 5921], [5922, 5927], [5928, 5933], [5934, 5935], [5936, 5941], [5942, 5949], [5950, 5951], [5952, 5962], [5963, 5964], [5965, 5972], [5973, 5975], [5976, 5979], [5980, 5987], [5988, 5989], [5990, 5995], [5996, 5997], [5997, 6002], [6003, 6009], [6009, 6010], [6011, 6012], [6013, 6020], [6021, 6023], [6024, 6027], [6028, 6036], [6037, 6047], [6048, 6054], [6055, 6056], [6057, 6062], [6063, 6070], [6075, 6076], [6079, 6080], [6082, 6087], [6088, 6091], [6092, 6095], [6096, 6097], [6097, 6101], [6101, 6102], [6103, 6104], [6106, 6116], [6117, 6122], [6123, 6124], [6126, 6131], [6132, 6142], [6143, 6151], [6152, 6159], [6160, 6169], [6170, 6175], [6175, 6176], [6177, 6178], [6179, 6186], [6187, 6189], [6190, 6206], [6207, 6208], [6210, 6215], [6216, 6226], [6227, 6232], [6233, 6234], [6236, 6246], [6247, 6252], [6253, 6254], [6254, 6263], [6263, 6264], [6266, 6267]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.095618844032287598, {u'tokens': [u'Alessandro_Volta', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-LRB-', u'February', u'18', u',', u'1745', u'March', u'5', u',', u'1827', u'-RRB-', u'was', u'an', u'Italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'lemmas': [u'Alessandro_Volta', u'Count', u'Alessandro', u'Giuseppe', u'Antonio', u'Anastasio', u'Volta', u'-lrb-', u'February', u'18', u',', u'1745', u'March', u'5', u',', u'1827', u'-rrb-', u'be', u'a', u'italian', u'Giuliano', u'Pancaldi', u',', u'``', u'Volta', u':', u'Science', u'and', u'culture', u'in', u'the', u'age', u'of', u'enlightenment', u"''", u',', u'Princeton', u'University', u'Press', u',', u'2003', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CD', u',', u'CD', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NNP', u'NNP', u',', u'``', u'NNP', u':', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u"''", u',', u'NNP', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[0, 16], [20, 25], [26, 36], [37, 45], [46, 53], [54, 63], [64, 69], [70, 71], [71, 79], [80, 82], [82, 83], [84, 88], [90, 95], [96, 97], [97, 98], [99, 103], [103, 104], [105, 108], [109, 111], [112, 119], [120, 128], [129, 137], [137, 138], [139, 140], [140, 145], [145, 146], [147, 154], [155, 158], [159, 166], [167, 169], [170, 173], [174, 177], [178, 180], [181, 194], [194, 195], [195, 196], [197, 206], [207, 217], [218, 223], [223, 224], [225, 229], [229, 230]]}) 
answer: set([u'school', u'teach', u'public'])
candidate Sentence: (0.044516365975141525, {u'tokens': [u'He', u'is', u'buried', u'in', u'Camnago', u'Volta', u'.'], u'lemmas': [u'he', u'be', u'bury', u'in', u'Camnago', u'Volta', u'.'], u'pos': [u'PRP', u'VBZ', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[5372, 5374], [5375, 5377], [5378, 5384], [5385, 5387], [5388, 5395], [5396, 5401], [5401, 5402]]}) 
answer: set([u'teach', u'school', u'alessandro', u'public'])

Was Alessandro Volta taught in public schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd0368>.answer
_____________________________ test_yesno[param12] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0d8d5a8>, <src.tfidf.TF_IDF object at 0x7fbca632a910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0d8d5a8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.72294551134109497, {u'tokens': [u'In', u'1820', u',', u'he', u'became', u'professor', u'of', u'physics', u'at', u'the', u'University', u'of', u'Turin', u'.'], u'lemmas': [u'in', u'1820', u',', u'he', u'become', u'professor', u'of', u'physics', u'at', u'the', u'University', u'of', u'Turin', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[1507, 1509], [1510, 1514], [1514, 1515], [1516, 1518], [1519, 1525], [1526, 1535], [1536, 1538], [1539, 1546], [1547, 1549], [1550, 1553], [1554, 1564], [1565, 1567], [1568, 1573], [1573, 1574]]}) 
answer: set([u'a', u'avogadro'])
candidate Sentence: (0.13914759457111359, {u'tokens': [u'Amedeo', u'Avogadro', u'was', u'born', u'in', u'Turin', u'to', u'a', u'noble', u'family', u'of', u'Piedmont', u',', u'Italy', u'.'], u'lemmas': [u'Amedeo', u'Avogadro', u'be', u'bear', u'in', u'Turin', u'to', u'a', u'noble', u'family', u'of', u'Piedmont', u',', u'Italy', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[457, 463], [464, 472], [473, 476], [477, 481], [482, 484], [485, 490], [491, 493], [494, 495], [496, 501], [502, 508], [509, 511], [512, 520], [520, 521], [522, 527], [527, 528]]}) 
answer: set([u'professor', u'university', u'the', u'at'])
candidate Sentence: (0.1104557067155838, {u'tokens': [u'In', u'1911', u',', u'a', u'meeting', u'in', u'Turin', u'commemorated', u'the', u'hundredth', u'anniversary', u'of', u'the', u'publication', u'of', u'Avogadro', u"'s", u'classic', u'1811', u'paper', u'.'], u'lemmas': [u'in', u'1911', u',', u'a', u'meeting', u'in', u'Turin', u'commemorate', u'the', u'hundredth', u'anniversary', u'of', u'the', u'publication', u'of', u'Avogadro', u"'s", u'classic', u'1811', u'paper', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'CD', u'NN', u'.'], u'char_offsets': [[6721, 6723], [6724, 6728], [6728, 6729], [6730, 6731], [6732, 6739], [6740, 6742], [6743, 6748], [6749, 6761], [6762, 6765], [6766, 6775], [6776, 6787], [6788, 6790], [6791, 6794], [6795, 6806], [6807, 6809], [6810, 6818], [6818, 6820], [6821, 6828], [6829, 6833], [6834, 6839], [6839, 6840]]}) 
answer: set([u'university', u'professor', u'at'])
candidate Sentence: (0.086826428771018982, {u'tokens': [u'He', u'was', u'active', u'in', u'the', u'revolutionary', u'movements', u'of', u'1821', u'against', u'the', u'king', u'of', u'Sardinia', u'-LRB-', u'who', u'became', u'ruler', u'of', u'Piedmont', u'with', u'Turin', u'as', u'his', u'capital', u'-RRB-', u'.'], u'lemmas': [u'he', u'be', u'active', u'in', u'the', u'revolutionary', u'movement', u'of', u'1821', u'against', u'the', u'king', u'of', u'Sardinia', u'-lrb-', u'who', u'become', u'ruler', u'of', u'Piedmont', u'with', u'Turin', u'as', u'he', u'capital', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'IN', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'WP', u'VBD', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'-RRB-', u'.'], u'char_offsets': [[1666, 1668], [1669, 1672], [1673, 1679], [1680, 1682], [1683, 1686], [1687, 1700], [1701, 1710], [1711, 1713], [1714, 1718], [1719, 1726], [1727, 1730], [1731, 1735], [1736, 1738], [1739, 1747], [1748, 1749], [1749, 1752], [1753, 1759], [1760, 1765], [1766, 1768], [1769, 1777], [1778, 1782], [1783, 1788], [1789, 1791], [1792, 1795], [1796, 1803], [1803, 1804], [1804, 1805]]}) 
answer: set([u'a', u'avogadro', u'professor', u'at', u'university'])
candidate Sentence: (0.085757508873939514, {u'tokens': [u'Well', u'before', u'this', u',', u'Avogadro', u'had', u'been', u'recalled', u'to', u'the', u'university', u'in', u'Turin', u'in', u'1833', u',', u'where', u'he', u'taught', u'for', u'another', u'twenty', u'years', u'.'], u'lemmas': [u'well', u'before', u'this', u',', u'Avogadro', u'have', u'be', u'recall', u'to', u'the', u'university', u'in', u'Turin', u'in', u'1833', u',', u'where', u'he', u'teach', u'for', u'another', u'twenty', u'year', u'.'], u'pos': [u'RB', u'IN', u'DT', u',', u'NNP', u'VBD', u'VBN', u'VBN', u'TO', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u',', u'WRB', u'PRP', u'VBD', u'IN', u'DT', u'CD', u'NNS', u'.'], u'char_offsets': [[2130, 2134], [2135, 2141], [2142, 2146], [2146, 2147], [2148, 2156], [2157, 2160], [2161, 2165], [2166, 2174], [2175, 2177], [2178, 2181], [2182, 2192], [2193, 2195], [2196, 2201], [2202, 2204], [2205, 2209], [2209, 2210], [2211, 2216], [2217, 2219], [2220, 2226], [2227, 2230], [2231, 2238], [2239, 2245], [2246, 2251], [2251, 2252]]}) 
answer: set([u'a', u'of', u'professor', u'at'])

Was Avogadro a  professor at the University of Turin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0d8d5a8>.answer
_____________________________ test_yesno[param13] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0d8d098>, <src.tfidf.TF_IDF object at 0x7fbca632a910>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Avogadro was a professor at the University of Turin.')
E                +    where 'Yes, Avogadro was a professor at the University of Turin.' = <src.question_processing.Question_parser instance at 0x7fbca0d8d098>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.72294551134109497, {u'tokens': [u'In', u'1820', u',', u'he', u'became', u'professor', u'of', u'physics', u'at', u'the', u'University', u'of', u'Turin', u'.'], u'lemmas': [u'in', u'1820', u',', u'he', u'become', u'professor', u'of', u'physics', u'at', u'the', u'University', u'of', u'Turin', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[1507, 1509], [1510, 1514], [1514, 1515], [1516, 1518], [1519, 1525], [1526, 1535], [1536, 1538], [1539, 1546], [1547, 1549], [1550, 1553], [1554, 1564], [1565, 1567], [1568, 1573], [1573, 1574]]}) 
answer: set([u'a', u'avogadro'])
candidate Sentence: (0.13914759457111359, {u'tokens': [u'Amedeo', u'Avogadro', u'was', u'born', u'in', u'Turin', u'to', u'a', u'noble', u'family', u'of', u'Piedmont', u',', u'Italy', u'.'], u'lemmas': [u'Amedeo', u'Avogadro', u'be', u'bear', u'in', u'Turin', u'to', u'a', u'noble', u'family', u'of', u'Piedmont', u',', u'Italy', u'.'], u'pos': [u'NNP', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[457, 463], [464, 472], [473, 476], [477, 481], [482, 484], [485, 490], [491, 493], [494, 495], [496, 501], [502, 508], [509, 511], [512, 520], [520, 521], [522, 527], [527, 528]]}) 
answer: set([u'professor', u'university', u'the', u'at'])
candidate Sentence: (0.1104557067155838, {u'tokens': [u'In', u'1911', u',', u'a', u'meeting', u'in', u'Turin', u'commemorated', u'the', u'hundredth', u'anniversary', u'of', u'the', u'publication', u'of', u'Avogadro', u"'s", u'classic', u'1811', u'paper', u'.'], u'lemmas': [u'in', u'1911', u',', u'a', u'meeting', u'in', u'Turin', u'commemorate', u'the', u'hundredth', u'anniversary', u'of', u'the', u'publication', u'of', u'Avogadro', u"'s", u'classic', u'1811', u'paper', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'CD', u'NN', u'.'], u'char_offsets': [[6721, 6723], [6724, 6728], [6728, 6729], [6730, 6731], [6732, 6739], [6740, 6742], [6743, 6748], [6749, 6761], [6762, 6765], [6766, 6775], [6776, 6787], [6788, 6790], [6791, 6794], [6795, 6806], [6807, 6809], [6810, 6818], [6818, 6820], [6821, 6828], [6829, 6833], [6834, 6839], [6839, 6840]]}) 
answer: set([u'university', u'professor', u'at'])
candidate Sentence: (0.086826428771018982, {u'tokens': [u'He', u'was', u'active', u'in', u'the', u'revolutionary', u'movements', u'of', u'1821', u'against', u'the', u'king', u'of', u'Sardinia', u'-LRB-', u'who', u'became', u'ruler', u'of', u'Piedmont', u'with', u'Turin', u'as', u'his', u'capital', u'-RRB-', u'.'], u'lemmas': [u'he', u'be', u'active', u'in', u'the', u'revolutionary', u'movement', u'of', u'1821', u'against', u'the', u'king', u'of', u'Sardinia', u'-lrb-', u'who', u'become', u'ruler', u'of', u'Piedmont', u'with', u'Turin', u'as', u'he', u'capital', u'-rrb-', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'IN', u'DT', u'NN', u'IN', u'NNP', u'-LRB-', u'WP', u'VBD', u'NN', u'IN', u'NNP', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'-RRB-', u'.'], u'char_offsets': [[1666, 1668], [1669, 1672], [1673, 1679], [1680, 1682], [1683, 1686], [1687, 1700], [1701, 1710], [1711, 1713], [1714, 1718], [1719, 1726], [1727, 1730], [1731, 1735], [1736, 1738], [1739, 1747], [1748, 1749], [1749, 1752], [1753, 1759], [1760, 1765], [1766, 1768], [1769, 1777], [1778, 1782], [1783, 1788], [1789, 1791], [1792, 1795], [1796, 1803], [1803, 1804], [1804, 1805]]}) 
answer: set([u'a', u'avogadro', u'professor', u'at', u'university'])
candidate Sentence: (0.085757508873939514, {u'tokens': [u'Well', u'before', u'this', u',', u'Avogadro', u'had', u'been', u'recalled', u'to', u'the', u'university', u'in', u'Turin', u'in', u'1833', u',', u'where', u'he', u'taught', u'for', u'another', u'twenty', u'years', u'.'], u'lemmas': [u'well', u'before', u'this', u',', u'Avogadro', u'have', u'be', u'recall', u'to', u'the', u'university', u'in', u'Turin', u'in', u'1833', u',', u'where', u'he', u'teach', u'for', u'another', u'twenty', u'year', u'.'], u'pos': [u'RB', u'IN', u'DT', u',', u'NNP', u'VBD', u'VBN', u'VBN', u'TO', u'DT', u'NN', u'IN', u'NNP', u'IN', u'NNP', u',', u'WRB', u'PRP', u'VBD', u'IN', u'DT', u'CD', u'NNS', u'.'], u'char_offsets': [[2130, 2134], [2135, 2141], [2142, 2146], [2146, 2147], [2148, 2156], [2157, 2160], [2161, 2165], [2166, 2174], [2175, 2177], [2178, 2181], [2182, 2192], [2193, 2195], [2196, 2201], [2202, 2204], [2205, 2209], [2209, 2210], [2211, 2216], [2217, 2219], [2220, 2226], [2227, 2230], [2231, 2238], [2239, 2245], [2246, 2251], [2251, 2252]]}) 
answer: set([u'a', u'of', u'professor', u'at'])

Was Avogadro a  professor at the University of Turin?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Avogadro was a professor at the University of Turin.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 400 documents, 1423032 characters, 265921 tokens, 3557.6 char/doc, 664.8 tok/doc RATES: 19.637 doc/sec, 13054.5 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Avogadro was a professor at the University of Turin.')
 +    where 'Yes, Avogadro was a professor at the University of Turin.' = <src.question_processing.Question_parser instance at 0x7fbca0d8d098>.answer
_____________________________ test_yesno[param31] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd56c8>, <src.tfidf.TF_IDF object at 0x7fbca3f8d110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, male ants take flight before females.')
E                +    where 'Yes, male ants take flight before females.' = <src.question_processing.Question_parser instance at 0x7fbca0cd56c8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.78099453449249268, {u'tokens': [u'Typically', u',', u'the', u'males', u'take', u'flight', u'before', u'the', u'females', u'.'], u'lemmas': [u'typically', u',', u'the', u'male', u'take', u'flight', u'before', u'the', u'female', u'.'], u'pos': [u'RB', u',', u'DT', u'NNS', u'VBP', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[14350, 14359], [14359, 14360], [14361, 14364], [14365, 14370], [14371, 14375], [14376, 14382], [14383, 14389], [14390, 14393], [14394, 14401], [14401, 14402]]}) 
answer: set([u'ant'])
candidate Sentence: (0.26371526718139648, {u'tokens': [u'Worker', u'ants', u'do', u'not', u'have', u'wings', u'and', u'reproductive', u'females', u'lose', u'their', u'wings', u'after', u'their', u'mating', u'flights', u'in', u'order', u'to', u'begin', u'their', u'colonies', u'.'], u'lemmas': [u'worker', u'ant', u'do', u'not', u'have', u'wing', u'and', u'reproductive', u'female', u'lose', u'they', u'wing', u'after', u'they', u'mating', u'flight', u'in', u'order', u'to', u'begin', u'they', u'colony', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'VB', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'PRP$', u'NNS', u'IN', u'PRP$', u'NN', u'NNS', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NNS', u'.'], u'char_offsets': [[26295, 26301], [26302, 26306], [26307, 26309], [26310, 26313], [26314, 26318], [26319, 26324], [26325, 26328], [26329, 26341], [26342, 26349], [26350, 26354], [26355, 26360], [26361, 26366], [26367, 26372], [26373, 26378], [26379, 26385], [26386, 26393], [26394, 26396], [26397, 26402], [26403, 26405], [26406, 26411], [26412, 26417], [26418, 26426], [26426, 26427]]}) 
answer: set([u'male', u'take', u'before'])
candidate Sentence: (0.25192615389823914, {u'tokens': [u'During', u'the', u'species', u'specific', u'breeding', u'period', u',', u'new', u'reproductives', u',', u'winged', u'males', u'and', u'females', u'leave', u'the', u'colony', u'in', u'what', u'is', u'called', u'a', u'nuptial', u'flight', u'.'], u'lemmas': [u'during', u'the', u'species', u'specific', u'breed', u'period', u',', u'new', u'reproductive', u',', u'winged', u'male', u'and', u'female', u'leave', u'the', u'colony', u'in', u'what', u'be', u'call', u'a', u'nuptial', u'flight', u'.'], u'pos': [u'IN', u'DT', u'NNS', u'JJ', u'VBG', u'NN', u',', u'JJ', u'NNS', u',', u'JJ', u'NNS', u'CC', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'WP', u'VBZ', u'VBN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[14208, 14214], [14215, 14218], [14219, 14226], [14227, 14235], [14236, 14244], [14245, 14251], [14251, 14252], [14253, 14256], [14257, 14270], [14270, 14271], [14272, 14278], [14279, 14284], [14285, 14288], [14289, 14296], [14297, 14302], [14303, 14306], [14307, 14313], [14314, 14316], [14317, 14321], [14322, 14324], [14325, 14331], [14332, 14333], [14334, 14341], [14342, 14348], [14348, 14349]]}) 
answer: set([u'ant', u'take', u'before'])
candidate Sentence: (0.217010498046875, {u'tokens': [u'Males', u'secrete', u'a', u'mating', u'pheromone', u'that', u'females', u'follow', u'.'], u'lemmas': [u'male', u'secrete', u'a', u'mating', u'pheromone', u'that', u'female', u'follow', u'.'], u'pos': [u'NNS', u'VBP', u'DT', u'NN', u'NN', u'WDT', u'NNS', u'VBP', u'.'], u'char_offsets': [[14549, 14554], [14555, 14562], [14563, 14564], [14565, 14571], [14572, 14581], [14582, 14586], [14587, 14594], [14595, 14601], [14601, 14602]]}) 
answer: set([u'ant', u'flight', u'take', u'before'])
candidate Sentence: (0.21643172204494476, {u'tokens': [u'Captured', u'workers', u'of', u'the', u'enslaved', u'species', u'Temnothorax', u'have', u'evolved', u'a', u'counter', u'strategy', u',', u'destroying', u'just', u'the', u'female', u'pupae', u'of', u'the', u'slave-making', u'Protomognathus', u'americanus', u',', u'but', u'sparing', u'the', u'males', u'-LRB-', u'who', u'do', u"n't", u'take', u'part', u'in', u'slave-raiding', u'as', u'adults', u'-RRB-', u'.'], u'lemmas': [u'capture', u'worker', u'of', u'the', u'enslaved', u'species', u'Temnothorax', u'have', u'evolve', u'a', u'counter', u'strategy', u',', u'destroy', u'just', u'the', u'female', u'pupa', u'of', u'the', u'slave-making', u'Protomognathus', u'americanus', u',', u'but', u'spare', u'the', u'male', u'-lrb-', u'who', u'do', u'not', u'take', u'part', u'in', u'slave-raiding', u'as', u'adult', u'-rrb-', u'.'], u'pos': [u'VBN', u'NNS', u'IN', u'DT', u'JJ', u'NNS', u'NNP', u'VBP', u'VBN', u'DT', u'NN', u'NN', u',', u'VBG', u'RB', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NNP', u'NN', u',', u'CC', u'VBG', u'DT', u'NNS', u'-LRB-', u'WP', u'VBP', u'RB', u'VB', u'NN', u'IN', u'NN', u'IN', u'NNS', u'-RRB-', u'.'], u'char_offsets': [[28176, 28184], [28185, 28192], [28193, 28195], [28196, 28199], [28200, 28208], [28209, 28216], [28217, 28228], [28229, 28233], [28234, 28241], [28242, 28243], [28244, 28251], [28252, 28260], [28260, 28261], [28262, 28272], [28273, 28277], [28278, 28281], [28282, 28288], [28289, 28294], [28295, 28297], [28298, 28301], [28302, 28314], [28315, 28329], [28330, 28340], [28340, 28341], [28342, 28345], [28346, 28353], [28354, 28357], [28358, 28363], [28364, 28365], [28365, 28368], [28369, 28371], [28371, 28374], [28375, 28379], [28380, 28384], [28385, 28387], [28388, 28401], [28402, 28404], [28405, 28411], [28411, 28412], [28412, 28413]]}) 
answer: set([u'ant', u'flight', u'before'])

Do male ants take flight before females?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, male ants take flight before females.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, male ants take flight before females.')
 +    where 'Yes, male ants take flight before females.' = <src.question_processing.Question_parser instance at 0x7fbca0cd56c8>.answer
_____________________________ test_yesno[param32] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd59e0>, <src.tfidf.TF_IDF object at 0x7fbca3f8d110>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, worker ants do not have wings.') == True
E                +  where 'No, worker ants do not have wings.' = <src.question_processing.Question_parser instance at 0x7fbca0cd59e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.5756230354309082, {u'tokens': [u'Worker', u'ants', u'do', u'not', u'have', u'wings', u'and', u'reproductive', u'females', u'lose', u'their', u'wings', u'after', u'their', u'mating', u'flights', u'in', u'order', u'to', u'begin', u'their', u'colonies', u'.'], u'lemmas': [u'worker', u'ant', u'do', u'not', u'have', u'wing', u'and', u'reproductive', u'female', u'lose', u'they', u'wing', u'after', u'they', u'mating', u'flight', u'in', u'order', u'to', u'begin', u'they', u'colony', u'.'], u'pos': [u'NN', u'NNS', u'VBP', u'RB', u'VB', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'PRP$', u'NNS', u'IN', u'PRP$', u'NN', u'NNS', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NNS', u'.'], u'char_offsets': [[26295, 26301], [26302, 26306], [26307, 26309], [26310, 26313], [26314, 26318], [26319, 26324], [26325, 26328], [26329, 26341], [26342, 26349], [26350, 26354], [26355, 26360], [26361, 26366], [26367, 26372], [26373, 26378], [26379, 26385], [26386, 26393], [26394, 26396], [26397, 26402], [26403, 26405], [26406, 26411], [26412, 26417], [26418, 26426], [26426, 26427]]}) 
answer: set([])
candidate Sentence: (0.32745182514190674, {u'tokens': [u'Most', u'queens', u'and', u'male', u'ants', u'have', u'wings', u';', u'queens', u'shed', u'the', u'wings', u'after', u'the', u'nuptial', u'flight', u',', u'leaving', u'visible', u'stubs', u',', u'a', u'distinguishing', u'feature', u'of', u'queens', u'.'], u'lemmas': [u'most', u'queen', u'and', u'male', u'ant', u'have', u'wing', u';', u'queen', u'shed', u'the', u'wing', u'after', u'the', u'nuptial', u'flight', u',', u'leave', u'visible', u'stub', u',', u'a', u'distinguish', u'feature', u'of', u'queen', u'.'], u'pos': [u'JJS', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'NNS', u':', u'NNS', u'VBD', u'DT', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'VBG', u'JJ', u'NNS', u',', u'DT', u'VBG', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[9099, 9103], [9104, 9110], [9111, 9114], [9115, 9119], [9120, 9124], [9125, 9129], [9130, 9135], [9135, 9136], [9137, 9143], [9144, 9148], [9149, 9152], [9153, 9158], [9159, 9164], [9165, 9168], [9169, 9176], [9177, 9183], [9183, 9184], [9185, 9192], [9193, 9200], [9201, 9206], [9206, 9207], [9208, 9209], [9210, 9224], [9225, 9232], [9233, 9235], [9236, 9242], [9242, 9243]]}) 
answer: set([u'worker'])
candidate Sentence: (0.23593561351299286, {u'tokens': [u'There', u',', u'they', u'break', u'off', u'their', u'wings', u'and', u'begin', u'to', u'lay', u'and', u'care', u'for', u'eggs', u'.'], u'lemmas': [u'there', u',', u'they', u'break', u'off', u'they', u'wing', u'and', u'begin', u'to', u'lay', u'and', u'care', u'for', u'egg', u'.'], u'pos': [u'RB', u',', u'PRP', u'VBP', u'RP', u'PRP$', u'NNS', u'CC', u'VB', u'TO', u'VB', u'CC', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[14827, 14832], [14832, 14833], [14834, 14838], [14839, 14844], [14845, 14848], [14849, 14854], [14855, 14860], [14861, 14864], [14865, 14870], [14871, 14873], [14874, 14877], [14878, 14881], [14882, 14886], [14887, 14890], [14891, 14895], [14895, 14896]]}) 
answer: set([u'ant', u'worker', u'have'])
candidate Sentence: (0.1736370176076889, {u'tokens': [u'Here', u'birds', u'rest', u'on', u'ant', u'nests', u',', u'or', u'pick', u'and', u'drop', u'ants', u'onto', u'their', u'wings', u'and', u'feathers', u';', u'this', u'may', u'remove', u'ectoparasites', u'.'], u'lemmas': [u'here', u'bird', u'rest', u'on', u'ant', u'nest', u',', u'or', u'pick', u'and', u'drop', u'ant', u'onto', u'they', u'wing', u'and', u'feather', u';', u'this', u'may', u'remove', u'ectoparasite', u'.'], u'pos': [u'RB', u'NNS', u'NN', u'IN', u'NN', u'NNS', u',', u'CC', u'NN', u'CC', u'NN', u'NNS', u'IN', u'PRP$', u'NNS', u'CC', u'NNS', u':', u'DT', u'MD', u'VB', u'NNS', u'.'], u'char_offsets': [[37488, 37492], [37493, 37498], [37499, 37503], [37504, 37506], [37507, 37510], [37511, 37516], [37516, 37517], [37518, 37520], [37521, 37525], [37526, 37529], [37530, 37534], [37535, 37539], [37540, 37544], [37545, 37550], [37551, 37556], [37557, 37560], [37561, 37569], [37569, 37570], [37571, 37575], [37576, 37579], [37580, 37586], [37587, 37600], [37600, 37601]]}) 
answer: set([u'worker', u'have'])
candidate Sentence: (0.16823668777942657, {u'tokens': [u'Aesop', u'did', u'the', u'same', u'in', u'his', u'fable', u'The', u'Ant', u'and', u'the', u'Grasshopper', u'.'], u'lemmas': [u'Aesop', u'do', u'the', u'same', u'in', u'he', u'fable', u'the', u'ant', u'and', u'the', u'Grasshopper', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'JJ', u'DT', u'NN', u'CC', u'DT', u'NNP', u'.'], u'char_offsets': [[43926, 43931], [43932, 43935], [43936, 43939], [43940, 43944], [43945, 43947], [43948, 43951], [43952, 43957], [43958, 43961], [43962, 43965], [43966, 43969], [43970, 43973], [43974, 43985], [43985, 43986]]}) 
answer: set([u'worker', u'wing', u'have'])

Do worker ants have wings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, worker ants do not have wings.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, worker ants do not have wings.') == True
 +  where 'No, worker ants do not have wings.' = <src.question_processing.Question_parser instance at 0x7fbca0cd59e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param33] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5ab8>, <src.tfidf.TF_IDF object at 0x7fbca2601510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5ab8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.22904875874519348, {u'tokens': [u'Brussels', u'Airport', u'is', u'about', u'45', u'km', u'from', u'the', u'city', u'of', u'Antwerp', u',', u'and', u'connects', u'the', u'city', u'worldwide', u'.'], u'lemmas': [u'Brussels', u'Airport', u'be', u'about', u'45', u'km', u'from', u'the', u'city', u'of', u'Antwerp', u',', u'and', u'connect', u'the', u'city', u'worldwide', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'IN', u'CD', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'CC', u'VBZ', u'DT', u'NN', u'RB', u'.'], u'char_offsets': [[19157, 19165], [19166, 19173], [19174, 19176], [19177, 19182], [19183, 19185], [19186, 19188], [19189, 19193], [19194, 19197], [19198, 19202], [19203, 19205], [19206, 19213], [19213, 19214], [19215, 19218], [19219, 19227], [19228, 19231], [19232, 19236], [19237, 19246], [19246, 19247]]}) 
answer: set([u'a'])
candidate Sentence: (0.21589995920658112, {u'tokens': [u'Antwerp', u'is', u'a', u'rising', u'fashion', u'city', u',', u'and', u'has', u'produced', u'designers', u'such', u'as', u'the', u'Antwerp', u'Six', u'.'], u'lemmas': [u'Antwerp', u'be', u'a', u'rise', u'fashion', u'city', u',', u'and', u'have', u'produce', u'designer', u'such', u'as', u'the', u'Antwerp', u'six', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'VBG', u'NN', u'NN', u',', u'CC', u'VBZ', u'VBN', u'NNS', u'JJ', u'IN', u'DT', u'NNP', u'CD', u'.'], u'char_offsets': [[20036, 20043], [20044, 20046], [20047, 20048], [20049, 20055], [20056, 20063], [20064, 20068], [20068, 20069], [20070, 20073], [20074, 20077], [20078, 20086], [20087, 20096], [20097, 20101], [20102, 20104], [20105, 20108], [20109, 20116], [20117, 20120], [20120, 20121]]}) 
answer: set([])
candidate Sentence: (0.19514237344264984, {u'tokens': [u'Antwerp', u'was', u'the', u'richest', u'city', u'in', u'Europe', u'at', u'this', u'time', u'.'], u'lemmas': [u'Antwerp', u'be', u'the', u'richest', u'city', u'in', u'Europe', u'at', u'this', u'time', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5043, 5050], [5051, 5054], [5055, 5058], [5059, 5066], [5067, 5071], [5072, 5074], [5075, 5081], [5082, 5084], [5085, 5089], [5090, 5094], [5094, 5095]]}) 
answer: set([u'a'])
candidate Sentence: (0.17790241539478302, {u'tokens': [u'After', u'the', u'establishment', u'of', u'Belgian', u'independence', u',', u'Antwerp', u'was', u'defended', u'by', u'the', u'citadel', u'and', u'an', u'enceinte', u'around', u'the', u'city', u'.'], u'lemmas': [u'after', u'the', u'establishment', u'of', u'belgian', u'independence', u',', u'Antwerp', u'be', u'defend', u'by', u'the', u'citadel', u'and', u'a', u'enceinte', u'around', u'the', u'city', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'CC', u'DT', u'FW', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[14191, 14196], [14197, 14200], [14201, 14214], [14215, 14217], [14218, 14225], [14226, 14238], [14238, 14239], [14240, 14247], [14248, 14251], [14252, 14260], [14261, 14263], [14264, 14267], [14268, 14275], [14276, 14279], [14280, 14282], [14283, 14291], [14292, 14298], [14299, 14302], [14303, 14307], [14307, 14308]]}) 
answer: set([])
candidate Sentence: (0.16999408602714539, {u'tokens': [u'This', u'must', u'have', u'coincided', u'roughly', u'with', u'the', u'current', u'ringway', u'south', u'of', u'the', u'city', u',', u'situating', u'the', u'city', u'within', u'a', u'former', u'curve', u'of', u'the', u'river', u'.'], u'lemmas': [u'this', u'must', u'have', u'coincide', u'roughly', u'with', u'the', u'current', u'ringway', u'south', u'of', u'the', u'city', u',', u'situate', u'the', u'city', u'within', u'a', u'former', u'curve', u'of', u'the', u'river', u'.'], u'pos': [u'DT', u'MD', u'VB', u'VBN', u'RB', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u',', u'VBG', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[3086, 3090], [3091, 3095], [3096, 3100], [3101, 3110], [3111, 3118], [3119, 3123], [3124, 3127], [3128, 3135], [3136, 3143], [3144, 3149], [3150, 3152], [3153, 3156], [3157, 3161], [3161, 3162], [3163, 3172], [3173, 3176], [3177, 3181], [3182, 3188], [3189, 3190], [3191, 3197], [3198, 3203], [3204, 3206], [3207, 3210], [3211, 3216], [3216, 3217]]}) 
answer: set([u'antwerp'])

Is Antwerp a city?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'Yes', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5ab8>.answer
_____________________________ test_yesno[param34] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5b00>, <src.tfidf.TF_IDF object at 0x7fbca2601510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b00>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.37788772583007812, {u'tokens': [u'The', u'municipality', u'comprises', u'the', u'city', u'of', u'Antwerp', u'proper', u'and', u'several', u'towns', u'.'], u'lemmas': [u'the', u'municipality', u'comprise', u'the', u'city', u'of', u'Antwerp', u'proper', u'and', u'several', u'town', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[10442, 10445], [10446, 10458], [10459, 10468], [10469, 10472], [10473, 10477], [10478, 10480], [10481, 10488], [10489, 10495], [10496, 10499], [10500, 10507], [10508, 10513], [10513, 10514]]}) 
answer: set([u'a'])
candidate Sentence: (0.32045018672943115, {u'tokens': [u'This', u'is', u'the', u'population', u'of', u'the', u'city', u'of', u'Antwerp', u'only', u',', u'not', u'of', u'the', u'larger', u'current', u'municipality', u'of', u'the', u'same', u'name', u'.'], u'lemmas': [u'this', u'be', u'the', u'population', u'of', u'the', u'city', u'of', u'Antwerp', u'only', u',', u'not', u'of', u'the', u'larger', u'current', u'municipality', u'of', u'the', u'same', u'name', u'.'], u'pos': [u'DT', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'RB', u',', u'RB', u'IN', u'DT', u'JJR', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[10308, 10312], [10313, 10315], [10316, 10319], [10320, 10330], [10331, 10333], [10334, 10337], [10338, 10342], [10343, 10345], [10346, 10353], [10354, 10358], [10358, 10359], [10360, 10363], [10364, 10366], [10367, 10370], [10371, 10377], [10378, 10385], [10386, 10398], [10399, 10401], [10402, 10405], [10406, 10410], [10411, 10415], [10415, 10416]]}) 
answer: set([u'a'])
candidate Sentence: (0.22240668535232544, {u'tokens': [u'|', u'-', u'|', u'Grote', u'Markt', u'|', u'-RCB-', u'Antwerp', u'-LRB-', u',', u'Dutch', u':', u',', u'-RRB-', u'is', u'a', u'city', u'and', u'municipality', u'in', u'Belgium', u'and', u'the', u'capital', u'of', u'the', u'Antwerp', u'province', u'in', u'Flanders', u',', u'one', u'of', u'Belgium', u"'s", u'three', u'regions', u'.'], u'lemmas': [u'|', u'-', u'|', u'Grote', u'Markt', u'|', u'-rcb-', u'Antwerp', u'-lrb-', u',', u'Dutch', u':', u',', u'-rrb-', u'be', u'a', u'city', u'and', u'municipality', u'in', u'Belgium', u'and', u'the', u'capital', u'of', u'the', u'Antwerp', u'province', u'in', u'Flanders', u',', u'one', u'of', u'Belgium', u"'s", u'three', u'region', u'.'], u'pos': [u'SYM', u':', u'CD', u'NNP', u'NNP', u'VBD', u'-RRB-', u'NNP', u'-LRB-', u',', u'NNPS', u':', u',', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NNP', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u',', u'CD', u'IN', u'NNP', u'POS', u'CD', u'NNS', u'.'], u'char_offsets': [[199, 200], [200, 201], [202, 203], [203, 208], [209, 214], [215, 216], [216, 217], [219, 226], [227, 228], [229, 230], [231, 236], [236, 237], [239, 240], [242, 243], [244, 246], [247, 248], [249, 253], [254, 257], [258, 270], [271, 273], [274, 281], [282, 285], [286, 289], [290, 297], [298, 300], [301, 304], [305, 312], [313, 321], [322, 324], [325, 333], [333, 334], [335, 338], [339, 341], [342, 349], [349, 351], [352, 357], [358, 365], [365, 366]]}) 
answer: set([])
candidate Sentence: (0.12942871451377869, {u'tokens': [u'Antwerp', u"'s", u'total', u'population', u'is', u'472,071', u'-LRB-', u'as', u'of', u'1', u'January', u'2008', u'-RRB-', u'Statistics', u'Belgium', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'-LRB-', u'excel-file', u'-RRB-', u'Population', u'of', u'all', u'municipalities', u'in', u'Belgium', u',', u'as', u'of', u'1', u'January', u'2008', u'.'], u'lemmas': [u'Antwerp', u"'s", u'total', u'population', u'be', u'472,071', u'-lrb-', u'as', u'of', u'1', u'January', u'2008', u'-rrb-', u'Statistics', u'Belgium', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'-lrb-', u'excel-file', u'-rrb-', u'Population', u'of', u'all', u'municipality', u'in', u'Belgium', u',', u'as', u'of', u'1', u'January', u'2008', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'NN', u'VBZ', u'CD', u'-LRB-', u'IN', u'IN', u'CD', u'NNP', u'CD', u'-RRB-', u'NNPS', u'NNP', u':', u'NNP', u'NNP', u'JJ', u'NN', u'NN', u'NN', u'CD', u'NN', u'CD', u'-LRB-', u'NN', u'-RRB-', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'NNP', u',', u'IN', u'IN', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[367, 374], [374, 376], [377, 382], [383, 393], [394, 396], [397, 404], [405, 406], [406, 408], [409, 411], [412, 413], [414, 421], [422, 426], [426, 427], [430, 440], [441, 448], [448, 449], [450, 460], [461, 463], [464, 469], [470, 473], [474, 481], [482, 484], [485, 486], [487, 494], [495, 499], [500, 501], [501, 511], [511, 512], [513, 523], [524, 526], [527, 530], [531, 545], [546, 548], [549, 556], [556, 557], [558, 560], [561, 563], [564, 565], [566, 573], [574, 578], [578, 579]]}) 
answer: set([u'a'])
candidate Sentence: (0.058730337768793106, {u'tokens': [u'Antwerp', u'is', u'a', u'rising', u'fashion', u'city', u',', u'and', u'has', u'produced', u'designers', u'such', u'as', u'the', u'Antwerp', u'Six', u'.'], u'lemmas': [u'Antwerp', u'be', u'a', u'rise', u'fashion', u'city', u',', u'and', u'have', u'produce', u'designer', u'such', u'as', u'the', u'Antwerp', u'six', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'VBG', u'NN', u'NN', u',', u'CC', u'VBZ', u'VBN', u'NNS', u'JJ', u'IN', u'DT', u'NNP', u'CD', u'.'], u'char_offsets': [[20036, 20043], [20044, 20046], [20047, 20048], [20049, 20055], [20056, 20063], [20064, 20068], [20068, 20069], [20070, 20073], [20074, 20077], [20078, 20086], [20087, 20096], [20097, 20101], [20102, 20104], [20105, 20108], [20109, 20116], [20117, 20120], [20120, 20121]]}) 
answer: set([u'municipality'])

Is Antwerp a municipality?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b00>.answer
_____________________________ test_yesno[param35] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5b48>, <src.tfidf.TF_IDF object at 0x7fbca2601510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b48>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.40365979075431824, {u'tokens': [u'Statistics', u'Belgium', u';', u'De', u'Belgische', u'Stadsgewesten', u'2001', u'-LRB-', u'pdf-file', u'-RRB-', u'Definitions', u'of', u'metropolitan', u'areas', u'in', u'Belgium', u'.'], u'lemmas': [u'Statistics', u'Belgium', u';', u'De', u'Belgische', u'Stadsgewesten', u'2001', u'-lrb-', u'pdf-file', u'-rrb-', u'definition', u'of', u'metropolitan', u'area', u'in', u'Belgium', u'.'], u'pos': [u'NNPS', u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CD', u'-LRB-', u'NN', u'-RRB-', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[828, 838], [839, 846], [846, 847], [848, 850], [851, 860], [861, 874], [875, 879], [880, 881], [881, 889], [889, 890], [891, 902], [903, 905], [906, 918], [919, 924], [925, 927], [928, 935], [935, 936]]}) 
answer: set([u'antwerp'])
candidate Sentence: (0.37983018159866333, {u'tokens': [u'|', u'-', u'|', u'Grote', u'Markt', u'|', u'-RCB-', u'Antwerp', u'-LRB-', u',', u'Dutch', u':', u',', u'-RRB-', u'is', u'a', u'city', u'and', u'municipality', u'in', u'Belgium', u'and', u'the', u'capital', u'of', u'the', u'Antwerp', u'province', u'in', u'Flanders', u',', u'one', u'of', u'Belgium', u"'s", u'three', u'regions', u'.'], u'lemmas': [u'|', u'-', u'|', u'Grote', u'Markt', u'|', u'-rcb-', u'Antwerp', u'-lrb-', u',', u'Dutch', u':', u',', u'-rrb-', u'be', u'a', u'city', u'and', u'municipality', u'in', u'Belgium', u'and', u'the', u'capital', u'of', u'the', u'Antwerp', u'province', u'in', u'Flanders', u',', u'one', u'of', u'Belgium', u"'s", u'three', u'region', u'.'], u'pos': [u'SYM', u':', u'CD', u'NNP', u'NNP', u'VBD', u'-RRB-', u'NNP', u'-LRB-', u',', u'NNPS', u':', u',', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NNP', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NN', u'IN', u'NNP', u',', u'CD', u'IN', u'NNP', u'POS', u'CD', u'NNS', u'.'], u'char_offsets': [[199, 200], [200, 201], [202, 203], [203, 208], [209, 214], [215, 216], [216, 217], [219, 226], [227, 228], [229, 230], [231, 236], [236, 237], [239, 240], [242, 243], [244, 246], [247, 248], [249, 253], [254, 257], [258, 270], [271, 273], [274, 281], [282, 285], [286, 289], [290, 297], [298, 300], [301, 304], [305, 312], [313, 321], [322, 324], [325, 333], [333, 334], [335, 338], [339, 341], [342, 349], [349, 351], [352, 357], [358, 365], [365, 366]]}) 
answer: set([])
candidate Sentence: (0.23056221008300781, {u'tokens': [u'Antwerp', u"'s", u'total', u'population', u'is', u'472,071', u'-LRB-', u'as', u'of', u'1', u'January', u'2008', u'-RRB-', u'Statistics', u'Belgium', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'-LRB-', u'excel-file', u'-RRB-', u'Population', u'of', u'all', u'municipalities', u'in', u'Belgium', u',', u'as', u'of', u'1', u'January', u'2008', u'.'], u'lemmas': [u'Antwerp', u"'s", u'total', u'population', u'be', u'472,071', u'-lrb-', u'as', u'of', u'1', u'January', u'2008', u'-rrb-', u'Statistics', u'Belgium', u';', u'Population', u'de', u'droit', u'par', u'commune', u'au', u'1', u'janvier', u'2008', u'-lrb-', u'excel-file', u'-rrb-', u'Population', u'of', u'all', u'municipality', u'in', u'Belgium', u',', u'as', u'of', u'1', u'January', u'2008', u'.'], u'pos': [u'NNP', u'POS', u'JJ', u'NN', u'VBZ', u'CD', u'-LRB-', u'IN', u'IN', u'CD', u'NNP', u'CD', u'-RRB-', u'NNPS', u'NNP', u':', u'NNP', u'NNP', u'JJ', u'NN', u'NN', u'NN', u'CD', u'NN', u'CD', u'-LRB-', u'NN', u'-RRB-', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'NNP', u',', u'IN', u'IN', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[367, 374], [374, 376], [377, 382], [383, 393], [394, 396], [397, 404], [405, 406], [406, 408], [409, 411], [412, 413], [414, 421], [422, 426], [426, 427], [430, 440], [441, 448], [448, 449], [450, 460], [461, 463], [464, 469], [470, 473], [474, 481], [482, 484], [485, 486], [487, 494], [495, 499], [500, 501], [501, 511], [511, 512], [513, 523], [524, 526], [527, 530], [531, 545], [546, 548], [549, 556], [556, 557], [558, 560], [561, 563], [564, 565], [566, 573], [574, 578], [578, 579]]}) 
answer: set([])
candidate Sentence: (0.18420301377773285, {u'tokens': [u'Princeton', u'Encyclopedia', u'of', u'Classical', u'Sites', u',', u'1976', u':', u'``', u'Antwerp', u'Belgium', u"''", u'*', u'*', u'Official', u'Website', u'*', u'Capsule', u'History', u'*', u'Tourism', u'Antwerp'], u'lemmas': [u'Princeton', u'Encyclopedia', u'of', u'classical', u'site', u',', u'1976', u':', u'``', u'Antwerp', u'Belgium', u"''", u'*', u'*', u'Official', u'Website', u'*', u'Capsule', u'history', u'*', u'Tourism', u'Antwerp'], u'pos': [u'NNP', u'NNP', u'IN', u'JJ', u'NNS', u',', u'CD', u':', u'``', u'NNP', u'NNP', u"''", u'SYM', u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'NN', u'SYM', u'NNP', u'NNP'], u'char_offsets': [[28185, 28194], [28195, 28207], [28208, 28210], [28211, 28220], [28221, 28226], [28226, 28227], [28228, 28232], [28232, 28233], [28234, 28235], [28235, 28242], [28243, 28250], [28250, 28251], [28252, 28253], [28258, 28259], [28261, 28269], [28270, 28277], [28278, 28279], [28281, 28288], [28289, 28296], [28297, 28298], [28300, 28307], [28308, 28315]]}) 
answer: set([u'in'])
candidate Sentence: (0.15193615853786469, {u'tokens': [u'This', u'impediment', u'remained', u'in', u'force', u'until', u'1863', u',', u'although', u'the', u'provisions', u'were', u'relaxed', u'during', u'French', u'rule', u'from', u'1795', u'to', u'1814', u',', u'and', u'also', u'during', u'the', u'time', u'Belgium', u'formed', u'part', u'of', u'the', u'Kingdom', u'of', u'the', u'United', u'Netherlands', u'-LRB-', u'1815', u'to', u'1830', u'-RRB-', u'.'], u'lemmas': [u'this', u'impediment', u'remain', u'in', u'force', u'until', u'1863', u',', u'although', u'the', u'provision', u'be', u'relax', u'during', u'french', u'rule', u'from', u'1795', u'to', u'1814', u',', u'and', u'also', u'during', u'the', u'time', u'Belgium', u'form', u'part', u'of', u'the', u'Kingdom', u'of', u'the', u'United', u'Netherlands', u'-lrb-', u'1815', u'to', u'1830', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'IN', u'NN', u'IN', u'CD', u',', u'IN', u'DT', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'CD', u'TO', u'CD', u',', u'CC', u'RB', u'IN', u'DT', u'NN', u'NNP', u'VBD', u'NN', u'IN', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'-LRB-', u'CD', u'TO', u'CD', u'-RRB-', u'.'], u'char_offsets': [[7887, 7891], [7892, 7902], [7903, 7911], [7912, 7914], [7915, 7920], [7921, 7926], [7927, 7931], [7931, 7932], [7933, 7941], [7942, 7945], [7946, 7956], [7957, 7961], [7962, 7969], [7970, 7976], [7977, 7983], [7984, 7988], [7989, 7993], [7994, 7998], [7999, 8001], [8002, 8006], [8006, 8007], [8008, 8011], [8012, 8016], [8017, 8023], [8024, 8027], [8028, 8032], [8033, 8040], [8041, 8047], [8048, 8052], [8053, 8055], [8056, 8059], [8060, 8067], [8068, 8070], [8071, 8074], [8075, 8081], [8082, 8093], [8094, 8095], [8095, 8099], [8100, 8102], [8103, 8107], [8107, 8108], [8108, 8109]]}) 
answer: set([u'antwerp'])

Is Antwerp in Belgium?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b48>.answer
_____________________________ test_yesno[param36] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5b90>, <src.tfidf.TF_IDF object at 0x7fbca546b850>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b90>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.24192188680171967, {u'tokens': [u'By', u'the', u'fourth', u'century', u'AD', u',', u'the', u'Arab', u'kingdoms', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerged', u'in', u'Central', u'Arabia', u'.'], u'lemmas': [u'by', u'the', u'fourth', u'century', u'ad', u',', u'the', u'Arab', u'kingdom', u'of', u'the', u'Lakhmids', u'in', u'southern', u'Iraq', u',', u'the', u'Ghassanids', u'in', u'southern', u'Syria', u'the', u'Kindite', u'Kingdom', u'emerge', u'in', u'Central', u'Arabia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'DT', u'NNP', u'NNS', u'IN', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u',', u'DT', u'NNP', u'IN', u'JJ', u'NNP', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[7995, 7997], [7998, 8001], [8002, 8008], [8009, 8016], [8017, 8019], [8019, 8020], [8021, 8024], [8025, 8029], [8030, 8038], [8039, 8041], [8042, 8045], [8046, 8054], [8055, 8057], [8058, 8066], [8067, 8071], [8071, 8072], [8073, 8076], [8077, 8087], [8088, 8090], [8091, 8099], [8100, 8105], [8106, 8109], [8110, 8117], [8118, 8125], [8126, 8133], [8134, 8136], [8137, 8144], [8145, 8151], [8151, 8152]]}) 
answer: set([u'a', u'semitic', u'arabic', u'language'])
candidate Sentence: (0.11935620754957199, {u'tokens': [u'``', u'Arabic', u'language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[553, 554], [554, 560], [561, 569], [569, 570], [570, 571]]}) 
answer: set([u'a', u'semitic', u'central'])
candidate Sentence: (0.11935620754957199, {u'tokens': [u'``', u'Arabic', u'Language', u'.', u"''"], u'lemmas': [u'``', u'arabic', u'language', u'.', u"''"], u'pos': [u'``', u'JJ', u'NN', u'.', u"''"], u'char_offsets': [[2998, 2999], [2999, 3005], [3006, 3014], [3014, 3015], [3015, 3016]]}) 
answer: set([u'a', u'semitic', u'central'])
candidate Sentence: (0.11591117084026337, {u'tokens': [u'Arabic', u'is', u'the', u'language', u'of', u'the', u'Qur', u'`', u'an', u'.'], u'lemmas': [u'arabic', u'be', u'the', u'language', u'of', u'the', u'Qur', u'`', u'a', u'.'], u'pos': [u'JJ', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'``', u'DT', u'.'], u'char_offsets': [[6672, 6678], [6679, 6681], [6682, 6685], [6686, 6694], [6695, 6697], [6698, 6701], [6702, 6705], [6705, 6706], [6706, 6708], [6708, 6709]]}) 
answer: set([u'semitic', u'central'])
candidate Sentence: (0.11207592487335205, {u'tokens': [u'Most', u'linguists', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'lemmas': [u'most', u'linguist', u'list', u'it', u'as', u'a', u'separate', u'language', u'rather', u'than', u'as', u'a', u'dialect', u'of', u'Arabic', u'.'], u'pos': [u'JJS', u'NNS', u'VBP', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'RB', u'IN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[3611, 3615], [3616, 3625], [3626, 3630], [3631, 3633], [3634, 3636], [3637, 3638], [3639, 3647], [3648, 3656], [3657, 3663], [3664, 3668], [3669, 3671], [3672, 3673], [3674, 3681], [3682, 3684], [3685, 3691], [3691, 3692]]}) 
answer: set([u'semitic', u'central'])

Is Arabic a Central Semitic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5b90>.answer
_____________________________ test_yesno[param46] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5e60>, <src.tfidf.TF_IDF object at 0x7fbca2304e10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5e60>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.31403663754463196, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43273, 43276], [43277, 43283], [43284, 43296], [43297, 43306], [43307, 43309], [43310, 43313], [43314, 43316], [43317, 43320], [43321, 43331], [43332, 43342], [43343, 43345], [43346, 43349], [43350, 43355], [43355, 43356], [43358, 43360], [43361, 43367], [43367, 43369], [43370, 43376], [43377, 43386], [43387, 43391], [43391, 43392]]}) 
answer: set([u'city', u'germany', u'capital'])
candidate Sentence: (0.29166626930236816, {u'tokens': [u'Berlin', u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [10, 16], [17, 18], [19, 20], [22, 23], [24, 26], [27, 30], [31, 38], [39, 43], [44, 47], [48, 51], [52, 54], [55, 57], [58, 64], [65, 67], [68, 75], [75, 76]]}) 
answer: set([])
candidate Sentence: (0.2306598573923111, {u'tokens': [u'Berlin', u'is', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'is', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'is', u'Schloss', u'Bellevue', u'.'], u'lemmas': [u'Berlin', u'be', u'the', u'capital', u'of', u'the', u'Federal', u'Republic', u'of', u'Germany', u'and', u'be', u'the', u'seat', u'of', u'the', u'President', u'of', u'Germany', u',', u'whose', u'official', u'residence', u'be', u'Schloss', u'Bellevue', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u',', u'WP$', u'JJ', u'NN', u'VBZ', u'NNP', u'NNP', u'.'], u'char_offsets': [[18813, 18819], [18820, 18822], [18823, 18826], [18827, 18834], [18835, 18837], [18838, 18841], [18842, 18849], [18850, 18858], [18859, 18861], [18862, 18869], [18870, 18873], [18874, 18876], [18877, 18880], [18881, 18885], [18886, 18888], [18889, 18892], [18893, 18902], [18903, 18905], [18906, 18913], [18913, 18914], [18915, 18920], [18921, 18929], [18930, 18939], [18940, 18942], [18943, 18950], [18951, 18959], [18959, 18960]]}) 
answer: set([u'city'])
candidate Sentence: (0.18994443118572235, {u'tokens': [u'On', u'3', u'October', u'1990', u'the', u'two', u'parts', u'of', u'Germany', u'were', u'reunified', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'became', u'the', u'German', u'capital', u'according', u'to', u'the', u'unification', u'treaty', u'.'], u'lemmas': [u'on', u'3', u'October', u'1990', u'the', u'two', u'part', u'of', u'Germany', u'be', u'reunify', u'as', u'the', u'Federal', u'Republic', u'of', u'Germany', u',', u'and', u'Berlin', u'become', u'the', u'german', u'capital', u'accord', u'to', u'the', u'unification', u'treaty', u'.'], u'pos': [u'IN', u'CD', u'NNP', u'CD', u'DT', u'CD', u'NNS', u'IN', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u',', u'CC', u'NNP', u'VBD', u'DT', u'JJ', u'NN', u'VBG', u'TO', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[10073, 10075], [10076, 10077], [10078, 10085], [10086, 10090], [10091, 10094], [10095, 10098], [10099, 10104], [10105, 10107], [10108, 10115], [10116, 10120], [10121, 10130], [10131, 10133], [10134, 10137], [10138, 10145], [10146, 10154], [10155, 10157], [10158, 10165], [10165, 10166], [10167, 10170], [10171, 10177], [10178, 10184], [10185, 10188], [10189, 10195], [10196, 10203], [10204, 10213], [10214, 10216], [10217, 10220], [10221, 10232], [10233, 10239], [10239, 10240]]}) 
answer: set([u'city'])
candidate Sentence: (0.16250425577163696, {u'tokens': [u'Following', u'German', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regained', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'hosting', u'147', u'foreign', u'embassies', u'.'], u'lemmas': [u'follow', u'german', u'reunification', u'in', u'1990', u',', u'the', u'city', u'regain', u'its', u'status', u'as', u'the', u'capital', u'of', u'all', u'Germany', u'host', u'147', u'foreign', u'embassy', u'.'], u'pos': [u'VBG', u'JJ', u'NN', u'IN', u'CD', u',', u'DT', u'NN', u'VBD', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNP', u'VBG', u'CD', u'JJ', u'NNS', u'.'], u'char_offsets': [[1066, 1075], [1076, 1082], [1083, 1096], [1097, 1099], [1100, 1104], [1104, 1105], [1106, 1109], [1110, 1114], [1115, 1123], [1124, 1127], [1128, 1134], [1135, 1137], [1138, 1141], [1142, 1149], [1150, 1152], [1153, 1156], [1157, 1164], [1165, 1172], [1173, 1176], [1177, 1184], [1185, 1194], [1194, 1195]]}) 
answer: set([u'berlin'])

Is Berlin the capital city of Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5e60>.answer
_____________________________ test_yesno[param48] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd5ef0>, <src.tfidf.TF_IDF object at 0x7fbca2304e10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5ef0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32458174228668213, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43273, 43276], [43277, 43283], [43284, 43296], [43297, 43306], [43307, 43309], [43310, 43313], [43314, 43316], [43317, 43320], [43321, 43331], [43332, 43342], [43343, 43345], [43346, 43349], [43350, 43355], [43355, 43356], [43358, 43360], [43361, 43367], [43367, 43369], [43370, 43376], [43377, 43386], [43387, 43391], [43391, 43392]]}) 
answer: set([u'city', u'germany', u'largest'])
candidate Sentence: (0.23357462882995605, {u'tokens': [u'With', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'is', u'Germany', u"'s", u'largest', u'city', u'.'], u'lemmas': [u'with', u'a', u'population', u'of', u'3.4', u'million', u'people', u',', u'Berlin', u'be', u'Germany', u"'s", u'largest', u'city', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'CD', u'CD', u'NNS', u',', u'NNP', u'VBZ', u'NNP', u'POS', u'JJS', u'NN', u'.'], u'char_offsets': [[77, 81], [82, 83], [84, 94], [95, 97], [98, 101], [102, 109], [110, 116], [116, 117], [118, 124], [125, 127], [128, 135], [135, 137], [138, 145], [146, 150], [150, 151]]}) 
answer: set([u'the', u'in'])
candidate Sentence: (0.15088297426700592, {u'tokens': [u'The', u'Berlin', u'Hauptbahnhof', u'is', u'the', u'largest', u'crossing', u'station', u'in', u'Europe', u'.'], u'lemmas': [u'the', u'Berlin', u'Hauptbahnhof', u'be', u'the', u'largest', u'cross', u'station', u'in', u'Europe', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[48398, 48401], [48402, 48408], [48409, 48421], [48422, 48424], [48425, 48428], [48429, 48436], [48437, 48445], [48446, 48453], [48454, 48456], [48457, 48463], [48463, 48464]]}) 
answer: set([u'city', u'germany'])
candidate Sentence: (0.14105290174484253, {u'tokens': [u'Berlin', u'Berlin', u'-LRB-', u';', u'-RRB-', u'is', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'states', u'of', u'Germany', u'.'], u'lemmas': [u'Berlin', u'Berlin', u'-lrb-', u';', u'-rrb-', u'be', u'the', u'capital', u'city', u'and', u'one', u'of', u'16', u'state', u'of', u'Germany', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u':', u'-RRB-', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'CD', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 6], [10, 16], [17, 18], [19, 20], [22, 23], [24, 26], [27, 30], [31, 38], [39, 43], [44, 47], [48, 51], [52, 54], [55, 57], [58, 64], [65, 67], [68, 75], [75, 76]]}) 
answer: set([u'largest', u'in'])
candidate Sentence: (0.13723501563072205, {u'tokens': [u'It', u'is', u'the', u'largest', u'remaining', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'lemmas': [u'it', u'be', u'the', u'largest', u'remain', u'evidence', u'of', u'the', u'city', u"'s", u'historical', u'division', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJS', u'VBG', u'NN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[14677, 14679], [14680, 14682], [14683, 14686], [14687, 14694], [14695, 14704], [14705, 14713], [14714, 14716], [14717, 14720], [14721, 14725], [14725, 14727], [14728, 14738], [14739, 14747], [14747, 14748]]}) 
answer: set([u'berlin', u'germany', u'in'])

Is Berlin the largest city in Germany?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd5ef0>.answer
_____________________________ test_yesno[param52] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6050>, <src.tfidf.TF_IDF object at 0x7fbca2304e10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the Gendarmenmarkt borders the French Cathedral.')
E                +    where 'Yes, the Gendarmenmarkt borders the French Cathedral.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6050>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39491868019104004, {u'tokens': [u'German', u'Cathedral', u'and', u'Concert', u'Hall', u'at', u'the', u'Gendarmenmarkt', u'.'], u'lemmas': [u'german', u'cathedral', u'and', u'Concert', u'Hall', u'at', u'the', u'gendarmenmarkt', u'.'], u'pos': [u'JJ', u'NN', u'CC', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[42680, 42686], [42687, 42696], [42697, 42700], [42701, 42708], [42709, 42713], [42714, 42716], [42717, 42720], [42721, 42735], [42735, 42736]]}) 
answer: set([u'border', u'french'])
candidate Sentence: (0.30920493602752686, {u'tokens': [u'The', u'Gendarmenmarkt', u',', u'a', u'neoclassical', u'square', u'in', u'Berlin', u'whose', u'name', u'dates', u'back', u'to', u'the', u'Napoleonic', u'occupation', u'of', u'the', u'city', u',', u'is', u'bordered', u'by', u'two', u'similarly', u'designed', u'cathedrals', u',', u'the', u'French', u'Cathedral', u'with', u'its', u'observation', u'platform', u'and', u'the', u'German', u'Cathedral', u'.'], u'lemmas': [u'the', u'Gendarmenmarkt', u',', u'a', u'neoclassical', u'square', u'in', u'Berlin', u'whose', u'name', u'date', u'back', u'to', u'the', u'napoleonic', u'occupation', u'of', u'the', u'city', u',', u'be', u'border', u'by', u'two', u'similarly', u'design', u'cathedral', u',', u'the', u'french', u'cathedral', u'with', u'its', u'observation', u'platform', u'and', u'the', u'german', u'cathedral', u'.'], u'pos': [u'DT', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'WP$', u'NN', u'NNS', u'RB', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'VBZ', u'VBN', u'IN', u'CD', u'RB', u'VBN', u'NNS', u',', u'DT', u'JJ', u'NN', u'IN', u'PRP$', u'NN', u'NN', u'CC', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[15313, 15316], [15317, 15331], [15331, 15332], [15333, 15334], [15335, 15347], [15348, 15354], [15355, 15357], [15358, 15364], [15365, 15370], [15371, 15375], [15376, 15381], [15382, 15386], [15387, 15389], [15390, 15393], [15394, 15404], [15405, 15415], [15416, 15418], [15419, 15422], [15423, 15427], [15427, 15428], [15429, 15431], [15432, 15440], [15441, 15443], [15444, 15447], [15448, 15457], [15458, 15466], [15467, 15477], [15477, 15478], [15479, 15482], [15483, 15489], [15490, 15499], [15500, 15504], [15505, 15508], [15509, 15520], [15521, 15529], [15530, 15533], [15534, 15537], [15538, 15544], [15545, 15554], [15554, 15555]]}) 
answer: set([])
candidate Sentence: (0.1933874785900116, {u'tokens': [u'The', u'Cathedral', u'of', u'St.', u'Hedwig', u'is', u'Berlin', u"'s", u'Roman', u'Catholic', u'cathedral', u'.'], u'lemmas': [u'the', u'cathedral', u'of', u'St.', u'Hedwig', u'be', u'Berlin', u"'s", u'Roman', u'Catholic', u'cathedral', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'NNP', u'POS', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[16016, 16019], [16020, 16029], [16030, 16032], [16033, 16036], [16037, 16043], [16044, 16046], [16047, 16053], [16053, 16055], [16056, 16061], [16062, 16070], [16071, 16080], [16080, 16081]]}) 
answer: set([u'gendarmenmarkt', u'border', u'french'])
candidate Sentence: (0.17657528817653656, {u'tokens': [u'The', u'Berlin', u'Philharmonic', u'Orchestra', u'is', u'one', u'of', u'the', u'preeminent', u'orchestras', u'in', u'the', u'world', u';', u'Is', u'Rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'lemmas': [u'the', u'Berlin', u'Philharmonic', u'Orchestra', u'be', u'one', u'of', u'the', u'preeminent', u'orchestra', u'in', u'the', u'world', u';', u'be', u'rattle', u"'s", u'Berlin', u'honeymoon', u'over', u'?'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'NN', u':', u'VBZ', u'NN', u'POS', u'NNP', u'NN', u'IN', u'.'], u'char_offsets': [[43273, 43276], [43277, 43283], [43284, 43296], [43297, 43306], [43307, 43309], [43310, 43313], [43314, 43316], [43317, 43320], [43321, 43331], [43332, 43342], [43343, 43345], [43346, 43349], [43350, 43355], [43355, 43356], [43358, 43360], [43361, 43367], [43367, 43369], [43370, 43376], [43377, 43386], [43387, 43391], [43391, 43392]]}) 
answer: set([u'gendarmenmarkt', u'cathedral', u'border', u'french'])
candidate Sentence: (0.1148589700460434, {u'tokens': [u'The', u'settlement', u'of', u'Spandau', u'is', u'first', u'mentioned', u'in', u'1197', u',', u'and', u'Kpenick', u'in', u'1209', u',', u'though', u'these', u'areas', u'did', u'not', u'join', u'Berlin', u'until', u'1920', u'.'], u'lemmas': [u'the', u'settlement', u'of', u'Spandau', u'be', u'first', u'mention', u'in', u'1197', u',', u'and', u'Kpenick', u'in', u'1209', u',', u'though', u'these', u'area', u'do', u'not', u'join', u'Berlin', u'until', u'1920', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'VBZ', u'JJ', u'VBN', u'IN', u'CD', u',', u'CC', u'NNP', u'IN', u'CD', u',', u'IN', u'DT', u'NNS', u'VBD', u'RB', u'VB', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[2655, 2658], [2659, 2669], [2670, 2672], [2673, 2680], [2681, 2683], [2684, 2689], [2690, 2699], [2700, 2702], [2703, 2707], [2707, 2708], [2709, 2712], [2713, 2720], [2721, 2723], [2724, 2728], [2728, 2729], [2730, 2736], [2737, 2742], [2743, 2748], [2749, 2752], [2753, 2756], [2757, 2761], [2762, 2768], [2769, 2774], [2775, 2779], [2779, 2780]]}) 
answer: set([u'gendarmenmarkt', u'cathedral', u'border', u'french'])

Does the Gendarmenmarkt border the French Cathedral?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the Gendarmenmarkt borders the French Cathedral.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the Gendarmenmarkt borders the French Cathedral.')
 +    where 'Yes, the Gendarmenmarkt borders the French Cathedral.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6050>.answer
_____________________________ test_yesno[param56] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6170>, <src.tfidf.TF_IDF object at 0x7fbca2d36dd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6170>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.48217740654945374, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11844, 11847], [11848, 11850], [11850, 11851]]}) 
answer: set([u'a', u'mathematician', u'pascal', u'french'])
candidate Sentence: (0.37509158253669739, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[570, 576], [577, 580], [581, 582], [583, 596], [597, 599], [600, 603], [604, 609], [610, 615], [615, 616]]}) 
answer: set([u'french'])
candidate Sentence: (0.22028812766075134, {u'tokens': [u'Blaise_Pascal', u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'blaise_pascal', u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'JJ', u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 13], [17, 23], [24, 30], [31, 32], [33, 34], [34, 35], [36, 37], [37, 39], [40, 50], [51, 53], [54, 70], [70, 71], [72, 78], [78, 79], [80, 82], [83, 93], [94, 96], [97, 102], [102, 103], [104, 107], [108, 109], [110, 116], [117, 130], [130, 131], [132, 141], [141, 142], [143, 146], [147, 156], [157, 168], [168, 169]]}) 
answer: set([])
candidate Sentence: (0.16590601205825806, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[32481, 32487], [32488, 32494], [32494, 32495], [32496, 32509], [32509, 32510], [32511, 32520], [32520, 32521], [32522, 32525], [32526, 32533], [32534, 32539], [32540, 32543], [32544, 32545], [32545, 32549], [32549, 32550], [32551, 32552], [32553, 32560], [32560, 32561], [32562, 32568], [32568, 32569]]}) 
answer: set([u'a', u'french'])
candidate Sentence: (0.16478718817234039, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[31042, 31044], [31045, 31055], [31055, 31056], [31057, 31063], [31064, 31066], [31067, 31075], [31076, 31078], [31079, 31082], [31083, 31085], [31086, 31089], [31090, 31094], [31095, 31104], [31105, 31112], [31113, 31115], [31116, 31119], [31120, 31126], [31127, 31136], [31137, 31143], [31144, 31147], [31148, 31150], [31151, 31155], [31156, 31161], [31162, 31164], [31165, 31168], [31169, 31171], [31172, 31175], [31176, 31184], [31185, 31192], [31193, 31195], [31196, 31202], [31203, 31208], [31208, 31209]]}) 
answer: set([u'a', u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6170>.answer
_____________________________ test_yesno[param57] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd61b8>, <src.tfidf.TF_IDF object at 0x7fbca2d36dd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd61b8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.48217740654945374, {u'tokens': [u'How', u'so', u'?'], u'lemmas': [u'how', u'so', u'?'], u'pos': [u'WRB', u'RB', u'.'], u'char_offsets': [[11844, 11847], [11848, 11850], [11850, 11851]]}) 
answer: set([u'a', u'mathematician', u'pascal', u'french'])
candidate Sentence: (0.37509158253669739, {u'tokens': [u'Pascal', u'was', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'lemmas': [u'Pascal', u'be', u'a', u'mathematician', u'of', u'the', u'first', u'order', u'.'], u'pos': [u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[570, 576], [577, 580], [581, 582], [583, 596], [597, 599], [600, 603], [604, 609], [610, 615], [615, 616]]}) 
answer: set([u'french'])
candidate Sentence: (0.22028812766075134, {u'tokens': [u'Blaise_Pascal', u'Blaise', u'Pascal', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-RRB-', u'was', u'a', u'French', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'lemmas': [u'blaise_pascal', u'Blaise', u'Pascal', u'-lrb-', u'-rrb-', u',', u'-lrb-', u'b.', u'1623-06-19', u'in', u'Clermont-Ferrand', u',', u'France', u',', u'd.', u'1662-08-19', u'in', u'Paris', u'-rrb-', u'be', u'a', u'french', u'mathematician', u',', u'physicist', u',', u'and', u'religious', u'philosopher', u'.'], u'pos': [u'JJ', u'NNP', u'NNP', u'-LRB-', u'-RRB-', u',', u'-LRB-', u'FW', u'CD', u'IN', u'NNP', u',', u'NNP', u',', u'NNP', u'CD', u'IN', u'NNP', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 13], [17, 23], [24, 30], [31, 32], [33, 34], [34, 35], [36, 37], [37, 39], [40, 50], [51, 53], [54, 70], [70, 71], [72, 78], [78, 79], [80, 82], [83, 93], [94, 96], [97, 102], [102, 103], [104, 107], [108, 109], [110, 116], [117, 130], [130, 131], [132, 141], [141, 142], [143, 146], [147, 156], [157, 168], [168, 169]]}) 
answer: set([])
candidate Sentence: (0.16590601205825806, {u'tokens': [u'Blaise', u'Pascal', u':', u'Mathematician', u',', u'Physicist', u',', u'and', u'Thinker', u'about', u'God', u'-LRB-', u'1995', u'-RRB-', u'*', u'Adamson', u',', u'Donald', u'.'], u'lemmas': [u'Blaise', u'Pascal', u':', u'mathematician', u',', u'physicist', u',', u'and', u'thinker', u'about', u'God', u'-lrb-', u'1995', u'-rrb-', u'*', u'Adamson', u',', u'Donald', u'.'], u'pos': [u'NNP', u'NNP', u':', u'NN', u',', u'NN', u',', u'CC', u'NN', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[32481, 32487], [32488, 32494], [32494, 32495], [32496, 32509], [32509, 32510], [32511, 32520], [32520, 32521], [32522, 32525], [32526, 32533], [32534, 32539], [32540, 32543], [32544, 32545], [32545, 32549], [32549, 32550], [32551, 32552], [32553, 32560], [32560, 32561], [32562, 32568], [32568, 32569]]}) 
answer: set([u'a', u'french'])
candidate Sentence: (0.16478718817234039, {u'tokens': [u'In', u'literature', u',', u'Pascal', u'is', u'regarded', u'as', u'one', u'of', u'the', u'most', u'important', u'authors', u'of', u'the', u'French', u'Classical', u'Period', u'and', u'is', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'masters', u'of', u'French', u'prose', u'.'], u'lemmas': [u'in', u'literature', u',', u'Pascal', u'be', u'regard', u'as', u'one', u'of', u'the', u'most', u'important', u'author', u'of', u'the', u'french', u'classical', u'period', u'and', u'be', u'read', u'today', u'as', u'one', u'of', u'the', u'greatest', u'master', u'of', u'french', u'prose', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'IN', u'DT', u'RBS', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'VBN', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJS', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[31042, 31044], [31045, 31055], [31055, 31056], [31057, 31063], [31064, 31066], [31067, 31075], [31076, 31078], [31079, 31082], [31083, 31085], [31086, 31089], [31090, 31094], [31095, 31104], [31105, 31112], [31113, 31115], [31116, 31119], [31120, 31126], [31127, 31136], [31137, 31143], [31144, 31147], [31148, 31150], [31151, 31155], [31156, 31161], [31162, 31164], [31165, 31168], [31169, 31171], [31172, 31175], [31176, 31184], [31185, 31192], [31193, 31195], [31196, 31202], [31203, 31208], [31208, 31209]]}) 
answer: set([u'a', u'mathematician'])

Was Pascal a French mathematician?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd61b8>.answer
_____________________________ test_yesno[param60] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6290>, <src.tfidf.TF_IDF object at 0x7fbca5084590>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('Some butterflies make sounds.') == True
E                +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6290>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.25117450952529907, {u'tokens': [u'The', u'Journal', u'of', u'Experimental', u'Biology', u'202:95', u'102', u'Some', u'butterflies', u'have', u'organs', u'of', u'hearing', u'and', u'some', u'species', u'are', u'also', u'known', u'to', u'make', u'stridulatory', u'and', u'clicking', u'sounds', u'.'], u'lemmas': [u'the', u'Journal', u'of', u'experimental', u'biology', u'202:95', u'102', u'some', u'butterfly', u'have', u'organ', u'of', u'hearing', u'and', u'some', u'species', u'be', u'also', u'know', u'to', u'make', u'stridulatory', u'and', u'click', u'sound', u'.'], u'pos': [u'DT', u'NNP', u'IN', u'JJ', u'NN', u'CD', u'CD', u'DT', u'NNS', u'VBP', u'NNS', u'IN', u'NN', u'CC', u'DT', u'NNS', u'VBP', u'RB', u'VBN', u'TO', u'VB', u'JJ', u'CC', u'VBG', u'NNS', u'.'], u'char_offsets': [[18129, 18132], [18133, 18140], [18141, 18143], [18144, 18156], [18157, 18164], [18165, 18171], [18173, 18176], [18178, 18182], [18183, 18194], [18195, 18199], [18200, 18206], [18207, 18209], [18210, 18217], [18218, 18221], [18222, 18226], [18227, 18234], [18235, 18238], [18239, 18243], [18244, 18249], [18250, 18252], [18253, 18257], [18258, 18270], [18271, 18274], [18275, 18283], [18284, 18290], [18290, 18291]]}) 
answer: set([])
candidate Sentence: (0.17803215980529785, {u'tokens': [u'This', u'helps', u'making', u'them', u'unpalatable', u'to', u'birds', u'and', u'other', u'predators', u'.'], u'lemmas': [u'this', u'help', u'make', u'they', u'unpalatable', u'to', u'bird', u'and', u'other', u'predator', u'.'], u'pos': [u'DT', u'VBZ', u'VBG', u'PRP', u'JJ', u'TO', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5198, 5202], [5203, 5208], [5209, 5215], [5216, 5220], [5221, 5232], [5233, 5235], [5236, 5241], [5242, 5245], [5246, 5251], [5252, 5261], [5261, 5262]]}) 
answer: set([u'butterfly', u'sound'])
candidate Sentence: (0.16425611078739166, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[22291, 22297], [22297, 22298], [22299, 22300], [22301, 22302], [22303, 22304], [22304, 22305], [22306, 22309], [22310, 22312], [22313, 22320], [22320, 22321], [22322, 22327], [22328, 22330], [22331, 22337], [22338, 22341], [22342, 22347], [22348, 22350], [22351, 22354], [22355, 22356], [22356, 22360], [22360, 22361], [22362, 22366], [22367, 22371], [22372, 22379], [22380, 22387], [22388, 22399], [22400, 22406], [22407, 22419], [22420, 22424], [22424, 22425]]}) 
answer: set([u'butterfly', u'sound', u'make'])
candidate Sentence: (0.15057370066642761, {u'tokens': [u'The', u'chrysalis', u'is', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segments', u'or', u'produce', u'sounds', u'to', u'scare', u'potential', u'predators', u'.'], u'lemmas': [u'the', u'chrysali', u'be', u'usually', u'incapable', u'of', u'movement', u',', u'although', u'some', u'species', u'can', u'rapidly', u'move', u'the', u'abdominal', u'segment', u'or', u'produce', u'sound', u'to', u'scare', u'potential', u'predator', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'IN', u'NN', u',', u'IN', u'DT', u'NNS', u'MD', u'RB', u'VB', u'DT', u'JJ', u'NNS', u'CC', u'VB', u'NNS', u'TO', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[7342, 7345], [7346, 7355], [7356, 7358], [7359, 7366], [7367, 7376], [7377, 7379], [7380, 7388], [7388, 7389], [7390, 7398], [7399, 7403], [7404, 7411], [7412, 7415], [7416, 7423], [7424, 7428], [7429, 7432], [7433, 7442], [7443, 7451], [7452, 7454], [7455, 7462], [7463, 7469], [7470, 7472], [7473, 7478], [7479, 7488], [7489, 7498], [7498, 7499]]}) 
answer: set([u'butterfly', u'make'])
candidate Sentence: (0.13626386225223541, {u'tokens': [u'Does', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'Bicyclus', u'anynana', u'.'], u'lemmas': [u'do', u'predation', u'maintain', u'eyespot', u'plasticity', u'in', u'bicyclus', u'anynana', u'.'], u'pos': [u'VBZ', u'NN', u'VB', u'NN', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13643, 13647], [13648, 13657], [13658, 13666], [13667, 13674], [13675, 13685], [13686, 13688], [13689, 13697], [13698, 13705], [13705, 13706]]}) 
answer: set([u'butterfly', u'sound', u'make'])

Do butterflies make sounds?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Some butterflies make sounds.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('Some butterflies make sounds.') == True
 +  where 'Some butterflies make sounds.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6290>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param61] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd62d8>, <src.tfidf.TF_IDF object at 0x7fbca5084590>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, butterflies have two eyes.')
E                +    where 'Yes, butterflies have two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd62d8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.51956689357757568, {u'tokens': [u'They', u'have', u'two', u'antennae', u',', u'two', u'compound', u'eyes', u',', u'and', u'a', u'proboscis', u'.'], u'lemmas': [u'they', u'have', u'two', u'antenna', u',', u'two', u'compound', u'eye', u',', u'and', u'a', u'proboscis', u'.'], u'pos': [u'PRP', u'VBP', u'CD', u'NNS', u',', u'CD', u'NN', u'NNS', u',', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[9309, 9313], [9314, 9318], [9319, 9322], [9323, 9331], [9331, 9332], [9333, 9336], [9337, 9345], [9346, 9350], [9350, 9351], [9352, 9355], [9356, 9357], [9358, 9367], [9367, 9368]]}) 
answer: set([u'butterfly'])
candidate Sentence: (0.32168260216712952, {u'tokens': [u'Parts', u'of', u'an', u'adult', u'butterfly', u'Butterflies', u'have', u'two', u'antennae', u',', u'two', u'compound', u'eyes', u',', u'and', u'a', u'proboscis', u'Adult', u'butterflies', u'have', u'four', u'wings', u':', u'a', u'forewing', u'and', u'hindwing', u'on', u'both', u'the', u'left', u'and', u'the', u'right', u'side', u'of', u'the', u'body', u'.'], u'lemmas': [u'part', u'of', u'a', u'adult', u'butterfly', u'butterfly', u'have', u'two', u'antenna', u',', u'two', u'compound', u'eye', u',', u'and', u'a', u'proboscis', u'adult', u'butterfly', u'have', u'four', u'wing', u':', u'a', u'forewing', u'and', u'hindwing', u'on', u'both', u'the', u'left', u'and', u'the', u'right', u'side', u'of', u'the', u'body', u'.'], u'pos': [u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'VBP', u'CD', u'NNS', u',', u'CD', u'NN', u'NNS', u',', u'CC', u'DT', u'NN', u'NN', u'NNS', u'VBP', u'CD', u'NNS', u':', u'DT', u'NN', u'CC', u'NN', u'IN', u'CC', u'DT', u'NN', u'CC', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[9030, 9035], [9036, 9038], [9039, 9041], [9042, 9047], [9048, 9057], [9058, 9069], [9070, 9074], [9075, 9078], [9079, 9087], [9087, 9088], [9089, 9092], [9093, 9101], [9102, 9106], [9106, 9107], [9108, 9111], [9112, 9113], [9114, 9123], [9125, 9130], [9131, 9142], [9143, 9147], [9148, 9152], [9153, 9158], [9158, 9159], [9160, 9161], [9162, 9170], [9171, 9174], [9175, 9183], [9184, 9186], [9187, 9191], [9192, 9195], [9196, 9200], [9201, 9204], [9205, 9208], [9209, 9214], [9215, 9219], [9220, 9222], [9223, 9226], [9227, 9231], [9231, 9232]]}) 
answer: set([])
candidate Sentence: (0.16460815072059631, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[22291, 22297], [22297, 22298], [22299, 22300], [22301, 22302], [22303, 22304], [22304, 22305], [22306, 22309], [22310, 22312], [22313, 22320], [22320, 22321], [22322, 22327], [22328, 22330], [22331, 22337], [22338, 22341], [22342, 22347], [22348, 22350], [22351, 22354], [22355, 22356], [22356, 22360], [22360, 22361], [22362, 22366], [22367, 22371], [22372, 22379], [22380, 22387], [22388, 22399], [22400, 22406], [22407, 22419], [22420, 22424], [22424, 22425]]}) 
answer: set([u'butterfly', u'eye', u'two', u'have'])
candidate Sentence: (0.15732337534427643, {u'tokens': [u'In', u'Chinese', u'culture', u'two', u'butterflies', u'flying', u'together', u'are', u'a', u'symbol', u'of', u'love', u'.'], u'lemmas': [u'in', u'chinese', u'culture', u'two', u'butterfly', u'fly', u'together', u'be', u'a', u'symbol', u'of', u'love', u'.'], u'pos': [u'IN', u'JJ', u'NN', u'CD', u'NNS', u'VBG', u'RB', u'VBP', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[28243, 28245], [28246, 28253], [28254, 28261], [28262, 28265], [28266, 28277], [28278, 28284], [28285, 28293], [28294, 28297], [28298, 28299], [28300, 28306], [28307, 28309], [28310, 28314], [28314, 28315]]}) 
answer: set([u'eye', u'have'])
candidate Sentence: (0.15464065968990326, {u'tokens': [u'These', u'butterflies', u',', u'endemic', u'to', u'Africa', u',', u'have', u'two', u'distinct', u'phenotypic', u'forms', u'that', u'alternate', u'according', u'to', u'the', u'season', u'.'], u'lemmas': [u'these', u'butterfly', u',', u'endemic', u'to', u'Africa', u',', u'have', u'two', u'distinct', u'phenotypic', u'form', u'that', u'alternate', u'accord', u'to', u'the', u'season', u'.'], u'pos': [u'DT', u'NNS', u',', u'JJ', u'TO', u'NNP', u',', u'VBP', u'CD', u'JJ', u'JJ', u'NNS', u'WDT', u'JJ', u'VBG', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[13094, 13099], [13100, 13111], [13111, 13112], [13113, 13120], [13121, 13123], [13124, 13130], [13130, 13131], [13132, 13136], [13137, 13140], [13141, 13149], [13150, 13160], [13161, 13166], [13167, 13171], [13172, 13181], [13182, 13191], [13192, 13194], [13195, 13198], [13199, 13205], [13205, 13206]]}) 
answer: set([u'eye'])

Do butterflies have two eyes?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, butterflies have two eyes.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, butterflies have two eyes.')
 +    where 'Yes, butterflies have two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd62d8>.answer
_____________________________ test_yesno[param62] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6320>, <src.tfidf.TF_IDF object at 0x7fbca5084590>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
E                +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6320>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.57635015249252319, {u'tokens': [u'Also', u',', u'in', u'the', u'Philippines', u',', u'a', u'lingering', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'is', u'taken', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'has', u'died', u'or', u'will', u'soon', u'die', u'.'], u'lemmas': [u'also', u',', u'in', u'the', u'Philippines', u',', u'a', u'linger', u'black', u'butterfly', u'or', u'moth', u'in', u'the', u'house', u'be', u'take', u'to', u'mean', u'that', u'someone', u'in', u'the', u'family', u'have', u'die', u'or', u'will', u'soon', u'die', u'.'], u'pos': [u'RB', u',', u'IN', u'DT', u'NNPS', u',', u'DT', u'VBG', u'JJ', u'NN', u'CC', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'IN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'VBN', u'CC', u'MD', u'RB', u'VB', u'.'], u'char_offsets': [[30419, 30423], [30423, 30424], [30425, 30427], [30428, 30431], [30432, 30443], [30443, 30444], [30445, 30446], [30447, 30456], [30457, 30462], [30463, 30472], [30473, 30475], [30476, 30480], [30481, 30483], [30484, 30487], [30488, 30493], [30494, 30496], [30497, 30502], [30503, 30505], [30506, 30510], [30511, 30515], [30516, 30523], [30524, 30526], [30527, 30530], [30531, 30537], [30538, 30541], [30542, 30546], [30547, 30549], [30550, 30554], [30555, 30559], [30560, 30563], [30563, 30564]]}) 
answer: set([])
candidate Sentence: (0.144028440117836, {u'tokens': [u'Some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'lands', u'on', u'you', u'it', u'means', u'good', u'luck', u'.'], u'lemmas': [u'some', u'people', u'say', u'that', u'when', u'a', u'butterfly', u'land', u'on', u'you', u'it', u'mean', u'good', u'luck', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'IN', u'WRB', u'DT', u'NN', u'NNS', u'IN', u'PRP', u'PRP', u'VBZ', u'JJ', u'NN', u'.'], u'char_offsets': [[29400, 29404], [29405, 29411], [29412, 29415], [29416, 29420], [29421, 29425], [29426, 29427], [29428, 29437], [29438, 29443], [29444, 29446], [29447, 29450], [29451, 29453], [29454, 29459], [29460, 29464], [29465, 29469], [29469, 29470]]}) 
answer: set([u'moth', u'die', u'someone', u'black', u'have'])
candidate Sentence: (0.11478326469659805, {u'tokens': [u'Dennis', u',', u'R', u'L', u'H', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-LRB-', u'2005', u'-RRB-', u'Does', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'lemmas': [u'Dennis', u',', u'r', u'l', u'h', u',', u'Tim', u'G.', u'Shreeve', u',', u'Henry', u'R.', u'Arnold', u'and', u'David', u'B.', u'Roy', u'-lrb-', u'2005', u'-rrb-', u'do', u'diet', u'breadth', u'control', u'herbivorous', u'insect', u'distribution', u'size', u'?'], u'pos': [u'NNP', u',', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'VBZ', u'NN', u'NN', u'NN', u'JJ', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[22291, 22297], [22297, 22298], [22299, 22300], [22301, 22302], [22303, 22304], [22304, 22305], [22306, 22309], [22310, 22312], [22313, 22320], [22320, 22321], [22322, 22327], [22328, 22330], [22331, 22337], [22338, 22341], [22342, 22347], [22348, 22350], [22351, 22354], [22355, 22356], [22356, 22360], [22360, 22361], [22362, 22366], [22367, 22371], [22372, 22379], [22380, 22387], [22388, 22399], [22400, 22406], [22407, 22419], [22420, 22424], [22424, 22425]]}) 
answer: set([u'a', u'someone', u'that', u'moth', u'die', u'black', u'have', u'mean'])
candidate Sentence: (0.11013411730527878, {u'tokens': [u'According', u'to', u'the', u'Butterflies', u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'is', u'seen', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'living', u',', u'dying', u',', u'or', u'already', u'dead', u'.'], u'lemmas': [u'accord', u'to', u'the', u'Butterflies', u'chapter', u'in', u',', u'by', u'Lafcadio', u'Hearn', u',', u'a', u'butterfly', u'be', u'see', u'as', u'the', u'personification', u'of', u'a', u'person', u"'s", u'soul', u';', u'whether', u'they', u'be', u'live', u',', u'die', u',', u'or', u'already', u'dead', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'NNPS', u'NN', u'IN', u',', u'IN', u'NNP', u'NNP', u',', u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u':', u'IN', u'PRP', u'VB', u'VBG', u',', u'VBG', u',', u'CC', u'RB', u'JJ', u'.'], u'char_offsets': [[26840, 26849], [26850, 26852], [26853, 26856], [26857, 26868], [26869, 26876], [26877, 26879], [26880, 26881], [26882, 26884], [26885, 26893], [26894, 26899], [26899, 26900], [26901, 26902], [26903, 26912], [26913, 26915], [26916, 26920], [26921, 26923], [26924, 26927], [26928, 26943], [26944, 26946], [26947, 26948], [26949, 26955], [26955, 26957], [26958, 26962], [26962, 26963], [26964, 26971], [26972, 26976], [26977, 26979], [26980, 26986], [26986, 26987], [26988, 26993], [26993, 26994], [26995, 26997], [26998, 27005], [27006, 27010], [27010, 27011]]}) 
answer: set([u'someone', u'that', u'moth', u'black', u'have', u'mean'])
candidate Sentence: (0.10647057741880417, {u'tokens': [u'Such', u'unpalatibility', u'is', u'advertised', u'using', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colours', u'.'], u'lemmas': [u'such', u'unpalatibility', u'be', u'advertise', u'use', u'bright', u'red', u',', u'orange', u',', u'black', u'or', u'white', u'warning', u'colour', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBG', u'JJ', u'NN', u',', u'NN', u',', u'JJ', u'CC', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[5263, 5267], [5268, 5282], [5283, 5285], [5286, 5296], [5297, 5302], [5303, 5309], [5310, 5313], [5313, 5314], [5315, 5321], [5321, 5322], [5323, 5328], [5329, 5331], [5332, 5337], [5338, 5345], [5346, 5353], [5353, 5354]]}) 
answer: set([u'a', u'someone', u'that', u'moth', u'die', u'have', u'mean'])

Does a black moth mean that someone has died?
Validity= False
Question Type = NA
Answer Type = NA
Answer = In the Philippines a black butterfly or moth mean that someone has died.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('In the Philippines a black butterfly or moth mean that someone has died.') == True
 +  where 'In the Philippines a black butterfly or moth mean that someone has died.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6320>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param65] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6368>, <src.tfidf.TF_IDF object at 0x7fbca1ddf350>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6368>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.79520457983016968, {u'tokens': [u'The', u'SI', u'unit', u'of', u'charge', u',', u'the', u'coulomb', u',', u'was', u'named', u'after', u'him', u'.'], u'lemmas': [u'the', u'SI', u'unit', u'of', u'charge', u',', u'the', u'coulomb', u',', u'be', u'name', u'after', u'he', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u',', u'VBD', u'VBN', u'IN', u'PRP', u'.'], u'char_offsets': [[232, 235], [236, 238], [239, 243], [244, 246], [247, 253], [253, 254], [255, 258], [259, 266], [266, 267], [268, 271], [272, 277], [278, 283], [284, 287], [287, 288]]}) 
answer: set([u'de', u'charles-augustin'])
candidate Sentence: (0.2411220371723175, {u'tokens': [u'He', u'discovered', u'an', u'inverse', u'relationship', u'of', u'the', u'force', u'between', u'electric', u'charges', u'and', u'the', u'square', u'of', u'its', u'distance', u',', u'later', u'named', u'after', u'him', u'as', u'Coulomb', u"'s", u'law', u'.'], u'lemmas': [u'he', u'discover', u'a', u'inverse', u'relationship', u'of', u'the', u'force', u'between', u'electric', u'charge', u'and', u'the', u'square', u'of', u'its', u'distance', u',', u'later', u'name', u'after', u'he', u'as', u'Coulomb', u"'s", u'law', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'RB', u'VBN', u'IN', u'PRP', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[1872, 1874], [1875, 1885], [1886, 1888], [1889, 1896], [1897, 1909], [1910, 1912], [1913, 1916], [1917, 1922], [1923, 1930], [1931, 1939], [1940, 1947], [1948, 1951], [1952, 1955], [1956, 1962], [1963, 1965], [1966, 1969], [1970, 1978], [1978, 1979], [1980, 1985], [1986, 1991], [1992, 1997], [1998, 2001], [2002, 2004], [2005, 2012], [2012, 2014], [2015, 2018], [2018, 2019]]}) 
answer: set([u'si', u'de', u'unit', u'charles-augustin'])
candidate Sentence: (0.19181300699710846, {u'tokens': [u'Charles-Augustin_de_Coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'charles-augustin_de_coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 27], [31, 47], [48, 50], [51, 58], [59, 60], [60, 62], [63, 67], [68, 72], [74, 76], [77, 83], [84, 88], [88, 89], [90, 93], [94, 95], [96, 102], [103, 112], [112, 113]]}) 
answer: set([u'name', u'of', u'after', u'charge', u'si', u'the', u'unit'])
candidate Sentence: (0.067458160221576691, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'lAcadmie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'thorique', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'lacadmie', u'royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2721, 2723], [2724, 2728], [2728, 2729], [2730, 2733], [2734, 2744], [2745, 2754], [2755, 2757], [2758, 2771], [2772, 2775], [2776, 2778], [2779, 2784], [2785, 2787], [2788, 2795], [2796, 2798], [2799, 2802], [2803, 2813], [2814, 2817], [2818, 2822], [2823, 2825], [2826, 2831], [2832, 2840], [2841, 2843], [2844, 2852], [2853, 2859], [2860, 2863], [2864, 2872], [2872, 2873], [2874, 2881], [2881, 2882], [2883, 2887], [2889, 2890], [2890, 2901], [2902, 2910], [2911, 2914], [2915, 2930], [2931, 2933], [2934, 2941], [2942, 2945], [2946, 2949], [2950, 2960], [2961, 2963], [2964, 2969], [2970, 2974], [2974, 2975], [2976, 2984], [2984, 2985]]}) 
answer: set([u'name', u'coulomb', u'after', u'charge', u'si', u'unit', u'charles-augustin'])
candidate Sentence: (0.061103876680135727, {u'tokens': [u'He', u'used', u'the', u'instrument', u'with', u'great', u'success', u'for', u'the', u'experimental', u'investigation', u'of', u'the', u'distribution', u'of', u'charge', u'on', u'surfaces', u',', u'of', u'the', u'laws', u'of', u'electrical', u'and', u'magnetic', u'force', u'and', u'of', u'the', u'mathematical', u'theory', u'of', u'which', u'he', u'may', u'also', u'be', u'regarded', u'as', u'the', u'founder', u'.'], u'lemmas': [u'he', u'use', u'the', u'instrument', u'with', u'great', u'success', u'for', u'the', u'experimental', u'investigation', u'of', u'the', u'distribution', u'of', u'charge', u'on', u'surface', u',', u'of', u'the', u'law', u'of', u'electrical', u'and', u'magnetic', u'force', u'and', u'of', u'the', u'mathematical', u'theory', u'of', u'which', u'he', u'may', u'also', u'be', u'regard', u'as', u'the', u'founder', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNS', u',', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'CC', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJ', u'NN', u'IN', u'WDT', u'PRP', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[3374, 3376], [3377, 3381], [3382, 3385], [3386, 3396], [3397, 3401], [3402, 3407], [3408, 3415], [3416, 3419], [3420, 3423], [3424, 3436], [3437, 3450], [3451, 3453], [3454, 3457], [3458, 3470], [3471, 3473], [3474, 3480], [3481, 3483], [3484, 3492], [3492, 3493], [3494, 3496], [3497, 3500], [3501, 3505], [3506, 3508], [3509, 3519], [3520, 3523], [3524, 3532], [3533, 3538], [3539, 3542], [3543, 3545], [3546, 3549], [3550, 3562], [3563, 3569], [3570, 3572], [3573, 3578], [3579, 3581], [3582, 3585], [3586, 3590], [3591, 3593], [3594, 3602], [3603, 3605], [3606, 3609], [3610, 3617], [3617, 3618]]}) 
answer: set([u'after', u'name', u'coulomb', u'de', u'si', u'unit', u'charles-augustin'])

Was the SI unit of charge named after Charles-Augustin de Coulomb?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6368>.answer
_____________________________ test_yesno[param66] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6488>, <src.tfidf.TF_IDF object at 0x7fbca1ddf350>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the SI unit of charge, the coulomb, was named after him.')
E                +    where 'Yes, the SI unit of charge, the coulomb, was named after him.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6488>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.79520457983016968, {u'tokens': [u'The', u'SI', u'unit', u'of', u'charge', u',', u'the', u'coulomb', u',', u'was', u'named', u'after', u'him', u'.'], u'lemmas': [u'the', u'SI', u'unit', u'of', u'charge', u',', u'the', u'coulomb', u',', u'be', u'name', u'after', u'he', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'IN', u'NN', u',', u'DT', u'NN', u',', u'VBD', u'VBN', u'IN', u'PRP', u'.'], u'char_offsets': [[232, 235], [236, 238], [239, 243], [244, 246], [247, 253], [253, 254], [255, 258], [259, 266], [266, 267], [268, 271], [272, 277], [278, 283], [284, 287], [287, 288]]}) 
answer: set([u'de', u'charles-augustin'])
candidate Sentence: (0.2411220371723175, {u'tokens': [u'He', u'discovered', u'an', u'inverse', u'relationship', u'of', u'the', u'force', u'between', u'electric', u'charges', u'and', u'the', u'square', u'of', u'its', u'distance', u',', u'later', u'named', u'after', u'him', u'as', u'Coulomb', u"'s", u'law', u'.'], u'lemmas': [u'he', u'discover', u'a', u'inverse', u'relationship', u'of', u'the', u'force', u'between', u'electric', u'charge', u'and', u'the', u'square', u'of', u'its', u'distance', u',', u'later', u'name', u'after', u'he', u'as', u'Coulomb', u"'s", u'law', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'RB', u'VBN', u'IN', u'PRP', u'IN', u'NNP', u'POS', u'NN', u'.'], u'char_offsets': [[1872, 1874], [1875, 1885], [1886, 1888], [1889, 1896], [1897, 1909], [1910, 1912], [1913, 1916], [1917, 1922], [1923, 1930], [1931, 1939], [1940, 1947], [1948, 1951], [1952, 1955], [1956, 1962], [1963, 1965], [1966, 1969], [1970, 1978], [1978, 1979], [1980, 1985], [1986, 1991], [1992, 1997], [1998, 2001], [2002, 2004], [2005, 2012], [2012, 2014], [2015, 2018], [2018, 2019]]}) 
answer: set([u'si', u'de', u'unit', u'charles-augustin'])
candidate Sentence: (0.19181300699710846, {u'tokens': [u'Charles-Augustin_de_Coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'charles-augustin_de_coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 27], [31, 47], [48, 50], [51, 58], [59, 60], [60, 62], [63, 67], [68, 72], [74, 76], [77, 83], [84, 88], [88, 89], [90, 93], [94, 95], [96, 102], [103, 112], [112, 113]]}) 
answer: set([u'name', u'of', u'after', u'charge', u'si', u'the', u'unit'])
candidate Sentence: (0.067458160221576691, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'lAcadmie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'thorique', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'lacadmie', u'royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2721, 2723], [2724, 2728], [2728, 2729], [2730, 2733], [2734, 2744], [2745, 2754], [2755, 2757], [2758, 2771], [2772, 2775], [2776, 2778], [2779, 2784], [2785, 2787], [2788, 2795], [2796, 2798], [2799, 2802], [2803, 2813], [2814, 2817], [2818, 2822], [2823, 2825], [2826, 2831], [2832, 2840], [2841, 2843], [2844, 2852], [2853, 2859], [2860, 2863], [2864, 2872], [2872, 2873], [2874, 2881], [2881, 2882], [2883, 2887], [2889, 2890], [2890, 2901], [2902, 2910], [2911, 2914], [2915, 2930], [2931, 2933], [2934, 2941], [2942, 2945], [2946, 2949], [2950, 2960], [2961, 2963], [2964, 2969], [2970, 2974], [2974, 2975], [2976, 2984], [2984, 2985]]}) 
answer: set([u'name', u'coulomb', u'after', u'charge', u'si', u'unit', u'charles-augustin'])
candidate Sentence: (0.061103876680135727, {u'tokens': [u'He', u'used', u'the', u'instrument', u'with', u'great', u'success', u'for', u'the', u'experimental', u'investigation', u'of', u'the', u'distribution', u'of', u'charge', u'on', u'surfaces', u',', u'of', u'the', u'laws', u'of', u'electrical', u'and', u'magnetic', u'force', u'and', u'of', u'the', u'mathematical', u'theory', u'of', u'which', u'he', u'may', u'also', u'be', u'regarded', u'as', u'the', u'founder', u'.'], u'lemmas': [u'he', u'use', u'the', u'instrument', u'with', u'great', u'success', u'for', u'the', u'experimental', u'investigation', u'of', u'the', u'distribution', u'of', u'charge', u'on', u'surface', u',', u'of', u'the', u'law', u'of', u'electrical', u'and', u'magnetic', u'force', u'and', u'of', u'the', u'mathematical', u'theory', u'of', u'which', u'he', u'may', u'also', u'be', u'regard', u'as', u'the', u'founder', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNS', u',', u'IN', u'DT', u'NNS', u'IN', u'JJ', u'CC', u'JJ', u'NN', u'CC', u'IN', u'DT', u'JJ', u'NN', u'IN', u'WDT', u'PRP', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[3374, 3376], [3377, 3381], [3382, 3385], [3386, 3396], [3397, 3401], [3402, 3407], [3408, 3415], [3416, 3419], [3420, 3423], [3424, 3436], [3437, 3450], [3451, 3453], [3454, 3457], [3458, 3470], [3471, 3473], [3474, 3480], [3481, 3483], [3484, 3492], [3492, 3493], [3494, 3496], [3497, 3500], [3501, 3505], [3506, 3508], [3509, 3519], [3520, 3523], [3524, 3532], [3533, 3538], [3539, 3542], [3543, 3545], [3546, 3549], [3550, 3562], [3563, 3569], [3570, 3572], [3573, 3578], [3579, 3581], [3582, 3585], [3586, 3590], [3591, 3593], [3594, 3602], [3603, 3605], [3606, 3609], [3610, 3617], [3617, 3618]]}) 
answer: set([u'after', u'name', u'coulomb', u'de', u'si', u'unit', u'charles-augustin'])

Was the SI unit of charge named after Charles-Augustin de Coulomb?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the SI unit of charge, the coulomb, was named after him.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the SI unit of charge, the coulomb, was named after him.')
 +    where 'Yes, the SI unit of charge, the coulomb, was named after him.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6488>.answer
_____________________________ test_yesno[param67] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd64d0>, <src.tfidf.TF_IDF object at 0x7fbca1ddf350>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd64d0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45567941665649414, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1756, 1760], [1761, 1764], [1765, 1771], [1772, 1774], [1775, 1781], [1781, 1782], [1783, 1787], [1788, 1791], [1792, 1796], [1797, 1799], [1800, 1807], [1807, 1808], [1809, 1811], [1812, 1815], [1816, 1824], [1825, 1827], [1828, 1830], [1831, 1839], [1839, 1840], [1841, 1844], [1845, 1849], [1850, 1852], [1853, 1856], [1857, 1860], [1861, 1870], [1870, 1871]]}) 
answer: set([u'de', u'ever', u'coulomb', u'charles-augustin'])
candidate Sentence: (0.19783049821853638, {u'tokens': [u'Charles-Augustin_de_Coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'charles-augustin_de_coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 27], [31, 47], [48, 50], [51, 58], [59, 60], [60, 62], [63, 67], [68, 72], [74, 76], [77, 83], [84, 88], [88, 89], [90, 93], [94, 95], [96, 102], [103, 112], [112, 113]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'at', u'la'])
candidate Sentence: (0.075174435973167419, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[2021, 2023], [2024, 2028], [2028, 2029], [2030, 2032], [2033, 2036], [2037, 2046], [2047, 2058], [2059, 2061], [2062, 2067], [2067, 2068]]}) 
answer: set([u'coulomb', u'la', u'de', u'employ', u'rochelle', u'ever', u'charles-augustin'])
candidate Sentence: (0.069815173745155334, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Collge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Collge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[506, 510], [511, 518], [519, 522], [523, 524], [525, 528], [528, 529], [530, 533], [534, 540], [541, 546], [547, 549], [550, 555], [556, 559], [560, 565], [566, 573], [574, 581], [582, 584], [585, 588], [589, 600], [601, 607], [608, 611], [612, 626], [626, 627]]}) 
answer: set([u'la', u'de', u'employ', u'rochelle', u'ever', u'charles-augustin'])
candidate Sentence: (0.067996606230735779, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'lAcadmie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'thorique', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'lacadmie', u'royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2721, 2723], [2724, 2728], [2728, 2729], [2730, 2733], [2734, 2744], [2745, 2754], [2755, 2757], [2758, 2771], [2772, 2775], [2776, 2778], [2779, 2784], [2785, 2787], [2788, 2795], [2796, 2798], [2799, 2802], [2803, 2813], [2814, 2817], [2818, 2822], [2823, 2825], [2826, 2831], [2832, 2840], [2841, 2843], [2844, 2852], [2853, 2859], [2860, 2863], [2864, 2872], [2872, 2873], [2874, 2881], [2881, 2882], [2883, 2887], [2889, 2890], [2890, 2901], [2902, 2910], [2911, 2914], [2915, 2930], [2931, 2933], [2934, 2941], [2942, 2945], [2946, 2949], [2950, 2960], [2961, 2963], [2964, 2969], [2970, 2974], [2974, 2975], [2976, 2984], [2984, 2985]]}) 
answer: set([u'coulomb', u'employ', u'rochelle', u'at', u'ever', u'charles-augustin'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd64d0>.answer
_____________________________ test_yesno[param68] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6518>, <src.tfidf.TF_IDF object at 0x7fbca1ddf350>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
E                +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6518>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45567941665649414, {u'tokens': [u'Upon', u'his', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'was', u'employed', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'lemmas': [u'upon', u'he', u'return', u'to', u'France', u',', u'with', u'the', u'rank', u'of', u'Captain', u',', u'he', u'be', u'employ', u'at', u'La', u'Rochelle', u',', u'the', u'Isle', u'of', u'Aix', u'and', u'Cherbourg', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'TO', u'NNP', u',', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'PRP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[1756, 1760], [1761, 1764], [1765, 1771], [1772, 1774], [1775, 1781], [1781, 1782], [1783, 1787], [1788, 1791], [1792, 1796], [1797, 1799], [1800, 1807], [1807, 1808], [1809, 1811], [1812, 1815], [1816, 1824], [1825, 1827], [1828, 1830], [1831, 1839], [1839, 1840], [1841, 1844], [1845, 1849], [1850, 1852], [1853, 1856], [1857, 1860], [1861, 1870], [1870, 1871]]}) 
answer: set([u'de', u'ever', u'coulomb', u'charles-augustin'])
candidate Sentence: (0.19783049821853638, {u'tokens': [u'Charles-Augustin_de_Coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-LRB-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-RRB-', u'was', u'a', u'French', u'physicist', u'.'], u'lemmas': [u'charles-augustin_de_coulomb', u'Charles-Augustin', u'de', u'Coulomb', u'-lrb-', u'14', u'June', u'1736', u'23', u'August', u'1806', u'-rrb-', u'be', u'a', u'french', u'physicist', u'.'], u'pos': [u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'CD', u'NNP', u'CD', u'CD', u'NNP', u'CD', u'-RRB-', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[0, 27], [31, 47], [48, 50], [51, 58], [59, 60], [60, 62], [63, 67], [68, 72], [74, 76], [77, 83], [84, 88], [88, 89], [90, 93], [94, 95], [96, 102], [103, 112], [112, 113]]}) 
answer: set([u'employ', u'rochelle', u'ever', u'at', u'la'])
candidate Sentence: (0.075174435973167419, {u'tokens': [u'In', u'1781', u',', u'he', u'was', u'stationed', u'permanently', u'at', u'Paris', u'.'], u'lemmas': [u'in', u'1781', u',', u'he', u'be', u'station', u'permanently', u'at', u'Paris', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'VBN', u'RB', u'IN', u'NNP', u'.'], u'char_offsets': [[2021, 2023], [2024, 2028], [2028, 2029], [2030, 2032], [2033, 2036], [2037, 2046], [2047, 2058], [2059, 2061], [2062, 2067], [2067, 2068]]}) 
answer: set([u'coulomb', u'la', u'de', u'employ', u'rochelle', u'ever', u'charles-augustin'])
candidate Sentence: (0.069815173745155334, {u'tokens': [u'When', u'Coulomb', u'was', u'a', u'boy', u',', u'the', u'family', u'moved', u'to', u'Paris', u'and', u'there', u'Coulomb', u'studied', u'at', u'the', u'prestigious', u'Collge', u'des', u'Quatre-Nations', u'.'], u'lemmas': [u'when', u'Coulomb', u'be', u'a', u'boy', u',', u'the', u'family', u'move', u'to', u'Paris', u'and', u'there', u'Coulomb', u'study', u'at', u'the', u'prestigious', u'Collge', u'des', u'Quatre-Nations', u'.'], u'pos': [u'WRB', u'NNP', u'VBD', u'DT', u'NN', u',', u'DT', u'NN', u'VBD', u'TO', u'NNP', u'CC', u'EX', u'NNP', u'VBN', u'IN', u'DT', u'JJ', u'NNP', u'FW', u'NNP', u'.'], u'char_offsets': [[506, 510], [511, 518], [519, 522], [523, 524], [525, 528], [528, 529], [530, 533], [534, 540], [541, 546], [547, 549], [550, 555], [556, 559], [560, 565], [566, 573], [574, 581], [582, 584], [585, 588], [589, 600], [601, 607], [608, 611], [612, 626], [626, 627]]}) 
answer: set([u'la', u'de', u'employ', u'rochelle', u'ever', u'charles-augustin'])
candidate Sentence: (0.067996606230735779, {u'tokens': [u'In', u'1784', u',', u'his', u'Recherches', u'thoriques', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'Histoire', u'de', u'lAcadmie', u'Royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-LRB-', u'Theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-RRB-', u'appeared', u'.'], u'lemmas': [u'in', u'1784', u',', u'he', u'recherch', u'thorique', u'et', u'exprimentales', u'sur', u'la', u'force', u'de', u'torsion', u'et', u'sur', u"l'lasticit", u'des', u'fils', u'de', u'metal', u'histoire', u'de', u'lacadmie', u'royale', u'des', u'Sciences', u',', u'229-269', u',', u'1784', u'-lrb-', u'theoretical', u'research', u'and', u'experimentation', u'on', u'torsion', u'and', u'the', u'elasticity', u'of', u'metal', u'wire', u'-rrb-', u'appear', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP$', u'NNS', u'NNS', u'FW', u'FW', u'FW', u'FW', u'NN', u'IN', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'FW', u'NN', u'FW', u'FW', u'FW', u'FW', u'FW', u'NNPS', u',', u'CD', u',', u'CD', u'-LRB-', u'JJ', u'NN', u'CC', u'NN', u'IN', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NN', u'-RRB-', u'VBD', u'.'], u'char_offsets': [[2721, 2723], [2724, 2728], [2728, 2729], [2730, 2733], [2734, 2744], [2745, 2754], [2755, 2757], [2758, 2771], [2772, 2775], [2776, 2778], [2779, 2784], [2785, 2787], [2788, 2795], [2796, 2798], [2799, 2802], [2803, 2813], [2814, 2817], [2818, 2822], [2823, 2825], [2826, 2831], [2832, 2840], [2841, 2843], [2844, 2852], [2853, 2859], [2860, 2863], [2864, 2872], [2872, 2873], [2874, 2881], [2881, 2882], [2883, 2887], [2889, 2890], [2890, 2901], [2902, 2910], [2911, 2914], [2915, 2930], [2931, 2933], [2934, 2941], [2942, 2945], [2946, 2949], [2950, 2960], [2961, 2963], [2964, 2969], [2970, 2974], [2974, 2975], [2976, 2984], [2984, 2985]]}) 
answer: set([u'coulomb', u'employ', u'rochelle', u'at', u'ever', u'charles-augustin'])

Was Charles-Augustin de Coulomb ever employed at La Rochelle?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.')
 +    where 'Yes, upon his return to France, with the rank of Captain, he was employed at La Rochelle.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6518>.answer
_____________________________ test_yesno[param69] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd63f8>, <src.tfidf.TF_IDF object at 0x7fbca451bbd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd63f8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39415493607521057, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24792, 24795], [24796, 24805], [24806, 24808], [24809, 24815], [24816, 24823], [24824, 24827], [24828, 24833], [24833, 24834]]}) 
answer: set([u'and', u'analytical', u'tonal'])
candidate Sentence: (0.34713920950889587, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1658, 1664], [1665, 1672], [1673, 1675], [1676, 1689], [1690, 1692], [1693, 1696], [1697, 1701], [1702, 1707], [1708, 1710], [1711, 1719], [1720, 1729], [1729, 1730], [1731, 1739], [1740, 1743], [1744, 1750], [1751, 1760], [1761, 1763], [1764, 1771], [1772, 1775], [1776, 1781], [1782, 1785], [1786, 1794], [1794, 1795]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17517881095409393, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24393, 24396], [24397, 24402], [24403, 24409], [24410, 24412], [24413, 24422], [24423, 24425], [24426, 24430], [24431, 24440], [24441, 24443], [24444, 24453], [24454, 24458], [24459, 24464], [24465, 24466], [24467, 24475], [24475, 24476], [24477, 24486], [24487, 24492], [24493, 24502], [24502, 24503], [24504, 24509], [24510, 24512], [24513, 24517], [24518, 24523], [24524, 24526], [24527, 24533], [24534, 24536], [24537, 24541], [24542, 24544], [24545, 24552], [24553, 24562], [24563, 24564], [24564, 24568], [24568, 24569], [24570, 24572], [24572, 24574], [24575, 24581], [24582, 24589], [24590, 24592], [24593, 24599], [24600, 24605], [24606, 24611], [24612, 24621], [24621, 24622], [24623, 24626], [24627, 24632], [24633, 24636], [24637, 24639], [24640, 24643], [24644, 24646], [24647, 24652], [24653, 24656], [24657, 24668], [24668, 24669], [24670, 24672], [24673, 24678], [24679, 24688], [24688, 24689], [24690, 24694], [24695, 24696], [24696, 24700], [24700, 24701], [24702, 24715], [24716, 24718], [24719, 24726], [24726, 24727], [24728, 24734], [24734, 24735], [24736, 24738], [24738, 24740], [24741, 24744], [24745, 24746], [24747, 24752], [24753, 24755], [24756, 24760], [24761, 24765], [24766, 24775], [24776, 24779], [24780, 24787], [24787, 24788]]}) 
answer: set([u'analytical', u'all', u'speak'])
candidate Sentence: (0.16434182226657867, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40576, 40579], [40580, 40584], [40585, 40586], [40587, 40589], [40590, 40591], [40592, 40600], [40601, 40602], [40603, 40606], [40607, 40611], [40612, 40614], [40615, 40617], [40618, 40620], [40621, 40626], [40627, 40634], [40634, 40635]]}) 
answer: set([u'and', u'all', u'tonal', u'variety', u'of', u'analytical', u'speak'])
candidate Sentence: (0.15403193235397339, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5957, 5960], [5961, 5971], [5972, 5979], [5980, 5983], [5984, 5992], [5993, 5995], [5996, 5999], [6000, 6007], [6008, 6014], [6015, 6024], [6025, 6027], [6028, 6031], [6032, 6034], [6035, 6037], [6038, 6039], [6040, 6046], [6047, 6055], [6056, 6058], [6059, 6072], [6072, 6073]]}) 
answer: set([u'and', u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd63f8>.answer
_____________________________ test_yesno[param70] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6560>, <src.tfidf.TF_IDF object at 0x7fbca451bbd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6560>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39415493607521057, {u'tokens': [u'All', u'varieties', u'of', u'spoken', u'Chinese', u'use', u'tones', u'.'], u'lemmas': [u'all', u'variety', u'of', u'speak', u'chinese', u'use', u'tone', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'VBN', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[24792, 24795], [24796, 24805], [24806, 24808], [24809, 24815], [24816, 24823], [24824, 24827], [24828, 24833], [24833, 24834]]}) 
answer: set([u'and', u'analytical', u'tonal'])
candidate Sentence: (0.34713920950889587, {u'tokens': [u'Spoken', u'Chinese', u'is', u'distinguished', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'spoken', u'varieties', u'of', u'Chinese', u'are', u'tonal', u'and', u'analytic', u'.'], u'lemmas': [u'speak', u'Chinese', u'be', u'distinguish', u'by', u'its', u'high', u'level', u'of', u'internal', u'diversity', u',', u'although', u'all', u'speak', u'variety', u'of', u'Chinese', u'be', u'tonal', u'and', u'analytic', u'.'], u'pos': [u'VBN', u'NNPS', u'VBZ', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u'IN', u'JJ', u'NN', u',', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'NNP', u'VBP', u'JJ', u'CC', u'JJ', u'.'], u'char_offsets': [[1658, 1664], [1665, 1672], [1673, 1675], [1676, 1689], [1690, 1692], [1693, 1696], [1697, 1701], [1702, 1707], [1708, 1710], [1711, 1719], [1720, 1729], [1729, 1730], [1731, 1739], [1740, 1743], [1744, 1750], [1751, 1760], [1761, 1763], [1764, 1771], [1772, 1775], [1776, 1781], [1782, 1785], [1786, 1794], [1794, 1795]]}) 
answer: set([u'analytical'])
candidate Sentence: (0.17517881095409393, {u'tokens': [u'The', u'total', u'number', u'of', u'syllables', u'in', u'some', u'varieties', u'is', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'including', u'tonal', u'variation', u',', u'which', u'is', u'only', u'about', u'an', u'eighth', u'as', u'many', u'as', u'English', u'DeFrancis', u'-LRB-', u'1984', u'-RRB-', u'p.', u'42', u'counts', u'Chinese', u'as', u'having', u'1,277', u'tonal', u'syllables', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tones', u'are', u'disregarded', u';', u'he', u'cites', u'Jespersen', u',', u'Otto', u'-LRB-', u'1928', u'-RRB-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllables', u'for', u'English', u'.'], u'lemmas': [u'the', u'total', u'number', u'of', u'syllable', u'in', u'some', u'variety', u'be', u'therefore', u'only', u'about', u'a', u'thousand', u',', u'include', u'tonal', u'variation', u',', u'which', u'be', u'only', u'about', u'a', u'eighth', u'as', u'many', u'as', u'english', u'defranci', u'-lrb-', u'1984', u'-rrb-', u'p.', u'42', u'count', u'chinese', u'as', u'have', u'1,277', u'tonal', u'syllable', u',', u'and', u'about', u'398', u'to', u'418', u'if', u'tone', u'be', u'disregard', u';', u'he', u'cite', u'Jespersen', u',', u'Otto', u'-lrb-', u'1928', u'-rrb-', u'Monosyllabism', u'in', u'English', u';', u'London', u',', u'p.', u'15', u'for', u'a', u'count', u'of', u'over', u'8000', u'syllable', u'for', u'English', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'VBZ', u'RB', u'RB', u'IN', u'DT', u'CD', u',', u'VBG', u'JJ', u'NN', u',', u'WDT', u'VBZ', u'RB', u'IN', u'DT', u'JJ', u'IN', u'JJ', u'IN', u'JJ', u'NN', u'-LRB-', u'CD', u'-RRB-', u'NN', u'CD', u'NNS', u'JJ', u'IN', u'VBG', u'CD', u'JJ', u'NNS', u',', u'CC', u'IN', u'CD', u'TO', u'CD', u'IN', u'NNS', u'VBP', u'VBN', u':', u'PRP', u'VBZ', u'NNP', u',', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'IN', u'NNP', u':', u'NNP', u',', u'NN', u'CD', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[24393, 24396], [24397, 24402], [24403, 24409], [24410, 24412], [24413, 24422], [24423, 24425], [24426, 24430], [24431, 24440], [24441, 24443], [24444, 24453], [24454, 24458], [24459, 24464], [24465, 24466], [24467, 24475], [24475, 24476], [24477, 24486], [24487, 24492], [24493, 24502], [24502, 24503], [24504, 24509], [24510, 24512], [24513, 24517], [24518, 24523], [24524, 24526], [24527, 24533], [24534, 24536], [24537, 24541], [24542, 24544], [24545, 24552], [24553, 24562], [24563, 24564], [24564, 24568], [24568, 24569], [24570, 24572], [24572, 24574], [24575, 24581], [24582, 24589], [24590, 24592], [24593, 24599], [24600, 24605], [24606, 24611], [24612, 24621], [24621, 24622], [24623, 24626], [24627, 24632], [24633, 24636], [24637, 24639], [24640, 24643], [24644, 24646], [24647, 24652], [24653, 24656], [24657, 24668], [24668, 24669], [24670, 24672], [24673, 24678], [24679, 24688], [24688, 24689], [24690, 24694], [24695, 24696], [24696, 24700], [24700, 24701], [24702, 24715], [24716, 24718], [24719, 24726], [24726, 24727], [24728, 24734], [24734, 24735], [24736, 24738], [24738, 24740], [24741, 24744], [24745, 24746], [24747, 24752], [24753, 24755], [24756, 24760], [24761, 24765], [24766, 24775], [24776, 24779], [24780, 24787], [24787, 24788]]}) 
answer: set([u'analytical', u'all', u'speak'])
candidate Sentence: (0.16434182226657867, {u'tokens': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'How', u'hard', u'is', u'it', u'to', u'learn', u'Chinese', u'?'], u'lemmas': [u'BBC', u'NEWS', u'|', u'UK', u'|', u'Magazine', u'|', u'how', u'hard', u'be', u'it', u'to', u'learn', u'chinese', u'?'], u'pos': [u'NNP', u'NNP', u'VBD', u'NNP', u'NNP', u'NNP', u'NNP', u'WRB', u'JJ', u'VBZ', u'PRP', u'TO', u'VB', u'JJ', u'.'], u'char_offsets': [[40576, 40579], [40580, 40584], [40585, 40586], [40587, 40589], [40590, 40591], [40592, 40600], [40601, 40602], [40603, 40606], [40607, 40611], [40612, 40614], [40615, 40617], [40618, 40620], [40621, 40626], [40627, 40634], [40634, 40635]]}) 
answer: set([u'and', u'all', u'tonal', u'variety', u'of', u'analytical', u'speak'])
candidate Sentence: (0.15403193235397339, {u'tokens': [u'The', u'government', u'intends', u'for', u'speakers', u'of', u'all', u'Chinese', u'speech', u'varieties', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'lemmas': [u'the', u'government', u'intend', u'for', u'speaker', u'of', u'all', u'chinese', u'speech', u'variety', u'to', u'use', u'it', u'as', u'a', u'common', u'language', u'of', u'communication', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'IN', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NNS', u'TO', u'VB', u'PRP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[5957, 5960], [5961, 5971], [5972, 5979], [5980, 5983], [5984, 5992], [5993, 5995], [5996, 5999], [6000, 6007], [6008, 6014], [6015, 6024], [6025, 6027], [6028, 6031], [6032, 6034], [6035, 6037], [6038, 6039], [6040, 6046], [6047, 6055], [6056, 6058], [6059, 6072], [6072, 6073]]}) 
answer: set([u'and', u'analytical', u'tonal', u'speak'])

Are all spoken varieties of Chinese tonal and analytical?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6560>.answer
_____________________________ test_yesno[param73] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6638>, <src.tfidf.TF_IDF object at 0x7fbca451bbd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6638>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.58711278438568115, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'-LRB-', u'POJ', u':', u't', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'-lrb-', u'poj', u':', u't', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22861, 22869], [22870, 22872], [22873, 22877], [22878, 22883], [22884, 22887], [22888, 22889], [22889, 22892], [22892, 22893], [22894, 22898], [22899, 22902], [22903, 22909], [22910, 22923], [22924, 22926], [22928, 22929], [22929, 22932], [22932, 22933], [22934, 22935], [22935, 22936], [22936, 22937], [22938, 22939], [22939, 22946], [22946, 22947], [22948, 22952], [22953, 22956], [22957, 22963], [22964, 22977], [22978, 22980], [22982, 22983], [22983, 22992], [22992, 22993], [22993, 22994], [22995, 22998], [22999, 23000], [23000, 23007], [23007, 23008], [23009, 23013], [23014, 23017], [23018, 23027], [23028, 23041], [23042, 23044], [23046, 23047], [23047, 23050], [23051, 23055], [23055, 23056], [23056, 23057]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.20143508911132812, {u'tokens': [u'From', u'French', u'came', u'-LRB-', u'bli', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'-LRB-', u'xingbn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'-LRB-', u'kfi', u',', u'``', u'caff', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'-lrb-', u'blus', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'-lrb-', u'xingbn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'-lrb-', u'kfus', u',', u'``', u'caff', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'-LRB-', u'NN', u',', u'``', u'FW', u"''", u'-RRB-', u'.'], u'char_offsets': [[36840, 36844], [36845, 36851], [36852, 36856], [36858, 36859], [36859, 36862], [36862, 36863], [36864, 36865], [36865, 36871], [36871, 36872], [36872, 36873], [36873, 36874], [36876, 36877], [36877, 36883], [36883, 36884], [36885, 36886], [36886, 36895], [36895, 36896], [36896, 36897], [36897, 36898], [36899, 36902], [36903, 36910], [36912, 36913], [36913, 36916], [36916, 36917], [36918, 36919], [36919, 36923], [36923, 36924], [36924, 36925], [36925, 36926]]}) 
answer: set([u'&#27713;', u'of', u'minnan', u'pronunciation', u'&#39853;', u'the', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.19766755402088165, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'``', u'JJ', u'.', u"''"], u'char_offsets': [[35408, 35413], [35414, 35419], [35420, 35424], [35425, 35429], [35430, 35437], [35438, 35445], [35446, 35448], [35449, 35452], [35453, 35458], [35458, 35459], [35460, 35464], [35465, 35467], [35469, 35470], [35470, 35476], [35476, 35477], [35477, 35478]]}) 
answer: set([u'-rrb-', u'of', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.1642659455537796, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[36062, 36066], [36067, 36069], [36070, 36074], [36075, 36077], [36078, 36087], [36088, 36095], [36096, 36106], [36107, 36111], [36112, 36119], [36120, 36134], [36134, 36135]]}) 
answer: set([u'``', u'from', u'-rrb-', u'of', u'minnan', u"''", u'&#27713;', u'&#39853;', u'-lrb-', u'the', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13339844346046448, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17974, 17977], [17978, 17986], [17987, 17990], [17991, 17994], [17995, 18008], [18009, 18011], [18012, 18018], [18019, 18026], [18027, 18032], [18033, 18037], [18038, 18045], [18046, 18053], [18053, 18054], [18055, 18061], [18062, 18069], [18070, 18080], [18080, 18081], [18082, 18089], [18090, 18102], [18102, 18103], [18104, 18111], [18112, 18128], [18128, 18129], [18130, 18131], [18131, 18138], [18139, 18145], [18145, 18146], [18147, 18158], [18159, 18161], [18162, 18169], [18170, 18177], [18178, 18190], [18191, 18193], [18194, 18203], [18204, 18207], [18208, 18216], [18217, 18223], [18223, 18224], [18225, 18228], [18229, 18236], [18237, 18245], [18246, 18258], [18259, 18261], [18262, 18269], [18270, 18275], [18275, 18276]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6638>.answer
_____________________________ test_yesno[param74] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6680>, <src.tfidf.TF_IDF object at 0x7fbca451bbd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6680>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.58711278438568115, {u'tokens': [u'Examples', u'of', u'such', u'words', u'are', u'``', u'tea', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'-LRB-', u'POJ', u':', u't', u'-RRB-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'Minnan', u'pronunciation', u'of', u'-LRB-', u'koe-tsiap', u'-RRB-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'Cantonese', u'pronunciation', u'of', u'-LRB-', u'kam', u'kuat', u'-RRB-', u'.'], u'lemmas': [u'example', u'of', u'such', u'word', u'be', u'``', u'tea', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'-lrb-', u'poj', u':', u't', u'-rrb-', u',', u'``', u'ketchup', u"''", u'from', u'the', u'minnan', u'pronunciation', u'of', u'-lrb-', u'koe-tsiap', u'-rrb-', u',', u'and', u'``', u'kumquat', u"''", u'from', u'the', u'cantonese', u'pronunciation', u'of', u'-lrb-', u'kam', u'kuat', u'-rrb-', u'.'], u'pos': [u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'NN', u':', u'NN', u'-RRB-', u',', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'NN', u'-RRB-', u',', u'CC', u'``', u'NN', u"''", u'IN', u'DT', u'JJ', u'NN', u'IN', u'-LRB-', u'FW', u'FW', u'-RRB-', u'.'], u'char_offsets': [[22861, 22869], [22870, 22872], [22873, 22877], [22878, 22883], [22884, 22887], [22888, 22889], [22889, 22892], [22892, 22893], [22894, 22898], [22899, 22902], [22903, 22909], [22910, 22923], [22924, 22926], [22928, 22929], [22929, 22932], [22932, 22933], [22934, 22935], [22935, 22936], [22936, 22937], [22938, 22939], [22939, 22946], [22946, 22947], [22948, 22952], [22953, 22956], [22957, 22963], [22964, 22977], [22978, 22980], [22982, 22983], [22983, 22992], [22992, 22993], [22993, 22994], [22995, 22998], [22999, 23000], [23000, 23007], [23007, 23008], [23009, 23013], [23014, 23017], [23018, 23027], [23028, 23041], [23042, 23044], [23046, 23047], [23047, 23050], [23051, 23055], [23055, 23056], [23056, 23057]]}) 
answer: set([u'&#27713;', u'come', u'&#39853;'])
candidate Sentence: (0.20143508911132812, {u'tokens': [u'From', u'French', u'came', u'-LRB-', u'bli', u',', u'``', u'ballet', u"''", u'-RRB-', u',', u'-LRB-', u'xingbn', u',', u'``', u'champagne', u"''", u'-RRB-', u',', u'via', u'Italian', u'-LRB-', u'kfi', u',', u'``', u'caff', u"''", u'-RRB-', u'.'], u'lemmas': [u'from', u'French', u'come', u'-lrb-', u'blus', u',', u'``', u'ballet', u"''", u'-rrb-', u',', u'-lrb-', u'xingbn', u',', u'``', u'champagne', u"''", u'-rrb-', u',', u'via', u'italian', u'-lrb-', u'kfus', u',', u'``', u'caff', u"''", u'-rrb-', u'.'], u'pos': [u'IN', u'NNP', u'VBD', u'-LRB-', u'NN', u',', u'``', u'JJ', u"''", u'-RRB-', u',', u'-LRB-', u'NN', u',', u'``', u'NN', u"''", u'-RRB-', u',', u'IN', u'JJ', u'-LRB-', u'NN', u',', u'``', u'FW', u"''", u'-RRB-', u'.'], u'char_offsets': [[36840, 36844], [36845, 36851], [36852, 36856], [36858, 36859], [36859, 36862], [36862, 36863], [36864, 36865], [36865, 36871], [36871, 36872], [36872, 36873], [36873, 36874], [36876, 36877], [36877, 36883], [36883, 36884], [36885, 36886], [36886, 36895], [36895, 36896], [36896, 36897], [36897, 36898], [36899, 36902], [36903, 36910], [36912, 36913], [36913, 36916], [36916, 36917], [36918, 36919], [36919, 36923], [36923, 36924], [36924, 36925], [36925, 36926]]}) 
answer: set([u'&#27713;', u'of', u'minnan', u'pronunciation', u'&#39853;', u'the', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.19766755402088165, {u'tokens': [u'Other', u'words', u'came', u'from', u'nomadic', u'peoples', u'to', u'the', u'north', u',', u'such', u'as', u'``', u'hutong', u'.', u"''"], u'lemmas': [u'other', u'word', u'come', u'from', u'nomadic', u'people', u'to', u'the', u'north', u',', u'such', u'as', u'``', u'hutong', u'.', u"''"], u'pos': [u'JJ', u'NNS', u'VBD', u'IN', u'JJ', u'NNS', u'TO', u'DT', u'NN', u',', u'JJ', u'IN', u'``', u'JJ', u'.', u"''"], u'char_offsets': [[35408, 35413], [35414, 35419], [35420, 35424], [35425, 35429], [35430, 35437], [35438, 35445], [35446, 35448], [35449, 35452], [35453, 35458], [35458, 35459], [35460, 35464], [35465, 35467], [35469, 35470], [35470, 35476], [35476, 35477], [35477, 35478]]}) 
answer: set([u'-rrb-', u'of', u'minnan', u'pronunciation', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.1642659455537796, {u'tokens': [u'This', u'is', u'done', u'by', u'employing', u'Chinese', u'characters', u'with', u'similar', u'pronunciations', u'.'], u'lemmas': [u'this', u'be', u'do', u'by', u'employ', u'chinese', u'character', u'with', u'similar', u'pronunciation', u'.'], u'pos': [u'DT', u'VBZ', u'VBN', u'IN', u'VBG', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[36062, 36066], [36067, 36069], [36070, 36074], [36075, 36077], [36078, 36087], [36088, 36095], [36096, 36106], [36107, 36111], [36112, 36119], [36120, 36134], [36134, 36135]]}) 
answer: set([u'``', u'from', u'-rrb-', u'of', u'minnan', u"''", u'&#27713;', u'&#39853;', u'-lrb-', u'the', u'come', u'ketchup', u'koe-tsiap'])
candidate Sentence: (0.13339844346046448, {u'tokens': [u'The', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'comes', u'from', u'several', u'sources', u':', u'modern', u'dialect', u'variations', u',', u'rhyming', u'dictionaries', u',', u'foreign', u'transliterations', u',', u'``', u'rhyming', u'tables', u"''", u'constructed', u'by', u'ancient', u'Chinese', u'philologists', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'Chinese', u'phonetic', u'translations', u'of', u'foreign', u'words', u'.'], u'lemmas': [u'the', u'evidence', u'for', u'the', u'pronunciation', u'of', u'Middle', u'Chinese', u'come', u'from', u'several', u'source', u':', u'modern', u'dialect', u'variation', u',', u'rhyme', u'dictionary', u',', u'foreign', u'transliteration', u',', u'``', u'rhyming', u'table', u"''", u'construct', u'by', u'ancient', u'chinese', u'philologist', u'to', u'summarize', u'the', u'phonetic', u'system', u',', u'and', u'chinese', u'phonetic', u'translation', u'of', u'foreign', u'word', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'IN', u'JJ', u'NNS', u':', u'JJ', u'NN', u'NNS', u',', u'VBG', u'NNS', u',', u'JJ', u'NNS', u',', u'``', u'JJ', u'NNS', u"''", u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'TO', u'VB', u'DT', u'JJ', u'NN', u',', u'CC', u'JJ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[17974, 17977], [17978, 17986], [17987, 17990], [17991, 17994], [17995, 18008], [18009, 18011], [18012, 18018], [18019, 18026], [18027, 18032], [18033, 18037], [18038, 18045], [18046, 18053], [18053, 18054], [18055, 18061], [18062, 18069], [18070, 18080], [18080, 18081], [18082, 18089], [18090, 18102], [18102, 18103], [18104, 18111], [18112, 18128], [18128, 18129], [18130, 18131], [18131, 18138], [18139, 18145], [18145, 18146], [18147, 18158], [18159, 18161], [18162, 18169], [18170, 18177], [18178, 18190], [18191, 18193], [18194, 18203], [18204, 18207], [18208, 18216], [18217, 18223], [18223, 18224], [18225, 18228], [18229, 18236], [18237, 18245], [18246, 18258], [18259, 18261], [18262, 18269], [18270, 18275], [18275, 18276]]}) 
answer: set([u'-rrb-', u'minnan', u'&#39853;', u'-lrb-', u'&#27713;', u'ketchup', u'koe-tsiap'])

Does "ketchup" come from the Minnan pronunciation of &#39853;&#27713; (koe-tsiap)?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6680>.answer
_____________________________ test_yesno[param81] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6878>, <src.tfidf.TF_IDF object at 0x7fbca15249d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('A cougar is also known as a mountain lion.') == True
E                +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6878>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39353823661804199, {u'tokens': [u'Cougar', u'The', u'cougar', u'-LRB-', u'Puma', u'concolor', u'-RRB-', u',', u'also', u'known', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depending', u'on', u'the', u'region', u',', u'is', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'lemmas': [u'Cougar', u'The', u'cougar', u'-lrb-', u'puma', u'concolor', u'-rrb-', u',', u'also', u'know', u'as', u'puma', u',', u'mountain', u'lion', u',', u'mountain', u'cat', u',', u'catamount', u'or', u'panther', u',', u'depend', u'on', u'the', u'region', u',', u'be', u'a', u'mammal', u'of', u'the', u'family', u'Felidae', u',', u'native', u'to', u'the', u'Americas', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u',', u'RB', u'VBN', u'IN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'NN', u',', u'NN', u'CC', u'NN', u',', u'VBG', u'IN', u'DT', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u',', u'JJ', u'TO', u'DT', u'NNPS', u'.'], u'char_offsets': [[0, 6], [10, 13], [14, 20], [21, 22], [22, 26], [27, 35], [35, 36], [36, 37], [38, 42], [43, 48], [49, 51], [52, 56], [56, 57], [58, 66], [67, 71], [71, 72], [73, 81], [82, 85], [85, 86], [87, 96], [97, 99], [100, 107], [107, 108], [109, 118], [119, 121], [122, 125], [126, 132], [132, 133], [134, 136], [137, 138], [139, 145], [146, 148], [149, 152], [153, 159], [160, 167], [167, 168], [169, 175], [176, 178], [179, 182], [183, 191], [191, 192]]}) 
answer: set([])
candidate Sentence: (0.27259147167205811, {u'tokens': [u'The', u'cougar', u'has', u'numerous', u'names', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'are', u'popular', u'.'], u'lemmas': [u'the', u'cougar', u'have', u'numerous', u'name', u'in', u'English', u',', u'of', u'which', u'puma', u'and', u'mountain', u'lion', u'be', u'popular', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'WDT', u'NN', u'CC', u'NN', u'NN', u'VBP', u'JJ', u'.'], u'char_offsets': [[2340, 2343], [2344, 2350], [2351, 2354], [2355, 2363], [2364, 2369], [2370, 2372], [2373, 2380], [2380, 2381], [2382, 2384], [2385, 2390], [2391, 2395], [2396, 2399], [2400, 2408], [2409, 2413], [2414, 2417], [2418, 2425], [2425, 2426]]}) 
answer: set([u'a', u'also', u'as', u'know'])
candidate Sentence: (0.17418505251407623, {u'tokens': [u'Search', u'continues', u'for', u'mountain', u'lion', u'that', u'killed', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-RSB-', u';', u'Wounded', u'mountain', u'lion', u'captured', u',', u'killed', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-RSB-', u';', u'Second', u'mountain', u'lion', u'captured', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'Fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-RSB-', u'As', u'with', u'many', u'predators', u',', u'a', u'cougar', u'may', u'attack', u'if', u'cornered', u',', u'if', u'a', u'fleeing', u'human', u'stimulates', u'their', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'plays', u'dead', u'.', u"''"], u'lemmas': [u'search', u'continue', u'for', u'mountain', u'lion', u'that', u'kill', u'Pinos', u'Altos', u'man', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'23', u',', u'2008', u'-rsb-', u';', u'wound', u'mountain', u'lion', u'capture', u',', u'kill', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'June', u'25', u',', u'2008', u'-rsb-', u';', u'second', u'mountain', u'lion', u'capture', u'near', u'Pinos', u'Altos', u',', u'New', u'Mexico', u'Department', u'of', u'Game', u'and', u'fish', u',', u'press', u'release', u'July', u'1', u',', u'2008', u'-rsb-', u'as', u'with', u'many', u'predator', u',', u'a', u'cougar', u'may', u'attack', u'if', u'corner', u',', u'if', u'a', u'flee', u'human', u'stimulate', u'they', u'instinct', u'to', u'chase', u',', u'or', u'if', u'a', u'person', u'``', u'play', u'dead', u'.', u"''"], u'pos': [u'VB', u'VBZ', u'IN', u'NN', u'NN', u'WDT', u'VBD', u'NNP', u'NNP', u'NN', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'VBN', u'NN', u'NN', u'VBN', u',', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u':', u'JJ', u'NN', u'NN', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'CC', u'NN', u',', u'NN', u'NN', u'NNP', u'CD', u',', u'CD', u'-RRB-', u'IN', u'IN', u'JJ', u'NNS', u',', u'DT', u'NN', u'MD', u'VB', u'IN', u'VBN', u',', u'IN', u'DT', u'VBG', u'JJ', u'VBZ', u'PRP$', u'NN', u'TO', u'VB', u',', u'CC', u'IN', u'DT', u'NN', u'``', u'VBZ', u'JJ', u'.', u"''"], u'char_offsets': [[31802, 31808], [31809, 31818], [31819, 31822], [31823, 31831], [31832, 31836], [31837, 31841], [31842, 31848], [31849, 31854], [31855, 31860], [31861, 31864], [31864, 31865], [31866, 31869], [31870, 31876], [31877, 31887], [31888, 31890], [31891, 31895], [31896, 31899], [31900, 31904], [31904, 31905], [31906, 31911], [31912, 31919], [31920, 31924], [31925, 31927], [31927, 31928], [31929, 31933], [31933, 31934], [31934, 31935], [31937, 31944], [31945, 31953], [31954, 31958], [31959, 31967], [31967, 31968], [31969, 31975], [31976, 31980], [31981, 31986], [31987, 31992], [31992, 31993], [31994, 31997], [31998, 32004], [32005, 32015], [32016, 32018], [32019, 32023], [32024, 32027], [32028, 32032], [32032, 32033], [32034, 32039], [32040, 32047], [32048, 32052], [32053, 32055], [32055, 32056], [32057, 32061], [32061, 32062], [32062, 32063], [32065, 32071], [32072, 32080], [32081, 32085], [32086, 32094], [32095, 32099], [32100, 32105], [32106, 32111], [32111, 32112], [32113, 32116], [32117, 32123], [32124, 32134], [32135, 32137], [32138, 32142], [32143, 32146], [32147, 32151], [32151, 32152], [32153, 32158], [32159, 32166], [32167, 32171], [32172, 32173], [32173, 32174], [32175, 32179], [32179, 32180], [32182, 32184], [32185, 32189], [32190, 32194], [32195, 32204], [32204, 32205], [32206, 32207], [32208, 32214], [32215, 32218], [32219, 32225], [32226, 32228], [32229, 32237], [32237, 32238], [32239, 32241], [32242, 32243], [32244, 32251], [32252, 32257], [32258, 32268], [32269, 32274], [32275, 32283], [32284, 32286], [32287, 32292], [32292, 32293], [32294, 32296], [32297, 32299], [32300, 32301], [32302, 32308], [32309, 32310], [32310, 32315], [32316, 32320], [32320, 32321], [32321, 32322]]}) 
answer: set([u'also', u'know'])
candidate Sentence: (0.16625331342220306, {u'tokens': [u'*', u'Description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'NatureMapping', u'Program', u'*', u'No', u'Place', u'for', u'Predators', u'?'], u'lemmas': [u'*', u'description', u'of', u'a', u'Cougar', u'attack', u'*', u'Cougar', u'Facts', u'and', u'Photos', u'NatureMapping', u'Program', u'*', u'no', u'place', u'for', u'predator', u'?'], u'pos': [u'SYM', u'NN', u'IN', u'DT', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'NNP', u'SYM', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[33634, 33635], [33637, 33648], [33649, 33651], [33652, 33653], [33654, 33660], [33661, 33667], [33668, 33669], [33671, 33677], [33678, 33683], [33684, 33687], [33688, 33694], [33696, 33709], [33710, 33717], [33718, 33719], [33721, 33723], [33724, 33729], [33730, 33733], [33734, 33743], [33743, 33744]]}) 
answer: set([u'mountain', u'as', u'lion', u'know', u'also'])
candidate Sentence: (0.15094688534736633, {u'tokens': [u'The', u'Quebec', u'wildlife', u'services', u'-LRB-', u'known', u'locally', u'as', u'MRNF', u'-RRB-', u'also', u'considers', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threatened', u'species', u'after', u'multiple', u'DNA', u'tests', u'confirmed', u'cougar', u'hair', u'in', u'Lynx', u'mating', u'sites', u'.'], u'lemmas': [u'the', u'Quebec', u'wildlife', u'service', u'-lrb-', u'know', u'locally', u'as', u'mrnf', u'-rrb-', u'also', u'consider', u'Cougar', u'to', u'be', u'present', u'in', u'the', u'province', u'as', u'a', u'threaten', u'species', u'after', u'multiple', u'dna', u'test', u'confirm', u'cougar', u'hair', u'in', u'Lynx', u'mate', u'site', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NNS', u'-LRB-', u'VBN', u'RB', u'IN', u'NN', u'-RRB-', u'RB', u'VBZ', u'NNP', u'TO', u'VB', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBN', u'NNS', u'IN', u'JJ', u'NN', u'NNS', u'VBD', u'NN', u'NN', u'IN', u'NNP', u'VBG', u'NNS', u'.'], u'char_offsets': [[19056, 19059], [19060, 19066], [19067, 19075], [19076, 19084], [19085, 19086], [19086, 19091], [19092, 19099], [19100, 19102], [19103, 19107], [19107, 19108], [19109, 19113], [19114, 19123], [19124, 19130], [19131, 19133], [19134, 19136], [19137, 19144], [19145, 19147], [19148, 19151], [19152, 19160], [19161, 19163], [19164, 19165], [19166, 19176], [19177, 19184], [19185, 19190], [19191, 19199], [19200, 19203], [19204, 19209], [19210, 19219], [19220, 19226], [19227, 19231], [19232, 19234], [19235, 19239], [19240, 19246], [19247, 19252], [19252, 19253]]}) 
answer: set([u'mountain', u'lion'])

Is a cougar also known as a mountain lion?
Validity= False
Question Type = NA
Answer Type = NA
Answer = A cougar is also known as a mountain lion.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('A cougar is also known as a mountain lion.') == True
 +  where 'A cougar is also known as a mountain lion.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6878>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param86] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd69e0>, <src.tfidf.TF_IDF object at 0x7fbca15249d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd69e0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.65966939926147461, {u'tokens': [u'The', u'World', u'Conservation', u'Union', u'-LRB-', u'IUCN', u'-RRB-', u'currently', u'lists', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'lemmas': [u'the', u'World', u'Conservation', u'Union', u'-lrb-', u'IUCN', u'-rrb-', u'currently', u'list', u'the', u'cougar', u'as', u'a', u'``', u'least', u'concern', u"''", u'species', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'``', u'JJS', u'NN', u"''", u'NNS', u'.'], u'char_offsets': [[25162, 25165], [25166, 25171], [25172, 25184], [25185, 25190], [25191, 25192], [25192, 25196], [25196, 25197], [25198, 25207], [25208, 25213], [25214, 25217], [25218, 25224], [25225, 25227], [25228, 25229], [25230, 25231], [25231, 25236], [25237, 25244], [25244, 25245], [25246, 25253], [25253, 25254]]}) 
answer: set([u'consider'])
candidate Sentence: (0.13397218286991119, {u'tokens': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-LRB-', u'IUCN', u'-RRB-', u'lists', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'lemmas': [u'South', u'of', u'the', u'Rio', u'Grande', u',', u'the', u'International', u'Union', u'for', u'the', u'Conservation', u'of', u'Nature', u'and', u'Natural', u'Resources', u'-lrb-', u'IUCN', u'-rrb-', u'list', u'the', u'cat', u'in', u'every', u'Central', u'and', u'South', u'American', u'country', u'except', u'Costa', u'Rica', u'and', u'Panama', u'.'], u'pos': [u'NNP', u'IN', u'DT', u'NNP', u'NNP', u',', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'NNP', u'NN', u'IN', u'NNP', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[20387, 20392], [20393, 20395], [20396, 20399], [20400, 20403], [20404, 20410], [20410, 20411], [20412, 20415], [20416, 20429], [20430, 20435], [20436, 20439], [20440, 20443], [20444, 20456], [20457, 20459], [20460, 20466], [20467, 20470], [20471, 20478], [20479, 20488], [20489, 20490], [20490, 20494], [20494, 20495], [20496, 20501], [20502, 20505], [20506, 20509], [20510, 20512], [20513, 20518], [20519, 20526], [20527, 20530], [20531, 20536], [20537, 20545], [20546, 20553], [20554, 20560], [20561, 20566], [20567, 20571], [20572, 20575], [20576, 20582], [20582, 20583]]}) 
answer: set([u'a', u'``', u'consider', u'least', u"''", u'cougar', u'world', u'species', u'concern'])
candidate Sentence: (0.13258689641952515, {u'tokens': [u'Most', u'did', u'not', u'reach', u'adulthood', u'.'], u'lemmas': [u'most', u'do', u'not', u'reach', u'adulthood', u'.'], u'pos': [u'JJS', u'VBD', u'RB', u'VB', u'NN', u'.'], u'char_offsets': [[24414, 24418], [24419, 24422], [24423, 24426], [24427, 24432], [24433, 24442], [24442, 24443]]}) 
answer: set([u'a', u'``', u'consider', u'union', u'least', u"''", u'cougar', u'conservation', u'world', u'the', u'species', u'concern'])
candidate Sentence: (0.12797462940216064, {u'tokens': [u'During', u'the', u'early', u'years', u'of', u'ranching', u',', u'cougars', u'were', u'considered', u'on', u'par', u'with', u'wolves', u'in', u'destructiveness', u'.'], u'lemmas': [u'during', u'the', u'early', u'year', u'of', u'ranching', u',', u'cougar', u'be', u'consider', u'on', u'par', u'with', u'wolf', u'in', u'destructiveness', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u',', u'NNS', u'VBD', u'VBN', u'IN', u'NN', u'IN', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[29684, 29690], [29691, 29694], [29695, 29700], [29701, 29706], [29707, 29709], [29710, 29718], [29718, 29719], [29720, 29727], [29728, 29732], [29733, 29743], [29744, 29746], [29747, 29750], [29751, 29755], [29756, 29762], [29763, 29765], [29766, 29781], [29781, 29782]]}) 
answer: set([u'a', u'``', u'union', u'least', u"''", u'conservation', u'world', u'species', u'concern'])
candidate Sentence: (0.110377237200737, {u'tokens': [u'The', u'term', u'``', u'black', u'panther', u"''", u'is', u'used', u'colloquially', u'to', u'refer', u'to', u'melanistic', u'individuals', u'of', u'other', u'species', u',', u'particularly', u'jaguars', u'and', u'leopards', u'.'], u'lemmas': [u'the', u'term', u'``', u'black', u'panther', u"''", u'be', u'use', u'colloquially', u'to', u'refer', u'to', u'melanistic', u'individual', u'of', u'other', u'species', u',', u'particularly', u'jaguar', u'and', u'leopard', u'.'], u'pos': [u'DT', u'NN', u'``', u'JJ', u'NN', u"''", u'VBZ', u'VBN', u'RB', u'TO', u'VB', u'TO', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u',', u'RB', u'NNS', u'CC', u'NNS', u'.'], u'char_offsets': [[9488, 9491], [9492, 9496], [9497, 9498], [9498, 9503], [9504, 9511], [9511, 9512], [9513, 9515], [9516, 9520], [9521, 9533], [9534, 9536], [9537, 9542], [9543, 9545], [9546, 9556], [9557, 9568], [9569, 9571], [9572, 9577], [9578, 9585], [9585, 9586], [9587, 9599], [9600, 9607], [9608, 9611], [9612, 9620], [9620, 9621]]}) 
answer: set([u'a', u'consider', u'union', u'least', u'cougar', u'conservation', u'world', u'concern'])

Does the World Conservation Union consider the cougar a "least concern" species?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd69e0>.answer
_____________________________ test_yesno[param88] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6a70>, <src.tfidf.TF_IDF object at 0x7fbca7153c10>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6a70>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.40693923830986023, {u'tokens': [u'The', u'most', u'common', u'Cymbals', u'are', u'the', u'Hi-Hats', u',', u'Crash', u',', u'Splash', u',', u'Ride', u',', u'and', u'China', u'.'], u'lemmas': [u'the', u'most', u'common', u'cymbal', u'be', u'the', u'Hi-Hats', u',', u'Crash', u',', u'Splash', u',', u'ride', u',', u'and', u'China', u'.'], u'pos': [u'DT', u'RBS', u'JJ', u'NNS', u'VBP', u'DT', u'NNPS', u',', u'NNP', u',', u'NNP', u',', u'NN', u',', u'CC', u'NNP', u'.'], u'char_offsets': [[1782, 1785], [1786, 1790], [1791, 1797], [1798, 1805], [1806, 1809], [1810, 1813], [1814, 1821], [1821, 1822], [1823, 1828], [1828, 1829], [1830, 1836], [1836, 1837], [1838, 1842], [1842, 1843], [1844, 1847], [1848, 1853], [1853, 1854]]}) 
answer: set([u'very'])
candidate Sentence: (0.2726483941078186, {u'tokens': [u'This', u'combination', u',', u'played', u'loudly', u',', u'is', u'an', u'effective', u'way', u'to', u'accentuate', u'a', u'note', u'since', u'the', u'two', u'instruments', u'together', u'contribute', u'to', u'both', u'very', u'low', u'and', u'very', u'high', u'frequency', u'ranges', u'and', u'provide', u'a', u'satisfying', u'``', u'crash-bang-wallop', u"''", u'.'], u'lemmas': [u'this', u'combination', u',', u'play', u'loudly', u',', u'be', u'a', u'effective', u'way', u'to', u'accentuate', u'a', u'note', u'since', u'the', u'two', u'instrument', u'together', u'contribute', u'to', u'both', u'very', u'low', u'and', u'very', u'high', u'frequency', u'range', u'and', u'provide', u'a', u'satisfy', u'``', u'crash-bang-wallop', u"''", u'.'], u'pos': [u'DT', u'NN', u',', u'VBD', u'RB', u',', u'VBZ', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'NN', u'IN', u'DT', u'CD', u'NNS', u'RB', u'VBP', u'TO', u'DT', u'RB', u'JJ', u'CC', u'RB', u'JJ', u'NN', u'NNS', u'CC', u'VB', u'DT', u'VBG', u'``', u'JJ', u"''", u'.'], u'char_offsets': [[4019, 4023], [4024, 4035], [4035, 4036], [4037, 4043], [4044, 4050], [4050, 4051], [4052, 4054], [4055, 4057], [4058, 4067], [4068, 4071], [4072, 4074], [4075, 4085], [4086, 4087], [4088, 4092], [4093, 4098], [4099, 4102], [4103, 4106], [4107, 4118], [4119, 4127], [4128, 4138], [4139, 4141], [4142, 4146], [4147, 4151], [4152, 4155], [4156, 4159], [4160, 4164], [4165, 4169], [4170, 4179], [4180, 4186], [4187, 4190], [4191, 4198], [4199, 4200], [4201, 4211], [4212, 4213], [4213, 4230], [4230, 4231], [4231, 4232]]}) 
answer: set([u'cymbal', u'ride', u'common'])
candidate Sentence: (0.17136624455451965, {u'tokens': [u'However', u',', u'hi-hat', u'cymbals', u'tend', u'to', u'be', u'heavy', u'with', u'little', u'taper', u',', u'more', u'similar', u'to', u'a', u'ride', u'cymbal', u'than', u'to', u'a', u'crash', u'cymbal', u'as', u'found', u'in', u'a', u'drum', u'kit', u',', u'and', u'perform', u'a', u'ride', u'rather', u'than', u'a', u'crash', u'function', u'.'], u'lemmas': [u'however', u',', u'hi-hat', u'cymbal', u'tend', u'to', u'be', u'heavy', u'with', u'little', u'taper', u',', u'more', u'similar', u'to', u'a', u'ride', u'cymbal', u'than', u'to', u'a', u'crash', u'cymbal', u'as', u'find', u'in', u'a', u'drum', u'kit', u',', u'and', u'perform', u'a', u'ride', u'rather', u'than', u'a', u'crash', u'function', u'.'], u'pos': [u'RB', u',', u'JJ', u'NNS', u'VBP', u'TO', u'VB', u'JJ', u'IN', u'JJ', u'VBP', u',', u'RBR', u'JJ', u'TO', u'DT', u'NN', u'NN', u'IN', u'TO', u'DT', u'NN', u'NN', u'IN', u'VBN', u'IN', u'DT', u'VBP', u'NN', u',', u'CC', u'VB', u'DT', u'NN', u'RB', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[4732, 4739], [4739, 4740], [4741, 4747], [4748, 4755], [4756, 4760], [4761, 4763], [4764, 4766], [4767, 4772], [4773, 4777], [4778, 4784], [4785, 4790], [4790, 4791], [4792, 4796], [4797, 4804], [4805, 4807], [4808, 4809], [4810, 4814], [4815, 4821], [4822, 4826], [4827, 4829], [4830, 4831], [4832, 4837], [4838, 4844], [4845, 4847], [4848, 4853], [4854, 4856], [4857, 4858], [4859, 4863], [4864, 4867], [4867, 4868], [4869, 4872], [4873, 4880], [4881, 4882], [4883, 4887], [4888, 4894], [4895, 4899], [4900, 4901], [4902, 4907], [4908, 4916], [4916, 4917]]}) 
answer: set([u'very', u'common'])
candidate Sentence: (0.02254953607916832, {u'tokens': [u'*', u'China', u'cymbals', u'*', u'crash', u'cymbals', u'*', u'hi-hat', u'cymbals', u'*', u'Persian', u'cymbals', u'*', u'ride', u'cymbals', u'*', u'Swish', u'and', u'pang', u'cymbals', u'*', u'Sizzle', u'cymbals', u'*', u'Splash', u'cymbals', u'*', u'Trash', u'Hats', u'-LRB-', u'Hi-Hat', u'cymbal', u'/', u'china', u'cymbal', u'hybrid', u'setup', u'-RRB-', u'*', u'Clash', u'cymbals', u'*', u'Finger', u'cymbals', u'-', u'Zill', u'*', u'Suspended', u'cymbals', u'*', u'Cymbal', u'alloys', u'*', u'Cymbal', u'making', u'*', u'Drum', u'*', u'Drum', u'kit', u'*', u'Percussion', u'instrument', u'*', u'Avedis', u'Zildjian', u'Company', u'*', u'Saluda', u'Cymbals', u'*', u'Italian', u'Bellotti', u'Cymbals', u'*', u'Agean', u'Cymbals', u'*', u'Bosphorus', u'Cymbals', u'*', u'Meinl', u'*', u'Paiste', u'*', u'Sabian', u'*', u'Stagg', u'*', u'UFIP', u'*', u'Yamaha', u'*', u'Wuhan', u'*', u'Istanbul', u'cymbals', u'*', u'Istanbul', u'Agop', u'*', u'Turk', u'Masters', u'Cymbals', u':', u'See', u'also', u'.'], u'lemmas': [u'*', u'China', u'cymbal', u'*', u'crash', u'cymbal', u'*', u'hi-hat', u'cymbal', u'*', u'Persian', u'cymbal', u'*', u'ride', u'cymbal', u'*', u'swish', u'and', u'pang', u'cymbal', u'*', u'Sizzle', u'cymbal', u'*', u'Splash', u'cymbal', u'*', u'Trash', u'Hats', u'-lrb-', u'hi-hat', u'cymbal', u'/', u'china', u'cymbal', u'hybrid', u'setup', u'-rrb-', u'*', u'clash', u'cymbal', u'*', u'finger', u'cymbal', u'-', u'Zill', u'*', u'suspend', u'cymbal', u'*', u'Cymbal', u'alloy', u'*', u'Cymbal', u'make', u'*', u'drum', u'*', u'drum', u'kit', u'*', u'Percussion', u'instrument', u'*', u'Avedis', u'Zildjian', u'Company', u'*', u'Saluda', u'Cymbals', u'*', u'italian', u'Bellotti', u'Cymbals', u'*', u'Agean', u'Cymbals', u'*', u'Bosphorus', u'Cymbals', u'*', u'Meinl', u'*', u'paiste', u'*', u'sabian', u'*', u'Stagg', u'*', u'UFIP', u'*', u'Yamaha', u'*', u'Wuhan', u'*', u'Istanbul', u'cymbal', u'*', u'Istanbul', u'Agop', u'*', u'Turk', u'master', u'cymbal', u':', u'see', u'also', u'.'], u'pos': [u'SYM', u'NNP', u'NNS', u'SYM', u'NN', u'NNS', u'SYM', u'JJ', u'NNS', u'SYM', u'NNP', u'NNS', u'SYM', u'VB', u'NNS', u'SYM', u'NN', u'CC', u'NN', u'NNS', u'SYM', u'NNP', u'NNS', u'SYM', u'NNP', u'NNS', u'SYM', u'NNP', u'NNP', u'-LRB-', u'JJ', u'NN', u':', u'NN', u'NN', u'NN', u'NN', u'-RRB-', u'SYM', u'NN', u'NNS', u'SYM', u'NN', u'NNS', u':', u'NNP', u'SYM', u'VBN', u'NNS', u'SYM', u'NNP', u'NNS', u'SYM', u'NNP', u'VBG', u'SYM', u'VB', u'SYM', u'VB', u'NN', u'SYM', u'NNP', u'NN', u'SYM', u'NNP', u'NNP', u'NNP', u'SYM', u'NNP', u'NNP', u'SYM', u'JJ', u'NNP', u'NNP', u'SYM', u'NNP', u'NNPS', u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'SYM', u'FW', u'SYM', u'FW', u'SYM', u'NNP', u'SYM', u'NNP', u'SYM', u'NNP', u'SYM', u'NNP', u'SYM', u'NNP', u'NNS', u'SYM', u'NNP', u'NNP', u'SYM', u'NNP', u'NN', u'NNS', u':', u'VB', u'RB', u'.'], u'char_offsets': [[7391, 7392], [7393, 7398], [7399, 7406], [7407, 7408], [7409, 7414], [7415, 7422], [7423, 7424], [7425, 7431], [7432, 7439], [7440, 7441], [7442, 7449], [7450, 7457], [7458, 7459], [7460, 7464], [7465, 7472], [7473, 7474], [7475, 7480], [7481, 7484], [7485, 7489], [7490, 7497], [7498, 7499], [7500, 7506], [7507, 7514], [7515, 7516], [7517, 7523], [7524, 7531], [7532, 7533], [7534, 7539], [7540, 7544], [7545, 7546], [7546, 7552], [7553, 7559], [7560, 7561], [7562, 7567], [7568, 7574], [7575, 7581], [7582, 7587], [7587, 7588], [7592, 7593], [7594, 7599], [7600, 7607], [7608, 7609], [7610, 7616], [7617, 7624], [7625, 7626], [7627, 7631], [7632, 7633], [7634, 7643], [7644, 7651], [7655, 7656], [7656, 7662], [7663, 7669], [7670, 7671], [7671, 7677], [7678, 7684], [7685, 7686], [7686, 7690], [7691, 7692], [7692, 7696], [7697, 7700], [7701, 7702], [7702, 7712], [7713, 7723], [7728, 7729], [7729, 7735], [7736, 7744], [7745, 7752], [7753, 7754], [7754, 7760], [7761, 7768], [7769, 7770], [7770, 7777], [7778, 7786], [7787, 7794], [7795, 7796], [7796, 7801], [7802, 7809], [7810, 7811], [7811, 7820], [7821, 7828], [7829, 7830], [7830, 7835], [7836, 7837], [7837, 7843], [7844, 7845], [7845, 7851], [7852, 7853], [7853, 7858], [7859, 7860], [7860, 7864], [7865, 7866], [7866, 7872], [7873, 7874], [7874, 7879], [7880, 7881], [7881, 7889], [7890, 7897], [7898, 7899], [7899, 7907], [7908, 7912], [7913, 7914], [7914, 7918], [7919, 7926], [7927, 7934], [7936, 7937], [7937, 7940], [7941, 7945], [7946, 7947]]}) 
answer: set([u'very', u'common'])
candidate Sentence: (0.013136545196175575, {u'tokens': [u'The', u'second', u'main', u'orchestral', u'use', u'of', u'cymbals', u'is', u'the', u'suspended', u'cymbal', u'.'], u'lemmas': [u'the', u'second', u'main', u'orchestral', u'use', u'of', u'cymbal', u'be', u'the', u'suspend', u'cymbal', u'.'], u'pos': [u'DT', u'JJ', u'JJ', u'JJ', u'NN', u'IN', u'NNS', u'VBZ', u'DT', u'VBN', u'NN', u'.'], u'char_offsets': [[4922, 4925], [4926, 4932], [4933, 4937], [4938, 4948], [4949, 4952], [4953, 4955], [4956, 4963], [4964, 4966], [4967, 4970], [4971, 4980], [4981, 4987], [4987, 4988]]}) 
answer: set([u'very', u'ride', u'common'])

Are ride cymbals very common?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6a70>.answer
_____________________________ test_yesno[param92] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6b90>, <src.tfidf.TF_IDF object at 0x7fbca29e45d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6b90>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.86628663539886475, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3797, 3801], [3802, 3806], [3807, 3809], [3810, 3818], [3819, 3825], [3826, 3829], [3830, 3833], [3834, 3841], [3842, 3849], [3850, 3853], [3854, 3857], [3858, 3861], [3862, 3865], [3866, 3872], [3873, 3878], [3878, 3879]]}) 
answer: set([u'head', u'drum'])
candidate Sentence: (0.15463820099830627, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[2006, 2011], [2012, 2016], [2017, 2020], [2021, 2026], [2027, 2030], [2031, 2035], [2036, 2040], [2041, 2042], [2043, 2046], [2047, 2049], [2050, 2055], [2055, 2056], [2057, 2063], [2064, 2070], [2070, 2071], [2072, 2076], [2077, 2083], [2084, 2087], [2088, 2094], [2095, 2099], [2099, 2100], [2101, 2104], [2105, 2109], [2109, 2110], [2111, 2113], [2114, 2118], [2119, 2124], [2124, 2125], [2126, 2131], [2132, 2135], [2136, 2140], [2141, 2146], [2147, 2151], [2152, 2153]]}) 
answer: set([u'own', u'serve', u'musical', u'purpose', u'each', u'type', u'its'])
candidate Sentence: (0.12302703410387039, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4822, 4825], [4826, 4830], [4831, 4833], [4834, 4839], [4840, 4844], [4845, 4852], [4853, 4856], [4857, 4862], [4863, 4865], [4866, 4867], [4868, 4872], [4872, 4873]]}) 
answer: set([u'head', u'own', u'serve', u'musical', u'purpose', u'each', u'its'])
candidate Sentence: (0.096646063029766083, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2576, 2579], [2580, 2585], [2586, 2588], [2589, 2590], [2591, 2595], [2596, 2603], [2604, 2606], [2607, 2614], [2615, 2624], [2624, 2625], [2626, 2635], [2636, 2641], [2641, 2642], [2643, 2647], [2648, 2651], [2652, 2661], [2662, 2664], [2665, 2668], [2669, 2674], [2674, 2675], [2676, 2685], [2686, 2690], [2691, 2696], [2697, 2700], [2701, 2706], [2707, 2710], [2711, 2715], [2715, 2716], [2717, 2728], [2729, 2737], [2737, 2738], [2739, 2743], [2744, 2746], [2747, 2755], [2756, 2760], [2761, 2764], [2765, 2772], [2773, 2780], [2781, 2783], [2784, 2786], [2786, 2787], [2788, 2796], [2797, 2799], [2800, 2803], [2804, 2808], [2808, 2809], [2810, 2818], [2818, 2819], [2820, 2823], [2824, 2827], [2828, 2836], [2837, 2840], [2841, 2846], [2847, 2849], [2850, 2855], [2856, 2858], [2859, 2861], [2862, 2868], [2868, 2869]]}) 
answer: set([u'head', u'own', u'serve', u'purpose', u'each', u'musical'])
candidate Sentence: (0.082639418542385101, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5103, 5106], [5107, 5111], [5112, 5114], [5115, 5119], [5120, 5122], [5123, 5132], [5133, 5135], [5136, 5140], [5140, 5141]]}) 
answer: set([u'head', u'own', u'drum', u'serve', u'musical', u'purpose', u'each', u'its'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6b90>.answer
_____________________________ test_yesno[param93] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6bd8>, <src.tfidf.TF_IDF object at 0x7fbca29e45d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6bd8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.86628663539886475, {u'tokens': [u'Each', u'type', u'of', u'drumhead', u'serves', u'its', u'own', u'musical', u'purpose', u'and', u'has', u'its', u'own', u'unique', u'sound', u'.'], u'lemmas': [u'each', u'type', u'of', u'drumhead', u'serve', u'its', u'own', u'musical', u'purpose', u'and', u'have', u'its', u'own', u'unique', u'sound', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'CC', u'VBZ', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[3797, 3801], [3802, 3806], [3807, 3809], [3810, 3818], [3819, 3825], [3826, 3829], [3830, 3833], [3834, 3841], [3842, 3849], [3850, 3853], [3854, 3857], [3858, 3861], [3862, 3865], [3866, 3872], [3873, 3878], [3878, 3879]]}) 
answer: set([u'head', u'drum'])
candidate Sentence: (0.15463820099830627, {u'tokens': [u'Drums', u'with', u'two', u'heads', u'can', u'also', u'have', u'a', u'set', u'of', u'wires', u',', u'called', u'snares', u',', u'held', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'heads', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'lemmas': [u'drum', u'with', u'two', u'head', u'can', u'also', u'have', u'a', u'set', u'of', u'wire', u',', u'call', u'snare', u',', u'hold', u'across', u'the', u'bottom', u'head', u',', u'top', u'head', u',', u'or', u'both', u'head', u',', u'hence', u'the', u'name', u'snare', u'drum', u'.'], u'pos': [u'NNS', u'IN', u'CD', u'NNS', u'MD', u'RB', u'VB', u'DT', u'NN', u'IN', u'NNS', u',', u'VBN', u'NNS', u',', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'JJ', u'NN', u',', u'CC', u'DT', u'NNS', u',', u'RB', u'DT', u'NN', u'VB', u'VB', u'.'], u'char_offsets': [[2006, 2011], [2012, 2016], [2017, 2020], [2021, 2026], [2027, 2030], [2031, 2035], [2036, 2040], [2041, 2042], [2043, 2046], [2047, 2049], [2050, 2055], [2055, 2056], [2057, 2063], [2064, 2070], [2070, 2071], [2072, 2076], [2077, 2083], [2084, 2087], [2088, 2094], [2095, 2099], [2099, 2100], [2101, 2104], [2105, 2109], [2109, 2110], [2111, 2113], [2114, 2118], [2119, 2124], [2124, 2125], [2126, 2131], [2132, 2135], [2136, 2140], [2141, 2146], [2147, 2151], [2152, 2153]]}) 
answer: set([u'own', u'serve', u'musical', u'purpose', u'each', u'type', u'its'])
candidate Sentence: (0.12302703410387039, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4822, 4825], [4826, 4830], [4831, 4833], [4834, 4839], [4840, 4844], [4845, 4852], [4853, 4856], [4857, 4862], [4863, 4865], [4866, 4867], [4868, 4872], [4872, 4873]]}) 
answer: set([u'head', u'own', u'serve', u'musical', u'purpose', u'each', u'its'])
candidate Sentence: (0.096646063029766083, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2576, 2579], [2580, 2585], [2586, 2588], [2589, 2590], [2591, 2595], [2596, 2603], [2604, 2606], [2607, 2614], [2615, 2624], [2624, 2625], [2626, 2635], [2636, 2641], [2641, 2642], [2643, 2647], [2648, 2651], [2652, 2661], [2662, 2664], [2665, 2668], [2669, 2674], [2674, 2675], [2676, 2685], [2686, 2690], [2691, 2696], [2697, 2700], [2701, 2706], [2707, 2710], [2711, 2715], [2715, 2716], [2717, 2728], [2729, 2737], [2737, 2738], [2739, 2743], [2744, 2746], [2747, 2755], [2756, 2760], [2761, 2764], [2765, 2772], [2773, 2780], [2781, 2783], [2784, 2786], [2786, 2787], [2788, 2796], [2797, 2799], [2800, 2803], [2804, 2808], [2808, 2809], [2810, 2818], [2818, 2819], [2820, 2823], [2824, 2827], [2828, 2836], [2837, 2840], [2841, 2846], [2847, 2849], [2850, 2855], [2856, 2858], [2859, 2861], [2862, 2868], [2868, 2869]]}) 
answer: set([u'head', u'own', u'serve', u'purpose', u'each', u'musical'])
candidate Sentence: (0.082639418542385101, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5103, 5106], [5107, 5111], [5112, 5114], [5115, 5119], [5120, 5122], [5123, 5132], [5133, 5135], [5136, 5140], [5140, 5141]]}) 
answer: set([u'head', u'own', u'drum', u'serve', u'musical', u'purpose', u'each', u'its'])

Does each type of drum head serve its own musical purpose?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6bd8>.answer
_____________________________ test_yesno[param94] ______________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6c20>, <src.tfidf.TF_IDF object at 0x7fbca29e45d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6c20>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.51137542724609375, {u'tokens': [u'The', u'type', u'of', u'shell', u'also', u'affects', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'lemmas': [u'the', u'type', u'of', u'shell', u'also', u'affect', u'the', u'sound', u'of', u'a', u'drum', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'RB', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'VBP', u'.'], u'char_offsets': [[4822, 4825], [4826, 4830], [4831, 4833], [4834, 4839], [4840, 4844], [4845, 4852], [4853, 4856], [4857, 4862], [4863, 4865], [4866, 4867], [4868, 4872], [4872, 4873]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.34035110473632812, {u'tokens': [u'The', u'type', u'of', u'wood', u'is', u'important', u'as', u'well', u'.'], u'lemmas': [u'the', u'type', u'of', u'wood', u'be', u'important', u'as', u'well', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'VBZ', u'JJ', u'RB', u'RB', u'.'], u'char_offsets': [[5103, 5106], [5107, 5111], [5112, 5114], [5115, 5119], [5120, 5122], [5123, 5132], [5133, 5135], [5136, 5140], [5140, 5141]]}) 
answer: set([u'a', u'drum', u'aburukuwa'])
candidate Sentence: (0.29343646764755249, {u'tokens': [u'Because', u'the', u'vibrations', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'used', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produced', u'.'], u'lemmas': [u'because', u'the', u'vibration', u'resonate', u'in', u'the', u'shell', u'of', u'the', u'drum', u',', u'the', u'shell', u'can', u'be', u'use', u'to', u'increase', u'the', u'volume', u'and', u'to', u'manipulate', u'the', u'type', u'of', u'sound', u'produce', u'.'], u'pos': [u'IN', u'DT', u'NNS', u'VBP', u'IN', u'DT', u'NN', u'IN', u'DT', u'VBP', u',', u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'CC', u'TO', u'VB', u'DT', u'NN', u'IN', u'NN', u'VBD', u'.'], u'char_offsets': [[4874, 4881], [4882, 4885], [4886, 4896], [4897, 4905], [4906, 4908], [4909, 4912], [4913, 4918], [4919, 4921], [4922, 4925], [4926, 4930], [4930, 4931], [4932, 4935], [4936, 4941], [4942, 4945], [4946, 4948], [4949, 4953], [4954, 4956], [4957, 4965], [4966, 4969], [4970, 4976], [4977, 4980], [4981, 4983], [4984, 4994], [4995, 4998], [4999, 5003], [5004, 5006], [5007, 5012], [5013, 5021], [5021, 5022]]}) 
answer: set([u'a', u'aburukuwa'])
candidate Sentence: (0.26812058687210083, {u'tokens': [u'Drum', u'carried', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'Several', u'factors', u'determine', u'the', u'sound', u'a', u'drum', u'produces', u',', u'including', u'the', u'type', u'of', u'shell', u'the', u'drum', u'has', u',', u'the', u'type', u'of', u'drumheads', u'it', u'has', u',', u'and', u'the', u'tension', u'of', u'the', u'drumheads', u'.'], u'lemmas': [u'drum', u'carry', u'by', u'John', u'Unger', u',', u'Company', u'B', u',', u'40th', u'Regiment', u'New', u'York', u'Veteran', u'Volunteer', u'Infantry', u'Mozart', u'Regiment', u',', u'December', u'20', u',', u'1863', u'several', u'factor', u'determine', u'the', u'sound', u'a', u'drum', u'produce', u',', u'include', u'the', u'type', u'of', u'shell', u'the', u'drum', u'have', u',', u'the', u'type', u'of', u'drumhead', u'it', u'have', u',', u'and', u'the', u'tension', u'of', u'the', u'drumhead', u'.'], u'pos': [u'VB', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'JJ', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'CD', u',', u'CD', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'DT', u'VB', u'VBZ', u',', u'VBG', u'DT', u'NN', u'IN', u'NN', u'DT', u'VB', u'VBZ', u',', u'DT', u'NN', u'IN', u'NNS', u'PRP', u'VBZ', u',', u'CC', u'DT', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[3137, 3141], [3142, 3149], [3150, 3152], [3153, 3157], [3158, 3163], [3163, 3164], [3165, 3172], [3173, 3174], [3174, 3175], [3176, 3180], [3181, 3189], [3190, 3193], [3194, 3198], [3199, 3206], [3207, 3216], [3217, 3225], [3226, 3232], [3233, 3241], [3241, 3242], [3243, 3251], [3252, 3254], [3254, 3255], [3256, 3260], [3264, 3271], [3272, 3279], [3280, 3289], [3290, 3293], [3294, 3299], [3300, 3301], [3302, 3306], [3307, 3315], [3315, 3316], [3317, 3326], [3327, 3330], [3331, 3335], [3336, 3338], [3339, 3344], [3345, 3348], [3349, 3353], [3354, 3357], [3357, 3358], [3359, 3362], [3363, 3367], [3368, 3370], [3371, 3380], [3381, 3383], [3384, 3387], [3387, 3388], [3389, 3392], [3393, 3396], [3397, 3404], [3405, 3407], [3408, 3411], [3412, 3421], [3421, 3422]]}) 
answer: set([u'aburukuwa'])
candidate Sentence: (0.19107162952423096, {u'tokens': [u'The', u'sound', u'of', u'a', u'drum', u'depends', u'on', u'several', u'variables', u',', u'including', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'materials', u'from', u'which', u'the', u'shell', u'was', u'made', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'used', u'and', u'tension', u'applied', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'is', u'struck', u'.'], u'lemmas': [u'the', u'sound', u'of', u'a', u'drum', u'depend', u'on', u'several', u'variable', u',', u'include', u'shape', u',', u'size', u'and', u'thickness', u'of', u'its', u'shell', u',', u'material', u'from', u'which', u'the', u'shell', u'be', u'make', u',', u'counterhoop', u'material', u',', u'type', u'of', u'drumhead', u'use', u'and', u'tension', u'apply', u'to', u'it', u',', u'position', u'of', u'the', u'drum', u',', u'location', u',', u'and', u'the', u'velocity', u'and', u'angle', u'in', u'which', u'it', u'be', u'strike', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'VBP', u'VBZ', u'IN', u'JJ', u'NNS', u',', u'VBG', u'NN', u',', u'NN', u'CC', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNS', u'IN', u'WDT', u'DT', u'NN', u'VBD', u'VBN', u',', u'NN', u'NN', u',', u'NN', u'IN', u'NN', u'VBN', u'CC', u'NN', u'VBD', u'TO', u'PRP', u',', u'NN', u'IN', u'DT', u'VBP', u',', u'NN', u',', u'CC', u'DT', u'NN', u'CC', u'NN', u'IN', u'WDT', u'PRP', u'VBZ', u'VBN', u'.'], u'char_offsets': [[2576, 2579], [2580, 2585], [2586, 2588], [2589, 2590], [2591, 2595], [2596, 2603], [2604, 2606], [2607, 2614], [2615, 2624], [2624, 2625], [2626, 2635], [2636, 2641], [2641, 2642], [2643, 2647], [2648, 2651], [2652, 2661], [2662, 2664], [2665, 2668], [2669, 2674], [2674, 2675], [2676, 2685], [2686, 2690], [2691, 2696], [2697, 2700], [2701, 2706], [2707, 2710], [2711, 2715], [2715, 2716], [2717, 2728], [2729, 2737], [2737, 2738], [2739, 2743], [2744, 2746], [2747, 2755], [2756, 2760], [2761, 2764], [2765, 2772], [2773, 2780], [2781, 2783], [2784, 2786], [2786, 2787], [2788, 2796], [2797, 2799], [2800, 2803], [2804, 2808], [2808, 2809], [2810, 2818], [2818, 2819], [2820, 2823], [2824, 2827], [2828, 2836], [2837, 2840], [2841, 2846], [2847, 2849], [2850, 2855], [2856, 2858], [2859, 2861], [2862, 2868], [2868, 2869]]}) 
answer: set([u'aburukuwa'])

Is the Aburukuwa a type of drum?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd6c20>.answer
_____________________________ test_yesno[param100] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6dd0>, <src.tfidf.TF_IDF object at 0x7fbca705f6d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd6dd0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.40925982594490051, {u'tokens': [u'The', u'electric', u'eel', u'of', u'South', u'America', u'is', u'not', u'a', u'true', u'eel', u',', u'but', u'is', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'lemmas': [u'the', u'electric', u'eel', u'of', u'South', u'America', u'be', u'not', u'a', u'true', u'eel', u',', u'but', u'be', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'CC', u'VBZ', u'RBR', u'RB', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[2920, 2923], [2924, 2932], [2933, 2936], [2937, 2939], [2940, 2945], [2946, 2953], [2954, 2956], [2957, 2960], [2961, 2962], [2963, 2967], [2968, 2971], [2971, 2972], [2973, 2976], [2977, 2979], [2980, 2984], [2985, 2992], [2993, 3000], [3001, 3003], [3004, 3007], [3008, 3012], [3012, 3013]]}) 
answer: set([])
candidate Sentence: (0.20881083607673645, {u'tokens': [u'The', u'term', u'``', u'eel', u"''", u'is', u'also', u'used', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eels', u'and', u'spiny', u'eels', u',', u'but', u'these', u'are', u'not', u'members', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'lemmas': [u'the', u'term', u'``', u'eel', u"''", u'be', u'also', u'use', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eel', u'and', u'spiny', u'eel', u',', u'but', u'these', u'be', u'not', u'member', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'RB', u'JJ', u'NN', u',', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u',', u'CC', u'DT', u'VBP', u'RB', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[322, 325], [326, 330], [331, 332], [332, 335], [335, 336], [337, 339], [340, 344], [345, 349], [350, 353], [354, 358], [359, 364], [365, 374], [375, 381], [382, 386], [386, 387], [388, 392], [393, 395], [396, 404], [405, 409], [410, 413], [414, 419], [420, 424], [424, 425], [426, 429], [430, 435], [436, 439], [440, 443], [444, 451], [452, 454], [455, 458], [459, 473], [474, 479], [479, 480]]}) 
answer: set([u'a', u'true'])
candidate Sentence: (0.14944487810134888, {u'tokens': [u'True', u'eels', u'are', u'elongated', u'fishes', u',', u'ranging', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-LRB-', u'Monognathus', u'ahlstromi', u'-RRB-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'lemmas': [u'true', u'eel', u'be', u'elongate', u'fish', u',', u'range', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-lrb-', u'monognathus', u'ahlstromus', u'-rrb-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'VBG', u'IN', u'NN', u'IN', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'TO', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[485, 489], [490, 494], [495, 498], [499, 508], [509, 515], [515, 516], [517, 524], [525, 527], [528, 534], [535, 539], [542, 544], [545, 548], [549, 558], [559, 562], [563, 564], [564, 575], [576, 585], [585, 586], [587, 589], [592, 594], [595, 598], [599, 604], [605, 610], [610, 611]]}) 
answer: set([u'a', u'electric'])
candidate Sentence: (0.13916818797588348, {u'tokens': [u'True', u'eels', u'-LRB-', u'Anguilliformes', u';', u'-RRB-', u'are', u'an', u'order', u'of', u'fish', u',', u'which', u'consists', u'of', u'four', u'suborders', u',', u'19', u'families', u',', u'110', u'genera', u'and', u'approximately', u'800', u'species', u'.'], u'lemmas': [u'true', u'eel', u'-lrb-', u'anguilliforme', u';', u'-rrb-', u'be', u'a', u'order', u'of', u'fish', u',', u'which', u'consist', u'of', u'four', u'suborder', u',', u'19', u'family', u',', u'110', u'genus', u'and', u'approximately', u'800', u'species', u'.'], u'pos': [u'JJ', u'NNS', u'-LRB-', u'NNS', u':', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'NN', u',', u'WDT', u'VBZ', u'IN', u'CD', u'NNS', u',', u'CD', u'NNS', u',', u'CD', u'NN', u'CC', u'RB', u'CD', u'NNS', u'.'], u'char_offsets': [[155, 159], [160, 164], [165, 166], [166, 180], [180, 181], [183, 184], [185, 188], [189, 191], [192, 197], [198, 200], [201, 205], [205, 206], [207, 212], [213, 221], [222, 224], [225, 229], [230, 239], [239, 240], [241, 243], [244, 252], [252, 253], [254, 257], [258, 264], [265, 268], [269, 282], [283, 286], [287, 294], [294, 295]]}) 
answer: set([u'the', u'electric'])
candidate Sentence: (0.12558895349502563, {u'tokens': [u'Most', u'true', u'eels', u'prefer', u'to', u'dwell', u'in', u'shallow', u'waters', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'holes', u'.'], u'lemmas': [u'most', u'true', u'eel', u'prefer', u'to', u'dwell', u'in', u'shallow', u'water', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'hole', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'TO', u'VB', u'IN', u'JJ', u'NNS', u'CC', u'VB', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'NNS', u'.'], u'char_offsets': [[825, 829], [830, 834], [835, 839], [840, 846], [847, 849], [850, 855], [856, 858], [859, 866], [867, 873], [874, 876], [877, 881], [882, 884], [885, 888], [889, 895], [896, 901], [902, 904], [905, 908], [909, 914], [914, 915], [916, 925], [926, 928], [929, 934], [934, 935]]}) 
answer: set([u'a', u'electric'])

Is the electric eel a true eel?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd6dd0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param101] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd6e18>, <src.tfidf.TF_IDF object at 0x7fbca705f6d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, the electric eel is not a true eel.') == True
E                +  where 'No, the electric eel is not a true eel.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6e18>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.40925982594490051, {u'tokens': [u'The', u'electric', u'eel', u'of', u'South', u'America', u'is', u'not', u'a', u'true', u'eel', u',', u'but', u'is', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'lemmas': [u'the', u'electric', u'eel', u'of', u'South', u'America', u'be', u'not', u'a', u'true', u'eel', u',', u'but', u'be', u'more', u'closely', u'related', u'to', u'the', u'Carp', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'CC', u'VBZ', u'RBR', u'RB', u'JJ', u'TO', u'DT', u'NNP', u'.'], u'char_offsets': [[2920, 2923], [2924, 2932], [2933, 2936], [2937, 2939], [2940, 2945], [2946, 2953], [2954, 2956], [2957, 2960], [2961, 2962], [2963, 2967], [2968, 2971], [2971, 2972], [2973, 2976], [2977, 2979], [2980, 2984], [2985, 2992], [2993, 3000], [3001, 3003], [3004, 3007], [3008, 3012], [3012, 3013]]}) 
answer: set([])
candidate Sentence: (0.20881083607673645, {u'tokens': [u'The', u'term', u'``', u'eel', u"''", u'is', u'also', u'used', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eels', u'and', u'spiny', u'eels', u',', u'but', u'these', u'are', u'not', u'members', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'lemmas': [u'the', u'term', u'``', u'eel', u"''", u'be', u'also', u'use', u'for', u'some', u'other', u'similarly', u'shaped', u'fish', u',', u'such', u'as', u'electric', u'eel', u'and', u'spiny', u'eel', u',', u'but', u'these', u'be', u'not', u'member', u'of', u'the', u'Anguilliformes', u'order', u'.'], u'pos': [u'DT', u'NN', u'``', u'NN', u"''", u'VBZ', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'RB', u'JJ', u'NN', u',', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u',', u'CC', u'DT', u'VBP', u'RB', u'NNS', u'IN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[322, 325], [326, 330], [331, 332], [332, 335], [335, 336], [337, 339], [340, 344], [345, 349], [350, 353], [354, 358], [359, 364], [365, 374], [375, 381], [382, 386], [386, 387], [388, 392], [393, 395], [396, 404], [405, 409], [410, 413], [414, 419], [420, 424], [424, 425], [426, 429], [430, 435], [436, 439], [440, 443], [444, 451], [452, 454], [455, 458], [459, 473], [474, 479], [479, 480]]}) 
answer: set([u'a', u'true'])
candidate Sentence: (0.14944487810134888, {u'tokens': [u'True', u'eels', u'are', u'elongated', u'fishes', u',', u'ranging', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-LRB-', u'Monognathus', u'ahlstromi', u'-RRB-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'lemmas': [u'true', u'eel', u'be', u'elongate', u'fish', u',', u'range', u'in', u'length', u'from', u'in', u'the', u'one-jawed', u'eel', u'-lrb-', u'monognathus', u'ahlstromus', u'-rrb-', u'to', u'in', u'the', u'giant', u'moray', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'NNS', u',', u'VBG', u'IN', u'NN', u'IN', u'IN', u'DT', u'JJ', u'NN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'TO', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[485, 489], [490, 494], [495, 498], [499, 508], [509, 515], [515, 516], [517, 524], [525, 527], [528, 534], [535, 539], [542, 544], [545, 548], [549, 558], [559, 562], [563, 564], [564, 575], [576, 585], [585, 586], [587, 589], [592, 594], [595, 598], [599, 604], [605, 610], [610, 611]]}) 
answer: set([u'a', u'electric'])
candidate Sentence: (0.13916818797588348, {u'tokens': [u'True', u'eels', u'-LRB-', u'Anguilliformes', u';', u'-RRB-', u'are', u'an', u'order', u'of', u'fish', u',', u'which', u'consists', u'of', u'four', u'suborders', u',', u'19', u'families', u',', u'110', u'genera', u'and', u'approximately', u'800', u'species', u'.'], u'lemmas': [u'true', u'eel', u'-lrb-', u'anguilliforme', u';', u'-rrb-', u'be', u'a', u'order', u'of', u'fish', u',', u'which', u'consist', u'of', u'four', u'suborder', u',', u'19', u'family', u',', u'110', u'genus', u'and', u'approximately', u'800', u'species', u'.'], u'pos': [u'JJ', u'NNS', u'-LRB-', u'NNS', u':', u'-RRB-', u'VBP', u'DT', u'NN', u'IN', u'NN', u',', u'WDT', u'VBZ', u'IN', u'CD', u'NNS', u',', u'CD', u'NNS', u',', u'CD', u'NN', u'CC', u'RB', u'CD', u'NNS', u'.'], u'char_offsets': [[155, 159], [160, 164], [165, 166], [166, 180], [180, 181], [183, 184], [185, 188], [189, 191], [192, 197], [198, 200], [201, 205], [205, 206], [207, 212], [213, 221], [222, 224], [225, 229], [230, 239], [239, 240], [241, 243], [244, 252], [252, 253], [254, 257], [258, 264], [265, 268], [269, 282], [283, 286], [287, 294], [294, 295]]}) 
answer: set([u'the', u'electric'])
candidate Sentence: (0.12558895349502563, {u'tokens': [u'Most', u'true', u'eels', u'prefer', u'to', u'dwell', u'in', u'shallow', u'waters', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'holes', u'.'], u'lemmas': [u'most', u'true', u'eel', u'prefer', u'to', u'dwell', u'in', u'shallow', u'water', u'or', u'hide', u'at', u'the', u'bottom', u'layer', u'of', u'the', u'ocean', u',', u'sometimes', u'in', u'hole', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'TO', u'VB', u'IN', u'JJ', u'NNS', u'CC', u'VB', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u',', u'RB', u'IN', u'NNS', u'.'], u'char_offsets': [[825, 829], [830, 834], [835, 839], [840, 846], [847, 849], [850, 855], [856, 858], [859, 866], [867, 873], [874, 876], [877, 881], [882, 884], [885, 888], [889, 895], [896, 901], [902, 904], [905, 908], [909, 914], [914, 915], [916, 925], [926, 928], [929, 934], [934, 935]]}) 
answer: set([u'a', u'electric'])

Is the electric eel a true eel?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, the electric eel is not a true eel.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 200 documents, 9480 characters, 1820 tokens, 47.4 char/doc, 9.1 tok/doc RATES: 16.441 doc/sec, 149.6 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, the electric eel is not a true eel.') == True
 +  where 'No, the electric eel is not a true eel.' = <src.question_processing.Question_parser instance at 0x7fbca0cd6e18>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param110] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd90e0>, <src.tfidf.TF_IDF object at 0x7fbca38b5cd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd90e0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.6285393238067627, {u'tokens': [u'However', u',', u'this', u'does', u'not', u'mean', u'that', u'Finnish', u'is', u'threatened', u'by', u'English', u'.'], u'lemmas': [u'however', u',', u'this', u'do', u'not', u'mean', u'that', u'finnish', u'be', u'threaten', u'by', u'English', u'.'], u'pos': [u'RB', u',', u'DT', u'VBZ', u'RB', u'VB', u'IN', u'JJ', u'VBZ', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[34613, 34620], [34620, 34621], [34622, 34626], [34627, 34631], [34632, 34635], [34636, 34640], [34641, 34645], [34646, 34653], [34654, 34656], [34657, 34667], [34668, 34670], [34671, 34678], [34678, 34679]]}) 
answer: set([])
candidate Sentence: (0.37686517834663391, {u'tokens': [u'Do', u'you', u'speak', u'English', u'?'], u'lemmas': [u'do', u'you', u'speak', u'English', u'?'], u'pos': [u'VBP', u'PRP', u'VB', u'NNP', u'.'], u'char_offsets': [[43190, 43192], [43193, 43196], [43197, 43202], [43203, 43210], [43210, 43211]]}) 
answer: set([u'threaten', u'by', u'finnish'])
candidate Sentence: (0.20908023416996002, {u'tokens': [u'Are', u'you', u'English', u'?'], u'lemmas': [u'be', u'you', u'english', u'?'], u'pos': [u'VBP', u'PRP', u'JJ', u'.'], u'char_offsets': [[43573, 43576], [43577, 43580], [43581, 43588], [43588, 43589]]}) 
answer: set([u'threaten', u'by', u'finnish'])
candidate Sentence: (0.19588159024715424, {u'tokens': [u'Do', u'you', u'understand', u'Finnish', u'?'], u'lemmas': [u'do', u'you', u'understand', u'finnish', u'?'], u'pos': [u'VBP', u'PRP', u'VB', u'JJ', u'.'], u'char_offsets': [[43137, 43139], [43140, 43143], [43144, 43154], [43155, 43162], [43162, 43163]]}) 
answer: set([u'threaten', u'by', u'english'])
candidate Sentence: (0.18812230229377747, {u'tokens': [u'where', u'is', u'...', u'?'], u'lemmas': [u'where', u'be', u'...', u'?'], u'pos': [u'WRB', u'VBZ', u':', u'.'], u'char_offsets': [[42742, 42747], [42748, 42750], [42751, 42754], [42754, 42755]]}) 
answer: set([u'threaten', u'by', u'finnish', u'english'])

Is Finnish threatened by English?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd90e0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param111] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9128>, <src.tfidf.TF_IDF object at 0x7fbca38b5cd0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No, Finnish is not threatened by English.') == True
E                +  where 'No, Finnish is not threatened by English.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9128>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.6285393238067627, {u'tokens': [u'However', u',', u'this', u'does', u'not', u'mean', u'that', u'Finnish', u'is', u'threatened', u'by', u'English', u'.'], u'lemmas': [u'however', u',', u'this', u'do', u'not', u'mean', u'that', u'finnish', u'be', u'threaten', u'by', u'English', u'.'], u'pos': [u'RB', u',', u'DT', u'VBZ', u'RB', u'VB', u'IN', u'JJ', u'VBZ', u'VBN', u'IN', u'NNP', u'.'], u'char_offsets': [[34613, 34620], [34620, 34621], [34622, 34626], [34627, 34631], [34632, 34635], [34636, 34640], [34641, 34645], [34646, 34653], [34654, 34656], [34657, 34667], [34668, 34670], [34671, 34678], [34678, 34679]]}) 
answer: set([])
candidate Sentence: (0.37686517834663391, {u'tokens': [u'Do', u'you', u'speak', u'English', u'?'], u'lemmas': [u'do', u'you', u'speak', u'English', u'?'], u'pos': [u'VBP', u'PRP', u'VB', u'NNP', u'.'], u'char_offsets': [[43190, 43192], [43193, 43196], [43197, 43202], [43203, 43210], [43210, 43211]]}) 
answer: set([u'threaten', u'by', u'finnish'])
candidate Sentence: (0.20908023416996002, {u'tokens': [u'Are', u'you', u'English', u'?'], u'lemmas': [u'be', u'you', u'english', u'?'], u'pos': [u'VBP', u'PRP', u'JJ', u'.'], u'char_offsets': [[43573, 43576], [43577, 43580], [43581, 43588], [43588, 43589]]}) 
answer: set([u'threaten', u'by', u'finnish'])
candidate Sentence: (0.19588159024715424, {u'tokens': [u'Do', u'you', u'understand', u'Finnish', u'?'], u'lemmas': [u'do', u'you', u'understand', u'finnish', u'?'], u'pos': [u'VBP', u'PRP', u'VB', u'JJ', u'.'], u'char_offsets': [[43137, 43139], [43140, 43143], [43144, 43154], [43155, 43162], [43162, 43163]]}) 
answer: set([u'threaten', u'by', u'english'])
candidate Sentence: (0.18812230229377747, {u'tokens': [u'where', u'is', u'...', u'?'], u'lemmas': [u'where', u'be', u'...', u'?'], u'pos': [u'WRB', u'VBZ', u':', u'.'], u'char_offsets': [[42742, 42747], [42748, 42750], [42751, 42754], [42754, 42755]]}) 
answer: set([u'threaten', u'by', u'finnish', u'english'])

Is Finnish threatened by English?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No, Finnish is not threatened by English.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No, Finnish is not threatened by English.') == True
 +  where 'No, Finnish is not threatened by English.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9128>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param120] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd93b0>, <src.tfidf.TF_IDF object at 0x7fbca2d367d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd93b0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.99307358264923096, {u'tokens': [u'Flutes', u'can', u'be', u'played', u'with', u'several', u'different', u'air', u'sources', u'.'], u'lemmas': [u'flute', u'can', u'be', u'play', u'with', u'several', u'different', u'air', u'source', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[9738, 9744], [9745, 9748], [9749, 9751], [9752, 9758], [9759, 9763], [9764, 9771], [9772, 9781], [9782, 9785], [9786, 9793], [9793, 9794]]}) 
answer: set([u'a'])
candidate Sentence: (0.24957442283630371, {u'tokens': [u'This', u'is', u'why', u'a', u'police', u'whistle', u',', u'a', u'form', u'of', u'flute', u',', u'is', u'very', u'wide', u'for', u'its', u'pitch', u',', u'and', u'why', u'a', u'pipe', u'organ', u'can', u'be', u'far', u'louder', u'than', u'a', u'concert', u'flute', u':', u'a', u'large', u'organ', u'pipe', u'can', u'contain', u'several', u'cubic', u'feet', u'of', u'air', u',', u'and', u'its', u'tone', u'hole', u'may', u'be', u'several', u'inches', u'wide', u',', u'while', u'a', u'concert', u'flute', u"'s", u'air', u'stream', u'measures', u'a', u'fraction', u'of', u'an', u'inch', u'across', u'.'], u'lemmas': [u'this', u'be', u'why', u'a', u'police', u'whistle', u',', u'a', u'form', u'of', u'flute', u',', u'be', u'very', u'wide', u'for', u'its', u'pitch', u',', u'and', u'why', u'a', u'pipe', u'organ', u'can', u'be', u'far', u'louder', u'than', u'a', u'concert', u'flute', u':', u'a', u'large', u'organ', u'pipe', u'can', u'contain', u'several', u'cubic', u'foot', u'of', u'air', u',', u'and', u'its', u'tone', u'hole', u'may', u'be', u'several', u'inch', u'wide', u',', u'while', u'a', u'concert', u'flute', u"'s", u'air', u'stream', u'measure', u'a', u'fraction', u'of', u'a', u'inch', u'across', u'.'], u'pos': [u'DT', u'VBZ', u'WRB', u'DT', u'NN', u'VBP', u',', u'DT', u'NN', u'IN', u'NN', u',', u'VBZ', u'RB', u'JJ', u'IN', u'PRP$', u'NN', u',', u'CC', u'WRB', u'DT', u'NN', u'NN', u'MD', u'VB', u'RB', u'RBR', u'IN', u'DT', u'NN', u'NN', u':', u'DT', u'JJ', u'NN', u'NN', u'MD', u'VB', u'JJ', u'JJ', u'NNS', u'IN', u'NN', u',', u'CC', u'PRP$', u'NN', u'NN', u'MD', u'VB', u'JJ', u'NNS', u'JJ', u',', u'IN', u'DT', u'NN', u'NN', u'POS', u'NN', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'.'], u'char_offsets': [[4891, 4895], [4896, 4898], [4899, 4902], [4903, 4904], [4905, 4911], [4912, 4919], [4919, 4920], [4921, 4922], [4923, 4927], [4928, 4930], [4931, 4936], [4936, 4937], [4938, 4940], [4941, 4945], [4946, 4950], [4951, 4954], [4955, 4958], [4959, 4964], [4964, 4965], [4966, 4969], [4970, 4973], [4974, 4975], [4976, 4980], [4981, 4986], [4987, 4990], [4991, 4993], [4994, 4997], [4998, 5004], [5005, 5009], [5010, 5011], [5012, 5019], [5020, 5025], [5025, 5026], [5027, 5028], [5029, 5034], [5035, 5040], [5041, 5045], [5046, 5049], [5050, 5057], [5058, 5065], [5066, 5071], [5072, 5076], [5077, 5079], [5080, 5083], [5083, 5084], [5085, 5088], [5089, 5092], [5093, 5097], [5098, 5102], [5103, 5106], [5107, 5109], [5110, 5117], [5118, 5124], [5125, 5129], [5129, 5130], [5131, 5136], [5137, 5138], [5139, 5146], [5147, 5152], [5152, 5154], [5155, 5158], [5159, 5165], [5166, 5174], [5175, 5176], [5177, 5185], [5186, 5188], [5189, 5191], [5192, 5196], [5197, 5203], [5203, 5204]]}) 
answer: set([u'source', u'play', u'with', u'different'])
candidate Sentence: (0.19284731149673462, {u'tokens': [u'A', u'musician', u'who', u'plays', u'the', u'flute', u'can', u'be', u'referred', u'to', u'as', u'a', u'flute', u'player', u',', u'a', u'flautist', u',', u'or', u'a', u'flutist', u'.'], u'lemmas': [u'a', u'musician', u'who', u'play', u'the', u'flute', u'can', u'be', u'refer', u'to', u'as', u'a', u'flute', u'player', u',', u'a', u'flautist', u',', u'or', u'a', u'flutist', u'.'], u'pos': [u'DT', u'NN', u'WP', u'VBZ', u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'IN', u'DT', u'NN', u'NN', u',', u'DT', u'NN', u',', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[241, 242], [243, 251], [252, 255], [256, 261], [262, 265], [266, 271], [272, 275], [276, 278], [279, 287], [288, 290], [291, 293], [294, 295], [296, 301], [302, 308], [308, 309], [310, 311], [312, 320], [320, 321], [322, 324], [325, 326], [327, 334], [334, 335]]}) 
answer: set([u'source', u'different', u'several', u'with', u'air'])
candidate Sentence: (0.18457897007465363, {u'tokens': [u'There', u'are', u'several', u'broad', u'classes', u'of', u'flutes', u'.'], u'lemmas': [u'there', u'be', u'several', u'broad', u'class', u'of', u'flute', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'NNS', u'.'], u'char_offsets': [[8287, 8292], [8293, 8296], [8297, 8304], [8305, 8310], [8311, 8318], [8319, 8321], [8322, 8328], [8328, 8329]]}) 
answer: set([u'a', u'play', u'different', u'air', u'source', u'with'])
candidate Sentence: (0.16474035382270813, {u'tokens': [u'Various', u'combinations', u'can', u'be', u'opened', u'or', u'closed', u'by', u'means', u'of', u'keys', u',', u'to', u'produce', u'the', u'different', u'notes', u'in', u'its', u'playing', u'range', u'.'], u'lemmas': [u'various', u'combination', u'can', u'be', u'open', u'or', u'close', u'by', u'means', u'of', u'key', u',', u'to', u'produce', u'the', u'different', u'note', u'in', u'its', u'playing', u'range', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'IN', u'NNS', u',', u'TO', u'VB', u'DT', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'NN', u'.'], u'char_offsets': [[10353, 10360], [10361, 10373], [10374, 10377], [10378, 10380], [10381, 10387], [10388, 10390], [10391, 10397], [10398, 10400], [10401, 10406], [10407, 10409], [10410, 10414], [10414, 10415], [10416, 10418], [10419, 10426], [10427, 10430], [10431, 10440], [10441, 10446], [10447, 10449], [10450, 10453], [10454, 10461], [10462, 10467], [10467, 10468]]}) 
answer: set([u'a', u'play', u'flute', u'air', u'source', u'several', u'with'])

Can a flute be played with several different air sources?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd93b0>.answer
_____________________________ test_yesno[param121] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd93f8>, <src.tfidf.TF_IDF object at 0x7fbca2d367d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd93f8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.99307358264923096, {u'tokens': [u'Flutes', u'can', u'be', u'played', u'with', u'several', u'different', u'air', u'sources', u'.'], u'lemmas': [u'flute', u'can', u'be', u'play', u'with', u'several', u'different', u'air', u'source', u'.'], u'pos': [u'NNS', u'MD', u'VB', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[9738, 9744], [9745, 9748], [9749, 9751], [9752, 9758], [9759, 9763], [9764, 9771], [9772, 9781], [9782, 9785], [9786, 9793], [9793, 9794]]}) 
answer: set([u'a'])
candidate Sentence: (0.24957442283630371, {u'tokens': [u'This', u'is', u'why', u'a', u'police', u'whistle', u',', u'a', u'form', u'of', u'flute', u',', u'is', u'very', u'wide', u'for', u'its', u'pitch', u',', u'and', u'why', u'a', u'pipe', u'organ', u'can', u'be', u'far', u'louder', u'than', u'a', u'concert', u'flute', u':', u'a', u'large', u'organ', u'pipe', u'can', u'contain', u'several', u'cubic', u'feet', u'of', u'air', u',', u'and', u'its', u'tone', u'hole', u'may', u'be', u'several', u'inches', u'wide', u',', u'while', u'a', u'concert', u'flute', u"'s", u'air', u'stream', u'measures', u'a', u'fraction', u'of', u'an', u'inch', u'across', u'.'], u'lemmas': [u'this', u'be', u'why', u'a', u'police', u'whistle', u',', u'a', u'form', u'of', u'flute', u',', u'be', u'very', u'wide', u'for', u'its', u'pitch', u',', u'and', u'why', u'a', u'pipe', u'organ', u'can', u'be', u'far', u'louder', u'than', u'a', u'concert', u'flute', u':', u'a', u'large', u'organ', u'pipe', u'can', u'contain', u'several', u'cubic', u'foot', u'of', u'air', u',', u'and', u'its', u'tone', u'hole', u'may', u'be', u'several', u'inch', u'wide', u',', u'while', u'a', u'concert', u'flute', u"'s", u'air', u'stream', u'measure', u'a', u'fraction', u'of', u'a', u'inch', u'across', u'.'], u'pos': [u'DT', u'VBZ', u'WRB', u'DT', u'NN', u'VBP', u',', u'DT', u'NN', u'IN', u'NN', u',', u'VBZ', u'RB', u'JJ', u'IN', u'PRP$', u'NN', u',', u'CC', u'WRB', u'DT', u'NN', u'NN', u'MD', u'VB', u'RB', u'RBR', u'IN', u'DT', u'NN', u'NN', u':', u'DT', u'JJ', u'NN', u'NN', u'MD', u'VB', u'JJ', u'JJ', u'NNS', u'IN', u'NN', u',', u'CC', u'PRP$', u'NN', u'NN', u'MD', u'VB', u'JJ', u'NNS', u'JJ', u',', u'IN', u'DT', u'NN', u'NN', u'POS', u'NN', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'.'], u'char_offsets': [[4891, 4895], [4896, 4898], [4899, 4902], [4903, 4904], [4905, 4911], [4912, 4919], [4919, 4920], [4921, 4922], [4923, 4927], [4928, 4930], [4931, 4936], [4936, 4937], [4938, 4940], [4941, 4945], [4946, 4950], [4951, 4954], [4955, 4958], [4959, 4964], [4964, 4965], [4966, 4969], [4970, 4973], [4974, 4975], [4976, 4980], [4981, 4986], [4987, 4990], [4991, 4993], [4994, 4997], [4998, 5004], [5005, 5009], [5010, 5011], [5012, 5019], [5020, 5025], [5025, 5026], [5027, 5028], [5029, 5034], [5035, 5040], [5041, 5045], [5046, 5049], [5050, 5057], [5058, 5065], [5066, 5071], [5072, 5076], [5077, 5079], [5080, 5083], [5083, 5084], [5085, 5088], [5089, 5092], [5093, 5097], [5098, 5102], [5103, 5106], [5107, 5109], [5110, 5117], [5118, 5124], [5125, 5129], [5129, 5130], [5131, 5136], [5137, 5138], [5139, 5146], [5147, 5152], [5152, 5154], [5155, 5158], [5159, 5165], [5166, 5174], [5175, 5176], [5177, 5185], [5186, 5188], [5189, 5191], [5192, 5196], [5197, 5203], [5203, 5204]]}) 
answer: set([u'source', u'play', u'with', u'different'])
candidate Sentence: (0.19284731149673462, {u'tokens': [u'A', u'musician', u'who', u'plays', u'the', u'flute', u'can', u'be', u'referred', u'to', u'as', u'a', u'flute', u'player', u',', u'a', u'flautist', u',', u'or', u'a', u'flutist', u'.'], u'lemmas': [u'a', u'musician', u'who', u'play', u'the', u'flute', u'can', u'be', u'refer', u'to', u'as', u'a', u'flute', u'player', u',', u'a', u'flautist', u',', u'or', u'a', u'flutist', u'.'], u'pos': [u'DT', u'NN', u'WP', u'VBZ', u'DT', u'NN', u'MD', u'VB', u'VBN', u'TO', u'IN', u'DT', u'NN', u'NN', u',', u'DT', u'NN', u',', u'CC', u'DT', u'NN', u'.'], u'char_offsets': [[241, 242], [243, 251], [252, 255], [256, 261], [262, 265], [266, 271], [272, 275], [276, 278], [279, 287], [288, 290], [291, 293], [294, 295], [296, 301], [302, 308], [308, 309], [310, 311], [312, 320], [320, 321], [322, 324], [325, 326], [327, 334], [334, 335]]}) 
answer: set([u'source', u'different', u'several', u'with', u'air'])
candidate Sentence: (0.18457897007465363, {u'tokens': [u'There', u'are', u'several', u'broad', u'classes', u'of', u'flutes', u'.'], u'lemmas': [u'there', u'be', u'several', u'broad', u'class', u'of', u'flute', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'NNS', u'.'], u'char_offsets': [[8287, 8292], [8293, 8296], [8297, 8304], [8305, 8310], [8311, 8318], [8319, 8321], [8322, 8328], [8328, 8329]]}) 
answer: set([u'a', u'play', u'different', u'air', u'source', u'with'])
candidate Sentence: (0.16474035382270813, {u'tokens': [u'Various', u'combinations', u'can', u'be', u'opened', u'or', u'closed', u'by', u'means', u'of', u'keys', u',', u'to', u'produce', u'the', u'different', u'notes', u'in', u'its', u'playing', u'range', u'.'], u'lemmas': [u'various', u'combination', u'can', u'be', u'open', u'or', u'close', u'by', u'means', u'of', u'key', u',', u'to', u'produce', u'the', u'different', u'note', u'in', u'its', u'playing', u'range', u'.'], u'pos': [u'JJ', u'NNS', u'MD', u'VB', u'VBN', u'CC', u'VBN', u'IN', u'NNS', u'IN', u'NNS', u',', u'TO', u'VB', u'DT', u'JJ', u'NNS', u'IN', u'PRP$', u'NN', u'NN', u'.'], u'char_offsets': [[10353, 10360], [10361, 10373], [10374, 10377], [10378, 10380], [10381, 10387], [10388, 10390], [10391, 10397], [10398, 10400], [10401, 10406], [10407, 10409], [10410, 10414], [10414, 10415], [10416, 10418], [10419, 10426], [10427, 10430], [10431, 10440], [10441, 10446], [10447, 10449], [10450, 10453], [10454, 10461], [10462, 10467], [10467, 10468]]}) 
answer: set([u'a', u'play', u'flute', u'air', u'source', u'several', u'with'])

Can a flute be played with several different air sources?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd93f8>.answer
_____________________________ test_yesno[param124] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd94d0>, <src.tfidf.TF_IDF object at 0x7fbca4915ad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('no') == True
E                +  where 'no' = <src.question_processing.Question_parser instance at 0x7fbca0cd94d0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.35101374983787537, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3860, 3863], [3864, 3868], [3869, 3875], [3875, 3876], [3877, 3883], [3884, 3886], [3887, 3890], [3891, 3900], [3900, 3901], [3902, 3907], [3908, 3910], [3911, 3918], [3919, 3921], [3922, 3927], [3928, 3939], [3940, 3947], [3947, 3948], [3949, 3952], [3953, 3957], [3958, 3965], [3966, 3970], [3971, 3973], [3974, 3984], [3985, 3989], [3990, 3996], [3997, 4009], [4009, 4010]]}) 
answer: set([])
candidate Sentence: (0.11231909692287445, {u'tokens': [u'However', u',', u'the', u'IUCN', u'does', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'Vulnerable', u'.'], u'lemmas': [u'however', u',', u'the', u'IUCN', u'do', u'not', u'believe', u'there', u'be', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'vulnerable', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'VBZ', u'RB', u'VB', u'EX', u'VBZ', u'JJ', u'NN', u'RB', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NNP', u'TO', u'JJ', u'.'], u'char_offsets': [[1287, 1294], [1294, 1295], [1296, 1299], [1300, 1304], [1305, 1309], [1310, 1313], [1314, 1321], [1322, 1327], [1328, 1330], [1331, 1337], [1338, 1347], [1348, 1351], [1352, 1354], [1355, 1365], [1366, 1369], [1370, 1377], [1378, 1382], [1383, 1393], [1394, 1396], [1397, 1407], [1407, 1408]]}) 
answer: set([u'hibernate', u'panda'])
candidate Sentence: (0.10975412279367447, {u'tokens': [u'At', u'this', u'time', u',', u'scientists', u'do', u'not', u'know', u'how', u'the', u'female', u'chooses', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'is', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'lemmas': [u'at', u'this', u'time', u',', u'scientist', u'do', u'not', u'know', u'how', u'the', u'female', u'choose', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'be', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u'WRB', u'DT', u'JJ', u'VBZ', u'WDT', u'NN', u'TO', u'VB', u',', u'CC', u'DT', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17364, 17366], [17367, 17371], [17372, 17376], [17376, 17377], [17378, 17388], [17389, 17391], [17392, 17395], [17396, 17400], [17401, 17404], [17405, 17408], [17409, 17415], [17416, 17423], [17424, 17429], [17430, 17433], [17434, 17436], [17437, 17442], [17442, 17443], [17444, 17447], [17448, 17452], [17453, 17455], [17456, 17457], [17458, 17463], [17464, 17466], [17467, 17474], [17475, 17483], [17483, 17484]]}) 
answer: set([u'hibernate', u'panda'])
candidate Sentence: (0.10110393911600113, {u'tokens': [u'The', u'Giant', u'Panda', u'is', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'trees', u'or', u'rock', u'crevices', u'but', u'does', u'not', u'establish', u'permanent', u'dens', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'be', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'tree', u'or', u'rock', u'crevice', u'but', u'do', u'not', u'establish', u'permanent', u'den', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'VB', u'CC', u'VB', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'CC', u'VBZ', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3738, 3741], [3742, 3747], [3748, 3753], [3754, 3756], [3757, 3761], [3762, 3764], [3765, 3770], [3771, 3774], [3775, 3779], [3780, 3787], [3788, 3790], [3791, 3797], [3798, 3803], [3804, 3806], [3807, 3811], [3812, 3820], [3821, 3824], [3825, 3829], [3830, 3833], [3834, 3843], [3844, 3853], [3854, 3858], [3858, 3859]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.085740372538566589, {u'tokens': [u'However', u',', u'the', u'Giant', u'Panda', u'still', u'has', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'does', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derives', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'lemmas': [u'however', u',', u'the', u'Giant', u'Panda', u'still', u'have', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'do', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derive', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'RB', u',', u'CC', u'RB', u'VBZ', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[4494, 4501], [4501, 4502], [4503, 4506], [4507, 4512], [4513, 4518], [4519, 4524], [4525, 4528], [4529, 4532], [4533, 4542], [4543, 4549], [4550, 4552], [4553, 4554], [4555, 4564], [4565, 4568], [4569, 4573], [4574, 4577], [4578, 4582], [4583, 4586], [4587, 4594], [4595, 4597], [4598, 4604], [4605, 4614], [4615, 4626], [4626, 4627], [4628, 4631], [4632, 4636], [4637, 4644], [4645, 4651], [4652, 4658], [4659, 4662], [4663, 4669], [4670, 4677], [4678, 4682], [4683, 4694], [4695, 4697], [4698, 4704], [4704, 4705]]}) 
answer: set([u'hibernate'])

Do pandas hibernate?
Validity= False
Question Type = NA
Answer Type = NA
Answer = no
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('no') == True
 +  where 'no' = <src.question_processing.Question_parser instance at 0x7fbca0cd94d0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param125] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9518>, <src.tfidf.TF_IDF object at 0x7fbca4915ad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd9518>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.35101374983787537, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3860, 3863], [3864, 3868], [3869, 3875], [3875, 3876], [3877, 3883], [3884, 3886], [3887, 3890], [3891, 3900], [3900, 3901], [3902, 3907], [3908, 3910], [3911, 3918], [3919, 3921], [3922, 3927], [3928, 3939], [3940, 3947], [3947, 3948], [3949, 3952], [3953, 3957], [3958, 3965], [3966, 3970], [3971, 3973], [3974, 3984], [3985, 3989], [3990, 3996], [3997, 4009], [4009, 4010]]}) 
answer: set([])
candidate Sentence: (0.11231909692287445, {u'tokens': [u'However', u',', u'the', u'IUCN', u'does', u'not', u'believe', u'there', u'is', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'Vulnerable', u'.'], u'lemmas': [u'however', u',', u'the', u'IUCN', u'do', u'not', u'believe', u'there', u'be', u'enough', u'certainty', u'yet', u'to', u'reclassify', u'the', u'species', u'from', u'Endangered', u'to', u'vulnerable', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'VBZ', u'RB', u'VB', u'EX', u'VBZ', u'JJ', u'NN', u'RB', u'TO', u'VB', u'DT', u'NNS', u'IN', u'NNP', u'TO', u'JJ', u'.'], u'char_offsets': [[1287, 1294], [1294, 1295], [1296, 1299], [1300, 1304], [1305, 1309], [1310, 1313], [1314, 1321], [1322, 1327], [1328, 1330], [1331, 1337], [1338, 1347], [1348, 1351], [1352, 1354], [1355, 1365], [1366, 1369], [1370, 1377], [1378, 1382], [1383, 1393], [1394, 1396], [1397, 1407], [1407, 1408]]}) 
answer: set([u'hibernate', u'panda'])
candidate Sentence: (0.10975412279367447, {u'tokens': [u'At', u'this', u'time', u',', u'scientists', u'do', u'not', u'know', u'how', u'the', u'female', u'chooses', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'is', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'lemmas': [u'at', u'this', u'time', u',', u'scientist', u'do', u'not', u'know', u'how', u'the', u'female', u'choose', u'which', u'cub', u'to', u'raise', u',', u'and', u'this', u'be', u'a', u'topic', u'of', u'ongoing', u'research', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u'WRB', u'DT', u'JJ', u'VBZ', u'WDT', u'NN', u'TO', u'VB', u',', u'CC', u'DT', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[17364, 17366], [17367, 17371], [17372, 17376], [17376, 17377], [17378, 17388], [17389, 17391], [17392, 17395], [17396, 17400], [17401, 17404], [17405, 17408], [17409, 17415], [17416, 17423], [17424, 17429], [17430, 17433], [17434, 17436], [17437, 17442], [17442, 17443], [17444, 17447], [17448, 17452], [17453, 17455], [17456, 17457], [17458, 17463], [17464, 17466], [17467, 17474], [17475, 17483], [17483, 17484]]}) 
answer: set([u'hibernate', u'panda'])
candidate Sentence: (0.10110393911600113, {u'tokens': [u'The', u'Giant', u'Panda', u'is', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'trees', u'or', u'rock', u'crevices', u'but', u'does', u'not', u'establish', u'permanent', u'dens', u'.'], u'lemmas': [u'the', u'Giant', u'Panda', u'be', u'able', u'to', u'climb', u'and', u'take', u'shelter', u'in', u'hollow', u'tree', u'or', u'rock', u'crevice', u'but', u'do', u'not', u'establish', u'permanent', u'den', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'VB', u'CC', u'VB', u'NN', u'IN', u'JJ', u'NNS', u'CC', u'NN', u'NNS', u'CC', u'VBZ', u'RB', u'VB', u'JJ', u'NNS', u'.'], u'char_offsets': [[3738, 3741], [3742, 3747], [3748, 3753], [3754, 3756], [3757, 3761], [3762, 3764], [3765, 3770], [3771, 3774], [3775, 3779], [3780, 3787], [3788, 3790], [3791, 3797], [3798, 3803], [3804, 3806], [3807, 3811], [3812, 3820], [3821, 3824], [3825, 3829], [3830, 3833], [3834, 3843], [3844, 3853], [3854, 3858], [3858, 3859]]}) 
answer: set([u'hibernate'])
candidate Sentence: (0.085740372538566589, {u'tokens': [u'However', u',', u'the', u'Giant', u'Panda', u'still', u'has', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'does', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derives', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'lemmas': [u'however', u',', u'the', u'Giant', u'Panda', u'still', u'have', u'the', u'digestive', u'system', u'of', u'a', u'carnivore', u'and', u'do', u'not', u'have', u'the', u'ability', u'to', u'digest', u'cellulose', u'efficiently', u',', u'and', u'thus', u'derive', u'little', u'energy', u'and', u'little', u'protein', u'from', u'consumption', u'of', u'bamboo', u'.'], u'pos': [u'RB', u',', u'DT', u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'RB', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'RB', u',', u'CC', u'RB', u'VBZ', u'JJ', u'NN', u'CC', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[4494, 4501], [4501, 4502], [4503, 4506], [4507, 4512], [4513, 4518], [4519, 4524], [4525, 4528], [4529, 4532], [4533, 4542], [4543, 4549], [4550, 4552], [4553, 4554], [4555, 4564], [4565, 4568], [4569, 4573], [4574, 4577], [4578, 4582], [4583, 4586], [4587, 4594], [4595, 4597], [4598, 4604], [4605, 4614], [4615, 4626], [4626, 4627], [4628, 4631], [4632, 4636], [4637, 4644], [4645, 4651], [4652, 4658], [4659, 4662], [4663, 4669], [4670, 4677], [4678, 4682], [4683, 4694], [4695, 4697], [4698, 4704], [4704, 4705]]}) 
answer: set([u'hibernate'])

Do pandas hibernate?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd9518>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param128] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd95f0>, <src.tfidf.TF_IDF object at 0x7fbca4915ad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd95f0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39367038011550903, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1815, 1816], [1817, 1822], [1823, 1828], [1829, 1832], [1832, 1833]]}) 
answer: set([u'mammal', u'the'])
candidate Sentence: (0.23751835525035858, {u'tokens': [u'Giant_Panda', u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'Giant_Panda', u'The', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 11], [15, 18], [19, 24], [25, 30], [31, 32], [32, 42], [43, 54], [54, 55], [56, 65], [66, 73], [74, 75], [75, 83], [84, 99], [99, 100], [100, 101], [102, 104], [105, 106], [107, 113], [114, 120], [121, 123], [124, 139], [140, 143], [144, 149], [150, 157], [158, 163], [163, 164]]}) 
answer: set([])
candidate Sentence: (0.23620980978012085, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3860, 3863], [3864, 3868], [3869, 3875], [3875, 3876], [3877, 3883], [3884, 3886], [3887, 3890], [3891, 3900], [3900, 3901], [3902, 3907], [3908, 3910], [3911, 3918], [3919, 3921], [3922, 3927], [3928, 3939], [3940, 3947], [3947, 3948], [3949, 3952], [3953, 3957], [3958, 3965], [3966, 3970], [3971, 3973], [3974, 3984], [3985, 3989], [3990, 3996], [3997, 4009], [4009, 4010]]}) 
answer: set([u'a', u'giant', u'the'])
candidate Sentence: (0.136262446641922, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25389, 25392], [25393, 25396], [25397, 25402], [25403, 25408], [25409, 25414], [25415, 25419], [25420, 25423], [25424, 25428], [25429, 25432], [25433, 25441], [25442, 25444], [25445, 25454], [25455, 25462], [25463, 25468], [25468, 25469]]}) 
answer: set([u'a', u'mammal'])
candidate Sentence: (0.11143916845321655, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6531, 6534], [6535, 6540], [6541, 6546], [6547, 6553], [6554, 6557], [6558, 6567], [6568, 6570], [6571, 6575], [6576, 6581], [6582, 6583], [6584, 6599], [6600, 6610], [6611, 6621], [6621, 6622]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd95f0>.answer
_____________________________ test_yesno[param129] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9638>, <src.tfidf.TF_IDF object at 0x7fbca4915ad0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9638>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39367038011550903, {u'tokens': [u'A', u'Giant', u'Panda', u'cub', u'.'], u'lemmas': [u'a', u'giant', u'panda', u'cub', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[1815, 1816], [1817, 1822], [1823, 1828], [1829, 1832], [1832, 1833]]}) 
answer: set([u'mammal', u'the'])
candidate Sentence: (0.23751835525035858, {u'tokens': [u'Giant_Panda', u'The', u'Giant', u'Panda', u'-LRB-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'meaning', u'``', u'cat-foot', u'black-and-white', u"''", u'-RRB-', u'is', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'lemmas': [u'Giant_Panda', u'The', u'Giant', u'Panda', u'-lrb-', u'Ailuropoda', u'melanoleuca', u',', u'literally', u'mean', u'``', u'cat-foot', u'black-and-white', u"''", u'-rrb-', u'be', u'a', u'mammal', u'native', u'to', u'central-western', u'and', u'south', u'western', u'China', u'.'], u'pos': [u'NNP', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'NN', u',', u'RB', u'VBG', u'``', u'JJ', u'JJ', u"''", u'-RRB-', u'VBZ', u'DT', u'NN', u'JJ', u'TO', u'JJ', u'CC', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[0, 11], [15, 18], [19, 24], [25, 30], [31, 32], [32, 42], [43, 54], [54, 55], [56, 65], [66, 73], [74, 75], [75, 83], [84, 99], [99, 100], [100, 101], [102, 104], [105, 106], [107, 113], [114, 120], [121, 123], [124, 139], [140, 143], [144, 149], [150, 157], [158, 163], [163, 164]]}) 
answer: set([])
candidate Sentence: (0.23620980978012085, {u'tokens': [u'For', u'this', u'reason', u',', u'pandas', u'do', u'not', u'hibernate', u',', u'which', u'is', u'similar', u'to', u'other', u'subtropical', u'mammals', u',', u'and', u'will', u'instead', u'move', u'to', u'elevations', u'with', u'warmer', u'temperatures', u'.'], u'lemmas': [u'for', u'this', u'reason', u',', u'panda', u'do', u'not', u'hibernate', u',', u'which', u'be', u'similar', u'to', u'other', u'subtropical', u'mammal', u',', u'and', u'will', u'instead', u'move', u'to', u'elevation', u'with', u'warmer', u'temperature', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNS', u'VBP', u'RB', u'VB', u',', u'WDT', u'VBZ', u'JJ', u'TO', u'JJ', u'JJ', u'NNS', u',', u'CC', u'MD', u'RB', u'VB', u'TO', u'NNS', u'IN', u'JJR', u'NNS', u'.'], u'char_offsets': [[3860, 3863], [3864, 3868], [3869, 3875], [3875, 3876], [3877, 3883], [3884, 3886], [3887, 3890], [3891, 3900], [3900, 3901], [3902, 3907], [3908, 3910], [3911, 3918], [3919, 3921], [3922, 3927], [3928, 3939], [3940, 3947], [3947, 3948], [3949, 3952], [3953, 3957], [3958, 3965], [3966, 3970], [3971, 3973], [3974, 3984], [3985, 3989], [3990, 3996], [3997, 4009], [4009, 4010]]}) 
answer: set([u'a', u'giant', u'the'])
candidate Sentence: (0.136262446641922, {u'tokens': [u'Was', u'the', u'first', u'giant', u'panda', u'that', u'was', u'born', u'and', u'survived', u'in', u'captivity', u'outside', u'China', u'.'], u'lemmas': [u'be', u'the', u'first', u'giant', u'panda', u'that', u'be', u'bear', u'and', u'survive', u'in', u'captivity', u'outside', u'China', u'.'], u'pos': [u'VBD', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBD', u'VBN', u'CC', u'VBN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[25389, 25392], [25393, 25396], [25397, 25402], [25403, 25408], [25409, 25414], [25415, 25419], [25420, 25423], [25424, 25428], [25429, 25432], [25433, 25441], [25442, 25444], [25445, 25454], [25455, 25462], [25463, 25468], [25468, 25469]]}) 
answer: set([u'a', u'mammal'])
candidate Sentence: (0.11143916845321655, {u'tokens': [u'The', u'giant', u'panda', u'genome', u'was', u'sequenced', u'in', u'2009', u'using', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'lemmas': [u'the', u'giant', u'panda', u'genome', u'be', u'sequence', u'in', u'2009', u'use', u'a', u'next-generation', u'sequencing', u'technology', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'VBG', u'DT', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[6531, 6534], [6535, 6540], [6541, 6546], [6547, 6553], [6554, 6557], [6558, 6567], [6568, 6570], [6571, 6575], [6576, 6581], [6582, 6583], [6584, 6599], [6600, 6610], [6611, 6621], [6621, 6622]]}) 
answer: set([u'mammal'])

Is the Giant Panda a mammal?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9638>.answer
_____________________________ test_yesno[param134] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd97a0>, <src.tfidf.TF_IDF object at 0x7fbca3c763d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd97a0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.44315806031227112, {u'tokens': [u'The', u'guitar', u'player', u'-LRB-', u'c.', u'1672', u'-RRB-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'the', u'guitar', u'player', u'-lrb-', u'c.', u'1672', u'-rrb-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'CD', u'-RRB-', u',', u'IN', u'NNP', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5445, 5448], [5449, 5455], [5456, 5462], [5463, 5464], [5464, 5466], [5467, 5471], [5471, 5472], [5472, 5473], [5474, 5476], [5477, 5485], [5486, 5493], [5494, 5501], [5502, 5505], [5506, 5508], [5509, 5516], [5517, 5521], [5522, 5525], [5526, 5531], [5532, 5542], [5542, 5543], [5544, 5552], [5553, 5556], [5557, 5565], [5565, 5566], [5571, 5573], [5574, 5582], [5583, 5589], [5590, 5592], [5593, 5596], [5597, 5600], [5601, 5610], [5611, 5613], [5614, 5616], [5617, 5625], [5626, 5632], [5633, 5635], [5636, 5638], [5639, 5644], [5645, 5648], [5649, 5653], [5654, 5655], [5656, 5666], [5667, 5672], [5673, 5675], [5676, 5677], [5678, 5684], [5685, 5690], [5691, 5698], [5699, 5701], [5702, 5705], [5706, 5711], [5712, 5714], [5715, 5718], [5719, 5725], [5725, 5727], [5728, 5732], [5732, 5733]]}) 
answer: set([])
candidate Sentence: (0.17863935232162476, {u'tokens': [u'In', u'many', u'cases', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shielding', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'lemmas': [u'in', u'many', u'case', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shield', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'DT', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'VBG', u'TO', u'VB', u'NN', u'IN', u'JJ', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[37734, 37736], [37737, 37741], [37742, 37747], [37748, 37751], [37752, 37763], [37764, 37768], [37769, 37773], [37774, 37778], [37779, 37781], [37782, 37791], [37792, 37794], [37795, 37802], [37803, 37809], [37810, 37812], [37813, 37821], [37822, 37834], [37835, 37838], [37839, 37844], [37844, 37845]]}) 
answer: set([u'a', u'on', u'dependent', u'guitar', u'device', u'acoustic'])
candidate Sentence: (0.16437175869941711, {u'tokens': [u'It', u'is', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[40881, 40883], [40884, 40886], [40887, 40888], [40889, 40895], [40896, 40903], [40904, 40906], [40907, 40919], [40920, 40928], [40929, 40936], [40936, 40937]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.15055446326732635, {u'tokens': [u'On', u'both', u'electric', u'and', u'acoustic', u'guitars', u',', u'the', u'bridge', u'holds', u'the', u'strings', u'in', u'place', u'on', u'the', u'body', u'.'], u'lemmas': [u'on', u'both', u'electric', u'and', u'acoustic', u'guitar', u',', u'the', u'bridge', u'hold', u'the', u'string', u'in', u'place', u'on', u'the', u'body', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'DT', u'NN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[39086, 39088], [39089, 39093], [39094, 39102], [39103, 39106], [39107, 39115], [39116, 39123], [39123, 39124], [39125, 39128], [39129, 39135], [39136, 39141], [39142, 39145], [39146, 39153], [39154, 39156], [39157, 39162], [39163, 39165], [39166, 39169], [39170, 39174], [39174, 39175]]}) 
answer: set([u'a', u'dependent', u'device', u'external'])
candidate Sentence: (0.1346125602722168, {u'tokens': [u'It', u'is', u'flat', u'on', u'classical', u'guitars', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'flat', u'on', u'classical', u'guitar', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[20519, 20521], [20522, 20524], [20525, 20529], [20530, 20532], [20533, 20542], [20543, 20550], [20551, 20554], [20555, 20563], [20564, 20570], [20571, 20580], [20581, 20583], [20584, 20592], [20593, 20596], [20597, 20605], [20606, 20613], [20613, 20614]]}) 
answer: set([u'a', u'dependent', u'device', u'external'])

Is an acoustic guitar dependent on an external device?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cd97a0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param135] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd97e8>, <src.tfidf.TF_IDF object at 0x7fbca3c763d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x7fbca0cd97e8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.44315806031227112, {u'tokens': [u'The', u'guitar', u'player', u'-LRB-', u'c.', u'1672', u'-RRB-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divided', u'into', u'two', u'broad', u'categories', u',', u'acoustic', u'and', u'electric', u':', u'An', u'acoustic', u'guitar', u'is', u'one', u'not', u'dependent', u'on', u'an', u'external', u'device', u'to', u'be', u'heard', u'but', u'uses', u'a', u'soundboard', u'which', u'is', u'a', u'wooden', u'piece', u'mounted', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'lemmas': [u'the', u'guitar', u'player', u'-lrb-', u'c.', u'1672', u'-rrb-', u',', u'by', u'Johannes', u'Vermeer', u'Guitars', u'can', u'be', u'divide', u'into', u'two', u'broad', u'category', u',', u'acoustic', u'and', u'electric', u':', u'a', u'acoustic', u'guitar', u'be', u'one', u'not', u'dependent', u'on', u'a', u'external', u'device', u'to', u'be', u'hear', u'but', u'use', u'a', u'soundboard', u'which', u'be', u'a', u'wooden', u'piece', u'mount', u'on', u'the', u'front', u'of', u'the', u'guitar', u"'s", u'body', u'.'], u'pos': [u'DT', u'NN', u'NN', u'-LRB-', u'NN', u'CD', u'-RRB-', u',', u'IN', u'NNP', u'NNP', u'NNP', u'MD', u'VB', u'VBN', u'IN', u'CD', u'JJ', u'NNS', u',', u'JJ', u'CC', u'JJ', u':', u'DT', u'JJ', u'NN', u'VBZ', u'CD', u'RB', u'JJ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'VB', u'VBN', u'CC', u'VBZ', u'DT', u'NN', u'WDT', u'VBZ', u'DT', u'JJ', u'NN', u'VBD', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[5445, 5448], [5449, 5455], [5456, 5462], [5463, 5464], [5464, 5466], [5467, 5471], [5471, 5472], [5472, 5473], [5474, 5476], [5477, 5485], [5486, 5493], [5494, 5501], [5502, 5505], [5506, 5508], [5509, 5516], [5517, 5521], [5522, 5525], [5526, 5531], [5532, 5542], [5542, 5543], [5544, 5552], [5553, 5556], [5557, 5565], [5565, 5566], [5571, 5573], [5574, 5582], [5583, 5589], [5590, 5592], [5593, 5596], [5597, 5600], [5601, 5610], [5611, 5613], [5614, 5616], [5617, 5625], [5626, 5632], [5633, 5635], [5636, 5638], [5639, 5644], [5645, 5648], [5649, 5653], [5654, 5655], [5656, 5666], [5667, 5672], [5673, 5675], [5676, 5677], [5678, 5684], [5685, 5690], [5691, 5698], [5699, 5701], [5702, 5705], [5706, 5711], [5712, 5714], [5715, 5718], [5719, 5725], [5725, 5727], [5728, 5732], [5732, 5733]]}) 
answer: set([])
candidate Sentence: (0.17863935232162476, {u'tokens': [u'In', u'many', u'cases', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shielding', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'lemmas': [u'in', u'many', u'case', u'the', u'electronics', u'have', u'some', u'sort', u'of', u'shield', u'to', u'prevent', u'pickup', u'of', u'external', u'interference', u'and', u'noise', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'DT', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'VBG', u'TO', u'VB', u'NN', u'IN', u'JJ', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[37734, 37736], [37737, 37741], [37742, 37747], [37748, 37751], [37752, 37763], [37764, 37768], [37769, 37773], [37774, 37778], [37779, 37781], [37782, 37791], [37792, 37794], [37795, 37802], [37803, 37809], [37810, 37812], [37813, 37821], [37822, 37834], [37835, 37838], [37839, 37844], [37844, 37845]]}) 
answer: set([u'a', u'on', u'dependent', u'guitar', u'device', u'acoustic'])
candidate Sentence: (0.16437175869941711, {u'tokens': [u'It', u'is', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'a', u'common', u'feature', u'on', u'steel-string', u'acoustic', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[40881, 40883], [40884, 40886], [40887, 40888], [40889, 40895], [40896, 40903], [40904, 40906], [40907, 40919], [40920, 40928], [40929, 40936], [40936, 40937]]}) 
answer: set([u'dependent', u'device', u'external'])
candidate Sentence: (0.15055446326732635, {u'tokens': [u'On', u'both', u'electric', u'and', u'acoustic', u'guitars', u',', u'the', u'bridge', u'holds', u'the', u'strings', u'in', u'place', u'on', u'the', u'body', u'.'], u'lemmas': [u'on', u'both', u'electric', u'and', u'acoustic', u'guitar', u',', u'the', u'bridge', u'hold', u'the', u'string', u'in', u'place', u'on', u'the', u'body', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'DT', u'NN', u'VBZ', u'DT', u'NNS', u'IN', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[39086, 39088], [39089, 39093], [39094, 39102], [39103, 39106], [39107, 39115], [39116, 39123], [39123, 39124], [39125, 39128], [39129, 39135], [39136, 39141], [39142, 39145], [39146, 39153], [39154, 39156], [39157, 39162], [39163, 39165], [39166, 39169], [39170, 39174], [39174, 39175]]}) 
answer: set([u'a', u'dependent', u'device', u'external'])
candidate Sentence: (0.1346125602722168, {u'tokens': [u'It', u'is', u'flat', u'on', u'classical', u'guitars', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitars', u'.'], u'lemmas': [u'it', u'be', u'flat', u'on', u'classical', u'guitar', u'and', u'slightly', u'curved', u'crosswise', u'on', u'acoustic', u'and', u'electric', u'guitar', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'CC', u'RB', u'JJ', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[20519, 20521], [20522, 20524], [20525, 20529], [20530, 20532], [20533, 20542], [20543, 20550], [20551, 20554], [20555, 20563], [20564, 20570], [20571, 20580], [20581, 20583], [20584, 20592], [20593, 20596], [20597, 20605], [20606, 20613], [20613, 20614]]}) 
answer: set([u'a', u'dependent', u'device', u'external'])

Is an acoustic guitar dependent on an external device?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x7fbca0cd97e8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param138] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd98c0>, <src.tfidf.TF_IDF object at 0x7fbca3c763d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd98c0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33624652028083801, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[49561, 49562], [49563, 49571], [49571, 49572]]}) 
answer: set([u'guitar', u'to', u'the', u'similar', u'classical'])
candidate Sentence: (0.24657121300697327, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[6032, 6037], [6038, 6041], [6042, 6049], [6050, 6057], [6058, 6071], [6072, 6078], [6079, 6082], [6083, 6091], [6092, 6098], [6099, 6104], [6104, 6105], [6106, 6115], [6116, 6119], [6120, 6128], [6129, 6136], [6136, 6137], [6138, 6143], [6144, 6150], [6151, 6158], [6158, 6159], [6160, 6165], [6166, 6173], [6174, 6177], [6178, 6182], [6183, 6186], [6187, 6189], [6190, 6191], [6191, 6195], [6195, 6196], [6197, 6203], [6203, 6204], [6205, 6211], [6212, 6218], [6219, 6226], [6227, 6230], [6231, 6234], [6235, 6239], [6240, 6243], [6244, 6250], [6250, 6251]]}) 
answer: set([u'to', u'similar'])
candidate Sentence: (0.23856377601623535, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[29759, 29768], [29769, 29772], [29773, 29781], [29782, 29793], [29794, 29806], [29807, 29811], [29812, 29815], [29816, 29823], [29823, 29824], [29825, 29828], [29829, 29834], [29835, 29839], [29840, 29844], [29845, 29855], [29856, 29858], [29859, 29866], [29867, 29876], [29876, 29877], [29878, 29882], [29883, 29885], [29886, 29891], [29892, 29895], [29896, 29908], [29909, 29918], [29918, 29919]]}) 
answer: set([u'guitar', u'to', u'the', u'similar'])
candidate Sentence: (0.21570117771625519, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9683, 9684], [9684, 9692], [9693, 9694], [9694, 9706], [9706, 9707], [9708, 9715], [9715, 9716], [9717, 9724], [9725, 9727], [9728, 9731], [9732, 9741], [9742, 9748], [9748, 9749], [9750, 9757], [9757, 9758], [9759, 9765], [9766, 9769], [9770, 9776], [9777, 9782], [9783, 9785], [9786, 9789], [9790, 9804], [9805, 9811], [9812, 9815], [9816, 9820], [9821, 9825], [9826, 9828], [9829, 9836], [9837, 9850], [9851, 9857], [9858, 9862], [9863, 9864], [9865, 9874], [9875, 9881], [9882, 9885], [9886, 9888], [9889, 9892], [9893, 9894], [9895, 9903], [9903, 9904], [9905, 9915], [9916, 9920], [9921, 9924], [9925, 9933], [9934, 9944], [9945, 9951], [9951, 9952]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.21459203958511353, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[11233, 11236], [11237, 11245], [11246, 11255], [11256, 11258], [11259, 11262], [11263, 11269], [11270, 11272], [11273, 11282], [11283, 11290], [11291, 11293], [11294, 11297], [11298, 11303], [11303, 11304]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd98c0>.answer
_____________________________ test_yesno[param139] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9908>, <src.tfidf.TF_IDF object at 0x7fbca3c763d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9908>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33624652028083801, {u'tokens': [u'*', u'Flamenco', u'!'], u'lemmas': [u'*', u'flamenco', u'!'], u'pos': [u'SYM', u'NN', u'.'], u'char_offsets': [[49561, 49562], [49563, 49571], [49571, 49572]]}) 
answer: set([u'guitar', u'to', u'the', u'similar', u'classical'])
candidate Sentence: (0.24657121300697327, {u'tokens': [u'There', u'are', u'several', u'notable', u'subcategories', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitars', u';', u'steel', u'string', u'guitars', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitars', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'lemmas': [u'there', u'be', u'several', u'notable', u'subcategory', u'within', u'the', u'acoustic', u'guitar', u'group', u':', u'classical', u'and', u'flamenco', u'guitar', u';', u'steel', u'string', u'guitar', u',', u'which', u'include', u'the', u'flat', u'top', u'or', u'``', u'folk', u"''", u'guitar', u';', u'twelve', u'string', u'guitar', u'and', u'the', u'arch', u'top', u'guitar', u'.'], u'pos': [u'EX', u'VBP', u'JJ', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'JJ', u'CC', u'JJ', u'NNS', u':', u'NN', u'NN', u'NNS', u',', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'CC', u'``', u'NN', u"''", u'NN', u':', u'CD', u'NN', u'NNS', u'CC', u'DT', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[6032, 6037], [6038, 6041], [6042, 6049], [6050, 6057], [6058, 6071], [6072, 6078], [6079, 6082], [6083, 6091], [6092, 6098], [6099, 6104], [6104, 6105], [6106, 6115], [6116, 6119], [6120, 6128], [6129, 6136], [6136, 6137], [6138, 6143], [6144, 6150], [6151, 6158], [6158, 6159], [6160, 6165], [6166, 6173], [6174, 6177], [6178, 6182], [6183, 6186], [6187, 6189], [6190, 6191], [6191, 6195], [6195, 6196], [6197, 6203], [6203, 6204], [6205, 6211], [6212, 6218], [6219, 6226], [6227, 6230], [6231, 6234], [6235, 6239], [6240, 6243], [6244, 6250], [6250, 6251]]}) 
answer: set([u'to', u'similar'])
candidate Sentence: (0.23856377601623535, {u'tokens': [u'Classical', u'and', u'flamenco', u'instruments', u'historically', u'used', u'gut', u'strings', u',', u'but', u'these', u'have', u'been', u'superseded', u'by', u'polymer', u'materials', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'materials', u'.'], u'lemmas': [u'classical', u'and', u'flamenco', u'instrument', u'historically', u'use', u'gut', u'string', u',', u'but', u'these', u'have', u'be', u'supersede', u'by', u'polymer', u'material', u',', u'such', u'as', u'nylon', u'and', u'fluorocarbon', u'material', u'.'], u'pos': [u'JJ', u'CC', u'NN', u'NNS', u'RB', u'VBN', u'NN', u'NNS', u',', u'CC', u'DT', u'VBP', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'JJ', u'IN', u'NN', u'CC', u'NN', u'NNS', u'.'], u'char_offsets': [[29759, 29768], [29769, 29772], [29773, 29781], [29782, 29793], [29794, 29806], [29807, 29811], [29812, 29815], [29816, 29823], [29823, 29824], [29825, 29828], [29829, 29834], [29835, 29839], [29840, 29844], [29845, 29855], [29856, 29858], [29859, 29866], [29867, 29876], [29876, 29877], [29878, 29882], [29883, 29885], [29886, 29891], [29892, 29895], [29896, 29908], [29909, 29918], [29918, 29919]]}) 
answer: set([u'guitar', u'to', u'the', u'similar'])
candidate Sentence: (0.21570117771625519, {u'tokens': [u';', u'Flat-top', u'-LRB-', u'steel-string', u'-RRB-', u'guitars', u':', u'Similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'sizes', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'is', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'has', u'a', u'narrower', u',', u'reinforced', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'lemmas': [u';', u'flat-top', u'-lrb-', u'steel-string', u'-rrb-', u'guitar', u':', u'similar', u'to', u'the', u'classical', u'guitar', u',', u'however', u',', u'within', u'the', u'varied', u'size', u'of', u'the', u'steel-stringed', u'guitar', u'the', u'body', u'size', u'be', u'usually', u'significantly', u'larger', u'than', u'a', u'classical', u'guitar', u'and', u'it', u'have', u'a', u'narrower', u',', u'reinforce', u'neck', u'and', u'stronger', u'structural', u'design', u'.'], u'pos': [u':', u'NN', u'-LRB-', u'JJ', u'-RRB-', u'NNS', u':', u'JJ', u'TO', u'DT', u'JJ', u'NN', u',', u'RB', u',', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'RB', u'JJR', u'IN', u'DT', u'JJ', u'NN', u'CC', u'PRP', u'VBZ', u'DT', u'JJR', u',', u'VBN', u'NN', u'CC', u'JJR', u'JJ', u'NN', u'.'], u'char_offsets': [[9683, 9684], [9684, 9692], [9693, 9694], [9694, 9706], [9706, 9707], [9708, 9715], [9715, 9716], [9717, 9724], [9725, 9727], [9728, 9731], [9732, 9741], [9742, 9748], [9748, 9749], [9750, 9757], [9757, 9758], [9759, 9765], [9766, 9769], [9770, 9776], [9777, 9782], [9783, 9785], [9786, 9789], [9790, 9804], [9805, 9811], [9812, 9815], [9816, 9820], [9821, 9825], [9826, 9828], [9829, 9836], [9837, 9850], [9851, 9857], [9858, 9862], [9863, 9864], [9865, 9874], [9875, 9881], [9882, 9885], [9886, 9888], [9889, 9892], [9893, 9894], [9895, 9903], [9903, 9904], [9905, 9915], [9916, 9920], [9921, 9924], [9925, 9933], [9934, 9944], [9945, 9951], [9951, 9952]]}) 
answer: set([u'flamenco'])
candidate Sentence: (0.21459203958511353, {u'tokens': [u'The', u'physical', u'principle', u'of', u'the', u'guitar', u'is', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'lemmas': [u'the', u'physical', u'principle', u'of', u'the', u'guitar', u'be', u'therefore', u'similar', u'to', u'the', u'banjo', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'JJ', u'TO', u'DT', u'NN', u'.'], u'char_offsets': [[11233, 11236], [11237, 11245], [11246, 11255], [11256, 11258], [11259, 11262], [11263, 11269], [11270, 11272], [11273, 11282], [11283, 11290], [11291, 11293], [11294, 11297], [11298, 11303], [11303, 11304]]}) 
answer: set([u'flamenco', u'classical'])

Is the flamenco guitar similar to the classical guitar?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9908>.answer
_____________________________ test_yesno[param146] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9b00>, <src.tfidf.TF_IDF object at 0x7fbca2601f90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9b00>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.8104822039604187, {u'tokens': [u'He', u'studied', u'science', u'at', u'the', u'cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'cole', u'des', u'Ponts', u'et', u'Chausses', u'.'], u'lemmas': [u'he', u'study', u'science', u'at', u'the', u'cole', u'Polytechnique', u'and', u'engineering', u'at', u'the', u'cole', u'des', u'ponts', u'et', u'chausses', u'.'], u'pos': [u'PRP', u'VBD', u'NN', u'IN', u'DT', u'NN', u'NNP', u'CC', u'NN', u'IN', u'DT', u'NN', u'FW', u'FW', u'FW', u'FW', u'.'], u'char_offsets': [[422, 424], [425, 432], [433, 440], [441, 443], [444, 447], [448, 452], [453, 466], [467, 470], [471, 482], [483, 485], [486, 489], [490, 494], [495, 498], [499, 504], [505, 507], [508, 516], [516, 517]]}) 
answer: set([u'becquerel'])
candidate Sentence: (0.087000824511051178, {u'tokens': [u'In', u'1908', u',', u'the', u'year', u'of', u'his', u'death', u',', u'Becquerel', u'was', u'elected', u'Permanent', u'Secretary', u'of', u'the', u'Acadmie', u'des', u'Sciences', u'.'], u'lemmas': [u'in', u'1908', u',', u'the', u'year', u'of', u'he', u'death', u',', u'Becquerel', u'be', u'elect', u'Permanent', u'Secretary', u'of', u'the', u'Acadmie', u'des', u'Sciences', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'IN', u'PRP$', u'NN', u',', u'NNP', u'VBD', u'VBN', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNPS', u'.'], u'char_offsets': [[2749, 2751], [2752, 2756], [2756, 2757], [2758, 2761], [2762, 2766], [2767, 2769], [2770, 2773], [2774, 2779], [2779, 2780], [2781, 2790], [2791, 2794], [2795, 2802], [2803, 2812], [2813, 2822], [2823, 2825], [2826, 2829], [2830, 2837], [2838, 2841], [2842, 2850], [2850, 2851]]}) 
answer: set([u'science', u'study', u'ponts', u'at', u'et', u'cole', u'chausses'])
candidate Sentence: (0.066978819668292999, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumire', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumire', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1336, 1346], [1347, 1350], [1351, 1357], [1358, 1360], [1361, 1364], [1365, 1371], [1372, 1379], [1380, 1382], [1383, 1391], [1392, 1394], [1395, 1397], [1398, 1405], [1406, 1410], [1410, 1411], [1412, 1414], [1415, 1419], [1419, 1420], [1422, 1425], [1426, 1431], [1432, 1433], [1434, 1440], [1441, 1453], [1454, 1459], [1460, 1464], [1465, 1466], [1467, 1474], [1475, 1483], [1484, 1486], [1487, 1490], [1491, 1497], [1498, 1500], [1501, 1505], [1506, 1511], [1512, 1517], [1518, 1523], [1523, 1524], [1525, 1529], [1530, 1534], [1535, 1538], [1539, 1544], [1545, 1549], [1550, 1553], [1554, 1560], [1561, 1568], [1569, 1573], [1574, 1579], [1580, 1587], [1588, 1590], [1591, 1594], [1595, 1598], [1599, 1602], [1603, 1604], [1605, 1608], [1608, 1609]]}) 
answer: set([u'des', u'science', u'study', u'becquerel', u'ponts', u'at', u'et', u'cole', u'chausses'])
candidate Sentence: (0.066214904189109802, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2852, 2854], [2855, 2859], [2860, 2862], [2863, 2866], [2867, 2870], [2871, 2873], [2874, 2876], [2877, 2879], [2880, 2882], [2883, 2890], [2890, 2891]]}) 
answer: set([u'des', u'science', u'study', u'becquerel', u'ponts', u'et', u'cole', u'chausses'])
candidate Sentence: (0.049616903066635132, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Musum', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Musum', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[562, 564], [565, 569], [569, 570], [571, 573], [574, 580], [581, 584], [585, 590], [591, 593], [594, 597], [598, 604], [605, 607], [608, 614], [615, 618], [619, 626], [627, 632], [633, 635], [636, 639], [640, 645], [646, 654], [655, 665], [666, 675], [675, 676]]}) 
answer: set([u'des', u'science', u'study', u'becquerel', u'ponts', u'et', u'cole', u'chausses'])

Did Becquerel study science at the cole des Ponts et Chausses?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9b00>.answer
_____________________________ test_yesno[param148] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9b90>, <src.tfidf.TF_IDF object at 0x7fbca2601f90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9b90>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.79298698902130127, {u'tokens': [u'In', u'1894', u',', u'he', u'became', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'Highways', u'.'], u'lemmas': [u'in', u'1894', u',', u'he', u'become', u'chief', u'engineer', u'in', u'the', u'Department', u'of', u'Bridges', u'and', u'highway', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'CC', u'NNS', u'.'], u'char_offsets': [[677, 679], [680, 684], [684, 685], [686, 688], [689, 695], [696, 701], [702, 710], [711, 713], [714, 717], [718, 728], [729, 731], [732, 739], [740, 743], [744, 752], [752, 753]]}) 
answer: set([u'1892'])
candidate Sentence: (0.19045865535736084, {u'tokens': [u'In', u'1892', u',', u'he', u'became', u'the', u'third', u'in', u'his', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Musum', u'National', u"d'Histoire", u'Naturelle', u'.'], u'lemmas': [u'in', u'1892', u',', u'he', u'become', u'the', u'third', u'in', u'he', u'family', u'to', u'occupy', u'the', u'physics', u'chair', u'at', u'the', u'Musum', u'National', u"d'Histoire", u'Naturelle', u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'JJ', u'IN', u'PRP$', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[562, 564], [565, 569], [569, 570], [571, 573], [574, 580], [581, 584], [585, 590], [591, 593], [594, 597], [598, 604], [605, 607], [608, 614], [615, 618], [619, 626], [627, 632], [633, 635], [636, 639], [640, 645], [646, 654], [655, 665], [666, 675], [675, 676]]}) 
answer: set([u'and', u'bridges', u'of', u'chief', u'department', u'highway', u'engineer'])
candidate Sentence: (0.11382556706666946, {u'tokens': [u'Describing', u'his', u'method', u'to', u'the', u'French', u'Academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'said', u':', u'One', u'wraps', u'a', u'Lumire', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheets', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'does', u'not', u'become', u'clouded', u'upon', u'being', u'exposed', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'lemmas': [u'describe', u'he', u'method', u'to', u'the', u'french', u'academy', u'of', u'Sciences', u'on', u'24', u'January', u'1896', u',', u'he', u'say', u':', u'one', u'wrap', u'a', u'lumire', u'photographic', u'plate', u'with', u'a', u'bromide', u'emulsion', u'in', u'two', u'sheet', u'of', u'very', u'thick', u'black', u'paper', u',', u'such', u'that', u'the', u'plate', u'do', u'not', u'become', u'clouded', u'upon', u'be', u'expose', u'to', u'the', u'sun', u'for', u'a', u'day', u'.'], u'pos': [u'VBG', u'PRP$', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'NNPS', u'IN', u'CD', u'NNP', u'CD', u',', u'PRP', u'VBD', u':', u'CD', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'CD', u'NNS', u'IN', u'RB', u'JJ', u'JJ', u'NN', u',', u'JJ', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'JJ', u'IN', u'VBG', u'VBN', u'TO', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[1336, 1346], [1347, 1350], [1351, 1357], [1358, 1360], [1361, 1364], [1365, 1371], [1372, 1379], [1380, 1382], [1383, 1391], [1392, 1394], [1395, 1397], [1398, 1405], [1406, 1410], [1410, 1411], [1412, 1414], [1415, 1419], [1419, 1420], [1422, 1425], [1426, 1431], [1432, 1433], [1434, 1440], [1441, 1453], [1454, 1459], [1460, 1464], [1465, 1466], [1467, 1474], [1475, 1483], [1484, 1486], [1487, 1490], [1491, 1497], [1498, 1500], [1501, 1505], [1506, 1511], [1512, 1517], [1518, 1523], [1523, 1524], [1525, 1529], [1530, 1534], [1535, 1538], [1539, 1544], [1545, 1549], [1550, 1553], [1554, 1560], [1561, 1568], [1569, 1573], [1574, 1579], [1580, 1587], [1588, 1590], [1591, 1594], [1595, 1598], [1599, 1602], [1603, 1604], [1605, 1608], [1608, 1609]]}) 
answer: set([u'and', u'bridges', u'chief', u'highway', u'department', u'1892', u'engineer'])
candidate Sentence: (0.048680674284696579, {u'tokens': [u'In', u'1903', u',', u'he', u'shared', u'the', u'Nobel', u'Prize', u'in', u'Physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'services', u'he', u'has', u'rendered', u'by', u'his', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'lemmas': [u'in', u'1903', u',', u'he', u'share', u'the', u'Nobel', u'Prize', u'in', u'physics', u'with', u'Pierre', u'and', u'Marie', u'Curie', u'``', u'in', u'recognition', u'of', u'the', u'extraordinary', u'service', u'he', u'have', u'render', u'by', u'he', u'discovery', u'of', u'spontaneous', u'radioactivity', u"''", u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBD', u'DT', u'NNP', u'NNP', u'IN', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u'``', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'PRP', u'VBZ', u'VBN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u"''", u'.'], u'char_offsets': [[2351, 2353], [2354, 2358], [2358, 2359], [2360, 2362], [2363, 2369], [2370, 2373], [2374, 2379], [2380, 2385], [2386, 2388], [2389, 2396], [2397, 2401], [2402, 2408], [2409, 2412], [2413, 2418], [2419, 2424], [2425, 2426], [2426, 2428], [2429, 2440], [2441, 2443], [2444, 2447], [2448, 2461], [2462, 2470], [2471, 2473], [2474, 2477], [2478, 2486], [2487, 2489], [2490, 2493], [2494, 2503], [2504, 2506], [2507, 2518], [2519, 2532], [2532, 2533], [2533, 2534]]}) 
answer: set([u'bridges', u'chief', u'highway', u'department', u'become', u'1892', u'engineer'])
candidate Sentence: (0.023965651169419289, {u'tokens': [u'He', u'died', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'lemmas': [u'he', u'die', u'at', u'the', u'age', u'of', u'55', u'in', u'Le', u'Croisic', u'.'], u'pos': [u'PRP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[2852, 2854], [2855, 2859], [2860, 2862], [2863, 2866], [2867, 2870], [2871, 2873], [2874, 2876], [2877, 2879], [2880, 2882], [2883, 2890], [2890, 2891]]}) 
answer: set([u'and', u'bridges', u'chief', u'highway', u'department', u'become', u'1892', u'engineer'])

Did he become chief engineer in the Department of Bridges and Highways in 1892?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9b90>.answer
_____________________________ test_yesno[param151] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9c68>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9c68>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32062327861785889, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'british'])
candidate Sentence: (0.20645345747470856, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50019, 50020], [50021, 50027], [50027, 50028], [50029, 50034], [50034, 50035]]}) 
answer: set([u'british'])
candidate Sentence: (0.18957521021366119, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u'.'], u'char_offsets': [[48784, 48785], [48785, 48788], [48789, 48795], [48796, 48801], [48802, 48804], [48805, 48813], [48813, 48814], [48815, 48821], [48821, 48823], [48824, 48830], [48831, 48833], [48834, 48842], [48842, 48843], [48844, 48851], [48852, 48859], [48860, 48863], [48864, 48867], [48868, 48875], [48876, 48878], [48879, 48886], [48887, 48889], [48889, 48890], [48891, 48897], [48897, 48898]]}) 
answer: set([u'isaac'])
candidate Sentence: (0.18712446093559265, {u'tokens': [u'16', u',', u'-LRB-', u'2001', u'-RRB-', u',', u'pp.', u'169208', u'in', u'JSTOR', u'*', u'Snobelen', u',', u'Stephen', u'D.', u'``', u'Isaac', u'Newton', u',', u'Heretic', u':', u'The', u'Strategies', u'of', u'a', u'Nicodemite', u',', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'32', u':', u'381419', u'.'], u'lemmas': [u'16', u',', u'-lrb-', u'2001', u'-rrb-', u',', u'p.', u'169208', u'in', u'jstor', u'*', u'Snobelen', u',', u'Stephen', u'D.', u'``', u'Isaac', u'Newton', u',', u'Heretic', u':', u'the', u'strategy', u'of', u'a', u'Nicodemite', u',', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'32', u':', u'381419', u'.'], u'pos': [u'CD', u',', u'-LRB-', u'CD', u'-RRB-', u',', u'NN', u'CD', u'IN', u'NN', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'NNP', u'NNP', u',', u'NNP', u':', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u'.'], u'char_offsets': [[49105, 49107], [49107, 49108], [49109, 49110], [49110, 49114], [49114, 49115], [49115, 49116], [49117, 49120], [49121, 49127], [49129, 49131], [49132, 49137], [49138, 49139], [49140, 49148], [49148, 49149], [49150, 49157], [49158, 49160], [49161, 49162], [49162, 49167], [49168, 49174], [49174, 49175], [49176, 49183], [49183, 49184], [49185, 49188], [49189, 49199], [49200, 49202], [49203, 49204], [49205, 49215], [49215, 49216], [49216, 49217], [49218, 49225], [49226, 49233], [49234, 49237], [49238, 49241], [49242, 49249], [49250, 49252], [49253, 49260], [49261, 49263], [49263, 49264], [49265, 49271], [49271, 49272]]}) 
answer: set([])
candidate Sentence: (0.13901568949222565, {u'tokens': [u'**', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'**', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50146, 50148], [50149, 50155], [50155, 50156], [50157, 50162], [50162, 50163]]}) 
answer: set([u'british'])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'Yes', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9c68>.answer
_____________________________ test_yesno[param152] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9cb0>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was English.')
E                +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9cb0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32062327861785889, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'british'])
candidate Sentence: (0.20645345747470856, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50019, 50020], [50021, 50027], [50027, 50028], [50029, 50034], [50034, 50035]]}) 
answer: set([u'british'])
candidate Sentence: (0.18957521021366119, {u'tokens': [u'``', u'The', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'34', u':', u'417438', u'.'], u'lemmas': [u'``', u'the', u'Hidden', u'Truth', u'of', u'Creation', u':', u'Newton', u"'s", u'Method', u'of', u'Fluxions', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'34', u':', u'417438', u'.'], u'pos': [u'``', u'DT', u'NNP', u'NNP', u'IN', u'NNP', u':', u'NNP', u'POS', u'NNP', u'IN', u'NNPS', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u'.'], u'char_offsets': [[48784, 48785], [48785, 48788], [48789, 48795], [48796, 48801], [48802, 48804], [48805, 48813], [48813, 48814], [48815, 48821], [48821, 48823], [48824, 48830], [48831, 48833], [48834, 48842], [48842, 48843], [48844, 48851], [48852, 48859], [48860, 48863], [48864, 48867], [48868, 48875], [48876, 48878], [48879, 48886], [48887, 48889], [48889, 48890], [48891, 48897], [48897, 48898]]}) 
answer: set([u'isaac'])
candidate Sentence: (0.18712446093559265, {u'tokens': [u'16', u',', u'-LRB-', u'2001', u'-RRB-', u',', u'pp.', u'169208', u'in', u'JSTOR', u'*', u'Snobelen', u',', u'Stephen', u'D.', u'``', u'Isaac', u'Newton', u',', u'Heretic', u':', u'The', u'Strategies', u'of', u'a', u'Nicodemite', u',', u"''", u'British', u'Journal', u'for', u'the', u'History', u'of', u'Science', u'32', u':', u'381419', u'.'], u'lemmas': [u'16', u',', u'-lrb-', u'2001', u'-rrb-', u',', u'p.', u'169208', u'in', u'jstor', u'*', u'Snobelen', u',', u'Stephen', u'D.', u'``', u'Isaac', u'Newton', u',', u'Heretic', u':', u'the', u'strategy', u'of', u'a', u'Nicodemite', u',', u"''", u'British', u'Journal', u'for', u'the', u'history', u'of', u'Science', u'32', u':', u'381419', u'.'], u'pos': [u'CD', u',', u'-LRB-', u'CD', u'-RRB-', u',', u'NN', u'CD', u'IN', u'NN', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'NNP', u'NNP', u',', u'NNP', u':', u'DT', u'NNS', u'IN', u'DT', u'NNP', u',', u"''", u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'CD', u':', u'CD', u'.'], u'char_offsets': [[49105, 49107], [49107, 49108], [49109, 49110], [49110, 49114], [49114, 49115], [49115, 49116], [49117, 49120], [49121, 49127], [49129, 49131], [49132, 49137], [49138, 49139], [49140, 49148], [49148, 49149], [49150, 49157], [49158, 49160], [49161, 49162], [49162, 49167], [49168, 49174], [49174, 49175], [49176, 49183], [49183, 49184], [49185, 49188], [49189, 49199], [49200, 49202], [49203, 49204], [49205, 49215], [49215, 49216], [49216, 49217], [49218, 49225], [49226, 49233], [49234, 49237], [49238, 49241], [49242, 49249], [49250, 49252], [49253, 49260], [49261, 49263], [49263, 49264], [49265, 49271], [49271, 49272]]}) 
answer: set([])
candidate Sentence: (0.13901568949222565, {u'tokens': [u'**', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'**', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50146, 50148], [50149, 50155], [50155, 50156], [50157, 50162], [50162, 50163]]}) 
answer: set([u'british'])

Was Isaac Newton British?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was English.
Difficulty = easy

['No', 'No', 'No', 'Yes', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was English.')
 +    where 'Yes, he was English.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9cb0>.answer
_____________________________ test_yesno[param153] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9cf8>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
E                +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9cf8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.35901170969009399, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'religious'])
candidate Sentence: (0.23117224872112274, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50019, 50020], [50021, 50027], [50027, 50028], [50029, 50034], [50034, 50035]]}) 
answer: set([u'religious'])
candidate Sentence: (0.16839979588985443, {u'tokens': [u'Thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'views', u'and', u'Anglican', u'orthodoxy', u'was', u'averted', u'.'], u'lemmas': [u'thus', u'a', u'conflict', u'between', u'Newton', u"'s", u'religious', u'view', u'and', u'anglican', u'orthodoxy', u'be', u'avert', u'.'], u'pos': [u'RB', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'NNS', u'CC', u'JJ', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[10851, 10855], [10856, 10857], [10858, 10866], [10867, 10874], [10875, 10881], [10881, 10883], [10884, 10893], [10894, 10899], [10900, 10903], [10904, 10912], [10913, 10922], [10923, 10926], [10927, 10934], [10934, 10935]]}) 
answer: set([u'isaac'])
candidate Sentence: (0.15566013753414154, {u'tokens': [u'**', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'**', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50146, 50148], [50149, 50155], [50155, 50156], [50157, 50162], [50162, 50163]]}) 
answer: set([u'religious'])
candidate Sentence: (0.1551511287689209, {u'tokens': [u'Isaac', u'Newton', u'in', u'old', u'age', u'in', u'1712', u',', u'portrait', u'by', u'Sir', u'James', u'Thornhill', u'Personal', u'coat', u'of', u'arms', u'of', u'Sir', u'Isaac', u'Newton', u'In', u'the', u'1690s', u',', u'Newton', u'wrote', u'a', u'number', u'of', u'religious', u'tracts', u'dealing', u'with', u'the', u'literal', u'interpretation', u'of', u'the', u'Bible', u'.'], u'lemmas': [u'Isaac', u'Newton', u'in', u'old', u'age', u'in', u'1712', u',', u'portrait', u'by', u'Sir', u'James', u'Thornhill', u'Personal', u'coat', u'of', u'arm', u'of', u'Sir', u'Isaac', u'Newton', u'in', u'the', u'1690', u',', u'Newton', u'write', u'a', u'number', u'of', u'religious', u'tract', u'deal', u'with', u'the', u'literal', u'interpretation', u'of', u'the', u'Bible', u'.'], u'pos': [u'NNP', u'NNP', u'IN', u'JJ', u'NN', u'IN', u'CD', u',', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'NN', u'IN', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u',', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'VBG', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NNP', u'.'], u'char_offsets': [[20256, 20261], [20262, 20268], [20269, 20271], [20272, 20275], [20276, 20279], [20280, 20282], [20283, 20287], [20287, 20288], [20289, 20297], [20298, 20300], [20301, 20304], [20305, 20310], [20311, 20320], [20321, 20329], [20330, 20334], [20335, 20337], [20338, 20342], [20343, 20345], [20346, 20349], [20350, 20355], [20356, 20362], [20364, 20366], [20367, 20370], [20371, 20376], [20376, 20377], [20378, 20384], [20385, 20390], [20391, 20392], [20393, 20399], [20400, 20402], [20403, 20412], [20413, 20419], [20420, 20427], [20428, 20432], [20433, 20436], [20437, 20444], [20445, 20459], [20460, 20462], [20463, 20466], [20467, 20472], [20472, 20473]]}) 
answer: set([])

Was Isaac Newton religious?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, he was highly religious, though an unorthodox Christian.
Difficulty = easy

['No', 'No', 'No', 'No', 'Yes']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 300 documents, 13640 characters, 2640 tokens, 45.5 char/doc, 8.8 tok/doc RATES: 20.809 doc/sec, 183.1 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, he was highly religious, though an unorthodox Christian.')
 +    where 'Yes, he was highly religious, though an unorthodox Christian.' = <src.question_processing.Question_parser instance at 0x7fbca0cd9cf8>.answer
_____________________________ test_yesno[param158] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9e60>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9e60>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.40221735835075378, {u'tokens': [u'Newton', u'also', u'built', u'the', u'first', u'practical', u'reflecting', u'telescope', u'and', u'developed', u'a', u'theory', u'of', u'colour', u'based', u'on', u'the', u'observation', u'that', u'a', u'prism', u'decomposes', u'white', u'light', u'into', u'the', u'many', u'colours', u'that', u'form', u'the', u'visible', u'spectrum', u'.'], u'lemmas': [u'Newton', u'also', u'build', u'the', u'first', u'practical', u'reflect', u'telescope', u'and', u'develop', u'a', u'theory', u'of', u'colour', u'base', u'on', u'the', u'observation', u'that', u'a', u'prism', u'decompose', u'white', u'light', u'into', u'the', u'many', u'colour', u'that', u'form', u'the', u'visible', u'spectrum', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'JJ', u'JJ', u'VBG', u'NN', u'CC', u'VBD', u'DT', u'NN', u'IN', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'WDT', u'VBP', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[1026, 1032], [1033, 1037], [1038, 1043], [1044, 1047], [1048, 1053], [1054, 1063], [1064, 1074], [1075, 1084], [1088, 1091], [1092, 1101], [1102, 1103], [1104, 1110], [1111, 1113], [1114, 1120], [1121, 1126], [1127, 1129], [1130, 1133], [1134, 1145], [1146, 1150], [1151, 1152], [1153, 1158], [1159, 1169], [1170, 1175], [1176, 1181], [1182, 1186], [1187, 1190], [1191, 1195], [1196, 1203], [1204, 1208], [1209, 1213], [1214, 1217], [1218, 1225], [1226, 1234], [1234, 1235]]}) 
answer: set([u'he'])
candidate Sentence: (0.27806204557418823, {u'tokens': [u'In', u'late', u'1668', u'he', u'was', u'able', u'to', u'produce', u'this', u'first', u'reflecting', u'telescope', u'.'], u'lemmas': [u'in', u'late', u'1668', u'he', u'be', u'able', u'to', u'produce', u'this', u'first', u'reflect', u'telescope', u'.'], u'pos': [u'IN', u'JJ', u'CD', u'PRP', u'VBD', u'JJ', u'TO', u'VB', u'DT', u'JJ', u'VBG', u'NN', u'.'], u'char_offsets': [[12477, 12479], [12480, 12484], [12485, 12489], [12493, 12495], [12496, 12499], [12500, 12504], [12505, 12507], [12508, 12515], [12516, 12520], [12521, 12526], [12527, 12537], [12538, 12547], [12547, 12548]]}) 
answer: set([u'practical', u'the', u'build'])
candidate Sentence: (0.27497696876525879, {u'tokens': [u'White', u'1997', u',', u'p170', u'Actually', u'building', u'the', u'design', u',', u'the', u'first', u'known', u'functional', u'reflecting', u'telescope', u',', u'today', u'known', u'as', u'a', u'Newtonian', u'telescope', u',', u'involved', u'solving', u'the', u'problem', u'of', u'a', u'suitable', u'mirror', u'material', u'and', u'shaping', u'technique', u'.'], u'lemmas': [u'White', u'1997', u',', u'p170', u'actually', u'build', u'the', u'design', u',', u'the', u'first', u'known', u'functional', u'reflect', u'telescope', u',', u'today', u'know', u'as', u'a', u'newtonian', u'telescope', u',', u'involve', u'solve', u'the', u'problem', u'of', u'a', u'suitable', u'mirror', u'material', u'and', u'shape', u'technique', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'RB', u'VBG', u'DT', u'NN', u',', u'DT', u'JJ', u'JJ', u'JJ', u'VBG', u'NN', u',', u'NN', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'VBN', u'VBG', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u'CC', u'VBG', u'NN', u'.'], u'char_offsets': [[12088, 12093], [12094, 12098], [12098, 12099], [12100, 12104], [12106, 12114], [12115, 12123], [12124, 12127], [12128, 12134], [12134, 12135], [12136, 12139], [12140, 12145], [12146, 12151], [12152, 12162], [12163, 12173], [12174, 12183], [12183, 12184], [12185, 12190], [12191, 12196], [12197, 12199], [12200, 12201], [12202, 12211], [12212, 12221], [12221, 12222], [12224, 12232], [12233, 12240], [12241, 12244], [12245, 12252], [12253, 12255], [12256, 12257], [12258, 12266], [12267, 12273], [12274, 12282], [12283, 12286], [12287, 12294], [12295, 12304], [12304, 12305]]}) 
answer: set([u'practical', u'he'])
candidate Sentence: (0.22632721066474915, {u'tokens': [u'In', u'1671', u'the', u'Royal', u'Society', u'asked', u'for', u'a', u'demonstration', u'of', u'his', u'reflecting', u'telescope', u'.'], u'lemmas': [u'in', u'1671', u'the', u'Royal', u'Society', u'ask', u'for', u'a', u'demonstration', u'of', u'he', u'reflect', u'telescope', u'.'], u'pos': [u'IN', u'CD', u'DT', u'NNP', u'NNP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'PRP$', u'VBG', u'NN', u'.'], u'char_offsets': [[12549, 12551], [12552, 12556], [12557, 12560], [12561, 12566], [12567, 12574], [12575, 12580], [12581, 12584], [12585, 12586], [12587, 12600], [12601, 12603], [12604, 12607], [12608, 12618], [12619, 12628], [12628, 12629]]}) 
answer: set([u'practical', u'build', u'first'])
candidate Sentence: (0.16904282569885254, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'reflect', u'telescope', u'practical', u'build', u'the', u'he', u'first'])

Did he build the first practical reflecting telescope?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9e60>.answer
_____________________________ test_yesno[param159] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9ea8>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9ea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32082229852676392, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3316, 3318], [3318, 3319], [3320, 3326], [3327, 3329], [3330, 3337], [3338, 3339], [3340, 3343], [3343, 3344], [3345, 3349], [3349, 3350], [3352, 3356], [3357, 3360], [3361, 3364], [3365, 3367], [3368, 3373], [3374, 3380], [3381, 3386], [3387, 3389], [3390, 3393], [3394, 3403], [3403, 3404], [3405, 3411], [3412, 3415], [3416, 3424], [3425, 3427], [3428, 3431], [3432, 3436], [3436, 3438], [3439, 3445], [3445, 3446], [3447, 3455], [3456, 3457], [3457, 3462], [3463, 3466], [3467, 3476], [3477, 3480], [3481, 3486], [3487, 3489], [3490, 3494], [3495, 3499], [3500, 3501], [3502, 3509], [3510, 3516], [3517, 3521], [3521, 3522], [3522, 3523]]}) 
answer: set([u'isaac', u'schol'])
candidate Sentence: (0.25504961609840393, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44815, 44818], [44819, 44823], [44823, 44825], [44826, 44832], [44832, 44833], [44834, 44842], [44842, 44843], [44844, 44850], [44851, 44855], [44856, 44859], [44860, 44864], [44865, 44868], [44869, 44878], [44879, 44881], [44882, 44885], [44886, 44892], [44892, 44893], [44894, 44902], [44903, 44906], [44907, 44918], [44919, 44921], [44922, 44925], [44926, 44936], [44936, 44938], [44939, 44945], [44946, 44950], [44951, 44956], [44957, 44962], [44962, 44963]]}) 
answer: set([u'isaac', u'educate', u'newton', u'at', u'schol'])
candidate Sentence: (0.22615641355514526, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'king', u'educate', u'grantham', u'at', u"'s", u'the', u'schol'])
candidate Sentence: (0.15308648347854614, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38660, 38668], [38669, 38673], [38673, 38674], [38675, 38677], [38677, 38679], [38681, 38684], [38685, 38687], [38688, 38694], [38694, 38696], [38697, 38702], [38703, 38705], [38706, 38709], [38710, 38714], [38714, 38716], [38717, 38725], [38726, 38729], [38730, 38737], [38738, 38745], [38746, 38754], [38754, 38755]]}) 
answer: set([u'isaac', u'educate', u'grantham', u'at', u'schol'])
candidate Sentence: (0.14856207370758057, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50019, 50020], [50021, 50027], [50027, 50028], [50029, 50034], [50034, 50035]]}) 
answer: set([u'king', u'educate', u'grantham', u'at', u"'s", u'the', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9ea8>.answer
_____________________________ test_yesno[param160] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9ef0>, <src.tfidf.TF_IDF object at 0x7fbca302f210>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9ef0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32082229852676392, {u'tokens': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-RRB-', u'From', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'was', u'seventeen', u',', u'Newton', u'was', u'educated', u'at', u'The', u'King', u"'s", u'School', u',', u'Grantham', u'-LRB-', u'where', u'his', u'signature', u'can', u'still', u'be', u'seen', u'upon', u'a', u'library', u'window', u'sill', u'-RRB-', u'.'], u'lemmas': [u'NY', u':', u'Thomas', u'Y.', u'Crowell', u'&', u'Co.', u',', u'1889', u'-rrb-', u'from', u'the', u'age', u'of', u'about', u'twelve', u'until', u'he', u'be', u'seventeen', u',', u'Newton', u'be', u'educate', u'at', u'the', u'King', u"'s", u'School', u',', u'Grantham', u'-lrb-', u'where', u'he', u'signature', u'can', u'still', u'be', u'see', u'upon', u'a', u'library', u'window', u'sill', u'-rrb-', u'.'], u'pos': [u'NNP', u':', u'NNP', u'NNP', u'NNP', u'CC', u'NNP', u',', u'CD', u'-RRB-', u'IN', u'DT', u'NN', u'IN', u'IN', u'CD', u'IN', u'PRP', u'VBD', u'CD', u',', u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u'-LRB-', u'WRB', u'PRP$', u'NN', u'MD', u'RB', u'VB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[3316, 3318], [3318, 3319], [3320, 3326], [3327, 3329], [3330, 3337], [3338, 3339], [3340, 3343], [3343, 3344], [3345, 3349], [3349, 3350], [3352, 3356], [3357, 3360], [3361, 3364], [3365, 3367], [3368, 3373], [3374, 3380], [3381, 3386], [3387, 3389], [3390, 3393], [3394, 3403], [3403, 3404], [3405, 3411], [3412, 3415], [3416, 3424], [3425, 3427], [3428, 3431], [3432, 3436], [3436, 3438], [3439, 3445], [3445, 3446], [3447, 3455], [3456, 3457], [3457, 3462], [3463, 3466], [3467, 3476], [3477, 3480], [3481, 3486], [3487, 3489], [3490, 3494], [3495, 3499], [3500, 3501], [3502, 3509], [3510, 3516], [3517, 3521], [3521, 3522], [3522, 3523]]}) 
answer: set([u'isaac', u'schol'])
candidate Sentence: (0.25504961609840393, {u'tokens': [u'The', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claims', u'that', u'the', u'tree', u'was', u'purchased', u'by', u'the', u'school', u',', u'uprooted', u'and', u'transported', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'years', u'later', u'.'], u'lemmas': [u'the', u'King', u"'s", u'School', u',', u'Grantham', u',', u'claim', u'that', u'the', u'tree', u'be', u'purchase', u'by', u'the', u'school', u',', u'uproot', u'and', u'transport', u'to', u'the', u'headmaster', u"'s", u'garden', u'some', u'year', u'later', u'.'], u'pos': [u'DT', u'NNP', u'POS', u'NNP', u',', u'NNP', u',', u'VBZ', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'IN', u'DT', u'NN', u',', u'VBN', u'CC', u'VBN', u'TO', u'DT', u'NN', u'POS', u'NN', u'DT', u'NNS', u'RB', u'.'], u'char_offsets': [[44815, 44818], [44819, 44823], [44823, 44825], [44826, 44832], [44832, 44833], [44834, 44842], [44842, 44843], [44844, 44850], [44851, 44855], [44856, 44859], [44860, 44864], [44865, 44868], [44869, 44878], [44879, 44881], [44882, 44885], [44886, 44892], [44892, 44893], [44894, 44902], [44903, 44906], [44907, 44918], [44919, 44921], [44922, 44925], [44926, 44936], [44936, 44938], [44939, 44945], [44946, 44950], [44951, 44956], [44957, 44962], [44962, 44963]]}) 
answer: set([u'isaac', u'educate', u'newton', u'at', u'schol'])
candidate Sentence: (0.22615641355514526, {u'tokens': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'Was', u'Isaac', u'Newton', u'an', u'Arian', u'?'], u'lemmas': [u'in', u'JSTOR', u'*', u'Pfizenmaier', u',', u'Thomas', u'C.', u'``', u'be', u'Isaac', u'Newton', u'a', u'Arian', u'?'], u'pos': [u'IN', u'NNP', u'SYM', u'NNP', u',', u'NNP', u'NNP', u'``', u'VBD', u'NNP', u'NNP', u'DT', u'NNP', u'.'], u'char_offsets': [[49274, 49276], [49277, 49282], [49283, 49284], [49285, 49296], [49296, 49297], [49298, 49304], [49305, 49307], [49308, 49309], [49309, 49312], [49313, 49318], [49319, 49325], [49326, 49328], [49329, 49334], [49334, 49335]]}) 
answer: set([u'king', u'educate', u'grantham', u'at', u"'s", u'the', u'schol'])
candidate Sentence: (0.15308648347854614, {u'tokens': [u'Westfall', u'2007', u',', u'p.', u'73', u'One', u'of', u'Newton', u"'s", u'cases', u'as', u'the', u'King', u"'s", u'attorney', u'was', u'against', u'William', u'Chaloner', u'.'], u'lemmas': [u'Westfall', u'2007', u',', u'p.', u'73', u'one', u'of', u'Newton', u"'s", u'case', u'as', u'the', u'King', u"'s", u'attorney', u'be', u'against', u'William', u'Chaloner', u'.'], u'pos': [u'NNP', u'CD', u',', u'NN', u'CD', u'CD', u'IN', u'NNP', u'POS', u'NNS', u'IN', u'DT', u'NNP', u'POS', u'NN', u'VBD', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[38660, 38668], [38669, 38673], [38673, 38674], [38675, 38677], [38677, 38679], [38681, 38684], [38685, 38687], [38688, 38694], [38694, 38696], [38697, 38702], [38703, 38705], [38706, 38709], [38710, 38714], [38714, 38716], [38717, 38725], [38726, 38729], [38730, 38737], [38738, 38745], [38746, 38754], [38754, 38755]]}) 
answer: set([u'isaac', u'educate', u'grantham', u'at', u'schol'])
candidate Sentence: (0.14856207370758057, {u'tokens': [u'*', u'Newton', u',', u'Isaac', u'.'], u'lemmas': [u'*', u'Newton', u',', u'Isaac', u'.'], u'pos': [u'SYM', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[50019, 50020], [50021, 50027], [50027, 50028], [50029, 50034], [50034, 50035]]}) 
answer: set([u'king', u'educate', u'grantham', u'at', u"'s", u'the', u'schol'])

Was Isaac Newton educated at The King's Schol, Grantham?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9ef0>.answer
_____________________________ test_yesno[param161] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9f38>, <src.tfidf.TF_IDF object at 0x7fbca705f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9f38>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.38303393125534058, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22679, 22686], [22686, 22688], [22689, 22696], [22697, 22705], [22706, 22714], [22715, 22720], [22721, 22724], [22725, 22733], [22734, 22742], [22743, 22747], [22747, 22748], [22749, 22757], [22758, 22760], [22761, 22764], [22765, 22770], [22771, 22773], [22774, 22782], [22782, 22783], [22784, 22793], [22794, 22797], [22798, 22805], [22806, 22812], [22813, 22821], [22822, 22824], [22825, 22834], [22834, 22835]]}) 
answer: set([u'build'])
candidate Sentence: (0.28459733724594116, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[23102, 23105], [23106, 23111], [23112, 23114], [23115, 23123], [23124, 23126], [23127, 23134], [23135, 23142], [23143, 23145], [23146, 23155], [23156, 23159], [23160, 23167], [23168, 23176], [23177, 23179], [23180, 23187], [23188, 23191], [23192, 23201], [23201, 23202]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18299543857574463, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[9050, 9053], [9054, 9058], [9059, 9067], [9068, 9075], [9075, 9077], [9078, 9087], [9088, 9091], [9092, 9101], [9102, 9109], [9110, 9113], [9114, 9121], [9122, 9129], [9130, 9138], [9139, 9142], [9143, 9146], [9147, 9151], [9152, 9157], [9158, 9166], [9166, 9167]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build', u'in'])
candidate Sentence: (0.16619449853897095, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3457, 3468], [3469, 3471], [3472, 3479], [3480, 3482], [3483, 3487], [3488, 3492], [3493, 3500], [3501, 3512], [3513, 3517], [3518, 3521], [3522, 3529], [3530, 3539], [3539, 3540], [3541, 3547], [3548, 3550], [3551, 3554], [3555, 3560], [3560, 3561], [3562, 3564], [3565, 3573], [3574, 3578], [3579, 3581], [3582, 3587], [3588, 3594], [3595, 3603], [3604, 3610], [3611, 3615], [3616, 3619], [3620, 3625], [3626, 3635], [3636, 3638], [3639, 3643], [3643, 3644]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.15473592281341553, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23841, 23844], [23845, 23849], [23850, 23852], [23853, 23863], [23864, 23866], [23867, 23874], [23875, 23880], [23881, 23889], [23890, 23899], [23899, 23900]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build', u'in'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cd9f38>.answer
_____________________________ test_yesno[param162] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cd9f80>, <src.tfidf.TF_IDF object at 0x7fbca705f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes,')
E                +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x7fbca0cd9f80>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.38303393125534058, {u'tokens': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'centered', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u"'s", u'Central', u'Business', u'District', u'along', u'the', u'Jenderal', u'Sudirman', u'Road', u',', u'center', u'at', u'the', u'Wisma', u'46', u'building', u',', u'currently', u'the', u'tallest', u'office', u'building', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'POS', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'DT', u'NNP', u'CD', u'NN', u',', u'RB', u'DT', u'JJS', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[22679, 22686], [22686, 22688], [22689, 22696], [22697, 22705], [22706, 22714], [22715, 22720], [22721, 22724], [22725, 22733], [22734, 22742], [22743, 22747], [22747, 22748], [22749, 22757], [22758, 22760], [22761, 22764], [22765, 22770], [22771, 22773], [22774, 22782], [22782, 22783], [22784, 22793], [22794, 22797], [22798, 22805], [22806, 22812], [22813, 22821], [22822, 22824], [22825, 22834], [22834, 22835]]}) 
answer: set([u'build'])
candidate Sentence: (0.28459733724594116, {u'tokens': [u'The', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'is', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'lemmas': [u'the', u'Wisma', u'46', u'building', u'in', u'Central', u'Jakarta', u'be', u'currently', u'the', u'highest', u'building', u'in', u'Jakarta', u'and', u'Indonesia', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[23102, 23105], [23106, 23111], [23112, 23114], [23115, 23123], [23124, 23126], [23127, 23134], [23135, 23142], [23143, 23145], [23146, 23155], [23156, 23159], [23160, 23167], [23168, 23176], [23177, 23179], [23180, 23187], [23188, 23191], [23192, 23201], [23201, 23202]]}) 
answer: set([u'tallest', u'build'])
candidate Sentence: (0.18299543857574463, {u'tokens': [u'The', u'area', u'includes', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmarks', u'include', u'the', u'Chinese', u'Langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'lemmas': [u'the', u'area', u'include', u'Jakarta', u"'s", u'Chinatown', u'and', u'landmark', u'include', u'the', u'chinese', u'langgam', u'building', u'and', u'the', u'Toko', u'Merah', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'NNP', u'POS', u'NNP', u'CC', u'NNS', u'VBP', u'DT', u'JJ', u'NN', u'NN', u'CC', u'DT', u'NNP', u'NNP', u'NN', u'.'], u'char_offsets': [[9050, 9053], [9054, 9058], [9059, 9067], [9068, 9075], [9075, 9077], [9078, 9087], [9088, 9091], [9092, 9101], [9102, 9109], [9110, 9113], [9114, 9121], [9122, 9129], [9130, 9138], [9139, 9142], [9143, 9146], [9147, 9151], [9152, 9157], [9158, 9166], [9166, 9167]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build', u'in'])
candidate Sentence: (0.16619449853897095, {u'tokens': [u'Jayawikarta', u'is', u'thought', u'to', u'have', u'made', u'trading', u'connections', u'with', u'the', u'English', u'merchants', u',', u'rivals', u'of', u'the', u'Dutch', u',', u'by', u'allowing', u'them', u'to', u'build', u'houses', u'directly', u'across', u'from', u'the', u'Dutch', u'buildings', u'in', u'1615', u'.'], u'lemmas': [u'Jayawikarta', u'be', u'think', u'to', u'have', u'make', u'trading', u'connection', u'with', u'the', u'English', u'merchant', u',', u'rival', u'of', u'the', u'Dutch', u',', u'by', u'allow', u'they', u'to', u'build', u'house', u'directly', u'across', u'from', u'the', u'dutch', u'building', u'in', u'1615', u'.'], u'pos': [u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'NNS', u',', u'NNS', u'IN', u'DT', u'NNP', u',', u'IN', u'VBG', u'PRP', u'TO', u'VB', u'NNS', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'CD', u'.'], u'char_offsets': [[3457, 3468], [3469, 3471], [3472, 3479], [3480, 3482], [3483, 3487], [3488, 3492], [3493, 3500], [3501, 3512], [3513, 3517], [3518, 3521], [3522, 3529], [3530, 3539], [3539, 3540], [3541, 3547], [3548, 3550], [3551, 3554], [3555, 3560], [3560, 3561], [3562, 3564], [3565, 3573], [3574, 3578], [3579, 3581], [3582, 3587], [3588, 3594], [3595, 3603], [3604, 3610], [3611, 3615], [3616, 3619], [3620, 3625], [3626, 3635], [3636, 3638], [3639, 3643], [3643, 3644]]}) 
answer: set([u'tallest', u'indonesia', u'wisma'])
candidate Sentence: (0.15473592281341553, {u'tokens': [u'The', u'park', u'is', u'surrounded', u'by', u'several', u'Dutch', u'colonial', u'buildings', u'.'], u'lemmas': [u'the', u'park', u'be', u'surround', u'by', u'several', u'dutch', u'colonial', u'building', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'JJ', u'JJ', u'NN', u'NNS', u'.'], u'char_offsets': [[23841, 23844], [23845, 23849], [23850, 23852], [23853, 23863], [23864, 23866], [23867, 23874], [23875, 23880], [23881, 23889], [23890, 23899], [23899, 23900]]}) 
answer: set([u'wisma', u'indonesia', u'tallest', u'build', u'in'])

Is the Wisma building the tallest building in Indonesia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes,
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes,')
 +    where 'Yes,' = <src.question_processing.Question_parser instance at 0x7fbca0cd9f80>.answer
_____________________________ test_yesno[param165] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde098>, <src.tfidf.TF_IDF object at 0x7fbca705f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde098>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.46473228931427002, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[350, 353], [354, 366], [367, 371], [371, 372], [373, 384], [384, 385], [386, 388], [389, 392], [393, 399], [400, 407], [408, 410], [411, 414], [415, 420], [420, 421]]}) 
answer: set([u'city', u'12th', u'jakarta'])
candidate Sentence: (0.38863831758499146, {u'tokens': [u'Jakarta', u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [11, 18], [19, 20], [20, 24], [25, 28], [29, 36], [36, 37], [38, 40], [41, 44], [45, 52], [53, 56], [57, 64], [65, 69], [70, 72], [73, 82], [82, 83]]}) 
answer: set([u'12th', u'in', u'world'])
candidate Sentence: (0.35559409856796265, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[22193, 22196], [22197, 22207], [22208, 22210], [22211, 22218], [22219, 22226], [22227, 22229], [22230, 22239], [22240, 22242], [22243, 22245], [22246, 22253], [22253, 22254], [22255, 22261], [22262, 22264], [22265, 22268], [22269, 22275], [22276, 22283], [22284, 22289], [22290, 22294], [22295, 22297], [22298, 22301], [22302, 22307], [22307, 22308]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.32081952691078186, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[242, 244], [245, 247], [248, 251], [252, 256], [257, 265], [266, 270], [271, 273], [274, 283], [284, 287], [288, 297], [298, 302], [302, 303], [304, 307], [308, 310], [311, 314], [315, 330], [331, 335], [336, 338], [339, 342], [343, 348], [348, 349]]}) 
answer: set([u'12th', u'jakarta', u'largest'])
candidate Sentence: (0.23975925147533417, {u'tokens': [u'Financial', u'services', u',', u'trade', u'and', u'manufacturing', u'are', u'the', u'largest', u'sectors', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'lemmas': [u'Financial', u'service', u',', u'trade', u'and', u'manufacturing', u'be', u'the', u'largest', u'sector', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'pos': [u'NNP', u'NNS', u',', u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'NNS', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[19581, 19590], [19591, 19599], [19599, 19600], [19601, 19606], [19607, 19610], [19611, 19624], [19625, 19628], [19629, 19632], [19633, 19640], [19641, 19648], [19649, 19651], [19652, 19655], [19656, 19660], [19660, 19662], [19663, 19670], [19670, 19671]]}) 
answer: set([u'12th', u'in', u'world', u'jakarta'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde098>.answer
_____________________________ test_yesno[param166] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde0e0>, <src.tfidf.TF_IDF object at 0x7fbca705f510>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cde0e0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.46473228931427002, {u'tokens': [u'The', u'metropolitan', u'area', u',', u'Jabodetabek', u',', u'is', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'metropolitan', u'area', u',', u'jabodetabek', u',', u'be', u'the', u'second', u'largest', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'NN', u',', u'VBZ', u'DT', u'JJ', u'JJS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[350, 353], [354, 366], [367, 371], [371, 372], [373, 384], [384, 385], [386, 388], [389, 392], [393, 399], [400, 407], [408, 410], [411, 414], [415, 420], [420, 421]]}) 
answer: set([u'city', u'12th', u'jakarta'])
candidate Sentence: (0.38863831758499146, {u'tokens': [u'Jakarta', u'Jakarta', u'-LRB-', u'also', u'DKI', u'Jakarta', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'lemmas': [u'Jakarta', u'Jakarta', u'-lrb-', u'also', u'DKI', u'Jakarta', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Indonesia', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'RB', u'NNP', u'NNP', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [11, 18], [19, 20], [20, 24], [25, 28], [29, 36], [36, 37], [38, 40], [41, 44], [45, 52], [53, 56], [57, 64], [65, 69], [70, 72], [73, 82], [82, 83]]}) 
answer: set([u'12th', u'in', u'world'])
candidate Sentence: (0.35559409856796265, {u'tokens': [u'The', u'population', u'of', u'greater', u'Jakarta', u'is', u'estimated', u'at', u'23', u'million', u',', u'making', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'lemmas': [u'the', u'population', u'of', u'greater', u'Jakarta', u'be', u'estimate', u'at', u'23', u'million', u',', u'make', u'it', u'the', u'second', u'largest', u'urban', u'area', u'in', u'the', u'world', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJR', u'NNP', u'VBZ', u'VBN', u'IN', u'CD', u'CD', u',', u'VBG', u'PRP', u'DT', u'JJ', u'JJS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[22193, 22196], [22197, 22207], [22208, 22210], [22211, 22218], [22219, 22226], [22227, 22229], [22230, 22239], [22240, 22242], [22243, 22245], [22246, 22253], [22253, 22254], [22255, 22261], [22262, 22264], [22265, 22268], [22269, 22275], [22276, 22283], [22284, 22289], [22290, 22294], [22295, 22297], [22298, 22301], [22302, 22307], [22307, 22308]]}) 
answer: set([u'city', u'12th'])
candidate Sentence: (0.32081952691078186, {u'tokens': [u'It', u'is', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'is', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'lemmas': [u'it', u'be', u'the', u'most', u'populous', u'city', u'in', u'Indonesia', u'and', u'Southeast', u'Asia', u',', u'and', u'be', u'the', u'twelfth-largest', u'city', u'in', u'the', u'world', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'NNP', u'NNP', u',', u'CC', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[242, 244], [245, 247], [248, 251], [252, 256], [257, 265], [266, 270], [271, 273], [274, 283], [284, 287], [288, 297], [298, 302], [302, 303], [304, 307], [308, 310], [311, 314], [315, 330], [331, 335], [336, 338], [339, 342], [343, 348], [348, 349]]}) 
answer: set([u'12th', u'jakarta', u'largest'])
candidate Sentence: (0.23975925147533417, {u'tokens': [u'Financial', u'services', u',', u'trade', u'and', u'manufacturing', u'are', u'the', u'largest', u'sectors', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'lemmas': [u'Financial', u'service', u',', u'trade', u'and', u'manufacturing', u'be', u'the', u'largest', u'sector', u'of', u'the', u'city', u"'s", u'economy', u'.'], u'pos': [u'NNP', u'NNS', u',', u'NN', u'CC', u'NN', u'VBP', u'DT', u'JJS', u'NNS', u'IN', u'DT', u'NN', u'POS', u'NN', u'.'], u'char_offsets': [[19581, 19590], [19591, 19599], [19599, 19600], [19601, 19606], [19607, 19610], [19611, 19624], [19625, 19628], [19629, 19632], [19633, 19640], [19641, 19648], [19649, 19651], [19652, 19655], [19656, 19660], [19660, 19662], [19663, 19670], [19670, 19671]]}) 
answer: set([u'12th', u'in', u'world', u'jakarta'])

Is Jakarta the 12th largest city in the world?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cde0e0>.answer
_____________________________ test_yesno[param174] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde320>, <src.tfidf.TF_IDF object at 0x7fbca451b650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
E                +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x7fbca0cde320>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.2495361864566803, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7815, 7817], [7818, 7821], [7822, 7823], [7824, 7832], [7833, 7836], [7837, 7848], [7849, 7851], [7852, 7861], [7862, 7864], [7865, 7872], [7872, 7873]]}) 
answer: set([u'engine', u'watt', u'james'])
candidate Sentence: (0.1657966822385788, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8346, 8353], [8354, 8359], [8360, 8364], [8365, 8369], [8370, 8381], [8381, 8382], [8383, 8386], [8387, 8400], [8401, 8413], [8414, 8421], [8422, 8430], [8430, 8431]]}) 
answer: set([u'engine', u'james', u'watt', u'a'])
candidate Sentence: (0.15735550224781036, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5838, 5842], [5842, 5843], [5844, 5848], [5849, 5852], [5853, 5860], [5861, 5868], [5869, 5876], [5876, 5877], [5878, 5885], [5886, 5893], [5894, 5899], [5900, 5909], [5910, 5914], [5915, 5917], [5918, 5926], [5927, 5937], [5938, 5941], [5942, 5947], [5948, 5950], [5951, 5958], [5959, 5966], [5967, 5972], [5973, 5976], [5977, 5980], [5981, 5985], [5986, 5990], [5991, 5993], [5994, 5997], [5998, 6005], [6005, 6006]]}) 
answer: set([u'a', u'james', u'improve'])
candidate Sentence: (0.14312334358692169, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8805, 8807], [8808, 8811], [8812, 8821], [8821, 8822], [8823, 8827], [8828, 8830], [8831, 8834], [8835, 8844], [8845, 8852], [8853, 8856], [8857, 8864], [8865, 8877], [8878, 8879], [8880, 8883], [8884, 8887], [8888, 8892], [8893, 8898], [8898, 8899]]}) 
answer: set([u'engine', u'james', u'watt', u'improve'])
candidate Sentence: (0.12478215992450714, {u'tokens': [u'It', u'was', u'clear', u'to', u'many', u'that', u'higher', u'pressures', u'produced', u'in', u'improved', u'boilers', u'would', u'produce', u'engines', u'having', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'was', u'soon', u'embodied', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'lemmas': [u'it', u'be', u'clear', u'to', u'many', u'that', u'higher', u'pressure', u'produce', u'in', u'improve', u'boiler', u'would', u'produce', u'engine', u'have', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'be', u'soon', u'embody', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'JJ', u'IN', u'JJR', u'NNS', u'VBN', u'IN', u'VBN', u'NNS', u'MD', u'VB', u'NNS', u'VBG', u'RB', u'JJR', u'NN', u',', u'CC', u'MD', u'VB', u'TO', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[7875, 7877], [7878, 7881], [7882, 7887], [7888, 7890], [7891, 7895], [7896, 7900], [7901, 7907], [7908, 7917], [7918, 7926], [7927, 7929], [7930, 7938], [7939, 7946], [7947, 7952], [7953, 7960], [7961, 7968], [7969, 7975], [7976, 7980], [7981, 7987], [7988, 7998], [7998, 7999], [8000, 8003], [8004, 8009], [8010, 8014], [8015, 8017], [8018, 8021], [8022, 8032], [8033, 8035], [8036, 8050], [8051, 8055], [8056, 8059], [8060, 8064], [8065, 8073], [8074, 8076], [8077, 8080], [8081, 8091], [8092, 8095], [8096, 8105], [8105, 8106]]}) 
answer: set([u'a', u'watt', u'james'])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.')
 +    where 'Yes, his improvements to the Newcomen steam engine were fundamental to the changes brought by the Industrial Revolution.' = <src.question_processing.Question_parser instance at 0x7fbca0cde320>.answer
_____________________________ test_yesno[param175] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde368>, <src.tfidf.TF_IDF object at 0x7fbca451b650>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde368>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.2495361864566803, {u'tokens': [u'It', u'was', u'a', u'platform', u'for', u'generations', u'of', u'inventors', u'to', u'improve', u'.'], u'lemmas': [u'it', u'be', u'a', u'platform', u'for', u'generation', u'of', u'inventor', u'to', u'improve', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'NNS', u'IN', u'NNS', u'TO', u'VB', u'.'], u'char_offsets': [[7815, 7817], [7818, 7821], [7822, 7823], [7824, 7832], [7833, 7836], [7837, 7848], [7849, 7851], [7852, 7861], [7862, 7864], [7865, 7872], [7872, 7873]]}) 
answer: set([u'engine', u'watt', u'james'])
candidate Sentence: (0.1657966822385788, {u'tokens': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacturing', u'productivity', u'greatly', u'improved', u'.'], u'lemmas': [u'Capital', u'could', u'work', u'more', u'efficiently', u',', u'and', u'manufacture', u'productivity', u'greatly', u'improve', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'RBR', u'RB', u',', u'CC', u'VBG', u'NN', u'RB', u'VBN', u'.'], u'char_offsets': [[8346, 8353], [8354, 8359], [8360, 8364], [8365, 8369], [8370, 8381], [8381, 8382], [8383, 8386], [8387, 8400], [8401, 8413], [8414, 8421], [8422, 8430], [8430, 8431]]}) 
answer: set([u'engine', u'james', u'watt', u'a'])
candidate Sentence: (0.15735550224781036, {u'tokens': [u'Watt', u',', u'with', u'his', u'partner', u'Matthew', u'Boulton', u',', u'battled', u'against', u'rival', u'engineers', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'tried', u'to', u'develop', u'engines', u'which', u'did', u'not', u'fall', u'foul', u'of', u'his', u'patents', u'.'], u'lemmas': [u'watt', u',', u'with', u'he', u'partner', u'Matthew', u'Boulton', u',', u'battle', u'against', u'rival', u'engineer', u'such', u'as', u'Jonathan', u'Hornblower', u'who', u'try', u'to', u'develop', u'engine', u'which', u'do', u'not', u'fall', u'foul', u'of', u'he', u'patent', u'.'], u'pos': [u'NN', u',', u'IN', u'PRP$', u'NN', u'NNP', u'NNP', u',', u'VBD', u'IN', u'JJ', u'NNS', u'JJ', u'IN', u'NNP', u'NNP', u'WP', u'VBD', u'TO', u'VB', u'NNS', u'WDT', u'VBD', u'RB', u'VB', u'JJ', u'IN', u'PRP$', u'NNS', u'.'], u'char_offsets': [[5838, 5842], [5842, 5843], [5844, 5848], [5849, 5852], [5853, 5860], [5861, 5868], [5869, 5876], [5876, 5877], [5878, 5885], [5886, 5893], [5894, 5899], [5900, 5909], [5910, 5914], [5915, 5917], [5918, 5926], [5927, 5937], [5938, 5941], [5942, 5947], [5948, 5950], [5951, 5958], [5959, 5966], [5967, 5972], [5973, 5976], [5977, 5980], [5981, 5985], [5986, 5990], [5991, 5993], [5994, 5997], [5998, 6005], [6005, 6006]]}) 
answer: set([u'a', u'james', u'improve'])
candidate Sentence: (0.14312334358692169, {u'tokens': [u'To', u'our', u'ancestors', u',', u'such', u'an', u'odd', u'eccentric', u'instant', u'was', u'without', u'significance', u'-', u'did', u'not', u'even', u'exist', u'.'], u'lemmas': [u'to', u'we', u'ancestor', u',', u'such', u'a', u'odd', u'eccentric', u'instant', u'be', u'without', u'significance', u'-', u'do', u'not', u'even', u'exist', u'.'], u'pos': [u'TO', u'PRP$', u'NNS', u',', u'PDT', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'IN', u'NN', u':', u'VBD', u'RB', u'RB', u'VB', u'.'], u'char_offsets': [[8805, 8807], [8808, 8811], [8812, 8821], [8821, 8822], [8823, 8827], [8828, 8830], [8831, 8834], [8835, 8844], [8845, 8852], [8853, 8856], [8857, 8864], [8865, 8877], [8878, 8879], [8880, 8883], [8884, 8887], [8888, 8892], [8893, 8898], [8898, 8899]]}) 
answer: set([u'engine', u'james', u'watt', u'improve'])
candidate Sentence: (0.12478215992450714, {u'tokens': [u'It', u'was', u'clear', u'to', u'many', u'that', u'higher', u'pressures', u'produced', u'in', u'improved', u'boilers', u'would', u'produce', u'engines', u'having', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'was', u'soon', u'embodied', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'lemmas': [u'it', u'be', u'clear', u'to', u'many', u'that', u'higher', u'pressure', u'produce', u'in', u'improve', u'boiler', u'would', u'produce', u'engine', u'have', u'even', u'higher', u'efficiency', u',', u'and', u'would', u'lead', u'to', u'the', u'revolution', u'in', u'transportation', u'that', u'be', u'soon', u'embody', u'in', u'the', u'locomotive', u'and', u'steamboat', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'TO', u'JJ', u'IN', u'JJR', u'NNS', u'VBN', u'IN', u'VBN', u'NNS', u'MD', u'VB', u'NNS', u'VBG', u'RB', u'JJR', u'NN', u',', u'CC', u'MD', u'VB', u'TO', u'DT', u'NN', u'IN', u'NN', u'WDT', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[7875, 7877], [7878, 7881], [7882, 7887], [7888, 7890], [7891, 7895], [7896, 7900], [7901, 7907], [7908, 7917], [7918, 7926], [7927, 7929], [7930, 7938], [7939, 7946], [7947, 7952], [7953, 7960], [7961, 7968], [7969, 7975], [7976, 7980], [7981, 7987], [7988, 7998], [7998, 7999], [8000, 8003], [8004, 8009], [8010, 8014], [8015, 8017], [8018, 8021], [8022, 8032], [8033, 8035], [8036, 8050], [8051, 8055], [8056, 8059], [8060, 8064], [8065, 8073], [8074, 8076], [8077, 8080], [8081, 8091], [8092, 8095], [8096, 8105], [8105, 8106]]}) 
answer: set([u'a', u'watt', u'james'])

Did James Watt improve an engine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde368>.answer
_____________________________ test_yesno[param186] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde680>, <src.tfidf.TF_IDF object at 0x7fbca57ac8d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde680>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.36842131614685059, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12905, 12910], [12911, 12917], [12918, 12920], [12921, 12925], [12926, 12928], [12929, 12932], [12933, 12943], [12944, 12946], [12947, 12955], [12955, 12956]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.36695265769958496, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'the', u'seat', u'of', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[589, 594], [595, 601], [602, 604], [605, 608], [609, 613], [614, 616], [617, 620], [621, 631], [632, 634], [635, 643], [643, 644]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.25367045402526855, {u'tokens': [u'As', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'has', u'a', u'comprehensive', u'road', u'network', u'that', u'leads', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'lemmas': [u'as', u'capital', u'of', u'Malaysia', u',', u'Kuala', u'Lumpur', u'have', u'a', u'comprehensive', u'road', u'network', u'that', u'lead', u'to', u'the', u'rest', u'of', u'Peninsular', u'Malaysia', u'.'], u'pos': [u'IN', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'WDT', u'VBZ', u'TO', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[35830, 35832], [35833, 35840], [35841, 35843], [35844, 35852], [35852, 35853], [35854, 35859], [35860, 35866], [35867, 35870], [35871, 35872], [35873, 35886], [35887, 35891], [35892, 35899], [35900, 35904], [35905, 35910], [35911, 35913], [35914, 35917], [35918, 35922], [35923, 35925], [35926, 35936], [35937, 35945], [35945, 35946]]}) 
answer: set([u'capitol'])
candidate Sentence: (0.21239106357097626, {u'tokens': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'is', u'based', u'in', u'the', u'city', u'and', u'forms', u'one', u'of', u'its', u'core', u'economic', u'activities', u'.'], u'lemmas': [u'Bursa', u'Malaysia', u'or', u'the', u'Malaysia', u'Exchange', u'be', u'base', u'in', u'the', u'city', u'and', u'form', u'one', u'of', u'its', u'core', u'economic', u'activity', u'.'], u'pos': [u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'CC', u'VBZ', u'CD', u'IN', u'PRP$', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[14690, 14695], [14696, 14704], [14705, 14707], [14708, 14711], [14712, 14720], [14721, 14729], [14730, 14732], [14733, 14738], [14739, 14741], [14742, 14745], [14746, 14750], [14751, 14754], [14755, 14760], [14761, 14764], [14765, 14767], [14768, 14771], [14772, 14776], [14777, 14785], [14786, 14796], [14796, 14797]]}) 
answer: set([u'kuala', u'lumpur', u'capitol'])
candidate Sentence: (0.19713637232780457, {u'tokens': [u'TM', u'Tower', u'is', u'the', u'headquarters', u'of', u'Malaysia', u"'s", u'principal', u'telecommunication', u'service', u'provider', u',', u'Telekom', u'Malaysia', u'.'], u'lemmas': [u'TM', u'Tower', u'be', u'the', u'headquarters', u'of', u'Malaysia', u"'s", u'principal', u'telecommunication', u'service', u'provider', u',', u'Telekom', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'POS', u'JJ', u'NN', u'NN', u'NN', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[33316, 33318], [33319, 33324], [33325, 33327], [33328, 33331], [33332, 33344], [33345, 33347], [33348, 33356], [33356, 33358], [33359, 33368], [33369, 33386], [33387, 33394], [33395, 33403], [33403, 33404], [33405, 33412], [33413, 33421], [33421, 33422]]}) 
answer: set([u'kuala', u'lumpur', u'capitol'])

Is Kuala Lumpur the capitol of Malaysia? disfluent
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde680>.answer
_____________________________ test_yesno[param189] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde758>, <src.tfidf.TF_IDF object at 0x7fbca57ac8d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde758>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.48589566349983215, {u'tokens': [u'Beginning', u'in', u'the', u'1990s', u',', u'the', u'city', u'has', u'played', u'host', u'to', u'many', u'international', u'sporting', u',', u'political', u'and', u'cultural', u'events', u'including', u'the', u'1998', u'Commonwealth', u'Games', u'and', u'the', u'Formula', u'One', u'World', u'Championship', u'.'], u'lemmas': [u'begin', u'in', u'the', u'1990s', u',', u'the', u'city', u'have', u'play', u'host', u'to', u'many', u'international', u'sport', u',', u'political', u'and', u'cultural', u'event', u'include', u'the', u'1998', u'Commonwealth', u'Games', u'and', u'the', u'Formula', u'one', u'World', u'Championship', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'CD', u',', u'DT', u'NN', u'VBZ', u'VBN', u'NN', u'TO', u'JJ', u'JJ', u'VBG', u',', u'JJ', u'CC', u'JJ', u'NNS', u'VBG', u'DT', u'CD', u'NNP', u'NNPS', u'CC', u'DT', u'NNP', u'CD', u'NNP', u'NNP', u'.'], u'char_offsets': [[1527, 1536], [1537, 1539], [1540, 1543], [1544, 1549], [1549, 1550], [1551, 1554], [1555, 1559], [1560, 1563], [1564, 1570], [1571, 1575], [1576, 1578], [1579, 1583], [1584, 1597], [1598, 1606], [1606, 1607], [1608, 1617], [1618, 1621], [1622, 1630], [1631, 1637], [1638, 1647], [1648, 1651], [1652, 1656], [1657, 1669], [1670, 1675], [1676, 1679], [1680, 1683], [1684, 1691], [1692, 1695], [1696, 1701], [1702, 1714], [1714, 1715]]}) 
answer: set([u'a', u'it', u'for'])
candidate Sentence: (0.3686378002166748, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'one', u'of', u'the', u'host', u'cities', u'for', u'the', u'Formula', u'One', u'World', u'Championship', u',', u'the', u'open-wheel', u'auto', u'racing', u'A1', u'Grand', u'Prix', u'and', u'the', u'Motorcycle', u'Grand', u'Prix', u'with', u'races', u'being', u'held', u'at', u'Sepang', u'International', u'Circuit', u'in', u'the', u'neighbouring', u'state', u'of', u'Selangor', u',', u'next', u'to', u'the', u'Kuala', u'Lumpur', u'International', u'Airport', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'one', u'of', u'the', u'host', u'city', u'for', u'the', u'Formula', u'one', u'World', u'Championship', u',', u'the', u'open-wheel', u'auto', u'racing', u'a1', u'Grand', u'Prix', u'and', u'the', u'Motorcycle', u'Grand', u'Prix', u'with', u'race', u'be', u'hold', u'at', u'Sepang', u'International', u'Circuit', u'in', u'the', u'neighbouring', u'state', u'of', u'Selangor', u',', u'next', u'to', u'the', u'Kuala', u'Lumpur', u'International', u'Airport', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'CD', u'IN', u'DT', u'NN', u'NNS', u'IN', u'DT', u'NNP', u'CD', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'NN', u'NN', u'NNP', u'NNP', u'CC', u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNS', u'VBG', u'VBN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'JJ', u'TO', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[30137, 30142], [30143, 30149], [30150, 30152], [30153, 30156], [30157, 30159], [30160, 30163], [30164, 30168], [30169, 30175], [30176, 30179], [30180, 30183], [30184, 30191], [30192, 30195], [30196, 30201], [30202, 30214], [30214, 30215], [30219, 30222], [30223, 30233], [30234, 30238], [30239, 30245], [30246, 30248], [30249, 30254], [30255, 30259], [30263, 30266], [30267, 30270], [30271, 30281], [30282, 30287], [30288, 30292], [30296, 30300], [30301, 30306], [30307, 30312], [30313, 30317], [30318, 30320], [30321, 30327], [30328, 30341], [30342, 30349], [30350, 30352], [30353, 30356], [30357, 30369], [30370, 30375], [30376, 30378], [30379, 30387], [30387, 30388], [30389, 30393], [30394, 30396], [30397, 30400], [30401, 30406], [30407, 30413], [30414, 30427], [30428, 30435], [30435, 30436]]}) 
answer: set([u'a', u'it'])
candidate Sentence: (0.21146924793720245, {u'tokens': [u'The', u'Formula', u'One', u'event', u'contributes', u'significantly', u'to', u'tourist', u'arrivals', u'and', u'tourism', u'income', u'to', u'Kuala', u'Lumpur', u'.'], u'lemmas': [u'the', u'Formula', u'one', u'event', u'contribute', u'significantly', u'to', u'tourist', u'arrival', u'and', u'tourism', u'income', u'to', u'Kuala', u'Lumpur', u'.'], u'pos': [u'DT', u'NNP', u'CD', u'NN', u'VBZ', u'RB', u'TO', u'NN', u'NNS', u'CC', u'NN', u'NN', u'TO', u'NNP', u'NNP', u'.'], u'char_offsets': [[30437, 30440], [30441, 30448], [30449, 30452], [30453, 30458], [30459, 30470], [30471, 30484], [30485, 30487], [30488, 30495], [30496, 30504], [30505, 30508], [30509, 30516], [30517, 30523], [30524, 30526], [30527, 30532], [30533, 30539], [30539, 30540]]}) 
answer: set([u'a', u'city', u'championship', u'for', u'it', u'host', u'world'])
candidate Sentence: (0.14352124929428101, {u'tokens': [u'The', u'city', u'is', u'also', u'home', u'to', u'the', u'country', u"'s", u'main', u'pay-TV', u'service', u',', u'Astro', u',', u'a', u'satellite', u'television', u'service', u',', u'which', u'broadcasts', u'local', u'and', u'global', u'television', u'channels', u'such', u'as', u'CNN', u',', u'BBC', u'World', u',', u'Star', u'World', u'and', u'HBO', u'.'], u'lemmas': [u'the', u'city', u'be', u'also', u'home', u'to', u'the', u'country', u"'s", u'main', u'pay-tv', u'service', u',', u'Astro', u',', u'a', u'satellite', u'television', u'service', u',', u'which', u'broadcast', u'local', u'and', u'global', u'television', u'channel', u'such', u'as', u'CNN', u',', u'BBC', u'World', u',', u'Star', u'World', u'and', u'HBO', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'NN', u'TO', u'DT', u'NN', u'POS', u'JJ', u'NN', u'NN', u',', u'NNP', u',', u'DT', u'NN', u'NN', u'NN', u',', u'WDT', u'VBZ', u'JJ', u'CC', u'JJ', u'NN', u'NNS', u'JJ', u'IN', u'NNP', u',', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[33423, 33426], [33427, 33431], [33432, 33434], [33435, 33439], [33440, 33444], [33445, 33447], [33448, 33451], [33452, 33459], [33459, 33461], [33462, 33466], [33467, 33473], [33474, 33481], [33481, 33482], [33483, 33488], [33488, 33489], [33490, 33491], [33492, 33501], [33502, 33512], [33513, 33520], [33520, 33521], [33522, 33527], [33528, 33538], [33539, 33544], [33545, 33548], [33549, 33555], [33556, 33566], [33567, 33575], [33576, 33580], [33581, 33583], [33584, 33587], [33587, 33588], [33589, 33592], [33593, 33598], [33598, 33599], [33600, 33604], [33605, 33610], [33611, 33614], [33615, 33618], [33618, 33619]]}) 
answer: set([u'championship', u'for', u'it', u'one', u'host', u'formula'])
candidate Sentence: (0.13917204737663269, {u'tokens': [u'A', u'scene', u'during', u'World', u'War', u'II', u'on', u'the', u'streets', u'of', u'Kuala', u'Lumpur', u'.'], u'lemmas': [u'a', u'scene', u'during', u'World', u'War', u'II', u'on', u'the', u'street', u'of', u'Kuala', u'Lumpur', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'DT', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[4106, 4107], [4108, 4113], [4114, 4120], [4121, 4126], [4127, 4130], [4131, 4133], [4134, 4136], [4137, 4140], [4141, 4148], [4149, 4151], [4152, 4157], [4158, 4164], [4164, 4165]]}) 
answer: set([u'city', u'championship', u'for', u'it', u'one', u'host', u'formula'])

Is it a host city for the Formula One World Championship?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde758>.answer
_____________________________ test_yesno[param191] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde7e8>, <src.tfidf.TF_IDF object at 0x7fbca57ac8d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde7e8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32394924759864807, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'Parliament', u'of', u'Malaysia', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[12905, 12910], [12911, 12917], [12918, 12920], [12921, 12925], [12926, 12928], [12929, 12932], [12933, 12943], [12944, 12946], [12947, 12955], [12955, 12956]]}) 
answer: set([u'malaysium', u'it'])
candidate Sentence: (0.28133201599121094, {u'tokens': [u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'lemmas': [u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'University', u'of', u'Malaya', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'NNP', u'IN', u'NNP', u'.'], u'char_offsets': [[39577, 39582], [39583, 39589], [39590, 39592], [39593, 39597], [39598, 39600], [39601, 39604], [39605, 39615], [39616, 39618], [39619, 39625], [39625, 39626]]}) 
answer: set([u'parliament', u'malaysium', u'it'])
candidate Sentence: (0.22638954222202301, {u'tokens': [u'The', u'parliament', u'is', u'composed', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-LRB-', u'Dewan', u'Rakyat', u'-RRB-', u'and', u'an', u'upper', u'House', u'of', u'Senate', u'-LRB-', u'Dewan', u'Negara', u'-RRB-', u'.'], u'lemmas': [u'the', u'parliament', u'be', u'compose', u'of', u'a', u'lower', u'House', u'of', u'Representatives', u'-lrb-', u'Dewan', u'Rakyat', u'-rrb-', u'and', u'a', u'upper', u'House', u'of', u'Senate', u'-lrb-', u'Dewan', u'Negara', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'IN', u'DT', u'JJR', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'CC', u'DT', u'JJ', u'NNP', u'IN', u'NNP', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[12957, 12960], [12961, 12971], [12972, 12974], [12975, 12983], [12984, 12986], [12987, 12988], [12989, 12994], [12995, 13000], [13001, 13003], [13004, 13019], [13020, 13021], [13021, 13026], [13027, 13033], [13033, 13034], [13035, 13038], [13039, 13041], [13042, 13047], [13048, 13053], [13054, 13056], [13057, 13063], [13064, 13065], [13065, 13070], [13071, 13077], [13077, 13078], [13078, 13079]]}) 
answer: set([u'to', u'malaysium', u'it', u'home'])
candidate Sentence: (0.14312691986560822, {u'tokens': [u'In', u'addition', u',', u'Kuala', u'Lumpur', u'is', u'home', u'to', u'the', u'tallest', u'twin', u'buildings', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'lemmas': [u'in', u'addition', u',', u'Kuala', u'Lumpur', u'be', u'home', u'to', u'the', u'tallest', u'twin', u'building', u'in', u'the', u'world', u',', u'the', u'Petronas', u'Twin', u'Towers', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNP', u'VBZ', u'NN', u'TO', u'DT', u'JJS', u'JJ', u'NNS', u'IN', u'DT', u'NN', u',', u'DT', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[1717, 1719], [1720, 1728], [1728, 1729], [1730, 1735], [1736, 1742], [1743, 1745], [1746, 1750], [1751, 1753], [1754, 1757], [1758, 1765], [1766, 1770], [1771, 1780], [1781, 1783], [1784, 1787], [1788, 1793], [1793, 1794], [1795, 1798], [1799, 1807], [1808, 1812], [1813, 1819], [1819, 1820]]}) 
answer: set([u'of', u'parliament', u'malaysium', u'it'])
candidate Sentence: (0.123653843998909, {u'tokens': [u'The', u'city', u'was', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branches', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'moved', u'to', u'Putrajaya', u'starting', u'in', u'1999', u'.'], u'lemmas': [u'the', u'city', u'be', u'once', u'home', u'to', u'the', u'executive', u'and', u'judicial', u'branch', u'of', u'the', u'federal', u'government', u',', u'but', u'they', u'have', u'since', u'move', u'to', u'Putrajaya', u'start', u'in', u'1999', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'RB', u'NN', u'TO', u'DT', u'NN', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'PRP', u'VBP', u'IN', u'VBN', u'TO', u'NNP', u'VBG', u'IN', u'CD', u'.'], u'char_offsets': [[645, 648], [649, 653], [654, 657], [658, 662], [663, 667], [668, 670], [671, 674], [675, 684], [685, 688], [689, 697], [698, 706], [707, 709], [710, 713], [714, 721], [722, 732], [732, 733], [734, 737], [738, 742], [743, 747], [748, 753], [754, 759], [760, 762], [763, 772], [773, 781], [782, 784], [785, 789], [789, 790]]}) 
answer: set([u'parliament', u'malaysium', u'it'])

is it home to the parliament of malaysia?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde7e8>.answer
_____________________________ test_yesno[param192] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde830>, <src.tfidf.TF_IDF object at 0x7fbca451b1d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde830>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.28565219044685364, {u'tokens': [u'They', u'are', u'invertebrates', u',', u'with', u'a', u'hard', u'protective', u'exoskeleton', u'.'], u'lemmas': [u'they', u'be', u'invertebrate', u',', u'with', u'a', u'hard', u'protective', u'exoskeleton', u'.'], u'pos': [u'PRP', u'VBP', u'NNS', u',', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[976, 980], [981, 984], [985, 998], [998, 999], [1000, 1004], [1005, 1006], [1007, 1011], [1012, 1022], [1023, 1034], [1034, 1035]]}) 
answer: set([u'lobster'])
candidate Sentence: (0.17940044403076172, {u'tokens': [u'These', u'findings', u'have', u'been', u'replicated', u'for', u'other', u'invertebrate', u'species', u',', u'but', u'similar', u'data', u'is', u'not', u'yet', u'available', u'for', u'lobsters', u'.'], u'lemmas': [u'these', u'finding', u'have', u'be', u'replicate', u'for', u'other', u'invertebrate', u'species', u',', u'but', u'similar', u'datum', u'be', u'not', u'yet', u'available', u'for', u'lobster', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'VBN', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u',', u'CC', u'JJ', u'NNS', u'VBZ', u'RB', u'RB', u'JJ', u'IN', u'NNS', u'.'], u'char_offsets': [[10930, 10935], [10936, 10944], [10945, 10949], [10950, 10954], [10955, 10965], [10966, 10969], [10970, 10975], [10976, 10988], [10989, 10996], [10996, 10997], [10999, 11002], [11003, 11010], [11011, 11015], [11016, 11018], [11019, 11022], [11023, 11026], [11027, 11036], [11037, 11040], [11041, 11049], [11049, 11050]]}) 
answer: set([])
candidate Sentence: (0.11384820938110352, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'VB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12601, 12603], [12604, 12607], [12608, 12611], [12612, 12619], [12620, 12627], [12628, 12633], [12634, 12637], [12638, 12640], [12641, 12645], [12647, 12651], [12651, 12652], [12653, 12654], [12654, 12658], [12659, 12662], [12662, 12663], [12664, 12668], [12669, 12672], [12672, 12673], [12674, 12678], [12679, 12682], [12682, 12683], [12684, 12688], [12689, 12692], [12692, 12693], [12694, 12698], [12699, 12702], [12703, 12707], [12708, 12711], [12712, 12717], [12717, 12718], [12718, 12719]]}) 
answer: set([u'invertebrate'])
candidate Sentence: (0.013491393066942692, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[245, 251], [252, 259], [260, 266], [267, 269], [270, 281], [282, 285], [286, 291], [292, 294], [295, 296], [296, 304], [304, 305], [305, 306], [307, 310], [311, 317], [318, 326], [327, 330], [331, 335], [336, 341], [342, 352], [353, 357], [358, 361], [362, 366], [366, 367]]}) 
answer: set([u'invertebrate'])
candidate Sentence: (0.013387018814682961, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1986, 1994], [1995, 2002], [2003, 2007], [2008, 2011], [2012, 2016], [2017, 2022], [2023, 2025], [2026, 2033], [2034, 2042], [2042, 2043], [2044, 2048], [2049, 2051], [2052, 2059], [2060, 2068], [2069, 2072], [2073, 2078], [2079, 2083], [2084, 2088], [2089, 2094], [2095, 2102], [2102, 2103]]}) 
answer: set([u'invertebrate'])

Are lobsters invertebrates?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde830>.answer
_____________________________ test_yesno[param193] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde878>, <src.tfidf.TF_IDF object at 0x7fbca451b1d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde878>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.28565219044685364, {u'tokens': [u'They', u'are', u'invertebrates', u',', u'with', u'a', u'hard', u'protective', u'exoskeleton', u'.'], u'lemmas': [u'they', u'be', u'invertebrate', u',', u'with', u'a', u'hard', u'protective', u'exoskeleton', u'.'], u'pos': [u'PRP', u'VBP', u'NNS', u',', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[976, 980], [981, 984], [985, 998], [998, 999], [1000, 1004], [1005, 1006], [1007, 1011], [1012, 1022], [1023, 1034], [1034, 1035]]}) 
answer: set([u'lobster'])
candidate Sentence: (0.17940044403076172, {u'tokens': [u'These', u'findings', u'have', u'been', u'replicated', u'for', u'other', u'invertebrate', u'species', u',', u'but', u'similar', u'data', u'is', u'not', u'yet', u'available', u'for', u'lobsters', u'.'], u'lemmas': [u'these', u'finding', u'have', u'be', u'replicate', u'for', u'other', u'invertebrate', u'species', u',', u'but', u'similar', u'datum', u'be', u'not', u'yet', u'available', u'for', u'lobster', u'.'], u'pos': [u'DT', u'NNS', u'VBP', u'VBN', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u',', u'CC', u'JJ', u'NNS', u'VBZ', u'RB', u'RB', u'JJ', u'IN', u'NNS', u'.'], u'char_offsets': [[10930, 10935], [10936, 10944], [10945, 10949], [10950, 10954], [10955, 10965], [10966, 10969], [10970, 10975], [10976, 10988], [10989, 10996], [10996, 10997], [10999, 11002], [11003, 11010], [11011, 11015], [11016, 11018], [11019, 11022], [11023, 11026], [11027, 11036], [11037, 11040], [11041, 11049], [11049, 11050]]}) 
answer: set([])
candidate Sentence: (0.11384820938110352, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'VB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12601, 12603], [12604, 12607], [12608, 12611], [12612, 12619], [12620, 12627], [12628, 12633], [12634, 12637], [12638, 12640], [12641, 12645], [12647, 12651], [12651, 12652], [12653, 12654], [12654, 12658], [12659, 12662], [12662, 12663], [12664, 12668], [12669, 12672], [12672, 12673], [12674, 12678], [12679, 12682], [12682, 12683], [12684, 12688], [12689, 12692], [12692, 12693], [12694, 12698], [12699, 12702], [12703, 12707], [12708, 12711], [12712, 12717], [12717, 12718], [12718, 12719]]}) 
answer: set([u'invertebrate'])
candidate Sentence: (0.013491393066942692, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[245, 251], [252, 259], [260, 266], [267, 269], [270, 281], [282, 285], [286, 291], [292, 294], [295, 296], [296, 304], [304, 305], [305, 306], [307, 310], [311, 317], [318, 326], [327, 330], [331, 335], [336, 341], [342, 352], [353, 357], [358, 361], [362, 366], [366, 367]]}) 
answer: set([u'invertebrate'])
candidate Sentence: (0.013387018814682961, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1986, 1994], [1995, 2002], [2003, 2007], [2008, 2011], [2012, 2016], [2017, 2022], [2023, 2025], [2026, 2033], [2034, 2042], [2042, 2043], [2044, 2048], [2049, 2051], [2052, 2059], [2060, 2068], [2069, 2072], [2073, 2078], [2079, 2083], [2084, 2088], [2089, 2094], [2095, 2102], [2102, 2103]]}) 
answer: set([u'invertebrate'])

Are lobsters invertebrates?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cde878>.answer
_____________________________ test_yesno[param194] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde8c0>, <src.tfidf.TF_IDF object at 0x7fbca451b1d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cde8c0>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39999109506607056, {u'tokens': [u'As', u'with', u'all', u'shellfish', u',', u'lobster', u'is', u'not', u'kosher', u'.'], u'lemmas': [u'as', u'with', u'all', u'shellfish', u',', u'lobster', u'be', u'not', u'kosher', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NN', u',', u'NN', u'VBZ', u'RB', u'NN', u'.'], u'char_offsets': [[5565, 5567], [5568, 5572], [5573, 5576], [5577, 5586], [5586, 5587], [5588, 5595], [5596, 5598], [5599, 5602], [5603, 5609], [5609, 5610]]}) 
answer: set([])
candidate Sentence: (0.10597202181816101, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'VB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12601, 12603], [12604, 12607], [12608, 12611], [12612, 12619], [12620, 12627], [12628, 12633], [12634, 12637], [12638, 12640], [12641, 12645], [12647, 12651], [12651, 12652], [12653, 12654], [12654, 12658], [12659, 12662], [12662, 12663], [12664, 12668], [12669, 12672], [12672, 12673], [12674, 12678], [12679, 12682], [12682, 12683], [12684, 12688], [12689, 12692], [12692, 12693], [12694, 12698], [12699, 12702], [12703, 12707], [12708, 12711], [12712, 12717], [12717, 12718], [12718, 12719]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012558037415146828, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[245, 251], [252, 259], [260, 266], [267, 269], [270, 281], [282, 285], [286, 291], [292, 294], [295, 296], [296, 304], [304, 305], [305, 306], [307, 310], [311, 317], [318, 326], [327, 330], [331, 335], [336, 341], [342, 352], [353, 357], [358, 361], [362, 366], [366, 367]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.01246088370680809, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1986, 1994], [1995, 2002], [2003, 2007], [2008, 2011], [2012, 2016], [2017, 2022], [2023, 2025], [2026, 2033], [2034, 2042], [2042, 2043], [2044, 2048], [2049, 2051], [2052, 2059], [2060, 2068], [2069, 2072], [2073, 2078], [2079, 2083], [2084, 2088], [2089, 2094], [2095, 2102], [2102, 2103]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012003684416413307, {u'tokens': [u'Lobsters', u'are', u'found', u'in', u'all', u'oceans', u'.'], u'lemmas': [u'lobster', u'be', u'find', u'in', u'all', u'ocean', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[767, 775], [776, 779], [780, 785], [786, 788], [789, 792], [793, 799], [799, 800]]}) 
answer: set([u'kosher'])

Are lobsters kosher?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cde8c0>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param195] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cde908>, <src.tfidf.TF_IDF object at 0x7fbca451b1d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cde908>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.39999109506607056, {u'tokens': [u'As', u'with', u'all', u'shellfish', u',', u'lobster', u'is', u'not', u'kosher', u'.'], u'lemmas': [u'as', u'with', u'all', u'shellfish', u',', u'lobster', u'be', u'not', u'kosher', u'.'], u'pos': [u'IN', u'IN', u'DT', u'NN', u',', u'NN', u'VBZ', u'RB', u'NN', u'.'], u'char_offsets': [[5565, 5567], [5568, 5572], [5573, 5576], [5577, 5586], [5586, 5587], [5588, 5595], [5596, 5598], [5599, 5602], [5603, 5609], [5609, 5610]]}) 
answer: set([])
candidate Sentence: (0.10597202181816101, {u'tokens': [u'It', u'and', u'the', u'related', u'lobster', u'poems', u'can', u'be', u'read', u'here', u':', u'``', u'Will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'lemmas': [u'it', u'and', u'the', u'related', u'lobster', u'poem', u'can', u'be', u'read', u'here', u':', u'``', u'will', u'you', u',', u'wont', u'you', u',', u'will', u'you', u',', u'wont', u'you', u',', u'wont', u'you', u'join', u'the', u'dance', u'?', u"''"], u'pos': [u'PRP', u'CC', u'DT', u'JJ', u'NN', u'NNS', u'MD', u'VB', u'VBN', u'RB', u':', u'``', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'MD', u'PRP', u',', u'VB', u'PRP', u',', u'VB', u'PRP', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[12601, 12603], [12604, 12607], [12608, 12611], [12612, 12619], [12620, 12627], [12628, 12633], [12634, 12637], [12638, 12640], [12641, 12645], [12647, 12651], [12651, 12652], [12653, 12654], [12654, 12658], [12659, 12662], [12662, 12663], [12664, 12668], [12669, 12672], [12672, 12673], [12674, 12678], [12679, 12682], [12682, 12683], [12684, 12688], [12689, 12692], [12692, 12693], [12694, 12698], [12699, 12702], [12703, 12707], [12708, 12711], [12712, 12717], [12717, 12718], [12718, 12719]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012558037415146828, {u'tokens': [u'Though', u'several', u'groups', u'of', u'crustaceans', u'are', u'known', u'as', u'``', u'lobsters', u',', u"''", u'the', u'clawed', u'lobsters', u'are', u'most', u'often', u'associated', u'with', u'the', u'name', u'.'], u'lemmas': [u'though', u'several', u'group', u'of', u'crustacean', u'be', u'know', u'as', u'``', u'lobster', u',', u"''", u'the', u'clawed', u'lobster', u'be', u'most', u'often', u'associate', u'with', u'the', u'name', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'VBP', u'VBN', u'IN', u'``', u'NNS', u',', u"''", u'DT', u'JJ', u'NNS', u'VBP', u'RBS', u'RB', u'VBN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[245, 251], [252, 259], [260, 266], [267, 269], [270, 281], [282, 285], [286, 291], [292, 294], [295, 296], [296, 304], [304, 305], [305, 306], [307, 310], [311, 317], [318, 326], [327, 330], [331, 335], [336, 341], [342, 352], [353, 357], [358, 361], [362, 366], [366, 367]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.01246088370680809, {u'tokens': [u'Although', u'lobster', u'skin', u'has', u'been', u'found', u'in', u'lobster', u'stomachs', u',', u'this', u'is', u'because', u'lobsters', u'eat', u'their', u'shed', u'skin', u'after', u'molting', u'.'], u'lemmas': [u'although', u'lobster', u'skin', u'have', u'be', u'find', u'in', u'lobster', u'stomach', u',', u'this', u'be', u'because', u'lobster', u'eat', u'they', u'shed', u'skin', u'after', u'molt', u'.'], u'pos': [u'IN', u'NN', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'NN', u'NNS', u',', u'DT', u'VBZ', u'IN', u'NNS', u'VBP', u'PRP$', u'NN', u'NN', u'IN', u'VBG', u'.'], u'char_offsets': [[1986, 1994], [1995, 2002], [2003, 2007], [2008, 2011], [2012, 2016], [2017, 2022], [2023, 2025], [2026, 2033], [2034, 2042], [2042, 2043], [2044, 2048], [2049, 2051], [2052, 2059], [2060, 2068], [2069, 2072], [2073, 2078], [2079, 2083], [2084, 2088], [2089, 2094], [2095, 2102], [2102, 2103]]}) 
answer: set([u'kosher'])
candidate Sentence: (0.012003684416413307, {u'tokens': [u'Lobsters', u'are', u'found', u'in', u'all', u'oceans', u'.'], u'lemmas': [u'lobster', u'be', u'find', u'in', u'all', u'ocean', u'.'], u'pos': [u'NNS', u'VBP', u'VBN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[767, 775], [776, 779], [780, 785], [786, 788], [789, 792], [793, 799], [799, 800]]}) 
answer: set([u'kosher'])

Are lobsters kosher?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cde908>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param202] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cdeb00>, <src.tfidf.TF_IDF object at 0x7fbca1524050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cdeb00>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.52339106798171997, {u'tokens': [u'One', u'of', u'these', u'is', u'that', u'it', u'came', u'from', u'Sumatra', u'island', u'.'], u'lemmas': [u'one', u'of', u'these', u'be', u'that', u'it', u'come', u'from', u'Sumatra', u'island', u'.'], u'pos': [u'CD', u'IN', u'DT', u'VBZ', u'IN', u'PRP', u'VBD', u'IN', u'NNP', u'NN', u'.'], u'char_offsets': [[1928, 1931], [1932, 1934], [1935, 1940], [1941, 1943], [1944, 1948], [1949, 1951], [1952, 1956], [1957, 1961], [1962, 1969], [1970, 1976], [1976, 1977]]}) 
answer: set([u'originate', u'malay', u'have'])
candidate Sentence: (0.239726722240448, {u'tokens': [u'-LSB-', u'1', u'-RSB-', u'There', u'are', u'many', u'hypotheses', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originated', u'.'], u'lemmas': [u'-lsb-', u'1', u'-rsb-', u'there', u'be', u'many', u'hypothesis', u'as', u'to', u'where', u'the', u'Malay', u'language', u'originate', u'.'], u'pos': [u'-LRB-', u'CD', u'-RRB-', u'EX', u'VBP', u'JJ', u'NNS', u'IN', u'TO', u'WRB', u'DT', u'NNP', u'NN', u'VBD', u'.'], u'char_offsets': [[1852, 1853], [1853, 1854], [1854, 1855], [1859, 1864], [1865, 1868], [1869, 1873], [1874, 1884], [1885, 1887], [1888, 1890], [1891, 1896], [1897, 1900], [1901, 1906], [1907, 1915], [1916, 1926], [1926, 1927]]}) 
answer: set([u'island', u'sumatra', u'from', u'have'])
candidate Sentence: (0.16804401576519012, {u'tokens': [u'The', u'oldest', u'written', u'documents', u'in', u'Malay', u',', u'dated', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'AD', u',', u'were', u'found', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'lemmas': [u'the', u'oldest', u'write', u'document', u'in', u'Malay', u',', u'date', u'from', u'the', u'end', u'of', u'the', u'7th', u'century', u'ad', u',', u'be', u'find', u'on', u'Bangka', u'Island', u',', u'off', u'the', u'southeastern', u'coast', u'of', u'Sumatra', u'and', u'in', u'Palembang', u'in', u'southern', u'Sumatra', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NNS', u'IN', u'NNP', u',', u'VBN', u'IN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NNP', u'CC', u'IN', u'NNP', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[1978, 1981], [1982, 1988], [1989, 1996], [1997, 2006], [2007, 2009], [2010, 2015], [2015, 2016], [2017, 2022], [2023, 2027], [2028, 2031], [2032, 2035], [2036, 2038], [2039, 2042], [2043, 2046], [2047, 2054], [2055, 2057], [2057, 2058], [2059, 2063], [2064, 2069], [2070, 2072], [2073, 2079], [2080, 2086], [2086, 2087], [2088, 2091], [2092, 2095], [2096, 2108], [2109, 2114], [2115, 2117], [2118, 2125], [2126, 2129], [2130, 2132], [2133, 2142], [2143, 2145], [2146, 2154], [2155, 2162], [2162, 2163]]}) 
answer: set([u'originate', u'have'])
candidate Sentence: (0.11048847436904907, {u'tokens': [u'In', u'several', u'parts', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'is', u'spoken', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'lemmas': [u'in', u'several', u'part', u'of', u'Indonesia', u',', u'in', u'Sumatra', u'and', u'Borneo', u'Islands', u',', u'Malay', u'be', u'speak', u'as', u'local', u'dialect', u'of', u'ethnic', u'Malays', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u'IN', u'NNP', u',', u'IN', u'NNP', u'CC', u'NNP', u'NNPS', u',', u'NNP', u'VBZ', u'VBN', u'IN', u'JJ', u'NN', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[3134, 3136], [3137, 3144], [3145, 3150], [3151, 3153], [3154, 3163], [3163, 3164], [3165, 3167], [3168, 3175], [3176, 3179], [3180, 3186], [3187, 3194], [3194, 3195], [3196, 3201], [3202, 3204], [3205, 3211], [3212, 3214], [3215, 3220], [3221, 3228], [3229, 3231], [3232, 3238], [3239, 3245], [3245, 3246]]}) 
answer: set([u'island', u'originate', u'from', u'have'])
candidate Sentence: (0.09975510835647583, {u'tokens': [u'Many', u'roots', u'have', u'come', u'virtually', u'unchanged', u'from', u'their', u'common', u'Austronesian', u'ancestor', u'.'], u'lemmas': [u'many', u'root', u'have', u'come', u'virtually', u'unchanged', u'from', u'they', u'common', u'austronesian', u'ancestor', u'.'], u'pos': [u'JJ', u'NNS', u'VBP', u'VBN', u'RB', u'JJ', u'IN', u'PRP$', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[6793, 6797], [6798, 6803], [6804, 6808], [6809, 6813], [6814, 6823], [6824, 6833], [6834, 6838], [6839, 6844], [6845, 6851], [6852, 6864], [6865, 6873], [6873, 6874]]}) 
answer: set([u'island', u'sumatra', u'originate', u'malay'])

Could Malay have originated from Sumatra island?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cdeb00>.answer
_____________________________ test_yesno[param208] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cdecb0>, <src.tfidf.TF_IDF object at 0x7fbca5b43a50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cdecb0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.76078307628631592, {u'tokens': [u'is', u'the', u'capital', u'and', u'most', u'populous', u'city', u'in', u'the', u'state', u'of', u'Victoria', u',', u'and', u'also', u'the', u'second', u'most', u'populous', u'city', u'in', u'Australia', u'.'], u'lemmas': [u'be', u'the', u'capital', u'and', u'most', u'populous', u'city', u'in', u'the', u'state', u'of', u'Victoria', u',', u'and', u'also', u'the', u'second', u'most', u'populous', u'city', u'in', u'Australia', u'.'], u'pos': [u'VBZ', u'DT', u'NN', u'CC', u'RBS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'CC', u'RB', u'DT', u'JJ', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[323, 325], [326, 329], [330, 337], [338, 341], [342, 346], [347, 355], [356, 360], [361, 363], [364, 367], [368, 373], [374, 376], [377, 385], [385, 386], [387, 390], [391, 395], [396, 399], [400, 406], [407, 411], [412, 420], [421, 425], [426, 428], [429, 438], [438, 439]]}) 
answer: set([u'melbourne'])
candidate Sentence: (0.33071336150169373, {u'tokens': [u'Most', u'Liveable', u'and', u'Best', u'Connected', u'?'], u'lemmas': [u'most', u'liveable', u'and', u'best', u'connect', u'?'], u'pos': [u'JJS', u'JJ', u'CC', u'JJS', u'VBN', u'.'], u'char_offsets': [[54658, 54662], [54663, 54671], [54672, 54675], [54676, 54680], [54681, 54690], [54690, 54691]]}) 
answer: set([u'city', u'of', u'in', u'victoria', u'melbourne', u'state', u'capital', u'populous', u'the'])
candidate Sentence: (0.28265535831451416, {u'tokens': [u'Thereafter', u',', u'growth', u'was', u'exponential', u'and', u'by', u'1865', u',', u'Melbourne', u'had', u'overtaken', u'Sydney', u'as', u'Australia', u"'s", u'most', u'populous', u'city', u'.'], u'lemmas': [u'thereafter', u',', u'growth', u'be', u'exponential', u'and', u'by', u'1865', u',', u'Melbourne', u'have', u'overtake', u'Sydney', u'as', u'Australia', u"'s", u'most', u'populous', u'city', u'.'], u'pos': [u'RB', u',', u'NN', u'VBD', u'JJ', u'CC', u'IN', u'CD', u',', u'NNP', u'VBD', u'VBN', u'NNP', u'IN', u'NNP', u'POS', u'RBS', u'JJ', u'NN', u'.'], u'char_offsets': [[37215, 37225], [37225, 37226], [37227, 37233], [37234, 37237], [37238, 37249], [37250, 37253], [37254, 37256], [37257, 37261], [37261, 37262], [37263, 37272], [37273, 37276], [37277, 37286], [37287, 37293], [37294, 37296], [37297, 37306], [37306, 37308], [37309, 37313], [37314, 37322], [37323, 37327], [37327, 37328]]}) 
answer: set([u'of', u'in', u'victoria', u'state', u'capital', u'the'])
candidate Sentence: (0.21320232748985291, {u'tokens': [u'Melbourne', u'is', u'colder', u'than', u'other', u'mainland', u'Australian', u'state', u'capital', u'cities', u'in', u'the', u'winter', u'.'], u'lemmas': [u'Melbourne', u'be', u'colder', u'than', u'other', u'mainland', u'australian', u'state', u'capital', u'city', u'in', u'the', u'winter', u'.'], u'pos': [u'NNP', u'VBZ', u'JJR', u'IN', u'JJ', u'JJ', u'JJ', u'NN', u'NN', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18935, 18944], [18945, 18947], [18948, 18954], [18955, 18959], [18960, 18965], [18966, 18974], [18975, 18985], [18986, 18991], [18992, 18999], [19000, 19006], [19007, 19009], [19010, 19013], [19014, 19020], [19020, 19021]]}) 
answer: set([u'and', u'of', u'most', u'populous', u'victoria'])
candidate Sentence: (0.20474810898303986, {u'tokens': [u'Melbourne', u'is', u'often', u'referred', u'to', u'as', u'Australia', u"'s", u'garden', u'city', u',', u'and', u'the', u'state', u'of', u'Victoria', u'was', u'once', u'known', u'as', u'the', u'garden', u'state', u'.'], u'lemmas': [u'Melbourne', u'be', u'often', u'refer', u'to', u'as', u'Australia', u"'s", u'garden', u'city', u',', u'and', u'the', u'state', u'of', u'Victoria', u'be', u'once', u'know', u'as', u'the', u'garden', u'state', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VBN', u'TO', u'IN', u'NNP', u'POS', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NNP', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[21991, 22000], [22001, 22003], [22004, 22009], [22010, 22018], [22019, 22021], [22022, 22024], [22025, 22034], [22034, 22036], [22037, 22043], [22044, 22048], [22048, 22049], [22050, 22053], [22054, 22057], [22058, 22063], [22064, 22066], [22067, 22075], [22076, 22079], [22080, 22084], [22085, 22090], [22091, 22093], [22094, 22097], [22098, 22104], [22105, 22110], [22110, 22111]]}) 
answer: set([u'most', u'capital', u'in', u'populous'])

Is Melbourne the capital and most populous city in the state of Victoria?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cdecb0>.answer
_____________________________ test_yesno[param209] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cdecf8>, <src.tfidf.TF_IDF object at 0x7fbca5b43a50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cdecf8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.76078307628631592, {u'tokens': [u'is', u'the', u'capital', u'and', u'most', u'populous', u'city', u'in', u'the', u'state', u'of', u'Victoria', u',', u'and', u'also', u'the', u'second', u'most', u'populous', u'city', u'in', u'Australia', u'.'], u'lemmas': [u'be', u'the', u'capital', u'and', u'most', u'populous', u'city', u'in', u'the', u'state', u'of', u'Victoria', u',', u'and', u'also', u'the', u'second', u'most', u'populous', u'city', u'in', u'Australia', u'.'], u'pos': [u'VBZ', u'DT', u'NN', u'CC', u'RBS', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNP', u',', u'CC', u'RB', u'DT', u'JJ', u'RBS', u'JJ', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[323, 325], [326, 329], [330, 337], [338, 341], [342, 346], [347, 355], [356, 360], [361, 363], [364, 367], [368, 373], [374, 376], [377, 385], [385, 386], [387, 390], [391, 395], [396, 399], [400, 406], [407, 411], [412, 420], [421, 425], [426, 428], [429, 438], [438, 439]]}) 
answer: set([u'melbourne'])
candidate Sentence: (0.33071336150169373, {u'tokens': [u'Most', u'Liveable', u'and', u'Best', u'Connected', u'?'], u'lemmas': [u'most', u'liveable', u'and', u'best', u'connect', u'?'], u'pos': [u'JJS', u'JJ', u'CC', u'JJS', u'VBN', u'.'], u'char_offsets': [[54658, 54662], [54663, 54671], [54672, 54675], [54676, 54680], [54681, 54690], [54690, 54691]]}) 
answer: set([u'city', u'of', u'in', u'victoria', u'melbourne', u'state', u'capital', u'populous', u'the'])
candidate Sentence: (0.28265535831451416, {u'tokens': [u'Thereafter', u',', u'growth', u'was', u'exponential', u'and', u'by', u'1865', u',', u'Melbourne', u'had', u'overtaken', u'Sydney', u'as', u'Australia', u"'s", u'most', u'populous', u'city', u'.'], u'lemmas': [u'thereafter', u',', u'growth', u'be', u'exponential', u'and', u'by', u'1865', u',', u'Melbourne', u'have', u'overtake', u'Sydney', u'as', u'Australia', u"'s", u'most', u'populous', u'city', u'.'], u'pos': [u'RB', u',', u'NN', u'VBD', u'JJ', u'CC', u'IN', u'CD', u',', u'NNP', u'VBD', u'VBN', u'NNP', u'IN', u'NNP', u'POS', u'RBS', u'JJ', u'NN', u'.'], u'char_offsets': [[37215, 37225], [37225, 37226], [37227, 37233], [37234, 37237], [37238, 37249], [37250, 37253], [37254, 37256], [37257, 37261], [37261, 37262], [37263, 37272], [37273, 37276], [37277, 37286], [37287, 37293], [37294, 37296], [37297, 37306], [37306, 37308], [37309, 37313], [37314, 37322], [37323, 37327], [37327, 37328]]}) 
answer: set([u'of', u'in', u'victoria', u'state', u'capital', u'the'])
candidate Sentence: (0.21320232748985291, {u'tokens': [u'Melbourne', u'is', u'colder', u'than', u'other', u'mainland', u'Australian', u'state', u'capital', u'cities', u'in', u'the', u'winter', u'.'], u'lemmas': [u'Melbourne', u'be', u'colder', u'than', u'other', u'mainland', u'australian', u'state', u'capital', u'city', u'in', u'the', u'winter', u'.'], u'pos': [u'NNP', u'VBZ', u'JJR', u'IN', u'JJ', u'JJ', u'JJ', u'NN', u'NN', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18935, 18944], [18945, 18947], [18948, 18954], [18955, 18959], [18960, 18965], [18966, 18974], [18975, 18985], [18986, 18991], [18992, 18999], [19000, 19006], [19007, 19009], [19010, 19013], [19014, 19020], [19020, 19021]]}) 
answer: set([u'and', u'of', u'most', u'populous', u'victoria'])
candidate Sentence: (0.20474810898303986, {u'tokens': [u'Melbourne', u'is', u'often', u'referred', u'to', u'as', u'Australia', u"'s", u'garden', u'city', u',', u'and', u'the', u'state', u'of', u'Victoria', u'was', u'once', u'known', u'as', u'the', u'garden', u'state', u'.'], u'lemmas': [u'Melbourne', u'be', u'often', u'refer', u'to', u'as', u'Australia', u"'s", u'garden', u'city', u',', u'and', u'the', u'state', u'of', u'Victoria', u'be', u'once', u'know', u'as', u'the', u'garden', u'state', u'.'], u'pos': [u'NNP', u'VBZ', u'RB', u'VBN', u'TO', u'IN', u'NNP', u'POS', u'NN', u'NN', u',', u'CC', u'DT', u'NN', u'IN', u'NNP', u'VBD', u'RB', u'VBN', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[21991, 22000], [22001, 22003], [22004, 22009], [22010, 22018], [22019, 22021], [22022, 22024], [22025, 22034], [22034, 22036], [22037, 22043], [22044, 22048], [22048, 22049], [22050, 22053], [22054, 22057], [22058, 22063], [22064, 22066], [22067, 22075], [22076, 22079], [22080, 22084], [22085, 22090], [22091, 22093], [22094, 22097], [22098, 22104], [22105, 22110], [22110, 22111]]}) 
answer: set([u'most', u'capital', u'in', u'populous'])

Is Melbourne the capital and most populous city in the state of Victoria?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0cdecf8>.answer
_____________________________ test_yesno[param218] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cdef80>, <src.tfidf.TF_IDF object at 0x7fbca6873b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Faraday also discovered the laws of  electrolysis.')
E                +    where 'Yes, Faraday also discovered the laws of  electrolysis.' = <src.question_processing.Question_parser instance at 0x7fbca0cdef80>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45564460754394531, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[405, 407], [408, 418], [419, 434], [435, 444], [444, 445], [446, 458], [458, 459], [460, 463], [464, 468], [469, 471], [472, 484], [484, 485]]}) 
answer: set([u'faraday', u'the', u'also'])
candidate Sentence: (0.28903138637542725, {u'tokens': [u'Faraday', u'also', u'discovered', u'the', u'laws', u'of', u'electrolysis', u'and', u'popularised', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'terms', u'largely', u'created', u'by', u'William', u'Whewell', u'.'], u'lemmas': [u'Faraday', u'also', u'discover', u'the', u'law', u'of', u'electrolysis', u'and', u'popularise', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'term', u'largely', u'create', u'by', u'William', u'Whewell', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'NNS', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[9614, 9621], [9622, 9626], [9627, 9637], [9638, 9641], [9642, 9646], [9647, 9649], [9650, 9662], [9663, 9666], [9667, 9678], [9679, 9690], [9691, 9695], [9696, 9698], [9699, 9704], [9704, 9705], [9706, 9713], [9713, 9714], [9715, 9724], [9724, 9725], [9726, 9729], [9730, 9733], [9733, 9734], [9735, 9740], [9741, 9748], [9749, 9756], [9757, 9759], [9760, 9767], [9768, 9775], [9775, 9776]]}) 
answer: set([])
candidate Sentence: (0.2695445716381073, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[25061, 25062], [25063, 25072], [25073, 25076], [25077, 25086], [25086, 25087], [25088, 25089], [25089, 25101], [25101, 25102]]}) 
answer: set([u'electrolysis', u'of', u'discover', u'also', u'faraday', u'law'])
candidate Sentence: (0.12318010628223419, {u'tokens': [u'Faraday', u'also', u'determined', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'had', u'been', u'discovered', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'lemmas': [u'Faraday', u'also', u'determine', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'have', u'be', u'discover', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'JJ', u'NN', u',', u'WDT', u'VBD', u'VBN', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[9487, 9494], [9495, 9499], [9500, 9510], [9511, 9514], [9515, 9526], [9527, 9529], [9530, 9533], [9534, 9542], [9543, 9552], [9553, 9560], [9560, 9561], [9562, 9567], [9568, 9571], [9572, 9576], [9577, 9587], [9588, 9590], [9591, 9598], [9599, 9603], [9604, 9606], [9607, 9611], [9611, 9612]]}) 
answer: set([u'law', u'electrolysis'])
candidate Sentence: (0.1193101704120636, {u'tokens': [u'Faraday', u'used', u'``', u'static', u"''", u',', u'batteries', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomena', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'lemmas': [u'Faraday', u'use', u'``', u'static', u"''", u',', u'battery', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomenon', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'pos': [u'NNP', u'VBD', u'``', u'JJ', u"''", u',', u'NNS', u',', u'CC', u'``', u'JJ', u'NN', u"''", u'TO', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u',', u'NN', u',', u'FW', u'.'], u'char_offsets': [[14725, 14732], [14733, 14737], [14738, 14739], [14739, 14745], [14745, 14746], [14746, 14747], [14749, 14758], [14758, 14759], [14760, 14763], [14764, 14765], [14765, 14771], [14772, 14783], [14783, 14784], [14785, 14787], [14788, 14795], [14796, 14799], [14800, 14809], [14810, 14812], [14813, 14826], [14827, 14837], [14837, 14838], [14839, 14851], [14851, 14852], [14853, 14862], [14862, 14863], [14864, 14867], [14867, 14868]]}) 
answer: set([u'also', u'law', u'discover'])

Did Faraday also discover the laws of electrolysis?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Faraday also discovered the laws of  electrolysis.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 600 documents, 1432061 characters, 267679 tokens, 2386.8 char/doc, 446.1 tok/doc RATES: 18.789 doc/sec, 8382.3 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Faraday also discovered the laws of  electrolysis.')
 +    where 'Yes, Faraday also discovered the laws of  electrolysis.' = <src.question_processing.Question_parser instance at 0x7fbca0cdef80>.answer
_____________________________ test_yesno[param219] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cdefc8>, <src.tfidf.TF_IDF object at 0x7fbca6873b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cdefc8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45564460754394531, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[405, 407], [408, 418], [419, 434], [435, 444], [444, 445], [446, 458], [458, 459], [460, 463], [464, 468], [469, 471], [472, 484], [484, 485]]}) 
answer: set([u'faraday', u'the', u'also'])
candidate Sentence: (0.28903138637542725, {u'tokens': [u'Faraday', u'also', u'discovered', u'the', u'laws', u'of', u'electrolysis', u'and', u'popularised', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'terms', u'largely', u'created', u'by', u'William', u'Whewell', u'.'], u'lemmas': [u'Faraday', u'also', u'discover', u'the', u'law', u'of', u'electrolysis', u'and', u'popularise', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u',', u'term', u'largely', u'create', u'by', u'William', u'Whewell', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NNS', u'IN', u'NN', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u',', u'NNS', u'RB', u'VBN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[9614, 9621], [9622, 9626], [9627, 9637], [9638, 9641], [9642, 9646], [9647, 9649], [9650, 9662], [9663, 9666], [9667, 9678], [9679, 9690], [9691, 9695], [9696, 9698], [9699, 9704], [9704, 9705], [9706, 9713], [9713, 9714], [9715, 9724], [9724, 9725], [9726, 9729], [9730, 9733], [9733, 9734], [9735, 9740], [9741, 9748], [9749, 9756], [9757, 9759], [9760, 9767], [9768, 9775], [9775, 9776]]}) 
answer: set([])
candidate Sentence: (0.2695445716381073, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[25061, 25062], [25063, 25072], [25073, 25076], [25077, 25086], [25086, 25087], [25088, 25089], [25089, 25101], [25101, 25102]]}) 
answer: set([u'electrolysis', u'of', u'discover', u'also', u'faraday', u'law'])
candidate Sentence: (0.12318010628223419, {u'tokens': [u'Faraday', u'also', u'determined', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'had', u'been', u'discovered', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'lemmas': [u'Faraday', u'also', u'determine', u'the', u'composition', u'of', u'the', u'chlorine', u'clathrate', u'hydrate', u',', u'which', u'have', u'be', u'discover', u'by', u'Humphry', u'Davy', u'in', u'1810', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'DT', u'NN', u'IN', u'DT', u'NN', u'JJ', u'NN', u',', u'WDT', u'VBD', u'VBN', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[9487, 9494], [9495, 9499], [9500, 9510], [9511, 9514], [9515, 9526], [9527, 9529], [9530, 9533], [9534, 9542], [9543, 9552], [9553, 9560], [9560, 9561], [9562, 9567], [9568, 9571], [9572, 9576], [9577, 9587], [9588, 9590], [9591, 9598], [9599, 9603], [9604, 9606], [9607, 9611], [9611, 9612]]}) 
answer: set([u'law', u'electrolysis'])
candidate Sentence: (0.1193101704120636, {u'tokens': [u'Faraday', u'used', u'``', u'static', u"''", u',', u'batteries', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomena', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'lemmas': [u'Faraday', u'use', u'``', u'static', u"''", u',', u'battery', u',', u'and', u'``', u'animal', u'electricity', u"''", u'to', u'produce', u'the', u'phenomenon', u'of', u'electrostatic', u'attraction', u',', u'electrolysis', u',', u'magnetism', u',', u'etc.', u'.'], u'pos': [u'NNP', u'VBD', u'``', u'JJ', u"''", u',', u'NNS', u',', u'CC', u'``', u'JJ', u'NN', u"''", u'TO', u'VB', u'DT', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u',', u'NN', u',', u'FW', u'.'], u'char_offsets': [[14725, 14732], [14733, 14737], [14738, 14739], [14739, 14745], [14745, 14746], [14746, 14747], [14749, 14758], [14758, 14759], [14760, 14763], [14764, 14765], [14765, 14771], [14772, 14783], [14783, 14784], [14785, 14787], [14788, 14795], [14796, 14799], [14800, 14809], [14810, 14812], [14813, 14826], [14827, 14837], [14837, 14838], [14839, 14851], [14851, 14852], [14853, 14862], [14862, 14863], [14864, 14867], [14867, 14868]]}) 
answer: set([u'also', u'law', u'discover'])

Did Faraday also discover the laws of electrolysis?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cdefc8>.answer
_____________________________ test_yesno[param221] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3098>, <src.tfidf.TF_IDF object at 0x7fbca6873b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3098>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.63802516460418701, {u'tokens': [u'Faraday', u'also', u'was', u'active', u'in', u'what', u'would', u'now', u'be', u'called', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'lemmas': [u'Faraday', u'also', u'be', u'active', u'in', u'what', u'would', u'now', u'be', u'call', u'environmental', u'science', u',', u'or', u'engineering', u'.'], u'pos': [u'NNP', u'RB', u'VBD', u'JJ', u'IN', u'WP', u'MD', u'RB', u'VB', u'VBN', u'JJ', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[19480, 19487], [19488, 19492], [19493, 19496], [19497, 19503], [19504, 19506], [19507, 19511], [19512, 19517], [19518, 19521], [19522, 19524], [19525, 19531], [19532, 19545], [19546, 19553], [19553, 19554], [19555, 19557], [19558, 19569], [19569, 19570]]}) 
answer: set([u'the', u'area', u'he'])
candidate Sentence: (0.20782473683357239, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[25061, 25062], [25063, 25072], [25073, 25076], [25077, 25086], [25086, 25087], [25088, 25089], [25089, 25101], [25101, 25102]]}) 
answer: set([u'area', u'science', u'environmental', u'call', u'in', u'active', u'now', u'he'])
candidate Sentence: (0.19537249207496643, {u'tokens': [u'Education', u'was', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'lemmas': [u'education', u'be', u'another', u'area', u'of', u'service', u'for', u'Faraday', u'.'], u'pos': [u'NN', u'VBD', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[20115, 20124], [20125, 20128], [20129, 20136], [20137, 20141], [20142, 20144], [20145, 20152], [20153, 20156], [20157, 20164], [20164, 20165]]}) 
answer: set([u'science', u'environmental', u'call', u'in', u'active', u'the', u'now', u'he'])
candidate Sentence: (0.17144936323165894, {u'tokens': [u'This', u'is', u'now', u'termed', u'the', u'Faraday', u'effect', u'.'], u'lemmas': [u'this', u'be', u'now', u'term', u'the', u'Faraday', u'effect', u'.'], u'pos': [u'DT', u'VBZ', u'RB', u'VBN', u'DT', u'NNP', u'NN', u'.'], u'char_offsets': [[16381, 16385], [16386, 16388], [16389, 16392], [16393, 16399], [16400, 16403], [16404, 16411], [16412, 16418], [16418, 16419]]}) 
answer: set([u'area', u'science', u'environmental', u'call', u'in', u'active', u'he'])
candidate Sentence: (0.14295195043087006, {u'tokens': [u'Some', u'historians', u'of', u'science', u'refer', u'to', u'him', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'lemmas': [u'some', u'historian', u'of', u'science', u'refer', u'to', u'he', u'as', u'the', u'best', u'experimentalist', u'in', u'the', u'history', u'of', u'science', u'.'], u'pos': [u'DT', u'NNS', u'IN', u'NN', u'VBP', u'TO', u'PRP', u'IN', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[1403, 1407], [1408, 1418], [1422, 1424], [1425, 1432], [1433, 1438], [1439, 1441], [1442, 1445], [1446, 1448], [1449, 1452], [1453, 1457], [1458, 1473], [1474, 1476], [1477, 1480], [1481, 1488], [1489, 1491], [1492, 1499], [1499, 1500]]}) 
answer: set([u'active', u'environmental', u'now', u'call', u'area'])

was he active in the area now called environmental science?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3098>.answer
_____________________________ test_yesno[param222] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce30e0>, <src.tfidf.TF_IDF object at 0x7fbca6873b90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce30e0>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.29605767130851746, {u'tokens': [u'*', u'Regarding', u'the', u'hereafter', u',', u'``', u'Speculations', u'?'], u'lemmas': [u'*', u'regard', u'the', u'hereafter', u',', u'``', u'speculation', u'?'], u'pos': [u'SYM', u'VBG', u'DT', u'RB', u',', u'``', u'NNS', u'.'], u'char_offsets': [[25061, 25062], [25063, 25072], [25073, 25076], [25077, 25086], [25086, 25087], [25088, 25089], [25089, 25101], [25101, 25102]]}) 
answer: set([u'benzene', u'discover', u'he'])
candidate Sentence: (0.16030484437942505, {u'tokens': [u'See', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'Being', u'Instructions', u'to', u'Students', u'in', u'Chemistry', u'-LRB-', u'1827', u'-RRB-', u'Faraday', u'worked', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discovering', u'chemical', u'substances', u'such', u'as', u'benzene', u'-LRB-', u'which', u'he', u'called', u'bicarburet', u'of', u'hydrogen', u'-RRB-', u',', u'and', u'liquefying', u'gases', u'such', u'as', u'chlorine', u'.'], u'lemmas': [u'see', u'page', u'127', u'of', u'Faraday', u"'s", u'Chemical', u'Manipulation', u',', u'be', u'instruction', u'to', u'student', u'in', u'Chemistry', u'-lrb-', u'1827', u'-rrb-', u'Faraday', u'work', u'extensively', u'in', u'the', u'field', u'of', u'chemistry', u',', u'discover', u'chemical', u'substance', u'such', u'as', u'benzene', u'-lrb-', u'which', u'he', u'call', u'bicarburet', u'of', u'hydrogen', u'-rrb-', u',', u'and', u'liquefy', u'gas', u'such', u'as', u'chlorine', u'.'], u'pos': [u'VB', u'NN', u'CD', u'IN', u'NNP', u'POS', u'NNP', u'NNP', u',', u'VBG', u'NNS', u'TO', u'NNS', u'IN', u'NNP', u'-LRB-', u'CD', u'-RRB-', u'NNP', u'VBD', u'RB', u'IN', u'DT', u'NN', u'IN', u'NN', u',', u'VBG', u'NN', u'NNS', u'JJ', u'IN', u'NN', u'-LRB-', u'WDT', u'PRP', u'VBD', u'NN', u'IN', u'NN', u'-RRB-', u',', u'CC', u'VBG', u'NNS', u'JJ', u'IN', u'NN', u'.'], u'char_offsets': [[9031, 9034], [9035, 9039], [9040, 9043], [9044, 9046], [9047, 9054], [9054, 9056], [9057, 9065], [9066, 9078], [9078, 9079], [9080, 9085], [9086, 9098], [9099, 9101], [9102, 9110], [9111, 9113], [9114, 9123], [9124, 9125], [9125, 9129], [9129, 9130], [9132, 9139], [9140, 9146], [9147, 9158], [9159, 9161], [9162, 9165], [9166, 9171], [9172, 9174], [9175, 9184], [9184, 9185], [9186, 9197], [9198, 9206], [9207, 9217], [9218, 9222], [9223, 9225], [9226, 9233], [9234, 9235], [9235, 9240], [9241, 9243], [9244, 9250], [9251, 9261], [9262, 9264], [9265, 9273], [9273, 9274], [9274, 9275], [9276, 9279], [9280, 9290], [9291, 9296], [9297, 9301], [9302, 9304], [9305, 9313], [9313, 9314]]}) 
answer: set([])
candidate Sentence: (0.15973047912120819, {u'tokens': [u'As', u'a', u'chemist', u',', u'Faraday', u'discovered', u'benzene', u',', u'investigated', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invented', u'an', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'numbers', u',', u'and', u'popularized', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'lemmas': [u'as', u'a', u'chemist', u',', u'Faraday', u'discover', u'benzene', u',', u'investigate', u'the', u'clathrate', u'hydrate', u'of', u'chlorine', u',', u'invent', u'a', u'early', u'form', u'of', u'the', u'bunsen', u'burner', u'and', u'the', u'system', u'of', u'oxidation', u'number', u',', u'and', u'popularize', u'terminology', u'such', u'as', u'anode', u',', u'cathode', u',', u'electrode', u',', u'and', u'ion', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'NNP', u'VBD', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'NN', u',', u'VBD', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'NN', u'NNS', u',', u'CC', u'VBN', u'NN', u'JJ', u'IN', u'NN', u',', u'NN', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[994, 996], [997, 998], [999, 1006], [1006, 1007], [1008, 1015], [1016, 1026], [1027, 1034], [1034, 1035], [1036, 1048], [1049, 1052], [1053, 1062], [1063, 1070], [1071, 1073], [1074, 1082], [1082, 1083], [1084, 1092], [1093, 1095], [1096, 1101], [1102, 1106], [1107, 1109], [1110, 1113], [1114, 1120], [1121, 1127], [1128, 1131], [1132, 1135], [1136, 1142], [1143, 1145], [1146, 1155], [1156, 1163], [1163, 1164], [1165, 1168], [1169, 1180], [1181, 1192], [1193, 1197], [1198, 1200], [1201, 1206], [1206, 1207], [1208, 1215], [1215, 1216], [1217, 1226], [1226, 1227], [1228, 1231], [1232, 1235], [1235, 1236]]}) 
answer: set([u'he'])
candidate Sentence: (0.11928079277276993, {u'tokens': [u'He', u'discovered', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'laws', u'of', u'electrolysis', u'.'], u'lemmas': [u'he', u'discover', u'electromagnetic', u'induction', u',', u'diamagnetism', u',', u'and', u'law', u'of', u'electrolysis', u'.'], u'pos': [u'PRP', u'VBD', u'JJ', u'NN', u',', u'NN', u',', u'CC', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[405, 407], [408, 418], [419, 434], [435, 444], [444, 445], [446, 458], [458, 459], [460, 463], [464, 468], [469, 471], [472, 484], [484, 485]]}) 
answer: set([u'benzene'])
candidate Sentence: (0.10927145928144455, {u'tokens': [u'The', u'trip', u'did', u',', u'however', u',', u'give', u'him', u'access', u'to', u'the', u'European', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulating', u'ideas', u'.'], u'lemmas': [u'the', u'trip', u'do', u',', u'however', u',', u'give', u'he', u'access', u'to', u'the', u'european', u'scientific', u'elite', u'and', u'a', u'host', u'of', u'stimulate', u'idea', u'.'], u'pos': [u'DT', u'NN', u'VBD', u',', u'RB', u',', u'VB', u'PRP', u'NN', u'TO', u'DT', u'JJ', u'JJ', u'NN', u'CC', u'DT', u'NN', u'IN', u'VBG', u'NNS', u'.'], u'char_offsets': [[5827, 5830], [5831, 5835], [5836, 5839], [5839, 5840], [5841, 5848], [5848, 5849], [5850, 5854], [5855, 5858], [5859, 5865], [5866, 5868], [5869, 5872], [5873, 5881], [5882, 5892], [5893, 5898], [5899, 5902], [5903, 5904], [5905, 5909], [5910, 5912], [5913, 5924], [5925, 5930], [5930, 5931]]}) 
answer: set([u'benzene', u'discover'])

did he discover benzene?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce30e0>.answer
_____________________________ test_yesno[param229] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce32d8>, <src.tfidf.TF_IDF object at 0x7fbca3c76f90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce32d8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.55052435398101807, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14778, 14785], [14786, 14801], [14801, 14802]]}) 
answer: set([u'kenya', u'the', u'of', u'capital'])
candidate Sentence: (0.44999948143959045, {u'tokens': [u'Nairobi', u'Nairobi', u'-LRB-', u'-RRB-', u'is', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'lemmas': [u'Nairobi', u'Nairobi', u'-lrb-', u'-rrb-', u'be', u'the', u'capital', u'and', u'largest', u'city', u'of', u'Kenya', u'.'], u'pos': [u'NNP', u'NNP', u'-LRB-', u'-RRB-', u'VBZ', u'DT', u'NN', u'CC', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 7], [11, 18], [19, 20], [21, 22], [23, 25], [26, 29], [30, 37], [38, 41], [42, 49], [50, 54], [55, 57], [58, 63], [63, 64]]}) 
answer: set([])
candidate Sentence: (0.25036641955375671, {u'tokens': [u'History', u'-', u'Nairobi', u'Nairobi', u'is', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'lemmas': [u'history', u'-', u'Nairobi', u'Nairobi', u'be', u'also', u'the', u'capital', u'of', u'the', u'Nairobi', u'Province', u'and', u'of', u'the', u'Nairobi', u'District', u'.'], u'pos': [u'NN', u':', u'NNP', u'NNP', u'VBZ', u'RB', u'DT', u'NN', u'IN', u'DT', u'NNP', u'NNP', u'CC', u'IN', u'DT', u'NNP', u'NNP', u'.'], u'char_offsets': [[689, 696], [697, 698], [699, 706], [709, 716], [717, 719], [720, 724], [725, 728], [729, 736], [737, 739], [740, 743], [744, 751], [752, 760], [761, 764], [765, 767], [768, 771], [772, 779], [780, 788], [788, 789]]}) 
answer: set([u'kenya'])
candidate Sentence: (0.19133584201335907, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[361, 368], [369, 371], [372, 376], [377, 379], [380, 381], [382, 388], [389, 393], [394, 399], [400, 402], [403, 406], [407, 414], [415, 422], [423, 430], [431, 433], [434, 440], [440, 441], [442, 445], [446, 450], [451, 458], [459, 463], [464, 466], [467, 473], [474, 477], [478, 485], [486, 488], [489, 496], [497, 501], [502, 508], [509, 511], [512, 516], [517, 520], [521, 531], [532, 535], [536, 543], [544, 546], [547, 548], [549, 553], [554, 560], [561, 569], [570, 572], [573, 577], [577, 578]]}) 
answer: set([u'kenya', u'nairobi'])
candidate Sentence: (0.14571055769920349, {u'tokens': [u'The', u'national', u'park', u'is', u'unique', u',', u'in', u'being', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'lemmas': [u'the', u'national', u'park', u'be', u'unique', u',', u'in', u'be', u'the', u'only', u'game-reserve', u'of', u'this', u'nature', u'to', u'border', u'a', u'capital', u'city', u',', u'or', u'city', u'of', u'this', u'size', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'JJ', u',', u'IN', u'VBG', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'TO', u'VB', u'DT', u'NN', u'NN', u',', u'CC', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[21030, 21033], [21034, 21042], [21043, 21047], [21048, 21050], [21051, 21057], [21057, 21058], [21059, 21061], [21062, 21067], [21068, 21071], [21072, 21076], [21077, 21089], [21090, 21092], [21093, 21097], [21098, 21104], [21105, 21107], [21108, 21114], [21115, 21116], [21117, 21124], [21125, 21129], [21129, 21130], [21131, 21133], [21134, 21138], [21139, 21141], [21142, 21146], [21147, 21151], [21151, 21152]]}) 
answer: set([u'kenya', u'nairobi'])

Is Nairobi the capital of Kenya?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce32d8>.answer
_____________________________ test_yesno[param230] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3320>, <src.tfidf.TF_IDF object at 0x7fbca3c76f90>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3320>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.46548539400100708, {u'tokens': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'lemmas': [u'Nairobi', u'Cinema.jpgKwani', u'?'], u'pos': [u'NNP', u'NNP', u'.'], u'char_offsets': [[14778, 14785], [14786, 14801], [14801, 14802]]}) 
answer: set([u'found', u'1899', u'in'])
candidate Sentence: (0.2502078115940094, {u'tokens': [u'The', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'is', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'founded', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'years', u'after', u'the', u'city', u'was', u'founded', u'.'], u'lemmas': [u'the', u'oldest', u'18-hole', u'golf', u'course', u'in', u'the', u'city', u'be', u'the', u'Royal', u'Nairobi', u'Golf', u'Club', u',', u'found', u'in', u'1906', u'by', u'the', u'British', u',', u'just', u'seven', u'year', u'after', u'the', u'city', u'be', u'found', u'.'], u'pos': [u'DT', u'JJS', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u',', u'VBN', u'IN', u'CD', u'IN', u'DT', u'NNP', u',', u'RB', u'CD', u'NNS', u'IN', u'DT', u'NN', u'VBD', u'VBN', u'.'], u'char_offsets': [[20313, 20316], [20317, 20323], [20324, 20331], [20332, 20336], [20337, 20343], [20344, 20346], [20347, 20350], [20351, 20355], [20356, 20358], [20359, 20362], [20363, 20368], [20369, 20376], [20377, 20381], [20382, 20386], [20386, 20387], [20388, 20395], [20396, 20398], [20399, 20403], [20404, 20406], [20407, 20410], [20411, 20418], [20418, 20419], [20420, 20424], [20425, 20430], [20431, 20436], [20437, 20442], [20443, 20446], [20447, 20451], [20452, 20455], [20456, 20463], [20463, 20464]]}) 
answer: set([u'1899'])
candidate Sentence: (0.21679514646530151, {u'tokens': [u'Founded', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'linking', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grew', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'Kenyan', u'republic', u'in', u'1963', u'.'], u'lemmas': [u'found', u'in', u'1899', u'as', u'a', u'simple', u'rail', u'depot', u'on', u'the', u'railway', u'link', u'Mombasa', u'to', u'Uganda', u',', u'the', u'town', u'quickly', u'grow', u'to', u'become', u'the', u'capital', u'of', u'British', u'East', u'Africa', u'in', u'1907', u'and', u'eventually', u'the', u'capital', u'of', u'a', u'free', u'kenyan', u'republic', u'in', u'1963', u'.'], u'pos': [u'VBN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'NN', u'NN', u'IN', u'DT', u'NN', u'VBG', u'NNP', u'TO', u'NNP', u',', u'DT', u'NN', u'RB', u'VBD', u'TO', u'VB', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'CD', u'CC', u'RB', u'DT', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'IN', u'CD', u'.'], u'char_offsets': [[361, 368], [369, 371], [372, 376], [377, 379], [380, 381], [382, 388], [389, 393], [394, 399], [400, 402], [403, 406], [407, 414], [415, 422], [423, 430], [431, 433], [434, 440], [440, 441], [442, 445], [446, 450], [451, 458], [459, 463], [464, 466], [467, 473], [474, 477], [478, 485], [486, 488], [489, 496], [497, 501], [502, 508], [509, 511], [512, 516], [517, 520], [521, 531], [532, 535], [536, 543], [544, 546], [547, 548], [549, 553], [554, 560], [561, 569], [570, 572], [573, 577], [577, 578]]}) 
answer: set([u'nairobi'])
candidate Sentence: (0.18436487019062042, {u'tokens': [u'Since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'has', u'grown', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'being', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'lemmas': [u'since', u'its', u'foundation', u'in', u'1899', u',', u'Nairobi', u'have', u'grow', u'to', u'become', u'the', u'largest', u'city', u'in', u'East', u'Africa', u',', u'despite', u'be', u'the', u'youngest', u'city', u'in', u'the', u'region', u'.'], u'pos': [u'IN', u'PRP$', u'NN', u'IN', u'CD', u',', u'NNP', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'NNP', u',', u'IN', u'VBG', u'DT', u'JJS', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[31749, 31754], [31755, 31758], [31759, 31769], [31770, 31772], [31773, 31777], [31777, 31778], [31779, 31786], [31787, 31790], [31791, 31796], [31797, 31799], [31800, 31806], [31807, 31810], [31811, 31818], [31819, 31823], [31824, 31826], [31827, 31831], [31832, 31838], [31838, 31839], [31840, 31847], [31848, 31853], [31854, 31857], [31858, 31866], [31867, 31871], [31872, 31874], [31875, 31878], [31879, 31885], [31885, 31886]]}) 
answer: set([u'found'])
candidate Sentence: (0.15896381437778473, {u'tokens': [u'Nairobi', u'was', u'founded', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-LRB-', u'KR', u'-RRB-', u'main', u'headquarters', u'are', u'still', u'situated', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'lemmas': [u'Nairobi', u'be', u'found', u'as', u'a', u'railway', u'town', u',', u'and', u'the', u'Kenya', u'Railways', u'-lrb-', u'KR', u'-rrb-', u'main', u'headquarters', u'be', u'still', u'situate', u'there', u',', u'near', u'the', u'city', u'centre', u'.'], u'pos': [u'NNP', u'VBD', u'VBN', u'IN', u'DT', u'NN', u'NN', u',', u'CC', u'DT', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'RB', u',', u'IN', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[27063, 27070], [27071, 27074], [27075, 27082], [27083, 27085], [27086, 27087], [27088, 27095], [27096, 27100], [27100, 27101], [27102, 27105], [27106, 27109], [27110, 27115], [27116, 27124], [27125, 27126], [27126, 27128], [27128, 27129], [27130, 27134], [27135, 27147], [27148, 27151], [27152, 27157], [27158, 27166], [27167, 27172], [27172, 27173], [27174, 27178], [27179, 27182], [27183, 27187], [27188, 27194], [27194, 27195]]}) 
answer: set([u'1899', u'in'])

Was Nairobi founded in 1899?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3320>.answer
_____________________________ test_yesno[param233] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce33f8>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce33f8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.34670227766036987, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7540, 7543], [7544, 7549], [7550, 7556], [7557, 7563], [7564, 7567], [7568, 7579], [7579, 7580], [7580, 7581]]}) 
answer: set([u'alone', u'die', u'nikola'])
candidate Sentence: (0.29185348749160767, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49628, 49631], [49632, 49635], [49636, 49640], [49641, 49642], [49642, 49647], [49647, 49648], [49648, 49649]]}) 
answer: set([u'alone', u'die', u'nikola'])
candidate Sentence: (0.2601960301399231, {u'tokens': [u'Prodigal', u'Genius', u':', u'The', u'Life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'died', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'lemmas': [u'prodigal', u'genius', u':', u'the', u'life', u'of', u'Nikola', u'Tesla', u'by', u'John', u'Jacob', u"O'Neill", u'ISBN', u'978-0914732334', u'Tesla', u'die', u'of', u'heart', u'failure', u'alone', u'in', u'room', u'3327', u'of', u'the', u'New', u'Yorker', u'Hotel', u',', u'on', u'7', u'January', u'1943', u'.'], u'pos': [u'JJ', u'NN', u':', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'CD', u'NNP', u'VBD', u'IN', u'NN', u'NN', u'RB', u'IN', u'NN', u'CD', u'IN', u'DT', u'NNP', u'NNP', u'NNP', u',', u'IN', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[42785, 42793], [42794, 42800], [42800, 42801], [42802, 42805], [42806, 42810], [42811, 42813], [42814, 42820], [42821, 42826], [42827, 42829], [42830, 42834], [42835, 42840], [42841, 42848], [42849, 42853], [42854, 42868], [42872, 42877], [42878, 42882], [42883, 42885], [42886, 42891], [42892, 42899], [42900, 42905], [42906, 42908], [42909, 42913], [42914, 42918], [42919, 42921], [42922, 42925], [42926, 42929], [42930, 42936], [42937, 42942], [42942, 42943], [42944, 42946], [42947, 42948], [42949, 42956], [42957, 42961], [42961, 42962]]}) 
answer: set([])
candidate Sentence: (0.17762818932533264, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[56660, 56664], [56665, 56666], [56667, 56679], [56679, 56680], [56681, 56685], [56685, 56686], [56687, 56693], [56694, 56699], [56699, 56700], [56701, 56704], [56705, 56708], [56709, 56711], [56712, 56714], [56715, 56719], [56720, 56728], [56729, 56732], [56733, 56742], [56742, 56743]]}) 
answer: set([u'alone', u'die'])
candidate Sentence: (0.17329266667366028, {u'tokens': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378380', u'Earlier', u',', u'Tesla', u'alone', u'was', u'rumored', u'to', u'have', u'been', u'nominated', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'lemmas': [u'Seifer', u',', u'``', u'Wizard', u"''", u'pp', u'378380', u'earlier', u',', u'Tesla', u'alone', u'be', u'rumor', u'to', u'have', u'be', u'nominate', u'for', u'the', u'Nobel', u'Prize', u'of', u'1912', u'.'], u'pos': [u'NNP', u',', u'``', u'NNP', u"''", u'NN', u'CD', u'JJR', u',', u'NNP', u'RB', u'VBD', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[28912, 28918], [28918, 28919], [28920, 28921], [28921, 28927], [28927, 28928], [28929, 28931], [28932, 28938], [28940, 28947], [28947, 28948], [28949, 28954], [28955, 28960], [28961, 28964], [28965, 28972], [28973, 28975], [28976, 28980], [28981, 28985], [28986, 28995], [28996, 28999], [29000, 29003], [29004, 29009], [29010, 29015], [29016, 29018], [29019, 29023], [29023, 29024]]}) 
answer: set([u'die', u'nikola'])

Did Nikola Tesla die alone?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce33f8>.answer
_____________________________ test_yesno[param235] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3488>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3488>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.67433363199234009, {u'tokens': [u'Mark', u'Twain', u'in', u'Tesla', u"'s", u'lab', u',', u'spring', u'1894', u'In', u'middle', u'age', u',', u'Tesla', u'became', u'very', u'close', u'friends', u'with', u'Mark', u'Twain', u'.'], u'lemmas': [u'Mark', u'Twain', u'in', u'Tesla', u"'s", u'lab', u',', u'spring', u'1894', u'in', u'middle', u'age', u',', u'Tesla', u'become', u'very', u'close', u'friend', u'with', u'Mark', u'Twain', u'.'], u'pos': [u'NNP', u'NNP', u'IN', u'NNP', u'POS', u'NN', u',', u'NN', u'CD', u'IN', u'JJ', u'NN', u',', u'NNP', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[39585, 39589], [39590, 39595], [39596, 39598], [39599, 39604], [39604, 39606], [39607, 39610], [39610, 39611], [39612, 39618], [39619, 39623], [39625, 39627], [39628, 39634], [39635, 39638], [39638, 39639], [39640, 39645], [39646, 39652], [39653, 39657], [39658, 39663], [39664, 39671], [39672, 39676], [39677, 39681], [39682, 39687], [39687, 39688]]}) 
answer: set([u'nikola'])
candidate Sentence: (0.3723067045211792, {u'tokens': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'Thunder', u'and', u'Lightning', u'.'], u'lemmas': [u'Krumme', u',', u'Katherine', u',', u'Mark', u'Twain', u'and', u'Nikola', u'Tesla', u':', u'thunder', u'and', u'lightning', u'.'], u'pos': [u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u':', u'NN', u'CC', u'NN', u'.'], u'char_offsets': [[17506, 17512], [17512, 17513], [17514, 17523], [17523, 17524], [17526, 17530], [17531, 17536], [17537, 17540], [17541, 17547], [17548, 17553], [17553, 17554], [17555, 17562], [17563, 17566], [17567, 17576], [17576, 17577]]}) 
answer: set([u'close', u'with', u'friend'])
candidate Sentence: (0.22967827320098877, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49628, 49631], [49632, 49635], [49636, 49640], [49641, 49642], [49642, 49647], [49647, 49648], [49648, 49649]]}) 
answer: set([u'nikola', u'mark', u'twain', u'close', u'with', u'friend'])
candidate Sentence: (0.1918741762638092, {u'tokens': [u'Tesla', u'was', u'good', u'friends', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'lemmas': [u'Tesla', u'be', u'good', u'friend', u'with', u'Robert', u'Underwood', u'Johnson', u'.'], u'pos': [u'NNP', u'VBD', u'JJ', u'NNS', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[40192, 40197], [40198, 40201], [40202, 40206], [40207, 40214], [40215, 40219], [40220, 40226], [40227, 40236], [40237, 40244], [40244, 40245]]}) 
answer: set([u'twain', u'close', u'nikola', u'mark'])
candidate Sentence: (0.18738797307014465, {u'tokens': [u'16', u'-RRB-', u'His', u'wish', u'was', u'to', u'have', u'a', u'sculpture', u'made', u'by', u'his', u'close', u'friend', u',', u'Croatian', u'sculptor', u'Ivan', u'Metrovi', u',', u'who', u'was', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'died', u'before', u'getting', u'a', u'chance', u'to', u'see', u'it', u'.'], u'lemmas': [u'16', u'-rrb-', u'he', u'wish', u'be', u'to', u'have', u'a', u'sculpture', u'make', u'by', u'he', u'close', u'friend', u',', u'croatian', u'sculptor', u'Ivan', u'Metrovi', u',', u'who', u'be', u'at', u'that', u'time', u'in', u'United', u'States', u',', u'but', u'he', u'die', u'before', u'get', u'a', u'chance', u'to', u'see', u'it', u'.'], u'pos': [u'CD', u'-RRB-', u'PRP$', u'NN', u'VBD', u'TO', u'VB', u'DT', u'NN', u'VBN', u'IN', u'PRP$', u'JJ', u'NN', u',', u'JJ', u'NN', u'NNP', u'NNP', u',', u'WP', u'VBD', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNPS', u',', u'CC', u'PRP', u'VBD', u'IN', u'VBG', u'DT', u'NN', u'TO', u'VB', u'PRP', u'.'], u'char_offsets': [[47357, 47359], [47359, 47360], [47362, 47365], [47366, 47370], [47371, 47374], [47375, 47377], [47378, 47382], [47383, 47384], [47385, 47394], [47395, 47399], [47400, 47402], [47403, 47406], [47407, 47412], [47413, 47419], [47419, 47420], [47421, 47429], [47430, 47438], [47439, 47443], [47444, 47451], [47451, 47452], [47453, 47456], [47457, 47460], [47461, 47463], [47464, 47468], [47469, 47473], [47474, 47476], [47477, 47483], [47484, 47490], [47490, 47491], [47492, 47495], [47496, 47498], [47499, 47503], [47504, 47510], [47511, 47518], [47519, 47520], [47521, 47527], [47528, 47530], [47531, 47534], [47535, 47537], [47537, 47538]]}) 
answer: set([u'tesla', u'twain', u'nikola', u'with', u'mark'])

Was Nikola Tesla close friends with Mark Twain?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3488>.answer
_____________________________ test_yesno[param237] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3518>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3518>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33797577023506165, {u'tokens': [u'Tesla', u'would', u'visualise', u'an', u'invention', u'in', u'his', u'brain', u'with', u'extreme', u'precision', u',', u'including', u'all', u'dimensions', u',', u'before', u'moving', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'known', u'as', u'picture', u'thinking', u'.'], u'lemmas': [u'Tesla', u'would', u'visualise', u'a', u'invention', u'in', u'he', u'brain', u'with', u'extreme', u'precision', u',', u'include', u'all', u'dimension', u',', u'before', u'move', u'to', u'the', u'construction', u'stage', u';', u'a', u'technique', u'sometimes', u'know', u'as', u'picture', u'thinking', u'.'], u'pos': [u'NNP', u'MD', u'VB', u'DT', u'NN', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NN', u',', u'VBG', u'DT', u'NNS', u',', u'IN', u'VBG', u'TO', u'DT', u'NN', u'NN', u':', u'DT', u'NN', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[6407, 6412], [6413, 6418], [6419, 6428], [6429, 6431], [6432, 6441], [6442, 6444], [6445, 6448], [6449, 6454], [6455, 6459], [6460, 6467], [6468, 6477], [6477, 6478], [6479, 6488], [6489, 6492], [6493, 6503], [6503, 6504], [6505, 6511], [6512, 6518], [6519, 6521], [6522, 6525], [6526, 6538], [6539, 6544], [6544, 6545], [6546, 6547], [6548, 6557], [6558, 6567], [6568, 6573], [6574, 6576], [6577, 6584], [6585, 6593], [6593, 6594]]}) 
answer: set([u'nikola', u'call', u'use'])
candidate Sentence: (0.25518739223480225, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7540, 7543], [7544, 7549], [7550, 7556], [7557, 7563], [7564, 7567], [7568, 7579], [7579, 7580], [7580, 7581]]}) 
answer: set([u'a', u'picture', u'nikola', u'thinking', u'technique', u'use', u'call'])
candidate Sentence: (0.2148163914680481, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49628, 49631], [49632, 49635], [49636, 49640], [49641, 49642], [49642, 49647], [49647, 49648], [49648, 49649]]}) 
answer: set([u'a', u'picture', u'nikola', u'thinking', u'technique', u'use', u'call'])
candidate Sentence: (0.16540056467056274, {u'tokens': [u'Tesla', u'called', u'his', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'lemmas': [u'Tesla', u'call', u'he', u'boat', u'a', u'``', u'teleautomaton', u"''", u'.'], u'pos': [u'NNP', u'VBD', u'PRP$', u'NN', u'DT', u'``', u'NN', u"''", u'.'], u'char_offsets': [[21630, 21635], [21636, 21642], [21643, 21646], [21647, 21651], [21652, 21653], [21654, 21655], [21655, 21668], [21668, 21669], [21669, 21670]]}) 
answer: set([u'thinking', u'picture', u'nikola', u'technique', u'use'])
candidate Sentence: (0.13074177503585815, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[56660, 56664], [56665, 56666], [56667, 56679], [56679, 56680], [56681, 56685], [56685, 56686], [56687, 56693], [56694, 56699], [56699, 56700], [56701, 56704], [56705, 56708], [56709, 56711], [56712, 56714], [56715, 56719], [56720, 56728], [56729, 56732], [56733, 56742], [56742, 56743]]}) 
answer: set([u'a', u'picture', u'use', u'thinking', u'technique', u'call'])

Did Nikola Tesla use a technique called picture thinking?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3518>.answer
_____________________________ test_yesno[param238] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3560>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3560>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.48910224437713623, {u'tokens': [u'Nikola', u'Tesla', u'museum', u'in', u'Belgrade', u',', u'Serbia', u'A', u'monument', u'to', u'Tesla', u'was', u'established', u'at', u'Niagara', u'Falls', u',', u'New', u'York', u',', u'USA', u'.'], u'lemmas': [u'Nikola', u'Tesla', u'museum', u'in', u'Belgrade', u',', u'Serbia', u'A', u'monument', u'to', u'Tesla', u'be', u'establish', u'at', u'Niagara', u'Falls', u',', u'New', u'York', u',', u'USA', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'IN', u'NNP', u',', u'NNP', u'NNP', u'NN', u'TO', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[52561, 52567], [52568, 52573], [52574, 52580], [52581, 52583], [52584, 52592], [52592, 52593], [52594, 52600], [52604, 52605], [52606, 52614], [52615, 52617], [52618, 52623], [52624, 52627], [52628, 52639], [52640, 52642], [52643, 52650], [52651, 52656], [52656, 52657], [52658, 52661], [52662, 52666], [52666, 52667], [52668, 52671], [52671, 52672]]}) 
answer: set([u'there'])
candidate Sentence: (0.4393799901008606, {u'tokens': [u'In', u'1976', u',', u'a', u'bronze', u'statue', u'of', u'Tesla', u'was', u'placed', u'at', u'Niagara', u'Falls', u',', u'New', u'York', u'.'], u'lemmas': [u'in', u'1976', u',', u'a', u'bronze', u'statue', u'of', u'Tesla', u'be', u'place', u'at', u'Niagara', u'Falls', u',', u'New', u'York', u'.'], u'pos': [u'IN', u'CD', u',', u'DT', u'NN', u'NN', u'IN', u'NNP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[47862, 47864], [47865, 47869], [47869, 47870], [47871, 47872], [47873, 47879], [47880, 47886], [47887, 47889], [47890, 47895], [47896, 47899], [47900, 47906], [47907, 47909], [47910, 47917], [47918, 47923], [47923, 47924], [47925, 47928], [47929, 47933], [47933, 47934]]}) 
answer: set([u'to', u'there', u'monument'])
candidate Sentence: (0.34336036443710327, {u'tokens': [u'in', u'New', u'York', u'.'], u'lemmas': [u'in', u'New', u'York', u'.'], u'pos': [u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[50728, 50730], [50731, 50734], [50735, 50739], [50739, 50740]]}) 
answer: set([u'a', u'tesla', u'there', u',', u'falls', u'to', u'niagara', u'at', u'monument'])
candidate Sentence: (0.32793030142784119, {u'tokens': [u'Statue', u'of', u'Nikola', u'Tesla', u'in', u'Niagara', u'Falls', u'State', u'Park', u'on', u'Goat', u'Island', u',', u'New', u'York', u'.'], u'lemmas': [u'Statue', u'of', u'Nikola', u'Tesla', u'in', u'Niagara', u'Falls', u'State', u'Park', u'on', u'Goat', u'Island', u',', u'New', u'York', u'.'], u'pos': [u'NNP', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'.'], u'char_offsets': [[46775, 46781], [46782, 46784], [46785, 46791], [46792, 46797], [46798, 46800], [46801, 46808], [46809, 46814], [46815, 46820], [46821, 46825], [46826, 46828], [46829, 46833], [46834, 46840], [46840, 46841], [46842, 46845], [46846, 46850], [46850, 46851]]}) 
answer: set([u'a', u'to', u'there', u'at', u'monument'])
candidate Sentence: (0.31614899635314941, {u'tokens': [u'Another', u'monument', u'to', u'Tesla', u',', u'featuring', u'him', u'standing', u'on', u'a', u'portion', u'of', u'an', u'alternator', u',', u'was', u'established', u'at', u'Queen', u'Victoria', u'Park', u'in', u'Niagara', u'Falls', u',', u'Ontario', u',', u'Canada', u'.'], u'lemmas': [u'another', u'monument', u'to', u'Tesla', u',', u'feature', u'he', u'stand', u'on', u'a', u'portion', u'of', u'a', u'alternator', u',', u'be', u'establish', u'at', u'Queen', u'Victoria', u'Park', u'in', u'Niagara', u'Falls', u',', u'Ontario', u',', u'Canada', u'.'], u'pos': [u'DT', u'NN', u'TO', u'NNP', u',', u'VBG', u'PRP', u'VBG', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'NNP', u',', u'NNP', u',', u'NNP', u'.'], u'char_offsets': [[52834, 52841], [52842, 52850], [52851, 52853], [52854, 52859], [52859, 52860], [52861, 52870], [52871, 52874], [52875, 52883], [52884, 52886], [52887, 52888], [52889, 52896], [52897, 52899], [52900, 52902], [52903, 52913], [52913, 52914], [52915, 52918], [52919, 52930], [52931, 52933], [52934, 52939], [52940, 52948], [52949, 52953], [52954, 52956], [52957, 52964], [52965, 52970], [52970, 52971], [52972, 52979], [52979, 52980], [52981, 52987], [52987, 52988]]}) 
answer: set([u'new', u'there', u'york'])

Is there a monument to Tesla at Niagara Falls, New York?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3560>.answer
_____________________________ test_yesno[param239] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce35a8>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce35a8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.41266071796417236, {u'tokens': [u'He', u'was', u'a', u'subject', u'of', u'the', u'Austrian', u'Empire', u'by', u'birth', u'and', u'later', u'became', u'an', u'American', u'citizen', u'.'], u'lemmas': [u'he', u'be', u'a', u'subject', u'of', u'the', u'austrian', u'empire', u'by', u'birth', u'and', u'later', u'become', u'a', u'american', u'citizen', u'.'], u'pos': [u'PRP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'CC', u'RB', u'VBD', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[703, 705], [706, 709], [710, 711], [712, 719], [720, 722], [723, 726], [727, 735], [736, 742], [743, 745], [746, 751], [752, 755], [756, 761], [762, 768], [769, 771], [772, 780], [781, 788], [788, 789]]}) 
answer: set([u'tesla'])
candidate Sentence: (0.32925644516944885, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49628, 49631], [49632, 49635], [49636, 49640], [49641, 49642], [49642, 49647], [49647, 49648], [49648, 49649]]}) 
answer: set([u'a', u'american', u'citizen'])
candidate Sentence: (0.25201570987701416, {u'tokens': [u'Did', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'lemmas': [u'do', u'Tesla', u'really', u'invent', u'the', u'loudspeaker', u'?', u"''"], u'pos': [u'VBD', u'NNP', u'RB', u'VB', u'DT', u'NN', u'.', u"''"], u'char_offsets': [[7540, 7543], [7544, 7549], [7550, 7556], [7557, 7563], [7564, 7567], [7568, 7579], [7579, 7580], [7580, 7581]]}) 
answer: set([u'a', u'american', u'citizen'])
candidate Sentence: (0.20686709880828857, {u'tokens': [u'-LRB-', u'American', u'Chemical', u'Society', u',', u'1993', u'.'], u'lemmas': [u'-lrb-', u'american', u'Chemical', u'Society', u',', u'1993', u'.'], u'pos': [u'-LRB-', u'JJ', u'NNP', u'NNP', u',', u'CD', u'.'], u'char_offsets': [[58815, 58816], [58816, 58824], [58825, 58833], [58834, 58841], [58841, 58842], [58843, 58847], [58847, 58848]]}) 
answer: set([u'a', u'tesla', u'citizen'])
candidate Sentence: (0.18361426889896393, {u'tokens': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'was', u'he', u'so', u'much', u'resisted', u'and', u'forgotten', u'?'], u'lemmas': [u'ISBN', u'*', u'Valentinuzzi', u',', u'M.E.', u',', u'Nikola', u'Tesla', u':', u'why', u'be', u'he', u'so', u'much', u'resist', u'and', u'forget', u'?'], u'pos': [u'NNP', u'SYM', u'NNP', u',', u'NNP', u',', u'NNP', u'NNP', u':', u'WRB', u'VBD', u'PRP', u'RB', u'RB', u'VBN', u'CC', u'VBN', u'.'], u'char_offsets': [[56660, 56664], [56665, 56666], [56667, 56679], [56679, 56680], [56681, 56685], [56685, 56686], [56687, 56693], [56694, 56699], [56699, 56700], [56701, 56704], [56705, 56708], [56709, 56711], [56712, 56714], [56715, 56719], [56720, 56728], [56729, 56732], [56733, 56742], [56742, 56743]]}) 
answer: set([u'a', u'american', u'citizen'])

Was Tesla an American citizen?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce35a8>.answer
_____________________________ test_yesno[param240] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3638>, <src.tfidf.TF_IDF object at 0x7fbca1202450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3638>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.55285185575485229, {u'tokens': [u'On', u'Tesla', u"'s", u'75th', u'birthday', u'in', u'1931', u',', u'Time', u'magazine', u'put', u'him', u'on', u'its', u'cover', u'.'], u'lemmas': [u'on', u'Tesla', u"'s", u'75th', u'birthday', u'in', u'1931', u',', u'Time', u'magazine', u'put', u'he', u'on', u'its', u'cover', u'.'], u'pos': [u'IN', u'NNP', u'POS', u'JJ', u'NN', u'IN', u'CD', u',', u'NNP', u'NN', u'VBD', u'PRP', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[31702, 31704], [31705, 31710], [31710, 31712], [31713, 31717], [31718, 31726], [31727, 31729], [31730, 31734], [31734, 31735], [31736, 31740], [31741, 31749], [31750, 31753], [31754, 31757], [31758, 31760], [31761, 31764], [31765, 31770], [31770, 31771]]}) 
answer: set([u'of', u'the'])
candidate Sentence: (0.31088447570800781, {u'tokens': [u'Time', u',', u'23', u'July', u'1934', u'.'], u'lemmas': [u'Time', u',', u'23', u'July', u'1934', u'.'], u'pos': [u'NNP', u',', u'CD', u'NNP', u'CD', u'.'], u'char_offsets': [[33644, 33648], [33648, 33649], [33650, 33652], [33653, 33657], [33658, 33662], [33662, 33663]]}) 
answer: set([u'on', u'tesla', u'of', u'cover', u'magazine', u'the'])
candidate Sentence: (0.28337690234184265, {u'tokens': [u'Astronomski', u'magazine', u'.'], u'lemmas': [u'Astronomski', u'magazine', u'.'], u'pos': [u'NNP', u'NN', u'.'], u'char_offsets': [[55928, 55939], [55940, 55948], [55948, 55949]]}) 
answer: set([u'on', u'tesla', u'of', u'cover', u'time', u'the'])
candidate Sentence: (0.26660266518592834, {u'tokens': [u'Why', u'the', u'Name', u'``', u'Tesla', u"''", u'?'], u'lemmas': [u'why', u'the', u'name', u'``', u'Tesla', u"''", u'?'], u'pos': [u'WRB', u'DT', u'NN', u'``', u'NNP', u"''", u'.'], u'char_offsets': [[49628, 49631], [49632, 49635], [49636, 49640], [49641, 49642], [49642, 49647], [49647, 49648], [49648, 49649]]}) 
answer: set([u'on', u'magazine', u'time', u'cover', u'of'])
candidate Sentence: (0.20697870850563049, {u'tokens': [u'The', u'cover', u'caption', u'noted', u'his', u'contribution', u'to', u'electrical', u'power', u'generation', u'.'], u'lemmas': [u'the', u'cover', u'caption', u'note', u'he', u'contribution', u'to', u'electrical', u'power', u'generation', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBD', u'PRP$', u'NN', u'TO', u'JJ', u'NN', u'NN', u'.'], u'char_offsets': [[31772, 31775], [31776, 31781], [31782, 31789], [31790, 31795], [31796, 31799], [31800, 31812], [31813, 31815], [31816, 31826], [31827, 31832], [31833, 31843], [31843, 31844]]}) 
answer: set([u'tesla', u'on', u'magazine', u'time', u'of'])

Was Tesla on the cover of Time magazine?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3638>.answer
_____________________________ test_yesno[param241] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce36c8>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus is a cephalopod.')
E                +    where 'Yes, the octopus is a cephalopod.' = <src.question_processing.Question_parser instance at 0x7fbca0ce36c8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.37498199939727783, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'a', u'the', u'cephalopod'])
candidate Sentence: (0.31424707174301147, {u'tokens': [u'Octopus', u'The', u'octopus', u'is', u'a', u'cephalopod', u'of', u'the', u'order', u'Octopoda', u'.'], u'lemmas': [u'Octopus', u'The', u'octopus', u'be', u'a', u'cephalopod', u'of', u'the', u'order', u'Octopoda', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u'.'], u'char_offsets': [[0, 7], [11, 14], [15, 22], [23, 25], [26, 27], [28, 38], [39, 41], [42, 45], [46, 51], [52, 60], [60, 61]]}) 
answer: set([])
candidate Sentence: (0.28763324022293091, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'a', u'the', u'cephalopod'])
candidate Sentence: (0.21084171533584595, {u'tokens': [u'Octopuses', u',', u'like', u'other', u'cephalopods', u',', u'can', u'distinguish', u'the', u'polarization', u'of', u'light', u'.'], u'lemmas': [u'octopus', u',', u'like', u'other', u'cephalopod', u',', u'can', u'distinguish', u'the', u'polarization', u'of', u'light', u'.'], u'pos': [u'NNS', u',', u'IN', u'JJ', u'NNS', u',', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[12353, 12362], [12362, 12363], [12364, 12368], [12369, 12374], [12375, 12386], [12386, 12387], [12388, 12391], [12392, 12403], [12404, 12407], [12408, 12420], [12421, 12423], [12424, 12429], [12429, 12430]]}) 
answer: set([u'a'])
candidate Sentence: (0.20178666710853577, {u'tokens': [u'Giant', u'OctopusMighty', u'but', u'Secretive', u'Denizen', u'of', u'the', u'Deep', u'Slate.com', u',', u'How', u'Smart', u'is', u'the', u'Octopus', u'?'], u'lemmas': [u'Giant', u'OctopusMighty', u'but', u'Secretive', u'Denizen', u'of', u'the', u'deep', u'Slate.com', u',', u'how', u'Smart', u'be', u'the', u'Octopus', u'?'], u'pos': [u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NNP', u',', u'WRB', u'NNP', u'VBZ', u'DT', u'NNP', u'.'], u'char_offsets': [[4556, 4561], [4562, 4575], [4576, 4579], [4580, 4589], [4590, 4597], [4598, 4600], [4601, 4604], [4605, 4609], [4612, 4621], [4621, 4622], [4623, 4626], [4627, 4632], [4633, 4635], [4636, 4639], [4640, 4647], [4647, 4648]]}) 
answer: set([u'a', u'cephalopod'])

Is the octopus a cephalopod?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus is a cephalopod.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus is a cephalopod.')
 +    where 'Yes, the octopus is a cephalopod.' = <src.question_processing.Question_parser instance at 0x7fbca0ce36c8>.answer
_____________________________ test_yesno[param242] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3758>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus is a cephalopod.')
E                +    where 'Yes, the octopus is a cephalopod.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3758>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.37498199939727783, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'a', u'the', u'cephalopod'])
candidate Sentence: (0.31424707174301147, {u'tokens': [u'Octopus', u'The', u'octopus', u'is', u'a', u'cephalopod', u'of', u'the', u'order', u'Octopoda', u'.'], u'lemmas': [u'Octopus', u'The', u'octopus', u'be', u'a', u'cephalopod', u'of', u'the', u'order', u'Octopoda', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'VBZ', u'DT', u'NN', u'IN', u'DT', u'NN', u'NNP', u'.'], u'char_offsets': [[0, 7], [11, 14], [15, 22], [23, 25], [26, 27], [28, 38], [39, 41], [42, 45], [46, 51], [52, 60], [60, 61]]}) 
answer: set([])
candidate Sentence: (0.28763324022293091, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'a', u'the', u'cephalopod'])
candidate Sentence: (0.21084171533584595, {u'tokens': [u'Octopuses', u',', u'like', u'other', u'cephalopods', u',', u'can', u'distinguish', u'the', u'polarization', u'of', u'light', u'.'], u'lemmas': [u'octopus', u',', u'like', u'other', u'cephalopod', u',', u'can', u'distinguish', u'the', u'polarization', u'of', u'light', u'.'], u'pos': [u'NNS', u',', u'IN', u'JJ', u'NNS', u',', u'MD', u'VB', u'DT', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[12353, 12362], [12362, 12363], [12364, 12368], [12369, 12374], [12375, 12386], [12386, 12387], [12388, 12391], [12392, 12403], [12404, 12407], [12408, 12420], [12421, 12423], [12424, 12429], [12429, 12430]]}) 
answer: set([u'a'])
candidate Sentence: (0.20178666710853577, {u'tokens': [u'Giant', u'OctopusMighty', u'but', u'Secretive', u'Denizen', u'of', u'the', u'Deep', u'Slate.com', u',', u'How', u'Smart', u'is', u'the', u'Octopus', u'?'], u'lemmas': [u'Giant', u'OctopusMighty', u'but', u'Secretive', u'Denizen', u'of', u'the', u'deep', u'Slate.com', u',', u'how', u'Smart', u'be', u'the', u'Octopus', u'?'], u'pos': [u'NNP', u'NNP', u'CC', u'NNP', u'NNP', u'IN', u'DT', u'JJ', u'NNP', u',', u'WRB', u'NNP', u'VBZ', u'DT', u'NNP', u'.'], u'char_offsets': [[4556, 4561], [4562, 4575], [4576, 4579], [4580, 4589], [4590, 4597], [4598, 4600], [4601, 4604], [4605, 4609], [4612, 4621], [4621, 4622], [4623, 4626], [4627, 4632], [4633, 4635], [4636, 4639], [4640, 4647], [4647, 4648]]}) 
answer: set([u'a', u'cephalopod'])

Is the octopus a cephalopod?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus is a cephalopod.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus is a cephalopod.')
 +    where 'Yes, the octopus is a cephalopod.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3758>.answer
_____________________________ test_yesno[param243] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce37e8>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus has two eyes.')
E                +    where 'Yes, the octopus has two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce37e8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33891862630844116, {u'tokens': [u'Octopuses', u'have', u'two', u'eyes', u'and', u'four', u'pairs', u'of', u'arms', u'and', u'like', u'other', u'cephalopods', u'are', u'bilaterally', u'symmetric', u'.'], u'lemmas': [u'octopus', u'have', u'two', u'eye', u'and', u'four', u'pair', u'of', u'arm', u'and', u'like', u'other', u'cephalopod', u'be', u'bilaterally', u'symmetric', u'.'], u'pos': [u'NNS', u'VBP', u'CD', u'NNS', u'CC', u'CD', u'NNS', u'IN', u'NNS', u'CC', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u'.'], u'char_offsets': [[62, 71], [72, 76], [77, 80], [81, 85], [86, 89], [90, 94], [95, 100], [101, 103], [104, 108], [109, 112], [113, 117], [118, 123], [124, 135], [136, 139], [140, 151], [152, 161], [161, 162]]}) 
answer: set([u'the'])
candidate Sentence: (0.24316486716270447, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'the', u'eye', u'two', u'have'])
candidate Sentence: (0.19343066215515137, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'the', u'eye', u'two', u'have'])
candidate Sentence: (0.1831403374671936, {u'tokens': [u'As', u'a', u'result', u',', u'the', u'octopus', u'does', u'not', u'possess', u'stereognosis', u';', u'that', u'is', u',', u'it', u'does', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'is', u'handling', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'the', u'octopus', u'do', u'not', u'possess', u'stereognosis', u';', u'that', u'be', u',', u'it', u'do', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'be', u'handle', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'NN', u':', u'DT', u'VBZ', u',', u'PRP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'PRP', u'VBZ', u'VBG', u'.'], u'char_offsets': [[13624, 13626], [13627, 13628], [13629, 13635], [13635, 13636], [13637, 13640], [13641, 13648], [13649, 13653], [13654, 13657], [13658, 13665], [13666, 13678], [13678, 13679], [13680, 13684], [13685, 13687], [13687, 13688], [13689, 13691], [13692, 13696], [13697, 13700], [13701, 13705], [13706, 13707], [13708, 13714], [13715, 13720], [13721, 13723], [13724, 13727], [13728, 13735], [13736, 13741], [13742, 13744], [13745, 13748], [13749, 13755], [13756, 13758], [13759, 13761], [13762, 13770], [13770, 13771]]}) 
answer: set([u'eye', u'two', u'have'])
candidate Sentence: (0.17615999281406403, {u'tokens': [u'An', u'autonomic', u'response', u'keeps', u'the', u'octopus', u"'s", u'eyes', u'oriented', u'so', u'that', u'the', u'pupil', u'slit', u'is', u'always', u'horizontal', u'.'], u'lemmas': [u'a', u'autonomic', u'response', u'keep', u'the', u'octopus', u"'s", u'eye', u'orient', u'so', u'that', u'the', u'pupil', u'slit', u'be', u'always', u'horizontal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'POS', u'NNS', u'VBN', u'IN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'JJ', u'.'], u'char_offsets': [[12775, 12777], [12778, 12787], [12788, 12796], [12797, 12802], [12803, 12806], [12807, 12814], [12814, 12816], [12817, 12821], [12822, 12830], [12831, 12833], [12834, 12838], [12839, 12842], [12843, 12848], [12849, 12853], [12854, 12856], [12857, 12863], [12864, 12874], [12874, 12875]]}) 
answer: set([u'two', u'have'])

Does the octopus have two eyes?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus has two eyes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus has two eyes.')
 +    where 'Yes, the octopus has two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce37e8>.answer
_____________________________ test_yesno[param244] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3878>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus has two eyes.')
E                +    where 'Yes, the octopus has two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3878>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.33891862630844116, {u'tokens': [u'Octopuses', u'have', u'two', u'eyes', u'and', u'four', u'pairs', u'of', u'arms', u'and', u'like', u'other', u'cephalopods', u'are', u'bilaterally', u'symmetric', u'.'], u'lemmas': [u'octopus', u'have', u'two', u'eye', u'and', u'four', u'pair', u'of', u'arm', u'and', u'like', u'other', u'cephalopod', u'be', u'bilaterally', u'symmetric', u'.'], u'pos': [u'NNS', u'VBP', u'CD', u'NNS', u'CC', u'CD', u'NNS', u'IN', u'NNS', u'CC', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u'.'], u'char_offsets': [[62, 71], [72, 76], [77, 80], [81, 85], [86, 89], [90, 94], [95, 100], [101, 103], [104, 108], [109, 112], [113, 117], [118, 123], [124, 135], [136, 139], [140, 151], [152, 161], [161, 162]]}) 
answer: set([u'the'])
candidate Sentence: (0.24316486716270447, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'the', u'eye', u'two', u'have'])
candidate Sentence: (0.19343066215515137, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'the', u'eye', u'two', u'have'])
candidate Sentence: (0.1831403374671936, {u'tokens': [u'As', u'a', u'result', u',', u'the', u'octopus', u'does', u'not', u'possess', u'stereognosis', u';', u'that', u'is', u',', u'it', u'does', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'is', u'handling', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'the', u'octopus', u'do', u'not', u'possess', u'stereognosis', u';', u'that', u'be', u',', u'it', u'do', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'be', u'handle', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'NN', u':', u'DT', u'VBZ', u',', u'PRP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'PRP', u'VBZ', u'VBG', u'.'], u'char_offsets': [[13624, 13626], [13627, 13628], [13629, 13635], [13635, 13636], [13637, 13640], [13641, 13648], [13649, 13653], [13654, 13657], [13658, 13665], [13666, 13678], [13678, 13679], [13680, 13684], [13685, 13687], [13687, 13688], [13689, 13691], [13692, 13696], [13697, 13700], [13701, 13705], [13706, 13707], [13708, 13714], [13715, 13720], [13721, 13723], [13724, 13727], [13728, 13735], [13736, 13741], [13742, 13744], [13745, 13748], [13749, 13755], [13756, 13758], [13759, 13761], [13762, 13770], [13770, 13771]]}) 
answer: set([u'eye', u'two', u'have'])
candidate Sentence: (0.17615999281406403, {u'tokens': [u'An', u'autonomic', u'response', u'keeps', u'the', u'octopus', u"'s", u'eyes', u'oriented', u'so', u'that', u'the', u'pupil', u'slit', u'is', u'always', u'horizontal', u'.'], u'lemmas': [u'a', u'autonomic', u'response', u'keep', u'the', u'octopus', u"'s", u'eye', u'orient', u'so', u'that', u'the', u'pupil', u'slit', u'be', u'always', u'horizontal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'NN', u'POS', u'NNS', u'VBN', u'IN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'RB', u'JJ', u'.'], u'char_offsets': [[12775, 12777], [12778, 12787], [12788, 12796], [12797, 12802], [12803, 12806], [12807, 12814], [12814, 12816], [12817, 12821], [12822, 12830], [12831, 12833], [12834, 12838], [12839, 12842], [12843, 12848], [12849, 12853], [12854, 12856], [12857, 12863], [12864, 12874], [12874, 12875]]}) 
answer: set([u'two', u'have'])

Does the octopus have two eyes?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus has two eyes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus has two eyes.')
 +    where 'Yes, the octopus has two eyes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3878>.answer
_____________________________ test_yesno[param245] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3908>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus has a hard beak.')
E                +    where 'Yes, the octopus has a hard beak.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3908>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.50425779819488525, {u'tokens': [u'A', u'beak', u',', u'similar', u'in', u'shape', u'to', u'a', u'parrot', u"'s", u'beak', u',', u'is', u'the', u'only', u'hard', u'part', u'of', u'their', u'body', u'.'], u'lemmas': [u'a', u'beak', u',', u'similar', u'in', u'shape', u'to', u'a', u'parrot', u"'s", u'beak', u',', u'be', u'the', u'only', u'hard', u'part', u'of', u'they', u'body', u'.'], u'pos': [u'DT', u'NN', u',', u'JJ', u'IN', u'NN', u'TO', u'DT', u'NN', u'POS', u'NN', u',', u'VBZ', u'DT', u'RB', u'JJ', u'NN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[2216, 2217], [2218, 2222], [2222, 2223], [2224, 2231], [2232, 2234], [2235, 2240], [2241, 2243], [2244, 2245], [2246, 2252], [2252, 2254], [2255, 2259], [2259, 2260], [2261, 2263], [2264, 2267], [2268, 2272], [2273, 2277], [2278, 2282], [2283, 2285], [2286, 2291], [2292, 2296], [2296, 2297]]}) 
answer: set([u'octopus', u'have'])
candidate Sentence: (0.45466619729995728, {u'tokens': [u'An', u'octopus', u'has', u'a', u'hard', u'beak', u',', u'with', u'its', u'mouth', u'at', u'the', u'center', u'point', u'of', u'the', u'arms', u'.'], u'lemmas': [u'a', u'octopus', u'have', u'a', u'hard', u'beak', u',', u'with', u'its', u'mouth', u'at', u'the', u'center', u'point', u'of', u'the', u'arm', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u',', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[163, 165], [166, 173], [174, 177], [178, 179], [180, 184], [185, 189], [189, 190], [191, 195], [196, 199], [200, 205], [206, 208], [209, 212], [213, 219], [220, 225], [226, 228], [229, 232], [233, 237], [237, 238]]}) 
answer: set([])
candidate Sentence: (0.22503809630870819, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'a', u'the', u'hard', u'have', u'beak'])
candidate Sentence: (0.18470363318920135, {u'tokens': [u'As', u'a', u'result', u',', u'the', u'octopus', u'does', u'not', u'possess', u'stereognosis', u';', u'that', u'is', u',', u'it', u'does', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'is', u'handling', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'the', u'octopus', u'do', u'not', u'possess', u'stereognosis', u';', u'that', u'be', u',', u'it', u'do', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'be', u'handle', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'NN', u':', u'DT', u'VBZ', u',', u'PRP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'PRP', u'VBZ', u'VBG', u'.'], u'char_offsets': [[13624, 13626], [13627, 13628], [13629, 13635], [13635, 13636], [13637, 13640], [13641, 13648], [13649, 13653], [13654, 13657], [13658, 13665], [13666, 13678], [13678, 13679], [13680, 13684], [13685, 13687], [13687, 13688], [13689, 13691], [13692, 13696], [13697, 13700], [13701, 13705], [13706, 13707], [13708, 13714], [13715, 13720], [13721, 13723], [13724, 13727], [13728, 13735], [13736, 13741], [13742, 13744], [13745, 13748], [13749, 13755], [13756, 13758], [13759, 13761], [13762, 13770], [13770, 13771]]}) 
answer: set([u'hard', u'have', u'beak'])
candidate Sentence: (0.17901134490966797, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'a', u'the', u'hard', u'have', u'beak'])

Does the octopus have a hard beak?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus has a hard beak.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus has a hard beak.')
 +    where 'Yes, the octopus has a hard beak.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3908>.answer
_____________________________ test_yesno[param246] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3998>, <src.tfidf.TF_IDF object at 0x7fbca29e4810>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the octopus has a hard beak.')
E                +    where 'Yes, the octopus has a hard beak.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3998>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.50425779819488525, {u'tokens': [u'A', u'beak', u',', u'similar', u'in', u'shape', u'to', u'a', u'parrot', u"'s", u'beak', u',', u'is', u'the', u'only', u'hard', u'part', u'of', u'their', u'body', u'.'], u'lemmas': [u'a', u'beak', u',', u'similar', u'in', u'shape', u'to', u'a', u'parrot', u"'s", u'beak', u',', u'be', u'the', u'only', u'hard', u'part', u'of', u'they', u'body', u'.'], u'pos': [u'DT', u'NN', u',', u'JJ', u'IN', u'NN', u'TO', u'DT', u'NN', u'POS', u'NN', u',', u'VBZ', u'DT', u'RB', u'JJ', u'NN', u'IN', u'PRP$', u'NN', u'.'], u'char_offsets': [[2216, 2217], [2218, 2222], [2222, 2223], [2224, 2231], [2232, 2234], [2235, 2240], [2241, 2243], [2244, 2245], [2246, 2252], [2252, 2254], [2255, 2259], [2259, 2260], [2261, 2263], [2264, 2267], [2268, 2272], [2273, 2277], [2278, 2282], [2283, 2285], [2286, 2291], [2292, 2296], [2296, 2297]]}) 
answer: set([u'octopus', u'have'])
candidate Sentence: (0.45466619729995728, {u'tokens': [u'An', u'octopus', u'has', u'a', u'hard', u'beak', u',', u'with', u'its', u'mouth', u'at', u'the', u'center', u'point', u'of', u'the', u'arms', u'.'], u'lemmas': [u'a', u'octopus', u'have', u'a', u'hard', u'beak', u',', u'with', u'its', u'mouth', u'at', u'the', u'center', u'point', u'of', u'the', u'arm', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u',', u'IN', u'PRP$', u'NN', u'IN', u'DT', u'NN', u'NN', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[163, 165], [166, 173], [174, 177], [178, 179], [180, 184], [185, 189], [189, 190], [191, 195], [196, 199], [200, 205], [206, 208], [209, 212], [213, 219], [220, 225], [226, 228], [229, 232], [233, 237], [237, 238]]}) 
answer: set([])
candidate Sentence: (0.22503809630870819, {u'tokens': [u'What', u'is', u'this', u'octopus', u'thinking', u'?'], u'lemmas': [u'what', u'be', u'this', u'octopus', u'thinking', u'?'], u'pos': [u'WP', u'VBZ', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[6223, 6227], [6228, 6230], [6231, 6235], [6236, 6243], [6244, 6252], [6252, 6253]]}) 
answer: set([u'a', u'the', u'hard', u'have', u'beak'])
candidate Sentence: (0.18470363318920135, {u'tokens': [u'As', u'a', u'result', u',', u'the', u'octopus', u'does', u'not', u'possess', u'stereognosis', u';', u'that', u'is', u',', u'it', u'does', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'is', u'handling', u'.'], u'lemmas': [u'as', u'a', u'result', u',', u'the', u'octopus', u'do', u'not', u'possess', u'stereognosis', u';', u'that', u'be', u',', u'it', u'do', u'not', u'form', u'a', u'mental', u'image', u'of', u'the', u'overall', u'shape', u'of', u'the', u'object', u'it', u'be', u'handle', u'.'], u'pos': [u'IN', u'DT', u'NN', u',', u'DT', u'NN', u'VBZ', u'RB', u'VB', u'NN', u':', u'DT', u'VBZ', u',', u'PRP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'PRP', u'VBZ', u'VBG', u'.'], u'char_offsets': [[13624, 13626], [13627, 13628], [13629, 13635], [13635, 13636], [13637, 13640], [13641, 13648], [13649, 13653], [13654, 13657], [13658, 13665], [13666, 13678], [13678, 13679], [13680, 13684], [13685, 13687], [13687, 13688], [13689, 13691], [13692, 13696], [13697, 13700], [13701, 13705], [13706, 13707], [13708, 13714], [13715, 13720], [13721, 13723], [13724, 13727], [13728, 13735], [13736, 13741], [13742, 13744], [13745, 13748], [13749, 13755], [13756, 13758], [13759, 13761], [13762, 13770], [13770, 13771]]}) 
answer: set([u'hard', u'have', u'beak'])
candidate Sentence: (0.17901134490966797, {u'tokens': [u'What', u'behavior', u'can', u'we', u'expect', u'of', u'octopuses', u'?'], u'lemmas': [u'what', u'behavior', u'can', u'we', u'expect', u'of', u'octopus', u'?'], u'pos': [u'WDT', u'NN', u'MD', u'PRP', u'VB', u'IN', u'NNS', u'.'], u'char_offsets': [[6452, 6456], [6457, 6465], [6466, 6469], [6470, 6472], [6473, 6479], [6480, 6482], [6483, 6492], [6492, 6493]]}) 
answer: set([u'a', u'the', u'hard', u'have', u'beak'])

Does the octopus have a hard beak?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the octopus has a hard beak.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the octopus has a hard beak.')
 +    where 'Yes, the octopus has a hard beak.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3998>.answer
_____________________________ test_yesno[param249] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3b48>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3b48>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.47090205550193787, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[14022, 14023], [14024, 14029], [14030, 14044], [14045, 14058], [14059, 14062], [14063, 14064], [14064, 14071], [14072, 14077], [14077, 14078], [14079, 14080], [14080, 14087], [14088, 14093], [14096, 14099], [14102, 14106], [14106, 14107], [14108, 14112], [14113, 14116], [14117, 14118], [14118, 14124], [14125, 14130], [14130, 14131], [14132, 14134], [14135, 14136], [14136, 14143], [14144, 14149], [14149, 14150], [14151, 14152], [14152, 14157], [14160, 14162], [14164, 14165], [14166, 14169], [14170, 14173], [14174, 14181], [14182, 14183], [14183, 14187], [14188, 14193], [14193, 14194], [14194, 14195]]}) 
answer: set([u'upright', u'piano', u'call', u'vertical'])
candidate Sentence: (0.45463672280311584, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[16207, 16214], [16215, 16221], [16222, 16226], [16227, 16236], [16237, 16241], [16242, 16248], [16249, 16252], [16253, 16257], [16258, 16265], [16266, 16269], [16270, 16279], [16280, 16286], [16287, 16288], [16288, 16295], [16296, 16301], [16301, 16302], [16303, 16309], [16309, 16310]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45344224572181702, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31714, 31719], [31719, 31720], [31721, 31727], [31728, 31732], [31733, 31739], [31740, 31741], [31742, 31747], [31748, 31750], [31751, 31754], [31755, 31762], [31763, 31776], [31776, 31777], [31778, 31781], [31782, 31785], [31786, 31795], [31796, 31804], [31805, 31807], [31808, 31810], [31811, 31820], [31821, 31830], [31830, 31831], [31832, 31833], [31833, 31836], [31837, 31844], [31844, 31845], [31845, 31846], [31847, 31848], [31848, 31851], [31852, 31858], [31858, 31859], [31859, 31860], [31861, 31862], [31862, 31865], [31866, 31878], [31878, 31879], [31879, 31880], [31881, 31884], [31885, 31886], [31886, 31889], [31890, 31895], [31895, 31896], [31896, 31897], [31897, 31898], [31899, 31902], [31903, 31908], [31908, 31909], [31909, 31910], [31910, 31911], [31911, 31912], [31912, 31913], [31914, 31915], [31915, 31918], [31919, 31925], [31926, 31929], [31929, 31930], [31930, 31931], [31931, 31932], [31932, 31933], [31933, 31934]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.35582134127616882, {u'tokens': [u'Upright', u'piano', u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u'Upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NN', u'NNP', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[15130, 15137], [15138, 15143], [15145, 15152], [15153, 15159], [15159, 15160], [15161, 15165], [15166, 15172], [15173, 15181], [15182, 15188], [15188, 15189], [15190, 15193], [15194, 15198], [15199, 15206], [15207, 15214], [15215, 15218], [15219, 15224], [15225, 15228], [15229, 15236], [15237, 15240], [15242, 15250], [15250, 15251]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34465831518173218, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[30152, 30154], [30155, 30158], [30159, 30163], [30163, 30164], [30165, 30168], [30169, 30175], [30176, 30180], [30181, 30190], [30191, 30192], [30193, 30200], [30201, 30207], [30208, 30209], [30209, 30216], [30216, 30217], [30218, 30220], [30221, 30222], [30222, 30229], [30229, 30230], [30230, 30231], [30232, 30237], [30238, 30246], [30247, 30249], [30250, 30255], [30256, 30262], [30262, 30263], [30264, 30268], [30269, 30275], [30276, 30279], [30280, 30284], [30285, 30288], [30289, 30293], [30294, 30296], [30297, 30302], [30302, 30303]]}) 
answer: set([u'upright', u'piano', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3b48>.answer
_____________________________ test_yesno[param250] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3bd8>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3bd8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.47090205550193787, {u'tokens': [u'A', u'rough', u'generalization', u'distinguishes', u'the', u'``', u'concert', u'grand', u"''", u'-LRB-', u'between', u'about', u'and', u'long', u'-RRB-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-LRB-', u'about', u'to', u'-RRB-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'lemmas': [u'a', u'rough', u'generalization', u'distinguish', u'the', u'``', u'concert', u'grand', u"''", u'-lrb-', u'between', u'about', u'and', u'long', u'-rrb-', u'from', u'the', u'``', u'parlor', u'grand', u"''", u'or', u'``', u'boudoir', u'grand', u"''", u'-lrb-', u'about', u'to', u'-rrb-', u'and', u'the', u'smaller', u'``', u'baby', u'grand', u"''", u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'``', u'NN', u'JJ', u"''", u'-LRB-', u'IN', u'RB', u'CC', u'RB', u'-RRB-', u'IN', u'DT', u'``', u'NN', u'JJ', u"''", u'CC', u'``', u'FW', u'JJ', u"''", u'-LRB-', u'RB', u'TO', u'-RRB-', u'CC', u'DT', u'JJR', u'``', u'NN', u'JJ', u"''", u'.'], u'char_offsets': [[14022, 14023], [14024, 14029], [14030, 14044], [14045, 14058], [14059, 14062], [14063, 14064], [14064, 14071], [14072, 14077], [14077, 14078], [14079, 14080], [14080, 14087], [14088, 14093], [14096, 14099], [14102, 14106], [14106, 14107], [14108, 14112], [14113, 14116], [14117, 14118], [14118, 14124], [14125, 14130], [14130, 14131], [14132, 14134], [14135, 14136], [14136, 14143], [14144, 14149], [14149, 14150], [14151, 14152], [14152, 14157], [14160, 14162], [14164, 14165], [14166, 14169], [14170, 14173], [14174, 14181], [14182, 14183], [14183, 14187], [14188, 14193], [14193, 14194], [14194, 14195]]}) 
answer: set([u'upright', u'piano', u'call', u'vertical'])
candidate Sentence: (0.45463672280311584, {u'tokens': [u'Upright', u'pianos', u'with', u'unusually', u'tall', u'frames', u'and', u'long', u'strings', u'are', u'sometimes', u'called', u'``', u'upright', u'grand', u"''", u'pianos', u'.'], u'lemmas': [u'upright', u'piano', u'with', u'unusually', u'tall', u'frame', u'and', u'long', u'string', u'be', u'sometimes', u'call', u'``', u'upright', u'grand', u"''", u'piano', u'.'], u'pos': [u'JJ', u'NNS', u'IN', u'RB', u'JJ', u'NNS', u'CC', u'JJ', u'NNS', u'VBP', u'RB', u'VBN', u'``', u'JJ', u'JJ', u"''", u'NNS', u'.'], u'char_offsets': [[16207, 16214], [16215, 16221], [16222, 16226], [16227, 16236], [16237, 16241], [16242, 16248], [16249, 16252], [16253, 16257], [16258, 16265], [16266, 16269], [16270, 16279], [16280, 16286], [16287, 16288], [16288, 16295], [16296, 16301], [16301, 16302], [16303, 16309], [16309, 16310]]}) 
answer: set([u'vertical'])
candidate Sentence: (0.45344224572181702, {u'tokens': [u'Hence', u',', u'pianos', u'have', u'gained', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'are', u'sometimes', u'referred', u'to', u'by', u'nicknames', u'including', u':', u'``', u'the', u'ivories', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-LRB-', u's', u'-RRB-', u'and', u'white', u'-LRB-', u's', u'-RRB-', u"''", u',', u'``', u'the', u'little', u'joe', u'-LRB-', u's', u'-RRB-', u"''", u'.'], u'lemmas': [u'hence', u',', u'piano', u'have', u'gain', u'a', u'place', u'in', u'the', u'popular', u'consciousness', u',', u'and', u'be', u'sometimes', u'refer', u'to', u'by', u'nickname', u'include', u':', u'``', u'the', u'ivory', u"''", u',', u'``', u'the', u'joanna', u"''", u',', u'``', u'the', u'eighty-eight', u"''", u',', u'and', u'``', u'the', u'black', u'-lrb-', u's', u'-rrb-', u'and', u'white', u'-lrb-', u's', u'-rrb-', u"''", u',', u'``', u'the', u'little', u'joe', u'-lrb-', u's', u'-rrb-', u"''", u'.'], u'pos': [u'RB', u',', u'NNS', u'VBP', u'VBN', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u',', u'CC', u'VBP', u'RB', u'VBN', u'TO', u'IN', u'NNS', u'VBG', u':', u'``', u'DT', u'NNS', u"''", u',', u'``', u'DT', u'NN', u"''", u',', u'``', u'DT', u'CD', u"''", u',', u'CC', u'``', u'DT', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u'CC', u'JJ', u'-LRB-', u'NNS', u'-RRB-', u"''", u',', u'``', u'DT', u'JJ', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'.'], u'char_offsets': [[31714, 31719], [31719, 31720], [31721, 31727], [31728, 31732], [31733, 31739], [31740, 31741], [31742, 31747], [31748, 31750], [31751, 31754], [31755, 31762], [31763, 31776], [31776, 31777], [31778, 31781], [31782, 31785], [31786, 31795], [31796, 31804], [31805, 31807], [31808, 31810], [31811, 31820], [31821, 31830], [31830, 31831], [31832, 31833], [31833, 31836], [31837, 31844], [31844, 31845], [31845, 31846], [31847, 31848], [31848, 31851], [31852, 31858], [31858, 31859], [31859, 31860], [31861, 31862], [31862, 31865], [31866, 31878], [31878, 31879], [31879, 31880], [31881, 31884], [31885, 31886], [31886, 31889], [31890, 31895], [31895, 31896], [31896, 31897], [31897, 31898], [31899, 31902], [31903, 31908], [31908, 31909], [31909, 31910], [31910, 31911], [31911, 31912], [31912, 31913], [31914, 31915], [31915, 31918], [31919, 31925], [31926, 31929], [31929, 31930], [31930, 31931], [31931, 31932], [31932, 31933], [31933, 31934]]}) 
answer: set([u'upright', u'call', u'vertical'])
candidate Sentence: (0.35582134127616882, {u'tokens': [u'Upright', u'piano', u'Upright', u'pianos', u',', u'also', u'called', u'vertical', u'pianos', u',', u'are', u'more', u'compact', u'because', u'the', u'frame', u'and', u'strings', u'are', u'vertical', u'.'], u'lemmas': [u'upright', u'piano', u'Upright', u'piano', u',', u'also', u'call', u'vertical', u'piano', u',', u'be', u'more', u'compact', u'because', u'the', u'frame', u'and', u'string', u'be', u'vertical', u'.'], u'pos': [u'JJ', u'NN', u'NNP', u'NNS', u',', u'RB', u'VBN', u'JJ', u'NNS', u',', u'VBP', u'RBR', u'JJ', u'IN', u'DT', u'NN', u'CC', u'NNS', u'VBP', u'JJ', u'.'], u'char_offsets': [[15130, 15137], [15138, 15143], [15145, 15152], [15153, 15159], [15159, 15160], [15161, 15165], [15166, 15172], [15173, 15181], [15182, 15188], [15188, 15189], [15190, 15193], [15194, 15198], [15199, 15206], [15207, 15214], [15215, 15218], [15219, 15224], [15225, 15228], [15229, 15236], [15237, 15240], [15242, 15250], [15250, 15251]]}) 
answer: set([u"''", u'``'])
candidate Sentence: (0.34465831518173218, {u'tokens': [u'At', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovated', u'a', u'plastic', u'called', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitated', u'by', u'other', u'makers', u',', u'that', u'mimics', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'lemmas': [u'at', u'one', u'time', u',', u'the', u'Yamaha', u'firm', u'innovate', u'a', u'plastic', u'call', u'``', u'Ivorine', u"''", u'or', u'``', u'Ivorite', u"''", u',', u'since', u'imitate', u'by', u'other', u'maker', u',', u'that', u'mimic', u'the', u'look', u'and', u'feel', u'of', u'ivory', u'.'], u'pos': [u'IN', u'CD', u'NN', u',', u'DT', u'NNP', u'NN', u'VBD', u'DT', u'NN', u'VBN', u'``', u'NNP', u"''", u'CC', u'``', u'NNP', u"''", u',', u'IN', u'VBN', u'IN', u'JJ', u'NNS', u',', u'IN', u'VBZ', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[30152, 30154], [30155, 30158], [30159, 30163], [30163, 30164], [30165, 30168], [30169, 30175], [30176, 30180], [30181, 30190], [30191, 30192], [30193, 30200], [30201, 30207], [30208, 30209], [30209, 30216], [30216, 30217], [30218, 30220], [30221, 30222], [30222, 30229], [30229, 30230], [30230, 30231], [30232, 30237], [30238, 30246], [30247, 30249], [30250, 30255], [30256, 30262], [30262, 30263], [30264, 30268], [30269, 30275], [30276, 30279], [30280, 30284], [30285, 30288], [30289, 30293], [30294, 30296], [30297, 30302], [30302, 30303]]}) 
answer: set([u'upright', u'piano', u'vertical'])

Are "upright pianos" called "vertical pianos"?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3bd8>.answer
_____________________________ test_yesno[param251] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3c68>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3c68>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.25402593612670898, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2733, 2736], [2737, 2746], [2747, 2749], [2750, 2753], [2754, 2760], [2761, 2766], [2767, 2769], [2770, 2778], [2779, 2781], [2782, 2792], [2793, 2803], [2804, 2806], [2807, 2812], [2812, 2813], [2814, 2819], [2819, 2820], [2821, 2824], [2825, 2828], [2829, 2837], [2838, 2840], [2841, 2847], [2848, 2857], [2858, 2860], [2861, 2867], [2868, 2870], [2871, 2874], [2875, 2881], [2882, 2884], [2885, 2888], [2889, 2900], [2900, 2901]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18729622662067413, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4566, 4576], [4576, 4578], [4579, 4585], [4586, 4590], [4591, 4600], [4601, 4607], [4608, 4614], [4615, 4617], [4618, 4628], [4628, 4630], [4630, 4631], [4632, 4636], [4637, 4640], [4641, 4650], [4651, 4659], [4659, 4660], [4661, 4671], [4672, 4680], [4681, 4684], [4685, 4695], [4696, 4698], [4699, 4702], [4703, 4709], [4710, 4716], [4717, 4722], [4722, 4723], [4724, 4729], [4730, 4735], [4736, 4739], [4740, 4743], [4744, 4751], [4752, 4756], [4757, 4760], [4761, 4768], [4769, 4771], [4772, 4776], [4776, 4777]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14144092798233032, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2549, 2557], [2558, 2564], [2565, 2570], [2571, 2576], [2577, 2582], [2583, 2585], [2586, 2593], [2593, 2594], [2595, 2603], [2604, 2606], [2607, 2615], [2616, 2626], [2627, 2630], [2631, 2637], [2638, 2645], [2646, 2650], [2651, 2654], [2655, 2659], [2660, 2662], [2663, 2673], [2674, 2685], [2686, 2687], [2687, 2690], [2691, 2695], [2695, 2696], [2697, 2701], [2702, 2710], [2711, 2720], [2721, 2731], [2731, 2732]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.1403173953294754, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[28063, 28066], [28067, 28070], [28071, 28073], [28074, 28082], [28083, 28086], [28087, 28092], [28093, 28099], [28099, 28100], [28101, 28108], [28108, 28109], [28110, 28113], [28114, 28117], [28118, 28124], [28125, 28131], [28132, 28140], [28141, 28144], [28145, 28148], [28149, 28161], [28161, 28162]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12957113981246948, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[19077, 19082], [19083, 19087], [19088, 19099], [19100, 19109], [19110, 19112], [19113, 19123], [19124, 19131], [19132, 19134], [19135, 19140], [19141, 19145], [19145, 19146], [19148, 19152], [19153, 19160], [19161, 19167], [19168, 19170], [19171, 19174], [19175, 19180], [19181, 19184], [19185, 19189], [19190, 19192], [19193, 19196], [19197, 19201], [19202, 19210], [19211, 19217], [19217, 19218]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3c68>.answer
_____________________________ test_yesno[param252] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3cf8>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3cf8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.25402593612670898, {u'tokens': [u'The', u'invention', u'of', u'the', u'modern', u'piano', u'is', u'credited', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'was', u'employed', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'Keeper', u'of', u'the', u'Instruments', u'.'], u'lemmas': [u'the', u'invention', u'of', u'the', u'modern', u'piano', u'be', u'credit', u'to', u'Bartolomeo', u'Cristofori', u'of', u'Padua', u',', u'Italy', u',', u'who', u'be', u'employ', u'by', u'Prince', u'Ferdinand', u'de', u'Medici', u'as', u'the', u'keeper', u'of', u'the', u'Instruments', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'NNP', u'NNP', u'IN', u'NNP', u',', u'NNP', u',', u'WP', u'VBD', u'VBN', u'IN', u'NNP', u'NNP', u'IN', u'NNP', u'IN', u'DT', u'NN', u'IN', u'DT', u'NNPS', u'.'], u'char_offsets': [[2733, 2736], [2737, 2746], [2747, 2749], [2750, 2753], [2754, 2760], [2761, 2766], [2767, 2769], [2770, 2778], [2779, 2781], [2782, 2792], [2793, 2803], [2804, 2806], [2807, 2812], [2812, 2813], [2814, 2819], [2819, 2820], [2821, 2824], [2825, 2828], [2829, 2837], [2838, 2840], [2841, 2847], [2848, 2857], [2858, 2860], [2861, 2867], [2868, 2870], [2871, 2874], [2875, 2881], [2882, 2884], [2885, 2888], [2889, 2900], [2900, 2901]]}) 
answer: set([u'invent'])
candidate Sentence: (0.18729622662067413, {u'tokens': [u'Silbermann', u"'s", u'pianos', u'were', u'virtually', u'direct', u'copies', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invented', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lifts', u'all', u'the', u'dampers', u'from', u'the', u'strings', u'at', u'once', u'.'], u'lemmas': [u'Silbermann', u"'s", u'piano', u'be', u'virtually', u'direct', u'copy', u'of', u'Cristofori', u"'s", u',', u'with', u'one', u'important', u'addition', u':', u'Silbermann', u'invent', u'the', u'forerunner', u'of', u'the', u'modern', u'damper', u'pedal', u',', u'which', u'lift', u'all', u'the', u'damper', u'from', u'the', u'string', u'at', u'once', u'.'], u'pos': [u'NNP', u'POS', u'NNS', u'VBD', u'RB', u'JJ', u'NNS', u'IN', u'NNP', u'POS', u',', u'IN', u'CD', u'JJ', u'NN', u':', u'NNP', u'VBD', u'DT', u'NN', u'IN', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBZ', u'PDT', u'DT', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'RB', u'.'], u'char_offsets': [[4566, 4576], [4576, 4578], [4579, 4585], [4586, 4590], [4591, 4600], [4601, 4607], [4608, 4614], [4615, 4617], [4618, 4628], [4628, 4630], [4630, 4631], [4632, 4636], [4637, 4640], [4641, 4650], [4651, 4659], [4659, 4660], [4661, 4671], [4672, 4680], [4681, 4684], [4685, 4695], [4696, 4698], [4699, 4702], [4703, 4709], [4710, 4716], [4717, 4722], [4722, 4723], [4724, 4729], [4730, 4735], [4736, 4739], [4740, 4743], [4744, 4751], [4752, 4756], [4757, 4760], [4761, 4768], [4769, 4771], [4772, 4776], [4776, 4777]]}) 
answer: set([u'bartolomeo'])
candidate Sentence: (0.14144092798233032, {u'tokens': [u'Earliest', u'French', u'grand', u'piano', u'known', u'to', u'survive', u';', u'includes', u'an', u'inverted', u'wrestplank', u'and', u'action', u'derived', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-LRB-', u'ca.', u'1700', u'-RRB-', u'with', u'ornately', u'decorated', u'soundboard', u'.'], u'lemmas': [u'earliest', u'french', u'grand', u'piano', u'know', u'to', u'survive', u';', u'include', u'a', u'inverted', u'wrestplank', u'and', u'action', u'derive', u'from', u'the', u'work', u'of', u'Bartolomeo', u'Cristofiori', u'-lrb-', u'ca.', u'1700', u'-rrb-', u'with', u'ornately', u'decorate', u'soundboard', u'.'], u'pos': [u'JJS', u'JJ', u'JJ', u'NN', u'VBN', u'TO', u'VB', u':', u'VBZ', u'DT', u'JJ', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'-LRB-', u'FW', u'CD', u'-RRB-', u'IN', u'RB', u'VBN', u'NN', u'.'], u'char_offsets': [[2549, 2557], [2558, 2564], [2565, 2570], [2571, 2576], [2577, 2582], [2583, 2585], [2586, 2593], [2593, 2594], [2595, 2603], [2604, 2606], [2607, 2615], [2616, 2626], [2627, 2630], [2631, 2637], [2638, 2645], [2646, 2650], [2651, 2654], [2655, 2659], [2660, 2662], [2663, 2673], [2674, 2685], [2686, 2687], [2687, 2690], [2691, 2695], [2695, 2696], [2697, 2701], [2702, 2710], [2711, 2720], [2721, 2731], [2731, 2732]]}) 
answer: set([u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.1403173953294754, {u'tokens': [u'The', u'use', u'of', u'aluminum', u'for', u'piano', u'plates', u',', u'however', u',', u'did', u'not', u'become', u'widely', u'accepted', u'and', u'was', u'discontinued', u'.'], u'lemmas': [u'the', u'use', u'of', u'aluminum', u'for', u'piano', u'plate', u',', u'however', u',', u'do', u'not', u'become', u'widely', u'accept', u'and', u'be', u'discontinue', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NN', u'IN', u'NN', u'NNS', u',', u'RB', u',', u'VBD', u'RB', u'VB', u'RB', u'VBN', u'CC', u'VBD', u'VBN', u'.'], u'char_offsets': [[28063, 28066], [28067, 28070], [28071, 28073], [28074, 28082], [28083, 28086], [28087, 28092], [28093, 28099], [28099, 28100], [28101, 28108], [28108, 28109], [28110, 28113], [28114, 28117], [28118, 28124], [28125, 28131], [28132, 28140], [28141, 28144], [28145, 28148], [28149, 28161], [28161, 28162]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])
candidate Sentence: (0.12957113981246948, {u'tokens': [u'Since', u'this', u'sympathetic', u'vibration', u'is', u'considered', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'pianos', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'pianos', u'.'], u'lemmas': [u'since', u'this', u'sympathetic', u'vibration', u'be', u'consider', u'central', u'to', u'piano', u'tone', u',', u'many', u'digital', u'piano', u'do', u'not', u'sound', u'the', u'same', u'as', u'the', u'best', u'acoustic', u'piano', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'JJ', u'TO', u'NN', u'NN', u',', u'JJ', u'JJ', u'NNS', u'VBP', u'RB', u'VB', u'DT', u'JJ', u'IN', u'DT', u'JJS', u'JJ', u'NNS', u'.'], u'char_offsets': [[19077, 19082], [19083, 19087], [19088, 19099], [19100, 19109], [19110, 19112], [19113, 19123], [19124, 19131], [19132, 19134], [19135, 19140], [19141, 19145], [19145, 19146], [19148, 19152], [19153, 19160], [19161, 19167], [19168, 19170], [19171, 19174], [19175, 19180], [19181, 19184], [19185, 19189], [19190, 19192], [19193, 19196], [19197, 19201], [19202, 19210], [19211, 19217], [19217, 19218]]}) 
answer: set([u'bartolomeo', u'modern', u'cristofori', u'invent'])

Did Bartolomeo Cristofori invent the modern piano?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3cf8>.answer
_____________________________ test_yesno[param253] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3d88>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3d88>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.49168619513511658, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22525, 22528], [22529, 22533], [22534, 22539], [22540, 22542], [22543, 22546], [22547, 22552], [22553, 22558], [22559, 22561], [22562, 22568], [22569, 22577], [22578, 22580], [22581, 22584], [22585, 22588], [22589, 22591], [22592, 22598], [22598, 22599]]}) 
answer: set([u'left-most', u'on', u'call', u'a', u'grand', u'piano'])
candidate Sentence: (0.48644760251045227, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21743, 21748], [21749, 21755], [21756, 21760], [21761, 21765], [21766, 21768], [21769, 21774], [21774, 21775], [21776, 21779], [21780, 21785], [21785, 21786], [21787, 21796], [21796, 21797], [21798, 21801], [21802, 21808], [21808, 21809]]}) 
answer: set([u'left-most', u'on', u'call', u'a', u'grand', u'the'])
candidate Sentence: (0.43917220830917358, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21988, 21992], [21993, 21998], [21999, 22005], [22006, 22010], [22011, 22016], [22017, 22023], [22023, 22024], [22025, 22029], [22030, 22035], [22036, 22037], [22037, 22040], [22041, 22046], [22046, 22047], [22047, 22048], [22049, 22058], [22058, 22059], [22060, 22063], [22064, 22071], [22072, 22077], [22078, 22079], [22079, 22083], [22084, 22088], [22089, 22091], [22092, 22097], [22097, 22098], [22099, 22111], [22111, 22112], [22112, 22113]]}) 
answer: set([u'left-most', u'on', u'the', u'call', u'a'])
candidate Sentence: (0.34387490153312683, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[23054, 23056], [23057, 23062], [23063, 23069], [23069, 23070], [23071, 23074], [23075, 23081], [23082, 23087], [23088, 23090], [23091, 23092], [23093, 23102], [23103, 23108], [23108, 23109]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27837368845939636, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10277, 10282], [10283, 10288], [10288, 10289]]}) 
answer: set([u'left-most', u'on', u'corda', u'una', u'call', u'a', u'pedal', u'the'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3d88>.answer
_____________________________ test_yesno[param254] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3e18>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
E                +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3e18>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.49168619513511658, {u'tokens': [u'The', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'is', u'placed', u'leftmost', u'in', u'the', u'row', u'of', u'pedals', u'.'], u'lemmas': [u'the', u'soft', u'pedal', u'or', u'una', u'corda', u'pedal', u'be', u'place', u'leftmost', u'in', u'the', u'row', u'of', u'pedal', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'CC', u'FW', u'FW', u'NN', u'VBZ', u'VBN', u'JJS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[22525, 22528], [22529, 22533], [22534, 22539], [22540, 22542], [22543, 22546], [22547, 22552], [22553, 22558], [22559, 22561], [22562, 22568], [22569, 22577], [22578, 22580], [22581, 22584], [22585, 22588], [22589, 22591], [22592, 22598], [22598, 22599]]}) 
answer: set([u'left-most', u'on', u'call', u'a', u'grand', u'piano'])
candidate Sentence: (0.48644760251045227, {u'tokens': [u'Piano', u'pedals', u'from', u'left', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'lemmas': [u'piano', u'pedal', u'from', u'leave', u'to', u'right', u':', u'una', u'corda', u',', u'sostenuto', u',', u'and', u'damper', u'.'], u'pos': [u'NN', u'NNS', u'IN', u'VBN', u'TO', u'NN', u':', u'FW', u'FW', u',', u'NN', u',', u'CC', u'NN', u'.'], u'char_offsets': [[21743, 21748], [21749, 21755], [21756, 21760], [21761, 21765], [21766, 21768], [21769, 21774], [21774, 21775], [21776, 21779], [21780, 21785], [21785, 21786], [21787, 21796], [21796, 21797], [21798, 21801], [21802, 21808], [21808, 21809]]}) 
answer: set([u'left-most', u'on', u'call', u'a', u'grand', u'the'])
candidate Sentence: (0.43917220830917358, {u'tokens': [u'Most', u'grand', u'pianos', u'have', u'three', u'pedals', u':', u'soft', u'pedal', u'-LRB-', u'una', u'corda', u'-RRB-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-LRB-', u'from', u'left', u'to', u'right', u',', u'respectively', u'-RRB-', u'.'], u'lemmas': [u'most', u'grand', u'piano', u'have', u'three', u'pedal', u':', u'soft', u'pedal', u'-lrb-', u'una', u'corda', u'-rrb-', u',', u'sostenuto', u',', u'and', u'sustain', u'pedal', u'-lrb-', u'from', u'leave', u'to', u'right', u',', u'respectively', u'-rrb-', u'.'], u'pos': [u'JJS', u'JJ', u'NNS', u'VBP', u'CD', u'NNS', u':', u'JJ', u'NN', u'-LRB-', u'FW', u'FW', u'-RRB-', u',', u'NN', u',', u'CC', u'VB', u'NN', u'-LRB-', u'IN', u'VBN', u'TO', u'RB', u',', u'RB', u'-RRB-', u'.'], u'char_offsets': [[21988, 21992], [21993, 21998], [21999, 22005], [22006, 22010], [22011, 22016], [22017, 22023], [22023, 22024], [22025, 22029], [22030, 22035], [22036, 22037], [22037, 22040], [22041, 22046], [22046, 22047], [22047, 22048], [22049, 22058], [22058, 22059], [22060, 22063], [22064, 22071], [22072, 22077], [22078, 22079], [22079, 22083], [22084, 22088], [22089, 22091], [22092, 22097], [22097, 22098], [22099, 22111], [22111, 22112], [22112, 22113]]}) 
answer: set([u'left-most', u'on', u'the', u'call', u'a'])
candidate Sentence: (0.34387490153312683, {u'tokens': [u'On', u'grand', u'pianos', u',', u'the', u'middle', u'pedal', u'is', u'a', u'sostenuto', u'pedal', u'.'], u'lemmas': [u'on', u'grand', u'piano', u',', u'the', u'middle', u'pedal', u'be', u'a', u'sostenuto', u'pedal', u'.'], u'pos': [u'IN', u'JJ', u'NNS', u',', u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[23054, 23056], [23057, 23062], [23063, 23069], [23069, 23070], [23071, 23074], [23075, 23081], [23082, 23087], [23088, 23090], [23091, 23092], [23093, 23102], [23103, 23108], [23108, 23109]]}) 
answer: set([u'left-most', u'corda', u'call', u'una'])
candidate Sentence: (0.27837368845939636, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10277, 10282], [10283, 10288], [10288, 10289]]}) 
answer: set([u'left-most', u'on', u'corda', u'una', u'call', u'a', u'pedal', u'the'])

Is the left-most pedal on a grand piano called the una corda?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, the left-most pedal on a grand piano is called the una corda.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, the left-most pedal on a grand piano is called the una corda.')
 +    where 'Yes, the left-most pedal on a grand piano is called the una corda.' = <src.question_processing.Question_parser instance at 0x7fbca0ce3e18>.answer
_____________________________ test_yesno[param255] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3ea8>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3ea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.90354269742965698, {u'tokens': [u'It', u'is', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'lemmas': [u'it', u'be', u'advantageous', u'for', u'the', u'plate', u'to', u'be', u'quite', u'massive', u'.'], u'pos': [u'PRP', u'VBZ', u'JJ', u'IN', u'DT', u'NN', u'TO', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[27151, 27153], [27154, 27156], [27157, 27169], [27170, 27173], [27174, 27177], [27178, 27183], [27184, 27186], [27187, 27189], [27190, 27195], [27196, 27203], [27203, 27204]]}) 
answer: set([u'a', u'metal', u'piano', u"'s", u'grand'])
candidate Sentence: (0.21552127599716187, {u'tokens': [u'The', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'is', u'usually', u'made', u'of', u'cast', u'iron', u'.'], u'lemmas': [u'the', u'plate', u',', u'or', u'metal', u'frame', u',', u'of', u'a', u'piano', u'be', u'usually', u'make', u'of', u'cast', u'iron', u'.'], u'pos': [u'DT', u'NN', u',', u'CC', u'NN', u'NN', u',', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'IN', u'NN', u'NN', u'.'], u'char_offsets': [[27083, 27086], [27087, 27092], [27092, 27093], [27094, 27096], [27097, 27102], [27103, 27108], [27108, 27109], [27110, 27112], [27113, 27114], [27115, 27120], [27121, 27123], [27124, 27131], [27132, 27136], [27137, 27139], [27140, 27144], [27145, 27149], [27149, 27150]]}) 
answer: set([u"'s", u'for', u'advantageous', u'it', u'quite', u'to', u'massive', u'grand'])
candidate Sentence: (0.184771329164505, {u'tokens': [u'grand', u'piano', u'.'], u'lemmas': [u'grand', u'piano', u'.'], u'pos': [u'JJ', u'NN', u'.'], u'char_offsets': [[10277, 10282], [10283, 10288], [10288, 10289]]}) 
answer: set([u'a', u'plate', u"'s", u'for', u'advantageous', u'metal', u'it', u'quite', u'to', u'massive'])
candidate Sentence: (0.11816048622131348, {u'tokens': [u'The', u'inclusion', u'in', u'a', u'piano', u'of', u'an', u'extremely', u'large', u'piece', u'of', u'metal', u'is', u'potentially', u'an', u'aesthetic', u'handicap', u',', u'which', u'piano', u'makers', u'overcome', u'by', u'polishing', u',', u'painting', u'and', u'decorating', u'the', u'plate', u'.'], u'lemmas': [u'the', u'inclusion', u'in', u'a', u'piano', u'of', u'a', u'extremely', u'large', u'piece', u'of', u'metal', u'be', u'potentially', u'a', u'aesthetic', u'handicap', u',', u'which', u'piano', u'maker', u'overcome', u'by', u'polish', u',', u'painting', u'and', u'decorate', u'the', u'plate', u'.'], u'pos': [u'DT', u'NN', u'IN', u'DT', u'NN', u'IN', u'DT', u'RB', u'JJ', u'NN', u'IN', u'NN', u'VBZ', u'RB', u'DT', u'JJ', u'NN', u',', u'WDT', u'NN', u'NNS', u'VBN', u'IN', u'VBG', u',', u'NN', u'CC', u'VBG', u'DT', u'NN', u'.'], u'char_offsets': [[27640, 27643], [27644, 27653], [27654, 27656], [27657, 27658], [27659, 27664], [27665, 27667], [27668, 27670], [27671, 27680], [27681, 27686], [27687, 27692], [27693, 27695], [27696, 27701], [27702, 27704], [27705, 27716], [27717, 27719], [27720, 27729], [27730, 27738], [27738, 27739], [27740, 27745], [27746, 27751], [27752, 27758], [27759, 27767], [27768, 27770], [27771, 27780], [27780, 27781], [27782, 27790], [27791, 27794], [27795, 27805], [27806, 27809], [27810, 27815], [27815, 27816]]}) 
answer: set([u"'s", u'for', u'advantageous', u'it', u'quite', u'to', u'massive', u'grand'])
candidate Sentence: (0.10768242180347443, {u'tokens': [u'Plates', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'lemmas': [u'plate', u'often', u'include', u'the', u'manufacturer', u"'s", u'ornamental', u'medallion', u'and', u'can', u'be', u'strikingly', u'attractive', u'.'], u'pos': [u'NNS', u'RB', u'VBP', u'DT', u'NN', u'POS', u'JJ', u'NN', u'CC', u'MD', u'VB', u'RB', u'JJ', u'.'], u'char_offsets': [[27817, 27823], [27824, 27829], [27830, 27837], [27838, 27841], [27842, 27854], [27854, 27856], [27857, 27867], [27868, 27877], [27878, 27881], [27882, 27885], [27886, 27888], [27889, 27899], [27900, 27910], [27910, 27911]]}) 
answer: set([u'a', u'for', u'advantageous', u'metal', u'it', u'quite', u'to', u'massive', u'grand', u'piano'])

Is it advantageous for a grand piano's metal plate to be quite massive?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3ea8>.answer
_____________________________ test_yesno[param257] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce3fc8>, <src.tfidf.TF_IDF object at 0x7fbca4915050>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3fc8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.89073705673217773, {u'tokens': [u'The', u'mechanism', u'in', u'upright', u'pianos', u'is', u'perpendicular', u'to', u'the', u'keys', u'.'], u'lemmas': [u'the', u'mechanism', u'in', u'upright', u'piano', u'be', u'perpendicular', u'to', u'the', u'key', u'.'], u'pos': [u'DT', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJ', u'TO', u'DT', u'NNS', u'.'], u'char_offsets': [[11850, 11853], [11854, 11863], [11864, 11866], [11867, 11874], [11875, 11881], [11882, 11884], [11885, 11898], [11899, 11901], [11902, 11905], [11906, 11910], [11910, 11911]]}) 
answer: set([u'a', u'its'])
candidate Sentence: (0.26950547099113464, {u'tokens': [u'A', u'prepared', u'piano', u'is', u'a', u'standard', u'grand', u'piano', u'which', u'has', u'had', u'objects', u'placed', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'has', u'had', u'its', u'mechanism', u'changed', u'in', u'some', u'way', u'.'], u'lemmas': [u'a', u'prepared', u'piano', u'be', u'a', u'standard', u'grand', u'piano', u'which', u'have', u'have', u'object', u'place', u'inside', u'it', u'before', u'a', u'performance', u'in', u'order', u'to', u'alter', u'its', u'sound', u',', u'or', u'which', u'have', u'have', u'its', u'mechanism', u'change', u'in', u'some', u'way', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'DT', u'JJ', u'JJ', u'NN', u'WDT', u'VBZ', u'VBN', u'NNS', u'VBD', u'IN', u'PRP', u'IN', u'DT', u'NN', u'IN', u'NN', u'TO', u'VB', u'PRP$', u'NN', u',', u'CC', u'WDT', u'VBZ', u'VBN', u'PRP$', u'NN', u'VBD', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[18039, 18040], [18041, 18049], [18050, 18055], [18056, 18058], [18059, 18060], [18061, 18069], [18070, 18075], [18076, 18081], [18082, 18087], [18088, 18091], [18092, 18095], [18096, 18103], [18104, 18110], [18111, 18117], [18118, 18120], [18121, 18127], [18128, 18129], [18130, 18141], [18142, 18144], [18145, 18150], [18151, 18153], [18154, 18159], [18160, 18163], [18164, 18169], [18169, 18170], [18171, 18173], [18174, 18179], [18180, 18183], [18184, 18187], [18188, 18191], [18192, 18201], [18202, 18209], [18210, 18212], [18213, 18217], [18218, 18221], [18221, 18222]]}) 
answer: set([u'upright', u'the', u'perpendicular', u'key'])
candidate Sentence: (0.1640232652425766, {u'tokens': [u'The', u'extra', u'keys', u'are', u'the', u'same', u'as', u'the', u'other', u'keys', u'in', u'appearance', u'.'], u'lemmas': [u'the', u'extra', u'key', u'be', u'the', u'same', u'as', u'the', u'other', u'key', u'in', u'appearance', u'.'], u'pos': [u'DT', u'JJ', u'NNS', u'VBP', u'DT', u'JJ', u'IN', u'DT', u'JJ', u'NNS', u'IN', u'NN', u'.'], u'char_offsets': [[21216, 21219], [21220, 21225], [21226, 21230], [21231, 21234], [21235, 21238], [21239, 21243], [21244, 21246], [21247, 21250], [21251, 21256], [21257, 21261], [21262, 21264], [21265, 21275], [21275, 21276]]}) 
answer: set([u'a', u'perpendicular', u'mechanism', u'to', u'upright', u'piano', u'its'])
candidate Sentence: (0.14895692467689514, {u'tokens': [u'The', u'entire', u'action', u'of', u'the', u'piano', u'is', u'thus', u'shifted', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'written', u'in', u'one', u'key', u'so', u'that', u'it', u'sounds', u'in', u'a', u'different', u'key', u'.'], u'lemmas': [u'the', u'entire', u'action', u'of', u'the', u'piano', u'be', u'thus', u'shift', u'to', u'allow', u'the', u'pianist', u'to', u'play', u'music', u'write', u'in', u'one', u'key', u'so', u'that', u'it', u'sound', u'in', u'a', u'different', u'key', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'TO', u'VB', u'DT', u'NN', u'TO', u'VB', u'NN', u'VBN', u'IN', u'CD', u'NN', u'IN', u'IN', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[24501, 24504], [24505, 24511], [24512, 24518], [24519, 24521], [24522, 24525], [24526, 24531], [24532, 24534], [24535, 24539], [24540, 24547], [24548, 24550], [24551, 24556], [24557, 24560], [24561, 24568], [24569, 24571], [24572, 24576], [24577, 24582], [24583, 24590], [24591, 24593], [24594, 24597], [24598, 24601], [24602, 24604], [24605, 24609], [24610, 24612], [24613, 24619], [24620, 24622], [24623, 24624], [24625, 24634], [24635, 24638], [24638, 24639]]}) 
answer: set([u'upright', u'perpendicular', u'mechanism', u'its'])
candidate Sentence: (0.14317569136619568, {u'tokens': [u'In', u'1821', u',', u'Sbastien', u'rard', u'invented', u'the', u'double', u'escapement', u'action', u',', u'which', u'permitted', u'a', u'note', u'to', u'be', u'repeated', u'even', u'if', u'the', u'key', u'had', u'not', u'yet', u'risen', u'to', u'its', u'maximum', u'vertical', u'position', u'.'], u'lemmas': [u'in', u'1821', u',', u'Sbastien', u'rard', u'invent', u'the', u'double', u'escapement', u'action', u',', u'which', u'permit', u'a', u'note', u'to', u'be', u'repeat', u'even', u'if', u'the', u'key', u'have', u'not', u'yet', u'rise', u'to', u'its', u'maximum', u'vertical', u'position', u'.'], u'pos': [u'IN', u'CD', u',', u'NNP', u'NN', u'VBD', u'DT', u'JJ', u'NN', u'NN', u',', u'WDT', u'VBD', u'DT', u'NN', u'TO', u'VB', u'VBN', u'RB', u'IN', u'DT', u'NN', u'VBD', u'RB', u'RB', u'VBN', u'TO', u'PRP$', u'NN', u'JJ', u'NN', u'.'], u'char_offsets': [[7672, 7674], [7675, 7679], [7679, 7680], [7681, 7689], [7690, 7694], [7695, 7703], [7704, 7707], [7708, 7714], [7715, 7725], [7726, 7732], [7732, 7733], [7734, 7739], [7740, 7749], [7750, 7751], [7752, 7756], [7757, 7759], [7760, 7762], [7763, 7771], [7772, 7776], [7777, 7779], [7780, 7783], [7784, 7787], [7788, 7791], [7792, 7795], [7796, 7799], [7800, 7805], [7806, 7808], [7809, 7812], [7813, 7820], [7821, 7829], [7830, 7838], [7838, 7839]]}) 
answer: set([u'upright', u'piano', u'perpendicular', u'mechanism'])

Is the mechanism in an upright piano perpendicular to its keys?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 500 documents, 22627 characters, 4419 tokens, 45.3 char/doc, 8.8 tok/doc RATES: 26.830 doc/sec, 237.1 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce3fc8>.answer
_____________________________ test_yesno[param261] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7248>, <src.tfidf.TF_IDF object at 0x7fbca2304450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7248>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.20977473258972168, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[12456, 12464], [12465, 12467], [12468, 12471], [12472, 12479], [12480, 12489], [12490, 12492], [12493, 12496], [12497, 12499], [12499, 12500], [12501, 12504], [12505, 12511], [12512, 12519], [12520, 12524], [12525, 12529], [12530, 12533], [12534, 12539], [12540, 12548], [12548, 12549], [12550, 12554], [12555, 12560], [12561, 12564], [12565, 12572], [12573, 12582], [12583, 12590], [12590, 12591]]}) 
answer: set([u'portuguese', u'root', u'its', u'have'])
candidate Sentence: (0.20432870090007782, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcium', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32433, 32434], [32435, 32438], [32439, 32444], [32445, 32446], [32447, 32452], [32453, 32459], [32459, 32460]]}) 
answer: set([u'portuguese', u'latin', u'language', u'have', u'in', u'the', u'root', u'its'])
candidate Sentence: (0.17607255280017853, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[13365, 13368], [13369, 13377], [13378, 13387], [13388, 13395], [13396, 13398], [13399, 13400], [13401, 13414], [13415, 13425], [13426, 13434], [13435, 13438], [13439, 13453], [13454, 13463], [13464, 13466], [13467, 13470], [13471, 13474], [13475, 13482], [13482, 13483], [13484, 13489], [13490, 13502], [13503, 13507], [13508, 13512], [13513, 13518], [13519, 13526], [13526, 13527]]}) 
answer: set([u'root', u'its', u'have', u'in'])
candidate Sentence: (0.17502373456954956, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'ltima', u'notcium', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32399, 32401], [32402, 32405], [32406, 32407], [32407, 32410], [32411, 32417], [32418, 32419], [32420, 32425], [32426, 32432], [32432, 32433]]}) 
answer: set([u'portuguese', u'latin', u'language', u'have', u'in', u'the', u'root', u'its'])
candidate Sentence: (0.16246002912521362, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[32306, 32308], [32309, 32312], [32313, 32318], [32319, 32323], [32323, 32324], [32325, 32328], [32329, 32336], [32337, 32348], [32349, 32351], [32352, 32355], [32356, 32364], [32365, 32366], [32366, 32370], [32371, 32374], [32375, 32380], [32381, 32384], [32385, 32391], [32392, 32396], [32396, 32397], [32397, 32398]]}) 
answer: set([u'portuguese', u'latin', u'language', u'in', u'root', u'its'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7248>.answer
_____________________________ test_yesno[param262] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce72d8>, <src.tfidf.TF_IDF object at 0x7fbca2304450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese is derived from Latin.')
E                +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x7fbca0ce72d8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.20977473258972168, {u'tokens': [u'Arriving', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'BC', u',', u'the', u'Romans', u'brought', u'with', u'them', u'the', u'Latin', u'language', u',', u'from', u'which', u'all', u'Romance', u'languages', u'descend', u'.'], u'lemmas': [u'arrive', u'in', u'the', u'Iberian', u'Peninsula', u'in', u'216', u'bc', u',', u'the', u'Romans', u'bring', u'with', u'they', u'the', u'latin', u'language', u',', u'from', u'which', u'all', u'romance', u'language', u'descend', u'.'], u'pos': [u'VBG', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'CD', u'NN', u',', u'DT', u'NNPS', u'VBD', u'IN', u'PRP', u'DT', u'JJ', u'NN', u',', u'IN', u'WDT', u'DT', u'NN', u'NNS', u'VBP', u'.'], u'char_offsets': [[12456, 12464], [12465, 12467], [12468, 12471], [12472, 12479], [12480, 12489], [12490, 12492], [12493, 12496], [12497, 12499], [12499, 12500], [12501, 12504], [12505, 12511], [12512, 12519], [12520, 12524], [12525, 12529], [12530, 12533], [12534, 12539], [12540, 12548], [12548, 12549], [12550, 12554], [12555, 12560], [12561, 12564], [12565, 12572], [12573, 12582], [12583, 12590], [12590, 12591]]}) 
answer: set([u'portuguese', u'root', u'its', u'have'])
candidate Sentence: (0.20432870090007782, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcium', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32433, 32434], [32435, 32438], [32439, 32444], [32445, 32446], [32447, 32452], [32453, 32459], [32459, 32460]]}) 
answer: set([u'portuguese', u'latin', u'language', u'have', u'in', u'the', u'root', u'its'])
candidate Sentence: (0.17607255280017853, {u'tokens': [u'The', u'earliest', u'surviving', u'records', u'of', u'a', u'distinctively', u'Portuguese', u'language', u'are', u'administrative', u'documents', u'of', u'the', u'9th', u'century', u',', u'still', u'interspersed', u'with', u'many', u'Latin', u'phrases', u'.'], u'lemmas': [u'the', u'earliest', u'survive', u'record', u'of', u'a', u'distinctively', u'portuguese', u'language', u'be', u'administrative', u'document', u'of', u'the', u'9th', u'century', u',', u'still', u'intersperse', u'with', u'many', u'latin', u'phrase', u'.'], u'pos': [u'DT', u'JJS', u'VBG', u'NNS', u'IN', u'DT', u'RB', u'JJ', u'NN', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'RB', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[13365, 13368], [13369, 13377], [13378, 13387], [13388, 13395], [13396, 13398], [13399, 13400], [13401, 13414], [13415, 13425], [13426, 13434], [13435, 13438], [13439, 13453], [13454, 13463], [13464, 13466], [13467, 13470], [13471, 13474], [13475, 13482], [13482, 13483], [13484, 13489], [13490, 13502], [13503, 13507], [13508, 13512], [13513, 13518], [13519, 13526], [13526, 13527]]}) 
answer: set([u'root', u'its', u'have', u'in'])
candidate Sentence: (0.17502373456954956, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'ltima', u'notcium', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32399, 32401], [32402, 32405], [32406, 32407], [32407, 32410], [32411, 32417], [32418, 32419], [32420, 32425], [32426, 32432], [32432, 32433]]}) 
answer: set([u'portuguese', u'latin', u'language', u'have', u'in', u'the', u'root', u'its'])
candidate Sentence: (0.16246002912521362, {u'tokens': [u'On', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'Have', u'you', u'heard', u'the', u'latest', u'news', u'?', u"''"], u'lemmas': [u'on', u'the', u'other', u'hand', u',', u'the', u'correct', u'translation', u'of', u'the', u'question', u'``', u'have', u'you', u'hear', u'the', u'latest', u'news', u'?', u"''"], u'pos': [u'IN', u'DT', u'JJ', u'NN', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'``', u'VBP', u'PRP', u'VBD', u'DT', u'JJS', u'NN', u'.', u"''"], u'char_offsets': [[32306, 32308], [32309, 32312], [32313, 32318], [32319, 32323], [32323, 32324], [32325, 32328], [32329, 32336], [32337, 32348], [32349, 32351], [32352, 32355], [32356, 32364], [32365, 32366], [32366, 32370], [32371, 32374], [32375, 32380], [32381, 32384], [32385, 32391], [32392, 32396], [32396, 32397], [32397, 32398]]}) 
answer: set([u'portuguese', u'latin', u'language', u'in', u'root', u'its'])

Does the Portuguese language have its roots in the Latin language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese is derived from Latin.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese is derived from Latin.')
 +    where 'Yes, Portuguese is derived from Latin.' = <src.question_processing.Question_parser instance at 0x7fbca0ce72d8>.answer
_____________________________ test_yesno[param263] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7368>, <src.tfidf.TF_IDF object at 0x7fbca2304450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7368>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.26033711433410645, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[24416, 24423], [24424, 24431], [24432, 24441], [24442, 24444], [24445, 24451], [24452, 24457], [24459, 24462], [24463, 24467], [24468, 24472], [24473, 24475], [24476, 24483], [24484, 24489], [24490, 24492], [24493, 24503], [24504, 24510], [24510, 24511], [24512, 24516], [24517, 24522], [24523, 24525], [24526, 24536], [24536, 24537], [24538, 24546], [24547, 24552], [24553, 24555], [24556, 24566], [24567, 24573], [24573, 24574], [24575, 24583], [24584, 24589], [24590, 24592], [24593, 24598], [24598, 24599], [24600, 24607], [24608, 24613], [24614, 24616], [24617, 24627], [24628, 24634], [24634, 24635], [24636, 24640], [24641, 24646], [24647, 24651], [24652, 24662], [24663, 24665], [24666, 24669], [24670, 24676], [24677, 24682], [24682, 24683]]}) 
answer: set([u'the', u'arabic', u'language', u'contain'])
candidate Sentence: (0.25432133674621582, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[18321, 18328], [18329, 18332], [18333, 18336], [18337, 18340], [18341, 18345], [18346, 18355], [18355, 18356], [18357, 18367], [18368, 18376], [18377, 18382], [18383, 18386], [18387, 18392], [18393, 18397], [18398, 18404], [18405, 18407], [18408, 18417], [18418, 18420], [18421, 18428], [18429, 18435], [18435, 18436]]}) 
answer: set([u'language', u'contain'])
candidate Sentence: (0.2522118091583252, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcium', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32433, 32434], [32435, 32438], [32439, 32444], [32445, 32446], [32447, 32452], [32453, 32459], [32459, 32460]]}) 
answer: set([u'portuguese', u'from', u'language', u'contain', u'word', u'the', u'arabic'])
candidate Sentence: (0.24735239148139954, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mua', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mua', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18840, 18843], [18844, 18848], [18849, 18859], [18860, 18866], [18867, 18869], [18870, 18874], [18875, 18878], [18879, 18885], [18886, 18890], [18891, 18893], [18894, 18900], [18901, 18904], [18905, 18913], [18914, 18915], [18915, 18919], [18920, 18927], [18927, 18928], [18928, 18929]]}) 
answer: set([u'portuguese', u'language', u'contain'])
candidate Sentence: (0.21603941917419434, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'ltima', u'notcium', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32399, 32401], [32402, 32405], [32406, 32407], [32407, 32410], [32411, 32417], [32418, 32419], [32420, 32425], [32426, 32432], [32432, 32433]]}) 
answer: set([u'portuguese', u'from', u'language', u'contain', u'word', u'the', u'arabic'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7368>.answer
_____________________________ test_yesno[param264] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce73f8>, <src.tfidf.TF_IDF object at 0x7fbca2304450>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
E                +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x7fbca0ce73f8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.26033711433410645, {u'tokens': [u'Partial', u'preview', u'available', u'on', u'Google', u'Books', u'See', u'also', u'List', u'of', u'English', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'in', u'Indonesian', u',', u'Japanese', u'words', u'of', u'Portuguese', u'origin', u',', u'Borrowed', u'words', u'in', u'Malay', u',', u'Sinhala', u'words', u'of', u'Portuguese', u'origin', u',', u'Loan', u'words', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'lemmas': [u'partial', u'preview', u'available', u'on', u'Google', u'Books', u'see', u'also', u'list', u'of', u'English', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'in', u'indonesian', u',', u'japanese', u'word', u'of', u'portuguese', u'origin', u',', u'borrow', u'word', u'in', u'Malay', u',', u'Sinhala', u'word', u'of', u'portuguese', u'origin', u',', u'loan', u'word', u'from', u'Portuguese', u'in', u'Sri', u'Lankan', u'Tamil', u'.'], u'pos': [u'JJ', u'NN', u'JJ', u'IN', u'NNP', u'NNPS', u'VB', u'RB', u'NN', u'IN', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'JJ', u',', u'JJ', u'NNS', u'IN', u'JJ', u'NN', u',', u'VBN', u'NNS', u'IN', u'NNP', u',', u'NNP', u'NNS', u'IN', u'JJ', u'NN', u',', u'NN', u'NNS', u'IN', u'NNP', u'IN', u'NNP', u'NNP', u'NNP', u'.'], u'char_offsets': [[24416, 24423], [24424, 24431], [24432, 24441], [24442, 24444], [24445, 24451], [24452, 24457], [24459, 24462], [24463, 24467], [24468, 24472], [24473, 24475], [24476, 24483], [24484, 24489], [24490, 24492], [24493, 24503], [24504, 24510], [24510, 24511], [24512, 24516], [24517, 24522], [24523, 24525], [24526, 24536], [24536, 24537], [24538, 24546], [24547, 24552], [24553, 24555], [24556, 24566], [24567, 24573], [24573, 24574], [24575, 24583], [24584, 24589], [24590, 24592], [24593, 24598], [24598, 24599], [24600, 24607], [24608, 24613], [24614, 24616], [24617, 24627], [24628, 24634], [24634, 24635], [24636, 24640], [24641, 24646], [24647, 24651], [24652, 24662], [24663, 24665], [24666, 24669], [24670, 24676], [24677, 24682], [24682, 24683]]}) 
answer: set([u'the', u'arabic', u'language', u'contain'])
candidate Sentence: (0.25432133674621582, {u'tokens': [u'Between', u'the', u'9th', u'and', u'13th', u'centuries', u',', u'Portuguese', u'acquired', u'about', u'800', u'words', u'from', u'Arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'lemmas': [u'between', u'the', u'9th', u'and', u'13th', u'century', u',', u'Portuguese', u'acquire', u'about', u'800', u'word', u'from', u'arabic', u'by', u'influence', u'of', u'Moorish', u'Iberia', u'.'], u'pos': [u'IN', u'DT', u'JJ', u'CC', u'JJ', u'NNS', u',', u'NNP', u'VBD', u'IN', u'CD', u'NNS', u'IN', u'JJ', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'.'], u'char_offsets': [[18321, 18328], [18329, 18332], [18333, 18336], [18337, 18340], [18341, 18345], [18346, 18355], [18355, 18356], [18357, 18367], [18368, 18376], [18377, 18382], [18383, 18386], [18387, 18392], [18393, 18397], [18398, 18404], [18405, 18407], [18408, 18417], [18418, 18420], [18421, 18428], [18429, 18435], [18435, 18436]]}) 
answer: set([u'language', u'contain'])
candidate Sentence: (0.2522118091583252, {u'tokens': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u',', u'but', u'Ouviu', u'a', u'ltima', u'notcium', u'?'], u'pos': [u',', u'CC', u'NNP', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32433, 32434], [32435, 32438], [32439, 32444], [32445, 32446], [32447, 32452], [32453, 32459], [32459, 32460]]}) 
answer: set([u'portuguese', u'from', u'language', u'contain', u'word', u'the', u'arabic'])
candidate Sentence: (0.24735239148139954, {u'tokens': [u'The', u'word', u'Mozambique', u'itself', u'is', u'from', u'the', u'Arabic', u'name', u'of', u'sultan', u'Mua', u'Alebique', u'-LRB-', u'Musa', u'Alibiki', u'-RRB-', u'.'], u'lemmas': [u'the', u'word', u'Mozambique', u'itself', u'be', u'from', u'the', u'arabic', u'name', u'of', u'sultan', u'mua', u'alebique', u'-lrb-', u'Musa', u'Alibiki', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'NNP', u'PRP', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'NN', u'NN', u'-LRB-', u'NNP', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[18840, 18843], [18844, 18848], [18849, 18859], [18860, 18866], [18867, 18869], [18870, 18874], [18875, 18878], [18879, 18885], [18886, 18890], [18891, 18893], [18894, 18900], [18901, 18904], [18905, 18913], [18914, 18915], [18915, 18919], [18920, 18927], [18927, 18928], [18928, 18929]]}) 
answer: set([u'portuguese', u'language', u'contain'])
candidate Sentence: (0.21603941917419434, {u'tokens': [u'is', u'not', u'*', u'Tem', u'ouvido', u'a', u'ltima', u'notcia', u'?'], u'lemmas': [u'be', u'not', u'*', u'tem', u'ouvido', u'a', u'ltima', u'notcium', u'?'], u'pos': [u'VBZ', u'RB', u'SYM', u'FW', u'FW', u'DT', u'NN', u'NN', u'.'], u'char_offsets': [[32399, 32401], [32402, 32405], [32406, 32407], [32407, 32410], [32411, 32417], [32418, 32419], [32420, 32425], [32426, 32432], [32432, 32433]]}) 
answer: set([u'portuguese', u'from', u'language', u'contain', u'word', u'the', u'arabic'])

Does Portuguese contain words from the Arabic language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Portuguese contains words from the Arabic language.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Portuguese contains words from the Arabic language.')
 +    where 'Yes, Portuguese contains words from the Arabic language.' = <src.question_processing.Question_parser instance at 0x7fbca0ce73f8>.answer
_____________________________ test_yesno[param269] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce76c8>, <src.tfidf.TF_IDF object at 0x7fbca60a2190>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
E                +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x7fbca0ce76c8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.7990378737449646, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22191, 22194], [22195, 22204], [22205, 22207], [22208, 22221], [22222, 22224], [22225, 22226], [22227, 22231], [22232, 22240], [22241, 22243], [22244, 22250], [22250, 22251]]}) 
answer: set([u'franciscio', u'the', u'in'])
candidate Sentence: (0.23345237970352173, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22892, 22899], [22900, 22903], [22904, 22908], [22909, 22911], [22912, 22918], [22919, 22921], [22922, 22925], [22926, 22935], [22936, 22938], [22939, 22952], [22953, 22957], [22957, 22958], [22959, 22963], [22964, 22970], [22971, 22976], [22977, 22985], [22986, 22990], [22991, 22998], [22999, 23003], [23004, 23007], [23008, 23010], [23011, 23017], [23018, 23024], [23025, 23027], [23028, 23032], [23033, 23039], [23040, 23043], [23044, 23048], [23049, 23052], [23053, 23057], [23058, 23062], [23062, 23063]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19699209928512573, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[28318, 28321], [28322, 28329], [28330, 28339], [28339, 28340], [28341, 28350], [28351, 28352], [28353, 28359], [28360, 28364], [28364, 28365], [28366, 28368], [28369, 28371], [28372, 28379], [28380, 28382], [28383, 28394], [28395, 28407], [28408, 28411], [28412, 28418], [28419, 28421], [28422, 28426], [28426, 28427]]}) 
answer: set([u'high', u'franciscio', u'the', u'san', u'standard'])
candidate Sentence: (0.15127301216125488, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13411, 13414], [13415, 13419], [13420, 13423], [13424, 13434], [13435, 13443], [13444, 13447], [13448, 13456], [13457, 13462], [13462, 13463], [13464, 13473], [13474, 13483], [13484, 13487], [13488, 13493], [13494, 13503], [13504, 13507], [13508, 13514], [13515, 13526], [13527, 13536], [13537, 13540], [13541, 13544], [13545, 13557], [13557, 13558]]}) 
answer: set([u'living', u'san', u'franciscio', u'of', u'high', u'in'])
candidate Sentence: (0.12336479127407074, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[15189, 15192], [15193, 15198], [15199, 15205], [15206, 15208], [15209, 15217], [15218, 15220], [15221, 15226], [15227, 15229], [15230, 15234], [15235, 15239], [15240, 15244], [15245, 15257], [15258, 15260], [15263, 15266], [15267, 15271], [15272, 15274], [15276, 15277]]}) 
answer: set([u'living', u'standard', u'in', u'san', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, San Francisco is characterized by a high standard of living.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, San Francisco is characterized by a high standard of living.')
 +    where 'Yes, San Francisco is characterized by a high standard of living.' = <src.question_processing.Question_parser instance at 0x7fbca0ce76c8>.answer
_____________________________ test_yesno[param270] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7758>, <src.tfidf.TF_IDF object at 0x7fbca60a2190>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7758>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.7990378737449646, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22191, 22194], [22195, 22204], [22205, 22207], [22208, 22221], [22222, 22224], [22225, 22226], [22227, 22231], [22232, 22240], [22241, 22243], [22244, 22250], [22250, 22251]]}) 
answer: set([u'franciscio', u'the', u'in'])
candidate Sentence: (0.23345237970352173, {u'tokens': [u'Because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'is', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'families', u'have', u'decided', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'left', u'.'], u'lemmas': [u'because', u'the', u'cost', u'of', u'living', u'in', u'San', u'Francisco', u'be', u'exceptionally', u'high', u',', u'many', u'middle', u'class', u'family', u'have', u'decide', u'they', u'can', u'no', u'longer', u'afford', u'to', u'live', u'within', u'the', u'city', u'and', u'have', u'leave', u'.'], u'pos': [u'IN', u'DT', u'NN', u'IN', u'NN', u'IN', u'NNP', u'NNP', u'VBZ', u'RB', u'JJ', u',', u'JJ', u'JJ', u'NN', u'NNS', u'VBP', u'VBN', u'PRP', u'MD', u'RB', u'RB', u'VB', u'TO', u'VB', u'IN', u'DT', u'NN', u'CC', u'VBP', u'VBN', u'.'], u'char_offsets': [[22892, 22899], [22900, 22903], [22904, 22908], [22909, 22911], [22912, 22918], [22919, 22921], [22922, 22925], [22926, 22935], [22936, 22938], [22939, 22952], [22953, 22957], [22957, 22958], [22959, 22963], [22964, 22970], [22971, 22976], [22977, 22985], [22986, 22990], [22991, 22998], [22999, 23003], [23004, 23007], [23008, 23010], [23011, 23017], [23018, 23024], [23025, 23027], [23028, 23032], [23033, 23039], [23040, 23043], [23044, 23048], [23049, 23052], [23053, 23057], [23058, 23062], [23062, 23063]]}) 
answer: set([u'franciscio', u'standard'])
candidate Sentence: (0.19699209928512573, {u'tokens': [u'Its', u'current', u'structure', u',', u'featuring', u'a', u'living', u'roof', u',', u'is', u'an', u'example', u'of', u'sustainable', u'architecture', u'and', u'opened', u'in', u'2008', u'.'], u'lemmas': [u'its', u'current', u'structure', u',', u'feature', u'a', u'living', u'roof', u',', u'be', u'a', u'example', u'of', u'sustainable', u'architecture', u'and', u'open', u'in', u'2008', u'.'], u'pos': [u'PRP$', u'JJ', u'NN', u',', u'VBG', u'DT', u'NN', u'NN', u',', u'VBZ', u'DT', u'NN', u'IN', u'JJ', u'NN', u'CC', u'VBD', u'IN', u'CD', u'.'], u'char_offsets': [[28318, 28321], [28322, 28329], [28330, 28339], [28339, 28340], [28341, 28350], [28351, 28352], [28353, 28359], [28360, 28364], [28364, 28365], [28366, 28368], [28369, 28371], [28372, 28379], [28380, 28382], [28383, 28394], [28395, 28407], [28408, 28411], [28412, 28418], [28419, 28421], [28422, 28426], [28426, 28427]]}) 
answer: set([u'high', u'franciscio', u'the', u'san', u'standard'])
candidate Sentence: (0.15127301216125488, {u'tokens': [u'The', u'city', u'has', u'repeatedly', u'upgraded', u'its', u'building', u'codes', u',', u'requiring', u'retrofits', u'for', u'older', u'buildings', u'and', u'higher', u'engineering', u'standards', u'for', u'new', u'construction', u'.'], u'lemmas': [u'the', u'city', u'have', u'repeatedly', u'upgrade', u'its', u'building', u'code', u',', u'require', u'retrofit', u'for', u'older', u'building', u'and', u'higher', u'engineering', u'standard', u'for', u'new', u'construction', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'PRP$', u'NN', u'NNS', u',', u'VBG', u'NNS', u'IN', u'JJR', u'NNS', u'CC', u'JJR', u'NN', u'NNS', u'IN', u'JJ', u'NN', u'.'], u'char_offsets': [[13411, 13414], [13415, 13419], [13420, 13423], [13424, 13434], [13435, 13443], [13444, 13447], [13448, 13456], [13457, 13462], [13462, 13463], [13464, 13473], [13474, 13483], [13484, 13487], [13488, 13493], [13494, 13503], [13504, 13507], [13508, 13514], [13515, 13526], [13527, 13536], [13537, 13540], [13541, 13544], [13545, 13557], [13557, 13558]]}) 
answer: set([u'living', u'san', u'franciscio', u'of', u'high', u'in'])
candidate Sentence: (0.12336479127407074, {u'tokens': [u'The', u'rainy', u'period', u'of', u'November', u'to', u'April', u'is', u'cool', u'with', u'high', u'temperatures', u'of', u'and', u'lows', u'of', u'.'], u'lemmas': [u'the', u'rainy', u'period', u'of', u'November', u'to', u'April', u'be', u'cool', u'with', u'high', u'temperature', u'of', u'and', u'low', u'of', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'TO', u'NNP', u'VBZ', u'JJ', u'IN', u'JJ', u'NNS', u'IN', u'CC', u'NNS', u'IN', u'.'], u'char_offsets': [[15189, 15192], [15193, 15198], [15199, 15205], [15206, 15208], [15209, 15217], [15218, 15220], [15221, 15226], [15227, 15229], [15230, 15234], [15235, 15239], [15240, 15244], [15245, 15257], [15258, 15260], [15263, 15266], [15267, 15271], [15272, 15274], [15276, 15277]]}) 
answer: set([u'living', u'standard', u'in', u'san', u'franciscio'])

Is the standard of living in San Franciscio high?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7758>.answer
_____________________________ test_yesno[param271] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce77e8>, <src.tfidf.TF_IDF object at 0x7fbca60a2190>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
E                +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x7fbca0ce77e8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45204406976699829, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40751, 40760], [40761, 40763], [40764, 40767], [40768, 40772], [40773, 40781], [40782, 40791], [40792, 40798], [40798, 40799], [40800, 40803], [40804, 40813], [40814, 40817], [40818, 40821], [40822, 40829], [40830, 40840], [40841, 40843], [40844, 40847], [40848, 40851], [40852, 40859], [40860, 40871], [40872, 40874], [40875, 40878], [40879, 40881], [40882, 40885], [40886, 40888], [40889, 40896], [40897, 40901], [40902, 40908], [40908, 40909], [40910, 40912], [40913, 40917], [40917, 40918], [40918, 40919]]}) 
answer: set([u'a', u'high'])
candidate Sentence: (0.16244931519031525, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[40278, 40281], [40282, 40289], [40290, 40300], [40301, 40303], [40304, 40311], [40312, 40321], [40322, 40324], [40325, 40328], [40329, 40338], [40339, 40341], [40342, 40349], [40350, 40352], [40353, 40357], [40358, 40360], [40361, 40364], [40365, 40370], [40371, 40373], [40374, 40384], [40384, 40385], [40387, 40397], [40397, 40398], [40399, 40402], [40403, 40407], [40407, 40409], [40410, 40420], [40421, 40423], [40424, 40432], [40433, 40442], [40443, 40445], [40446, 40450], [40451, 40455], [40456, 40460], [40461, 40463], [40464, 40468], [40469, 40471], [40472, 40475], [40476, 40481], [40481, 40482]]}) 
answer: set([u'a', u'and', u'gay', u'high', u'individual', u'have', u'lesbian'])
candidate Sentence: (0.12899722158908844, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40923, 40926], [40927, 40936], [40937, 40941], [40942, 40945], [40946, 40949], [40950, 40957], [40958, 40968], [40969, 40971], [40972, 40980], [40981, 40991], [40992, 40994], [40995, 40998], [40999, 41007], [41008, 41014], [41014, 41015], [41016, 41020], [41021, 41024], [41025, 41028], [41029, 41033], [41034, 41040], [41041, 41042], [41043, 41049], [41050, 41063], [41064, 41068], [41069, 41072], [41073, 41078], [41079, 41091], [41092, 41096], [41096, 41097]]}) 
answer: set([u'and', u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12626728415489197, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[37411, 37415], [37416, 37419], [37420, 37425], [37426, 37428], [37429, 37440], [37441, 37443], [37444, 37449], [37449, 37450], [37451, 37454], [37455, 37464], [37465, 37467], [37468, 37471], [37472, 37477], [37478, 37480], [37481, 37492], [37493, 37500], [37501, 37505], [37506, 37512], [37512, 37513], [37514, 37516], [37517, 37520], [37521, 37527], [37528, 37537], [37538, 37543], [37544, 37547], [37548, 37561], [37562, 37564], [37565, 37571], [37572, 37579], [37580, 37582], [37583, 37587], [37587, 37588]]}) 
answer: set([u'a', u'and', u'francisco', u'san', u'gay', u'high', u'individual', u'have', u'percentage', u'lesbian'])
candidate Sentence: (0.11986293643712997, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22191, 22194], [22195, 22204], [22205, 22207], [22208, 22221], [22222, 22224], [22225, 22226], [22227, 22231], [22232, 22240], [22241, 22243], [22244, 22250], [22250, 22251]]}) 
answer: set([u'and', u'gay', u'individual', u'have', u'percentage', u'lesbian'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.')
 +    where 'Yes, according to the 2005 American Community Survey, San Francisco has the highest percentage of gay and lesbian individuals of any of the 50 largest U.S. cities, at 15.4%.' = <src.question_processing.Question_parser instance at 0x7fbca0ce77e8>.answer
_____________________________ test_yesno[param272] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7878>, <src.tfidf.TF_IDF object at 0x7fbca60a2190>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7878>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45204406976699829, {u'tokens': [u'According', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'has', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individuals', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'cities', u',', u'at', u'15.4', u'%', u'.'], u'lemmas': [u'accord', u'to', u'the', u'2005', u'American', u'Community', u'Survey', u',', u'San', u'Francisco', u'have', u'the', u'highest', u'percentage', u'of', u'gay', u'and', u'lesbian', u'individual', u'of', u'any', u'of', u'the', u'50', u'largest', u'U.S.', u'city', u',', u'at', u'15.4', u'%', u'.'], u'pos': [u'VBG', u'TO', u'DT', u'CD', u'NNP', u'NNP', u'NNP', u',', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'CC', u'JJ', u'NNS', u'IN', u'DT', u'IN', u'DT', u'CD', u'JJS', u'NNP', u'NNS', u',', u'IN', u'CD', u'NN', u'.'], u'char_offsets': [[40751, 40760], [40761, 40763], [40764, 40767], [40768, 40772], [40773, 40781], [40782, 40791], [40792, 40798], [40798, 40799], [40800, 40803], [40804, 40813], [40814, 40817], [40818, 40821], [40822, 40829], [40830, 40840], [40841, 40843], [40844, 40847], [40848, 40851], [40852, 40859], [40860, 40871], [40872, 40874], [40875, 40878], [40879, 40881], [40882, 40885], [40886, 40888], [40889, 40896], [40897, 40901], [40902, 40908], [40908, 40909], [40910, 40912], [40913, 40917], [40917, 40918], [40918, 40919]]}) 
answer: set([u'a', u'high'])
candidate Sentence: (0.16244931519031525, {u'tokens': [u'The', u'current', u'percentage', u'of', u'African', u'Americans', u'in', u'San', u'Francisco', u'is', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'Hispanic', u'residents', u'is', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'lemmas': [u'the', u'current', u'percentage', u'of', u'african', u'Americans', u'in', u'San', u'Francisco', u'be', u'similar', u'to', u'that', u'of', u'the', u'state', u'of', u'California', u';', u'conversely', u',', u'the', u'city', u"'s", u'percentage', u'of', u'hispanic', u'resident', u'be', u'less', u'than', u'half', u'of', u'that', u'of', u'the', u'state', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'JJ', u'NNPS', u'IN', u'NNP', u'NNP', u'VBZ', u'JJ', u'TO', u'DT', u'IN', u'DT', u'NN', u'IN', u'NNP', u':', u'RB', u',', u'DT', u'NN', u'POS', u'NN', u'IN', u'JJ', u'NNS', u'VBZ', u'JJR', u'IN', u'NN', u'IN', u'DT', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[40278, 40281], [40282, 40289], [40290, 40300], [40301, 40303], [40304, 40311], [40312, 40321], [40322, 40324], [40325, 40328], [40329, 40338], [40339, 40341], [40342, 40349], [40350, 40352], [40353, 40357], [40358, 40360], [40361, 40364], [40365, 40370], [40371, 40373], [40374, 40384], [40384, 40385], [40387, 40397], [40397, 40398], [40399, 40402], [40403, 40407], [40407, 40409], [40410, 40420], [40421, 40423], [40424, 40432], [40433, 40442], [40443, 40445], [40446, 40450], [40451, 40455], [40456, 40460], [40461, 40463], [40464, 40468], [40469, 40471], [40472, 40475], [40476, 40481], [40481, 40482]]}) 
answer: set([u'a', u'and', u'gay', u'high', u'individual', u'have', u'lesbian'])
candidate Sentence: (0.12899722158908844, {u'tokens': [u'San', u'Francisco', u'also', u'has', u'the', u'highest', u'percentage', u'of', u'same-sex', u'households', u'of', u'any', u'American', u'county', u',', u'with', u'the', u'Bay', u'Area', u'having', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'lemmas': [u'San', u'Francisco', u'also', u'have', u'the', u'highest', u'percentage', u'of', u'same-sex', u'household', u'of', u'any', u'american', u'county', u',', u'with', u'the', u'Bay', u'Area', u'have', u'a', u'higher', u'concentration', u'than', u'any', u'other', u'metropolitan', u'area', u'.'], u'pos': [u'NNP', u'NNP', u'RB', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u',', u'IN', u'DT', u'NNP', u'NNP', u'VBG', u'DT', u'JJR', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[40923, 40926], [40927, 40936], [40937, 40941], [40942, 40945], [40946, 40949], [40950, 40957], [40958, 40968], [40969, 40971], [40972, 40980], [40981, 40991], [40992, 40994], [40995, 40998], [40999, 41007], [41008, 41014], [41014, 41015], [41016, 41020], [41021, 41024], [41025, 41028], [41029, 41033], [41034, 41040], [41041, 41042], [41043, 41049], [41050, 41063], [41064, 41068], [41069, 41072], [41073, 41078], [41079, 41091], [41092, 41096], [41096, 41097]]}) 
answer: set([u'and', u'high', u'individual', u'lesbian', u'gay'])
candidate Sentence: (0.12626728415489197, {u'tokens': [u'Upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assumes', u'that', u'office', u',', u'as', u'did', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'lemmas': [u'upon', u'the', u'death', u'or', u'resignation', u'of', u'mayor', u',', u'the', u'President', u'of', u'the', u'Board', u'of', u'Supervisors', u'assume', u'that', u'office', u',', u'as', u'do', u'Dianne', u'Feinstein', u'after', u'the', u'assassination', u'of', u'George', u'Moscone', u'in', u'1978', u'.'], u'pos': [u'IN', u'DT', u'NN', u'CC', u'NN', u'IN', u'NN', u',', u'DT', u'NNP', u'IN', u'DT', u'NNP', u'IN', u'NNPS', u'VBZ', u'IN', u'NN', u',', u'IN', u'VBD', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'IN', u'NNP', u'NNP', u'IN', u'CD', u'.'], u'char_offsets': [[37411, 37415], [37416, 37419], [37420, 37425], [37426, 37428], [37429, 37440], [37441, 37443], [37444, 37449], [37449, 37450], [37451, 37454], [37455, 37464], [37465, 37467], [37468, 37471], [37472, 37477], [37478, 37480], [37481, 37492], [37493, 37500], [37501, 37505], [37506, 37512], [37512, 37513], [37514, 37516], [37517, 37520], [37521, 37527], [37528, 37537], [37538, 37543], [37544, 37547], [37548, 37561], [37562, 37564], [37565, 37571], [37572, 37579], [37580, 37582], [37583, 37587], [37587, 37588]]}) 
answer: set([u'a', u'and', u'francisco', u'san', u'gay', u'high', u'individual', u'have', u'percentage', u'lesbian'])
candidate Sentence: (0.11986293643712997, {u'tokens': [u'San', u'Francisco', u'is', u'characterized', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'lemmas': [u'San', u'Francisco', u'be', u'characterize', u'by', u'a', u'high', u'standard', u'of', u'living', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'IN', u'NN', u'.'], u'char_offsets': [[22191, 22194], [22195, 22204], [22205, 22207], [22208, 22221], [22222, 22224], [22225, 22226], [22227, 22231], [22232, 22240], [22241, 22243], [22244, 22250], [22250, 22251]]}) 
answer: set([u'and', u'gay', u'individual', u'have', u'percentage', u'lesbian'])

Does San Francisco have a high percentage of gay and lesbian individuals?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7878>.answer
_____________________________ test_yesno[param280] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7cf8>, <src.tfidf.TF_IDF object at 0x7fbca4e404d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
E                +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x7fbca0ce7cf8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.43591102957725525, {u'tokens': [u'Education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29925, 29934], [29935, 29938], [29939, 29942], [29944, 29946], [29947, 29952], [29953, 29961], [29961, 29962]]}) 
answer: set([u'swahili', u'dipthong', u'have'])
candidate Sentence: (0.17108333110809326, {u'tokens': [u'However', u',', u'elsewhere', u'this', u'does', u"n't", u'happen', u':', u'ndizi', u'``', u'banana', u"''", u'has', u'two', u'syllables', u',', u',', u'as', u'does', u'nenda', u'-LRB-', u'not', u'-RRB-', u'``', u'go', u"''", u'.'], u'lemmas': [u'however', u',', u'elsewhere', u'this', u'do', u'not', u'happen', u':', u'ndizus', u'``', u'banana', u"''", u'have', u'two', u'syllable', u',', u',', u'as', u'do', u'nenda', u'-lrb-', u'not', u'-rrb-', u'``', u'go', u"''", u'.'], u'pos': [u'RB', u',', u'RB', u'DT', u'VBZ', u'RB', u'VB', u':', u'NNS', u'``', u'NN', u"''", u'VBZ', u'CD', u'NNS', u',', u',', u'IN', u'VBZ', u'NN', u'-LRB-', u'RB', u'-RRB-', u'``', u'VB', u"''", u'.'], u'char_offsets': [[6481, 6488], [6488, 6489], [6490, 6499], [6500, 6504], [6505, 6509], [6509, 6512], [6513, 6519], [6519, 6520], [6521, 6526], [6527, 6528], [6528, 6534], [6534, 6535], [6536, 6539], [6540, 6543], [6544, 6553], [6553, 6554], [6556, 6557], [6558, 6560], [6561, 6565], [6566, 6571], [6574, 6575], [6575, 6578], [6580, 6581], [6582, 6583], [6583, 6585], [6585, 6586], [6586, 6587]]}) 
answer: set([u'swahili', u'dipthong'])
candidate Sentence: (0.16264458000659943, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8968, 8972], [8973, 8976], [8977, 8981], [8982, 8988], [8989, 8993], [8994, 8997], [8998, 9002], [9003, 9008], [9009, 9014], [9015, 9020], [9021, 9023], [9024, 9031], [9032, 9034], [9034, 9035], [9036, 9039], [9040, 9048], [9049, 9051], [9051, 9052]]}) 
answer: set([u'swahili', u'dipthong', u'have'])
candidate Sentence: (0.14785864949226379, {u'tokens': [u'The', u'British', u'did', u'not', u'do', u'so', u'in', u'neighbouring', u'Kenya', u',', u'even', u'though', u'they', u'made', u'moves', u'in', u'that', u'direction', u'.'], u'lemmas': [u'the', u'British', u'do', u'not', u'do', u'so', u'in', u'neighbour', u'Kenya', u',', u'even', u'though', u'they', u'make', u'move', u'in', u'that', u'direction', u'.'], u'pos': [u'DT', u'NNP', u'VBD', u'RB', u'VB', u'RB', u'IN', u'VBG', u'NNP', u',', u'RB', u'IN', u'PRP', u'VBD', u'NNS', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[26700, 26703], [26704, 26711], [26712, 26715], [26716, 26719], [26720, 26722], [26723, 26725], [26726, 26728], [26729, 26741], [26742, 26747], [26747, 26748], [26749, 26753], [26754, 26760], [26761, 26765], [26766, 26770], [26771, 26776], [26777, 26779], [26780, 26784], [26785, 26794], [26794, 26795]]}) 
answer: set([u'swahili', u'dipthong', u'have'])
candidate Sentence: (0.1285812109708786, {u'tokens': [u'This', u'is', u'often', u'called', u'the', u'`', u'tree', u"'", u'class', u',', u'because', u'mti', u',', u'miti', u'``', u'tree', u'-LRB-', u's', u'-RRB-', u"''", u'is', u'the', u'prototypical', u'example', u',', u'but', u'that', u'does', u"n't", u'do', u'it', u'justice', u'.'], u'lemmas': [u'this', u'be', u'often', u'call', u'the', u'`', u'tree', u"'", u'class', u',', u'because', u'mtus', u',', u'mitus', u'``', u'tree', u'-lrb-', u's', u'-rrb-', u"''", u'be', u'the', u'prototypical', u'example', u',', u'but', u'that', u'do', u'not', u'do', u'it', u'justice', u'.'], u'pos': [u'DT', u'VBZ', u'RB', u'VBN', u'DT', u'``', u'NN', u"''", u'NN', u',', u'IN', u'NNS', u',', u'NNS', u'``', u'NN', u'-LRB-', u'NNS', u'-RRB-', u"''", u'VBZ', u'DT', u'JJ', u'NN', u',', u'CC', u'IN', u'VBZ', u'RB', u'VB', u'PRP', u'NN', u'.'], u'char_offsets': [[12145, 12149], [12150, 12152], [12153, 12158], [12159, 12165], [12166, 12169], [12170, 12171], [12171, 12175], [12175, 12176], [12177, 12182], [12182, 12183], [12184, 12191], [12192, 12195], [12195, 12196], [12197, 12201], [12202, 12203], [12203, 12207], [12207, 12208], [12208, 12209], [12209, 12210], [12210, 12211], [12212, 12214], [12215, 12218], [12219, 12231], [12232, 12239], [12239, 12240], [12241, 12244], [12245, 12249], [12250, 12254], [12254, 12257], [12258, 12260], [12261, 12263], [12264, 12271], [12271, 12272]]}) 
answer: set([u'swahili', u'dipthong', u'have'])

Does Swahili have dipthongs?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili has diphthongs. (Typo)
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili has diphthongs. (Typo)')
 +    where 'Yes, Swahili has diphthongs. (Typo)' = <src.question_processing.Question_parser instance at 0x7fbca0ce7cf8>.answer
_____________________________ test_yesno[param281] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7d88>, <src.tfidf.TF_IDF object at 0x7fbca4e404d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Swahili is a Bantu language.')
E                +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7d88>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.47514784336090088, {u'tokens': [u'Education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29925, 29934], [29935, 29938], [29939, 29942], [29944, 29946], [29947, 29952], [29953, 29961], [29961, 29962]]}) 
answer: set([u'swahili', u'a', u'bantu'])
candidate Sentence: (0.22014904022216797, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[660, 667], [668, 670], [671, 672], [673, 678], [679, 687], [688, 692], [693, 699], [700, 702], [703, 704], [705, 711], [712, 720], [721, 723], [724, 731], [732, 738], [739, 752], [753, 763], [764, 769], [770, 772], [773, 776], [777, 781], [782, 789], [790, 795], [795, 796]]}) 
answer: set([])
candidate Sentence: (0.17574478685855865, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5210, 5213], [5214, 5219], [5220, 5229], [5230, 5233], [5234, 5235], [5236, 5240], [5241, 5249], [5250, 5260], [5261, 5263], [5264, 5267], [5268, 5275], [5276, 5278], [5279, 5284], [5284, 5285]]}) 
answer: set([u'swahili'])
candidate Sentence: (0.169984370470047, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8525, 8529], [8530, 8535], [8536, 8540], [8541, 8549], [8550, 8559], [8560, 8561], [8561, 8565], [8566, 8568], [8569, 8572], [8573, 8577], [8578, 8580], [8581, 8584], [8585, 8593], [8594, 8603], [8603, 8604], [8604, 8605], [8606, 8609], [8610, 8621], [8621, 8622], [8623, 8628], [8629, 8632], [8633, 8637], [8638, 8639], [8640, 8648], [8649, 8654], [8655, 8657], [8658, 8665], [8666, 8672], [8673, 8675], [8676, 8681], [8681, 8682]]}) 
answer: set([u'swahili'])
candidate Sentence: (0.16728173196315765, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7336, 7338], [7339, 7345], [7346, 7350], [7351, 7354], [7355, 7360], [7361, 7370], [7370, 7371], [7372, 7379], [7380, 7387], [7388, 7396], [7397, 7402], [7403, 7407], [7408, 7409], [7410, 7416], [7417, 7419], [7420, 7427], [7427, 7428]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Swahili is a Bantu language.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'Yes']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Swahili is a Bantu language.')
 +    where 'Yes, Swahili is a Bantu language.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7d88>.answer
_____________________________ test_yesno[param282] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7e18>, <src.tfidf.TF_IDF object at 0x7fbca4e404d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7e18>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.47514784336090088, {u'tokens': [u'Education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29925, 29934], [29935, 29938], [29939, 29942], [29944, 29946], [29947, 29952], [29953, 29961], [29961, 29962]]}) 
answer: set([u'swahili', u'a', u'bantu'])
candidate Sentence: (0.22014904022216797, {u'tokens': [u'Swahili', u'is', u'a', u'Bantu', u'language', u'that', u'serves', u'as', u'a', u'second', u'language', u'to', u'various', u'groups', u'traditionally', u'inhabiting', u'parts', u'of', u'the', u'East', u'African', u'coast', u'.'], u'lemmas': [u'Swahili', u'be', u'a', u'Bantu', u'language', u'that', u'serve', u'as', u'a', u'second', u'language', u'to', u'various', u'group', u'traditionally', u'inhabit', u'part', u'of', u'the', u'east', u'african', u'coast', u'.'], u'pos': [u'NNP', u'VBZ', u'DT', u'NNP', u'NN', u'WDT', u'VBZ', u'IN', u'DT', u'JJ', u'NN', u'TO', u'JJ', u'NNS', u'RB', u'VBG', u'NNS', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'.'], u'char_offsets': [[660, 667], [668, 670], [671, 672], [673, 678], [679, 687], [688, 692], [693, 699], [700, 702], [703, 704], [705, 711], [712, 720], [721, 723], [724, 731], [732, 738], [739, 752], [753, 763], [764, 769], [770, 772], [773, 776], [777, 781], [782, 789], [790, 795], [795, 796]]}) 
answer: set([])
candidate Sentence: (0.17574478685855865, {u'tokens': [u'See', u'Bantu', u'languages', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'nouns', u'.'], u'lemmas': [u'see', u'Bantu', u'language', u'for', u'a', u'more', u'detailed', u'discussion', u'of', u'the', u'grammar', u'of', u'noun', u'.'], u'pos': [u'VB', u'NNP', u'NNS', u'IN', u'DT', u'RBR', u'JJ', u'NN', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[5210, 5213], [5214, 5219], [5220, 5229], [5230, 5233], [5234, 5235], [5236, 5240], [5241, 5249], [5250, 5260], [5261, 5263], [5264, 5267], [5268, 5275], [5276, 5278], [5279, 5284], [5284, 5285]]}) 
answer: set([u'swahili'])
candidate Sentence: (0.169984370470047, {u'tokens': [u'This', u'class', u'also', u'contains', u'languages', u'-LRB-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'Kiswahili', u'-RRB-', u',', u'and', u'diminutives', u',', u'which', u'had', u'been', u'a', u'separate', u'class', u'in', u'earlier', u'stages', u'of', u'Bantu', u'.'], u'lemmas': [u'this', u'class', u'also', u'contain', u'language', u'-lrb-', u'such', u'as', u'the', u'name', u'of', u'the', u'language', u'kiswahilus', u'-rrb-', u',', u'and', u'diminutive', u',', u'which', u'have', u'be', u'a', u'separate', u'class', u'in', u'earlier', u'stage', u'of', u'Bantu', u'.'], u'pos': [u'DT', u'NN', u'RB', u'VBZ', u'NNS', u'-LRB-', u'JJ', u'IN', u'DT', u'NN', u'IN', u'DT', u'NN', u'NN', u'-RRB-', u',', u'CC', u'NNS', u',', u'WDT', u'VBD', u'VBN', u'DT', u'JJ', u'NN', u'IN', u'JJR', u'NNS', u'IN', u'NNP', u'.'], u'char_offsets': [[8525, 8529], [8530, 8535], [8536, 8540], [8541, 8549], [8550, 8559], [8560, 8561], [8561, 8565], [8566, 8568], [8569, 8572], [8573, 8577], [8578, 8580], [8581, 8584], [8585, 8593], [8594, 8603], [8603, 8604], [8604, 8605], [8606, 8609], [8610, 8621], [8621, 8622], [8623, 8628], [8629, 8632], [8633, 8637], [8638, 8639], [8640, 8648], [8649, 8654], [8655, 8657], [8658, 8665], [8666, 8672], [8673, 8675], [8676, 8681], [8681, 8682]]}) 
answer: set([u'swahili'])
candidate Sentence: (0.16728173196315765, {u'tokens': [u'In', u'common', u'with', u'all', u'Bantu', u'languages', u',', u'Swahili', u'grammar', u'arranges', u'nouns', u'into', u'a', u'number', u'of', u'classes', u'.'], u'lemmas': [u'in', u'common', u'with', u'all', u'Bantu', u'language', u',', u'swahili', u'grammar', u'arrange', u'noun', u'into', u'a', u'number', u'of', u'class', u'.'], u'pos': [u'IN', u'JJ', u'IN', u'DT', u'NNP', u'NNS', u',', u'JJ', u'NN', u'VBZ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NNS', u'.'], u'char_offsets': [[7336, 7338], [7339, 7345], [7346, 7350], [7351, 7354], [7355, 7360], [7361, 7370], [7370, 7371], [7372, 7379], [7380, 7387], [7388, 7396], [7397, 7402], [7403, 7407], [7408, 7409], [7410, 7416], [7417, 7419], [7420, 7427], [7427, 7428]]}) 
answer: set([])

Is Swahili a Bantu language?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'Yes']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7e18>.answer
_____________________________ test_yesno[param283] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7ea8>, <src.tfidf.TF_IDF object at 0x7fbca4e404d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
E                +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7ea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.43196004629135132, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implementedand', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implementedand', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'JJ', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'JJ', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1263, 1266], [1267, 1278], [1279, 1285], [1286, 1288], [1289, 1295], [1296, 1300], [1301, 1308], [1309, 1310], [1311, 1319], [1320, 1327], [1328, 1330], [1331, 1338], [1339, 1346], [1347, 1349], [1350, 1362], [1363, 1367], [1368, 1375], [1376, 1379], [1380, 1383], [1384, 1388], [1389, 1393], [1394, 1408], [1409, 1417], [1418, 1420], [1421, 1423], [1424, 1432], [1433, 1441], [1442, 1444], [1445, 1449], [1450, 1452], [1453, 1464], [1465, 1468], [1469, 1472], [1473, 1477], [1478, 1485], [1486, 1496], [1496, 1497]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.24170054495334625, {u'tokens': [u'Education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29925, 29934], [29935, 29938], [29939, 29942], [29944, 29946], [29947, 29952], [29953, 29961], [29961, 29962]]}) 
answer: set([u'a', u'school', u'require', u'primary', u'uganda', u'subject', u'swahilus', u'make'])
candidate Sentence: (0.19280749559402466, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[28748, 28750], [28751, 28757], [28757, 28758], [28759, 28762], [28763, 28770], [28771, 28780], [28781, 28783], [28783, 28786], [28787, 28792], [28793, 28800], [28800, 28801], [28802, 28805], [28806, 28808], [28809, 28811], [28812, 28814], [28815, 28821], [28822, 28825], [28826, 28831], [28832, 28835], [28836, 28838], [28839, 28846], [28847, 28853], [28854, 28863], [28864, 28866], [28867, 28870], [28871, 28878], [28878, 28879], [28880, 28883], [28884, 28886], [28887, 28896], [28897, 28902], [28903, 28914], [28915, 28917], [28918, 28925], [28926, 28936], [28937, 28939], [28940, 28951], [28952, 28955], [28956, 28959], [28960, 28964], [28965, 28972], [28973, 28982], [28982, 28983]]}) 
answer: set([u'a', u'make', u'require', u'primary', u'swahilus', u'subject'])
candidate Sentence: (0.16393549740314484, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8968, 8972], [8973, 8976], [8977, 8981], [8982, 8988], [8989, 8993], [8994, 8997], [8998, 9002], [9003, 9008], [9009, 9014], [9015, 9020], [9021, 9023], [9024, 9031], [9032, 9034], [9034, 9035], [9036, 9039], [9040, 9048], [9049, 9051], [9051, 9052]]}) 
answer: set([u'a', u'school', u'swahilus', u'primary', u'uganda', u'in', u'require', u'subject'])
candidate Sentence: (0.16236133873462677, {u'tokens': [u'Most', u'educated', u'Kenyans', u'are', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'is', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'lemmas': [u'most', u'educate', u'kenyan', u'be', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'be', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'pos': [u'JJS', u'VBN', u'NNS', u'VBP', u'JJ', u'TO', u'VB', u'RB', u'IN', u'NNP', u',', u'IN', u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'CD', u'.'], u'char_offsets': [[28355, 28359], [28360, 28368], [28369, 28376], [28377, 28380], [28381, 28385], [28386, 28388], [28389, 28400], [28402, 28410], [28411, 28413], [28414, 28421], [28421, 28422], [28423, 28428], [28429, 28431], [28432, 28434], [28435, 28436], [28437, 28447], [28448, 28455], [28456, 28458], [28459, 28465], [28466, 28470], [28471, 28476], [28477, 28480], [28480, 28481]]}) 
answer: set([u'make', u'swahilus', u'require', u'uganda', u'primary'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Uganda made Swahili a required subject in primary schools.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Uganda made Swahili a required subject in primary schools.')
 +    where 'Yes, Uganda made Swahili a required subject in primary schools.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7ea8>.answer
_____________________________ test_yesno[param284] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7f38>, <src.tfidf.TF_IDF object at 0x7fbca4e404d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7f38>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.43196004629135132, {u'tokens': [u'The', u'neighboring', u'nation', u'of', u'Uganda', u'made', u'Swahili', u'a', u'required', u'subject', u'in', u'primary', u'schools', u'in', u'1992although', u'this', u'mandate', u'has', u'not', u'been', u'well', u'implementedand', u'declared', u'it', u'an', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Federation', u'.'], u'lemmas': [u'the', u'neighboring', u'nation', u'of', u'Uganda', u'make', u'Swahili', u'a', u'require', u'subject', u'in', u'primary', u'school', u'in', u'1992although', u'this', u'mandate', u'have', u'not', u'be', u'well', u'implementedand', u'declare', u'it', u'a', u'official', u'language', u'in', u'2005', u'in', u'preparation', u'for', u'the', u'east', u'african', u'Federation', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'NNP', u'VBD', u'NNP', u'DT', u'VBN', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'JJ', u'DT', u'NN', u'VBZ', u'RB', u'VBN', u'RB', u'JJ', u'VBD', u'PRP', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'NN', u'IN', u'DT', u'JJ', u'JJ', u'NNP', u'.'], u'char_offsets': [[1263, 1266], [1267, 1278], [1279, 1285], [1286, 1288], [1289, 1295], [1296, 1300], [1301, 1308], [1309, 1310], [1311, 1319], [1320, 1327], [1328, 1330], [1331, 1338], [1339, 1346], [1347, 1349], [1350, 1362], [1363, 1367], [1368, 1375], [1376, 1379], [1380, 1383], [1384, 1388], [1389, 1393], [1394, 1408], [1409, 1417], [1418, 1420], [1421, 1423], [1424, 1432], [1433, 1441], [1442, 1444], [1445, 1449], [1450, 1452], [1453, 1464], [1465, 1468], [1469, 1472], [1473, 1477], [1478, 1485], [1486, 1496], [1496, 1497]]}) 
answer: set([u'swahilus'])
candidate Sentence: (0.24170054495334625, {u'tokens': [u'Education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'lemmas': [u'education', u'for', u'all', u'in', u'whose', u'language', u'?'], u'pos': [u'NN', u'IN', u'DT', u'IN', u'WP$', u'NN', u'.'], u'char_offsets': [[29925, 29934], [29935, 29938], [29939, 29942], [29944, 29946], [29947, 29952], [29953, 29961], [29961, 29962]]}) 
answer: set([u'a', u'school', u'require', u'primary', u'uganda', u'subject', u'swahilus', u'make'])
candidate Sentence: (0.19280749559402466, {u'tokens': [u'In', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u"n't", u'speak', u'Swahili', u',', u'but', u'it', u'is', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'is', u'currently', u'being', u'implemented', u'in', u'schools', u'nationwide', u'in', u'preparation', u'for', u'the', u'East', u'African', u'Community', u'.'], u'lemmas': [u'in', u'Uganda', u',', u'the', u'Baganda', u'generally', u'do', u'not', u'speak', u'Swahili', u',', u'but', u'it', u'be', u'in', u'common', u'use', u'among', u'the', u'25', u'million', u'people', u'elsewhere', u'in', u'the', u'country', u',', u'and', u'be', u'currently', u'be', u'implement', u'in', u'school', u'nationwide', u'in', u'preparation', u'for', u'the', u'east', u'African', u'Community', u'.'], u'pos': [u'IN', u'NNP', u',', u'DT', u'NNP', u'RB', u'VBP', u'RB', u'VB', u'NNP', u',', u'CC', u'PRP', u'VBZ', u'IN', u'JJ', u'NN', u'IN', u'DT', u'CD', u'CD', u'NNS', u'RB', u'IN', u'DT', u'NN', u',', u'CC', u'VBZ', u'RB', u'VBG', u'VBN', u'IN', u'NNS', u'JJ', u'IN', u'NN', u'IN', u'DT', u'JJ', u'NNP', u'NNP', u'.'], u'char_offsets': [[28748, 28750], [28751, 28757], [28757, 28758], [28759, 28762], [28763, 28770], [28771, 28780], [28781, 28783], [28783, 28786], [28787, 28792], [28793, 28800], [28800, 28801], [28802, 28805], [28806, 28808], [28809, 28811], [28812, 28814], [28815, 28821], [28822, 28825], [28826, 28831], [28832, 28835], [28836, 28838], [28839, 28846], [28847, 28853], [28854, 28863], [28864, 28866], [28867, 28870], [28871, 28878], [28878, 28879], [28880, 28883], [28884, 28886], [28887, 28896], [28897, 28902], [28903, 28914], [28915, 28917], [28918, 28925], [28926, 28936], [28937, 28939], [28940, 28951], [28952, 28955], [28956, 28959], [28960, 28964], [28965, 28972], [28973, 28982], [28982, 28983]]}) 
answer: set([u'a', u'make', u'require', u'primary', u'swahilus', u'subject'])
candidate Sentence: (0.16393549740314484, {u'tokens': [u'When', u'the', u'noun', u'itself', u'does', u'not', u'make', u'clear', u'which', u'class', u'it', u'belongs', u'to', u',', u'its', u'concords', u'do', u'.'], u'lemmas': [u'when', u'the', u'noun', u'itself', u'do', u'not', u'make', u'clear', u'which', u'class', u'it', u'belong', u'to', u',', u'its', u'concord', u'do', u'.'], u'pos': [u'WRB', u'DT', u'NN', u'PRP', u'VBZ', u'RB', u'VB', u'JJ', u'WDT', u'NN', u'PRP', u'VBZ', u'TO', u',', u'PRP$', u'NNS', u'VBP', u'.'], u'char_offsets': [[8968, 8972], [8973, 8976], [8977, 8981], [8982, 8988], [8989, 8993], [8994, 8997], [8998, 9002], [9003, 9008], [9009, 9014], [9015, 9020], [9021, 9023], [9024, 9031], [9032, 9034], [9034, 9035], [9036, 9039], [9040, 9048], [9049, 9051], [9051, 9052]]}) 
answer: set([u'a', u'school', u'swahilus', u'primary', u'uganda', u'in', u'require', u'subject'])
candidate Sentence: (0.16236133873462677, {u'tokens': [u'Most', u'educated', u'Kenyans', u'are', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'is', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'lemmas': [u'most', u'educate', u'kenyan', u'be', u'able', u'to', u'communicate', u'fluently', u'in', u'Swahili', u',', u'since', u'it', u'be', u'a', u'compulsory', u'subject', u'in', u'school', u'from', u'grade', u'one', u'.'], u'pos': [u'JJS', u'VBN', u'NNS', u'VBP', u'JJ', u'TO', u'VB', u'RB', u'IN', u'NNP', u',', u'IN', u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NN', u'IN', u'NN', u'CD', u'.'], u'char_offsets': [[28355, 28359], [28360, 28368], [28369, 28376], [28377, 28380], [28381, 28385], [28386, 28388], [28389, 28400], [28402, 28410], [28411, 28413], [28414, 28421], [28421, 28422], [28423, 28428], [28429, 28431], [28432, 28434], [28435, 28436], [28437, 28447], [28448, 28455], [28456, 28458], [28459, 28465], [28466, 28470], [28471, 28476], [28477, 28480], [28480, 28481]]}) 
answer: set([u'make', u'swahilus', u'require', u'uganda', u'primary'])

Did Uganda make Swahili a required subject in primary schools?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ce7f38>.answer
_____________________________ test_yesno[param285] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ce7fc8>, <src.tfidf.TF_IDF object at 0x7fbca1a100d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7fc8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.42014819383621216, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28794, 28800], [28800, 28801]]}) 
answer: set([u'swedish', u'a', u'old', u'of', u'norse', u'descendant'])
candidate Sentence: (0.35087046027183533, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[608, 613], [614, 618], [619, 622], [623, 628], [629, 634], [635, 643], [644, 653], [653, 654], [655, 662], [663, 665], [666, 667], [668, 678], [679, 681], [682, 685], [686, 691], [691, 692], [693, 696], [697, 703], [704, 712], [713, 715], [716, 719], [720, 728], [729, 736], [737, 743], [744, 746], [747, 758], [759, 765], [766, 769], [770, 776], [777, 780], [780, 781]]}) 
answer: set([])
candidate Sentence: (0.32521736621856689, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4242, 4246], [4247, 4254], [4255, 4257], [4258, 4263], [4264, 4273], [4274, 4276], [4281, 4283], [4284, 4287], [4288, 4291], [4292, 4299], [4299, 4300], [4301, 4304], [4305, 4310], [4311, 4316], [4317, 4319], [4320, 4327], [4328, 4332], [4333, 4336], [4337, 4341], [4342, 4347], [4348, 4349], [4349, 4355], [4356, 4359], [4360, 4367], [4367, 4368], [4369, 4372], [4373, 4376], [4377, 4381], [4382, 4387], [4388, 4389], [4389, 4395], [4396, 4399], [4400, 4407], [4407, 4408], [4408, 4409]]}) 
answer: set([u'swedish', u'of', u'a', u'descendant'])
candidate Sentence: (0.22408509254455566, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[5013, 5017], [5018, 5026], [5027, 5032], [5033, 5035], [5036, 5043], [5044, 5047], [5048, 5055], [5056, 5060], [5061, 5064], [5065, 5068], [5069, 5075], [5076, 5078], [5079, 5082], [5083, 5085], [5086, 5097], [5097, 5098], [5099, 5104], [5105, 5113], [5114, 5116], [5117, 5120], [5121, 5131], [5132, 5134], [5135, 5138], [5139, 5146], [5147, 5155], [5155, 5156], [5157, 5160], [5161, 5165], [5166, 5171], [5172, 5173], [5173, 5179], [5180, 5183], [5184, 5191], [5191, 5192], [5193, 5196], [5197, 5200], [5201, 5205], [5206, 5211], [5212, 5213], [5213, 5220], [5221, 5224], [5225, 5231], [5231, 5232], [5232, 5233]]}) 
answer: set([u'swedish', u'a', u'descendant'])
candidate Sentence: (0.17225085198879242, {u'tokens': [u'Moreover', u',', u'the', u'y', u'diphthong', u'changed', u'into', u'a', u'long', u'close', u',', u'as', u'in', u'the', u'Old', u'Norse', u'word', u'for', u'``', u'island', u"''", u'.'], u'lemmas': [u'moreover', u',', u'the', u'y', u'diphthong', u'change', u'into', u'a', u'long', u'close', u',', u'as', u'in', u'the', u'Old', u'Norse', u'word', u'for', u'``', u'island', u"''", u'.'], u'pos': [u'RB', u',', u'DT', u'NN', u'NN', u'VBD', u'IN', u'DT', u'RB', u'RB', u',', u'IN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'IN', u'``', u'NN', u"''", u'.'], u'char_offsets': [[6710, 6718], [6718, 6719], [6720, 6723], [6724, 6725], [6726, 6735], [6736, 6743], [6744, 6748], [6749, 6750], [6751, 6755], [6756, 6761], [6762, 6763], [6764, 6766], [6767, 6769], [6770, 6773], [6774, 6777], [6778, 6783], [6784, 6788], [6789, 6792], [6793, 6794], [6794, 6800], [6800, 6801], [6801, 6802]]}) 
answer: set([u'swedish', u'of', u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ce7fc8>.answer
_____________________________ test_yesno[param286] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea098>, <src.tfidf.TF_IDF object at 0x7fbca1a100d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea098>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.42014819383621216, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28794, 28800], [28800, 28801]]}) 
answer: set([u'swedish', u'a', u'old', u'of', u'norse', u'descendant'])
candidate Sentence: (0.35087046027183533, {u'tokens': [u'Along', u'with', u'the', u'other', u'North', u'Germanic', u'languages', u',', u'Swedish', u'is', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'Germanic', u'peoples', u'living', u'in', u'Scandinavia', u'during', u'the', u'Viking', u'Era', u'.'], u'lemmas': [u'along', u'with', u'the', u'other', u'north', u'germanic', u'language', u',', u'Swedish', u'be', u'a', u'descendant', u'of', u'Old', u'Norse', u',', u'the', u'common', u'language', u'of', u'the', u'germanic', u'people', u'live', u'in', u'Scandinavia', u'during', u'the', u'viking', u'era', u'.'], u'pos': [u'IN', u'IN', u'DT', u'JJ', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'DT', u'NN', u'IN', u'NNP', u'NNP', u',', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NNS', u'VBG', u'IN', u'NNP', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[608, 613], [614, 618], [619, 622], [623, 628], [629, 634], [635, 643], [644, 653], [653, 654], [655, 662], [663, 665], [666, 667], [668, 678], [679, 681], [682, 685], [686, 691], [691, 692], [693, 696], [697, 703], [704, 712], [713, 715], [716, 719], [720, 728], [729, 736], [737, 743], [744, 746], [747, 758], [759, 765], [766, 769], [770, 776], [777, 780], [780, 781]]}) 
answer: set([])
candidate Sentence: (0.32521736621856689, {u'tokens': [u'This', u'section', u'is', u'based', u'primarily', u'on', u'In', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'began', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Sweden', u'and', u'Denmark', u'-RRB-', u'.'], u'lemmas': [u'this', u'section', u'be', u'base', u'primarily', u'on', u'in', u'the', u'9th', u'century', u',', u'Old', u'Norse', u'begin', u'to', u'diverge', u'into', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Sweden', u'and', u'Denmark', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'RB', u'IN', u'IN', u'DT', u'JJ', u'NN', u',', u'NNP', u'NNP', u'VBD', u'TO', u'VB', u'IN', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[4242, 4246], [4247, 4254], [4255, 4257], [4258, 4263], [4264, 4273], [4274, 4276], [4281, 4283], [4284, 4287], [4288, 4291], [4292, 4299], [4299, 4300], [4301, 4304], [4305, 4310], [4311, 4316], [4317, 4319], [4320, 4327], [4328, 4332], [4333, 4336], [4337, 4341], [4342, 4347], [4348, 4349], [4349, 4355], [4356, 4359], [4360, 4367], [4367, 4368], [4369, 4372], [4373, 4376], [4377, 4381], [4382, 4387], [4388, 4389], [4389, 4395], [4396, 4399], [4400, 4407], [4407, 4408], [4408, 4409]]}) 
answer: set([u'swedish', u'of', u'a', u'descendant'])
candidate Sentence: (0.22408509254455566, {u'tokens': [u'This', u'language', u'began', u'to', u'undergo', u'new', u'changes', u'that', u'did', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'resulted', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialects', u',', u'Old', u'West', u'Norse', u'-LRB-', u'Norway', u'and', u'Iceland', u'-RRB-', u'and', u'Old', u'East', u'Norse', u'-LRB-', u'Denmark', u'and', u'Sweden', u'-RRB-', u'.'], u'lemmas': [u'this', u'language', u'begin', u'to', u'undergo', u'new', u'change', u'that', u'do', u'not', u'spread', u'to', u'all', u'of', u'Scandinavia', u',', u'which', u'result', u'in', u'the', u'appearance', u'of', u'two', u'similar', u'dialect', u',', u'Old', u'West', u'Norse', u'-lrb-', u'Norway', u'and', u'Iceland', u'-rrb-', u'and', u'Old', u'East', u'Norse', u'-lrb-', u'Denmark', u'and', u'Sweden', u'-rrb-', u'.'], u'pos': [u'DT', u'NN', u'VBD', u'TO', u'VB', u'JJ', u'NNS', u'WDT', u'VBD', u'RB', u'VBN', u'TO', u'DT', u'IN', u'NNP', u',', u'WDT', u'VBD', u'IN', u'DT', u'NN', u'IN', u'CD', u'JJ', u'NNS', u',', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'CC', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'CC', u'NNP', u'-RRB-', u'.'], u'char_offsets': [[5013, 5017], [5018, 5026], [5027, 5032], [5033, 5035], [5036, 5043], [5044, 5047], [5048, 5055], [5056, 5060], [5061, 5064], [5065, 5068], [5069, 5075], [5076, 5078], [5079, 5082], [5083, 5085], [5086, 5097], [5097, 5098], [5099, 5104], [5105, 5113], [5114, 5116], [5117, 5120], [5121, 5131], [5132, 5134], [5135, 5138], [5139, 5146], [5147, 5155], [5155, 5156], [5157, 5160], [5161, 5165], [5166, 5171], [5172, 5173], [5173, 5179], [5180, 5183], [5184, 5191], [5191, 5192], [5193, 5196], [5197, 5200], [5201, 5205], [5206, 5211], [5212, 5213], [5213, 5220], [5221, 5224], [5225, 5231], [5231, 5232], [5232, 5233]]}) 
answer: set([u'swedish', u'a', u'descendant'])
candidate Sentence: (0.17225085198879242, {u'tokens': [u'Moreover', u',', u'the', u'y', u'diphthong', u'changed', u'into', u'a', u'long', u'close', u',', u'as', u'in', u'the', u'Old', u'Norse', u'word', u'for', u'``', u'island', u"''", u'.'], u'lemmas': [u'moreover', u',', u'the', u'y', u'diphthong', u'change', u'into', u'a', u'long', u'close', u',', u'as', u'in', u'the', u'Old', u'Norse', u'word', u'for', u'``', u'island', u"''", u'.'], u'pos': [u'RB', u',', u'DT', u'NN', u'NN', u'VBD', u'IN', u'DT', u'RB', u'RB', u',', u'IN', u'IN', u'DT', u'NNP', u'NNP', u'NN', u'IN', u'``', u'NN', u"''", u'.'], u'char_offsets': [[6710, 6718], [6718, 6719], [6720, 6723], [6724, 6725], [6726, 6735], [6736, 6743], [6744, 6748], [6749, 6750], [6751, 6755], [6756, 6761], [6762, 6763], [6764, 6766], [6767, 6769], [6770, 6773], [6774, 6777], [6778, 6783], [6784, 6788], [6789, 6792], [6793, 6794], [6794, 6800], [6800, 6801], [6801, 6802]]}) 
answer: set([u'swedish', u'of', u'descendant'])

Is Swedish a descendant of Old Norse?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'Yes', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea098>.answer
_____________________________ test_yesno[param287] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea128>, <src.tfidf.TF_IDF object at 0x7fbca1a100d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No.') == True
E                +  where 'No.' = <src.question_processing.Question_parser instance at 0x7fbca0cea128>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.57994812726974487, {u'tokens': [u'Perfect', u'and', u'present', u'participles', u'as', u'adjectival', u'verbs', u'are', u'very', u'common', u':', u':', u'Perfect', u'participle', u':', u'en', u'stekt', u'fisk', u';', u'``', u'a', u'fried', u'fish', u"''", u':', u'Present', u'participle', u':', u'en', u'stinkande', u'fisk', u';', u'``', u'a', u'stinking', u'fish', u"''", u'In', u'contrast', u'to', u'English', u'and', u'many', u'other', u'languages', u',', u'Swedish', u'does', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tenses', u'.'], u'lemmas': [u'Perfect', u'and', u'present', u'participle', u'as', u'adjectival', u'verb', u'be', u'very', u'common', u':', u':', u'Perfect', u'participle', u':', u'en', u'stekt', u'fisk', u';', u'``', u'a', u'fried', u'fish', u"''", u':', u'present', u'participle', u':', u'en', u'stinkande', u'fisk', u';', u'``', u'a', u'stinking', u'fish', u"''", u'in', u'contrast', u'to', u'English', u'and', u'many', u'other', u'language', u',', u'Swedish', u'do', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tense', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u':', u':', u'NNP', u'NN', u':', u'IN', u'NN', u'NN', u':', u'``', u'DT', u'JJ', u'NN', u"''", u':', u'JJ', u'NN', u':', u'IN', u'NN', u'NN', u':', u'``', u'DT', u'JJ', u'NN', u"''", u'IN', u'NN', u'TO', u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'JJ', u'JJ', u'CC', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[37459, 37466], [37467, 37470], [37471, 37478], [37479, 37490], [37491, 37493], [37494, 37504], [37505, 37510], [37511, 37514], [37515, 37519], [37520, 37526], [37526, 37527], [37529, 37530], [37530, 37537], [37538, 37548], [37548, 37549], [37550, 37552], [37553, 37558], [37559, 37563], [37563, 37564], [37565, 37566], [37566, 37567], [37568, 37573], [37574, 37578], [37578, 37579], [37580, 37581], [37581, 37588], [37589, 37599], [37599, 37600], [37601, 37603], [37604, 37613], [37614, 37618], [37618, 37619], [37620, 37621], [37621, 37622], [37623, 37631], [37632, 37636], [37636, 37637], [37639, 37641], [37642, 37650], [37651, 37653], [37654, 37661], [37662, 37665], [37666, 37670], [37671, 37676], [37677, 37686], [37686, 37687], [37688, 37695], [37696, 37700], [37701, 37704], [37705, 37708], [37709, 37712], [37713, 37720], [37721, 37731], [37732, 37734], [37735, 37739], [37740, 37743], [37744, 37751], [37752, 37759], [37760, 37763], [37764, 37768], [37769, 37776], [37777, 37783], [37783, 37784]]}) 
answer: set([])
candidate Sentence: (0.37615692615509033, {u'tokens': [u'Rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-LRB-', u'``', u'have', u"''", u'-RRB-', u',', u'hade', u'-LRB-', u'``', u'had', u"''", u'-RRB-', u'is', u'followed', u'by', u'a', u'special', u'form', u',', u'called', u'supine', u',', u'used', u'solely', u'for', u'this', u'purpose', u'-LRB-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-RRB-', u':', u':', u'Perfect', u'participle', u':', u'mlad', u';', u'``', u'painted', u"''", u'-', u'supine', u'mlat', u',', u'present', u'perfect', u'har', u'mlat', u';', u'``', u'have', u'painted', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fried', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fried', u"''", u'The', u'Past', u'participle', u'is', u'used', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'lemmas': [u'rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u',', u'hade', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u'be', u'follow', u'by', u'a', u'special', u'form', u',', u'call', u'supine', u',', u'use', u'solely', u'for', u'this', u'purpose', u'-lrb-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-rrb-', u':', u':', u'Perfect', u'participle', u':', u'mlad', u';', u'``', u'paint', u"''", u'-', u'supine', u'mlat', u',', u'present', u'perfect', u'har', u'mlat', u';', u'``', u'have', u'paint', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fry', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fry', u"''", u'the', u'past', u'participle', u'be', u'use', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'VB', u'NN', u'-LRB-', u'``', u'VBP', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'``', u'VBD', u"''", u'-RRB-', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'VBN', u'NN', u',', u'VBN', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'RB', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'-RRB-', u':', u':', u'NNP', u'NN', u':', u'NN', u':', u'``', u'VBN', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u':', u'NNP', u'NN', u':', u'NN', u',', u'``', u'VBD', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'NN', u'NN', u',', u'RB', u'.'], u'char_offsets': [[37785, 37791], [37791, 37792], [37793, 37796], [37797, 37806], [37807, 37811], [37812, 37815], [37816, 37817], [37817, 37818], [37818, 37822], [37822, 37823], [37823, 37824], [37824, 37825], [37826, 37830], [37831, 37832], [37832, 37833], [37833, 37836], [37836, 37837], [37837, 37838], [37839, 37841], [37842, 37850], [37851, 37853], [37854, 37855], [37856, 37863], [37864, 37868], [37868, 37869], [37870, 37876], [37877, 37883], [37883, 37884], [37885, 37889], [37890, 37896], [37897, 37900], [37901, 37905], [37906, 37913], [37914, 37915], [37915, 37923], [37924, 37933], [37934, 37943], [37944, 37946], [37947, 37950], [37951, 37958], [37959, 37969], [37969, 37970], [37970, 37971], [37973, 37974], [37974, 37981], [37982, 37992], [37992, 37993], [37994, 37998], [37998, 37999], [38000, 38001], [38001, 38008], [38008, 38009], [38010, 38011], [38012, 38018], [38019, 38023], [38023, 38024], [38025, 38032], [38033, 38040], [38041, 38044], [38045, 38049], [38049, 38050], [38051, 38052], [38052, 38056], [38057, 38064], [38064, 38065], [38066, 38067], [38067, 38074], [38075, 38085], [38085, 38086], [38087, 38092], [38092, 38093], [38094, 38095], [38095, 38100], [38100, 38101], [38102, 38103], [38104, 38110], [38111, 38116], [38116, 38117], [38118, 38125], [38126, 38133], [38134, 38137], [38138, 38143], [38143, 38144], [38145, 38146], [38146, 38150], [38151, 38156], [38156, 38157], [38159, 38162], [38163, 38167], [38168, 38178], [38179, 38181], [38182, 38186], [38187, 38189], [38190, 38195], [38196, 38199], [38200, 38208], [38209, 38216], [38217, 38222], [38222, 38223], [38224, 38231], [38231, 38232]]}) 
answer: set([u'swedish', u'tense'])
candidate Sentence: (0.26495712995529175, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28794, 28800], [28800, 28801]]}) 
answer: set([u'swedish', u'perfect', u'use', u'form', u'participle', u'to', u'tense', u'the', u'present'])
candidate Sentence: (0.16165842115879059, {u'tokens': [u'One', u'group', u'of', u'verbs', u'-LRB-', u'the', u'ones', u'ending', u'in', u'-', u'er', u'in', u'present', u'tense', u'-RRB-', u'have', u'a', u'special', u'imperative', u'form', u'-LRB-', u'generally', u'the', u'verb', u'stem', u'-RRB-', u',', u'but', u'with', u'most', u'verbs', u'the', u'imperative', u'is', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'lemmas': [u'one', u'group', u'of', u'verb', u'-lrb-', u'the', u'one', u'end', u'in', u'-', u'er', u'in', u'present', u'tense', u'-rrb-', u'have', u'a', u'special', u'imperative', u'form', u'-lrb-', u'generally', u'the', u'verb', u'stem', u'-rrb-', u',', u'but', u'with', u'most', u'verb', u'the', u'imperative', u'be', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'pos': [u'CD', u'NN', u'IN', u'NNS', u'-LRB-', u'DT', u'NNS', u'VBG', u'IN', u':', u'NN', u'IN', u'JJ', u'JJ', u'-RRB-', u'VBP', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'DT', u'VB', u'NN', u'-RRB-', u',', u'CC', u'IN', u'JJS', u'NNS', u'DT', u'JJ', u'VBZ', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[37268, 37271], [37272, 37277], [37278, 37280], [37281, 37286], [37287, 37288], [37288, 37291], [37292, 37296], [37297, 37303], [37304, 37306], [37307, 37308], [37308, 37310], [37311, 37313], [37314, 37321], [37322, 37327], [37327, 37328], [37329, 37333], [37334, 37335], [37336, 37343], [37344, 37354], [37355, 37359], [37360, 37361], [37361, 37370], [37371, 37374], [37375, 37379], [37380, 37384], [37384, 37385], [37385, 37386], [37387, 37390], [37391, 37395], [37396, 37400], [37401, 37406], [37407, 37410], [37411, 37421], [37422, 37424], [37425, 37434], [37435, 37437], [37438, 37441], [37442, 37452], [37453, 37457], [37457, 37458]]}) 
answer: set([u'swedish', u'perfect', u'use', u'participle'])
candidate Sentence: (0.12835694849491119, {u'tokens': [u'The', u'Swedish', u'Language', u'Council', u'-LRB-', u'Sprkrdet', u'-RRB-', u'is', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'does', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acadmie', u'franaise', u'does', u'for', u'French', u'.'], u'lemmas': [u'the', u'Swedish', u'Language', u'Council', u'-lrb-', u'Sprkrdet', u'-rrb-', u'be', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'do', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acadmie', u'franaise', u'do', u'for', u'French', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'IN', u'NN', u'DT', u'NNP', u'NN', u'VBZ', u'IN', u'NNP', u'.'], u'char_offsets': [[20758, 20761], [20762, 20769], [20770, 20778], [20779, 20786], [20787, 20788], [20788, 20796], [20796, 20797], [20798, 20800], [20801, 20804], [20805, 20813], [20814, 20823], [20824, 20826], [20827, 20834], [20834, 20835], [20836, 20839], [20840, 20844], [20845, 20848], [20849, 20856], [20857, 20859], [20860, 20867], [20868, 20875], [20876, 20878], [20879, 20882], [20883, 20891], [20891, 20892], [20893, 20895], [20896, 20899], [20900, 20908], [20909, 20912], [20913, 20920], [20921, 20929], [20930, 20934], [20935, 20938], [20939, 20945], [20945, 20946]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])

Does Swedish use the perfect participle to form the present perfect tense?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No.
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No.') == True
 +  where 'No.' = <src.question_processing.Question_parser instance at 0x7fbca0cea128>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param288] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea1b8>, <src.tfidf.TF_IDF object at 0x7fbca1a100d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert str2bool('No') == True
E                +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cea1b8>.answer
E                +  and   True = str2bool('Yes')

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.57994812726974487, {u'tokens': [u'Perfect', u'and', u'present', u'participles', u'as', u'adjectival', u'verbs', u'are', u'very', u'common', u':', u':', u'Perfect', u'participle', u':', u'en', u'stekt', u'fisk', u';', u'``', u'a', u'fried', u'fish', u"''", u':', u'Present', u'participle', u':', u'en', u'stinkande', u'fisk', u';', u'``', u'a', u'stinking', u'fish', u"''", u'In', u'contrast', u'to', u'English', u'and', u'many', u'other', u'languages', u',', u'Swedish', u'does', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tenses', u'.'], u'lemmas': [u'Perfect', u'and', u'present', u'participle', u'as', u'adjectival', u'verb', u'be', u'very', u'common', u':', u':', u'Perfect', u'participle', u':', u'en', u'stekt', u'fisk', u';', u'``', u'a', u'fried', u'fish', u"''", u':', u'present', u'participle', u':', u'en', u'stinkande', u'fisk', u';', u'``', u'a', u'stinking', u'fish', u"''", u'in', u'contrast', u'to', u'English', u'and', u'many', u'other', u'language', u',', u'Swedish', u'do', u'not', u'use', u'the', u'perfect', u'participle', u'to', u'form', u'the', u'present', u'perfect', u'and', u'past', u'perfect', u'tense', u'.'], u'pos': [u'NNP', u'CC', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'VBP', u'RB', u'JJ', u':', u':', u'NNP', u'NN', u':', u'IN', u'NN', u'NN', u':', u'``', u'DT', u'JJ', u'NN', u"''", u':', u'JJ', u'NN', u':', u'IN', u'NN', u'NN', u':', u'``', u'DT', u'JJ', u'NN', u"''", u'IN', u'NN', u'TO', u'NNP', u'CC', u'JJ', u'JJ', u'NNS', u',', u'NNP', u'VBZ', u'RB', u'VB', u'DT', u'JJ', u'NN', u'TO', u'VB', u'DT', u'JJ', u'JJ', u'CC', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[37459, 37466], [37467, 37470], [37471, 37478], [37479, 37490], [37491, 37493], [37494, 37504], [37505, 37510], [37511, 37514], [37515, 37519], [37520, 37526], [37526, 37527], [37529, 37530], [37530, 37537], [37538, 37548], [37548, 37549], [37550, 37552], [37553, 37558], [37559, 37563], [37563, 37564], [37565, 37566], [37566, 37567], [37568, 37573], [37574, 37578], [37578, 37579], [37580, 37581], [37581, 37588], [37589, 37599], [37599, 37600], [37601, 37603], [37604, 37613], [37614, 37618], [37618, 37619], [37620, 37621], [37621, 37622], [37623, 37631], [37632, 37636], [37636, 37637], [37639, 37641], [37642, 37650], [37651, 37653], [37654, 37661], [37662, 37665], [37666, 37670], [37671, 37676], [37677, 37686], [37686, 37687], [37688, 37695], [37696, 37700], [37701, 37704], [37705, 37708], [37709, 37712], [37713, 37720], [37721, 37731], [37732, 37734], [37735, 37739], [37740, 37743], [37744, 37751], [37752, 37759], [37760, 37763], [37764, 37768], [37769, 37776], [37777, 37783], [37783, 37784]]}) 
answer: set([])
candidate Sentence: (0.37615692615509033, {u'tokens': [u'Rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-LRB-', u'``', u'have', u"''", u'-RRB-', u',', u'hade', u'-LRB-', u'``', u'had', u"''", u'-RRB-', u'is', u'followed', u'by', u'a', u'special', u'form', u',', u'called', u'supine', u',', u'used', u'solely', u'for', u'this', u'purpose', u'-LRB-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-RRB-', u':', u':', u'Perfect', u'participle', u':', u'mlad', u';', u'``', u'painted', u"''", u'-', u'supine', u'mlat', u',', u'present', u'perfect', u'har', u'mlat', u';', u'``', u'have', u'painted', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fried', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fried', u"''", u'The', u'Past', u'participle', u'is', u'used', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'lemmas': [u'rather', u',', u'the', u'auxiliary', u'verb', u'har', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u',', u'hade', u'-lrb-', u'``', u'have', u"''", u'-rrb-', u'be', u'follow', u'by', u'a', u'special', u'form', u',', u'call', u'supine', u',', u'use', u'solely', u'for', u'this', u'purpose', u'-lrb-', u'although', u'sometimes', u'identical', u'to', u'the', u'perfect', u'participle', u'-rrb-', u':', u':', u'Perfect', u'participle', u':', u'mlad', u';', u'``', u'paint', u"''", u'-', u'supine', u'mlat', u',', u'present', u'perfect', u'har', u'mlat', u';', u'``', u'have', u'paint', u"''", u':', u'Perfect', u'participle', u':', u'stekt', u',', u'``', u'fry', u"''", u'-', u'supine', u'stekt', u',', u'present', u'perfect', u'har', u'stekt', u';', u'``', u'have', u'fry', u"''", u'the', u'past', u'participle', u'be', u'use', u'to', u'build', u'the', u'compound', u'passive', u'voice', u',', u'instead', u'.'], u'pos': [u'RB', u',', u'DT', u'JJ', u'VB', u'NN', u'-LRB-', u'``', u'VBP', u"''", u'-RRB-', u',', u'NN', u'-LRB-', u'``', u'VBD', u"''", u'-RRB-', u'VBZ', u'VBN', u'IN', u'DT', u'JJ', u'NN', u',', u'VBN', u'NN', u',', u'VBN', u'RB', u'IN', u'DT', u'NN', u'-LRB-', u'IN', u'RB', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'-RRB-', u':', u':', u'NNP', u'NN', u':', u'NN', u':', u'``', u'VBN', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u':', u'NNP', u'NN', u':', u'NN', u',', u'``', u'VBD', u"''", u':', u'NN', u'NN', u',', u'JJ', u'JJ', u'NN', u'NN', u':', u'``', u'VBP', u'VBN', u"''", u'DT', u'JJ', u'NN', u'VBZ', u'VBN', u'TO', u'VB', u'DT', u'NN', u'NN', u'NN', u',', u'RB', u'.'], u'char_offsets': [[37785, 37791], [37791, 37792], [37793, 37796], [37797, 37806], [37807, 37811], [37812, 37815], [37816, 37817], [37817, 37818], [37818, 37822], [37822, 37823], [37823, 37824], [37824, 37825], [37826, 37830], [37831, 37832], [37832, 37833], [37833, 37836], [37836, 37837], [37837, 37838], [37839, 37841], [37842, 37850], [37851, 37853], [37854, 37855], [37856, 37863], [37864, 37868], [37868, 37869], [37870, 37876], [37877, 37883], [37883, 37884], [37885, 37889], [37890, 37896], [37897, 37900], [37901, 37905], [37906, 37913], [37914, 37915], [37915, 37923], [37924, 37933], [37934, 37943], [37944, 37946], [37947, 37950], [37951, 37958], [37959, 37969], [37969, 37970], [37970, 37971], [37973, 37974], [37974, 37981], [37982, 37992], [37992, 37993], [37994, 37998], [37998, 37999], [38000, 38001], [38001, 38008], [38008, 38009], [38010, 38011], [38012, 38018], [38019, 38023], [38023, 38024], [38025, 38032], [38033, 38040], [38041, 38044], [38045, 38049], [38049, 38050], [38051, 38052], [38052, 38056], [38057, 38064], [38064, 38065], [38066, 38067], [38067, 38074], [38075, 38085], [38085, 38086], [38087, 38092], [38092, 38093], [38094, 38095], [38095, 38100], [38100, 38101], [38102, 38103], [38104, 38110], [38111, 38116], [38116, 38117], [38118, 38125], [38126, 38133], [38134, 38137], [38138, 38143], [38143, 38144], [38145, 38146], [38146, 38150], [38151, 38156], [38156, 38157], [38159, 38162], [38163, 38167], [38168, 38178], [38179, 38181], [38182, 38186], [38187, 38189], [38190, 38195], [38196, 38199], [38200, 38208], [38209, 38216], [38217, 38222], [38222, 38223], [38224, 38231], [38231, 38232]]}) 
answer: set([u'swedish', u'tense'])
candidate Sentence: (0.26495712995529175, {u'tokens': [u'Wazzup', u'?'], u'lemmas': [u'Wazzup', u'?'], u'pos': [u'NNP', u'.'], u'char_offsets': [[28794, 28800], [28800, 28801]]}) 
answer: set([u'swedish', u'perfect', u'use', u'form', u'participle', u'to', u'tense', u'the', u'present'])
candidate Sentence: (0.16165842115879059, {u'tokens': [u'One', u'group', u'of', u'verbs', u'-LRB-', u'the', u'ones', u'ending', u'in', u'-', u'er', u'in', u'present', u'tense', u'-RRB-', u'have', u'a', u'special', u'imperative', u'form', u'-LRB-', u'generally', u'the', u'verb', u'stem', u'-RRB-', u',', u'but', u'with', u'most', u'verbs', u'the', u'imperative', u'is', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'lemmas': [u'one', u'group', u'of', u'verb', u'-lrb-', u'the', u'one', u'end', u'in', u'-', u'er', u'in', u'present', u'tense', u'-rrb-', u'have', u'a', u'special', u'imperative', u'form', u'-lrb-', u'generally', u'the', u'verb', u'stem', u'-rrb-', u',', u'but', u'with', u'most', u'verb', u'the', u'imperative', u'be', u'identical', u'to', u'the', u'infinitive', u'form', u'.'], u'pos': [u'CD', u'NN', u'IN', u'NNS', u'-LRB-', u'DT', u'NNS', u'VBG', u'IN', u':', u'NN', u'IN', u'JJ', u'JJ', u'-RRB-', u'VBP', u'DT', u'JJ', u'JJ', u'NN', u'-LRB-', u'RB', u'DT', u'VB', u'NN', u'-RRB-', u',', u'CC', u'IN', u'JJS', u'NNS', u'DT', u'JJ', u'VBZ', u'JJ', u'TO', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[37268, 37271], [37272, 37277], [37278, 37280], [37281, 37286], [37287, 37288], [37288, 37291], [37292, 37296], [37297, 37303], [37304, 37306], [37307, 37308], [37308, 37310], [37311, 37313], [37314, 37321], [37322, 37327], [37327, 37328], [37329, 37333], [37334, 37335], [37336, 37343], [37344, 37354], [37355, 37359], [37360, 37361], [37361, 37370], [37371, 37374], [37375, 37379], [37380, 37384], [37384, 37385], [37385, 37386], [37387, 37390], [37391, 37395], [37396, 37400], [37401, 37406], [37407, 37410], [37411, 37421], [37422, 37424], [37425, 37434], [37435, 37437], [37438, 37441], [37442, 37452], [37453, 37457], [37457, 37458]]}) 
answer: set([u'swedish', u'perfect', u'use', u'participle'])
candidate Sentence: (0.12835694849491119, {u'tokens': [u'The', u'Swedish', u'Language', u'Council', u'-LRB-', u'Sprkrdet', u'-RRB-', u'is', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'does', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acadmie', u'franaise', u'does', u'for', u'French', u'.'], u'lemmas': [u'the', u'Swedish', u'Language', u'Council', u'-lrb-', u'Sprkrdet', u'-rrb-', u'be', u'the', u'official', u'regulator', u'of', u'Swedish', u',', u'but', u'do', u'not', u'attempt', u'to', u'enforce', u'control', u'of', u'the', u'language', u',', u'as', u'for', u'instance', u'the', u'Acadmie', u'franaise', u'do', u'for', u'French', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'-LRB-', u'NNP', u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNP', u',', u'CC', u'VBZ', u'RB', u'VB', u'TO', u'VB', u'NN', u'IN', u'DT', u'NN', u',', u'IN', u'IN', u'NN', u'DT', u'NNP', u'NN', u'VBZ', u'IN', u'NNP', u'.'], u'char_offsets': [[20758, 20761], [20762, 20769], [20770, 20778], [20779, 20786], [20787, 20788], [20788, 20796], [20796, 20797], [20798, 20800], [20801, 20804], [20805, 20813], [20814, 20823], [20824, 20826], [20827, 20834], [20834, 20835], [20836, 20839], [20840, 20844], [20845, 20848], [20849, 20856], [20857, 20859], [20860, 20867], [20868, 20875], [20876, 20878], [20879, 20882], [20883, 20891], [20891, 20892], [20893, 20895], [20896, 20899], [20900, 20908], [20909, 20912], [20913, 20920], [20921, 20929], [20930, 20934], [20935, 20938], [20939, 20945], [20945, 20946]]}) 
answer: set([u'perfect', u'use', u'form', u'participle', u'tense', u'present'])

Does Swedish use the perfect participle to form the present perfect tense?
Validity= False
Question Type = NA
Answer Type = NA
Answer = No
Difficulty = easy

['Yes', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert str2bool('No') == True
 +  where 'No' = <src.question_processing.Question_parser instance at 0x7fbca0cea1b8>.answer
 +  and   True = str2bool('Yes')
_____________________________ test_yesno[param290] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea2d8>, <src.tfidf.TF_IDF object at 0x7fbca1848750>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea2d8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.20537193119525909, {u'tokens': [u'Taipei', u'lies', u'in', u'the', u'two', u'relatively', u'narrow', u'valleys', u'of', u'the', u'Keelung', u'-LRB-', u'-RRB-', u'and', u'Xindian', u'-LRB-', u'-RRB-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'lemmas': [u'Taipei', u'lie', u'in', u'the', u'two', u'relatively', u'narrow', u'valley', u'of', u'the', u'Keelung', u'-lrb-', u'-rrb-', u'and', u'xindian', u'-lrb-', u'-rrb-', u'Rivers', u',', u'which', u'join', u'to', u'form', u'the', u'Danshui', u'River', u'along', u'the', u'city', u"'s", u'western', u'border', u'.'], u'pos': [u'NNP', u'VBZ', u'IN', u'DT', u'CD', u'RB', u'JJ', u'NNS', u'IN', u'DT', u'NNP', u'-LRB-', u'-RRB-', u'CC', u'NN', u'-LRB-', u'-RRB-', u'NNP', u',', u'WDT', u'VBP', u'TO', u'VB', u'DT', u'NNP', u'NNP', u'IN', u'DT', u'NN', u'POS', u'JJ', u'NN', u'.'], u'char_offsets': [[480, 486], [487, 491], [492, 494], [495, 498], [499, 502], [503, 513], [514, 520], [521, 528], [529, 531], [532, 535], [536, 543], [544, 545], [545, 546], [547, 550], [551, 558], [559, 560], [560, 561], [562, 568], [568, 569], [570, 575], [576, 580], [581, 583], [584, 588], [589, 592], [593, 600], [601, 606], [607, 612], [613, 616], [617, 621], [621, 623], [624, 631], [632, 638], [638, 639]]}) 
answer: set([u'a'])
candidate Sentence: (0.062332898378372192, {u'tokens': [u'*', u'Te-sheng', u'Wei', u"'s", u'Cape', u'No.', u'7', u'-LRB-', u'drama/comedy', u'-RRB-', u'*', u'Yun', u'Fu', u"'s", u'Take', u'Me', u'From', u'Behind', u'-LRB-', u'music', u'video', u'-RRB-', u'*', u'Jack', u'Yu', u"'s", u'Lollipop', u'Love', u'-LRB-', u'music', u'video', u'-RRB-', u'*', u'Edward', u'Yang', u"'s", u'-LRB-', u'drama', u'-RRB-', u'*', u'Edward', u'Yang', u"'s", u'Mahjong', u'-LRB-', u'drama', u'-RRB-', u'*', u'Edward', u'Yang', u"'s", u'A', u'Brighter', u'Summer', u'Day', u'-LRB-', u'drama', u'-RRB-', u'*', u'Lee', u'Kang-sheng', u"'s", u'Help', u'Me', u'Eros', u'-LRB-', u'drama', u'-RRB-', u'*', u'Tsai', u'Ming-liang', u"'s", u'Vive', u"L'Amour", u'-LRB-', u'drama', u'-RRB-', u'*', u'Tsai', u'Ming-liang', u"'s", u'What', u'Time', u'Is', u'It', u'There', u'?'], u'lemmas': [u'*', u'te-sheng', u'Wei', u"'s", u'Cape', u'no.', u'7', u'-lrb-', u'drama/comedy', u'-rrb-', u'*', u'Yun', u'Fu', u"'s", u'take', u'I', u'from', u'behind', u'-lrb-', u'music', u'video', u'-rrb-', u'*', u'Jack', u'Yu', u"'s", u'Lollipop', u'Love', u'-lrb-', u'music', u'video', u'-rrb-', u'*', u'Edward', u'Yang', u"'s", u'-lrb-', u'drama', u'-rrb-', u'*', u'Edward', u'Yang', u"'s", u'Mahjong', u'-lrb-', u'drama', u'-rrb-', u'*', u'Edward', u'Yang', u"'s", u'a', u'brighter', u'summer', u'day', u'-lrb-', u'drama', u'-rrb-', u'*', u'Lee', u'Kang-sheng', u"'s", u'help', u'I', u'Eros', u'-lrb-', u'drama', u'-rrb-', u'*', u'Tsai', u'Ming-liang', u"'s", u'Vive', u"L'Amour", u'-lrb-', u'drama', u'-rrb-', u'*', u'Tsai', u'Ming-liang', u"'s", u'what', u'Time', u'be', u'it', u'there', u'?'], u'pos': [u'SYM', u'NN', u'NNP', u'POS', u'NNP', u'NN', u'CD', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'VB', u'PRP', u'IN', u'IN', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'-LRB-', u'NN', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NNP', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'DT', u'JJR', u'NN', u'NN', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NN', u'PRP', u'NNPS', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'NNP', u'NNP', u'-LRB-', u'NN', u'-RRB-', u'SYM', u'NNP', u'NNP', u'POS', u'WDT', u'NNP', u'VBZ', u'PRP', u'EX', u'.'], u'char_offsets': [[11792, 11793], [11793, 11801], [11802, 11805], [11805, 11807], [11808, 11812], [11813, 11816], [11817, 11818], [11819, 11820], [11820, 11832], [11832, 11833], [11834, 11835], [11835, 11838], [11839, 11841], [11841, 11843], [11844, 11848], [11849, 11851], [11852, 11856], [11857, 11863], [11864, 11865], [11865, 11870], [11871, 11876], [11876, 11877], [11878, 11879], [11879, 11883], [11884, 11886], [11886, 11888], [11889, 11897], [11898, 11902], [11903, 11904], [11904, 11909], [11910, 11915], [11915, 11916], [11917, 11918], [11918, 11924], [11925, 11929], [11929, 11931], [11933, 11934], [11934, 11939], [11939, 11940], [11941, 11942], [11942, 11948], [11949, 11953], [11953, 11955], [11956, 11963], [11964, 11965], [11965, 11970], [11970, 11971], [11972, 11973], [11973, 11979], [11980, 11984], [11984, 11986], [11987, 11988], [11989, 11997], [11998, 12004], [12005, 12008], [12009, 12010], [12010, 12015], [12015, 12016], [12017, 12018], [12018, 12021], [12022, 12032], [12032, 12034], [12035, 12039], [12040, 12042], [12043, 12047], [12048, 12049], [12049, 12054], [12054, 12055], [12056, 12057], [12057, 12061], [12062, 12072], [12072, 12074], [12075, 12079], [12080, 12087], [12088, 12089], [12089, 12094], [12094, 12095], [12096, 12097], [12097, 12101], [12102, 12112], [12112, 12114], [12115, 12119], [12120, 12124], [12125, 12127], [12128, 12130], [12131, 12136], [12136, 12137]]}) 
answer: set([u'valley', u'taipei', u'in'])
candidate Sentence: (0.047915779054164886, {u'tokens': [u'Taipei', u'City', u'is', u'located', u'in', u'the', u'Taipei', u'Basin', u'in', u'northern', u'Taiwan', u'.'], u'lemmas': [u'Taipei', u'City', u'be', u'located', u'in', u'the', u'Taipei', u'Basin', u'in', u'northern', u'Taiwan', u'.'], u'pos': [u'NNP', u'NNP', u'VBZ', u'JJ', u'IN', u'DT', u'NNP', u'NNP', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[13505, 13511], [13512, 13516], [13517, 13519], [13520, 13527], [13528, 13530], [13531, 13534], [13535, 13541], [13542, 13547], [13548, 13550], [13551, 13559], [13560, 13566], [13566, 13567]]}) 
answer: set([u'a', u'valley'])
candidate Sentence: (0.042354375123977661, {u'tokens': [u'The', u'mayor', u'of', u'Taipei', u'City', u'had', u'been', u'an', u'appointed', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'was', u'held', u'in', u'1994', u'.'], u'lemmas': [u'the', u'mayor', u'of', u'Taipei', u'City', u'have', u'be', u'a', u'appoint', u'position', u'since', u'Taipei', u"'s", u'conversion', u'to', u'a', u'centrally-administered', u'municipality', u'in', u'1967', u'until', u'the', u'first', u'public', u'election', u'be', u'hold', u'in', u'1994', u'.'], u'pos': [u'DT', u'NN', u'IN', u'NNP', u'NNP', u'VBD', u'VBN', u'DT', u'VBN', u'NN', u'IN', u'NNP', u'POS', u'NN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'CD', u'IN', u'DT', u'JJ', u'JJ', u'NN', u'VBD', u'VBN', u'IN', u'CD', u'.'], u'char_offsets': [[22668, 22671], [22672, 22677], [22678, 22680], [22681, 22687], [22688, 22692], [22693, 22696], [22697, 22701], [22702, 22704], [22705, 22714], [22715, 22723], [22724, 22729], [22730, 22736], [22736, 22738], [22739, 22749], [22750, 22752], [22753, 22754], [22755, 22777], [22778, 22790], [22791, 22793], [22794, 22798], [22799, 22804], [22805, 22808], [22809, 22814], [22815, 22821], [22822, 22830], [22831, 22834], [22835, 22839], [22840, 22842], [22843, 22847], [22847, 22848]]}) 
answer: set([u'valley'])
candidate Sentence: (0.039396520704030991, {u'tokens': [u'It', u'is', u'a', u'public', u'university', u'with', u'campuses', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'lemmas': [u'it', u'be', u'a', u'public', u'university', u'with', u'campus', u'in', u'both', u'Taipei', u'and', u'Hsinchu', u'.'], u'pos': [u'PRP', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'NNS', u'IN', u'DT', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[26548, 26550], [26551, 26553], [26554, 26555], [26556, 26562], [26563, 26573], [26574, 26578], [26579, 26587], [26588, 26590], [26591, 26595], [26596, 26602], [26603, 26606], [26607, 26614], [26614, 26615]]}) 
answer: set([u'valley'])

Is Taipei in a valley?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea2d8>.answer
_____________________________ test_yesno[param293] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea488>, <src.tfidf.TF_IDF object at 0x7fbca1848750>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea488>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45971763134002686, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'The', u'National', u'Palace', u'Museum', u'is', u'an', u'art', u'gallery', u'and', u'museum', u'built', u'around', u'a', u'permanent', u'collection', u'centered', u'on', u'ancient', u'Chinese', u'artifacts', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'The', u'National', u'Palace', u'Museum', u'be', u'a', u'art', u'gallery', u'and', u'museum', u'build', u'around', u'a', u'permanent', u'collection', u'center', u'on', u'ancient', u'chinese', u'artifact', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[3682, 3685], [3686, 3694], [3695, 3701], [3702, 3708], [3709, 3712], [3713, 3721], [3722, 3728], [3729, 3735], [3736, 3738], [3739, 3741], [3742, 3745], [3746, 3753], [3754, 3757], [3758, 3764], [3765, 3770], [3771, 3777], [3778, 3779], [3780, 3789], [3790, 3800], [3801, 3809], [3810, 3812], [3813, 3820], [3821, 3828], [3829, 3838], [3838, 3839]]}) 
answer: set([u'taipei', u'in'])
candidate Sentence: (0.3888760507106781, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'is', u'a', u'leading', u'art', u'gallery', u'and', u'cultural', u'landmark', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'be', u'a', u'leading', u'art', u'gallery', u'and', u'cultural', u'landmark', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[6125, 6128], [6129, 6137], [6138, 6144], [6145, 6151], [6152, 6154], [6155, 6156], [6157, 6164], [6165, 6168], [6169, 6176], [6177, 6180], [6181, 6189], [6190, 6198], [6198, 6199]]}) 
answer: set([u'taipei', u'in'])
candidate Sentence: (0.27384814620018005, {u'tokens': [u'The', u'National', u'Taiwan', u'Museum', u'is', u'the', u'oldest', u'museum', u'in', u'Taiwan', u'.'], u'lemmas': [u'the', u'National', u'Taiwan', u'Museum', u'be', u'the', u'oldest', u'museum', u'in', u'Taiwan', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[4734, 4737], [4738, 4746], [4747, 4753], [4754, 4760], [4761, 4763], [4764, 4767], [4768, 4774], [4775, 4781], [4782, 4784], [4785, 4791], [4791, 4792]]}) 
answer: set([u'palace', u'taipei'])
candidate Sentence: (0.26526680588722229, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'in', u'Taipei', u'now', u'boasts', u'a', u'truly', u'international', u'collection', u'while', u'housing', u'one', u'of', u'the', u'world', u"'s", u'largest', u'assemblies', u'of', u'artifacts', u'from', u'ancient', u'China', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'in', u'Taipei', u'now', u'boast', u'a', u'truly', u'international', u'collection', u'while', u'housing', u'one', u'of', u'the', u'world', u"'s", u'largest', u'assembly', u'of', u'artifact', u'from', u'ancient', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'RB', u'VBZ', u'DT', u'RB', u'JJ', u'NN', u'IN', u'NN', u'CD', u'IN', u'DT', u'NN', u'POS', u'JJS', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[4076, 4079], [4080, 4088], [4089, 4095], [4096, 4102], [4103, 4105], [4106, 4112], [4113, 4116], [4117, 4123], [4124, 4125], [4126, 4131], [4132, 4145], [4146, 4156], [4157, 4162], [4163, 4170], [4171, 4174], [4175, 4177], [4178, 4181], [4182, 4187], [4187, 4189], [4190, 4197], [4198, 4208], [4209, 4211], [4212, 4221], [4222, 4226], [4227, 4234], [4235, 4240], [4240, 4241]]}) 
answer: set([])
candidate Sentence: (0.18335036933422089, {u'tokens': [u'Since', u'1999', u',', u'it', u'has', u'been', u'renamed', u'to', u'the', u'``', u'National', u'Taiwan', u'Museum', u"''", u'.'], u'lemmas': [u'since', u'1999', u',', u'it', u'have', u'be', u'rename', u'to', u'the', u'``', u'National', u'Taiwan', u'Museum', u"''", u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBZ', u'VBN', u'VBN', u'TO', u'DT', u'``', u'NNP', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[5210, 5215], [5216, 5220], [5220, 5221], [5222, 5224], [5225, 5228], [5229, 5233], [5234, 5241], [5242, 5244], [5245, 5248], [5249, 5250], [5250, 5258], [5259, 5265], [5266, 5272], [5272, 5273], [5273, 5274]]}) 
answer: set([u'palace', u'taipei', u'in'])

Is the National Palace Museum in Taipei?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'Yes', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea488>.answer
_____________________________ test_yesno[param294] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cea518>, <src.tfidf.TF_IDF object at 0x7fbca1848750>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea518>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.45971763134002686, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'The', u'National', u'Palace', u'Museum', u'is', u'an', u'art', u'gallery', u'and', u'museum', u'built', u'around', u'a', u'permanent', u'collection', u'centered', u'on', u'ancient', u'Chinese', u'artifacts', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'The', u'National', u'Palace', u'Museum', u'be', u'a', u'art', u'gallery', u'and', u'museum', u'build', u'around', u'a', u'permanent', u'collection', u'center', u'on', u'ancient', u'chinese', u'artifact', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'NN', u'NN', u'CC', u'NN', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'VBN', u'IN', u'JJ', u'JJ', u'NNS', u'.'], u'char_offsets': [[3682, 3685], [3686, 3694], [3695, 3701], [3702, 3708], [3709, 3712], [3713, 3721], [3722, 3728], [3729, 3735], [3736, 3738], [3739, 3741], [3742, 3745], [3746, 3753], [3754, 3757], [3758, 3764], [3765, 3770], [3771, 3777], [3778, 3779], [3780, 3789], [3790, 3800], [3801, 3809], [3810, 3812], [3813, 3820], [3821, 3828], [3829, 3838], [3838, 3839]]}) 
answer: set([u'taipei', u'in'])
candidate Sentence: (0.3888760507106781, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'is', u'a', u'leading', u'art', u'gallery', u'and', u'cultural', u'landmark', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'be', u'a', u'leading', u'art', u'gallery', u'and', u'cultural', u'landmark', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJ', u'NN', u'NN', u'CC', u'JJ', u'NN', u'.'], u'char_offsets': [[6125, 6128], [6129, 6137], [6138, 6144], [6145, 6151], [6152, 6154], [6155, 6156], [6157, 6164], [6165, 6168], [6169, 6176], [6177, 6180], [6181, 6189], [6190, 6198], [6198, 6199]]}) 
answer: set([u'taipei', u'in'])
candidate Sentence: (0.27384814620018005, {u'tokens': [u'The', u'National', u'Taiwan', u'Museum', u'is', u'the', u'oldest', u'museum', u'in', u'Taiwan', u'.'], u'lemmas': [u'the', u'National', u'Taiwan', u'Museum', u'be', u'the', u'oldest', u'museum', u'in', u'Taiwan', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'VBZ', u'DT', u'JJS', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[4734, 4737], [4738, 4746], [4747, 4753], [4754, 4760], [4761, 4763], [4764, 4767], [4768, 4774], [4775, 4781], [4782, 4784], [4785, 4791], [4791, 4792]]}) 
answer: set([u'palace', u'taipei'])
candidate Sentence: (0.26526680588722229, {u'tokens': [u'The', u'National', u'Palace', u'Museum', u'in', u'Taipei', u'now', u'boasts', u'a', u'truly', u'international', u'collection', u'while', u'housing', u'one', u'of', u'the', u'world', u"'s", u'largest', u'assemblies', u'of', u'artifacts', u'from', u'ancient', u'China', u'.'], u'lemmas': [u'the', u'National', u'Palace', u'Museum', u'in', u'Taipei', u'now', u'boast', u'a', u'truly', u'international', u'collection', u'while', u'housing', u'one', u'of', u'the', u'world', u"'s", u'largest', u'assembly', u'of', u'artifact', u'from', u'ancient', u'China', u'.'], u'pos': [u'DT', u'NNP', u'NNP', u'NNP', u'IN', u'NNP', u'RB', u'VBZ', u'DT', u'RB', u'JJ', u'NN', u'IN', u'NN', u'CD', u'IN', u'DT', u'NN', u'POS', u'JJS', u'NNS', u'IN', u'NNS', u'IN', u'JJ', u'NNP', u'.'], u'char_offsets': [[4076, 4079], [4080, 4088], [4089, 4095], [4096, 4102], [4103, 4105], [4106, 4112], [4113, 4116], [4117, 4123], [4124, 4125], [4126, 4131], [4132, 4145], [4146, 4156], [4157, 4162], [4163, 4170], [4171, 4174], [4175, 4177], [4178, 4181], [4182, 4187], [4187, 4189], [4190, 4197], [4198, 4208], [4209, 4211], [4212, 4221], [4222, 4226], [4227, 4234], [4235, 4240], [4240, 4241]]}) 
answer: set([])
candidate Sentence: (0.18335036933422089, {u'tokens': [u'Since', u'1999', u',', u'it', u'has', u'been', u'renamed', u'to', u'the', u'``', u'National', u'Taiwan', u'Museum', u"''", u'.'], u'lemmas': [u'since', u'1999', u',', u'it', u'have', u'be', u'rename', u'to', u'the', u'``', u'National', u'Taiwan', u'Museum', u"''", u'.'], u'pos': [u'IN', u'CD', u',', u'PRP', u'VBZ', u'VBN', u'VBN', u'TO', u'DT', u'``', u'NNP', u'NNP', u'NNP', u"''", u'.'], u'char_offsets': [[5210, 5215], [5216, 5220], [5220, 5221], [5222, 5224], [5225, 5228], [5229, 5233], [5234, 5241], [5242, 5244], [5245, 5248], [5249, 5250], [5250, 5258], [5259, 5265], [5266, 5272], [5272, 5273], [5273, 5274]]}) 
answer: set([u'palace', u'taipei', u'in'])

Is the National Palace Museum in Taipei?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'Yes', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cea518>.answer
_____________________________ test_yesno[param320] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced3f8>, <src.tfidf.TF_IDF object at 0x7fbca4e40d50>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
E                +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x7fbca0ced3f8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.41666293144226074, {u'tokens': [u'``', u'What', u"'s", u'so', u'Chinese', u'about', u'Vietnamese', u'?', u"''"], u'lemmas': [u'``', u'what', u'be', u'so', u'chinese', u'about', u'vietnamese', u'?', u"''"], u'pos': [u'``', u'WP', u'VBZ', u'RB', u'JJ', u'IN', u'NNS', u'.', u"''"], u'char_offsets': [[30584, 30585], [30585, 30589], [30589, 30591], [30592, 30594], [30595, 30602], [30603, 30608], [30609, 30619], [30619, 30620], [30620, 30621]]}) 
answer: set([u'use', u'formally', u'system', u'writing', u'write', u'the'])
candidate Sentence: (0.30058509111404419, {u'tokens': [u'Quc-ng', u':', u'The', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'lemmas': [u'quc-ng', u':', u'the', u'modern', u'writing', u'system', u'in', u'Vietnam', u'.'], u'pos': [u'JJ', u':', u'DT', u'JJ', u'NN', u'NN', u'IN', u'NNP', u'.'], u'char_offsets': [[31600, 31606], [31606, 31607], [31608, 31611], [31612, 31618], [31619, 31626], [31627, 31633], [31634, 31636], [31637, 31644], [31644, 31645]]}) 
answer: set([u'write', u'use', u'formally', u'chinese', u'vietnamese'])
candidate Sentence: (0.27484950423240662, {u'tokens': [u'Much', u'vocabulary', u'has', u'been', u'borrowed', u'from', u'Chinese', u',', u'especially', u'words', u'that', u'denote', u'abstract', u'ideas', u'in', u'the', u'same', u'way', u'European', u'languages', u'borrow', u'from', u'Latin', u'and', u'Greek', u',', u'and', u'it', u'was', u'formerly', u'written', u'using', u'the', u'Chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modified', u'format', u'and', u'was', u'given', u'vernacular', u'pronunciation', u'.'], u'lemmas': [u'much', u'vocabulary', u'have', u'be', u'borrow', u'from', u'chinese', u',', u'especially', u'word', u'that', u'denote', u'abstract', u'idea', u'in', u'the', u'same', u'way', u'european', u'language', u'borrow', u'from', u'Latin', u'and', u'greek', u',', u'and', u'it', u'be', u'formerly', u'write', u'use', u'the', u'chinese', u'writing', u'system', u',', u'albeit', u'in', u'a', u'modify', u'format', u'and', u'be', u'give', u'vernacular', u'pronunciation', u'.'], u'pos': [u'JJ', u'NN', u'VBZ', u'VBN', u'VBN', u'IN', u'JJ', u',', u'RB', u'NNS', u'WDT', u'VBP', u'JJ', u'NNS', u'IN', u'DT', u'JJ', u'NN', u'JJ', u'NNS', u'VB', u'IN', u'NNP', u'CC', u'JJ', u',', u'CC', u'PRP', u'VBD', u'RB', u'VBN', u'VBG', u'DT', u'JJ', u'NN', u'NN', u',', u'IN', u'IN', u'DT', u'VBN', u'NN', u'CC', u'VBD', u'VBN', u'JJ', u'NN', u'.'], u'char_offsets': [[865, 869], [870, 880], [881, 884], [885, 889], [890, 898], [899, 903], [904, 911], [911, 912], [913, 923], [924, 929], [930, 934], [935, 941], [942, 950], [951, 956], [957, 959], [960, 963], [964, 968], [969, 972], [973, 981], [982, 991], [992, 998], [999, 1003], [1004, 1009], [1010, 1013], [1014, 1019], [1019, 1020], [1021, 1024], [1025, 1027], [1028, 1031], [1032, 1040], [1041, 1048], [1049, 1054], [1055, 1058], [1059, 1066], [1067, 1074], [1075, 1081], [1081, 1082], [1083, 1089], [1090, 1092], [1093, 1094], [1095, 1103], [1104, 1110], [1111, 1114], [1115, 1118], [1119, 1124], [1125, 1135], [1136, 1149], [1149, 1150]]}) 
answer: set([u'formally', u'vietnamese'])
candidate Sentence: (0.27019703388214111, {u'tokens': [u'Before', u'French', u'rule', u',', u'the', u'first', u'two', u'Vietnamese', u'writing', u'systems', u'were', u'based', u'on', u'Chinese', u'script', u':', u'*', u'the', u'standard', u'Chinese', u'character', u'set', u'called', u'ch', u'nho', u'-LRB-', u'scholar', u"'s", u'characters', u',', u'-RRB-', u':', u'used', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'known', u'as', u'ch', u'nm', u'-LRB-', u'southern/vernacular', u'characters', u',', u'-RRB-', u'with', u'characters', u'not', u'found', u'in', u'the', u'Chinese', u'character', u'set', u';', u'this', u'system', u'was', u'better', u'adapted', u'to', u'the', u'unique', u'phonetic', u'aspects', u'of', u'Vietnamese', u'which', u'differed', u'from', u'Chinese', u'The', u'authentic', u'Chinese', u'writing', u',', u'ch', u'nho', u',', u'was', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch', u'nm', u'was', u'used', u'by', u'members', u'of', u'the', u'educated', u'elite', u'-LRB-', u'one', u'needs', u'to', u'be', u'able', u'to', u'read', u'ch', u'nho', u'in', u'order', u'to', u'read', u'ch', u'nm', u'-RRB-', u'.'], u'lemmas': [u'before', u'french', u'rule', u',', u'the', u'first', u'two', u'vietnamese', u'write', u'system', u'be', u'base', u'on', u'chinese', u'script', u':', u'*', u'the', u'standard', u'chinese', u'character', u'set', u'call', u'ch', u'nho', u'-lrb-', u'scholar', u"'s", u'character', u',', u'-rrb-', u':', u'use', u'to', u'write', u'Literary', u'Chinese', u'*', u'a', u'complicated', u'variant', u'form', u'know', u'as', u'ch', u'nm', u'-lrb-', u'southern/vernacular', u'character', u',', u'-rrb-', u'with', u'character', u'not', u'find', u'in', u'the', u'chinese', u'character', u'set', u';', u'this', u'system', u'be', u'better', u'adapt', u'to', u'the', u'unique', u'phonetic', u'aspect', u'of', u'vietnamese', u'which', u'differ', u'from', u'chinese', u'the', u'authentic', u'chinese', u'writing', u',', u'ch', u'nho', u',', u'be', u'in', u'more', u'common', u'usage', u',', u'whereas', u'ch', u'nm', u'be', u'use', u'by', u'member', u'of', u'the', u'educate', u'elite', u'-lrb-', u'one', u'need', u'to', u'be', u'able', u'to', u'read', u'ch', u'nho', u'in', u'order', u'to', u'read', u'ch', u'nm', u'-rrb-', u'.'], u'pos': [u'IN', u'JJ', u'NN', u',', u'DT', u'JJ', u'CD', u'JJ', u'VBG', u'NNS', u'VBD', u'VBN', u'IN', u'JJ', u'NN', u':', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'NN', u'VBN', u'NN', u'NN', u'-LRB-', u'NN', u'POS', u'NNS', u',', u'-RRB-', u':', u'VBN', u'TO', u'VB', u'NNP', u'NNP', u'SYM', u'DT', u'JJ', u'JJ', u'NN', u'VBN', u'IN', u'NN', u'NN', u'-LRB-', u'JJ', u'NNS', u',', u'-RRB-', u'IN', u'NNS', u'RB', u'VBN', u'IN', u'DT', u'JJ', u'NN', u'NN', u':', u'DT', u'NN', u'VBD', u'RBR', u'VBN', u'TO', u'DT', u'JJ', u'JJ', u'NNS', u'IN', u'NNS', u'WDT', u'VBD', u'IN', u'JJ', u'DT', u'JJ', u'JJ', u'NN', u',', u'NN', u'NN', u',', u'VBD', u'IN', u'RBR', u'JJ', u'NN', u',', u'IN', u'NN', u'NN', u'VBD', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'VBN', u'NN', u'-LRB-', u'CD', u'VBZ', u'TO', u'VB', u'JJ', u'TO', u'VB', u'NN', u'NN', u'IN', u'NN', u'TO', u'VB', u'NN', u'NN', u'-RRB-', u'.'], u'char_offsets': [[22228, 22234], [22235, 22241], [22242, 22246], [22246, 22247], [22248, 22251], [22252, 22257], [22258, 22261], [22262, 22272], [22273, 22280], [22281, 22288], [22289, 22293], [22294, 22299], [22300, 22302], [22303, 22310], [22311, 22317], [22317, 22318], [22319, 22320], [22321, 22324], [22325, 22333], [22334, 22341], [22342, 22351], [22352, 22355], [22356, 22362], [22363, 22365], [22366, 22369], [22370, 22371], [22371, 22378], [22378, 22380], [22381, 22391], [22391, 22392], [22394, 22395], [22395, 22396], [22397, 22401], [22402, 22404], [22405, 22410], [22411, 22419], [22420, 22427], [22428, 22429], [22430, 22431], [22432, 22443], [22444, 22451], [22452, 22456], [22457, 22462], [22463, 22465], [22466, 22468], [22469, 22471], [22472, 22473], [22473, 22492], [22493, 22503], [22503, 22504], [22506, 22507], [22508, 22512], [22513, 22523], [22524, 22527], [22528, 22533], [22534, 22536], [22537, 22540], [22541, 22548], [22549, 22558], [22559, 22562], [22562, 22563], [22564, 22568], [22569, 22575], [22576, 22579], [22580, 22586], [22587, 22594], [22595, 22597], [22598, 22601], [22602, 22608], [22609, 22617], [22618, 22625], [22626, 22628], [22629, 22639], [22640, 22645], [22646, 22654], [22655, 22659], [22660, 22667], [22669, 22672], [22673, 22682], [22683, 22690], [22691, 22698], [22698, 22699], [22700, 22702], [22703, 22706], [22706, 22707], [22708, 22711], [22712, 22714], [22715, 22719], [22720, 22726], [22727, 22732], [22732, 22733], [22734, 22741], [22742, 22744], [22745, 22747], [22748, 22751], [22752, 22756], [22757, 22759], [22760, 22767], [22768, 22770], [22771, 22774], [22775, 22783], [22784, 22789], [22790, 22791], [22791, 22794], [22795, 22800], [22801, 22803], [22804, 22806], [22807, 22811], [22812, 22814], [22815, 22819], [22820, 22822], [22823, 22826], [22827, 22829], [22830, 22835], [22836, 22838], [22839, 22843], [22844, 22846], [22847, 22849], [22849, 22850], [22850, 22851]]}) 
answer: set([u'formally'])
candidate Sentence: (0.24996036291122437, {u'tokens': [u'The', u'Vietnamese', u'writing', u'system', u'in', u'use', u'today', u'is', u'an', u'adapted', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritics', u'for', u'tones', u'and', u'certain', u'letters', u'.'], u'lemmas': [u'the', u'vietnamese', u'writing', u'system', u'in', u'use', u'today', u'be', u'a', u'adapt', u'version', u'of', u'the', u'Latin', u'alphabet', u',', u'with', u'additional', u'diacritic', u'for', u'tone', u'and', u'certain', u'letter', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'NN', u'IN', u'NN', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'IN', u'DT', u'NNP', u'NN', u',', u'IN', u'JJ', u'NNS', u'IN', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1151, 1154], [1155, 1165], [1166, 1173], [1174, 1180], [1181, 1183], [1184, 1187], [1188, 1193], [1194, 1196], [1197, 1199], [1200, 1207], [1208, 1215], [1216, 1218], [1219, 1222], [1223, 1228], [1229, 1237], [1237, 1238], [1239, 1243], [1244, 1254], [1255, 1265], [1266, 1269], [1270, 1275], [1276, 1279], [1280, 1287], [1288, 1295], [1295, 1296]]}) 
answer: set([u'write', u'formally', u'chinese'])

Was Vietnamese formally written using the Chinese writing system?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes, Vietnamese was *formerly* written using the Chinese writing system.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes, Vietnamese was *formerly* written using the Chinese writing system.')
 +    where 'Yes, Vietnamese was *formerly* written using the Chinese writing system.' = <src.question_processing.Question_parser instance at 0x7fbca0ced3f8>.answer
_____________________________ test_yesno[param322] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced518>, <src.tfidf.TF_IDF object at 0x7fbca33aa690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced518>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.38675341010093689, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[45268, 45269], [45271, 45274], [45275, 45277], [45278, 45281], [45282, 45288], [45289, 45291], [45292, 45296], [45297, 45299], [45300, 45304], [45304, 45305]]}) 
answer: set([u'a', u'four', u'string', u'have'])
candidate Sentence: (0.21969939768314362, {u'tokens': [u'Violin', u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'Violin', u'The', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 6], [10, 13], [14, 20], [21, 23], [24, 25], [26, 31], [32, 38], [39, 49], [50, 54], [55, 59], [60, 67], [68, 75], [76, 81], [82, 84], [85, 92], [93, 99], [99, 100]]}) 
answer: set([u'have'])
candidate Sentence: (0.21046352386474609, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[15017, 15022], [15023, 15027], [15028, 15035], [15036, 15040], [15041, 15045], [15046, 15053], [15053, 15054], [15055, 15060], [15061, 15064], [15065, 15069], [15070, 15081], [15082, 15086], [15087, 15091], [15092, 15099], [15099, 15100], [15104, 15107], [15107, 15108], [15109, 15111], [15112, 15116], [15117, 15122], [15122, 15123]]}) 
answer: set([u'a'])
candidate Sentence: (0.19715525209903717, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[40085, 40087], [40088, 40096], [40096, 40097], [40098, 40102], [40103, 40109], [40110, 40117], [40118, 40124], [40125, 40127], [40128, 40131], [40132, 40133], [40134, 40143], [40144, 40148], [40149, 40153], [40154, 40160], [40161, 40163], [40164, 40167], [40168, 40172], [40173, 40180], [40181, 40188], [40189, 40191], [40192, 40196], [40197, 40202], [40203, 40206], [40207, 40209], [40210, 40213], [40214, 40215], [40216, 40222], [40223, 40225], [40226, 40230], [40231, 40240], [40241, 40248], [40249, 40251], [40251, 40252]]}) 
answer: set([u'violin', u'have'])
candidate Sentence: (0.18580682575702667, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3293, 3296], [3297, 3303], [3304, 3314], [3315, 3321], [3322, 3324], [3325, 3329], [3330, 3334], [3335, 3342], [3342, 3343], [3344, 3348], [3349, 3352], [3353, 3359], [3360, 3366], [3366, 3367], [3368, 3370], [3371, 3379], [3380, 3382], [3383, 3387], [3388, 3392], [3393, 3404], [3405, 3407], [3408, 3412], [3413, 3415], [3416, 3422], [3423, 3428], [3428, 3429], [3430, 3433], [3434, 3437], [3438, 3442], [3443, 3445], [3446, 3455], [3455, 3456]]}) 
answer: set([u'a'])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced518>.answer
_____________________________ test_yesno[param323] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced5a8>, <src.tfidf.TF_IDF object at 0x7fbca33aa690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced5a8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.38675341010093689, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[45268, 45269], [45271, 45274], [45275, 45277], [45278, 45281], [45282, 45288], [45289, 45291], [45292, 45296], [45297, 45299], [45300, 45304], [45304, 45305]]}) 
answer: set([u'a', u'four', u'string', u'have'])
candidate Sentence: (0.21969939768314362, {u'tokens': [u'Violin', u'The', u'violin', u'is', u'a', u'bowed', u'string', u'instrument', u'with', u'four', u'strings', u'usually', u'tuned', u'in', u'perfect', u'fifths', u'.'], u'lemmas': [u'Violin', u'The', u'violin', u'be', u'a', u'bow', u'string', u'instrument', u'with', u'four', u'string', u'usually', u'tune', u'in', u'perfect', u'fifth', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'VBZ', u'DT', u'VBN', u'NN', u'NN', u'IN', u'CD', u'NNS', u'RB', u'VBN', u'IN', u'JJ', u'NNS', u'.'], u'char_offsets': [[0, 6], [10, 13], [14, 20], [21, 23], [24, 25], [26, 31], [32, 38], [39, 49], [50, 54], [55, 59], [60, 67], [68, 75], [76, 81], [82, 84], [85, 92], [93, 99], [99, 100]]}) 
answer: set([u'have'])
candidate Sentence: (0.21046352386474609, {u'tokens': [u'While', u'most', u'violins', u'have', u'four', u'strings', u',', u'there', u'are', u'some', u'instruments', u'with', u'five', u'strings', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'lemmas': [u'while', u'most', u'violin', u'have', u'four', u'string', u',', u'there', u'be', u'some', u'instrument', u'with', u'five', u'string', u',', u'six', u',', u'or', u'even', u'seven', u'.'], u'pos': [u'IN', u'JJS', u'NNS', u'VBP', u'CD', u'NNS', u',', u'EX', u'VBP', u'DT', u'NNS', u'IN', u'CD', u'NNS', u',', u'CD', u',', u'CC', u'RB', u'CD', u'.'], u'char_offsets': [[15017, 15022], [15023, 15027], [15028, 15035], [15036, 15040], [15041, 15045], [15046, 15053], [15053, 15054], [15055, 15060], [15061, 15064], [15065, 15069], [15070, 15081], [15082, 15086], [15087, 15091], [15092, 15099], [15099, 15100], [15104, 15107], [15107, 15108], [15109, 15111], [15112, 15116], [15117, 15122], [15122, 15123]]}) 
answer: set([u'a'])
candidate Sentence: (0.19715525209903717, {u'tokens': [u'In', u'addition', u',', u'many', u'fiddle', u'players', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuners', u'on', u'all', u'four', u'strings', u'instead', u'of', u'only', u'using', u'one', u'on', u'the', u'E', u'string', u'as', u'many', u'classical', u'players', u'do', u'.'], u'lemmas': [u'in', u'addition', u',', u'many', u'fiddle', u'player', u'prefer', u'to', u'use', u'a', u'tailpiece', u'with', u'fine', u'tuner', u'on', u'all', u'four', u'string', u'instead', u'of', u'only', u'use', u'one', u'on', u'the', u'e', u'string', u'as', u'many', u'classical', u'player', u'do', u'.'], u'pos': [u'IN', u'NN', u',', u'JJ', u'NN', u'NNS', u'VBP', u'TO', u'VB', u'DT', u'NN', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'CD', u'NNS', u'RB', u'IN', u'RB', u'VBG', u'CD', u'IN', u'DT', u'NN', u'NN', u'IN', u'JJ', u'JJ', u'NNS', u'VBP', u'.'], u'char_offsets': [[40085, 40087], [40088, 40096], [40096, 40097], [40098, 40102], [40103, 40109], [40110, 40117], [40118, 40124], [40125, 40127], [40128, 40131], [40132, 40133], [40134, 40143], [40144, 40148], [40149, 40153], [40154, 40160], [40161, 40163], [40164, 40167], [40168, 40172], [40173, 40180], [40181, 40188], [40189, 40191], [40192, 40196], [40197, 40202], [40203, 40206], [40207, 40209], [40210, 40213], [40214, 40215], [40216, 40222], [40223, 40225], [40226, 40230], [40231, 40240], [40241, 40248], [40249, 40251], [40251, 40252]]}) 
answer: set([u'violin', u'have'])
candidate Sentence: (0.18580682575702667, {u'tokens': [u'The', u'oldest', u'documented', u'violin', u'to', u'have', u'four', u'strings', u',', u'like', u'the', u'modern', u'violin', u',', u'is', u'supposed', u'to', u'have', u'been', u'constructed', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'is', u'doubtuful', u'.'], u'lemmas': [u'the', u'oldest', u'document', u'violin', u'to', u'have', u'four', u'string', u',', u'like', u'the', u'modern', u'violin', u',', u'be', u'suppose', u'to', u'have', u'be', u'construct', u'in', u'1555', u'by', u'Andrea', u'Amati', u',', u'but', u'the', u'date', u'be', u'doubtuful', u'.'], u'pos': [u'DT', u'JJS', u'VBN', u'NN', u'TO', u'VB', u'CD', u'NNS', u',', u'IN', u'DT', u'JJ', u'NN', u',', u'VBZ', u'VBN', u'TO', u'VB', u'VBN', u'VBN', u'IN', u'CD', u'IN', u'NNP', u'NNP', u',', u'CC', u'DT', u'NN', u'VBZ', u'JJ', u'.'], u'char_offsets': [[3293, 3296], [3297, 3303], [3304, 3314], [3315, 3321], [3322, 3324], [3325, 3329], [3330, 3334], [3335, 3342], [3342, 3343], [3344, 3348], [3349, 3352], [3353, 3359], [3360, 3366], [3366, 3367], [3368, 3370], [3371, 3379], [3380, 3382], [3383, 3387], [3388, 3392], [3393, 3404], [3405, 3407], [3408, 3412], [3413, 3415], [3416, 3422], [3423, 3428], [3428, 3429], [3430, 3433], [3434, 3437], [3438, 3442], [3443, 3445], [3446, 3455], [3455, 3456]]}) 
answer: set([u'a'])

Does a violin have four strings?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
INFO:CoreNLP_JavaServer: INPUT: 700 documents, 1437006 characters, 268633 tokens, 2052.9 char/doc, 383.8 tok/doc RATES: 19.138 doc/sec, 7344.3 tok/sec

Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced5a8>.answer
_____________________________ test_yesno[param326] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced758>, <src.tfidf.TF_IDF object at 0x7fbca33aa690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced758>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32859554886817932, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5575, 5576], [5577, 5588], [5589, 5596], [5597, 5599], [5600, 5601], [5602, 5608], [5609, 5613], [5614, 5616], [5617, 5620], [5621, 5622], [5622, 5631], [5631, 5632], [5633, 5638], [5639, 5642], [5643, 5646], [5647, 5654], [5655, 5657], [5658, 5661], [5662, 5665], [5666, 5669], [5670, 5674], [5674, 5675]]}) 
answer: set([u'like'])
candidate Sentence: (0.32378736138343811, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[45268, 45269], [45271, 45274], [45275, 45277], [45278, 45281], [45282, 45288], [45289, 45291], [45292, 45296], [45297, 45299], [45300, 45304], [45304, 45305]]}) 
answer: set([u'a', u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20854049921035767, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5676, 5679], [5680, 5689], [5690, 5695], [5696, 5705], [5706, 5709], [5710, 5715], [5716, 5721], [5721, 5722], [5723, 5726], [5727, 5732], [5733, 5738], [5738, 5739], [5740, 5743], [5744, 5747], [5748, 5755], [5756, 5763], [5764, 5766], [5767, 5770], [5771, 5772], [5772, 5777], [5777, 5778], [5778, 5779], [5780, 5789], [5790, 5799], [5800, 5803], [5804, 5807], [5808, 5811], [5811, 5812]]}) 
answer: set([u'a', u'violin', u'like'])
candidate Sentence: (0.15777778625488281, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10235, 10238], [10239, 10245], [10246, 10251], [10251, 10252], [10253, 10256], [10257, 10266], [10267, 10269], [10270, 10273], [10274, 10278], [10278, 10279], [10280, 10283], [10284, 10287], [10288, 10296], [10297, 10306], [10307, 10313], [10314, 10317], [10318, 10323], [10324, 10326], [10327, 10328], [10329, 10335], [10335, 10336]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.12685185670852661, {u'tokens': [u'The', u'electric', u'violin', u'has', u'even', u'been', u'used', u'by', u'bands', u'like', u'The', u'Crxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'based', u'music', u'.'], u'lemmas': [u'the', u'electric', u'violin', u'have', u'even', u'be', u'use', u'by', u'band', u'like', u'the', u'crxshadow', u'within', u'the', u'context', u'of', u'keyboard', u'base', u'music', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NN', u'VBN', u'NN', u'.'], u'char_offsets': [[38038, 38041], [38042, 38050], [38051, 38057], [38058, 38061], [38062, 38066], [38067, 38071], [38072, 38076], [38077, 38079], [38080, 38085], [38086, 38090], [38091, 38094], [38095, 38105], [38106, 38112], [38113, 38116], [38117, 38124], [38125, 38127], [38128, 38136], [38137, 38142], [38143, 38148], [38148, 38149]]}) 
answer: set([u'a', u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced758>.answer
_____________________________ test_yesno[param327] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced7e8>, <src.tfidf.TF_IDF object at 0x7fbca33aa690>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ced7e8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32859554886817932, {u'tokens': [u'A', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'is', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'lemmas': [u'a', u'distinctive', u'feature', u'of', u'a', u'violin', u'body', u'be', u'its', u'``', u'hourglass', u"''", u'shape', u'and', u'the', u'arching', u'of', u'its', u'top', u'and', u'back', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'VBZ', u'PRP$', u'``', u'NN', u"''", u'NN', u'CC', u'DT', u'NN', u'IN', u'PRP$', u'JJ', u'CC', u'RB', u'.'], u'char_offsets': [[5575, 5576], [5577, 5588], [5589, 5596], [5597, 5599], [5600, 5601], [5602, 5608], [5609, 5613], [5614, 5616], [5617, 5620], [5621, 5622], [5622, 5631], [5631, 5632], [5633, 5638], [5639, 5642], [5643, 5646], [5647, 5654], [5655, 5657], [5658, 5661], [5662, 5665], [5666, 5669], [5670, 5674], [5674, 5675]]}) 
answer: set([u'like'])
candidate Sentence: (0.32378736138343811, {u'tokens': [u'*', u'Why', u'is', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'lemmas': [u'*', u'why', u'be', u'the', u'violin', u'so', u'hard', u'to', u'play', u'?'], u'pos': [u'SYM', u'WRB', u'VBZ', u'DT', u'NN', u'RB', u'JJ', u'TO', u'VB', u'.'], u'char_offsets': [[45268, 45269], [45271, 45274], [45275, 45277], [45278, 45281], [45282, 45288], [45289, 45291], [45292, 45296], [45297, 45299], [45300, 45304], [45304, 45305]]}) 
answer: set([u'a', u'shape', u'like', u'hourglass'])
candidate Sentence: (0.20854049921035767, {u'tokens': [u'The', u'hourglass', u'shape', u'comprises', u'two', u'upper', u'bouts', u',', u'two', u'lower', u'bouts', u',', u'and', u'two', u'concave', u'C-bouts', u'at', u'the', u'``', u'waist', u',', u"''", u'providing', u'clearance', u'for', u'the', u'bow', u'.'], u'lemmas': [u'the', u'hourglass', u'shape', u'comprise', u'two', u'upper', u'bout', u',', u'two', u'lower', u'bout', u',', u'and', u'two', u'concave', u'c-bout', u'at', u'the', u'``', u'waist', u',', u"''", u'provide', u'clearance', u'for', u'the', u'bow', u'.'], u'pos': [u'DT', u'NN', u'NN', u'VBZ', u'CD', u'JJ', u'NNS', u',', u'CD', u'JJR', u'NNS', u',', u'CC', u'CD', u'JJ', u'NNS', u'IN', u'DT', u'``', u'NN', u',', u"''", u'VBG', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[5676, 5679], [5680, 5689], [5690, 5695], [5696, 5705], [5706, 5709], [5710, 5715], [5716, 5721], [5721, 5722], [5723, 5726], [5727, 5732], [5733, 5738], [5738, 5739], [5740, 5743], [5744, 5747], [5748, 5755], [5756, 5763], [5764, 5766], [5767, 5770], [5771, 5772], [5772, 5777], [5777, 5778], [5778, 5779], [5780, 5789], [5790, 5799], [5800, 5803], [5804, 5807], [5808, 5811], [5811, 5812]]}) 
answer: set([u'a', u'violin', u'like'])
candidate Sentence: (0.15777778625488281, {u'tokens': [u'The', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'qualities', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'lemmas': [u'the', u'arched', u'shape', u',', u'the', u'thickness', u'of', u'the', u'wood', u',', u'and', u'its', u'physical', u'quality', u'govern', u'the', u'sound', u'of', u'a', u'violin', u'.'], u'pos': [u'DT', u'JJ', u'NN', u',', u'DT', u'NN', u'IN', u'DT', u'NN', u',', u'CC', u'PRP$', u'JJ', u'NNS', u'VBP', u'DT', u'NN', u'IN', u'DT', u'NN', u'.'], u'char_offsets': [[10235, 10238], [10239, 10245], [10246, 10251], [10251, 10252], [10253, 10256], [10257, 10266], [10267, 10269], [10270, 10273], [10274, 10278], [10278, 10279], [10280, 10283], [10284, 10287], [10288, 10296], [10297, 10306], [10307, 10313], [10314, 10317], [10318, 10323], [10324, 10326], [10327, 10328], [10329, 10335], [10335, 10336]]}) 
answer: set([u'like', u'hourglass'])
candidate Sentence: (0.12685185670852661, {u'tokens': [u'The', u'electric', u'violin', u'has', u'even', u'been', u'used', u'by', u'bands', u'like', u'The', u'Crxshadows', u'within', u'the', u'context', u'of', u'keyboard', u'based', u'music', u'.'], u'lemmas': [u'the', u'electric', u'violin', u'have', u'even', u'be', u'use', u'by', u'band', u'like', u'the', u'crxshadow', u'within', u'the', u'context', u'of', u'keyboard', u'base', u'music', u'.'], u'pos': [u'DT', u'JJ', u'NN', u'VBZ', u'RB', u'VBN', u'VBN', u'IN', u'NNS', u'IN', u'DT', u'NNS', u'IN', u'DT', u'NN', u'IN', u'NN', u'VBN', u'NN', u'.'], u'char_offsets': [[38038, 38041], [38042, 38050], [38051, 38057], [38058, 38061], [38062, 38066], [38067, 38071], [38072, 38076], [38077, 38079], [38080, 38085], [38086, 38090], [38091, 38094], [38095, 38105], [38106, 38112], [38113, 38116], [38117, 38124], [38125, 38127], [38128, 38136], [38137, 38142], [38143, 38148], [38148, 38149]]}) 
answer: set([u'a', u'shape', u'hourglass'])

Is the violin shaped like an hourglass?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ced7e8>.answer
_____________________________ test_yesno[param328] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced878>, <src.tfidf.TF_IDF object at 0x7fbca451b9d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced878>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.27820256352424622, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[404, 408], [409, 412], [413, 415], [416, 421], [422, 424], [425, 426], [427, 435], [436, 441], [442, 444], [445, 448], [449, 456], [457, 462], [462, 463]]}) 
answer: set([u'instrument', u'xylophone'])
candidate Sentence: (0.16732187569141388, {u'tokens': [u'Xylophone', u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'Xylophone', u'The', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 9], [13, 16], [17, 26], [27, 28], [28, 32], [33, 36], [37, 42], [43, 48], [50, 51], [53, 58], [58, 59], [60, 61], [61, 65], [65, 66], [67, 68], [70, 71], [72, 77], [77, 78], [79, 80], [80, 85], [85, 86], [86, 87], [88, 95], [96, 97], [97, 103], [104, 109], [109, 110], [110, 111], [112, 114], [115, 116], [117, 124], [125, 135], [136, 138], [139, 142], [143, 153], [154, 160], [161, 166], [167, 175], [176, 186], [187, 189], [190, 199], [199, 200]]}) 
answer: set([])
candidate Sentence: (0.15233185887336731, {u'tokens': [u'1511', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"''"], u'lemmas': [u'1511', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"''"], u'pos': [u'CD', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[3780, 3784], [3786, 3791], [3792, 3800], [3801, 3808], [3809, 3811], [3812, 3818], [3819, 3827], [3828, 3834], [3835, 3842], [3842, 3843], [3844, 3848], [3850, 3856], [3857, 3859], [3860, 3870], [3871, 3873], [3874, 3877], [3878, 3887], [3888, 3890], [3891, 3898], [3899, 3910], [3911, 3912], [3912, 3918], [3918, 3919], [3921, 3932], [3932, 3933], [3934, 3936], [3937, 3943], [3944, 3953], [3953, 3954], [3955, 3957], [3958, 3966], [3966, 3967], [3968, 3970], [3971, 3976], [3977, 3983], [3984, 3985], [3987, 3991], [3991, 3992], [3993, 3998], [3999, 4000], [4002, 4005], [4006, 4010], [4011, 4020], [4021, 4023], [4024, 4030], [4030, 4031], [4032, 4040], [4041, 4043], [4044, 4047], [4048, 4057], [4057, 4058], [4059, 4060], [4060, 4061], [4062, 4069], [4070, 4073], [4074, 4077], [4078, 4082], [4083, 4092], [4093, 4099], [4100, 4104], [4105, 4111], [4112, 4122], [4123, 4125], [4126, 4127], [4128, 4135], [4136, 4138], [4139, 4145], [4146, 4150], [4150, 4151], [4152, 4158], [4159, 4162], [4163, 4164], [4164, 4173], [4173, 4174], [4174, 4175]]}) 
answer: set([])
candidate Sentence: (0.15090614557266235, {u'tokens': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'NNP', u'POS', u'``', u'NN', u'CC', u'NN', u'NN', u"''", u',', u'IN', u'NNP', u'POS', u'``', u'NNP', u"''", u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[827, 834], [834, 836], [837, 838], [838, 842], [843, 846], [847, 852], [853, 863], [863, 864], [864, 865], [866, 870], [871, 877], [877, 879], [880, 881], [881, 887], [887, 888], [889, 892], [893, 902], [903, 905], [906, 908], [909, 916], [917, 927], [928, 932], [933, 943], [944, 957], [958, 960], [961, 967], [968, 971], [972, 976], [976, 977]]}) 
answer: set([u'musical'])
candidate Sentence: (0.12369772046804428, {u'tokens': [u'Certainly', u'in', u'the', u'1830s', u'a', u'xylophone', u'solo', u'was', u'a', u'novelty', u'.'], u'lemmas': [u'certainly', u'in', u'the', u'1830s', u'a', u'xylophone', u'solo', u'be', u'a', u'novelty', u'.'], u'pos': [u'RB', u'IN', u'DT', u'CD', u'DT', u'NN', u'NN', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[2896, 2905], [2906, 2908], [2909, 2912], [2913, 2918], [2919, 2920], [2921, 2930], [2931, 2935], [2936, 2939], [2940, 2941], [2942, 2949], [2949, 2950]]}) 
answer: set([u'instrument', u'musical'])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0ced878>.answer
_____________________________ test_yesno[param329] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0ced908>, <src.tfidf.TF_IDF object at 0x7fbca451b9d0>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes.')
E                +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ced908>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.27820256352424622, {u'tokens': [u'Each', u'bar', u'is', u'tuned', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'lemmas': [u'each', u'bar', u'be', u'tune', u'to', u'a', u'specific', u'pitch', u'of', u'the', u'musical', u'scale', u'.'], u'pos': [u'DT', u'NN', u'VBZ', u'VBN', u'TO', u'DT', u'JJ', u'NN', u'IN', u'DT', u'JJ', u'NN', u'.'], u'char_offsets': [[404, 408], [409, 412], [413, 415], [416, 421], [422, 424], [425, 426], [427, 435], [436, 441], [442, 444], [445, 448], [449, 456], [457, 462], [462, 463]]}) 
answer: set([u'instrument', u'xylophone'])
candidate Sentence: (0.16732187569141388, {u'tokens': [u'Xylophone', u'The', u'xylophone', u'-LRB-', u'from', u'the', u'Greek', u'words', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'meaning', u'``', u'wooden', u'sound', u"''", u'-RRB-', u'is', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originated', u'in', u'Indonesia', u'.'], u'lemmas': [u'Xylophone', u'The', u'xylophone', u'-lrb-', u'from', u'the', u'greek', u'word', u'-', u'xylon', u',', u'``', u'wood', u"''", u'+', u'-', u'phone', u',', u'``', u'voice', u"''", u',', u'mean', u'``', u'wooden', u'sound', u"''", u'-rrb-', u'be', u'a', u'musical', u'instrument', u'in', u'the', u'percussion', u'family', u'which', u'probably', u'originate', u'in', u'Indonesia', u'.'], u'pos': [u'NNP', u'NNP', u'NN', u'-LRB-', u'IN', u'DT', u'JJ', u'NNS', u':', u'NN', u',', u'``', u'NN', u"''", u'CC', u':', u'NN', u',', u'``', u'NN', u"''", u',', u'VBG', u'``', u'JJ', u'NN', u"''", u'-RRB-', u'VBZ', u'DT', u'JJ', u'NN', u'IN', u'DT', u'NN', u'NN', u'WDT', u'RB', u'VBD', u'IN', u'NNP', u'.'], u'char_offsets': [[0, 9], [13, 16], [17, 26], [27, 28], [28, 32], [33, 36], [37, 42], [43, 48], [50, 51], [53, 58], [58, 59], [60, 61], [61, 65], [65, 66], [67, 68], [70, 71], [72, 77], [77, 78], [79, 80], [80, 85], [85, 86], [86, 87], [88, 95], [96, 97], [97, 103], [104, 109], [109, 110], [110, 111], [112, 114], [115, 116], [117, 124], [125, 135], [136, 138], [139, 142], [143, 153], [154, 160], [161, 166], [167, 175], [176, 186], [187, 189], [190, 199], [199, 200]]}) 
answer: set([])
candidate Sentence: (0.15233185887336731, {u'tokens': [u'1511', u'First', u'European', u'mention', u'by', u'German', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'listed', u'by', u'Praetorius', u'in', u'his', u'catalogue', u'of', u'musical', u'instruments', u'-LRB-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-RRB-', u'1866', u',', u'April', u'7', u'The', u'word', u'xylophone', u'is', u'coined', u',', u'recorded', u'in', u'the', u'Athenaeum', u':', u'``', u'A', u'prodigy', u'...', u'who', u'does', u'wonderful', u'things', u'with', u'little', u'drumsticks', u'on', u'a', u'machine', u'of', u'wooden', u'keys', u',', u'called', u'the', u'`', u'xylophone', u'.', u"''"], u'lemmas': [u'1511', u'first', u'european', u'mention', u'by', u'german', u'composer', u'Arnolt', u'Schlick', u';', u'also', u'list', u'by', u'Praetorius', u'in', u'he', u'catalogue', u'of', u'musical', u'instrument', u'-lrb-', u'a.k.a.', u',', u'Strohfideln', u',', u'or', u'Hulzen', u"G'lachter", u',', u'or', u'Gigelyra', u',', u'or', u'straw', u'fiddle', u'-rrb-', u'1866', u',', u'April', u'7', u'the', u'word', u'xylophone', u'be', u'coin', u',', u'record', u'in', u'the', u'Athenaeum', u':', u'``', u'a', u'prodigy', u'...', u'who', u'do', u'wonderful', u'thing', u'with', u'little', u'drumstick', u'on', u'a', u'machine', u'of', u'wooden', u'key', u',', u'call', u'the', u'`', u'xylophone', u'.', u"''"], u'pos': [u'CD', u'JJ', u'JJ', u'NN', u'IN', u'JJ', u'NN', u'NNP', u'NNP', u':', u'RB', u'VBN', u'IN', u'NNP', u'IN', u'PRP$', u'NN', u'IN', u'JJ', u'NNS', u'-LRB-', u'NN', u',', u'NNP', u',', u'CC', u'NNP', u'NNP', u',', u'CC', u'NNP', u',', u'CC', u'NN', u'NN', u'-RRB-', u'NNP', u',', u'NNP', u'CD', u'DT', u'NN', u'NN', u'VBZ', u'VBN', u',', u'VBN', u'IN', u'DT', u'NNP', u':', u'``', u'DT', u'NN', u':', u'WP', u'VBZ', u'JJ', u'NNS', u'IN', u'JJ', u'NNS', u'IN', u'DT', u'NN', u'IN', u'JJ', u'NNS', u',', u'VBD', u'DT', u'``', u'NN', u'.', u"''"], u'char_offsets': [[3780, 3784], [3786, 3791], [3792, 3800], [3801, 3808], [3809, 3811], [3812, 3818], [3819, 3827], [3828, 3834], [3835, 3842], [3842, 3843], [3844, 3848], [3850, 3856], [3857, 3859], [3860, 3870], [3871, 3873], [3874, 3877], [3878, 3887], [3888, 3890], [3891, 3898], [3899, 3910], [3911, 3912], [3912, 3918], [3918, 3919], [3921, 3932], [3932, 3933], [3934, 3936], [3937, 3943], [3944, 3953], [3953, 3954], [3955, 3957], [3958, 3966], [3966, 3967], [3968, 3970], [3971, 3976], [3977, 3983], [3984, 3985], [3987, 3991], [3991, 3992], [3993, 3998], [3999, 4000], [4002, 4005], [4006, 4010], [4011, 4020], [4021, 4023], [4024, 4030], [4030, 4031], [4032, 4040], [4041, 4043], [4044, 4047], [4048, 4057], [4057, 4058], [4059, 4060], [4060, 4061], [4062, 4069], [4070, 4073], [4074, 4077], [4078, 4082], [4083, 4092], [4093, 4099], [4100, 4104], [4105, 4111], [4112, 4122], [4123, 4125], [4126, 4127], [4128, 4135], [4136, 4138], [4139, 4145], [4146, 4150], [4150, 4151], [4152, 4158], [4159, 4162], [4163, 4164], [4164, 4173], [4173, 4174], [4174, 4175]]}) 
answer: set([])
candidate Sentence: (0.15090614557266235, {u'tokens': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'The', u'xylophone', u'is', u'an', u'ancient', u'instrument', u'that', u'originated', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'lemmas': [u'Gusikow', u"'s", u'`', u'wood', u'and', u'straw', u'instrument', u"'", u',', u'from', u'Lewald', u"'s", u'`', u'Europa', u"'", u'the', u'xylophone', u'be', u'a', u'ancient', u'instrument', u'that', u'originate', u'independently', u'in', u'Africa', u'and', u'Asia', u'.'], u'pos': [u'NNP', u'POS', u'``', u'NN', u'CC', u'NN', u'NN', u"''", u',', u'IN', u'NNP', u'POS', u'``', u'NNP', u"''", u'DT', u'NN', u'VBZ', u'DT', u'JJ', u'NN', u'WDT', u'VBD', u'RB', u'IN', u'NNP', u'CC', u'NNP', u'.'], u'char_offsets': [[827, 834], [834, 836], [837, 838], [838, 842], [843, 846], [847, 852], [853, 863], [863, 864], [864, 865], [866, 870], [871, 877], [877, 879], [880, 881], [881, 887], [887, 888], [889, 892], [893, 902], [903, 905], [906, 908], [909, 916], [917, 927], [928, 932], [933, 943], [944, 957], [958, 960], [961, 967], [968, 971], [972, 976], [976, 977]]}) 
answer: set([u'musical'])
candidate Sentence: (0.12369772046804428, {u'tokens': [u'Certainly', u'in', u'the', u'1830s', u'a', u'xylophone', u'solo', u'was', u'a', u'novelty', u'.'], u'lemmas': [u'certainly', u'in', u'the', u'1830s', u'a', u'xylophone', u'solo', u'be', u'a', u'novelty', u'.'], u'pos': [u'RB', u'IN', u'DT', u'CD', u'DT', u'NN', u'NN', u'VBD', u'DT', u'NN', u'.'], u'char_offsets': [[2896, 2905], [2906, 2908], [2909, 2912], [2913, 2918], [2919, 2920], [2921, 2930], [2931, 2935], [2936, 2939], [2940, 2941], [2942, 2949], [2949, 2950]]}) 
answer: set([u'instrument', u'musical'])

Is the xylophone a musical instrument?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes.
Difficulty = easy

['No', 'Yes', 'Yes', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes.')
 +    where 'Yes.' = <src.question_processing.Question_parser instance at 0x7fbca0ced908>.answer
_____________________________ test_yesno[param338] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cede18>, <src.tfidf.TF_IDF object at 0x7fbca5b43890>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('yes')
E                +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cede18>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32007360458374023, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4665, 4667], [4668, 4677], [4677, 4678], [4679, 4685], [4686, 4692], [4693, 4697], [4698, 4702], [4703, 4710], [4711, 4715], [4716, 4724], [4725, 4731], [4731, 4732]]}) 
answer: set([u'plain'])
candidate Sentence: (0.2430940568447113, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8532, 8540], [8541, 8547], [8548, 8551], [8552, 8558], [8559, 8565], [8566, 8570], [8571, 8573], [8574, 8580], [8580, 8581], [8582, 8587], [8588, 8590], [8591, 8592], [8592, 8598], [8598, 8599], [8599, 8600], [8601, 8611], [8612, 8614], [8615, 8618], [8619, 8627], [8628, 8632], [8633, 8635], [8636, 8638], [8639, 8642], [8643, 8648], [8649, 8652], [8653, 8658], [8659, 8664], [8664, 8665]]}) 
answer: set([u'be', u'cross'])
candidate Sentence: (0.20109650492668152, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[12572, 12575], [12576, 12580], [12581, 12589], [12590, 12595], [12596, 12599], [12600, 12606], [12607, 12609], [12610, 12614], [12615, 12625], [12626, 12630], [12631, 12635], [12636, 12640], [12641, 12644], [12645, 12656], [12657, 12659], [12660, 12663], [12664, 12669], [12669, 12670]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.1885819137096405, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5583, 5586], [5587, 5588], [5588, 5593], [5594, 5602], [5602, 5603], [5604, 5606], [5607, 5612], [5613, 5618], [5619, 5622], [5623, 5628], [5628, 5630], [5631, 5636], [5637, 5640], [5641, 5646], [5647, 5654], [5654, 5655]]}) 
answer: set([u'mountain', u'with', u'plain'])
candidate Sentence: (0.13745208084583282, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1060, 1064], [1065, 1068], [1069, 1071], [1072, 1077], [1078, 1080], [1081, 1082], [1083, 1090], [1091, 1093], [1094, 1102], [1102, 1103], [1104, 1108], [1109, 1111], [1112, 1122], [1122, 1123], [1124, 1132], [1132, 1133], [1134, 1143], [1143, 1144], [1145, 1151], [1152, 1162], [1162, 1163], [1164, 1173], [1174, 1177], [1178, 1185], [1186, 1191], [1191, 1192]]}) 
answer: set([u'plain', u'with', u'cross', u'zebra'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('yes')
 +    where 'yes' = <src.question_processing.Question_parser instance at 0x7fbca0cede18>.answer
_____________________________ test_yesno[param339] _____________________________

param = (<src.question_processing.Question_parser instance at 0x7fbca0cedea8>, <src.tfidf.TF_IDF object at 0x7fbca5b43890>)

    def test_yesno(param):
        qpobj = param[0]
        objTfidf = param[1]
    
        questionProcess = Question_parser(qpobj.question)
        # if questionProcess.qtype != "BOOLEAN" or questionProcess.difficulty =="NA" or qpobj.difficulty == "NA" or questionProcess.answer_type== "NA":
        #     return
        if questionProcess.valid: #questionProcess.difficulty == "easy" :
            try:
                interestingText = objTfidf.getInterestingText(qpobj.question)
                ans = answerYesNo(qpobj.question, interestingText, questionProcess)
                # assert True == str2bool(qpobj.answer)
                assert str2bool(qpobj.answer)== str2bool(ans[0])
                # assert False == True
            except Exception, e:
                traceback.print_exc()
                print qpobj
                print ans
>               raise e
E               assert True == str2bool('No')
E                +  where True = str2bool('Yes')
E                +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cedea8>.answer

test_compute.py:40: AssertionError
------------------------------- Captured stdout --------------------------------
candidate Sentence: (0.32007360458374023, {u'tokens': [u'In', u'captivity', u',', u'Plains', u'Zebras', u'have', u'been', u'crossed', u'with', u'Mountain', u'zebras', u'.'], u'lemmas': [u'in', u'captivity', u',', u'Plains', u'Zebras', u'have', u'be', u'cross', u'with', u'Mountain', u'zebra', u'.'], u'pos': [u'IN', u'NN', u',', u'NNP', u'NNPS', u'VBP', u'VBN', u'VBN', u'IN', u'NNP', u'NNS', u'.'], u'char_offsets': [[4665, 4667], [4668, 4677], [4677, 4678], [4679, 4685], [4686, 4692], [4693, 4697], [4698, 4702], [4703, 4710], [4711, 4715], [4716, 4724], [4725, 4731], [4731, 4732]]}) 
answer: set([u'plain'])
candidate Sentence: (0.2430940568447113, {u'tokens': [u'Mountain', u'zebras', u'and', u'Plains', u'zebras', u'live', u'in', u'groups', u',', u'known', u'as', u'`', u'harems', u"'", u',', u'consisting', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mares', u'and', u'their', u'foals', u'.'], u'lemmas': [u'Mountain', u'zebra', u'and', u'plain', u'zebra', u'live', u'in', u'group', u',', u'know', u'as', u'`', u'harem', u"'", u',', u'consist', u'of', u'one', u'stallion', u'with', u'up', u'to', u'six', u'mare', u'and', u'they', u'foal', u'.'], u'pos': [u'NNP', u'NNS', u'CC', u'NNS', u'NNS', u'VBP', u'IN', u'NNS', u',', u'VBN', u'IN', u'``', u'NNS', u"''", u',', u'VBG', u'IN', u'CD', u'NN', u'IN', u'RB', u'TO', u'CD', u'NNS', u'CC', u'PRP$', u'NNS', u'.'], u'char_offsets': [[8532, 8540], [8541, 8547], [8548, 8551], [8552, 8558], [8559, 8565], [8566, 8570], [8571, 8573], [8574, 8580], [8580, 8581], [8582, 8587], [8588, 8590], [8591, 8592], [8592, 8598], [8598, 8599], [8599, 8600], [8601, 8611], [8612, 8614], [8615, 8618], [8619, 8627], [8628, 8632], [8633, 8635], [8636, 8638], [8639, 8642], [8643, 8648], [8649, 8652], [8653, 8658], [8659, 8664], [8664, 8665]]}) 
answer: set([u'be', u'cross'])
candidate Sentence: (0.20109650492668152, {u'tokens': [u'The', u'Cape', u'mountain', u'zebra', u'was', u'hunted', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individuals', u'by', u'the', u'1930s', u'.'], u'lemmas': [u'the', u'Cape', u'mountain', u'zebra', u'be', u'hunt', u'to', u'near', u'extinction', u'with', u'less', u'than', u'100', u'individual', u'by', u'the', u'1930', u'.'], u'pos': [u'DT', u'NNP', u'NN', u'NN', u'VBD', u'VBN', u'TO', u'IN', u'NN', u'IN', u'JJR', u'IN', u'CD', u'NNS', u'IN', u'DT', u'NNS', u'.'], u'char_offsets': [[12572, 12575], [12576, 12580], [12581, 12589], [12590, 12595], [12596, 12599], [12600, 12606], [12607, 12609], [12610, 12614], [12615, 12625], [12626, 12630], [12631, 12635], [12636, 12640], [12641, 12644], [12645, 12656], [12657, 12659], [12660, 12663], [12664, 12669], [12669, 12670]]}) 
answer: set([u'plain', u'cross'])
candidate Sentence: (0.1885819137096405, {u'tokens': [u'The', u'``', u'zebra', u'crossing', u"''", u'is', u'named', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripes', u'.'], u'lemmas': [u'the', u'``', u'zebra', u'cross', u"''", u'be', u'name', u'after', u'the', u'zebra', u"'s", u'black', u'and', u'white', u'stripe', u'.'], u'pos': [u'DT', u'``', u'NN', u'VBG', u"''", u'VBZ', u'VBN', u'IN', u'DT', u'NN', u'POS', u'JJ', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[5583, 5586], [5587, 5588], [5588, 5593], [5594, 5602], [5602, 5603], [5604, 5606], [5607, 5612], [5613, 5618], [5619, 5622], [5623, 5628], [5628, 5630], [5631, 5636], [5637, 5640], [5641, 5646], [5647, 5654], [5654, 5655]]}) 
answer: set([u'mountain', u'with', u'plain'])
candidate Sentence: (0.13745208084583282, {u'tokens': [u'They', u'can', u'be', u'found', u'in', u'a', u'variety', u'of', u'habitats', u',', u'such', u'as', u'grasslands', u',', u'savannas', u',', u'woodlands', u',', u'thorny', u'scrublands', u',', u'mountains', u'and', u'coastal', u'hills', u'.'], u'lemmas': [u'they', u'can', u'be', u'find', u'in', u'a', u'variety', u'of', u'habitat', u',', u'such', u'as', u'grassland', u',', u'savanna', u',', u'woodland', u',', u'thorny', u'scrubland', u',', u'mountain', u'and', u'coastal', u'hill', u'.'], u'pos': [u'PRP', u'MD', u'VB', u'VBN', u'IN', u'DT', u'NN', u'IN', u'NNS', u',', u'JJ', u'IN', u'NNS', u',', u'NNS', u',', u'NNS', u',', u'JJ', u'NNS', u',', u'NNS', u'CC', u'JJ', u'NNS', u'.'], u'char_offsets': [[1060, 1064], [1065, 1068], [1069, 1071], [1072, 1077], [1078, 1080], [1081, 1082], [1083, 1090], [1091, 1093], [1094, 1102], [1102, 1103], [1104, 1108], [1109, 1111], [1112, 1122], [1122, 1123], [1124, 1132], [1132, 1133], [1134, 1143], [1143, 1144], [1145, 1151], [1152, 1162], [1162, 1163], [1164, 1173], [1174, 1177], [1178, 1185], [1186, 1191], [1191, 1192]]}) 
answer: set([u'plain', u'with', u'cross', u'zebra'])

Have plains zebras been crossed with mountain zebras?
Validity= False
Question Type = NA
Answer Type = NA
Answer = Yes
Difficulty = easy

['No', 'No', 'No', 'No', 'No']
------------------------------- Captured stderr --------------------------------
Traceback (most recent call last):
  File "/home/karan/Desktop/Sem-2/11-611/NLP_project/tests/test_compute.py", line 34, in test_yesno
    assert str2bool(qpobj.answer)== str2bool(ans[0])
AssertionError: assert True == str2bool('No')
 +  where True = str2bool('Yes')
 +    where 'Yes' = <src.question_processing.Question_parser instance at 0x7fbca0cedea8>.answer
=================== 125 failed, 215 passed in 37.38 seconds ====================
